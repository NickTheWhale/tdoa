
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
{
    LOG_DBG("Tag init");
}

static void tag_on_event(void)   
{
   0:	48 56 00 20 69 72 00 00 6d e9 00 00 3d 72 00 00     HV. ir..m...=r..
    LOG_DBG("Tag on event");
  10:	3d 72 00 00 3d 72 00 00 3d 72 00 00 00 00 00 00     =r..=r..=r......
	...
}
  2c:	c5 6a 00 00 3d 72 00 00 00 00 00 00 79 6a 00 00     .j..=r......yj..
  3c:	3d 72 00 00                                         =r..

00000040 <_irq_vector_table>:
  40:	41 6b 00 00 41 6b 00 00 41 6b 00 00 41 6b 00 00     Ak..Ak..Ak..Ak..
  50:	41 6b 00 00 41 6b 00 00 41 6b 00 00 41 6b 00 00     Ak..Ak..Ak..Ak..
  60:	41 6b 00 00 41 6b 00 00 41 6b 00 00 41 6b 00 00     Ak..Ak..Ak..Ak..
  70:	41 6b 00 00 41 6b 00 00 41 6b 00 00 41 6b 00 00     Ak..Ak..Ak..Ak..
  80:	41 6b 00 00 41 6b 00 00 41 6b 00 00 41 6b 00 00     Ak..Ak..Ak..Ak..
  90:	41 6b 00 00 41 6b 00 00 41 6b 00 00 41 6b 00 00     Ak..Ak..Ak..Ak..
  a0:	41 6b 00 00 41 6b 00 00 41 6b 00 00 41 6b 00 00     Ak..Ak..Ak..Ak..
  b0:	41 6b 00 00 41 6b 00 00 41 6b 00 00 41 6b 00 00     Ak..Ak..Ak..Ak..
  c0:	41 6b 00 00 41 6b 00 00 41 6b 00 00 41 6b 00 00     Ak..Ak..Ak..Ak..
  d0:	41 6b 00 00 41 6b 00 00 41 6b 00 00                 Ak..Ak..Ak..

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295
      ec:	f04f 30ff 	movne.w	r0, #4294967295
      f0:	f000 b80c 	b.w	10c <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f808 	bl	110 <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__aeabi_idiv0>:
     10c:	4770      	bx	lr
     10e:	bf00      	nop

00000110 <__udivmoddi4>:
     110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     114:	4686      	mov	lr, r0
     116:	468c      	mov	ip, r1
     118:	4608      	mov	r0, r1
     11a:	9e08      	ldr	r6, [sp, #32]
     11c:	4615      	mov	r5, r2
     11e:	4674      	mov	r4, lr
     120:	4619      	mov	r1, r3
     122:	2b00      	cmp	r3, #0
     124:	f040 80c2 	bne.w	2ac <__data_size+0x57>
     128:	4285      	cmp	r5, r0
     12a:	fab2 f282 	clz	r2, r2
     12e:	d945      	bls.n	1bc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4f>
     130:	b14a      	cbz	r2, 146 <CONFIG_IDLE_STACK_SIZE+0x6>
     132:	f1c2 0320 	rsb	r3, r2, #32
     136:	fa00 fc02 	lsl.w	ip, r0, r2
     13a:	fa2e f303 	lsr.w	r3, lr, r3
     13e:	4095      	lsls	r5, r2
     140:	ea43 0c0c 	orr.w	ip, r3, ip
     144:	4094      	lsls	r4, r2
     146:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     14a:	b2a8      	uxth	r0, r5
     14c:	fbbc f8fe 	udiv	r8, ip, lr
     150:	0c23      	lsrs	r3, r4, #16
     152:	fb0e cc18 	mls	ip, lr, r8, ip
     156:	fb08 f900 	mul.w	r9, r8, r0
     15a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     15e:	4599      	cmp	r9, r3
     160:	d928      	bls.n	1b4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x47>
     162:	18eb      	adds	r3, r5, r3
     164:	f108 37ff 	add.w	r7, r8, #4294967295
     168:	d204      	bcs.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     16a:	4599      	cmp	r9, r3
     16c:	d902      	bls.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     16e:	f1a8 0702 	sub.w	r7, r8, #2
     172:	442b      	add	r3, r5
     174:	eba3 0309 	sub.w	r3, r3, r9
     178:	b2a4      	uxth	r4, r4
     17a:	fbb3 fcfe 	udiv	ip, r3, lr
     17e:	fb0e 331c 	mls	r3, lr, ip, r3
     182:	fb0c f000 	mul.w	r0, ip, r0
     186:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     18a:	42a0      	cmp	r0, r4
     18c:	d914      	bls.n	1b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4b>
     18e:	192c      	adds	r4, r5, r4
     190:	f10c 33ff 	add.w	r3, ip, #4294967295
     194:	d204      	bcs.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     196:	42a0      	cmp	r0, r4
     198:	d902      	bls.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     19a:	f1ac 0302 	sub.w	r3, ip, #2
     19e:	442c      	add	r4, r5
     1a0:	1a24      	subs	r4, r4, r0
     1a2:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     1a6:	b11e      	cbz	r6, 1b0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x43>
     1a8:	40d4      	lsrs	r4, r2
     1aa:	2300      	movs	r3, #0
     1ac:	6034      	str	r4, [r6, #0]
     1ae:	6073      	str	r3, [r6, #4]
     1b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b4:	4647      	mov	r7, r8
     1b6:	e7dd      	b.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     1b8:	4663      	mov	r3, ip
     1ba:	e7f1      	b.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     1bc:	bb92      	cbnz	r2, 224 <CONFIG_FLASH_SIZE+0x24>
     1be:	1b43      	subs	r3, r0, r5
     1c0:	2101      	movs	r1, #1
     1c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1c6:	b2af      	uxth	r7, r5
     1c8:	fbb3 fcfe 	udiv	ip, r3, lr
     1cc:	0c20      	lsrs	r0, r4, #16
     1ce:	fb0e 331c 	mls	r3, lr, ip, r3
     1d2:	fb0c f807 	mul.w	r8, ip, r7
     1d6:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1da:	4598      	cmp	r8, r3
     1dc:	d962      	bls.n	2a4 <__data_size+0x4f>
     1de:	18eb      	adds	r3, r5, r3
     1e0:	f10c 30ff 	add.w	r0, ip, #4294967295
     1e4:	d204      	bcs.n	1f0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x83>
     1e6:	4598      	cmp	r8, r3
     1e8:	d902      	bls.n	1f0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x83>
     1ea:	f1ac 0002 	sub.w	r0, ip, #2
     1ee:	442b      	add	r3, r5
     1f0:	eba3 0308 	sub.w	r3, r3, r8
     1f4:	b2a4      	uxth	r4, r4
     1f6:	fbb3 fcfe 	udiv	ip, r3, lr
     1fa:	fb0e 331c 	mls	r3, lr, ip, r3
     1fe:	fb0c f707 	mul.w	r7, ip, r7
     202:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     206:	42a7      	cmp	r7, r4
     208:	d94e      	bls.n	2a8 <__data_size+0x53>
     20a:	192c      	adds	r4, r5, r4
     20c:	f10c 33ff 	add.w	r3, ip, #4294967295
     210:	d204      	bcs.n	21c <CONFIG_FLASH_SIZE+0x1c>
     212:	42a7      	cmp	r7, r4
     214:	d902      	bls.n	21c <CONFIG_FLASH_SIZE+0x1c>
     216:	f1ac 0302 	sub.w	r3, ip, #2
     21a:	442c      	add	r4, r5
     21c:	1be4      	subs	r4, r4, r7
     21e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     222:	e7c0      	b.n	1a6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x39>
     224:	f1c2 0320 	rsb	r3, r2, #32
     228:	fa20 f103 	lsr.w	r1, r0, r3
     22c:	4095      	lsls	r5, r2
     22e:	4090      	lsls	r0, r2
     230:	fa2e f303 	lsr.w	r3, lr, r3
     234:	4303      	orrs	r3, r0
     236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23a:	b2af      	uxth	r7, r5
     23c:	fbb1 fcfe 	udiv	ip, r1, lr
     240:	fb0e 101c 	mls	r0, lr, ip, r1
     244:	0c19      	lsrs	r1, r3, #16
     246:	fb0c f807 	mul.w	r8, ip, r7
     24a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     24e:	4588      	cmp	r8, r1
     250:	fa04 f402 	lsl.w	r4, r4, r2
     254:	d922      	bls.n	29c <__data_size+0x47>
     256:	1869      	adds	r1, r5, r1
     258:	f10c 30ff 	add.w	r0, ip, #4294967295
     25c:	d204      	bcs.n	268 <__data_size+0x13>
     25e:	4588      	cmp	r8, r1
     260:	d902      	bls.n	268 <__data_size+0x13>
     262:	f1ac 0002 	sub.w	r0, ip, #2
     266:	4429      	add	r1, r5
     268:	eba1 0108 	sub.w	r1, r1, r8
     26c:	b29b      	uxth	r3, r3
     26e:	fbb1 fcfe 	udiv	ip, r1, lr
     272:	fb0e 111c 	mls	r1, lr, ip, r1
     276:	fb0c f707 	mul.w	r7, ip, r7
     27a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     27e:	429f      	cmp	r7, r3
     280:	d90e      	bls.n	2a0 <__data_size+0x4b>
     282:	18eb      	adds	r3, r5, r3
     284:	f10c 31ff 	add.w	r1, ip, #4294967295
     288:	d204      	bcs.n	294 <__data_size+0x3f>
     28a:	429f      	cmp	r7, r3
     28c:	d902      	bls.n	294 <__data_size+0x3f>
     28e:	f1ac 0102 	sub.w	r1, ip, #2
     292:	442b      	add	r3, r5
     294:	1bdb      	subs	r3, r3, r7
     296:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     29a:	e792      	b.n	1c2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x55>
     29c:	4660      	mov	r0, ip
     29e:	e7e3      	b.n	268 <__data_size+0x13>
     2a0:	4661      	mov	r1, ip
     2a2:	e7f7      	b.n	294 <__data_size+0x3f>
     2a4:	4660      	mov	r0, ip
     2a6:	e7a3      	b.n	1f0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x83>
     2a8:	4663      	mov	r3, ip
     2aa:	e7b7      	b.n	21c <CONFIG_FLASH_SIZE+0x1c>
     2ac:	4283      	cmp	r3, r0
     2ae:	d906      	bls.n	2be <__data_size+0x69>
     2b0:	b916      	cbnz	r6, 2b8 <__data_size+0x63>
     2b2:	2100      	movs	r1, #0
     2b4:	4608      	mov	r0, r1
     2b6:	e77b      	b.n	1b0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x43>
     2b8:	e9c6 e000 	strd	lr, r0, [r6]
     2bc:	e7f9      	b.n	2b2 <__data_size+0x5d>
     2be:	fab3 f783 	clz	r7, r3
     2c2:	b98f      	cbnz	r7, 2e8 <__data_size+0x93>
     2c4:	4283      	cmp	r3, r0
     2c6:	d301      	bcc.n	2cc <__data_size+0x77>
     2c8:	4572      	cmp	r2, lr
     2ca:	d808      	bhi.n	2de <__data_size+0x89>
     2cc:	ebbe 0402 	subs.w	r4, lr, r2
     2d0:	eb60 0303 	sbc.w	r3, r0, r3
     2d4:	2001      	movs	r0, #1
     2d6:	469c      	mov	ip, r3
     2d8:	b91e      	cbnz	r6, 2e2 <__data_size+0x8d>
     2da:	2100      	movs	r1, #0
     2dc:	e768      	b.n	1b0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x43>
     2de:	4638      	mov	r0, r7
     2e0:	e7fa      	b.n	2d8 <__data_size+0x83>
     2e2:	e9c6 4c00 	strd	r4, ip, [r6]
     2e6:	e7f8      	b.n	2da <__data_size+0x85>
     2e8:	f1c7 0c20 	rsb	ip, r7, #32
     2ec:	40bb      	lsls	r3, r7
     2ee:	fa22 f40c 	lsr.w	r4, r2, ip
     2f2:	431c      	orrs	r4, r3
     2f4:	fa2e f10c 	lsr.w	r1, lr, ip
     2f8:	fa20 f30c 	lsr.w	r3, r0, ip
     2fc:	40b8      	lsls	r0, r7
     2fe:	4301      	orrs	r1, r0
     300:	ea4f 4914 	mov.w	r9, r4, lsr #16
     304:	fa0e f507 	lsl.w	r5, lr, r7
     308:	fbb3 f8f9 	udiv	r8, r3, r9
     30c:	fa1f fe84 	uxth.w	lr, r4
     310:	fb09 3018 	mls	r0, r9, r8, r3
     314:	0c0b      	lsrs	r3, r1, #16
     316:	fb08 fa0e 	mul.w	sl, r8, lr
     31a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     31e:	459a      	cmp	sl, r3
     320:	fa02 f207 	lsl.w	r2, r2, r7
     324:	d940      	bls.n	3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     326:	18e3      	adds	r3, r4, r3
     328:	f108 30ff 	add.w	r0, r8, #4294967295
     32c:	d204      	bcs.n	338 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x38>
     32e:	459a      	cmp	sl, r3
     330:	d902      	bls.n	338 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x38>
     332:	f1a8 0002 	sub.w	r0, r8, #2
     336:	4423      	add	r3, r4
     338:	eba3 030a 	sub.w	r3, r3, sl
     33c:	b289      	uxth	r1, r1
     33e:	fbb3 f8f9 	udiv	r8, r3, r9
     342:	fb09 3318 	mls	r3, r9, r8, r3
     346:	fb08 fe0e 	mul.w	lr, r8, lr
     34a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     34e:	458e      	cmp	lr, r1
     350:	d92c      	bls.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     352:	1861      	adds	r1, r4, r1
     354:	f108 33ff 	add.w	r3, r8, #4294967295
     358:	d204      	bcs.n	364 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x64>
     35a:	458e      	cmp	lr, r1
     35c:	d902      	bls.n	364 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x64>
     35e:	f1a8 0302 	sub.w	r3, r8, #2
     362:	4421      	add	r1, r4
     364:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     368:	fba0 9802 	umull	r9, r8, r0, r2
     36c:	eba1 010e 	sub.w	r1, r1, lr
     370:	4541      	cmp	r1, r8
     372:	46ce      	mov	lr, r9
     374:	4643      	mov	r3, r8
     376:	d302      	bcc.n	37e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x7e>
     378:	d106      	bne.n	388 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x88>
     37a:	454d      	cmp	r5, r9
     37c:	d204      	bcs.n	388 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x88>
     37e:	ebb9 0e02 	subs.w	lr, r9, r2
     382:	eb68 0304 	sbc.w	r3, r8, r4
     386:	3801      	subs	r0, #1
     388:	2e00      	cmp	r6, #0
     38a:	d0a6      	beq.n	2da <__data_size+0x85>
     38c:	ebb5 020e 	subs.w	r2, r5, lr
     390:	eb61 0103 	sbc.w	r1, r1, r3
     394:	fa01 fc0c 	lsl.w	ip, r1, ip
     398:	fa22 f307 	lsr.w	r3, r2, r7
     39c:	ea4c 0303 	orr.w	r3, ip, r3
     3a0:	40f9      	lsrs	r1, r7
     3a2:	e9c6 3100 	strd	r3, r1, [r6]
     3a6:	e798      	b.n	2da <__data_size+0x85>
     3a8:	4640      	mov	r0, r8
     3aa:	e7c5      	b.n	338 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x38>
     3ac:	4643      	mov	r3, r8
     3ae:	e7d9      	b.n	364 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x64>

000003b0 <main>:
};

static struct config_t read_config;

int main(void)
{
     3b0:	b5b0      	push	{r4, r5, r7, lr}
     3b2:	b086      	sub	sp, #24
     3b4:	af00      	add	r7, sp, #0
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     3b6:	2100      	movs	r1, #0
     3b8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
     3bc:	f00b fa10 	bl	b7e0 <z_impl_k_sleep>
    k_msleep(500);
    if (config_init() != 0)
     3c0:	f000 f9a0 	bl	704 <config_init>
     3c4:	4d45      	ldr	r5, [pc, #276]	; (4dc <CONFIG_LOG_BUFFER_SIZE+0xdc>)
     3c6:	4603      	mov	r3, r0
     3c8:	b1a8      	cbz	r0, 3f6 <CONFIG_LOG_FAILURE_REPORT_PERIOD+0xe>
    {
        LOG_ERR("Failed to initialze config");
     3ca:	682b      	ldr	r3, [r5, #0]
     3cc:	075b      	lsls	r3, r3, #29
     3ce:	d105      	bne.n	3dc <main+0x2c>
        return -1;
     3d0:	f04f 34ff 	mov.w	r4, #4294967295
    LOG_DBG("Initialized uwb");

    uwb_start();

    return 0;
}
     3d4:	4620      	mov	r0, r4
     3d6:	3718      	adds	r7, #24
     3d8:	46bd      	mov	sp, r7
     3da:	bdb0      	pop	{r4, r5, r7, pc}
        LOG_ERR("Failed to initialze config");
     3dc:	4b40      	ldr	r3, [pc, #256]	; (4e0 <CONFIG_LOG_BUFFER_SIZE+0xe0>)
     3de:	617b      	str	r3, [r7, #20]
     3e0:	2302      	movs	r3, #2
     3e2:	613b      	str	r3, [r7, #16]
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
     3e4:	2300      	movs	r3, #0
     3e6:	f107 0210 	add.w	r2, r7, #16
     3ea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
     3ee:	4628      	mov	r0, r5
     3f0:	f003 f9ae 	bl	3750 <z_impl_z_log_msg_static_create>
     3f4:	e7ec      	b.n	3d0 <main+0x20>
    LOG_DBG("Initialized config");
     3f6:	682a      	ldr	r2, [r5, #0]
     3f8:	0754      	lsls	r4, r2, #29
     3fa:	d50f      	bpl.n	41c <CONFIG_LOG_BUFFER_SIZE+0x1c>
     3fc:	466c      	mov	r4, sp
     3fe:	b088      	sub	sp, #32
     400:	466a      	mov	r2, sp
     402:	4938      	ldr	r1, [pc, #224]	; (4e4 <CONFIG_LOG_BUFFER_SIZE+0xe4>)
     404:	6151      	str	r1, [r2, #20]
     406:	4938      	ldr	r1, [pc, #224]	; (4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>)
     408:	6191      	str	r1, [r2, #24]
     40a:	2103      	movs	r1, #3
     40c:	f842 1f10 	str.w	r1, [r2, #16]!
     410:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
     414:	4628      	mov	r0, r5
     416:	f003 f99b 	bl	3750 <z_impl_z_log_msg_static_create>
     41a:	46a5      	mov	sp, r4
    if (config_read(&read_config) != 0)
     41c:	4c33      	ldr	r4, [pc, #204]	; (4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>)
    config_save(&config);
     41e:	4834      	ldr	r0, [pc, #208]	; (4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>)
     420:	f000 f9da 	bl	7d8 <config_save>
    if (config_read(&read_config) != 0)
     424:	4620      	mov	r0, r4
     426:	f000 f9c9 	bl	7bc <config_read>
     42a:	4603      	mov	r3, r0
     42c:	b190      	cbz	r0, 454 <CONFIG_LOG_BUFFER_SIZE+0x54>
        LOG_ERR("Failed to read config");
     42e:	682b      	ldr	r3, [r5, #0]
     430:	0758      	lsls	r0, r3, #29
     432:	d102      	bne.n	43a <CONFIG_LOG_BUFFER_SIZE+0x3a>
        return -2;
     434:	f06f 0401 	mvn.w	r4, #1
     438:	e7cc      	b.n	3d4 <main+0x24>
        LOG_ERR("Failed to read config");
     43a:	4b2e      	ldr	r3, [pc, #184]	; (4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>)
     43c:	617b      	str	r3, [r7, #20]
     43e:	2302      	movs	r3, #2
     440:	613b      	str	r3, [r7, #16]
     442:	4826      	ldr	r0, [pc, #152]	; (4dc <CONFIG_LOG_BUFFER_SIZE+0xdc>)
     444:	2300      	movs	r3, #0
     446:	f107 0210 	add.w	r2, r7, #16
     44a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
     44e:	f003 f97f 	bl	3750 <z_impl_z_log_msg_static_create>
     452:	e7ef      	b.n	434 <CONFIG_LOG_BUFFER_SIZE+0x34>
    LOG_DBG("Read config mode: %d", read_config.mode);
     454:	682a      	ldr	r2, [r5, #0]
     456:	0751      	lsls	r1, r2, #29
     458:	d511      	bpl.n	47e <CONFIG_LOG_BUFFER_SIZE+0x7e>
     45a:	7821      	ldrb	r1, [r4, #0]
     45c:	466c      	mov	r4, sp
     45e:	b088      	sub	sp, #32
     460:	466a      	mov	r2, sp
     462:	4825      	ldr	r0, [pc, #148]	; (4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>)
     464:	6150      	str	r0, [r2, #20]
     466:	4820      	ldr	r0, [pc, #128]	; (4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>)
     468:	e9c2 0106 	strd	r0, r1, [r2, #24]
     46c:	2104      	movs	r1, #4
     46e:	f842 1f10 	str.w	r1, [r2, #16]!
     472:	481a      	ldr	r0, [pc, #104]	; (4dc <CONFIG_LOG_BUFFER_SIZE+0xdc>)
     474:	f44f 5104 	mov.w	r1, #8448	; 0x2100
     478:	f003 f96a 	bl	3750 <z_impl_z_log_msg_static_create>
     47c:	46a5      	mov	sp, r4
    if (uwb_init(&config) != 0)
     47e:	481c      	ldr	r0, [pc, #112]	; (4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>)
     480:	f000 f8b8 	bl	5f4 <uwb_init>
        LOG_ERR("Failed to initalize uwb");
     484:	682b      	ldr	r3, [r5, #0]
    if (uwb_init(&config) != 0)
     486:	4604      	mov	r4, r0
     488:	b188      	cbz	r0, 4ae <CONFIG_LOG_BUFFER_SIZE+0xae>
        LOG_ERR("Failed to initalize uwb");
     48a:	075a      	lsls	r2, r3, #29
     48c:	d102      	bne.n	494 <CONFIG_LOG_BUFFER_SIZE+0x94>
        return -3;
     48e:	f06f 0402 	mvn.w	r4, #2
     492:	e79f      	b.n	3d4 <main+0x24>
        LOG_ERR("Failed to initalize uwb");
     494:	4b19      	ldr	r3, [pc, #100]	; (4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>)
     496:	617b      	str	r3, [r7, #20]
     498:	2302      	movs	r3, #2
     49a:	613b      	str	r3, [r7, #16]
     49c:	480f      	ldr	r0, [pc, #60]	; (4dc <CONFIG_LOG_BUFFER_SIZE+0xdc>)
     49e:	2300      	movs	r3, #0
     4a0:	f107 0210 	add.w	r2, r7, #16
     4a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
     4a8:	f003 f952 	bl	3750 <z_impl_z_log_msg_static_create>
     4ac:	e7ef      	b.n	48e <CONFIG_LOG_BUFFER_SIZE+0x8e>
    LOG_DBG("Initialized uwb");
     4ae:	075b      	lsls	r3, r3, #29
     4b0:	d510      	bpl.n	4d4 <CONFIG_LOG_BUFFER_SIZE+0xd4>
     4b2:	466d      	mov	r5, sp
     4b4:	b088      	sub	sp, #32
     4b6:	466a      	mov	r2, sp
     4b8:	4b11      	ldr	r3, [pc, #68]	; (500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>)
     4ba:	6153      	str	r3, [r2, #20]
     4bc:	4b0a      	ldr	r3, [pc, #40]	; (4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>)
     4be:	6193      	str	r3, [r2, #24]
     4c0:	2303      	movs	r3, #3
     4c2:	f842 3f10 	str.w	r3, [r2, #16]!
     4c6:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
     4ca:	4603      	mov	r3, r0
     4cc:	4803      	ldr	r0, [pc, #12]	; (4dc <CONFIG_LOG_BUFFER_SIZE+0xdc>)
     4ce:	f003 f93f 	bl	3750 <z_impl_z_log_msg_static_create>
     4d2:	46ad      	mov	sp, r5
    uwb_start();
     4d4:	f000 f8f4 	bl	6c0 <uwb_start>
    return 0;
     4d8:	e77c      	b.n	3d4 <main+0x24>
     4da:	bf00      	nop
     4dc:	200002f0 	.word	0x200002f0
     4e0:	00010e12 	.word	0x00010e12
     4e4:	00010e2d 	.word	0x00010e2d
     4e8:	00010e9f 	.word	0x00010e9f
     4ec:	200034c0 	.word	0x200034c0
     4f0:	20000254 	.word	0x20000254
     4f4:	00010e44 	.word	0x00010e44
     4f8:	00010e5a 	.word	0x00010e5a
     4fc:	00010e73 	.word	0x00010e73
     500:	00010e8b 	.word	0x00010e8b

00000504 <rx_ok_callback>:
    k_sem_give(&uwb_irq_sem);
}

static void rx_ok_callback(const dwt_cb_data_t *cb_data)
{
    algorithm->on_event();
     504:	4b01      	ldr	r3, [pc, #4]	; (50c <rx_ok_callback+0x8>)
     506:	681b      	ldr	r3, [r3, #0]
     508:	685b      	ldr	r3, [r3, #4]
     50a:	4718      	bx	r3
     50c:	20000000 	.word	0x20000000

00000510 <uwb_isr>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     510:	4801      	ldr	r0, [pc, #4]	; (518 <uwb_isr+0x8>)
     512:	f00a be31 	b.w	b178 <z_impl_k_sem_give>
     516:	bf00      	nop
     518:	20000348 	.word	0x20000348

0000051c <dummy_on_event>:
{
    LOG_DBG("Dummy init");
}

void dummy_on_event()
{
     51c:	b598      	push	{r3, r4, r7, lr}
    LOG_DBG("Dummy on event");
     51e:	480b      	ldr	r0, [pc, #44]	; (54c <dummy_on_event+0x30>)
     520:	6803      	ldr	r3, [r0, #0]
     522:	075b      	lsls	r3, r3, #29
{
     524:	af00      	add	r7, sp, #0
    LOG_DBG("Dummy on event");
     526:	d50f      	bpl.n	548 <dummy_on_event+0x2c>
     528:	466c      	mov	r4, sp
     52a:	b088      	sub	sp, #32
     52c:	466a      	mov	r2, sp
     52e:	4b08      	ldr	r3, [pc, #32]	; (550 <dummy_on_event+0x34>)
     530:	6153      	str	r3, [r2, #20]
     532:	4b08      	ldr	r3, [pc, #32]	; (554 <dummy_on_event+0x38>)
     534:	6193      	str	r3, [r2, #24]
     536:	2303      	movs	r3, #3
     538:	f842 3f10 	str.w	r3, [r2, #16]!
     53c:	2300      	movs	r3, #0
     53e:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
     542:	f003 f905 	bl	3750 <z_impl_z_log_msg_static_create>
     546:	46a5      	mov	sp, r4
}
     548:	46bd      	mov	sp, r7
     54a:	bd98      	pop	{r3, r4, r7, pc}
     54c:	20000318 	.word	0x20000318
     550:	00010f09 	.word	0x00010f09
     554:	00010f79 	.word	0x00010f79

00000558 <dummy_init>:
{
     558:	b598      	push	{r3, r4, r7, lr}
    LOG_DBG("Dummy init");
     55a:	480b      	ldr	r0, [pc, #44]	; (588 <dummy_init+0x30>)
     55c:	6803      	ldr	r3, [r0, #0]
     55e:	075b      	lsls	r3, r3, #29
{
     560:	af00      	add	r7, sp, #0
    LOG_DBG("Dummy init");
     562:	d50f      	bpl.n	584 <dummy_init+0x2c>
     564:	466c      	mov	r4, sp
     566:	b088      	sub	sp, #32
     568:	466a      	mov	r2, sp
     56a:	4b08      	ldr	r3, [pc, #32]	; (58c <dummy_init+0x34>)
     56c:	6153      	str	r3, [r2, #20]
     56e:	4b08      	ldr	r3, [pc, #32]	; (590 <dummy_init+0x38>)
     570:	6193      	str	r3, [r2, #24]
     572:	2303      	movs	r3, #3
     574:	f842 3f10 	str.w	r3, [r2, #16]!
     578:	2300      	movs	r3, #0
     57a:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
     57e:	f003 f8e7 	bl	3750 <z_impl_z_log_msg_static_create>
     582:	46a5      	mov	sp, r4
}
     584:	46bd      	mov	sp, r7
     586:	bd98      	pop	{r3, r4, r7, pc}
     588:	20000318 	.word	0x20000318
     58c:	00010f1c 	.word	0x00010f1c
     590:	00010f6e 	.word	0x00010f6e

00000594 <uwb_loop>:
{
     594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return z_impl_k_sem_take(sem, timeout);
     596:	4e13      	ldr	r6, [pc, #76]	; (5e4 <uwb_loop+0x50>)
        LOG_DBG("uwb loop");
     598:	4c13      	ldr	r4, [pc, #76]	; (5e8 <uwb_loop+0x54>)
{
     59a:	af00      	add	r7, sp, #0
     59c:	f240 6267 	movw	r2, #1639	; 0x667
     5a0:	2300      	movs	r3, #0
     5a2:	4630      	mov	r0, r6
     5a4:	f00a fe0e 	bl	b1c4 <z_impl_k_sem_take>
        if (k_sem_take(&uwb_irq_sem, K_MSEC(50)) == 0)
     5a8:	b908      	cbnz	r0, 5ae <uwb_loop+0x1a>
            dwt_isr();
     5aa:	f000 fa91 	bl	ad0 <dwt_isr>
	return z_impl_k_sleep(timeout);
     5ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     5b2:	2100      	movs	r1, #0
     5b4:	f00b f914 	bl	b7e0 <z_impl_k_sleep>
        LOG_DBG("uwb loop");
     5b8:	6823      	ldr	r3, [r4, #0]
     5ba:	075b      	lsls	r3, r3, #29
     5bc:	d5ee      	bpl.n	59c <uwb_loop+0x8>
     5be:	466d      	mov	r5, sp
     5c0:	b088      	sub	sp, #32
     5c2:	466a      	mov	r2, sp
     5c4:	4b09      	ldr	r3, [pc, #36]	; (5ec <uwb_loop+0x58>)
     5c6:	6153      	str	r3, [r2, #20]
     5c8:	4b09      	ldr	r3, [pc, #36]	; (5f0 <uwb_loop+0x5c>)
     5ca:	6193      	str	r3, [r2, #24]
     5cc:	2303      	movs	r3, #3
     5ce:	f842 3f10 	str.w	r3, [r2, #16]!
     5d2:	2300      	movs	r3, #0
     5d4:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
     5d8:	4620      	mov	r0, r4
     5da:	f003 f8b9 	bl	3750 <z_impl_z_log_msg_static_create>
     5de:	46ad      	mov	sp, r5
     5e0:	e7dc      	b.n	59c <uwb_loop+0x8>
     5e2:	bf00      	nop
     5e4:	20000348 	.word	0x20000348
     5e8:	20000318 	.word	0x20000318
     5ec:	00010f2b 	.word	0x00010f2b
     5f0:	00010f65 	.word	0x00010f65

000005f4 <uwb_init>:
{
     5f4:	b530      	push	{r4, r5, lr}
     5f6:	b087      	sub	sp, #28
    if (openspi() != DWT_SUCCESS)
     5f8:	f000 fbf0 	bl	ddc <openspi>
     5fc:	4605      	mov	r5, r0
     5fe:	b198      	cbz	r0, 628 <uwb_init+0x34>
        LOG_ERR("Failed to open spi");
     600:	4825      	ldr	r0, [pc, #148]	; (698 <uwb_init+0xa4>)
     602:	6803      	ldr	r3, [r0, #0]
     604:	075a      	lsls	r2, r3, #29
     606:	d104      	bne.n	612 <uwb_init+0x1e>
        return -1;
     608:	f04f 34ff 	mov.w	r4, #4294967295
}
     60c:	4620      	mov	r0, r4
     60e:	b007      	add	sp, #28
     610:	bd30      	pop	{r4, r5, pc}
        LOG_ERR("Failed to open spi");
     612:	4b22      	ldr	r3, [pc, #136]	; (69c <uwb_init+0xa8>)
     614:	9305      	str	r3, [sp, #20]
     616:	2302      	movs	r3, #2
     618:	9304      	str	r3, [sp, #16]
     61a:	2300      	movs	r3, #0
     61c:	aa04      	add	r2, sp, #16
     61e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
     622:	f003 f895 	bl	3750 <z_impl_z_log_msg_static_create>
     626:	e7ef      	b.n	608 <uwb_init+0x14>
    port_set_dw1000_slowrate();
     628:	f00b fefb 	bl	c422 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADUCODE) != DWT_SUCCESS)
     62c:	2001      	movs	r0, #1
     62e:	f000 fb07 	bl	c40 <dwt_initialise>
     632:	4604      	mov	r4, r0
     634:	b188      	cbz	r0, 65a <uwb_init+0x66>
        LOG_ERR("Failed to initialize deca");
     636:	4818      	ldr	r0, [pc, #96]	; (698 <uwb_init+0xa4>)
     638:	6803      	ldr	r3, [r0, #0]
     63a:	075b      	lsls	r3, r3, #29
     63c:	d102      	bne.n	644 <uwb_init+0x50>
        return -2;
     63e:	f06f 0401 	mvn.w	r4, #1
     642:	e7e3      	b.n	60c <uwb_init+0x18>
        LOG_ERR("Failed to initialize deca");
     644:	4b16      	ldr	r3, [pc, #88]	; (6a0 <uwb_init+0xac>)
     646:	9305      	str	r3, [sp, #20]
     648:	2302      	movs	r3, #2
     64a:	9304      	str	r3, [sp, #16]
     64c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
     650:	462b      	mov	r3, r5
     652:	aa04      	add	r2, sp, #16
     654:	f003 f87c 	bl	3750 <z_impl_z_log_msg_static_create>
     658:	e7f1      	b.n	63e <uwb_init+0x4a>
    port_set_dw1000_fastrate();
     65a:	f00b fee8 	bl	c42e <port_set_dw1000_fastrate>
    dwt_configure(&dwt_config);
     65e:	4811      	ldr	r0, [pc, #68]	; (6a4 <uwb_init+0xb0>)
     660:	f000 f8c6 	bl	7f0 <dwt_configure>
    dwt_settxantennadelay(TX_ANTENNA_DELAY);
     664:	f244 0034 	movw	r0, #16436	; 0x4034
     668:	f00b fdb7 	bl	c1da <dwt_settxantennadelay>
    dwt_setrxantennadelay(RX_ANTENNA_DELAY);
     66c:	f244 0034 	movw	r0, #16436	; 0x4034
     670:	f00b fdad 	bl	c1ce <dwt_setrxantennadelay>
    port_set_deca_isr(uwb_isr);
     674:	480c      	ldr	r0, [pc, #48]	; (6a8 <uwb_init+0xb4>)
     676:	f000 fcb3 	bl	fe0 <port_set_deca_isr>
    dwt_setcallbacks(&tx_done_callback,
     67a:	4b0c      	ldr	r3, [pc, #48]	; (6ac <uwb_init+0xb8>)
     67c:	4a0c      	ldr	r2, [pc, #48]	; (6b0 <uwb_init+0xbc>)
     67e:	490d      	ldr	r1, [pc, #52]	; (6b4 <uwb_init+0xc0>)
     680:	480d      	ldr	r0, [pc, #52]	; (6b8 <uwb_init+0xc4>)
     682:	f000 f9b9 	bl	9f8 <dwt_setcallbacks>
    dwt_setinterrupt(DWT_INT_TFRS | DWT_INT_RFCG | DWT_INT_RFTO | DWT_INT_RXPTO | DWT_INT_RPHE | DWT_INT_RFCE | DWT_INT_RFSL | DWT_INT_SFDT, 1);
     686:	480d      	ldr	r0, [pc, #52]	; (6bc <uwb_init+0xc8>)
     688:	2101      	movs	r1, #1
     68a:	f00b fe82 	bl	c392 <dwt_setinterrupt>
    dwt_setleds(DWT_LEDS_ENABLE);
     68e:	2001      	movs	r0, #1
     690:	f000 f9bc 	bl	a0c <dwt_setleds>
    return 0;
     694:	e7ba      	b.n	60c <uwb_init+0x18>
     696:	bf00      	nop
     698:	20000318 	.word	0x20000318
     69c:	00010f38 	.word	0x00010f38
     6a0:	00010f4b 	.word	0x00010f4b
     6a4:	20000248 	.word	0x20000248
     6a8:	00000511 	.word	0x00000511
     6ac:	0000c0b5 	.word	0x0000c0b5
     6b0:	0000c0b1 	.word	0x0000c0b1
     6b4:	00000505 	.word	0x00000505
     6b8:	0000c0b9 	.word	0x0000c0b9
     6bc:	0423d080 	.word	0x0423d080

000006c0 <uwb_start>:
{
     6c0:	b500      	push	{lr}
    algorithm->init();
     6c2:	4b0d      	ldr	r3, [pc, #52]	; (6f8 <uwb_start+0x38>)
     6c4:	681b      	ldr	r3, [r3, #0]
{
     6c6:	b0b7      	sub	sp, #220	; 0xdc
    algorithm->init();
     6c8:	681b      	ldr	r3, [r3, #0]
     6ca:	4798      	blx	r3
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     6cc:	2200      	movs	r2, #0
     6ce:	2300      	movs	r3, #0
     6d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
     6d4:	2300      	movs	r3, #0
     6d6:	2205      	movs	r2, #5
     6d8:	e9cd 2303 	strd	r2, r3, [sp, #12]
     6dc:	e9cd 3301 	strd	r3, r3, [sp, #4]
     6e0:	9300      	str	r3, [sp, #0]
     6e2:	4906      	ldr	r1, [pc, #24]	; (6fc <uwb_start+0x3c>)
     6e4:	4b06      	ldr	r3, [pc, #24]	; (700 <uwb_start+0x40>)
     6e6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
     6ea:	a808      	add	r0, sp, #32
     6ec:	f00a fbe4 	bl	aeb8 <z_impl_k_thread_create>
}
     6f0:	b037      	add	sp, #220	; 0xdc
     6f2:	f85d fb04 	ldr.w	pc, [sp], #4
     6f6:	bf00      	nop
     6f8:	20000000 	.word	0x20000000
     6fc:	20003c10 	.word	0x20003c10
     700:	00000595 	.word	0x00000595

00000704 <config_init>:
#define MODE_ID 0

static struct nvs_fs fs;

int config_init()
{
     704:	b530      	push	{r4, r5, lr}
    struct flash_pages_info info;
    fs.flash_device = NVS_PARTITION_DEVICE;
     706:	4c27      	ldr	r4, [pc, #156]	; (7a4 <config_init+0xa0>)
     708:	4827      	ldr	r0, [pc, #156]	; (7a8 <config_init+0xa4>)
     70a:	62a0      	str	r0, [r4, #40]	; 0x28
{
     70c:	b08b      	sub	sp, #44	; 0x2c
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     70e:	f00f f80f 	bl	f730 <z_device_is_ready>
    if (!device_is_ready(fs.flash_device))
     712:	4603      	mov	r3, r0
     714:	b978      	cbnz	r0, 736 <config_init+0x32>
    {
        LOG_ERR("Flash device is not ready");
     716:	4825      	ldr	r0, [pc, #148]	; (7ac <config_init+0xa8>)
     718:	6802      	ldr	r2, [r0, #0]
     71a:	0751      	lsls	r1, r2, #29
     71c:	d008      	beq.n	730 <config_init+0x2c>
     71e:	4a24      	ldr	r2, [pc, #144]	; (7b0 <config_init+0xac>)
     720:	9209      	str	r2, [sp, #36]	; 0x24
     722:	2202      	movs	r2, #2
     724:	9208      	str	r2, [sp, #32]
     726:	f44f 5182 	mov.w	r1, #4160	; 0x1040
     72a:	aa08      	add	r2, sp, #32
     72c:	f003 f810 	bl	3750 <z_impl_z_log_msg_static_create>
        return -1;
     730:	f04f 30ff 	mov.w	r0, #4294967295
     734:	e00e      	b.n	754 <config_init+0x50>
    }
    fs.offset = NVS_PARTITION_OFFSET;
     736:	f44f 21f4 	mov.w	r1, #499712	; 0x7a000
    if (flash_get_page_info_by_offs(fs.flash_device, fs.offset, &info) != 0)
     73a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fs.offset = NVS_PARTITION_OFFSET;
     73c:	6021      	str	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
     73e:	aa01      	add	r2, sp, #4
     740:	f00e fcf7 	bl	f132 <z_impl_flash_get_page_info_by_offs>
    if (flash_get_page_info_by_offs(fs.flash_device, fs.offset, &info) != 0)
     744:	4605      	mov	r5, r0
     746:	b190      	cbz	r0, 76e <config_init+0x6a>
    {
        LOG_ERR("Unabled to get page info");
     748:	4818      	ldr	r0, [pc, #96]	; (7ac <config_init+0xa8>)
     74a:	6803      	ldr	r3, [r0, #0]
     74c:	075a      	lsls	r2, r3, #29
     74e:	d103      	bne.n	758 <config_init+0x54>
        return -2;
     750:	f06f 0001 	mvn.w	r0, #1
        LOG_ERR("Failed to mount flash");
        return -3;
    }

    return 0;
}
     754:	b00b      	add	sp, #44	; 0x2c
     756:	bd30      	pop	{r4, r5, pc}
        LOG_ERR("Unabled to get page info");
     758:	4b16      	ldr	r3, [pc, #88]	; (7b4 <config_init+0xb0>)
     75a:	9309      	str	r3, [sp, #36]	; 0x24
     75c:	2302      	movs	r3, #2
     75e:	9308      	str	r3, [sp, #32]
     760:	2300      	movs	r3, #0
     762:	aa08      	add	r2, sp, #32
     764:	f44f 5182 	mov.w	r1, #4160	; 0x1040
     768:	f002 fff2 	bl	3750 <z_impl_z_log_msg_static_create>
     76c:	e7f0      	b.n	750 <config_init+0x4c>
    fs.sector_size = info.size;
     76e:	9b02      	ldr	r3, [sp, #8]
     770:	81a3      	strh	r3, [r4, #12]
    if (nvs_mount(&fs) != 0)
     772:	4620      	mov	r0, r4
    fs.sector_count = 3U;
     774:	2303      	movs	r3, #3
     776:	81e3      	strh	r3, [r4, #14]
    if (nvs_mount(&fs) != 0)
     778:	f002 f8f0 	bl	295c <nvs_mount>
     77c:	2800      	cmp	r0, #0
     77e:	d0e9      	beq.n	754 <config_init+0x50>
        LOG_ERR("Failed to mount flash");
     780:	480a      	ldr	r0, [pc, #40]	; (7ac <config_init+0xa8>)
     782:	6803      	ldr	r3, [r0, #0]
     784:	075b      	lsls	r3, r3, #29
     786:	d102      	bne.n	78e <config_init+0x8a>
        return -3;
     788:	f06f 0002 	mvn.w	r0, #2
     78c:	e7e2      	b.n	754 <config_init+0x50>
        LOG_ERR("Failed to mount flash");
     78e:	4b0a      	ldr	r3, [pc, #40]	; (7b8 <config_init+0xb4>)
     790:	9309      	str	r3, [sp, #36]	; 0x24
     792:	2302      	movs	r3, #2
     794:	9308      	str	r3, [sp, #32]
     796:	f44f 5182 	mov.w	r1, #4160	; 0x1040
     79a:	462b      	mov	r3, r5
     79c:	aa08      	add	r2, sp, #32
     79e:	f002 ffd7 	bl	3750 <z_impl_z_log_msg_static_create>
     7a2:	e7f1      	b.n	788 <config_init+0x84>
     7a4:	20000de0 	.word	0x20000de0
     7a8:	0000fea4 	.word	0x0000fea4
     7ac:	200002cc 	.word	0x200002cc
     7b0:	00010f93 	.word	0x00010f93
     7b4:	00010fad 	.word	0x00010fad
     7b8:	00010fc6 	.word	0x00010fc6

000007bc <config_read>:

int config_read(struct config_t *config)
{
     7bc:	b508      	push	{r3, lr}
     7be:	4602      	mov	r2, r0
    ssize_t sz = nvs_read(&fs, MODE_ID, &(config->mode), sizeof(config->mode));
     7c0:	2301      	movs	r3, #1
     7c2:	2100      	movs	r1, #0
     7c4:	4803      	ldr	r0, [pc, #12]	; (7d4 <config_read+0x18>)
     7c6:	f00c fdd0 	bl	d36a <nvs_read>
    {
        return -1;
    }

    return 0;
}
     7ca:	3801      	subs	r0, #1
     7cc:	bf18      	it	ne
     7ce:	f04f 30ff 	movne.w	r0, #4294967295
     7d2:	bd08      	pop	{r3, pc}
     7d4:	20000de0 	.word	0x20000de0

000007d8 <config_save>:

int config_save(struct config_t *config)
{
     7d8:	b508      	push	{r3, lr}
     7da:	4602      	mov	r2, r0
    ssize_t sz = nvs_write(&fs, MODE_ID, &(config->mode), sizeof(config->mode));
     7dc:	2301      	movs	r3, #1
     7de:	2100      	movs	r1, #0
     7e0:	4802      	ldr	r0, [pc, #8]	; (7ec <config_save+0x14>)
     7e2:	f002 fac5 	bl	2d70 <nvs_write>
    {
        return -1;
    }

    return 0;
}
     7e6:	f04f 30ff 	mov.w	r0, #4294967295
     7ea:	bd08      	pop	{r3, pc}
     7ec:	20000de0 	.word	0x20000de0

000007f0 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
     7f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8 nsSfd_result  = 0;
    uint8 useDWnsSFD = 0;
    uint8 chan = config->chan ;
     7f4:	7806      	ldrb	r6, [r0, #0]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
    uint8 prfIndex = config->prf - DWT_PRF_16M;
     7f6:	7847      	ldrb	r7, [r0, #1]
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
     7f8:	7942      	ldrb	r2, [r0, #5]
     7fa:	4b73      	ldr	r3, [pc, #460]	; (9c8 <CONFIG_ISR_STACK_SIZE+0x1c8>)
    uint8 prfIndex = config->prf - DWT_PRF_16M;
     7fc:	3f01      	subs	r7, #1
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
     7fe:	2e04      	cmp	r6, #4
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
     800:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
{
     804:	4604      	mov	r4, r0
    uint8 prfIndex = config->prf - DWT_PRF_16M;
     806:	b2ff      	uxtb	r7, r7
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
     808:	f000 80c0 	beq.w	98c <CONFIG_ISR_STACK_SIZE+0x18c>
     80c:	1ff3      	subs	r3, r6, #7
     80e:	f1d3 0900 	rsbs	r9, r3, #0
     812:	eb49 0903 	adc.w	r9, r9, r3
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
     816:	4d6d      	ldr	r5, [pc, #436]	; (9cc <CONFIG_ISR_STACK_SIZE+0x1cc>)
    if(DWT_BR_110K == config->dataRate)
     818:	79e3      	ldrb	r3, [r4, #7]
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
     81a:	6829      	ldr	r1, [r5, #0]
     81c:	690a      	ldr	r2, [r1, #16]
    if(DWT_BR_110K == config->dataRate)
     81e:	2b00      	cmp	r3, #0
     820:	f040 80b7 	bne.w	992 <CONFIG_ISR_STACK_SIZE+0x192>
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
     824:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
     828:	ea4f 08d8 	mov.w	r8, r8, lsr #3
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
     82c:	610a      	str	r2, [r1, #16]
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
    }

    pdw1000local->longFrames = config->phrMode ;
     82e:	7a23      	ldrb	r3, [r4, #8]
     830:	728b      	strb	r3, [r1, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
     832:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
     836:	610a      	str	r2, [r1, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
     838:	7a23      	ldrb	r3, [r4, #8]
     83a:	041b      	lsls	r3, r3, #16
     83c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
     840:	431a      	orrs	r2, r3
     842:	610a      	str	r2, [r1, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
     844:	2004      	movs	r0, #4
     846:	2100      	movs	r1, #0
     848:	f00b fccc 	bl	c1e4 <dwt_write32bitoffsetreg>

    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
     84c:	4642      	mov	r2, r8
     84e:	f642 0104 	movw	r1, #10244	; 0x2804
     852:	202e      	movs	r0, #46	; 0x2e
     854:	f00b fcaf 	bl	c1b6 <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
     858:	4638      	mov	r0, r7
     85a:	f00b fcf1 	bl	c240 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
     85e:	4b5c      	ldr	r3, [pc, #368]	; (9d0 <CONFIG_ISR_STACK_SIZE+0x1d0>)
     860:	f813 8006 	ldrb.w	r8, [r3, r6]
     864:	4b5b      	ldr	r3, [pc, #364]	; (9d4 <CONFIG_ISR_STACK_SIZE+0x1d4>)
     866:	2107      	movs	r1, #7
     868:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
     86c:	202b      	movs	r0, #43	; 0x2b
     86e:	f00b fcb9 	bl	c1e4 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
     872:	4b59      	ldr	r3, [pc, #356]	; (9d8 <CONFIG_ISR_STACK_SIZE+0x1d8>)
     874:	210b      	movs	r1, #11
     876:	f813 2008 	ldrb.w	r2, [r3, r8]
     87a:	202b      	movs	r0, #43	; 0x2b
     87c:	f00b fc8e 	bl	c19c <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
     880:	4b56      	ldr	r3, [pc, #344]	; (9dc <CONFIG_ISR_STACK_SIZE+0x1dc>)
     882:	210b      	movs	r1, #11
     884:	f813 2009 	ldrb.w	r2, [r3, r9]
     888:	2028      	movs	r0, #40	; 0x28
     88a:	f00b fc87 	bl	c19c <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
     88e:	4b54      	ldr	r3, [pc, #336]	; (9e0 <CONFIG_ISR_STACK_SIZE+0x1e0>)
     890:	210c      	movs	r1, #12
     892:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
     896:	2028      	movs	r0, #40	; 0x28
     898:	f00b fca4 	bl	c1e4 <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
     89c:	79e2      	ldrb	r2, [r4, #7]
     89e:	79a3      	ldrb	r3, [r4, #6]
     8a0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
     8a4:	4a4f      	ldr	r2, [pc, #316]	; (9e4 <CONFIG_ISR_STACK_SIZE+0x1e4>)
     8a6:	2102      	movs	r1, #2
     8a8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
     8ac:	2027      	movs	r0, #39	; 0x27
     8ae:	f00b fc82 	bl	c1b6 <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
     8b2:	4b4d      	ldr	r3, [pc, #308]	; (9e8 <CONFIG_ISR_STACK_SIZE+0x1e8>)
     8b4:	2104      	movs	r1, #4
     8b6:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
     8ba:	2027      	movs	r0, #39	; 0x27
     8bc:	f00b fc7b 	bl	c1b6 <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
     8c0:	79e3      	ldrb	r3, [r4, #7]
     8c2:	2b00      	cmp	r3, #0
     8c4:	d168      	bne.n	998 <CONFIG_ISR_STACK_SIZE+0x198>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
     8c6:	2264      	movs	r2, #100	; 0x64
     8c8:	2106      	movs	r1, #6
     8ca:	2027      	movs	r0, #39	; 0x27
     8cc:	f00b fc73 	bl	c1b6 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
     8d0:	78e3      	ldrb	r3, [r4, #3]
     8d2:	4a46      	ldr	r2, [pc, #280]	; (9ec <CONFIG_ISR_STACK_SIZE+0x1ec>)
     8d4:	eb03 0387 	add.w	r3, r3, r7, lsl #2
     8d8:	2108      	movs	r1, #8
     8da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     8de:	2027      	movs	r0, #39	; 0x27
     8e0:	f00b fc80 	bl	c1e4 <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
     8e4:	8963      	ldrh	r3, [r4, #10]
     8e6:	b913      	cbnz	r3, 8ee <CONFIG_ISR_STACK_SIZE+0xee>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
     8e8:	f241 0341 	movw	r3, #4161	; 0x1041
     8ec:	8163      	strh	r3, [r4, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
     8ee:	f8df 8100 	ldr.w	r8, [pc, #256]	; 9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
     8f2:	8962      	ldrh	r2, [r4, #10]
     8f4:	2120      	movs	r1, #32
     8f6:	2027      	movs	r0, #39	; 0x27
     8f8:	f00b fc5d 	bl	c1b6 <dwt_write16bitoffsetreg>
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
     8fc:	f8d8 2000 	ldr.w	r2, [r8]
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
     900:	eb08 0847 	add.w	r8, r8, r7, lsl #1
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
     904:	210c      	movs	r1, #12
     906:	2023      	movs	r0, #35	; 0x23
     908:	f00b fc6c 	bl	c1e4 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
     90c:	2023      	movs	r0, #35	; 0x23
     90e:	f8b8 2004 	ldrh.w	r2, [r8, #4]
     912:	2104      	movs	r1, #4
     914:	f00b fc4f 	bl	c1b6 <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
     918:	79a0      	ldrb	r0, [r4, #6]
     91a:	2800      	cmp	r0, #0
     91c:	d051      	beq.n	9c2 <CONFIG_ISR_STACK_SIZE+0x1c2>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
     91e:	79e3      	ldrb	r3, [r4, #7]
     920:	4a34      	ldr	r2, [pc, #208]	; (9f4 <CONFIG_ISR_STACK_SIZE+0x1f4>)
     922:	2021      	movs	r0, #33	; 0x21
     924:	5cd2      	ldrb	r2, [r2, r3]
     926:	2100      	movs	r1, #0
     928:	f00b fc38 	bl	c19c <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
        useDWnsSFD = 1 ;
     92c:	2201      	movs	r2, #1
        nsSfd_result = 3 ;
     92e:	2003      	movs	r0, #3
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
     930:	7961      	ldrb	r1, [r4, #5]
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
     932:	f006 030f 	and.w	r3, r6, #15
     936:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
     93a:	7861      	ldrb	r1, [r4, #1]
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
     93c:	0136      	lsls	r6, r6, #4
     93e:	b2f6      	uxtb	r6, r6
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
     940:	0489      	lsls	r1, r1, #18
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
     942:	4333      	orrs	r3, r6
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
     944:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
     948:	430b      	orrs	r3, r1
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
     94a:	7921      	ldrb	r1, [r4, #4]
     94c:	0589      	lsls	r1, r1, #22
     94e:	f001 61f8 	and.w	r1, r1, #130023424	; 0x7c00000
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
     952:	430b      	orrs	r3, r1
     954:	ea43 5300 	orr.w	r3, r3, r0, lsl #20

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
     958:	ea43 4242 	orr.w	r2, r3, r2, lsl #17
     95c:	2100      	movs	r1, #0
     95e:	201f      	movs	r0, #31
     960:	f00b fc40 	bl	c1e4 <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
     964:	7862      	ldrb	r2, [r4, #1]
     966:	78a3      	ldrb	r3, [r4, #2]
     968:	4313      	orrs	r3, r2
     96a:	79e2      	ldrb	r2, [r4, #7]
     96c:	0352      	lsls	r2, r2, #13
     96e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
     972:	682b      	ldr	r3, [r5, #0]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
     974:	2100      	movs	r1, #0
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
     976:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
     978:	2008      	movs	r0, #8
     97a:	f00b fc33 	bl	c1e4 <dwt_write32bitoffsetreg>
    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
} // end dwt_configure()
     97e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
     982:	2242      	movs	r2, #66	; 0x42
     984:	2100      	movs	r1, #0
     986:	200d      	movs	r0, #13
     988:	f00b bc08 	b.w	c19c <dwt_write8bitoffsetreg>
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
     98c:	f04f 0901 	mov.w	r9, #1
     990:	e741      	b.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
     992:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
     996:	e749      	b.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
        if(config->txPreambLength == DWT_PLEN_64)
     998:	78a3      	ldrb	r3, [r4, #2]
     99a:	2b04      	cmp	r3, #4
     99c:	d10a      	bne.n	9b4 <CONFIG_ISR_STACK_SIZE+0x1b4>
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
     99e:	2210      	movs	r2, #16
     9a0:	2106      	movs	r1, #6
     9a2:	2027      	movs	r0, #39	; 0x27
     9a4:	f00b fc07 	bl	c1b6 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
     9a8:	2210      	movs	r2, #16
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
     9aa:	2126      	movs	r1, #38	; 0x26
     9ac:	2027      	movs	r0, #39	; 0x27
     9ae:	f00b fbf5 	bl	c19c <dwt_write8bitoffsetreg>
     9b2:	e78d      	b.n	8d0 <CONFIG_ISR_STACK_SIZE+0xd0>
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
     9b4:	2220      	movs	r2, #32
     9b6:	2106      	movs	r1, #6
     9b8:	2027      	movs	r0, #39	; 0x27
     9ba:	f00b fbfc 	bl	c1b6 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
     9be:	2228      	movs	r2, #40	; 0x28
     9c0:	e7f3      	b.n	9aa <CONFIG_ISR_STACK_SIZE+0x1aa>
    uint8 useDWnsSFD = 0;
     9c2:	4602      	mov	r2, r0
     9c4:	e7b4      	b.n	930 <CONFIG_ISR_STACK_SIZE+0x130>
     9c6:	bf00      	nop
     9c8:	00010dd0 	.word	0x00010dd0
     9cc:	2000000c 	.word	0x2000000c
     9d0:	00011004 	.word	0x00011004
     9d4:	000102e4 	.word	0x000102e4
     9d8:	00010ffe 	.word	0x00010ffe
     9dc:	00010ffc 	.word	0x00010ffc
     9e0:	000102fc 	.word	0x000102fc
     9e4:	00010e06 	.word	0x00010e06
     9e8:	00010e02 	.word	0x00010e02
     9ec:	000102bc 	.word	0x000102bc
     9f0:	000102dc 	.word	0x000102dc
     9f4:	00010ff9 	.word	0x00010ff9

000009f8 <dwt_setcallbacks>:
 * output parameters
 *
 * no return value
 */
void dwt_setcallbacks(dwt_cb_t cbTxDone, dwt_cb_t cbRxOk, dwt_cb_t cbRxTo, dwt_cb_t cbRxErr)
{
     9f8:	b510      	push	{r4, lr}
    pdw1000local->cbTxDone = cbTxDone;
     9fa:	4c03      	ldr	r4, [pc, #12]	; (a08 <dwt_setcallbacks+0x10>)
     9fc:	6824      	ldr	r4, [r4, #0]
    pdw1000local->cbRxOk = cbRxOk;
     9fe:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
    pdw1000local->cbRxTo = cbRxTo;
    pdw1000local->cbRxErr = cbRxErr;
     a02:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
}
     a06:	bd10      	pop	{r4, pc}
     a08:	2000000c 	.word	0x2000000c

00000a0c <dwt_setleds>:
 * output parameters none
 *
 * no return value
 */
void dwt_setleds(uint8 mode)
{
     a0c:	b538      	push	{r3, r4, r5, lr}
    uint32 reg;

    if (mode & DWT_LEDS_ENABLE)
     a0e:	f010 0501 	ands.w	r5, r0, #1
{
     a12:	4604      	mov	r4, r0
    if (mode & DWT_LEDS_ENABLE)
     a14:	d025      	beq.n	a62 <dwt_setleds+0x56>
    {
        // Set up MFIO for LED output.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
     a16:	2100      	movs	r1, #0
     a18:	2026      	movs	r0, #38	; 0x26
     a1a:	f00b fb91 	bl	c140 <dwt_read32bitoffsetreg>
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
     a1e:	f420 5270 	bic.w	r2, r0, #15360	; 0x3c00
        reg |= (GPIO_PIN2_RXLED | GPIO_PIN3_TXLED);
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
     a22:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
     a26:	2100      	movs	r1, #0
     a28:	2026      	movs	r0, #38	; 0x26
     a2a:	f00b fbdb 	bl	c1e4 <dwt_write32bitoffsetreg>

        // Enable LP Oscillator to run from counter and turn on de-bounce clock.
        reg = dwt_read32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET);
     a2e:	2100      	movs	r1, #0
     a30:	2036      	movs	r0, #54	; 0x36
     a32:	f00b fb85 	bl	c140 <dwt_read32bitoffsetreg>
        reg |= (PMSC_CTRL0_GPDCE | PMSC_CTRL0_KHZCLEN);
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET, reg);
     a36:	2100      	movs	r1, #0
     a38:	f440 0204 	orr.w	r2, r0, #8650752	; 0x840000
     a3c:	2036      	movs	r0, #54	; 0x36
     a3e:	f00b fbd1 	bl	c1e4 <dwt_write32bitoffsetreg>

        // Enable LEDs to blink and set default blink time.
        reg = PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF;
        // Make LEDs blink once if requested.
        if (mode & DWT_LEDS_INIT_BLINK)
     a42:	07a3      	lsls	r3, r4, #30
     a44:	d407      	bmi.n	a56 <dwt_setleds+0x4a>
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg);
        // Clear force blink bits if needed.
        if(mode & DWT_LEDS_INIT_BLINK)
        {
            reg &= ~PMSC_LEDC_BLINK_NOW_ALL;
            dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg);
     a46:	f44f 7288 	mov.w	r2, #272	; 0x110
     a4a:	2128      	movs	r1, #40	; 0x28
     a4c:	2036      	movs	r0, #54	; 0x36
        // Clear the GPIO bits that are used for LED control.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
    }
}
     a4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
     a52:	f00b bbc7 	b.w	c1e4 <dwt_write32bitoffsetreg>
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg);
     a56:	4a07      	ldr	r2, [pc, #28]	; (a74 <dwt_setleds+0x68>)
     a58:	2128      	movs	r1, #40	; 0x28
     a5a:	2036      	movs	r0, #54	; 0x36
     a5c:	f00b fbc2 	bl	c1e4 <dwt_write32bitoffsetreg>
     a60:	e7f1      	b.n	a46 <dwt_setleds+0x3a>
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
     a62:	4629      	mov	r1, r5
     a64:	2026      	movs	r0, #38	; 0x26
     a66:	f00b fb6b 	bl	c140 <dwt_read32bitoffsetreg>
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
     a6a:	4629      	mov	r1, r5
     a6c:	f420 5270 	bic.w	r2, r0, #15360	; 0x3c00
     a70:	2026      	movs	r0, #38	; 0x26
     a72:	e7ec      	b.n	a4e <dwt_setleds+0x42>
     a74:	000f0110 	.word	0x000f0110

00000a78 <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
     a78:	b538      	push	{r3, r4, r5, lr}
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
     a7a:	2100      	movs	r1, #0
     a7c:	200e      	movs	r0, #14
     a7e:	f00b fb5f 	bl	c140 <dwt_read32bitoffsetreg>
     a82:	4605      	mov	r5, r0

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
     a84:	f00b fcb7 	bl	c3f6 <decamutexon>

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
     a88:	2200      	movs	r2, #0
     a8a:	4611      	mov	r1, r2
    stat = decamutexon() ;
     a8c:	4604      	mov	r4, r0
    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
     a8e:	200e      	movs	r0, #14
     a90:	f00b fba8 	bl	c1e4 <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
     a94:	2240      	movs	r2, #64	; 0x40
     a96:	2100      	movs	r1, #0
     a98:	200d      	movs	r0, #13
     a9a:	f00b fb7f 	bl	c19c <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
     a9e:	4a0a      	ldr	r2, [pc, #40]	; (ac8 <dwt_forcetrxoff+0x50>)
     aa0:	2100      	movs	r1, #0
     aa2:	200f      	movs	r0, #15
     aa4:	f00b fb9e 	bl	c1e4 <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
     aa8:	f00b fc62 	bl	c370 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
     aac:	462a      	mov	r2, r5
     aae:	2100      	movs	r1, #0
     ab0:	200e      	movs	r0, #14
     ab2:	f00b fb97 	bl	c1e4 <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
     ab6:	4620      	mov	r0, r4
     ab8:	f00b fc9f 	bl	c3fa <decamutexoff>
    pdw1000local->wait4resp = 0;
     abc:	4b03      	ldr	r3, [pc, #12]	; (acc <dwt_forcetrxoff+0x54>)
     abe:	681b      	ldr	r3, [r3, #0]
     ac0:	2200      	movs	r2, #0
     ac2:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
     ac4:	bd38      	pop	{r3, r4, r5, pc}
     ac6:	bf00      	nop
     ac8:	2427fff8 	.word	0x2427fff8
     acc:	2000000c 	.word	0x2000000c

00000ad0 <dwt_isr>:
{
     ad0:	b570      	push	{r4, r5, r6, lr}
    uint32 status = pdw1000local->cbData.status = dwt_read32bitreg(SYS_STATUS_ID); // Read status register low 32bits
     ad2:	4c47      	ldr	r4, [pc, #284]	; (bf0 <dwt_isr+0x120>)
     ad4:	2100      	movs	r1, #0
     ad6:	200f      	movs	r0, #15
     ad8:	6826      	ldr	r6, [r4, #0]
     ada:	f00b fb31 	bl	c140 <dwt_read32bitoffsetreg>
     ade:	61f0      	str	r0, [r6, #28]
    if(status & SYS_STATUS_RXFCG)
     ae0:	0446      	lsls	r6, r0, #17
    uint32 status = pdw1000local->cbData.status = dwt_read32bitreg(SYS_STATUS_ID); // Read status register low 32bits
     ae2:	4605      	mov	r5, r0
    if(status & SYS_STATUS_RXFCG)
     ae4:	d541      	bpl.n	b6a <dwt_isr+0x9a>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_GOOD); // Clear all receive status bits
     ae6:	f44f 42de 	mov.w	r2, #28416	; 0x6f00
     aea:	2100      	movs	r1, #0
     aec:	200f      	movs	r0, #15
     aee:	f00b fb79 	bl	c1e4 <dwt_write32bitoffsetreg>
        pdw1000local->cbData.rx_flags = 0;
     af2:	6823      	ldr	r3, [r4, #0]
     af4:	2100      	movs	r1, #0
     af6:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
        finfo16 = dwt_read16bitoffsetreg(RX_FINFO_ID, RX_FINFO_OFFSET);
     afa:	2010      	movs	r0, #16
     afc:	f00b fb35 	bl	c16a <dwt_read16bitoffsetreg>
        if(pdw1000local->longFrames == 0)
     b00:	6823      	ldr	r3, [r4, #0]
     b02:	7a9a      	ldrb	r2, [r3, #10]
     b04:	2a00      	cmp	r2, #0
     b06:	d06f      	beq.n	be8 <dwt_isr+0x118>
        len = finfo16 & RX_FINFO_RXFL_MASK_1023;
     b08:	f3c0 0209 	ubfx	r2, r0, #0, #10
        if(finfo16 & RX_FINFO_RNG)
     b0c:	0400      	lsls	r0, r0, #16
        pdw1000local->cbData.datalength = len;
     b0e:	841a      	strh	r2, [r3, #32]
            pdw1000local->cbData.rx_flags |= DWT_CB_DATA_RX_FLAG_RNG;
     b10:	bf42      	ittt	mi
     b12:	f893 2024 	ldrbmi.w	r2, [r3, #36]	; 0x24
     b16:	f042 0201 	orrmi.w	r2, r2, #1
     b1a:	f883 2024 	strbmi.w	r2, [r3, #36]	; 0x24
        dwt_readfromdevice(RX_BUFFER_ID, 0, FCTRL_LEN_MAX, pdw1000local->cbData.fctrl);
     b1e:	2100      	movs	r1, #0
     b20:	3322      	adds	r3, #34	; 0x22
     b22:	2202      	movs	r2, #2
     b24:	2011      	movs	r0, #17
     b26:	f00b faeb 	bl	c100 <dwt_readfromdevice>
        if((status & SYS_STATUS_AAT) && ((pdw1000local->cbData.fctrl[0] & FCTRL_ACK_REQ_MASK) == 0))
     b2a:	0729      	lsls	r1, r5, #28
     b2c:	d510      	bpl.n	b50 <dwt_isr+0x80>
     b2e:	6823      	ldr	r3, [r4, #0]
     b30:	f893 6022 	ldrb.w	r6, [r3, #34]	; 0x22
     b34:	f016 0620 	ands.w	r6, r6, #32
     b38:	d10a      	bne.n	b50 <dwt_isr+0x80>
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_AAT); // Clear AAT status bit in register
     b3a:	2208      	movs	r2, #8
     b3c:	4631      	mov	r1, r6
     b3e:	200f      	movs	r0, #15
     b40:	f00b fb50 	bl	c1e4 <dwt_write32bitoffsetreg>
            pdw1000local->cbData.status &= ~SYS_STATUS_AAT; // Clear AAT status bit in callback data register copy
     b44:	6823      	ldr	r3, [r4, #0]
     b46:	69da      	ldr	r2, [r3, #28]
            pdw1000local->wait4resp = 0;
     b48:	755e      	strb	r6, [r3, #21]
            pdw1000local->cbData.status &= ~SYS_STATUS_AAT; // Clear AAT status bit in callback data register copy
     b4a:	f022 0208 	bic.w	r2, r2, #8
     b4e:	61da      	str	r2, [r3, #28]
        if(pdw1000local->cbRxOk != NULL)
     b50:	6820      	ldr	r0, [r4, #0]
     b52:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     b54:	b10b      	cbz	r3, b5a <dwt_isr+0x8a>
            pdw1000local->cbRxOk(&pdw1000local->cbData);
     b56:	301c      	adds	r0, #28
     b58:	4798      	blx	r3
        if (pdw1000local->dblbuffon)
     b5a:	6823      	ldr	r3, [r4, #0]
     b5c:	7d1b      	ldrb	r3, [r3, #20]
     b5e:	b123      	cbz	r3, b6a <dwt_isr+0x9a>
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 1);
     b60:	2201      	movs	r2, #1
     b62:	2103      	movs	r1, #3
     b64:	200d      	movs	r0, #13
     b66:	f00b fb19 	bl	c19c <dwt_write8bitoffsetreg>
    if(status & SYS_STATUS_TXFRS)
     b6a:	062a      	lsls	r2, r5, #24
     b6c:	d512      	bpl.n	b94 <dwt_isr+0xc4>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_TX); // Clear TX event bits
     b6e:	22f8      	movs	r2, #248	; 0xf8
     b70:	2100      	movs	r1, #0
     b72:	200f      	movs	r0, #15
     b74:	f00b fb36 	bl	c1e4 <dwt_write32bitoffsetreg>
        if((status & SYS_STATUS_AAT) && pdw1000local->wait4resp)
     b78:	072b      	lsls	r3, r5, #28
     b7a:	d506      	bpl.n	b8a <dwt_isr+0xba>
     b7c:	6823      	ldr	r3, [r4, #0]
     b7e:	7d5b      	ldrb	r3, [r3, #21]
     b80:	b11b      	cbz	r3, b8a <dwt_isr+0xba>
            dwt_forcetrxoff(); // Turn the RX off
     b82:	f7ff ff79 	bl	a78 <dwt_forcetrxoff>
            dwt_rxreset(); // Reset in case we were late and a frame was already being received
     b86:	f00b fc21 	bl	c3cc <dwt_rxreset>
        if(pdw1000local->cbTxDone != NULL)
     b8a:	6820      	ldr	r0, [r4, #0]
     b8c:	6a83      	ldr	r3, [r0, #40]	; 0x28
     b8e:	b10b      	cbz	r3, b94 <dwt_isr+0xc4>
            pdw1000local->cbTxDone(&pdw1000local->cbData);
     b90:	301c      	adds	r0, #28
     b92:	4798      	blx	r3
    if(status & SYS_STATUS_ALL_RX_TO)
     b94:	f415 1f08 	tst.w	r5, #2228224	; 0x220000
     b98:	d011      	beq.n	bbe <dwt_isr+0xee>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXRFTO); // Clear RX timeout event bits
     b9a:	200f      	movs	r0, #15
     b9c:	2100      	movs	r1, #0
     b9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     ba2:	f00b fb1f 	bl	c1e4 <dwt_write32bitoffsetreg>
        pdw1000local->wait4resp = 0;
     ba6:	6823      	ldr	r3, [r4, #0]
     ba8:	2200      	movs	r2, #0
     baa:	755a      	strb	r2, [r3, #21]
        dwt_forcetrxoff();
     bac:	f7ff ff64 	bl	a78 <dwt_forcetrxoff>
        dwt_rxreset();
     bb0:	f00b fc0c 	bl	c3cc <dwt_rxreset>
        if(pdw1000local->cbRxTo != NULL)
     bb4:	6820      	ldr	r0, [r4, #0]
     bb6:	6b03      	ldr	r3, [r0, #48]	; 0x30
     bb8:	b10b      	cbz	r3, bbe <dwt_isr+0xee>
            pdw1000local->cbRxTo(&pdw1000local->cbData);
     bba:	301c      	adds	r0, #28
     bbc:	4798      	blx	r3
    if(status & SYS_STATUS_ALL_RX_ERR)
     bbe:	4a0d      	ldr	r2, [pc, #52]	; (bf4 <dwt_isr+0x124>)
     bc0:	4215      	tst	r5, r2
     bc2:	d014      	beq.n	bee <dwt_isr+0x11e>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR); // Clear RX error event bits
     bc4:	200f      	movs	r0, #15
     bc6:	2100      	movs	r1, #0
     bc8:	f00b fb0c 	bl	c1e4 <dwt_write32bitoffsetreg>
        pdw1000local->wait4resp = 0;
     bcc:	6823      	ldr	r3, [r4, #0]
     bce:	2200      	movs	r2, #0
     bd0:	755a      	strb	r2, [r3, #21]
        dwt_forcetrxoff();
     bd2:	f7ff ff51 	bl	a78 <dwt_forcetrxoff>
        dwt_rxreset();
     bd6:	f00b fbf9 	bl	c3cc <dwt_rxreset>
        if(pdw1000local->cbRxErr != NULL)
     bda:	6820      	ldr	r0, [r4, #0]
     bdc:	6b43      	ldr	r3, [r0, #52]	; 0x34
     bde:	b133      	cbz	r3, bee <dwt_isr+0x11e>
}
     be0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            pdw1000local->cbRxErr(&pdw1000local->cbData);
     be4:	301c      	adds	r0, #28
     be6:	4718      	bx	r3
            len &= RX_FINFO_RXFLEN_MASK;
     be8:	f000 027f 	and.w	r2, r0, #127	; 0x7f
     bec:	e78e      	b.n	b0c <dwt_isr+0x3c>
}
     bee:	bd70      	pop	{r4, r5, r6, pc}
     bf0:	2000000c 	.word	0x2000000c
     bf4:	24059000 	.word	0x24059000

00000bf8 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
     bf8:	b508      	push	{r3, lr}
    _dwt_disablesequencing();
     bfa:	f00b fbae 	bl	c35a <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
     bfe:	2200      	movs	r2, #0
     c00:	4611      	mov	r1, r2
     c02:	202c      	movs	r0, #44	; 0x2c
     c04:	f00b fad7 	bl	c1b6 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
     c08:	2200      	movs	r2, #0
     c0a:	2106      	movs	r1, #6
     c0c:	202c      	movs	r0, #44	; 0x2c
     c0e:	f00b fac5 	bl	c19c <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
     c12:	f00b fb08 	bl	c226 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
     c16:	2200      	movs	r2, #0
     c18:	2103      	movs	r1, #3
     c1a:	2036      	movs	r0, #54	; 0x36
     c1c:	f00b fabe 	bl	c19c <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
     c20:	2001      	movs	r0, #1
     c22:	f00b fbeb 	bl	c3fc <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
     c26:	22f0      	movs	r2, #240	; 0xf0
     c28:	2103      	movs	r1, #3
     c2a:	2036      	movs	r0, #54	; 0x36
     c2c:	f00b fab6 	bl	c19c <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
     c30:	4b02      	ldr	r3, [pc, #8]	; (c3c <dwt_softreset+0x44>)
     c32:	681b      	ldr	r3, [r3, #0]
     c34:	2200      	movs	r2, #0
     c36:	755a      	strb	r2, [r3, #21]
}
     c38:	bd08      	pop	{r3, pc}
     c3a:	bf00      	nop
     c3c:	2000000c 	.word	0x2000000c

00000c40 <dwt_initialise>:
{
     c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
     c44:	4d62      	ldr	r5, [pc, #392]	; (dd0 <dwt_initialise+0x190>)
     c46:	682b      	ldr	r3, [r5, #0]
     c48:	2700      	movs	r7, #0
    pdw1000local->cbRxOk = NULL;
     c4a:	e9c3 770a 	strd	r7, r7, [r3, #40]	; 0x28
    pdw1000local->cbRxErr = NULL;
     c4e:	e9c3 770c 	strd	r7, r7, [r3, #48]	; 0x30
    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
     c52:	615f      	str	r7, [r3, #20]
{
     c54:	4604      	mov	r4, r0
    uint32_t device_id = dwt_readdevid();
     c56:	f00b fa84 	bl	c162 <dwt_readdevid>
    if (DWT_DEVICE_ID != device_id) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
     c5a:	4b5e      	ldr	r3, [pc, #376]	; (dd4 <dwt_initialise+0x194>)
     c5c:	4298      	cmp	r0, r3
    uint32_t device_id = dwt_readdevid();
     c5e:	4601      	mov	r1, r0
    if (DWT_DEVICE_ID != device_id) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
     c60:	f040 80b2 	bne.w	dc8 <dwt_initialise+0x188>
    printk("device_id: %08x\n", device_id);
     c64:	485c      	ldr	r0, [pc, #368]	; (dd8 <dwt_initialise+0x198>)
     c66:	f00b fc8c 	bl	c582 <printk>
    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
     c6a:	f014 0602 	ands.w	r6, r4, #2
     c6e:	d04a      	beq.n	d06 <dwt_initialise+0xc6>
    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
     c70:	f014 08f8 	ands.w	r8, r4, #248	; 0xf8
     c74:	d06f      	beq.n	d56 <dwt_initialise+0x116>
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
     c76:	2204      	movs	r2, #4
     c78:	4639      	mov	r1, r7
     c7a:	2024      	movs	r0, #36	; 0x24
     c7c:	f00b fa8e 	bl	c19c <dwt_write8bitoffsetreg>
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
     c80:	2130      	movs	r1, #48	; 0x30
     c82:	2028      	movs	r0, #40	; 0x28
     c84:	f00b fa5c 	bl	c140 <dwt_read32bitoffsetreg>
     c88:	f1b0 3f88 	cmp.w	r0, #2290649224	; 0x88888888
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
     c8c:	bf1f      	itttt	ne
     c8e:	682a      	ldrne	r2, [r5, #0]
     c90:	8ad3      	ldrhne	r3, [r2, #22]
     c92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
     c96:	82d3      	strhne	r3, [r2, #22]
    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
     c98:	f004 030a 	and.w	r3, r4, #10
     c9c:	2b0a      	cmp	r3, #10
     c9e:	d160      	bne.n	d62 <dwt_initialise+0x122>
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
     ca0:	201e      	movs	r0, #30
     ca2:	f00b faaa 	bl	c1fa <_dwt_otpread>
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
     ca6:	682b      	ldr	r3, [r5, #0]
     ca8:	f3c0 2007 	ubfx	r0, r0, #8, #8
     cac:	72d8      	strb	r0, [r3, #11]
    if(DWT_READ_OTP_PID & config)
     cae:	f014 0010 	ands.w	r0, r4, #16
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
     cb2:	682f      	ldr	r7, [r5, #0]
    if(DWT_READ_OTP_PID & config)
     cb4:	d002      	beq.n	cbc <dwt_initialise+0x7c>
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
     cb6:	2006      	movs	r0, #6
     cb8:	f00b fa9f 	bl	c1fa <_dwt_otpread>
     cbc:	6038      	str	r0, [r7, #0]
    if(DWT_READ_OTP_LID & config)
     cbe:	f014 0020 	ands.w	r0, r4, #32
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
     cc2:	682f      	ldr	r7, [r5, #0]
    if(DWT_READ_OTP_LID & config)
     cc4:	d002      	beq.n	ccc <dwt_initialise+0x8c>
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
     cc6:	2007      	movs	r0, #7
     cc8:	f00b fa97 	bl	c1fa <_dwt_otpread>
    if(DWT_READ_OTP_BAT & config)
     ccc:	f014 0240 	ands.w	r2, r4, #64	; 0x40
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
     cd0:	6078      	str	r0, [r7, #4]
    if(DWT_READ_OTP_BAT & config)
     cd2:	d04a      	beq.n	d6a <dwt_initialise+0x12a>
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
     cd4:	2008      	movs	r0, #8
     cd6:	f00b fa90 	bl	c1fa <_dwt_otpread>
     cda:	682b      	ldr	r3, [r5, #0]
     cdc:	7218      	strb	r0, [r3, #8]
    if(DWT_READ_OTP_TMP & config)
     cde:	f014 0280 	ands.w	r2, r4, #128	; 0x80
     ce2:	d045      	beq.n	d70 <dwt_initialise+0x130>
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
     ce4:	2009      	movs	r0, #9
     ce6:	f00b fa88 	bl	c1fa <_dwt_otpread>
     cea:	682b      	ldr	r3, [r5, #0]
     cec:	7258      	strb	r0, [r3, #9]
    if(!(DWT_DW_WAKE_UP & config))
     cee:	2e00      	cmp	r6, #0
     cf0:	d167      	bne.n	dc2 <dwt_initialise+0x182>
        if(DWT_LOADUCODE & config)
     cf2:	07e2      	lsls	r2, r4, #31
     cf4:	d53f      	bpl.n	d76 <dwt_initialise+0x136>
            _dwt_loaducodefromrom();
     cf6:	f00b fb1e 	bl	c336 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
     cfa:	682a      	ldr	r2, [r5, #0]
     cfc:	8ad3      	ldrh	r3, [r2, #22]
     cfe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     d02:	82d3      	strh	r3, [r2, #22]
     d04:	e042      	b.n	d8c <dwt_initialise+0x14c>
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
     d06:	f7ff ff77 	bl	bf8 <dwt_softreset>
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
     d0a:	4630      	mov	r0, r6
     d0c:	f00b faad 	bl	c26a <_dwt_enableclocks>
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
     d10:	2204      	movs	r2, #4
     d12:	4631      	mov	r1, r6
     d14:	2024      	movs	r0, #36	; 0x24
     d16:	f00b fa41 	bl	c19c <dwt_write8bitoffsetreg>
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
     d1a:	2004      	movs	r0, #4
     d1c:	f00b fa6d 	bl	c1fa <_dwt_otpread>
        if((ldo_tune & 0xFF) != 0)
     d20:	b2c0      	uxtb	r0, r0
     d22:	b148      	cbz	r0, d38 <dwt_initialise+0xf8>
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
     d24:	2202      	movs	r2, #2
     d26:	2112      	movs	r1, #18
     d28:	202d      	movs	r0, #45	; 0x2d
     d2a:	f00b fa37 	bl	c19c <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
     d2e:	682a      	ldr	r2, [r5, #0]
     d30:	8ad3      	ldrh	r3, [r2, #22]
     d32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     d36:	82d3      	strh	r3, [r2, #22]
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
     d38:	201e      	movs	r0, #30
     d3a:	f00b fa5e 	bl	c1fa <_dwt_otpread>
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
     d3e:	682b      	ldr	r3, [r5, #0]
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
     d40:	f010 0f1f 	tst.w	r0, #31
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
     d44:	f3c0 2207 	ubfx	r2, r0, #8, #8
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
     d48:	bf08      	it	eq
     d4a:	2010      	moveq	r0, #16
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
     d4c:	72da      	strb	r2, [r3, #11]
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
     d4e:	b2c0      	uxtb	r0, r0
     d50:	f00b fb49 	bl	c3e6 <dwt_setxtaltrim>
     d54:	e7ab      	b.n	cae <dwt_initialise+0x6e>
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
     d56:	4640      	mov	r0, r8
     d58:	f00b fa87 	bl	c26a <_dwt_enableclocks>
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
     d5c:	2204      	movs	r2, #4
     d5e:	4641      	mov	r1, r8
     d60:	e78b      	b.n	c7a <dwt_initialise+0x3a>
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
     d62:	682b      	ldr	r3, [r5, #0]
     d64:	2200      	movs	r2, #0
     d66:	72da      	strb	r2, [r3, #11]
    if(!(DWT_DW_WAKE_UP & config))
     d68:	e7a1      	b.n	cae <dwt_initialise+0x6e>
        pdw1000local->vBatP = 0;
     d6a:	682b      	ldr	r3, [r5, #0]
     d6c:	721a      	strb	r2, [r3, #8]
     d6e:	e7b6      	b.n	cde <dwt_initialise+0x9e>
        pdw1000local->tempP = 0;
     d70:	682b      	ldr	r3, [r5, #0]
     d72:	725a      	strb	r2, [r3, #9]
     d74:	e7bb      	b.n	cee <dwt_initialise+0xae>
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
     d76:	2105      	movs	r1, #5
     d78:	2036      	movs	r0, #54	; 0x36
     d7a:	f00b f9f6 	bl	c16a <dwt_read16bitoffsetreg>
            rega &= 0xFDFF ; // Clear LDERUN bit
     d7e:	f420 7200 	bic.w	r2, r0, #512	; 0x200
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
     d82:	b292      	uxth	r2, r2
     d84:	2105      	movs	r1, #5
     d86:	2036      	movs	r0, #54	; 0x36
     d88:	f00b fa15 	bl	c1b6 <dwt_write16bitoffsetreg>
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
     d8c:	2001      	movs	r0, #1
     d8e:	f00b fa6c 	bl	c26a <_dwt_enableclocks>
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
     d92:	2200      	movs	r2, #0
     d94:	210a      	movs	r1, #10
     d96:	202c      	movs	r0, #44	; 0x2c
     d98:	f00b fa00 	bl	c19c <dwt_write8bitoffsetreg>
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
     d9c:	2100      	movs	r1, #0
     d9e:	2004      	movs	r0, #4
     da0:	682c      	ldr	r4, [r5, #0]
     da2:	f00b f9cd 	bl	c140 <dwt_read32bitoffsetreg>
     da6:	6120      	str	r0, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
     da8:	682c      	ldr	r4, [r5, #0]
     daa:	8a63      	ldrh	r3, [r4, #18]
     dac:	f003 0303 	and.w	r3, r3, #3
     db0:	72a3      	strb	r3, [r4, #10]
    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
     db2:	2100      	movs	r1, #0
     db4:	2008      	movs	r0, #8
     db6:	f00b f9c3 	bl	c140 <dwt_read32bitoffsetreg>
     dba:	60e0      	str	r0, [r4, #12]
    return DWT_SUCCESS ;
     dbc:	2000      	movs	r0, #0
} // end dwt_initialise()
     dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
     dc2:	0763      	lsls	r3, r4, #29
     dc4:	d4e2      	bmi.n	d8c <dwt_initialise+0x14c>
     dc6:	e798      	b.n	cfa <dwt_initialise+0xba>
        return DWT_ERROR ;
     dc8:	f04f 30ff 	mov.w	r0, #4294967295
     dcc:	e7f7      	b.n	dbe <dwt_initialise+0x17e>
     dce:	bf00      	nop
     dd0:	2000000c 	.word	0x2000000c
     dd4:	deca0130 	.word	0xdeca0130
     dd8:	00010fdc 	.word	0x00010fdc

00000ddc <openspi>:

//     return 0;
// }

int openspi(void)
{
     ddc:	b530      	push	{r4, r5, lr}
    cs_ctrl = *SPI_CS_CONTROL_PTR_DT(DT_NODELABEL(ieee802154), 2);
     dde:	4a19      	ldr	r2, [pc, #100]	; (e44 <openspi+0x68>)
     de0:	4c19      	ldr	r4, [pc, #100]	; (e48 <openspi+0x6c>)
    spi = DEVICE_DT_GET(DT_NODELABEL(spi2));

    spi_cfg->operation = SPI_WORD_SET(8);
    spi_cfg->frequency = 2000000;

    memset(&tx_buf[0], 0, 255);
     de2:	4d1a      	ldr	r5, [pc, #104]	; (e4c <openspi+0x70>)
    cs_ctrl = *SPI_CS_CONTROL_PTR_DT(DT_NODELABEL(ieee802154), 2);
     de4:	ca07      	ldmia	r2, {r0, r1, r2}
{
     de6:	b085      	sub	sp, #20
    cs_ctrl = *SPI_CS_CONTROL_PTR_DT(DT_NODELABEL(ieee802154), 2);
     de8:	ab01      	add	r3, sp, #4
     dea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
     dee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    spi_cfg = &spi_cfgs[0];
     df2:	4a17      	ldr	r2, [pc, #92]	; (e50 <openspi+0x74>)
        spi_cfgs[i].cs = &cs_ctrl;
     df4:	4b17      	ldr	r3, [pc, #92]	; (e54 <openspi+0x78>)
    spi_cfg = &spi_cfgs[0];
     df6:	6013      	str	r3, [r2, #0]
    spi = DEVICE_DT_GET(DT_NODELABEL(spi2));
     df8:	4a17      	ldr	r2, [pc, #92]	; (e58 <openspi+0x7c>)
     dfa:	4918      	ldr	r1, [pc, #96]	; (e5c <openspi+0x80>)
     dfc:	6011      	str	r1, [r2, #0]
    spi_cfg->operation = SPI_WORD_SET(8);
     dfe:	f44f 7280 	mov.w	r2, #256	; 0x100
        spi_cfgs[i].cs = &cs_ctrl;
     e02:	609c      	str	r4, [r3, #8]
     e04:	615c      	str	r4, [r3, #20]
     e06:	621c      	str	r4, [r3, #32]
     e08:	62dc      	str	r4, [r3, #44]	; 0x2c
    spi_cfg->operation = SPI_WORD_SET(8);
     e0a:	809a      	strh	r2, [r3, #4]
    memset(&rx_buf[0], 0, 255);
     e0c:	4c14      	ldr	r4, [pc, #80]	; (e60 <openspi+0x84>)
    spi_cfg->frequency = 2000000;
     e0e:	4a15      	ldr	r2, [pc, #84]	; (e64 <openspi+0x88>)
     e10:	601a      	str	r2, [r3, #0]
    memset(&tx_buf[0], 0, 255);
     e12:	2100      	movs	r1, #0
     e14:	22ff      	movs	r2, #255	; 0xff
     e16:	4628      	mov	r0, r5
     e18:	f00d ff4c 	bl	ecb4 <memset>
    memset(&rx_buf[0], 0, 255);
     e1c:	22ff      	movs	r2, #255	; 0xff
     e1e:	2100      	movs	r1, #0
     e20:	4620      	mov	r0, r4
     e22:	f00d ff47 	bl	ecb4 <memset>
    bufs[0].buf = &tx_buf[0];
     e26:	4b10      	ldr	r3, [pc, #64]	; (e68 <openspi+0x8c>)
    bufs[1].buf = &rx_buf[0];
    tx.buffers = &bufs[0];
     e28:	4910      	ldr	r1, [pc, #64]	; (e6c <openspi+0x90>)
    rx.buffers = &bufs[1];
     e2a:	4a11      	ldr	r2, [pc, #68]	; (e70 <openspi+0x94>)
    bufs[0].buf = &tx_buf[0];
     e2c:	601d      	str	r5, [r3, #0]
    bufs[1].buf = &rx_buf[0];
     e2e:	609c      	str	r4, [r3, #8]
    tx.buffers = &bufs[0];
     e30:	600b      	str	r3, [r1, #0]
    rx.buffers = &bufs[1];
     e32:	3308      	adds	r3, #8
     e34:	6013      	str	r3, [r2, #0]
    tx.count = 1;
    rx.count = 1;

    return 0;
}
     e36:	2000      	movs	r0, #0
    tx.count = 1;
     e38:	2301      	movs	r3, #1
     e3a:	604b      	str	r3, [r1, #4]
    rx.count = 1;
     e3c:	6053      	str	r3, [r2, #4]
}
     e3e:	b005      	add	sp, #20
     e40:	bd30      	pop	{r4, r5, pc}
     e42:	bf00      	nop
     e44:	000101e0 	.word	0x000101e0
     e48:	20000e48 	.word	0x20000e48
     e4c:	200035c0 	.word	0x200035c0
     e50:	20000ea4 	.word	0x20000ea4
     e54:	20000e74 	.word	0x20000e74
     e58:	20000ea8 	.word	0x20000ea8
     e5c:	0000fec0 	.word	0x0000fec0
     e60:	200034c1 	.word	0x200034c1
     e64:	001e8480 	.word	0x001e8480
     e68:	20000e64 	.word	0x20000e64
     e6c:	20000e5c 	.word	0x20000e5c
     e70:	20000e54 	.word	0x20000e54

00000e74 <set_spi_speed_slow>:

void set_spi_speed_slow(void)
{
     e74:	b508      	push	{r3, lr}
    spi_cfg = &spi_cfgs[0];
     e76:	4a0a      	ldr	r2, [pc, #40]	; (ea0 <set_spi_speed_slow+0x2c>)
     e78:	4b0a      	ldr	r3, [pc, #40]	; (ea4 <set_spi_speed_slow+0x30>)
     e7a:	6013      	str	r3, [r2, #0]
    spi_cfg->operation = SPI_WORD_SET(8);
     e7c:	f44f 7280 	mov.w	r2, #256	; 0x100
     e80:	809a      	strh	r2, [r3, #4]
    spi_cfg->frequency = 2000000;
     e82:	4a09      	ldr	r2, [pc, #36]	; (ea8 <set_spi_speed_slow+0x34>)
     e84:	601a      	str	r2, [r3, #0]

    memset(&tx_buf[0], 0, 255);
     e86:	2100      	movs	r1, #0
     e88:	22ff      	movs	r2, #255	; 0xff
     e8a:	4808      	ldr	r0, [pc, #32]	; (eac <set_spi_speed_slow+0x38>)
     e8c:	f00d ff12 	bl	ecb4 <memset>
    memset(&rx_buf[0], 0, 255);
}
     e90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    memset(&rx_buf[0], 0, 255);
     e94:	4806      	ldr	r0, [pc, #24]	; (eb0 <set_spi_speed_slow+0x3c>)
     e96:	22ff      	movs	r2, #255	; 0xff
     e98:	2100      	movs	r1, #0
     e9a:	f00d bf0b 	b.w	ecb4 <memset>
     e9e:	bf00      	nop
     ea0:	20000ea4 	.word	0x20000ea4
     ea4:	20000e74 	.word	0x20000e74
     ea8:	001e8480 	.word	0x001e8480
     eac:	200035c0 	.word	0x200035c0
     eb0:	200034c1 	.word	0x200034c1

00000eb4 <set_spi_speed_fast>:

void set_spi_speed_fast(void)
{
    spi_cfg = &spi_cfgs[1];
     eb4:	4a0a      	ldr	r2, [pc, #40]	; (ee0 <set_spi_speed_fast+0x2c>)
    spi_cfg->operation = SPI_WORD_SET(8);
    spi_cfg->frequency = 8000000;

    memset(&tx_buf[0], 0, 255);
     eb6:	480b      	ldr	r0, [pc, #44]	; (ee4 <set_spi_speed_fast+0x30>)
{
     eb8:	b508      	push	{r3, lr}
    spi_cfg = &spi_cfgs[1];
     eba:	4b0b      	ldr	r3, [pc, #44]	; (ee8 <set_spi_speed_fast+0x34>)
     ebc:	6013      	str	r3, [r2, #0]
    spi_cfg->operation = SPI_WORD_SET(8);
     ebe:	f44f 7280 	mov.w	r2, #256	; 0x100
     ec2:	809a      	strh	r2, [r3, #4]
     ec4:	3b0c      	subs	r3, #12
    spi_cfg->frequency = 8000000;
     ec6:	4a09      	ldr	r2, [pc, #36]	; (eec <set_spi_speed_fast+0x38>)
     ec8:	60da      	str	r2, [r3, #12]
    memset(&tx_buf[0], 0, 255);
     eca:	2100      	movs	r1, #0
     ecc:	22ff      	movs	r2, #255	; 0xff
     ece:	f00d fef1 	bl	ecb4 <memset>
    memset(&rx_buf[0], 0, 255);
}
     ed2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    memset(&rx_buf[0], 0, 255);
     ed6:	4806      	ldr	r0, [pc, #24]	; (ef0 <set_spi_speed_fast+0x3c>)
     ed8:	22ff      	movs	r2, #255	; 0xff
     eda:	2100      	movs	r1, #0
     edc:	f00d beea 	b.w	ecb4 <memset>
     ee0:	20000ea4 	.word	0x20000ea4
     ee4:	200035c0 	.word	0x200035c0
     ee8:	20000e80 	.word	0x20000e80
     eec:	007a1200 	.word	0x007a1200
     ef0:	200034c1 	.word	0x200034c1

00000ef4 <writetospi>:
 */
int writetospi(uint16           headerLength,
               const    uint8 * headerBuffer,
               uint32           bodyLength,
               const    uint8 * bodyBuffer)
{
     ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     ef8:	461f      	mov	r7, r3
     efa:	4615      	mov	r5, r2
     efc:	4604      	mov	r4, r0
     efe:	4688      	mov	r8, r1
#if 0
    LOG_HEXDUMP_INF(headerBuffer, headerLength, "writetospi: Header");
    LOG_HEXDUMP_INF(bodyBuffer, bodyLength, "writetospi: Body");
#endif

    stat = decamutexon();
     f00:	f00b fa79 	bl	c3f6 <decamutexon>

    memcpy(&tx_buf[0], headerBuffer, headerLength);
     f04:	f8df 9040 	ldr.w	r9, [pc, #64]	; f48 <writetospi+0x54>
     f08:	4622      	mov	r2, r4
     f0a:	4641      	mov	r1, r8
    stat = decamutexon();
     f0c:	4606      	mov	r6, r0
    memcpy(&tx_buf[0], headerBuffer, headerLength);
     f0e:	4648      	mov	r0, r9
     f10:	f00d fec5 	bl	ec9e <memcpy>
    memcpy(&tx_buf[headerLength], bodyBuffer, bodyLength);
     f14:	4639      	mov	r1, r7
     f16:	eb09 0004 	add.w	r0, r9, r4
     f1a:	462a      	mov	r2, r5
     f1c:	f00d febf 	bl	ec9e <memcpy>

    bufs[0].len = headerLength + bodyLength;
     f20:	4b0a      	ldr	r3, [pc, #40]	; (f4c <writetospi+0x58>)
     f22:	442c      	add	r4, r5
     f24:	605c      	str	r4, [r3, #4]
    bufs[1].len = headerLength + bodyLength;
     f26:	60dc      	str	r4, [r3, #12]

    spi_transceive(spi, spi_cfg, &tx, &rx);
     f28:	4b09      	ldr	r3, [pc, #36]	; (f50 <writetospi+0x5c>)
     f2a:	6818      	ldr	r0, [r3, #0]
     f2c:	4b09      	ldr	r3, [pc, #36]	; (f54 <writetospi+0x60>)
     f2e:	6819      	ldr	r1, [r3, #0]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
     f30:	6883      	ldr	r3, [r0, #8]
     f32:	4a09      	ldr	r2, [pc, #36]	; (f58 <writetospi+0x64>)
     f34:	681c      	ldr	r4, [r3, #0]
     f36:	4b09      	ldr	r3, [pc, #36]	; (f5c <writetospi+0x68>)
     f38:	47a0      	blx	r4

    decamutexoff(stat);
     f3a:	4630      	mov	r0, r6
     f3c:	f00b fa5d 	bl	c3fa <decamutexoff>

    return 0;
}
     f40:	2000      	movs	r0, #0
     f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     f46:	bf00      	nop
     f48:	200035c0 	.word	0x200035c0
     f4c:	20000e64 	.word	0x20000e64
     f50:	20000ea8 	.word	0x20000ea8
     f54:	20000ea4 	.word	0x20000ea4
     f58:	20000e5c 	.word	0x20000e5c
     f5c:	20000e54 	.word	0x20000e54

00000f60 <readfromspi>:
 */
int readfromspi(uint16        headerLength,
                const uint8 * headerBuffer,
                uint32        readLength,
                uint8       * readBuffer)
{
     f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     f64:	461f      	mov	r7, r3
     f66:	4604      	mov	r4, r0
     f68:	4689      	mov	r9, r1
     f6a:	4615      	mov	r5, r2
    decaIrqStatus_t  stat;

    stat = decamutexon();
     f6c:	f00b fa43 	bl	c3f6 <decamutexon>

    memset(&tx_buf[0], 0, headerLength + readLength);
     f70:	f8df a050 	ldr.w	sl, [pc, #80]	; fc4 <readfromspi+0x64>
     f74:	eb04 0805 	add.w	r8, r4, r5
     f78:	4642      	mov	r2, r8
    stat = decamutexon();
     f7a:	4606      	mov	r6, r0
    memset(&tx_buf[0], 0, headerLength + readLength);
     f7c:	2100      	movs	r1, #0
     f7e:	4650      	mov	r0, sl
     f80:	f00d fe98 	bl	ecb4 <memset>
    memcpy(&tx_buf[0], headerBuffer, headerLength);
     f84:	4649      	mov	r1, r9
     f86:	4622      	mov	r2, r4
     f88:	4650      	mov	r0, sl
     f8a:	f00d fe88 	bl	ec9e <memcpy>

    bufs[0].len = headerLength + readLength;
     f8e:	4b0e      	ldr	r3, [pc, #56]	; (fc8 <readfromspi+0x68>)
     f90:	f8c3 8004 	str.w	r8, [r3, #4]
    bufs[1].len = headerLength + readLength;
     f94:	f8c3 800c 	str.w	r8, [r3, #12]

    spi_transceive(spi, spi_cfg, &tx, &rx);
     f98:	4b0c      	ldr	r3, [pc, #48]	; (fcc <readfromspi+0x6c>)
     f9a:	6818      	ldr	r0, [r3, #0]
     f9c:	4b0c      	ldr	r3, [pc, #48]	; (fd0 <readfromspi+0x70>)
     f9e:	6819      	ldr	r1, [r3, #0]
     fa0:	6883      	ldr	r3, [r0, #8]
     fa2:	4a0c      	ldr	r2, [pc, #48]	; (fd4 <readfromspi+0x74>)
     fa4:	f8d3 8000 	ldr.w	r8, [r3]
     fa8:	4b0b      	ldr	r3, [pc, #44]	; (fd8 <readfromspi+0x78>)
     faa:	47c0      	blx	r8

    memcpy(readBuffer, rx_buf + headerLength, readLength);
     fac:	490b      	ldr	r1, [pc, #44]	; (fdc <readfromspi+0x7c>)
     fae:	462a      	mov	r2, r5
     fb0:	4421      	add	r1, r4
     fb2:	4638      	mov	r0, r7
     fb4:	f00d fe73 	bl	ec9e <memcpy>

    decamutexoff(stat);
     fb8:	4630      	mov	r0, r6
     fba:	f00b fa1e 	bl	c3fa <decamutexoff>
    LOG_HEXDUMP_INF(headerBuffer, headerLength, "readfromspi: Header");
    LOG_HEXDUMP_INF(readBuffer, readLength, "readfromspi: Body");
#endif

    return 0;
}
     fbe:	2000      	movs	r0, #0
     fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     fc4:	200035c0 	.word	0x200035c0
     fc8:	20000e64 	.word	0x20000e64
     fcc:	20000ea8 	.word	0x20000ea8
     fd0:	20000ea4 	.word	0x20000ea4
     fd4:	20000e5c 	.word	0x20000e5c
     fd8:	20000e54 	.word	0x20000e54
     fdc:	200034c1 	.word	0x200034c1

00000fe0 <port_set_deca_isr>:
 * @param deca_isr function pointer to DW1000 interrupt handler to install
 *
 * @return none
 */
void port_set_deca_isr(port_deca_isr_t deca_isr)
{
     fe0:	b580      	push	{r7, lr}
     fe2:	b082      	sub	sp, #8
     fe4:	af00      	add	r7, sp, #0
     fe6:	6078      	str	r0, [r7, #4]
    printk("%s: Binding to GPIO0 and pin %d\n", __func__, GPIO_PIN);
     fe8:	2213      	movs	r2, #19
     fea:	4916      	ldr	r1, [pc, #88]	; (1044 <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x44>)
     fec:	4816      	ldr	r0, [pc, #88]	; (1048 <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x48>)
     fee:	f00b fac8 	bl	c582 <printk>
    // gpio_dev = device_get_binding(DT_LABEL(DT_NODELABEL(gpio0))); // changed 10/23/23
    gpio_dev = DEVICE_DT_GET(DT_NODELABEL(gpio0));
     ff2:	4b16      	ldr	r3, [pc, #88]	; (104c <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x4c>)
     ff4:	4a16      	ldr	r2, [pc, #88]	; (1050 <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x50>)
     ff6:	601a      	str	r2, [r3, #0]
    if (!gpio_dev) {
     ff8:	4b14      	ldr	r3, [pc, #80]	; (104c <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x4c>)
     ffa:	681b      	ldr	r3, [r3, #0]
     ffc:	2b00      	cmp	r3, #0
     ffe:	d103      	bne.n	1008 <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x8>
        printk("error\n");
    1000:	4814      	ldr	r0, [pc, #80]	; (1054 <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x54>)
    1002:	f00b fabe 	bl	c582 <printk>
        return;
    1006:	e01a      	b.n	103e <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x3e>
    }

    /* Decawave interrupt */
    gpio_pin_configure(gpio_dev, GPIO_PIN, (GPIO_INPUT | GPIO_FLAGS));
    1008:	4b10      	ldr	r3, [pc, #64]	; (104c <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x4c>)
    100a:	681b      	ldr	r3, [r3, #0]
    100c:	4a12      	ldr	r2, [pc, #72]	; (1058 <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x58>)
    100e:	2113      	movs	r1, #19
    1010:	4618      	mov	r0, r3
    1012:	f00b fa1b 	bl	c44c <gpio_pin_configure.isra.0>

    gpio_init_callback(&gpio_cb, (gpio_callback_handler_t)(deca_isr), BIT(GPIO_PIN));
    1016:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    101a:	6879      	ldr	r1, [r7, #4]
    101c:	480f      	ldr	r0, [pc, #60]	; (105c <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x5c>)
    101e:	f00b fa0c 	bl	c43a <gpio_init_callback>

    gpio_add_callback(gpio_dev, &gpio_cb);
    1022:	4b0a      	ldr	r3, [pc, #40]	; (104c <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x4c>)
    1024:	681b      	ldr	r3, [r3, #0]
    1026:	490d      	ldr	r1, [pc, #52]	; (105c <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x5c>)
    1028:	4618      	mov	r0, r3
    102a:	f00b fa09 	bl	c440 <gpio_add_callback.isra.0>

    gpio_pin_interrupt_configure(gpio_dev, GPIO_PIN, GPIO_INT_EDGE_RISING);
    102e:	4b07      	ldr	r3, [pc, #28]	; (104c <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x4c>)
    1030:	681b      	ldr	r3, [r3, #0]
    1032:	f04f 62a8 	mov.w	r2, #88080384	; 0x5400000
    1036:	2113      	movs	r1, #19
    1038:	4618      	mov	r0, r3
    103a:	f00b fa23 	bl	c484 <gpio_pin_interrupt_configure.isra.0>

    
}
    103e:	3708      	adds	r7, #8
    1040:	46bd      	mov	sp, r7
    1042:	bd80      	pop	{r7, pc}
    1044:	00011015 	.word	0x00011015
    1048:	000101ec 	.word	0x000101ec
    104c:	20000eb8 	.word	0x20000eb8
    1050:	0000fe6c 	.word	0x0000fe6c
    1054:	00010210 	.word	0x00010210
    1058:	00010011 	.word	0x00010011
    105c:	20000eac 	.word	0x20000eac

00001060 <getopt>:
/*
 * getopt --
 *	Parse argc/argv argument vector.
 */
int getopt(int nargc, char *const nargv[], const char *ostr)
{
    1060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1064:	af00      	add	r7, sp, #0
    1066:	4680      	mov	r8, r0
    1068:	460e      	mov	r6, r1
    106a:	4615      	mov	r5, r2
	struct getopt_state *state;
	char *oli; /* option letter list index */

	/* get getopt state of the current thread */
	state = getopt_state_get();
    106c:	f000 f8c2 	bl	11f4 <getopt_state_get>

	if (state->optreset || *state->place == 0) { /* update scanning pointer */
    1070:	68c3      	ldr	r3, [r0, #12]
	state = getopt_state_get();
    1072:	4604      	mov	r4, r0
	if (state->optreset || *state->place == 0) { /* update scanning pointer */
    1074:	b91b      	cbnz	r3, 107e <getopt+0x1e>
    1076:	6943      	ldr	r3, [r0, #20]
    1078:	781a      	ldrb	r2, [r3, #0]
    107a:	2a00      	cmp	r2, #0
    107c:	d159      	bne.n	1132 <getopt+0xd2>
		state->optreset = 0;
    107e:	2300      	movs	r3, #0
    1080:	60e3      	str	r3, [r4, #12]
		state->place = nargv[state->optind];
    1082:	6863      	ldr	r3, [r4, #4]
		if (state->optind >= nargc || *state->place++ != '-') {
    1084:	4543      	cmp	r3, r8
		state->place = nargv[state->optind];
    1086:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
		if (state->optind >= nargc || *state->place++ != '-') {
    108a:	db09      	blt.n	10a0 <getopt+0x40>
		}
		state->optopt = *state->place++;
		if (state->optopt == '-' && *state->place == 0) {
			/* "--" => end of options */
			++state->optind;
			state->place = EMSG;
    108c:	4b48      	ldr	r3, [pc, #288]	; (11b0 <getopt+0x150>)
    108e:	6163      	str	r3, [r4, #20]
			z_getopt_global_state_update(state);
    1090:	4620      	mov	r0, r4
    1092:	f000 f895 	bl	11c0 <z_getopt_global_state_update>
			return -1;
    1096:	f04f 30ff 	mov.w	r0, #4294967295
		state->place = EMSG;
		++state->optind;
	}
	z_getopt_global_state_update(state);
	return state->optopt;	/* return option letter */
}
    109a:	46bd      	mov	sp, r7
    109c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (state->optind >= nargc || *state->place++ != '-') {
    10a0:	1c51      	adds	r1, r2, #1
    10a2:	6161      	str	r1, [r4, #20]
    10a4:	f892 9000 	ldrb.w	r9, [r2]
    10a8:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
    10ac:	d1ee      	bne.n	108c <getopt+0x2c>
		state->optopt = *state->place++;
    10ae:	1c91      	adds	r1, r2, #2
    10b0:	6161      	str	r1, [r4, #20]
    10b2:	7851      	ldrb	r1, [r2, #1]
    10b4:	60a1      	str	r1, [r4, #8]
		if (state->optopt == '-' && *state->place == 0) {
    10b6:	292d      	cmp	r1, #45	; 0x2d
    10b8:	d104      	bne.n	10c4 <getopt+0x64>
    10ba:	7892      	ldrb	r2, [r2, #2]
    10bc:	b96a      	cbnz	r2, 10da <getopt+0x7a>
			++state->optind;
    10be:	3301      	adds	r3, #1
    10c0:	6063      	str	r3, [r4, #4]
    10c2:	e7e3      	b.n	108c <getopt+0x2c>
		if (state->optopt == 0) {
    10c4:	b949      	cbnz	r1, 10da <getopt+0x7a>
			state->place = EMSG;
    10c6:	4b3a      	ldr	r3, [pc, #232]	; (11b0 <getopt+0x150>)
    10c8:	6163      	str	r3, [r4, #20]
			if (strchr(ostr, '-') == NULL) {
    10ca:	4649      	mov	r1, r9
    10cc:	4628      	mov	r0, r5
    10ce:	f00d fd81 	bl	ebd4 <strchr>
    10d2:	2800      	cmp	r0, #0
    10d4:	d0dc      	beq.n	1090 <getopt+0x30>
			state->optopt = '-';
    10d6:	f8c4 9008 	str.w	r9, [r4, #8]
	oli = strchr(ostr, state->optopt);
    10da:	68a1      	ldr	r1, [r4, #8]
    10dc:	4628      	mov	r0, r5
    10de:	f00d fd79 	bl	ebd4 <strchr>
	if (state->optopt == ':' || oli == NULL) {
    10e2:	68a3      	ldr	r3, [r4, #8]
    10e4:	6962      	ldr	r2, [r4, #20]
    10e6:	2b3a      	cmp	r3, #58	; 0x3a
    10e8:	d001      	beq.n	10ee <getopt+0x8e>
		if (*state->place == 0) {
    10ea:	4611      	mov	r1, r2
	if (state->optopt == ':' || oli == NULL) {
    10ec:	bb30      	cbnz	r0, 113c <getopt+0xdc>
		if (*state->place == 0) {
    10ee:	7812      	ldrb	r2, [r2, #0]
    10f0:	b912      	cbnz	r2, 10f8 <getopt+0x98>
			++state->optind;
    10f2:	6862      	ldr	r2, [r4, #4]
    10f4:	3201      	adds	r2, #1
    10f6:	6062      	str	r2, [r4, #4]
		if (state->opterr && *ostr != ':') {
    10f8:	6822      	ldr	r2, [r4, #0]
    10fa:	b1aa      	cbz	r2, 1128 <getopt+0xc8>
    10fc:	782a      	ldrb	r2, [r5, #0]
    10fe:	2a3a      	cmp	r2, #58	; 0x3a
    1100:	d012      	beq.n	1128 <getopt+0xc8>
			LOG_ERR("illegal option -- %c", state->optopt);
    1102:	482c      	ldr	r0, [pc, #176]	; (11b4 <getopt+0x154>)
    1104:	6802      	ldr	r2, [r0, #0]
    1106:	0751      	lsls	r1, r2, #29
    1108:	d00e      	beq.n	1128 <getopt+0xc8>
    110a:	466d      	mov	r5, sp
    110c:	b088      	sub	sp, #32
    110e:	466a      	mov	r2, sp
    1110:	4929      	ldr	r1, [pc, #164]	; (11b8 <getopt+0x158>)
    1112:	e9c2 1305 	strd	r1, r3, [r2, #20]
    1116:	2303      	movs	r3, #3
    1118:	f842 3f10 	str.w	r3, [r2, #16]!
    111c:	2300      	movs	r3, #0
    111e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    1122:	f002 fb15 	bl	3750 <z_impl_z_log_msg_static_create>
    1126:	46ad      	mov	sp, r5
			z_getopt_global_state_update(state);
    1128:	4620      	mov	r0, r4
    112a:	f000 f849 	bl	11c0 <z_getopt_global_state_update>
		return BADCH;
    112e:	203f      	movs	r0, #63	; 0x3f
    1130:	e7b3      	b.n	109a <getopt+0x3a>
		state->optopt = *state->place++;
    1132:	1c5a      	adds	r2, r3, #1
    1134:	6142      	str	r2, [r0, #20]
    1136:	781b      	ldrb	r3, [r3, #0]
    1138:	6083      	str	r3, [r0, #8]
    113a:	e7ce      	b.n	10da <getopt+0x7a>
	if (oli[1] != ':') {
    113c:	7840      	ldrb	r0, [r0, #1]
    113e:	283a      	cmp	r0, #58	; 0x3a
    1140:	d00b      	beq.n	115a <getopt+0xfa>
		state->optarg = NULL;
    1142:	2300      	movs	r3, #0
    1144:	6123      	str	r3, [r4, #16]
		if (*state->place == 0) {
    1146:	7813      	ldrb	r3, [r2, #0]
    1148:	b913      	cbnz	r3, 1150 <getopt+0xf0>
		++state->optind;
    114a:	6863      	ldr	r3, [r4, #4]
    114c:	3301      	adds	r3, #1
    114e:	6063      	str	r3, [r4, #4]
	z_getopt_global_state_update(state);
    1150:	4620      	mov	r0, r4
    1152:	f000 f835 	bl	11c0 <z_getopt_global_state_update>
	return state->optopt;	/* return option letter */
    1156:	68a0      	ldr	r0, [r4, #8]
    1158:	e79f      	b.n	109a <getopt+0x3a>
		if (*state->place) {
    115a:	f891 c000 	ldrb.w	ip, [r1]
			++state->optind;
    115e:	6862      	ldr	r2, [r4, #4]
    1160:	4813      	ldr	r0, [pc, #76]	; (11b0 <getopt+0x150>)
		if (*state->place) {
    1162:	f1bc 0f00 	cmp.w	ip, #0
    1166:	d105      	bne.n	1174 <getopt+0x114>
		} else if (nargc > ++state->optind) {
    1168:	3201      	adds	r2, #1
    116a:	4590      	cmp	r8, r2
    116c:	6062      	str	r2, [r4, #4]
    116e:	dd04      	ble.n	117a <getopt+0x11a>
			state->optarg = nargv[state->optind];
    1170:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
		state->place = EMSG;
    1174:	e9c4 1004 	strd	r1, r0, [r4, #16]
    1178:	e7e7      	b.n	114a <getopt+0xea>
			state->place = EMSG;
    117a:	6160      	str	r0, [r4, #20]
			if (*ostr == ':') {
    117c:	782d      	ldrb	r5, [r5, #0]
    117e:	2d3a      	cmp	r5, #58	; 0x3a
    1180:	d104      	bne.n	118c <getopt+0x12c>
				z_getopt_global_state_update(state);
    1182:	4620      	mov	r0, r4
    1184:	f000 f81c 	bl	11c0 <z_getopt_global_state_update>
				return BADARG;
    1188:	4628      	mov	r0, r5
    118a:	e786      	b.n	109a <getopt+0x3a>
			if (state->opterr) {
    118c:	6822      	ldr	r2, [r4, #0]
    118e:	2a00      	cmp	r2, #0
    1190:	d0ca      	beq.n	1128 <getopt+0xc8>
				LOG_ERR("option requires an argument -- %c",
    1192:	4808      	ldr	r0, [pc, #32]	; (11b4 <getopt+0x154>)
    1194:	6802      	ldr	r2, [r0, #0]
    1196:	0752      	lsls	r2, r2, #29
    1198:	d0c6      	beq.n	1128 <getopt+0xc8>
    119a:	466d      	mov	r5, sp
    119c:	b088      	sub	sp, #32
    119e:	466a      	mov	r2, sp
    11a0:	4906      	ldr	r1, [pc, #24]	; (11bc <getopt+0x15c>)
    11a2:	e9c2 1305 	strd	r1, r3, [r2, #20]
    11a6:	2303      	movs	r3, #3
    11a8:	f842 3f10 	str.w	r3, [r2, #16]!
    11ac:	4663      	mov	r3, ip
    11ae:	e7b6      	b.n	111e <getopt+0xbe>
    11b0:	0001188f 	.word	0x0001188f
    11b4:	200002e4 	.word	0x200002e4
    11b8:	00011027 	.word	0x00011027
    11bc:	0001103c 	.word	0x0001103c

000011c0 <z_getopt_global_state_update>:
/* This function is not thread safe. All threads using getopt are calling
 * this function.
 */
void z_getopt_global_state_update(struct getopt_state *state)
{
	opterr = state->opterr;
    11c0:	4b07      	ldr	r3, [pc, #28]	; (11e0 <z_getopt_global_state_update+0x20>)
    11c2:	6802      	ldr	r2, [r0, #0]
    11c4:	601a      	str	r2, [r3, #0]
	optind = state->optind;
    11c6:	4b07      	ldr	r3, [pc, #28]	; (11e4 <z_getopt_global_state_update+0x24>)
    11c8:	6842      	ldr	r2, [r0, #4]
    11ca:	601a      	str	r2, [r3, #0]
	optopt = state->optopt;
    11cc:	4b06      	ldr	r3, [pc, #24]	; (11e8 <z_getopt_global_state_update+0x28>)
    11ce:	6882      	ldr	r2, [r0, #8]
    11d0:	601a      	str	r2, [r3, #0]
	optreset = state->optreset;
    11d2:	4b06      	ldr	r3, [pc, #24]	; (11ec <z_getopt_global_state_update+0x2c>)
    11d4:	68c2      	ldr	r2, [r0, #12]
    11d6:	601a      	str	r2, [r3, #0]
	optarg = state->optarg;
    11d8:	4b05      	ldr	r3, [pc, #20]	; (11f0 <z_getopt_global_state_update+0x30>)
    11da:	6902      	ldr	r2, [r0, #16]
    11dc:	601a      	str	r2, [r3, #0]
}
    11de:	4770      	bx	lr
    11e0:	2000002c 	.word	0x2000002c
    11e4:	20000028 	.word	0x20000028
    11e8:	20000ec4 	.word	0x20000ec4
    11ec:	20000ec0 	.word	0x20000ec0
    11f0:	20000ebc 	.word	0x20000ebc

000011f4 <getopt_state_get>:
		}
	}
#endif
	/* If not a shell thread return a common pointer */
	return &m_getopt_common_state;
}
    11f4:	4800      	ldr	r0, [pc, #0]	; (11f8 <getopt_state_get+0x4>)
    11f6:	4770      	bx	lr
    11f8:	20000010 	.word	0x20000010

000011fc <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    11fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1200:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    1202:	0784      	lsls	r4, r0, #30
{
    1204:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    1206:	f002 0304 	and.w	r3, r2, #4
    120a:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    120c:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    1210:	f103 0301 	add.w	r3, r3, #1
    1214:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
    1218:	9203      	str	r2, [sp, #12]
    121a:	4605      	mov	r5, r0
    121c:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    121e:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
    1220:	f040 81be 	bne.w	15a0 <cbvprintf_package+0x3a4>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    1224:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    1226:	b130      	cbz	r0, 1236 <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    1228:	2907      	cmp	r1, #7
    122a:	d809      	bhi.n	1240 <cbvprintf_package+0x44>
		return -ENOSPC;
    122c:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    1230:	b011      	add	sp, #68	; 0x44
    1232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    1236:	f001 0607 	and.w	r6, r1, #7
    123a:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    123c:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
    1240:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    1242:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
    1246:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
    1248:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    124c:	f04f 33ff 	mov.w	r3, #4294967295
    1250:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    1252:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    1256:	464f      	mov	r7, r9
	bool parsing = false;
    1258:	46cb      	mov	fp, r9
	size = sizeof(char *);
    125a:	4653      	mov	r3, sl
			if (buf0 != NULL) {
    125c:	b10d      	cbz	r5, 1262 <cbvprintf_package+0x66>
				*(const char **)buf = s;
    125e:	9a00      	ldr	r2, [sp, #0]
    1260:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1262:	9805      	ldr	r0, [sp, #20]
    1264:	2800      	cmp	r0, #0
    1266:	f300 80eb 	bgt.w	1440 <cbvprintf_package+0x244>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    126a:	489a      	ldr	r0, [pc, #616]	; (14d4 <cbvprintf_package+0x2d8>)
    126c:	9a00      	ldr	r2, [sp, #0]
    126e:	4282      	cmp	r2, r0
    1270:	d303      	bcc.n	127a <cbvprintf_package+0x7e>
    1272:	4899      	ldr	r0, [pc, #612]	; (14d8 <cbvprintf_package+0x2dc>)
    1274:	4282      	cmp	r2, r0
    1276:	f0c0 80e3 	bcc.w	1440 <cbvprintf_package+0x244>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    127a:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    127c:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1280:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1282:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1286:	f100 8106 	bmi.w	1496 <cbvprintf_package+0x29a>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    128a:	2f0f      	cmp	r7, #15
    128c:	f200 80b4 	bhi.w	13f8 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
    1290:	2d00      	cmp	r5, #0
    1292:	f000 8108 	beq.w	14a6 <cbvprintf_package+0x2aa>
					str_ptr_pos[s_idx] = s_ptr_idx;
    1296:	f107 0240 	add.w	r2, r7, #64	; 0x40
    129a:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    129e:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    12a0:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    12a4:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    12a8:	9804      	ldr	r0, [sp, #16]
    12aa:	3001      	adds	r0, #1
    12ac:	9004      	str	r0, [sp, #16]
    12ae:	e0ea      	b.n	1486 <cbvprintf_package+0x28a>
			switch (*fmt) {
    12b0:	287a      	cmp	r0, #122	; 0x7a
    12b2:	d860      	bhi.n	1376 <cbvprintf_package+0x17a>
    12b4:	284b      	cmp	r0, #75	; 0x4b
    12b6:	d80e      	bhi.n	12d6 <cbvprintf_package+0xda>
    12b8:	2847      	cmp	r0, #71	; 0x47
    12ba:	d85c      	bhi.n	1376 <cbvprintf_package+0x17a>
    12bc:	2829      	cmp	r0, #41	; 0x29
    12be:	d82f      	bhi.n	1320 <cbvprintf_package+0x124>
    12c0:	2825      	cmp	r0, #37	; 0x25
    12c2:	d055      	beq.n	1370 <cbvprintf_package+0x174>
    12c4:	d857      	bhi.n	1376 <cbvprintf_package+0x17a>
    12c6:	2820      	cmp	r0, #32
    12c8:	d07d      	beq.n	13c6 <cbvprintf_package+0x1ca>
    12ca:	3823      	subs	r0, #35	; 0x23
    12cc:	f1d0 0b00 	rsbs	fp, r0, #0
    12d0:	eb4b 0b00 	adc.w	fp, fp, r0
    12d4:	e077      	b.n	13c6 <cbvprintf_package+0x1ca>
    12d6:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
    12da:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    12de:	d84a      	bhi.n	1376 <cbvprintf_package+0x17a>
    12e0:	e8df f00c 	tbb	[pc, ip]
    12e4:	49494971 	.word	0x49494971
    12e8:	49494949 	.word	0x49494949
    12ec:	49494949 	.word	0x49494949
    12f0:	4949494c 	.word	0x4949494c
    12f4:	49494949 	.word	0x49494949
    12f8:	4c495a49 	.word	0x4c495a49
    12fc:	5a5a5a4c 	.word	0x5a5a5a4c
    1300:	496e4c71 	.word	0x496e4c71
    1304:	4c184971 	.word	0x4c184971
    1308:	83494918 	.word	0x83494918
    130c:	49494c80 	.word	0x49494c80
    1310:	494c      	.short	0x494c
    1312:	80          	.byte	0x80
    1313:	00          	.byte	0x00
    1314:	2000      	movs	r0, #0
    1316:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
    131a:	f04f 0a04 	mov.w	sl, #4
    131e:	e039      	b.n	1394 <cbvprintf_package+0x198>
			switch (*fmt) {
    1320:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
    1324:	fa5f fc8c 	uxtb.w	ip, ip
    1328:	2201      	movs	r2, #1
    132a:	fa02 fc0c 	lsl.w	ip, r2, ip
    132e:	ea1c 0f0e 	tst.w	ip, lr
    1332:	d148      	bne.n	13c6 <cbvprintf_package+0x1ca>
    1334:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
    1338:	d12e      	bne.n	1398 <cbvprintf_package+0x19c>
    133a:	ea1c 0b02 	ands.w	fp, ip, r2
    133e:	d042      	beq.n	13c6 <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
    1340:	3c01      	subs	r4, #1
    1342:	4454      	add	r4, sl
    1344:	f1ca 0c00 	rsb	ip, sl, #0
    1348:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    134c:	2d00      	cmp	r5, #0
    134e:	d061      	beq.n	1414 <cbvprintf_package+0x218>
    1350:	eba3 0c05 	sub.w	ip, r3, r5
    1354:	44a4      	add	ip, r4
    1356:	45b4      	cmp	ip, r6
    1358:	f63f af68 	bhi.w	122c <cbvprintf_package+0x30>
		if (is_str_arg) {
    135c:	2800      	cmp	r0, #0
    135e:	d168      	bne.n	1432 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
    1360:	2b04      	cmp	r3, #4
    1362:	d147      	bne.n	13f4 <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
    1364:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
    1368:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
    136a:	3404      	adds	r4, #4
    136c:	2304      	movs	r3, #4
    136e:	e02a      	b.n	13c6 <cbvprintf_package+0x1ca>
				arg_idx--;
    1370:	9a01      	ldr	r2, [sp, #4]
    1372:	3a01      	subs	r2, #1
    1374:	9201      	str	r2, [sp, #4]
				parsing = false;
    1376:	f04f 0b00 	mov.w	fp, #0
				continue;
    137a:	e024      	b.n	13c6 <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
    137c:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    1380:	286c      	cmp	r0, #108	; 0x6c
    1382:	d134      	bne.n	13ee <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
    1384:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    1388:	2000      	movs	r0, #0
    138a:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
    138c:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
    138e:	d1c4      	bne.n	131a <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
    1390:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
    1394:	4653      	mov	r3, sl
    1396:	e7d3      	b.n	1340 <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
    1398:	f108 0807 	add.w	r8, r8, #7
    139c:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
    13a0:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
    13a2:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
    13a6:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
    13aa:	b135      	cbz	r5, 13ba <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
    13ac:	9806      	ldr	r0, [sp, #24]
    13ae:	4420      	add	r0, r4
    13b0:	42b0      	cmp	r0, r6
    13b2:	f63f af3b 	bhi.w	122c <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
    13b6:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
    13ba:	3408      	adds	r4, #8
				parsing = false;
    13bc:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
    13c0:	f04f 0a08 	mov.w	sl, #8
    13c4:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
    13c6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    13ca:	2800      	cmp	r0, #0
    13cc:	d078      	beq.n	14c0 <cbvprintf_package+0x2c4>
			if (!parsing) {
    13ce:	f1bb 0f00 	cmp.w	fp, #0
    13d2:	f47f af6d 	bne.w	12b0 <cbvprintf_package+0xb4>
				if (*fmt == '%') {
    13d6:	2825      	cmp	r0, #37	; 0x25
    13d8:	d1f5      	bne.n	13c6 <cbvprintf_package+0x1ca>
					arg_idx++;
    13da:	9b01      	ldr	r3, [sp, #4]
    13dc:	3301      	adds	r3, #1
    13de:	9301      	str	r3, [sp, #4]
					parsing = true;
    13e0:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
    13e4:	f04f 0a04 	mov.w	sl, #4
    13e8:	e7ec      	b.n	13c4 <cbvprintf_package+0x1c8>
			switch (*fmt) {
    13ea:	4658      	mov	r0, fp
    13ec:	e793      	b.n	1316 <cbvprintf_package+0x11a>
    13ee:	2000      	movs	r0, #0
				parsing = false;
    13f0:	4683      	mov	fp, r0
    13f2:	e7a5      	b.n	1340 <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
    13f4:	2b08      	cmp	r3, #8
    13f6:	d002      	beq.n	13fe <cbvprintf_package+0x202>
					return -EINVAL;
    13f8:	f06f 0015 	mvn.w	r0, #21
    13fc:	e718      	b.n	1230 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
    13fe:	f108 0807 	add.w	r8, r8, #7
    1402:	f028 0807 	bic.w	r8, r8, #7
    1406:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
    140a:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
    140e:	3408      	adds	r4, #8
    1410:	2308      	movs	r3, #8
    1412:	e7d8      	b.n	13c6 <cbvprintf_package+0x1ca>
		if (is_str_arg) {
    1414:	b968      	cbnz	r0, 1432 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
    1416:	2b04      	cmp	r3, #4
    1418:	d102      	bne.n	1420 <cbvprintf_package+0x224>
			int v = va_arg(ap, int);
    141a:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
    141e:	e7a4      	b.n	136a <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
    1420:	2b08      	cmp	r3, #8
    1422:	d1e9      	bne.n	13f8 <cbvprintf_package+0x1fc>
			long long v = va_arg(ap, long long);
    1424:	f108 0807 	add.w	r8, r8, #7
    1428:	f028 0807 	bic.w	r8, r8, #7
    142c:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
    1430:	e7ed      	b.n	140e <cbvprintf_package+0x212>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1432:	9a05      	ldr	r2, [sp, #20]
    1434:	3a01      	subs	r2, #1
    1436:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
    1438:	f858 2b04 	ldr.w	r2, [r8], #4
    143c:	9200      	str	r2, [sp, #0]
    143e:	e70d      	b.n	125c <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
    1440:	9a03      	ldr	r2, [sp, #12]
    1442:	0790      	lsls	r0, r2, #30
    1444:	d520      	bpl.n	1488 <cbvprintf_package+0x28c>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1446:	eba4 0e05 	sub.w	lr, r4, r5
    144a:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    144e:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1452:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    1456:	d2cf      	bcs.n	13f8 <cbvprintf_package+0x1fc>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    1458:	2f0f      	cmp	r7, #15
    145a:	d8cd      	bhi.n	13f8 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
    145c:	b1f5      	cbz	r5, 149c <cbvprintf_package+0x2a0>
					str_ptr_pos[s_idx] = s_ptr_idx;
    145e:	f107 0240 	add.w	r2, r7, #64	; 0x40
    1462:	eb0d 0e02 	add.w	lr, sp, r2
    1466:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
    1468:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    146a:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    146e:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    1472:	f1bc 0f00 	cmp.w	ip, #0
    1476:	f43f af17 	beq.w	12a8 <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    147a:	f060 007f 	orn	r0, r0, #127	; 0x7f
    147e:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    1482:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
    1486:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    1488:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
    148c:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    148e:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
    1490:	f64f 7eda 	movw	lr, #65498	; 0xffda
    1494:	e797      	b.n	13c6 <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1496:	f04f 0c00 	mov.w	ip, #0
    149a:	e7da      	b.n	1452 <cbvprintf_package+0x256>
				} else if (is_ro) {
    149c:	f1bc 0f00 	cmp.w	ip, #0
    14a0:	d001      	beq.n	14a6 <cbvprintf_package+0x2aa>
					len += 1;
    14a2:	3601      	adds	r6, #1
    14a4:	e7ef      	b.n	1486 <cbvprintf_package+0x28a>
				} else if (rws_pos_en) {
    14a6:	9802      	ldr	r0, [sp, #8]
					len += 2;
    14a8:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    14aa:	2800      	cmp	r0, #0
    14ac:	d1eb      	bne.n	1486 <cbvprintf_package+0x28a>
					len += strlen(s) + 1 + 1;
    14ae:	9800      	ldr	r0, [sp, #0]
    14b0:	e9cd 3106 	strd	r3, r1, [sp, #24]
    14b4:	f00d fb9c 	bl	ebf0 <strlen>
    14b8:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    14bc:	4406      	add	r6, r0
    14be:	e7e2      	b.n	1486 <cbvprintf_package+0x28a>
	if (BUF_OFFSET / sizeof(int) > 255) {
    14c0:	1b63      	subs	r3, r4, r5
    14c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    14c6:	d297      	bcs.n	13f8 <cbvprintf_package+0x1fc>
	if (buf0 == NULL) {
    14c8:	b945      	cbnz	r5, 14dc <cbvprintf_package+0x2e0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    14ca:	f1a6 0408 	sub.w	r4, r6, #8
    14ce:	18e0      	adds	r0, r4, r3
    14d0:	e6ae      	b.n	1230 <cbvprintf_package+0x34>
    14d2:	bf00      	nop
    14d4:	0000fde0 	.word	0x0000fde0
    14d8:	00013644 	.word	0x00013644
	if (rws_pos_en) {
    14dc:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
    14de:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    14e0:	089b      	lsrs	r3, r3, #2
    14e2:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    14e4:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
    14e8:	b1c2      	cbz	r2, 151c <cbvprintf_package+0x320>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    14ea:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    14ec:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
    14f0:	f1b9 0f00 	cmp.w	r9, #0
    14f4:	d005      	beq.n	1502 <cbvprintf_package+0x306>
    14f6:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
    14f8:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
    14fa:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    14fe:	4297      	cmp	r7, r2
    1500:	d10e      	bne.n	1520 <cbvprintf_package+0x324>
		if (BUF_OFFSET + 1 + size > len) {
    1502:	f1c5 0301 	rsb	r3, r5, #1
    1506:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
    150a:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    150e:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
    1510:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    1514:	4557      	cmp	r7, sl
    1516:	d112      	bne.n	153e <cbvprintf_package+0x342>
	return BUF_OFFSET;
    1518:	1b60      	subs	r0, r4, r5
    151a:	e689      	b.n	1230 <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    151c:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    151e:	e7e5      	b.n	14ec <cbvprintf_package+0x2f0>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    1520:	f810 3b01 	ldrb.w	r3, [r0], #1
    1524:	0619      	lsls	r1, r3, #24
    1526:	d508      	bpl.n	153a <cbvprintf_package+0x33e>
			if (BUF_OFFSET + 1 > len) {
    1528:	eb04 0e0c 	add.w	lr, r4, ip
    152c:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    152e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    1532:	f63f ae7b 	bhi.w	122c <cbvprintf_package+0x30>
			*buf++ = pos;
    1536:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    153a:	3201      	adds	r2, #1
    153c:	e7df      	b.n	14fe <cbvprintf_package+0x302>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    153e:	f1b9 0f00 	cmp.w	r9, #0
    1542:	d003      	beq.n	154c <cbvprintf_package+0x350>
    1544:	f998 2000 	ldrsb.w	r2, [r8]
    1548:	2a00      	cmp	r2, #0
    154a:	db17      	blt.n	157c <cbvprintf_package+0x380>
		if (rws_pos_en) {
    154c:	9b02      	ldr	r3, [sp, #8]
    154e:	b1d3      	cbz	r3, 1586 <cbvprintf_package+0x38a>
			*buf++ = str_ptr_arg[i];
    1550:	f81a 200b 	ldrb.w	r2, [sl, fp]
    1554:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    1558:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    155a:	9b01      	ldr	r3, [sp, #4]
    155c:	1898      	adds	r0, r3, r2
    155e:	4420      	add	r0, r4
    1560:	42b0      	cmp	r0, r6
    1562:	f63f ae63 	bhi.w	122c <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
    1566:	f898 0000 	ldrb.w	r0, [r8]
    156a:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
    156e:	9900      	ldr	r1, [sp, #0]
    1570:	9203      	str	r2, [sp, #12]
    1572:	4620      	mov	r0, r4
    1574:	f00d fb93 	bl	ec9e <memcpy>
		buf += size;
    1578:	9a03      	ldr	r2, [sp, #12]
    157a:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    157c:	f10a 0a01 	add.w	sl, sl, #1
    1580:	f108 0801 	add.w	r8, r8, #1
    1584:	e7c6      	b.n	1514 <cbvprintf_package+0x318>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    1586:	f898 2000 	ldrb.w	r2, [r8]
    158a:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    158e:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    1590:	9b02      	ldr	r3, [sp, #8]
    1592:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    1596:	9800      	ldr	r0, [sp, #0]
    1598:	f00d fb2a 	bl	ebf0 <strlen>
    159c:	1c42      	adds	r2, r0, #1
    159e:	e7dc      	b.n	155a <cbvprintf_package+0x35e>
		return -EFAULT;
    15a0:	f06f 000d 	mvn.w	r0, #13
    15a4:	e644      	b.n	1230 <cbvprintf_package+0x34>
    15a6:	bf00      	nop

000015a8 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    15a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    15ac:	b095      	sub	sp, #84	; 0x54
    15ae:	af00      	add	r7, sp, #0
    15b0:	4604      	mov	r4, r0
    15b2:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
    15b6:	61bb      	str	r3, [r7, #24]
    15b8:	f3cb 03c0 	ubfx	r3, fp, #3, #1
    15bc:	627a      	str	r2, [r7, #36]	; 0x24
    15be:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    15c0:	6239      	str	r1, [r7, #32]
    15c2:	b951      	cbnz	r1, 15da <cbprintf_package_convert+0x32>
	buf += ros_nbr;
    15c4:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    15c6:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
    15c8:	7880      	ldrb	r0, [r0, #2]
    15ca:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    15ce:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
    15d0:	6a3b      	ldr	r3, [r7, #32]
    15d2:	429e      	cmp	r6, r3
    15d4:	d81a      	bhi.n	160c <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
    15d6:	1b03      	subs	r3, r0, r4
    15d8:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
    15da:	f894 a002 	ldrb.w	sl, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
    15de:	78e3      	ldrb	r3, [r4, #3]
    15e0:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
    15e2:	4656      	mov	r6, sl
	ro_cpy = ros_nbr &&
    15e4:	f1ba 0f00 	cmp.w	sl, #0
    15e8:	d002      	beq.n	15f0 <cbprintf_package_convert+0x48>
    15ea:	f01b 0f01 	tst.w	fp, #1
    15ee:	d117      	bne.n	1620 <cbprintf_package_convert+0x78>
	rw_cpy = rws_nbr > 0 &&
    15f0:	697b      	ldr	r3, [r7, #20]
    15f2:	bb5b      	cbnz	r3, 164c <cbprintf_package_convert+0xa4>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
    15f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    15f6:	b11b      	cbz	r3, 1600 <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
    15f8:	69ba      	ldr	r2, [r7, #24]
    15fa:	6a39      	ldr	r1, [r7, #32]
    15fc:	4620      	mov	r0, r4
    15fe:	4798      	blx	r3
		}

		return in_len;
    1600:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    1602:	4628      	mov	r0, r5
    1604:	3754      	adds	r7, #84	; 0x54
    1606:	46bd      	mov	sp, r7
    1608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    160c:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
    160e:	4628      	mov	r0, r5
    1610:	f00d faee 	bl	ebf0 <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
    1614:	6a3b      	ldr	r3, [r7, #32]
		buf += strlen((const char *)buf) + 1;
    1616:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
    1618:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
    161a:	4428      	add	r0, r5
	for (unsigned int i = 0; i < s_nbr; i++) {
    161c:	623b      	str	r3, [r7, #32]
    161e:	e7d7      	b.n	15d0 <cbprintf_package_convert+0x28>
	rw_cpy = rws_nbr > 0 &&
    1620:	f894 8000 	ldrb.w	r8, [r4]
    1624:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    1626:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    1628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
    162a:	ea4f 0288 	mov.w	r2, r8, lsl #2
    162e:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
    1630:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
    1634:	2b00      	cmp	r3, #0
    1636:	f040 8105 	bne.w	1844 <cbprintf_package_convert+0x29c>
		out_len = (int)in_len;
    163a:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
    163c:	46c1      	mov	r9, r8
    163e:	eb0a 0308 	add.w	r3, sl, r8
	size_t strl_cnt = 0;
    1642:	2600      	movs	r6, #0
			for (unsigned int i = 0; i < ros_nbr; i++) {
    1644:	454b      	cmp	r3, r9
    1646:	d152      	bne.n	16ee <cbprintf_package_convert+0x146>
    1648:	44d0      	add	r8, sl
    164a:	e013      	b.n	1674 <cbprintf_package_convert+0xcc>
	rw_cpy = rws_nbr > 0 &&
    164c:	f01b 0f02 	tst.w	fp, #2
    1650:	d0d0      	beq.n	15f4 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
    1652:	f894 8000 	ldrb.w	r8, [r4]
    1656:	ea4f 0388 	mov.w	r3, r8, lsl #2
    165a:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    165c:	6863      	ldr	r3, [r4, #4]
    165e:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    1660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
    1662:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
    1666:	2b00      	cmp	r3, #0
    1668:	d17c      	bne.n	1764 <cbprintf_package_convert+0x1bc>
		out_len = (int)in_len;
    166a:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    166c:	f1ba 0f00 	cmp.w	sl, #0
    1670:	d152      	bne.n	1718 <cbprintf_package_convert+0x170>
	size_t strl_cnt = 0;
    1672:	4656      	mov	r6, sl
		for (unsigned int i = 0; i < rws_nbr; i++) {
    1674:	f01b 0f05 	tst.w	fp, #5
    1678:	bf0c      	ite	eq
    167a:	2302      	moveq	r3, #2
    167c:	2301      	movne	r3, #1
    167e:	627b      	str	r3, [r7, #36]	; 0x24
    1680:	697b      	ldr	r3, [r7, #20]
    1682:	eb08 0a43 	add.w	sl, r8, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    1686:	f00b 0302 	and.w	r3, fp, #2
    168a:	623b      	str	r3, [r7, #32]
		for (unsigned int i = 0; i < rws_nbr; i++) {
    168c:	45d0      	cmp	r8, sl
    168e:	d0b8      	beq.n	1602 <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
    1690:	f818 1b02 	ldrb.w	r1, [r8], #2
			const char *str = *(const char **)&buf32[arg_pos];
    1694:	f818 3c01 	ldrb.w	r3, [r8, #-1]
    1698:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
    169c:	4bad      	ldr	r3, [pc, #692]	; (1954 <cbprintf_package_convert+0x3ac>)
    169e:	4599      	cmp	r9, r3
    16a0:	d302      	bcc.n	16a8 <cbprintf_package_convert+0x100>
    16a2:	4bad      	ldr	r3, [pc, #692]	; (1958 <cbprintf_package_convert+0x3b0>)
    16a4:	4599      	cmp	r9, r3
    16a6:	d33d      	bcc.n	1724 <cbprintf_package_convert+0x17c>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    16a8:	693b      	ldr	r3, [r7, #16]
    16aa:	2b00      	cmp	r3, #0
    16ac:	d047      	beq.n	173e <cbprintf_package_convert+0x196>
    16ae:	69f8      	ldr	r0, [r7, #28]
    16b0:	f00a ff2d 	bl	c50e <is_ptr>
    16b4:	2800      	cmp	r0, #0
    16b6:	d042      	beq.n	173e <cbprintf_package_convert+0x196>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    16b8:	48a8      	ldr	r0, [pc, #672]	; (195c <cbprintf_package_convert+0x3b4>)
    16ba:	6803      	ldr	r3, [r0, #0]
    16bc:	f013 0f06 	tst.w	r3, #6
    16c0:	d013      	beq.n	16ea <cbprintf_package_convert+0x142>
    16c2:	46e9      	mov	r9, sp
    16c4:	b08a      	sub	sp, #40	; 0x28
    16c6:	466a      	mov	r2, sp
    16c8:	4ba5      	ldr	r3, [pc, #660]	; (1960 <cbprintf_package_convert+0x3b8>)
    16ca:	6153      	str	r3, [r2, #20]
    16cc:	69fb      	ldr	r3, [r7, #28]
    16ce:	e9c2 3106 	strd	r3, r1, [r2, #24]
    16d2:	f44f 7300 	mov.w	r3, #512	; 0x200
    16d6:	8413      	strh	r3, [r2, #32]
    16d8:	4ba2      	ldr	r3, [pc, #648]	; (1964 <cbprintf_package_convert+0x3bc>)
    16da:	f842 3f10 	str.w	r3, [r2, #16]!
    16de:	2300      	movs	r3, #0
    16e0:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    16e4:	f002 f834 	bl	3750 <z_impl_z_log_msg_static_create>
    16e8:	46cd      	mov	sp, r9
				out_len -= 2;
    16ea:	3d02      	subs	r5, #2
				continue;
    16ec:	e7ce      	b.n	168c <cbprintf_package_convert+0xe4>
				const char *str = *(const char **)&buf32[*str_pos];
    16ee:	f819 2b01 	ldrb.w	r2, [r9], #1
    16f2:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    16f4:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    16f8:	f00d fa7a 	bl	ebf0 <strlen>
				if (strl && strl_cnt < strl_len) {
    16fc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    16fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    1700:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    1702:	b13a      	cbz	r2, 1714 <cbprintf_package_convert+0x16c>
    1704:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    1708:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
    170a:	bf3e      	ittt	cc
    170c:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
    170e:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
    1712:	3601      	addcc	r6, #1
				out_len += len;
    1714:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
    1716:	e795      	b.n	1644 <cbprintf_package_convert+0x9c>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    1718:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
    171c:	bf1c      	itt	ne
    171e:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
    1720:	44d0      	addne	r8, sl
    1722:	e7a7      	b.n	1674 <cbprintf_package_convert+0xcc>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    1724:	693b      	ldr	r3, [r7, #16]
    1726:	b123      	cbz	r3, 1732 <cbprintf_package_convert+0x18a>
    1728:	69f8      	ldr	r0, [r7, #28]
    172a:	f00a fef0 	bl	c50e <is_ptr>
    172e:	2800      	cmp	r0, #0
    1730:	d1c2      	bne.n	16b8 <cbprintf_package_convert+0x110>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    1732:	f01b 0f01 	tst.w	fp, #1
    1736:	d105      	bne.n	1744 <cbprintf_package_convert+0x19c>
					out_len -= drop_ro_str_pos ? 2 : 1;
    1738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    173a:	1aed      	subs	r5, r5, r3
    173c:	e7a6      	b.n	168c <cbprintf_package_convert+0xe4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    173e:	6a3b      	ldr	r3, [r7, #32]
    1740:	2b00      	cmp	r3, #0
    1742:	d0a3      	beq.n	168c <cbprintf_package_convert+0xe4>
		return 1 + strlen(str);
    1744:	4648      	mov	r0, r9
    1746:	f00d fa53 	bl	ebf0 <strlen>
				if (strl && strl_cnt < strl_len) {
    174a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    174c:	b143      	cbz	r3, 1760 <cbprintf_package_convert+0x1b8>
    174e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1752:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    1754:	bf3f      	itttt	cc
    1756:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    1758:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    175a:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    175e:	3601      	addcc	r6, #1
				out_len += (len - 1);
    1760:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
    1762:	e793      	b.n	168c <cbprintf_package_convert+0xe4>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    1764:	f1ba 0f00 	cmp.w	sl, #0
    1768:	d071      	beq.n	184e <cbprintf_package_convert+0x2a6>
    176a:	f01b 0604 	ands.w	r6, fp, #4
    176e:	d071      	beq.n	1854 <cbprintf_package_convert+0x2ac>
		keep_cnt = ros_nbr;
    1770:	46d1      	mov	r9, sl
		scpy_cnt = 0;
    1772:	2600      	movs	r6, #0
		dst = keep_str_pos;
    1774:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
    1778:	4652      	mov	r2, sl
    177a:	4641      	mov	r1, r8
    177c:	f00d fa8f 	bl	ec9e <memcpy>
	str_pos += ros_nbr;
    1780:	697b      	ldr	r3, [r7, #20]
    1782:	005b      	lsls	r3, r3, #1
    1784:	60bb      	str	r3, [r7, #8]
    1786:	697b      	ldr	r3, [r7, #20]
    1788:	44d0      	add	r8, sl
	for (unsigned int i = 0; i < rws_nbr; i++) {
    178a:	eb08 0343 	add.w	r3, r8, r3, lsl #1
    178e:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    1790:	f00b 0302 	and.w	r3, fp, #2
    1794:	607b      	str	r3, [r7, #4]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    1796:	697b      	ldr	r3, [r7, #20]
    1798:	4598      	cmp	r8, r3
    179a:	d15d      	bne.n	1858 <cbprintf_package_convert+0x2b0>
	out_desc.len = in_desc->len;
    179c:	7823      	ldrb	r3, [r4, #0]
    179e:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    17a0:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    17a2:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    17a6:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    17aa:	bf0c      	ite	eq
    17ac:	ea4f 0159 	moveq.w	r1, r9, lsr #1
    17b0:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    17b2:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    17b6:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    17b8:	f040 809d 	bne.w	18f6 <cbprintf_package_convert+0x34e>
    17bc:	f01b 0f04 	tst.w	fp, #4
    17c0:	bf14      	ite	ne
    17c2:	4648      	movne	r0, r9
    17c4:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
    17c6:	f894 b002 	ldrb.w	fp, [r4, #2]
    17ca:	f894 8003 	ldrb.w	r8, [r4, #3]
    17ce:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
    17d0:	7062      	strb	r2, [r4, #1]
    17d2:	70a0      	strb	r0, [r4, #2]
    17d4:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    17d6:	69ba      	ldr	r2, [r7, #24]
    17d8:	68f9      	ldr	r1, [r7, #12]
    17da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    17dc:	4620      	mov	r0, r4
    17de:	4798      	blx	r3
	if (rv < 0) {
    17e0:	1e05      	subs	r5, r0, #0
    17e2:	f6ff af0e 	blt.w	1602 <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
    17e6:	69fb      	ldr	r3, [r7, #28]
    17e8:	7023      	strb	r3, [r4, #0]
    17ea:	693b      	ldr	r3, [r7, #16]
    17ec:	7063      	strb	r3, [r4, #1]
    17ee:	f884 8003 	strb.w	r8, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    17f2:	69ba      	ldr	r2, [r7, #24]
    17f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
    17f6:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    17fa:	4649      	mov	r1, r9
    17fc:	f107 0040 	add.w	r0, r7, #64	; 0x40
    1800:	4798      	blx	r3
	if (rv < 0) {
    1802:	f1b0 0800 	subs.w	r8, r0, #0
    1806:	f2c0 80a3 	blt.w	1950 <cbprintf_package_convert+0x3a8>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    180a:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
    180c:	69ba      	ldr	r2, [r7, #24]
    180e:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    1810:	eba3 010a 	sub.w	r1, r3, sl
    1814:	68fb      	ldr	r3, [r7, #12]
    1816:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    1818:	68bb      	ldr	r3, [r7, #8]
    181a:	1ac9      	subs	r1, r1, r3
    181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    181e:	4798      	blx	r3
	if (rv < 0) {
    1820:	2800      	cmp	r0, #0
    1822:	f2c0 80a1 	blt.w	1968 <cbprintf_package_convert+0x3c0>
	out_len += rv;
    1826:	44a8      	add	r8, r5
	out_len += rv;
    1828:	eb08 0500 	add.w	r5, r8, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    182c:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
    1830:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    1834:	45b3      	cmp	fp, r6
    1836:	d360      	bcc.n	18fa <cbprintf_package_convert+0x352>
	(void)cb(NULL, 0, ctx);
    1838:	2100      	movs	r1, #0
    183a:	69ba      	ldr	r2, [r7, #24]
    183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    183e:	4608      	mov	r0, r1
    1840:	4798      	blx	r3
	return out_len;
    1842:	e6de      	b.n	1602 <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
    1844:	f04f 0900 	mov.w	r9, #0
    1848:	f107 0030 	add.w	r0, r7, #48	; 0x30
    184c:	e794      	b.n	1778 <cbprintf_package_convert+0x1d0>
		scpy_cnt = 0;
    184e:	4656      	mov	r6, sl
		keep_cnt = 0;
    1850:	46d1      	mov	r9, sl
    1852:	e795      	b.n	1780 <cbprintf_package_convert+0x1d8>
    1854:	46b1      	mov	r9, r6
    1856:	e793      	b.n	1780 <cbprintf_package_convert+0x1d8>
		uint8_t arg_idx = *str_pos++;
    1858:	f818 1b02 	ldrb.w	r1, [r8], #2
    185c:	4a3d      	ldr	r2, [pc, #244]	; (1954 <cbprintf_package_convert+0x3ac>)
		uint8_t arg_pos = *str_pos++;
    185e:	f818 5c01 	ldrb.w	r5, [r8, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    1862:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
    1866:	4293      	cmp	r3, r2
    1868:	d302      	bcc.n	1870 <cbprintf_package_convert+0x2c8>
    186a:	4a3b      	ldr	r2, [pc, #236]	; (1958 <cbprintf_package_convert+0x3b0>)
    186c:	4293      	cmp	r3, r2
    186e:	d31c      	bcc.n	18aa <cbprintf_package_convert+0x302>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    1870:	693b      	ldr	r3, [r7, #16]
    1872:	b123      	cbz	r3, 187e <cbprintf_package_convert+0x2d6>
    1874:	69f8      	ldr	r0, [r7, #28]
    1876:	f00a fe4a 	bl	c50e <is_ptr>
    187a:	2800      	cmp	r0, #0
    187c:	d18b      	bne.n	1796 <cbprintf_package_convert+0x1ee>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    187e:	687b      	ldr	r3, [r7, #4]
    1880:	b9f3      	cbnz	r3, 18c0 <cbprintf_package_convert+0x318>
				keep_str_pos[keep_cnt++] = arg_idx;
    1882:	f109 0228 	add.w	r2, r9, #40	; 0x28
    1886:	f107 0028 	add.w	r0, r7, #40	; 0x28
    188a:	4402      	add	r2, r0
    188c:	f109 0301 	add.w	r3, r9, #1
    1890:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    1894:	f107 0250 	add.w	r2, r7, #80	; 0x50
    1898:	fa52 f383 	uxtab	r3, r2, r3
    189c:	f109 0902 	add.w	r9, r9, #2
    18a0:	fa5f f989 	uxtb.w	r9, r9
    18a4:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    18a8:	e775      	b.n	1796 <cbprintf_package_convert+0x1ee>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    18aa:	693b      	ldr	r3, [r7, #16]
    18ac:	b12b      	cbz	r3, 18ba <cbprintf_package_convert+0x312>
    18ae:	69f8      	ldr	r0, [r7, #28]
    18b0:	f00a fe2d 	bl	c50e <is_ptr>
    18b4:	2800      	cmp	r0, #0
    18b6:	f47f af6e 	bne.w	1796 <cbprintf_package_convert+0x1ee>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    18ba:	f01b 0f01 	tst.w	fp, #1
    18be:	d009      	beq.n	18d4 <cbprintf_package_convert+0x32c>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    18c0:	f106 0228 	add.w	r2, r6, #40	; 0x28
    18c4:	f107 0128 	add.w	r1, r7, #40	; 0x28
    18c8:	1c73      	adds	r3, r6, #1
    18ca:	1856      	adds	r6, r2, r1
    18cc:	f806 5c20 	strb.w	r5, [r6, #-32]
    18d0:	b2de      	uxtb	r6, r3
    18d2:	e760      	b.n	1796 <cbprintf_package_convert+0x1ee>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    18d4:	f01b 0f04 	tst.w	fp, #4
    18d8:	f43f af5d 	beq.w	1796 <cbprintf_package_convert+0x1ee>
				keep_str_pos[keep_cnt++] = arg_pos;
    18dc:	f109 0228 	add.w	r2, r9, #40	; 0x28
    18e0:	f107 0128 	add.w	r1, r7, #40	; 0x28
    18e4:	f109 0301 	add.w	r3, r9, #1
    18e8:	eb02 0901 	add.w	r9, r2, r1
    18ec:	f809 5c10 	strb.w	r5, [r9, #-16]
    18f0:	fa5f f983 	uxtb.w	r9, r3
    18f4:	e74f      	b.n	1796 <cbprintf_package_convert+0x1ee>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    18f6:	2000      	movs	r0, #0
    18f8:	e765      	b.n	17c6 <cbprintf_package_convert+0x21e>
		uint8_t loc = cpy_str_pos[i];
    18fa:	f81b 300a 	ldrb.w	r3, [fp, sl]
    18fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
    1902:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
    1906:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1908:	b1fb      	cbz	r3, 194a <cbprintf_package_convert+0x3a2>
    190a:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    190e:	69ba      	ldr	r2, [r7, #24]
    1910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1912:	2101      	movs	r1, #1
    1914:	f107 002f 	add.w	r0, r7, #47	; 0x2f
    1918:	4798      	blx	r3
		if (rv < 0) {
    191a:	2800      	cmp	r0, #0
    191c:	db24      	blt.n	1968 <cbprintf_package_convert+0x3c0>
		out_len += rv;
    191e:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    1920:	f1b8 0f00 	cmp.w	r8, #0
    1924:	d106      	bne.n	1934 <cbprintf_package_convert+0x38c>
    1926:	4648      	mov	r0, r9
    1928:	f00d f962 	bl	ebf0 <strlen>
    192c:	f100 0801 	add.w	r8, r0, #1
    1930:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    1934:	69ba      	ldr	r2, [r7, #24]
    1936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1938:	4641      	mov	r1, r8
    193a:	4648      	mov	r0, r9
    193c:	4798      	blx	r3
		if (rv < 0) {
    193e:	2800      	cmp	r0, #0
    1940:	db12      	blt.n	1968 <cbprintf_package_convert+0x3c0>
		out_len += rv;
    1942:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    1944:	f10b 0b01 	add.w	fp, fp, #1
    1948:	e774      	b.n	1834 <cbprintf_package_convert+0x28c>
		uint16_t str_len = strl ? strl[i] : 0;
    194a:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
    194e:	e7de      	b.n	190e <cbprintf_package_convert+0x366>
    1950:	4645      	mov	r5, r8
    1952:	e656      	b.n	1602 <cbprintf_package_convert+0x5a>
    1954:	0000fde0 	.word	0x0000fde0
    1958:	00013644 	.word	0x00013644
    195c:	200002c4 	.word	0x200002c4
    1960:	00011065 	.word	0x00011065
    1964:	01000004 	.word	0x01000004
    1968:	4605      	mov	r5, r0
    196a:	e64a      	b.n	1602 <cbprintf_package_convert+0x5a>

0000196c <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    196c:	4b01      	ldr	r3, [pc, #4]	; (1974 <__printk_hook_install+0x8>)
    196e:	6018      	str	r0, [r3, #0]
}
    1970:	4770      	bx	lr
    1972:	bf00      	nop
    1974:	20000030 	.word	0x20000030

00001978 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    1978:	b530      	push	{r4, r5, lr}
    197a:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    197c:	2500      	movs	r5, #0
    197e:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    1982:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    1984:	9500      	str	r5, [sp, #0]
    1986:	a903      	add	r1, sp, #12
    1988:	4805      	ldr	r0, [pc, #20]	; (19a0 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    198a:	9505      	str	r5, [sp, #20]
    198c:	f000 f92e 	bl	1bec <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    1990:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    1994:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1996:	bfb8      	it	lt
    1998:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    199a:	b007      	add	sp, #28
    199c:	bd30      	pop	{r4, r5, pc}
    199e:	bf00      	nop
    19a0:	0000c55d 	.word	0x0000c55d

000019a4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    19a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    19a8:	8b05      	ldrh	r5, [r0, #24]
{
    19aa:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    19ac:	0728      	lsls	r0, r5, #28
{
    19ae:	4690      	mov	r8, r2
	if (processing) {
    19b0:	d411      	bmi.n	19d6 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    19b2:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    19b4:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    19b8:	f040 80cd 	bne.w	1b56 <process_event+0x1b2>
			evt = process_recheck(mgr);
    19bc:	4620      	mov	r0, r4
    19be:	f00a fe04 	bl	c5ca <process_recheck>
		}

		if (evt == EVT_NOP) {
    19c2:	b178      	cbz	r0, 19e4 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    19c4:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    19c6:	8b21      	ldrh	r1, [r4, #24]
    19c8:	2804      	cmp	r0, #4
    19ca:	d811      	bhi.n	19f0 <process_event+0x4c>
    19cc:	e8df f000 	tbb	[pc, r0]
    19d0:	856d10c3 	.word	0x856d10c3
    19d4:	95          	.byte	0x95
    19d5:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    19d6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    19d8:	bf0c      	ite	eq
    19da:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    19de:	f045 0520 	orrne.w	r5, r5, #32
    19e2:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    19e4:	f388 8811 	msr	BASEPRI, r8
    19e8:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    19ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    19f0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    19f4:	45aa      	cmp	sl, r5
    19f6:	f000 80a6 	beq.w	1b46 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    19fa:	2700      	movs	r7, #0
    19fc:	46b9      	mov	r9, r7
    19fe:	463e      	mov	r6, r7
    1a00:	68a3      	ldr	r3, [r4, #8]
    1a02:	2b00      	cmp	r3, #0
    1a04:	f000 80bd 	beq.w	1b82 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1a08:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1a0c:	8321      	strh	r1, [r4, #24]
    1a0e:	f388 8811 	msr	BASEPRI, r8
    1a12:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1a16:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1a18:	2900      	cmp	r1, #0
    1a1a:	f000 80bb 	beq.w	1b94 <process_event+0x1f0>
	return node->next;
    1a1e:	680d      	ldr	r5, [r1, #0]
    1a20:	2900      	cmp	r1, #0
    1a22:	f000 80b7 	beq.w	1b94 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    1a26:	f8d1 8004 	ldr.w	r8, [r1, #4]
    1a2a:	4633      	mov	r3, r6
    1a2c:	4652      	mov	r2, sl
    1a2e:	4620      	mov	r0, r4
    1a30:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1a32:	2d00      	cmp	r5, #0
    1a34:	d076      	beq.n	1b24 <process_event+0x180>
    1a36:	682b      	ldr	r3, [r5, #0]
    1a38:	4629      	mov	r1, r5
    1a3a:	461d      	mov	r5, r3
    1a3c:	e7f0      	b.n	1a20 <process_event+0x7c>
    1a3e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1a42:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1a44:	2a01      	cmp	r2, #1
    1a46:	d81b      	bhi.n	1a80 <process_event+0xdc>
	list->head = NULL;
    1a48:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1a4a:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1a4e:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1a50:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1a52:	b289      	uxth	r1, r1
	list->tail = NULL;
    1a54:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1a58:	d109      	bne.n	1a6e <process_event+0xca>
    1a5a:	463b      	mov	r3, r7
    1a5c:	e003      	b.n	1a66 <process_event+0xc2>
				mgr->refs += 1U;
    1a5e:	8b62      	ldrh	r2, [r4, #26]
    1a60:	3201      	adds	r2, #1
    1a62:	8362      	strh	r2, [r4, #26]
	return node->next;
    1a64:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1a66:	2b00      	cmp	r3, #0
    1a68:	d1f9      	bne.n	1a5e <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1a6a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1a6e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1a70:	4620      	mov	r0, r4
    1a72:	f00a fdaa 	bl	c5ca <process_recheck>
    1a76:	2800      	cmp	r0, #0
    1a78:	d07b      	beq.n	1b72 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1a7a:	f041 0120 	orr.w	r1, r1, #32
    1a7e:	e077      	b.n	1b70 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1a80:	2b04      	cmp	r3, #4
    1a82:	d10a      	bne.n	1a9a <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1a84:	f021 0107 	bic.w	r1, r1, #7
    1a88:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1a8a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1a8c:	4620      	mov	r0, r4
    1a8e:	f00a fd9c 	bl	c5ca <process_recheck>
    1a92:	b110      	cbz	r0, 1a9a <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1a94:	f041 0120 	orr.w	r1, r1, #32
    1a98:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1a9a:	8b21      	ldrh	r1, [r4, #24]
    1a9c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1aa0:	45aa      	cmp	sl, r5
    1aa2:	d050      	beq.n	1b46 <process_event+0x1a2>
    1aa4:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    1aa6:	46b9      	mov	r9, r7
    1aa8:	e7aa      	b.n	1a00 <process_event+0x5c>
			transit = mgr->transitions->start;
    1aaa:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1aac:	f021 0107 	bic.w	r1, r1, #7
    1ab0:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    1ab4:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    1ab6:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1aba:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1abc:	d12d      	bne.n	1b1a <process_event+0x176>
		    || (transit != NULL)) {
    1abe:	f1b9 0f00 	cmp.w	r9, #0
    1ac2:	d040      	beq.n	1b46 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1ac4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1ac8:	8321      	strh	r1, [r4, #24]
    1aca:	f388 8811 	msr	BASEPRI, r8
    1ace:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    1ad2:	493a      	ldr	r1, [pc, #232]	; (1bbc <process_event+0x218>)
    1ad4:	4620      	mov	r0, r4
    1ad6:	47c8      	blx	r9
    1ad8:	e029      	b.n	1b2e <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1ada:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    1ade:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1ae0:	f041 0104 	orr.w	r1, r1, #4
    1ae4:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    1ae6:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    1ae8:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1aec:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1aee:	d0e6      	beq.n	1abe <process_event+0x11a>
    1af0:	2700      	movs	r7, #0
		res = 0;
    1af2:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1af4:	f04f 0a04 	mov.w	sl, #4
    1af8:	e782      	b.n	1a00 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1afa:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    1afe:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1b00:	f041 0105 	orr.w	r1, r1, #5
    1b04:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    1b06:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    1b08:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1b0c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1b0e:	d0d6      	beq.n	1abe <process_event+0x11a>
    1b10:	2700      	movs	r7, #0
		res = 0;
    1b12:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1b14:	f04f 0a05 	mov.w	sl, #5
    1b18:	e772      	b.n	1a00 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    1b1a:	2700      	movs	r7, #0
		res = 0;
    1b1c:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1b1e:	f04f 0a06 	mov.w	sl, #6
    1b22:	e76d      	b.n	1a00 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1b24:	462b      	mov	r3, r5
    1b26:	e787      	b.n	1a38 <process_event+0x94>
			if (transit != NULL) {
    1b28:	f1b9 0f00 	cmp.w	r9, #0
    1b2c:	d1d1      	bne.n	1ad2 <process_event+0x12e>
	__asm__ volatile(
    1b2e:	f04f 0320 	mov.w	r3, #32
    1b32:	f3ef 8811 	mrs	r8, BASEPRI
    1b36:	f383 8812 	msr	BASEPRI_MAX, r3
    1b3a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1b3e:	8b23      	ldrh	r3, [r4, #24]
    1b40:	f023 0308 	bic.w	r3, r3, #8
    1b44:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1b46:	8b25      	ldrh	r5, [r4, #24]
    1b48:	06ea      	lsls	r2, r5, #27
    1b4a:	d52e      	bpl.n	1baa <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1b4c:	f025 0310 	bic.w	r3, r5, #16
    1b50:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    1b52:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    1b56:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1b58:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1b5a:	2e00      	cmp	r6, #0
    1b5c:	f6bf af6f 	bge.w	1a3e <process_event+0x9a>
	list->head = NULL;
    1b60:	2300      	movs	r3, #0
		*clients = mgr->clients;
    1b62:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    1b64:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1b68:	f021 0107 	bic.w	r1, r1, #7
    1b6c:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1b70:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1b72:	8b21      	ldrh	r1, [r4, #24]
    1b74:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1b78:	45aa      	cmp	sl, r5
    1b7a:	f04f 0900 	mov.w	r9, #0
    1b7e:	f47f af3f 	bne.w	1a00 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    1b82:	2f00      	cmp	r7, #0
    1b84:	d09b      	beq.n	1abe <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1b86:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1b8a:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    1b8c:	f388 8811 	msr	BASEPRI, r8
    1b90:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    1b94:	2f00      	cmp	r7, #0
    1b96:	d0c7      	beq.n	1b28 <process_event+0x184>
	return node->next;
    1b98:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    1b9a:	4639      	mov	r1, r7
    1b9c:	4633      	mov	r3, r6
    1b9e:	4652      	mov	r2, sl
    1ba0:	4620      	mov	r0, r4
    1ba2:	f00a fd3e 	bl	c622 <notify_one>
	list->head = node;
    1ba6:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    1ba8:	e7f4      	b.n	1b94 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1baa:	06ab      	lsls	r3, r5, #26
    1bac:	f57f af1a 	bpl.w	19e4 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1bb0:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1bb4:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    1bb6:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1bba:	e6ff      	b.n	19bc <process_event+0x18>
    1bbc:	0000c64f 	.word	0x0000c64f

00001bc0 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    1bc0:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    1bc2:	4c09      	ldr	r4, [pc, #36]	; (1be8 <crc8_ccitt+0x28>)
    1bc4:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    1bc6:	4291      	cmp	r1, r2
    1bc8:	d100      	bne.n	1bcc <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    1bca:	bd10      	pop	{r4, pc}
		val ^= p[i];
    1bcc:	f811 3b01 	ldrb.w	r3, [r1], #1
    1bd0:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    1bd2:	0903      	lsrs	r3, r0, #4
    1bd4:	0100      	lsls	r0, r0, #4
    1bd6:	5ce3      	ldrb	r3, [r4, r3]
    1bd8:	b2c0      	uxtb	r0, r0
    1bda:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    1bdc:	0918      	lsrs	r0, r3, #4
    1bde:	011b      	lsls	r3, r3, #4
    1be0:	5c20      	ldrb	r0, [r4, r0]
    1be2:	b2db      	uxtb	r3, r3
    1be4:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
    1be6:	e7ee      	b.n	1bc6 <crc8_ccitt+0x6>
    1be8:	00011119 	.word	0x00011119

00001bec <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    1bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1bf0:	b09f      	sub	sp, #124	; 0x7c
    1bf2:	4682      	mov	sl, r0
    1bf4:	9103      	str	r1, [sp, #12]
    1bf6:	4616      	mov	r6, r2
    1bf8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1bfa:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1bfc:	7830      	ldrb	r0, [r6, #0]
    1bfe:	b910      	cbnz	r0, 1c06 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1c00:	4628      	mov	r0, r5
    1c02:	f000 bd8b 	b.w	271c <z_cbvprintf_impl+0xb30>
			OUTC(*fp++);
    1c06:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
    1c08:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    1c0a:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
    1c0c:	d006      	beq.n	1c1c <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
    1c0e:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
    1c10:	47d0      	blx	sl
    1c12:	2800      	cmp	r0, #0
    1c14:	f2c0 8582 	blt.w	271c <z_cbvprintf_impl+0xb30>
    1c18:	3501      	adds	r5, #1
		if (bps == NULL) {
    1c1a:	e22b      	b.n	2074 <z_cbvprintf_impl+0x488>
		} state = {
    1c1c:	2218      	movs	r2, #24
    1c1e:	2100      	movs	r1, #0
    1c20:	a810      	add	r0, sp, #64	; 0x40
    1c22:	f00d f847 	bl	ecb4 <memset>
	if (*sp == '%') {
    1c26:	7873      	ldrb	r3, [r6, #1]
    1c28:	2b25      	cmp	r3, #37	; 0x25
    1c2a:	d07d      	beq.n	1d28 <z_cbvprintf_impl+0x13c>
    1c2c:	2300      	movs	r3, #0
    1c2e:	1c70      	adds	r0, r6, #1
    1c30:	4698      	mov	r8, r3
    1c32:	469e      	mov	lr, r3
    1c34:	469c      	mov	ip, r3
    1c36:	461f      	mov	r7, r3
    1c38:	4601      	mov	r1, r0
		switch (*sp) {
    1c3a:	f810 2b01 	ldrb.w	r2, [r0], #1
    1c3e:	2a2b      	cmp	r2, #43	; 0x2b
    1c40:	f000 80a1 	beq.w	1d86 <z_cbvprintf_impl+0x19a>
    1c44:	f200 8098 	bhi.w	1d78 <z_cbvprintf_impl+0x18c>
    1c48:	2a20      	cmp	r2, #32
    1c4a:	f000 809f 	beq.w	1d8c <z_cbvprintf_impl+0x1a0>
    1c4e:	2a23      	cmp	r2, #35	; 0x23
    1c50:	f000 809f 	beq.w	1d92 <z_cbvprintf_impl+0x1a6>
    1c54:	b12b      	cbz	r3, 1c62 <z_cbvprintf_impl+0x76>
    1c56:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1c5e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    1c62:	f1b8 0f00 	cmp.w	r8, #0
    1c66:	d005      	beq.n	1c74 <z_cbvprintf_impl+0x88>
    1c68:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1c6c:	f043 0320 	orr.w	r3, r3, #32
    1c70:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    1c74:	f1be 0f00 	cmp.w	lr, #0
    1c78:	d005      	beq.n	1c86 <z_cbvprintf_impl+0x9a>
    1c7a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1c7e:	f043 0310 	orr.w	r3, r3, #16
    1c82:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    1c86:	f1bc 0f00 	cmp.w	ip, #0
    1c8a:	d005      	beq.n	1c98 <z_cbvprintf_impl+0xac>
    1c8c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1c90:	f043 0308 	orr.w	r3, r3, #8
    1c94:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    1c98:	b12f      	cbz	r7, 1ca6 <z_cbvprintf_impl+0xba>
    1c9a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1c9e:	f043 0304 	orr.w	r3, r3, #4
    1ca2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    1ca6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1caa:	f003 0044 	and.w	r0, r3, #68	; 0x44
    1cae:	2844      	cmp	r0, #68	; 0x44
    1cb0:	d103      	bne.n	1cba <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
    1cb2:	f36f 1386 	bfc	r3, #6, #1
    1cb6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    1cba:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    1cbe:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    1cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1cc4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    1cc8:	d17f      	bne.n	1dca <z_cbvprintf_impl+0x1de>
		conv->width_star = true;
    1cca:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    1cce:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
    1cd2:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    1cd4:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	conv->prec_present = (*sp == '.');
    1cd8:	781a      	ldrb	r2, [r3, #0]
    1cda:	2a2e      	cmp	r2, #46	; 0x2e
    1cdc:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    1ce0:	bf0c      	ite	eq
    1ce2:	2101      	moveq	r1, #1
    1ce4:	2100      	movne	r1, #0
    1ce6:	f361 0241 	bfi	r2, r1, #1, #1
    1cea:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    1cee:	d178      	bne.n	1de2 <z_cbvprintf_impl+0x1f6>
	if (*sp == '*') {
    1cf0:	785a      	ldrb	r2, [r3, #1]
    1cf2:	2a2a      	cmp	r2, #42	; 0x2a
    1cf4:	d06e      	beq.n	1dd4 <z_cbvprintf_impl+0x1e8>
	++sp;
    1cf6:	3301      	adds	r3, #1
	size_t val = 0;
    1cf8:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1cfa:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1cfe:	4619      	mov	r1, r3
    1d00:	f811 0b01 	ldrb.w	r0, [r1], #1
    1d04:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    1d08:	2f09      	cmp	r7, #9
    1d0a:	f240 80af 	bls.w	1e6c <z_cbvprintf_impl+0x280>
	conv->unsupported |= ((conv->prec_value < 0)
    1d0e:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
	conv->prec_value = prec;
    1d12:	9214      	str	r2, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    1d14:	f3c1 0040 	ubfx	r0, r1, #1, #1
    1d18:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    1d1c:	460a      	mov	r2, r1
    1d1e:	f360 0241 	bfi	r2, r0, #1, #1
    1d22:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    1d26:	e05c      	b.n	1de2 <z_cbvprintf_impl+0x1f6>
		conv->specifier = *sp++;
    1d28:	1cb2      	adds	r2, r6, #2
    1d2a:	9206      	str	r2, [sp, #24]
    1d2c:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    1d30:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    1d34:	07df      	lsls	r7, r3, #31
    1d36:	f140 8154 	bpl.w	1fe2 <z_cbvprintf_impl+0x3f6>
			width = va_arg(ap, int);
    1d3a:	f854 2b04 	ldr.w	r2, [r4], #4
    1d3e:	9204      	str	r2, [sp, #16]
			if (width < 0) {
    1d40:	2a00      	cmp	r2, #0
    1d42:	da08      	bge.n	1d56 <z_cbvprintf_impl+0x16a>
				conv->flag_dash = true;
    1d44:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    1d48:	f042 0204 	orr.w	r2, r2, #4
    1d4c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
    1d50:	9a04      	ldr	r2, [sp, #16]
    1d52:	4252      	negs	r2, r2
		int width = -1;
    1d54:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
    1d56:	0758      	lsls	r0, r3, #29
    1d58:	f140 814b 	bpl.w	1ff2 <z_cbvprintf_impl+0x406>
			int arg = va_arg(ap, int);
    1d5c:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    1d60:	2f00      	cmp	r7, #0
    1d62:	f280 814a 	bge.w	1ffa <z_cbvprintf_impl+0x40e>
				conv->prec_present = false;
    1d66:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    1d6a:	f36f 0341 	bfc	r3, #1, #1
    1d6e:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    1d72:	f04f 37ff 	mov.w	r7, #4294967295
    1d76:	e140      	b.n	1ffa <z_cbvprintf_impl+0x40e>
		switch (*sp) {
    1d78:	2a2d      	cmp	r2, #45	; 0x2d
    1d7a:	d00d      	beq.n	1d98 <z_cbvprintf_impl+0x1ac>
    1d7c:	2a30      	cmp	r2, #48	; 0x30
    1d7e:	f47f af69 	bne.w	1c54 <z_cbvprintf_impl+0x68>
    1d82:	2301      	movs	r3, #1
	} while (loop);
    1d84:	e758      	b.n	1c38 <z_cbvprintf_impl+0x4c>
		switch (*sp) {
    1d86:	f04f 0c01 	mov.w	ip, #1
    1d8a:	e755      	b.n	1c38 <z_cbvprintf_impl+0x4c>
    1d8c:	f04f 0e01 	mov.w	lr, #1
    1d90:	e752      	b.n	1c38 <z_cbvprintf_impl+0x4c>
    1d92:	f04f 0801 	mov.w	r8, #1
    1d96:	e74f      	b.n	1c38 <z_cbvprintf_impl+0x4c>
    1d98:	2701      	movs	r7, #1
    1d9a:	e74d      	b.n	1c38 <z_cbvprintf_impl+0x4c>
		val = 10U * val + *sp++ - '0';
    1d9c:	fb0e 7202 	mla	r2, lr, r2, r7
    1da0:	3a30      	subs	r2, #48	; 0x30
    1da2:	4603      	mov	r3, r0
    1da4:	4618      	mov	r0, r3
    1da6:	f810 7b01 	ldrb.w	r7, [r0], #1
    1daa:	f1a7 0c30 	sub.w	ip, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    1dae:	f1bc 0f09 	cmp.w	ip, #9
    1db2:	d9f3      	bls.n	1d9c <z_cbvprintf_impl+0x1b0>
	if (sp != wp) {
    1db4:	4299      	cmp	r1, r3
    1db6:	d08f      	beq.n	1cd8 <z_cbvprintf_impl+0xec>
		conv->unsupported |= ((conv->width_value < 0)
    1db8:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
		conv->width_value = width;
    1dbc:	9213      	str	r2, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    1dbe:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    1dc0:	f362 0141 	bfi	r1, r2, #1, #1
    1dc4:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
    1dc8:	e786      	b.n	1cd8 <z_cbvprintf_impl+0xec>
    1dca:	460b      	mov	r3, r1
	size_t val = 0;
    1dcc:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1dce:	f04f 0e0a 	mov.w	lr, #10
    1dd2:	e7e7      	b.n	1da4 <z_cbvprintf_impl+0x1b8>
		conv->prec_star = true;
    1dd4:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    1dd8:	f042 0204 	orr.w	r2, r2, #4
    1ddc:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    1de0:	3302      	adds	r3, #2
	switch (*sp) {
    1de2:	781a      	ldrb	r2, [r3, #0]
    1de4:	2a6c      	cmp	r2, #108	; 0x6c
    1de6:	d061      	beq.n	1eac <z_cbvprintf_impl+0x2c0>
    1de8:	d845      	bhi.n	1e76 <z_cbvprintf_impl+0x28a>
    1dea:	2a68      	cmp	r2, #104	; 0x68
    1dec:	d04b      	beq.n	1e86 <z_cbvprintf_impl+0x29a>
    1dee:	2a6a      	cmp	r2, #106	; 0x6a
    1df0:	d065      	beq.n	1ebe <z_cbvprintf_impl+0x2d2>
    1df2:	2a4c      	cmp	r2, #76	; 0x4c
    1df4:	d06b      	beq.n	1ece <z_cbvprintf_impl+0x2e2>
	conv->specifier = *sp++;
    1df6:	f813 2b01 	ldrb.w	r2, [r3], #1
    1dfa:	9306      	str	r3, [sp, #24]
	switch (conv->specifier) {
    1dfc:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    1dfe:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
    1e02:	f200 80ad 	bhi.w	1f60 <z_cbvprintf_impl+0x374>
    1e06:	2a6d      	cmp	r2, #109	; 0x6d
    1e08:	d86e      	bhi.n	1ee8 <z_cbvprintf_impl+0x2fc>
    1e0a:	2a69      	cmp	r2, #105	; 0x69
    1e0c:	f200 80a8 	bhi.w	1f60 <z_cbvprintf_impl+0x374>
    1e10:	2a57      	cmp	r2, #87	; 0x57
    1e12:	f200 8088 	bhi.w	1f26 <z_cbvprintf_impl+0x33a>
    1e16:	2a41      	cmp	r2, #65	; 0x41
    1e18:	d004      	beq.n	1e24 <z_cbvprintf_impl+0x238>
    1e1a:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    1e1e:	2b02      	cmp	r3, #2
    1e20:	f200 809e 	bhi.w	1f60 <z_cbvprintf_impl+0x374>
		conv->specifier_cat = SPECIFIER_FP;
    1e24:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
    1e28:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    1e2c:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    1e2e:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    1e32:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    1e36:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
    1e3a:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->specifier_cat = SPECIFIER_FP;
    1e3e:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
    1e42:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
    1e46:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    1e4a:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    1e4c:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
    1e50:	b2cb      	uxtb	r3, r1
    1e52:	f100 80c4 	bmi.w	1fde <z_cbvprintf_impl+0x3f2>
		if (conv->length_mod == LENGTH_L) {
    1e56:	f003 0278 	and.w	r2, r3, #120	; 0x78
    1e5a:	2a18      	cmp	r2, #24
    1e5c:	f040 80ae 	bne.w	1fbc <z_cbvprintf_impl+0x3d0>
			conv->length_mod = LENGTH_NONE;
    1e60:	f36f 03c6 	bfc	r3, #3, #4
    1e64:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
    1e68:	2300      	movs	r3, #0
    1e6a:	e09d      	b.n	1fa8 <z_cbvprintf_impl+0x3bc>
		val = 10U * val + *sp++ - '0';
    1e6c:	fb0c 0202 	mla	r2, ip, r2, r0
    1e70:	3a30      	subs	r2, #48	; 0x30
    1e72:	460b      	mov	r3, r1
    1e74:	e743      	b.n	1cfe <z_cbvprintf_impl+0x112>
	switch (*sp) {
    1e76:	2a74      	cmp	r2, #116	; 0x74
    1e78:	d025      	beq.n	1ec6 <z_cbvprintf_impl+0x2da>
    1e7a:	2a7a      	cmp	r2, #122	; 0x7a
    1e7c:	d1bb      	bne.n	1df6 <z_cbvprintf_impl+0x20a>
		conv->length_mod = LENGTH_Z;
    1e7e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    1e82:	2106      	movs	r1, #6
    1e84:	e00c      	b.n	1ea0 <z_cbvprintf_impl+0x2b4>
		if (*++sp == 'h') {
    1e86:	785a      	ldrb	r2, [r3, #1]
    1e88:	2a68      	cmp	r2, #104	; 0x68
    1e8a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    1e8e:	d106      	bne.n	1e9e <z_cbvprintf_impl+0x2b2>
			conv->length_mod = LENGTH_HH;
    1e90:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1e92:	f361 02c6 	bfi	r2, r1, #3, #4
    1e96:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    1e9a:	3302      	adds	r3, #2
    1e9c:	e7ab      	b.n	1df6 <z_cbvprintf_impl+0x20a>
			conv->length_mod = LENGTH_H;
    1e9e:	2102      	movs	r1, #2
    1ea0:	f361 02c6 	bfi	r2, r1, #3, #4
    1ea4:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    1ea8:	3301      	adds	r3, #1
    1eaa:	e7a4      	b.n	1df6 <z_cbvprintf_impl+0x20a>
		if (*++sp == 'l') {
    1eac:	785a      	ldrb	r2, [r3, #1]
    1eae:	2a6c      	cmp	r2, #108	; 0x6c
    1eb0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    1eb4:	d101      	bne.n	1eba <z_cbvprintf_impl+0x2ce>
			conv->length_mod = LENGTH_LL;
    1eb6:	2104      	movs	r1, #4
    1eb8:	e7eb      	b.n	1e92 <z_cbvprintf_impl+0x2a6>
			conv->length_mod = LENGTH_L;
    1eba:	2103      	movs	r1, #3
    1ebc:	e7f0      	b.n	1ea0 <z_cbvprintf_impl+0x2b4>
		conv->length_mod = LENGTH_J;
    1ebe:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    1ec2:	2105      	movs	r1, #5
    1ec4:	e7ec      	b.n	1ea0 <z_cbvprintf_impl+0x2b4>
		conv->length_mod = LENGTH_T;
    1ec6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    1eca:	2107      	movs	r1, #7
    1ecc:	e7e8      	b.n	1ea0 <z_cbvprintf_impl+0x2b4>
		conv->unsupported = true;
    1ece:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    1ed2:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    1ed6:	f022 0202 	bic.w	r2, r2, #2
    1eda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    1ede:	f042 0202 	orr.w	r2, r2, #2
    1ee2:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    1ee6:	e7df      	b.n	1ea8 <z_cbvprintf_impl+0x2bc>
	switch (conv->specifier) {
    1ee8:	3a6e      	subs	r2, #110	; 0x6e
    1eea:	b2d3      	uxtb	r3, r2
    1eec:	2201      	movs	r2, #1
    1eee:	409a      	lsls	r2, r3
    1ef0:	f240 4382 	movw	r3, #1154	; 0x482
    1ef4:	421a      	tst	r2, r3
    1ef6:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    1efa:	d138      	bne.n	1f6e <z_cbvprintf_impl+0x382>
    1efc:	f012 0f24 	tst.w	r2, #36	; 0x24
    1f00:	d160      	bne.n	1fc4 <z_cbvprintf_impl+0x3d8>
    1f02:	07d1      	lsls	r1, r2, #31
    1f04:	d52c      	bpl.n	1f60 <z_cbvprintf_impl+0x374>
		conv->specifier_cat = SPECIFIER_PTR;
    1f06:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    1f0a:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1f0e:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    1f12:	2103      	movs	r1, #3
    1f14:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1f18:	f1dc 0300 	rsbs	r3, ip, #0
		conv->specifier_cat = SPECIFIER_PTR;
    1f1c:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    1f20:	eb43 030c 	adc.w	r3, r3, ip
    1f24:	e040      	b.n	1fa8 <z_cbvprintf_impl+0x3bc>
	switch (conv->specifier) {
    1f26:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    1f2a:	b2c9      	uxtb	r1, r1
    1f2c:	2001      	movs	r0, #1
    1f2e:	fa00 f101 	lsl.w	r1, r0, r1
    1f32:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    1f36:	f47f af75 	bne.w	1e24 <z_cbvprintf_impl+0x238>
    1f3a:	f640 0301 	movw	r3, #2049	; 0x801
    1f3e:	4219      	tst	r1, r3
    1f40:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    1f44:	d119      	bne.n	1f7a <z_cbvprintf_impl+0x38e>
    1f46:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    1f4a:	d009      	beq.n	1f60 <z_cbvprintf_impl+0x374>
		conv->specifier_cat = SPECIFIER_SINT;
    1f4c:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    1f50:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1f54:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1f58:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1f5a:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    1f5e:	d183      	bne.n	1e68 <z_cbvprintf_impl+0x27c>
		conv->invalid = true;
    1f60:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1f64:	f043 0301 	orr.w	r3, r3, #1
    1f68:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    1f6c:	e77c      	b.n	1e68 <z_cbvprintf_impl+0x27c>
		conv->specifier_cat = SPECIFIER_UINT;
    1f6e:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    1f72:	2102      	movs	r1, #2
    1f74:	f361 0202 	bfi	r2, r1, #0, #3
    1f78:	e7ec      	b.n	1f54 <z_cbvprintf_impl+0x368>
    1f7a:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    1f7e:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    1f80:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    1f84:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1f88:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1f8a:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    1f8e:	bf02      	ittt	eq
    1f90:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    1f94:	f041 0101 	orreq.w	r1, r1, #1
    1f98:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    1f9c:	2a63      	cmp	r2, #99	; 0x63
    1f9e:	f47f af63 	bne.w	1e68 <z_cbvprintf_impl+0x27c>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1fa2:	3b00      	subs	r3, #0
    1fa4:	bf18      	it	ne
    1fa6:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1fa8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    1fac:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1fb0:	430b      	orrs	r3, r1
    1fb2:	f363 0241 	bfi	r2, r3, #1, #1
    1fb6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    1fba:	e6b9      	b.n	1d30 <z_cbvprintf_impl+0x144>
		} else if ((conv->length_mod != LENGTH_NONE)
    1fbc:	f013 0f38 	tst.w	r3, #56	; 0x38
    1fc0:	d1ce      	bne.n	1f60 <z_cbvprintf_impl+0x374>
    1fc2:	e751      	b.n	1e68 <z_cbvprintf_impl+0x27c>
		conv->specifier_cat = SPECIFIER_PTR;
    1fc4:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    1fc8:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    1fca:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    1fce:	f361 0202 	bfi	r2, r1, #0, #3
    1fd2:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    1fd6:	bf14      	ite	ne
    1fd8:	2301      	movne	r3, #1
    1fda:	2300      	moveq	r3, #0
    1fdc:	e7e4      	b.n	1fa8 <z_cbvprintf_impl+0x3bc>
			unsupported = true;
    1fde:	2301      	movs	r3, #1
    1fe0:	e7e2      	b.n	1fa8 <z_cbvprintf_impl+0x3bc>
		} else if (conv->width_present) {
    1fe2:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    1fe6:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1fe8:	bfb4      	ite	lt
    1fea:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
		int width = -1;
    1fec:	f04f 32ff 	movge.w	r2, #4294967295
    1ff0:	e6b0      	b.n	1d54 <z_cbvprintf_impl+0x168>
		} else if (conv->prec_present) {
    1ff2:	0799      	lsls	r1, r3, #30
    1ff4:	f57f aebd 	bpl.w	1d72 <z_cbvprintf_impl+0x186>
			precision = conv->prec_value;
    1ff8:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    1ffa:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    1ffe:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    2000:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
    2004:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    2008:	f003 0207 	and.w	r2, r3, #7
    200c:	2a04      	cmp	r2, #4
    200e:	d107      	bne.n	2020 <z_cbvprintf_impl+0x434>
		    && !conv->prec_present) {
    2010:	078a      	lsls	r2, r1, #30
    2012:	d405      	bmi.n	2020 <z_cbvprintf_impl+0x434>
			if (conv->specifier_a) {
    2014:	f99d 2049 	ldrsb.w	r2, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
    2018:	2a00      	cmp	r2, #0
    201a:	bfac      	ite	ge
    201c:	2706      	movge	r7, #6
    201e:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
    2020:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    2024:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    2026:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    202a:	d133      	bne.n	2094 <z_cbvprintf_impl+0x4a8>
			switch (length_mod) {
    202c:	1ecb      	subs	r3, r1, #3
    202e:	2b04      	cmp	r3, #4
    2030:	d804      	bhi.n	203c <z_cbvprintf_impl+0x450>
    2032:	e8df f003 	tbb	[pc, r3]
    2036:	4621      	.short	0x4621
    2038:	2146      	.short	0x2146
    203a:	21          	.byte	0x21
    203b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    203c:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    203e:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    2040:	ea4f 72e3 	mov.w	r2, r3, asr #31
    2044:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    2048:	d11c      	bne.n	2084 <z_cbvprintf_impl+0x498>
				value->sint = (signed char)value->sint;
    204a:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    204e:	17da      	asrs	r2, r3, #31
    2050:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    2054:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    2056:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    205a:	9307      	str	r3, [sp, #28]
    205c:	079b      	lsls	r3, r3, #30
    205e:	d050      	beq.n	2102 <z_cbvprintf_impl+0x516>
			OUTS(sp, fp);
    2060:	9b06      	ldr	r3, [sp, #24]
    2062:	9903      	ldr	r1, [sp, #12]
    2064:	4632      	mov	r2, r6
    2066:	4650      	mov	r0, sl
    2068:	f00a fc0c 	bl	c884 <outs>
    206c:	2800      	cmp	r0, #0
    206e:	f2c0 8355 	blt.w	271c <z_cbvprintf_impl+0xb30>
    2072:	4405      	add	r5, r0
			continue;
    2074:	9e06      	ldr	r6, [sp, #24]
    2076:	e5c1      	b.n	1bfc <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    2078:	f854 3b04 	ldr.w	r3, [r4], #4
    207c:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    207e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    2082:	e7e8      	b.n	2056 <z_cbvprintf_impl+0x46a>
			} else if (length_mod == LENGTH_H) {
    2084:	2902      	cmp	r1, #2
    2086:	d1e5      	bne.n	2054 <z_cbvprintf_impl+0x468>
				value->sint = (short)value->sint;
    2088:	b21a      	sxth	r2, r3
    208a:	f343 33c0 	sbfx	r3, r3, #15, #1
    208e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    2092:	e7df      	b.n	2054 <z_cbvprintf_impl+0x468>
		} else if (specifier_cat == SPECIFIER_UINT) {
    2094:	2b02      	cmp	r3, #2
    2096:	d124      	bne.n	20e2 <z_cbvprintf_impl+0x4f6>
			switch (length_mod) {
    2098:	1ecb      	subs	r3, r1, #3
    209a:	2b04      	cmp	r3, #4
    209c:	d804      	bhi.n	20a8 <z_cbvprintf_impl+0x4bc>
    209e:	e8df f003 	tbb	[pc, r3]
    20a2:	1018      	.short	0x1018
    20a4:	1810      	.short	0x1810
    20a6:	18          	.byte	0x18
    20a7:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    20a8:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    20aa:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    20ae:	f04f 0200 	mov.w	r2, #0
    20b2:	d014      	beq.n	20de <z_cbvprintf_impl+0x4f2>
			} else if (length_mod == LENGTH_H) {
    20b4:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    20b6:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    20ba:	d1cc      	bne.n	2056 <z_cbvprintf_impl+0x46a>
				value->uint = (unsigned short)value->uint;
    20bc:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    20be:	9310      	str	r3, [sp, #64]	; 0x40
    20c0:	e7c9      	b.n	2056 <z_cbvprintf_impl+0x46a>
					(uint_value_type)va_arg(ap,
    20c2:	3407      	adds	r4, #7
    20c4:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    20c8:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    20cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    20d0:	e7c1      	b.n	2056 <z_cbvprintf_impl+0x46a>
					(uint_value_type)va_arg(ap, size_t);
    20d2:	f854 3b04 	ldr.w	r3, [r4], #4
    20d6:	9310      	str	r3, [sp, #64]	; 0x40
    20d8:	2300      	movs	r3, #0
    20da:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    20dc:	e7bb      	b.n	2056 <z_cbvprintf_impl+0x46a>
				value->uint = (unsigned char)value->uint;
    20de:	b2db      	uxtb	r3, r3
    20e0:	e7cd      	b.n	207e <z_cbvprintf_impl+0x492>
		} else if (specifier_cat == SPECIFIER_FP) {
    20e2:	2b04      	cmp	r3, #4
    20e4:	d108      	bne.n	20f8 <z_cbvprintf_impl+0x50c>
					(sint_value_type)va_arg(ap, long long);
    20e6:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    20e8:	f024 0407 	bic.w	r4, r4, #7
    20ec:	e9d4 2300 	ldrd	r2, r3, [r4]
    20f0:	3408      	adds	r4, #8
    20f2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    20f6:	e7ae      	b.n	2056 <z_cbvprintf_impl+0x46a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    20f8:	2b03      	cmp	r3, #3
    20fa:	d1ac      	bne.n	2056 <z_cbvprintf_impl+0x46a>
			value->ptr = va_arg(ap, void *);
    20fc:	f854 3b04 	ldr.w	r3, [r4], #4
    2100:	e7dd      	b.n	20be <z_cbvprintf_impl+0x4d2>
		switch (conv->specifier) {
    2102:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
    2106:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
    210a:	d8b3      	bhi.n	2074 <z_cbvprintf_impl+0x488>
    210c:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
    2110:	d849      	bhi.n	21a6 <z_cbvprintf_impl+0x5ba>
    2112:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    2116:	f000 8091 	beq.w	223c <z_cbvprintf_impl+0x650>
    211a:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
    211e:	d9a9      	bls.n	2074 <z_cbvprintf_impl+0x488>
    2120:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
    2124:	d003      	beq.n	212e <z_cbvprintf_impl+0x542>
    2126:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
    212a:	2a02      	cmp	r2, #2
    212c:	d8a2      	bhi.n	2074 <z_cbvprintf_impl+0x488>
	} u = {
    212e:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
    2132:	2a00      	cmp	r2, #0
    2134:	f2c0 8136 	blt.w	23a4 <z_cbvprintf_impl+0x7b8>
	} else if (conv->flag_plus) {
    2138:	9b07      	ldr	r3, [sp, #28]
    213a:	0718      	lsls	r0, r3, #28
    213c:	f100 8135 	bmi.w	23aa <z_cbvprintf_impl+0x7be>
	} else if (conv->flag_space) {
    2140:	f3c3 1900 	ubfx	r9, r3, #4, #1
    2144:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    2148:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    214c:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
    2150:	2800      	cmp	r0, #0
    2152:	f040 812d 	bne.w	23b0 <z_cbvprintf_impl+0x7c4>
    2156:	ea51 0602 	orrs.w	r6, r1, r2
    215a:	bf14      	ite	ne
    215c:	2601      	movne	r6, #1
    215e:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
    2160:	02d2      	lsls	r2, r2, #11
    2162:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
    2166:	02c9      	lsls	r1, r1, #11
		c = 'f';
    2168:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
    216c:	ea40 0e01 	orr.w	lr, r0, r1
    2170:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
		c = 'f';
    2174:	bf08      	it	eq
    2176:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
    217a:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    217e:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
    2182:	f000 8199 	beq.w	24b8 <z_cbvprintf_impl+0x8cc>
		if (is_subnormal) {
    2186:	2e00      	cmp	r6, #0
    2188:	f040 8144 	bne.w	2414 <z_cbvprintf_impl+0x828>
		fract |= BIT_63;
    218c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    218e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    2192:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
    2196:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    2198:	2000      	movs	r0, #0
    219a:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
    219e:	4606      	mov	r6, r0
		fract *= 5U;
    21a0:	f04f 0c05 	mov.w	ip, #5
    21a4:	e150      	b.n	2448 <z_cbvprintf_impl+0x85c>
		switch (conv->specifier) {
    21a6:	f1ab 0258 	sub.w	r2, fp, #88	; 0x58
    21aa:	2a20      	cmp	r2, #32
    21ac:	f63f af62 	bhi.w	2074 <z_cbvprintf_impl+0x488>
    21b0:	a001      	add	r0, pc, #4	; (adr r0, 21b8 <z_cbvprintf_impl+0x5cc>)
    21b2:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    21b6:	bf00      	nop
    21b8:	00002343 	.word	0x00002343
    21bc:	00002075 	.word	0x00002075
    21c0:	00002075 	.word	0x00002075
    21c4:	00002075 	.word	0x00002075
    21c8:	00002075 	.word	0x00002075
    21cc:	00002075 	.word	0x00002075
    21d0:	00002075 	.word	0x00002075
    21d4:	00002075 	.word	0x00002075
    21d8:	00002075 	.word	0x00002075
    21dc:	0000212f 	.word	0x0000212f
    21e0:	00002075 	.word	0x00002075
    21e4:	000022c7 	.word	0x000022c7
    21e8:	000022db 	.word	0x000022db
    21ec:	0000212f 	.word	0x0000212f
    21f0:	0000212f 	.word	0x0000212f
    21f4:	0000212f 	.word	0x0000212f
    21f8:	00002075 	.word	0x00002075
    21fc:	000022db 	.word	0x000022db
    2200:	00002075 	.word	0x00002075
    2204:	00002075 	.word	0x00002075
    2208:	00002075 	.word	0x00002075
    220c:	00002075 	.word	0x00002075
    2210:	0000237d 	.word	0x0000237d
    2214:	00002343 	.word	0x00002343
    2218:	00002349 	.word	0x00002349
    221c:	00002075 	.word	0x00002075
    2220:	00002075 	.word	0x00002075
    2224:	00002243 	.word	0x00002243
    2228:	00002075 	.word	0x00002075
    222c:	00002343 	.word	0x00002343
    2230:	00002075 	.word	0x00002075
    2234:	00002075 	.word	0x00002075
    2238:	00002343 	.word	0x00002343
			OUTC('%');
    223c:	9903      	ldr	r1, [sp, #12]
    223e:	4658      	mov	r0, fp
    2240:	e4e6      	b.n	1c10 <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
    2242:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    2244:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
    2246:	db3a      	blt.n	22be <z_cbvprintf_impl+0x6d2>
				len = strnlen(bps, precision);
    2248:	4639      	mov	r1, r7
    224a:	4630      	mov	r0, r6
    224c:	f00c fcd7 	bl	ebfe <strnlen>
			bpe = bps + len;
    2250:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
    2252:	2e00      	cmp	r6, #0
    2254:	f43f af0e 	beq.w	2074 <z_cbvprintf_impl+0x488>
		char sign = 0;
    2258:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
    225c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    2260:	f013 0210 	ands.w	r2, r3, #16
    2264:	9205      	str	r2, [sp, #20]
    2266:	f000 824e 	beq.w	2706 <z_cbvprintf_impl+0xb1a>
			nj_len += 2U;
    226a:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    226c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
    2270:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
    2274:	9308      	str	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
    2276:	bf18      	it	ne
    2278:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    227a:	f8cd 801c 	str.w	r8, [sp, #28]
    227e:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
    2280:	bf18      	it	ne
    2282:	18c0      	addne	r0, r0, r3
		if (width > 0) {
    2284:	9b04      	ldr	r3, [sp, #16]
    2286:	2b00      	cmp	r3, #0
    2288:	f340 8258 	ble.w	273c <z_cbvprintf_impl+0xb50>
			if (!conv->flag_dash) {
    228c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    2290:	1a1b      	subs	r3, r3, r0
    2292:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
    2294:	0753      	lsls	r3, r2, #29
    2296:	f3c2 0b80 	ubfx	fp, r2, #2, #1
    229a:	f100 824f 	bmi.w	273c <z_cbvprintf_impl+0xb50>
				if (conv->flag_zero) {
    229e:	0650      	lsls	r0, r2, #25
    22a0:	f140 823f 	bpl.w	2722 <z_cbvprintf_impl+0xb36>
					if (sign != 0) {
    22a4:	f1b9 0f00 	cmp.w	r9, #0
    22a8:	d007      	beq.n	22ba <z_cbvprintf_impl+0x6ce>
						OUTC(sign);
    22aa:	9903      	ldr	r1, [sp, #12]
    22ac:	4648      	mov	r0, r9
    22ae:	47d0      	blx	sl
    22b0:	2800      	cmp	r0, #0
    22b2:	f2c0 8233 	blt.w	271c <z_cbvprintf_impl+0xb30>
    22b6:	3501      	adds	r5, #1
						sign = 0;
    22b8:	46d9      	mov	r9, fp
					pad = '0';
    22ba:	2230      	movs	r2, #48	; 0x30
    22bc:	e232      	b.n	2724 <z_cbvprintf_impl+0xb38>
				len = strlen(bps);
    22be:	4630      	mov	r0, r6
    22c0:	f00c fc96 	bl	ebf0 <strlen>
    22c4:	e7c4      	b.n	2250 <z_cbvprintf_impl+0x664>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    22c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    22c8:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		char sign = 0;
    22cc:	f04f 0900 	mov.w	r9, #0
			bpe = buf + 1;
    22d0:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
    22d4:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
    22d6:	2001      	movs	r0, #1
    22d8:	e7c0      	b.n	225c <z_cbvprintf_impl+0x670>
			if (conv->flag_plus) {
    22da:	9b07      	ldr	r3, [sp, #28]
    22dc:	071e      	lsls	r6, r3, #28
			} else if (conv->flag_space) {
    22de:	bf58      	it	pl
    22e0:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
			sint = value->sint;
    22e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
    22e8:	bf54      	ite	pl
    22ea:	ea4f 1949 	movpl.w	r9, r9, lsl #5
				sign = '+';
    22ee:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			if (sint < 0) {
    22f2:	2b00      	cmp	r3, #0
    22f4:	da06      	bge.n	2304 <z_cbvprintf_impl+0x718>
				value->uint = (uint_value_type)-sint;
    22f6:	4252      	negs	r2, r2
    22f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    22fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
    2300:	f04f 092d 	mov.w	r9, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    2304:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    2308:	9300      	str	r3, [sp, #0]
    230a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    230e:	ab17      	add	r3, sp, #92	; 0x5c
    2310:	aa12      	add	r2, sp, #72	; 0x48
    2312:	f00a fa71 	bl	c7f8 <encode_uint>
    2316:	4606      	mov	r6, r0
			if (precision >= 0) {
    2318:	2f00      	cmp	r7, #0
    231a:	db0c      	blt.n	2336 <z_cbvprintf_impl+0x74a>
				conv->flag_zero = false;
    231c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    2320:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    2324:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
    2326:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    232a:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    232c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    2330:	d901      	bls.n	2336 <z_cbvprintf_impl+0x74a>
					conv->pad0_value = precision - (int)len;
    2332:	1afb      	subs	r3, r7, r3
    2334:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
    2336:	2e00      	cmp	r6, #0
    2338:	f43f ae9c 	beq.w	2074 <z_cbvprintf_impl+0x488>
    233c:	f10d 0775 	add.w	r7, sp, #117	; 0x75
    2340:	e056      	b.n	23f0 <z_cbvprintf_impl+0x804>
		switch (conv->specifier) {
    2342:	f04f 0900 	mov.w	r9, #0
    2346:	e7dd      	b.n	2304 <z_cbvprintf_impl+0x718>
			if (value->ptr != NULL) {
    2348:	9810      	ldr	r0, [sp, #64]	; 0x40
    234a:	2800      	cmp	r0, #0
    234c:	f000 81d6 	beq.w	26fc <z_cbvprintf_impl+0xb10>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2350:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    2354:	9300      	str	r3, [sp, #0]
    2356:	aa12      	add	r2, sp, #72	; 0x48
    2358:	ab17      	add	r3, sp, #92	; 0x5c
    235a:	2100      	movs	r1, #0
    235c:	f00a fa4c 	bl	c7f8 <encode_uint>
				conv->altform_0c = true;
    2360:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
    2364:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    2368:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    236c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2370:	4606      	mov	r6, r0
				conv->altform_0c = true;
    2372:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
		char sign = 0;
    2376:	f04f 0900 	mov.w	r9, #0
				goto prec_int_pad0;
    237a:	e7cd      	b.n	2318 <z_cbvprintf_impl+0x72c>
				store_count(conv, value->ptr, count);
    237c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    237e:	2907      	cmp	r1, #7
    2380:	f63f ae78 	bhi.w	2074 <z_cbvprintf_impl+0x488>
    2384:	e8df f001 	tbb	[pc, r1]
    2388:	0c06040c 	.word	0x0c06040c
    238c:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    2390:	701d      	strb	r5, [r3, #0]
		break;
    2392:	e66f      	b.n	2074 <z_cbvprintf_impl+0x488>
		*(short *)dp = (short)count;
    2394:	801d      	strh	r5, [r3, #0]
		break;
    2396:	e66d      	b.n	2074 <z_cbvprintf_impl+0x488>
		*(intmax_t *)dp = (intmax_t)count;
    2398:	17ea      	asrs	r2, r5, #31
    239a:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    239e:	e669      	b.n	2074 <z_cbvprintf_impl+0x488>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    23a0:	601d      	str	r5, [r3, #0]
		break;
    23a2:	e667      	b.n	2074 <z_cbvprintf_impl+0x488>
		*sign = '-';
    23a4:	f04f 092d 	mov.w	r9, #45	; 0x2d
    23a8:	e6ce      	b.n	2148 <z_cbvprintf_impl+0x55c>
		*sign = '+';
    23aa:	f04f 092b 	mov.w	r9, #43	; 0x2b
    23ae:	e6cb      	b.n	2148 <z_cbvprintf_impl+0x55c>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    23b0:	f240 76ff 	movw	r6, #2047	; 0x7ff
    23b4:	42b0      	cmp	r0, r6
    23b6:	d12a      	bne.n	240e <z_cbvprintf_impl+0x822>
		if (fract == 0) {
    23b8:	430a      	orrs	r2, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    23ba:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
    23be:	d11e      	bne.n	23fe <z_cbvprintf_impl+0x812>
			if (isupper((unsigned char)c) != 0) {
    23c0:	2b1a      	cmp	r3, #26
    23c2:	bf35      	itete	cc
    23c4:	2349      	movcc	r3, #73	; 0x49
    23c6:	2369      	movcs	r3, #105	; 0x69
    23c8:	214e      	movcc	r1, #78	; 0x4e
    23ca:	216e      	movcs	r1, #110	; 0x6e
    23cc:	bf34      	ite	cc
    23ce:	2246      	movcc	r2, #70	; 0x46
    23d0:	2266      	movcs	r2, #102	; 0x66
				*buf++ = 'I';
    23d2:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
    23d6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
    23da:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
    23de:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
    23e2:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
    23e6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
    23ea:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
    23ee:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
    23f0:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
    23f2:	f1b9 0f00 	cmp.w	r9, #0
    23f6:	f43f af31 	beq.w	225c <z_cbvprintf_impl+0x670>
			nj_len += 1U;
    23fa:	3001      	adds	r0, #1
    23fc:	e72e      	b.n	225c <z_cbvprintf_impl+0x670>
			if (isupper((unsigned char)c) != 0) {
    23fe:	2b19      	cmp	r3, #25
    2400:	bf8b      	itete	hi
    2402:	236e      	movhi	r3, #110	; 0x6e
    2404:	234e      	movls	r3, #78	; 0x4e
    2406:	2161      	movhi	r1, #97	; 0x61
    2408:	2141      	movls	r1, #65	; 0x41
    240a:	461a      	mov	r2, r3
    240c:	e7e1      	b.n	23d2 <z_cbvprintf_impl+0x7e6>
	bool is_subnormal = (expo == 0) && (fract != 0);
    240e:	2600      	movs	r6, #0
    2410:	e6a6      	b.n	2160 <z_cbvprintf_impl+0x574>
				expo--;
    2412:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    2414:	1849      	adds	r1, r1, r1
    2416:	4152      	adcs	r2, r2
    2418:	2a00      	cmp	r2, #0
    241a:	dafa      	bge.n	2412 <z_cbvprintf_impl+0x826>
    241c:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
    2420:	e6b4      	b.n	218c <z_cbvprintf_impl+0x5a0>
			fract >>= 1;
    2422:	0849      	lsrs	r1, r1, #1
    2424:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
    2428:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    242a:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
    242e:	4640      	mov	r0, r8
			expo++;
    2430:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    2434:	d2f5      	bcs.n	2422 <z_cbvprintf_impl+0x836>
		fract *= 5U;
    2436:	fb0c fe02 	mul.w	lr, ip, r2
    243a:	fba1 120c 	umull	r1, r2, r1, ip
		expo++;
    243e:	f100 0802 	add.w	r8, r0, #2
		fract *= 5U;
    2442:	4472      	add	r2, lr
		decexp--;
    2444:	3e01      	subs	r6, #1
    2446:	2001      	movs	r0, #1
	while (expo < -2) {
    2448:	f118 0f02 	cmn.w	r8, #2
    244c:	dbe9      	blt.n	2422 <z_cbvprintf_impl+0x836>
    244e:	b108      	cbz	r0, 2454 <z_cbvprintf_impl+0x868>
    2450:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	while (expo > 0) {
    2454:	f1b8 0f00 	cmp.w	r8, #0
		fract += 2;
    2458:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
    245c:	dc2f      	bgt.n	24be <z_cbvprintf_impl+0x8d2>
	fract >>= (4 - expo);
    245e:	f1c8 0004 	rsb	r0, r8, #4
    2462:	f108 081c 	add.w	r8, r8, #28
    2466:	f1a0 0c20 	sub.w	ip, r0, #32
    246a:	40c2      	lsrs	r2, r0
    246c:	fa21 f300 	lsr.w	r3, r1, r0
    2470:	fa01 f808 	lsl.w	r8, r1, r8
	if ((c == 'g') || (c == 'G')) {
    2474:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
    2478:	ea42 0208 	orr.w	r2, r2, r8
    247c:	fa21 fc0c 	lsr.w	ip, r1, ip
	if ((c == 'g') || (c == 'G')) {
    2480:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
    2482:	ea42 020c 	orr.w	r2, r2, ip
    2486:	9308      	str	r3, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    2488:	d13a      	bne.n	2500 <z_cbvprintf_impl+0x914>
		if (decexp < (-4 + 1) || decexp > precision) {
    248a:	1cf3      	adds	r3, r6, #3
    248c:	db01      	blt.n	2492 <z_cbvprintf_impl+0x8a6>
    248e:	42b7      	cmp	r7, r6
    2490:	da2b      	bge.n	24ea <z_cbvprintf_impl+0x8fe>
			c += 'e' - 'g';  /* e or E */
    2492:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
    2496:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
    2498:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
    249c:	dd7f      	ble.n	259e <z_cbvprintf_impl+0x9b2>
		if (!conv->flag_hash && (precision > 0)) {
    249e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    24a2:	0680      	lsls	r0, r0, #26
				precision--;
    24a4:	f107 37ff 	add.w	r7, r7, #4294967295
		if (!conv->flag_hash && (precision > 0)) {
    24a8:	d479      	bmi.n	259e <z_cbvprintf_impl+0x9b2>
    24aa:	1e3b      	subs	r3, r7, #0
    24ac:	bf18      	it	ne
    24ae:	2301      	movne	r3, #1
	bool prune_zero = false;
    24b0:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
    24b2:	f107 0801 	add.w	r8, r7, #1
    24b6:	e02d      	b.n	2514 <z_cbvprintf_impl+0x928>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    24b8:	f04f 0800 	mov.w	r8, #0
    24bc:	e66c      	b.n	2198 <z_cbvprintf_impl+0x5ac>
		fract += 2;
    24be:	3202      	adds	r2, #2
    24c0:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
    24c4:	a80c      	add	r0, sp, #48	; 0x30
		fract += 2;
    24c6:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
    24ca:	f00a f966 	bl	c79a <_ldiv5>
		expo--;
    24ce:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
    24d2:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
    24d6:	3601      	adds	r6, #1
			fract <<= 1;
    24d8:	1892      	adds	r2, r2, r2
    24da:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
    24dc:	2900      	cmp	r1, #0
			expo--;
    24de:	f108 38ff 	add.w	r8, r8, #4294967295
		} while (!(fract & BIT_63));
    24e2:	daf9      	bge.n	24d8 <z_cbvprintf_impl+0x8ec>
    24e4:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
    24e8:	e7b4      	b.n	2454 <z_cbvprintf_impl+0x868>
		if (!conv->flag_hash && (precision > 0)) {
    24ea:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    24ee:	0699      	lsls	r1, r3, #26
			precision -= decexp;
    24f0:	eba7 0706 	sub.w	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
    24f4:	d451      	bmi.n	259a <z_cbvprintf_impl+0x9ae>
    24f6:	1e3b      	subs	r3, r7, #0
    24f8:	bf18      	it	ne
    24fa:	2301      	movne	r3, #1
	bool prune_zero = false;
    24fc:	9305      	str	r3, [sp, #20]
    24fe:	e004      	b.n	250a <z_cbvprintf_impl+0x91e>
    2500:	2300      	movs	r3, #0
	if (c == 'f') {
    2502:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
    2506:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
    2508:	d1d3      	bne.n	24b2 <z_cbvprintf_impl+0x8c6>
		if (decimals < 0) {
    250a:	eb17 0806 	adds.w	r8, r7, r6
    250e:	f04f 0b66 	mov.w	fp, #102	; 0x66
    2512:	d446      	bmi.n	25a2 <z_cbvprintf_impl+0x9b6>
	if (decimals > 16) {
    2514:	f1b8 0f10 	cmp.w	r8, #16
    2518:	bfa8      	it	ge
    251a:	f04f 0810 	movge.w	r8, #16
    251e:	2010      	movs	r0, #16
    2520:	900b      	str	r0, [sp, #44]	; 0x2c
	uint64_t round = BIT64(59); /* 0.5 */
    2522:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    2526:	2000      	movs	r0, #0
    2528:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
	*v >>= 1;
    252c:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
    2530:	f1b8 0f00 	cmp.w	r8, #0
    2534:	d138      	bne.n	25a8 <z_cbvprintf_impl+0x9bc>
	fract += round;
    2536:	9908      	ldr	r1, [sp, #32]
    2538:	1812      	adds	r2, r2, r0
    253a:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
    253e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    2542:	d23f      	bcs.n	25c4 <z_cbvprintf_impl+0x9d8>
	fract += round;
    2544:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
    2548:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
    254a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
    254e:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
    2552:	f040 80b2 	bne.w	26ba <z_cbvprintf_impl+0xace>
		if (decexp > 0) {
    2556:	2e00      	cmp	r6, #0
    2558:	dc3f      	bgt.n	25da <z_cbvprintf_impl+0x9ee>
			*buf++ = '0';
    255a:	2130      	movs	r1, #48	; 0x30
    255c:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
    2560:	2a00      	cmp	r2, #0
    2562:	d163      	bne.n	262c <z_cbvprintf_impl+0xa40>
    2564:	2f00      	cmp	r7, #0
    2566:	f340 81a8 	ble.w	28ba <z_cbvprintf_impl+0xcce>
			*buf++ = '.';
    256a:	222e      	movs	r2, #46	; 0x2e
    256c:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
    2570:	b186      	cbz	r6, 2594 <z_cbvprintf_impl+0x9a8>
			conv->pad0_value = -decexp;
    2572:	4272      	negs	r2, r6
    2574:	42ba      	cmp	r2, r7
    2576:	bfa8      	it	ge
    2578:	463a      	movge	r2, r7
			conv->pad_postdp = (conv->pad0_value > 0);
    257a:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    257e:	9213      	str	r2, [sp, #76]	; 0x4c
    2580:	2a00      	cmp	r2, #0
			precision -= conv->pad0_value;
    2582:	eba7 0702 	sub.w	r7, r7, r2
			conv->pad_postdp = (conv->pad0_value > 0);
    2586:	bfd4      	ite	le
    2588:	2200      	movle	r2, #0
    258a:	2201      	movgt	r2, #1
    258c:	f362 1145 	bfi	r1, r2, #5, #1
    2590:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
    2594:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
    2598:	e037      	b.n	260a <z_cbvprintf_impl+0xa1e>
	bool prune_zero = false;
    259a:	2300      	movs	r3, #0
    259c:	e7ae      	b.n	24fc <z_cbvprintf_impl+0x910>
    259e:	2300      	movs	r3, #0
    25a0:	e786      	b.n	24b0 <z_cbvprintf_impl+0x8c4>
			decimals = 0;
    25a2:	f04f 0800 	mov.w	r8, #0
    25a6:	e7ba      	b.n	251e <z_cbvprintf_impl+0x932>
	*v >>= 1;
    25a8:	0840      	lsrs	r0, r0, #1
    25aa:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
    25ae:	085b      	lsrs	r3, r3, #1
    25b0:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
    25b4:	a80e      	add	r0, sp, #56	; 0x38
    25b6:	9209      	str	r2, [sp, #36]	; 0x24
    25b8:	f108 38ff 	add.w	r8, r8, #4294967295
    25bc:	f00a f8ed 	bl	c79a <_ldiv5>
    25c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
}
    25c2:	e7b3      	b.n	252c <z_cbvprintf_impl+0x940>
	*v >>= 1;
    25c4:	0852      	lsrs	r2, r2, #1
    25c6:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
	_ldiv5(v);
    25ca:	a80c      	add	r0, sp, #48	; 0x30
	*v >>= 1;
    25cc:	0849      	lsrs	r1, r1, #1
    25ce:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		decexp++;
    25d2:	3601      	adds	r6, #1
	_ldiv5(v);
    25d4:	f00a f8e1 	bl	c79a <_ldiv5>
		decexp++;
    25d8:	e7b6      	b.n	2548 <z_cbvprintf_impl+0x95c>
	char *buf = bps;
    25da:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
    25de:	990b      	ldr	r1, [sp, #44]	; 0x2c
    25e0:	2900      	cmp	r1, #0
    25e2:	dd09      	ble.n	25f8 <z_cbvprintf_impl+0xa0c>
				*buf++ = _get_digit(&fract, &digit_count);
    25e4:	a90b      	add	r1, sp, #44	; 0x2c
    25e6:	a80c      	add	r0, sp, #48	; 0x30
    25e8:	9207      	str	r2, [sp, #28]
    25ea:	f00a f8ee 	bl	c7ca <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    25ee:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    25f0:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
    25f4:	9a07      	ldr	r2, [sp, #28]
    25f6:	d1f2      	bne.n	25de <z_cbvprintf_impl+0x9f2>
			conv->pad0_value = decexp;
    25f8:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
    25fa:	b99a      	cbnz	r2, 2624 <z_cbvprintf_impl+0xa38>
    25fc:	2f00      	cmp	r7, #0
    25fe:	f340 815a 	ble.w	28b6 <z_cbvprintf_impl+0xcca>
			*buf++ = '.';
    2602:	212e      	movs	r1, #46	; 0x2e
    2604:	f808 1b01 	strb.w	r1, [r8], #1
    2608:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
    260a:	2f00      	cmp	r7, #0
    260c:	dd17      	ble.n	263e <z_cbvprintf_impl+0xa52>
    260e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2610:	2a00      	cmp	r2, #0
    2612:	dd14      	ble.n	263e <z_cbvprintf_impl+0xa52>
		*buf++ = _get_digit(&fract, &digit_count);
    2614:	a90b      	add	r1, sp, #44	; 0x2c
    2616:	a80c      	add	r0, sp, #48	; 0x30
    2618:	f00a f8d7 	bl	c7ca <_get_digit>
		precision--;
    261c:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
    261e:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
    2622:	e7f2      	b.n	260a <z_cbvprintf_impl+0xa1e>
			*buf++ = '.';
    2624:	222e      	movs	r2, #46	; 0x2e
    2626:	f808 2b01 	strb.w	r2, [r8], #1
    262a:	e7ed      	b.n	2608 <z_cbvprintf_impl+0xa1c>
    262c:	222e      	movs	r2, #46	; 0x2e
    262e:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
    2632:	2e00      	cmp	r6, #0
    2634:	d0ae      	beq.n	2594 <z_cbvprintf_impl+0x9a8>
    2636:	2f00      	cmp	r7, #0
    2638:	dc9b      	bgt.n	2572 <z_cbvprintf_impl+0x986>
			*buf++ = '.';
    263a:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
    263e:	9b05      	ldr	r3, [sp, #20]
    2640:	2b00      	cmp	r3, #0
    2642:	d14e      	bne.n	26e2 <z_cbvprintf_impl+0xaf6>
	conv->pad0_pre_exp = precision;
    2644:	9714      	str	r7, [sp, #80]	; 0x50
    2646:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
    2648:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
    264c:	2a45      	cmp	r2, #69	; 0x45
    264e:	d123      	bne.n	2698 <z_cbvprintf_impl+0xaac>
		if (decexp < 0) {
    2650:	2e00      	cmp	r6, #0
			decexp = -decexp;
    2652:	bfba      	itte	lt
    2654:	4276      	neglt	r6, r6
			*buf++ = '-';
    2656:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    2658:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
    265a:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
    265c:	bfc8      	it	gt
    265e:	2164      	movgt	r1, #100	; 0x64
    2660:	707b      	strb	r3, [r7, #1]
			*buf++ = '-';
    2662:	bfd1      	iteee	le
    2664:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
    2666:	fbb6 f3f1 	udivgt	r3, r6, r1
    266a:	1cfa      	addgt	r2, r7, #3
    266c:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
			decexp %= 100;
    2670:	bfc8      	it	gt
    2672:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    2676:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
    267a:	bfc8      	it	gt
    267c:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
    267e:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
    2682:	fbb6 f3f1 	udiv	r3, r6, r1
    2686:	4617      	mov	r7, r2
    2688:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    268c:	fb01 6313 	mls	r3, r1, r3, r6
    2690:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    2692:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
    2696:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
    2698:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    269a:	2b00      	cmp	r3, #0
    269c:	dc2c      	bgt.n	26f8 <z_cbvprintf_impl+0xb0c>
    269e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    26a0:	2b00      	cmp	r3, #0
    26a2:	bfd4      	ite	le
    26a4:	2300      	movle	r3, #0
    26a6:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    26a8:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    26ac:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    26b0:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    26b2:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
    26b6:	703b      	strb	r3, [r7, #0]
	return bps;
    26b8:	e699      	b.n	23ee <z_cbvprintf_impl+0x802>
		*buf = _get_digit(&fract, &digit_count);
    26ba:	a90b      	add	r1, sp, #44	; 0x2c
    26bc:	a80c      	add	r0, sp, #48	; 0x30
    26be:	9207      	str	r2, [sp, #28]
    26c0:	f00a f883 	bl	c7ca <_get_digit>
		if (*buf++ != '0') {
    26c4:	9a07      	ldr	r2, [sp, #28]
		*buf = _get_digit(&fract, &digit_count);
    26c6:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
		if (*buf++ != '0') {
    26ca:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    26cc:	bf18      	it	ne
    26ce:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (conv->flag_hash || (precision > 0)) {
    26d2:	b912      	cbnz	r2, 26da <z_cbvprintf_impl+0xaee>
    26d4:	2f00      	cmp	r7, #0
    26d6:	f340 80f0 	ble.w	28ba <z_cbvprintf_impl+0xcce>
			*buf++ = '.';
    26da:	222e      	movs	r2, #46	; 0x2e
    26dc:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
    26e0:	e758      	b.n	2594 <z_cbvprintf_impl+0x9a8>
		while (*--buf == '0') {
    26e2:	4647      	mov	r7, r8
    26e4:	f108 38ff 	add.w	r8, r8, #4294967295
    26e8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    26ec:	2a30      	cmp	r2, #48	; 0x30
    26ee:	d0f8      	beq.n	26e2 <z_cbvprintf_impl+0xaf6>
    26f0:	2a2e      	cmp	r2, #46	; 0x2e
    26f2:	bf08      	it	eq
    26f4:	4647      	moveq	r7, r8
    26f6:	e7a7      	b.n	2648 <z_cbvprintf_impl+0xa5c>
		|| (conv->pad0_pre_exp > 0);
    26f8:	2301      	movs	r3, #1
    26fa:	e7d5      	b.n	26a8 <z_cbvprintf_impl+0xabc>
			bpe = bps + 5;
    26fc:	4f70      	ldr	r7, [pc, #448]	; (28c0 <z_cbvprintf_impl+0xcd4>)
		char sign = 0;
    26fe:	4681      	mov	r9, r0
			bps = "(nil)";
    2700:	1f7e      	subs	r6, r7, #5
		size_t nj_len = (bpe - bps);
    2702:	2005      	movs	r0, #5
    2704:	e5aa      	b.n	225c <z_cbvprintf_impl+0x670>
		} else if (conv->altform_0) {
    2706:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    2708:	bf48      	it	mi
    270a:	3001      	addmi	r0, #1
    270c:	e5ae      	b.n	226c <z_cbvprintf_impl+0x680>
					OUTC(pad);
    270e:	4610      	mov	r0, r2
    2710:	9209      	str	r2, [sp, #36]	; 0x24
    2712:	9903      	ldr	r1, [sp, #12]
    2714:	47d0      	blx	sl
    2716:	2800      	cmp	r0, #0
    2718:	9a09      	ldr	r2, [sp, #36]	; 0x24
    271a:	da05      	bge.n	2728 <z_cbvprintf_impl+0xb3c>
#undef OUTS
#undef OUTC
}
    271c:	b01f      	add	sp, #124	; 0x7c
    271e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    2722:	2220      	movs	r2, #32
					pad = '0';
    2724:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
    2728:	4659      	mov	r1, fp
    272a:	2900      	cmp	r1, #0
    272c:	f10b 3bff 	add.w	fp, fp, #4294967295
    2730:	dced      	bgt.n	270e <z_cbvprintf_impl+0xb22>
    2732:	9b04      	ldr	r3, [sp, #16]
    2734:	f8cd b010 	str.w	fp, [sp, #16]
    2738:	442b      	add	r3, r5
    273a:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
    273c:	f1b9 0f00 	cmp.w	r9, #0
    2740:	d005      	beq.n	274e <z_cbvprintf_impl+0xb62>
			OUTC(sign);
    2742:	9903      	ldr	r1, [sp, #12]
    2744:	4648      	mov	r0, r9
    2746:	47d0      	blx	sl
    2748:	2800      	cmp	r0, #0
    274a:	dbe7      	blt.n	271c <z_cbvprintf_impl+0xb30>
    274c:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    274e:	9b08      	ldr	r3, [sp, #32]
    2750:	2b00      	cmp	r3, #0
    2752:	d075      	beq.n	2840 <z_cbvprintf_impl+0xc54>
			if (conv->specifier_a) {
    2754:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
    2758:	2b00      	cmp	r3, #0
    275a:	db28      	blt.n	27ae <z_cbvprintf_impl+0xbc2>
    275c:	46b3      	mov	fp, r6
				while (isdigit((unsigned char)*cp) != 0) {
    275e:	f89b 0000 	ldrb.w	r0, [fp]
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    2762:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    2766:	2b09      	cmp	r3, #9
    2768:	46d9      	mov	r9, fp
    276a:	f10b 0b01 	add.w	fp, fp, #1
    276e:	d93f      	bls.n	27f0 <z_cbvprintf_impl+0xc04>
				if (!conv->pad_postdp) {
    2770:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    2774:	1bae      	subs	r6, r5, r6
    2776:	0699      	lsls	r1, r3, #26
    2778:	444e      	add	r6, r9
    277a:	d407      	bmi.n	278c <z_cbvprintf_impl+0xba0>
					while (pad_len-- > 0) {
    277c:	4642      	mov	r2, r8
    277e:	2a00      	cmp	r2, #0
    2780:	f108 38ff 	add.w	r8, r8, #4294967295
    2784:	dc39      	bgt.n	27fa <z_cbvprintf_impl+0xc0e>
    2786:	9b07      	ldr	r3, [sp, #28]
    2788:	4433      	add	r3, r6
    278a:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
    278c:	f899 0000 	ldrb.w	r0, [r9]
    2790:	282e      	cmp	r0, #46	; 0x2e
    2792:	d10a      	bne.n	27aa <z_cbvprintf_impl+0xbbe>
					OUTC(*cp++);
    2794:	9903      	ldr	r1, [sp, #12]
    2796:	47d0      	blx	sl
						OUTC('0');
    2798:	2800      	cmp	r0, #0
    279a:	dbbf      	blt.n	271c <z_cbvprintf_impl+0xb30>
					while (pad_len-- > 0) {
    279c:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
    27a0:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    27a4:	dc2f      	bgt.n	2806 <z_cbvprintf_impl+0xc1a>
					OUTC(*cp++);
    27a6:	f109 0901 	add.w	r9, r9, #1
			if (conv->specifier_a) {
    27aa:	464d      	mov	r5, r9
    27ac:	e035      	b.n	281a <z_cbvprintf_impl+0xc2e>
    27ae:	46b1      	mov	r9, r6
				while (*cp != 'p') {
    27b0:	f899 0000 	ldrb.w	r0, [r9]
    27b4:	2870      	cmp	r0, #112	; 0x70
    27b6:	46c8      	mov	r8, r9
    27b8:	f109 0901 	add.w	r9, r9, #1
    27bc:	d113      	bne.n	27e6 <z_cbvprintf_impl+0xbfa>
    27be:	1bae      	subs	r6, r5, r6
    27c0:	9d14      	ldr	r5, [sp, #80]	; 0x50
    27c2:	4446      	add	r6, r8
			while (pad_len-- > 0) {
    27c4:	4435      	add	r5, r6
    27c6:	1bab      	subs	r3, r5, r6
    27c8:	2b00      	cmp	r3, #0
    27ca:	dc31      	bgt.n	2830 <z_cbvprintf_impl+0xc44>
			OUTS(cp, bpe);
    27cc:	9903      	ldr	r1, [sp, #12]
    27ce:	463b      	mov	r3, r7
    27d0:	4642      	mov	r2, r8
    27d2:	4650      	mov	r0, sl
    27d4:	f00a f856 	bl	c884 <outs>
    27d8:	2800      	cmp	r0, #0
    27da:	db9f      	blt.n	271c <z_cbvprintf_impl+0xb30>
    27dc:	4430      	add	r0, r6
    27de:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
    27e0:	4605      	mov	r5, r0
    27e2:	4406      	add	r6, r0
    27e4:	e062      	b.n	28ac <z_cbvprintf_impl+0xcc0>
					OUTC(*cp++);
    27e6:	9903      	ldr	r1, [sp, #12]
    27e8:	47d0      	blx	sl
    27ea:	2800      	cmp	r0, #0
    27ec:	dae0      	bge.n	27b0 <z_cbvprintf_impl+0xbc4>
    27ee:	e795      	b.n	271c <z_cbvprintf_impl+0xb30>
					OUTC(*cp++);
    27f0:	9903      	ldr	r1, [sp, #12]
    27f2:	47d0      	blx	sl
    27f4:	2800      	cmp	r0, #0
    27f6:	dab2      	bge.n	275e <z_cbvprintf_impl+0xb72>
    27f8:	e790      	b.n	271c <z_cbvprintf_impl+0xb30>
						OUTC('0');
    27fa:	9903      	ldr	r1, [sp, #12]
    27fc:	2030      	movs	r0, #48	; 0x30
    27fe:	47d0      	blx	sl
    2800:	2800      	cmp	r0, #0
    2802:	dabb      	bge.n	277c <z_cbvprintf_impl+0xb90>
    2804:	e78a      	b.n	271c <z_cbvprintf_impl+0xb30>
						OUTC('0');
    2806:	9903      	ldr	r1, [sp, #12]
    2808:	2030      	movs	r0, #48	; 0x30
    280a:	47d0      	blx	sl
    280c:	f108 38ff 	add.w	r8, r8, #4294967295
    2810:	e7c2      	b.n	2798 <z_cbvprintf_impl+0xbac>
					OUTC(*cp++);
    2812:	9903      	ldr	r1, [sp, #12]
    2814:	47d0      	blx	sl
    2816:	2800      	cmp	r0, #0
    2818:	db80      	blt.n	271c <z_cbvprintf_impl+0xb30>
				while (isdigit((unsigned char)*cp) != 0) {
    281a:	7828      	ldrb	r0, [r5, #0]
    281c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    2820:	2b09      	cmp	r3, #9
    2822:	46a8      	mov	r8, r5
    2824:	f105 0501 	add.w	r5, r5, #1
    2828:	d9f3      	bls.n	2812 <z_cbvprintf_impl+0xc26>
    282a:	eba6 0609 	sub.w	r6, r6, r9
    282e:	e7c7      	b.n	27c0 <z_cbvprintf_impl+0xbd4>
				OUTC('0');
    2830:	9903      	ldr	r1, [sp, #12]
    2832:	2030      	movs	r0, #48	; 0x30
    2834:	47d0      	blx	sl
    2836:	2800      	cmp	r0, #0
    2838:	f6ff af70 	blt.w	271c <z_cbvprintf_impl+0xb30>
    283c:	3601      	adds	r6, #1
    283e:	e7c2      	b.n	27c6 <z_cbvprintf_impl+0xbda>
			if (conv->altform_0c | conv->altform_0) {
    2840:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    2844:	06da      	lsls	r2, r3, #27
    2846:	d401      	bmi.n	284c <z_cbvprintf_impl+0xc60>
    2848:	071b      	lsls	r3, r3, #28
    284a:	d506      	bpl.n	285a <z_cbvprintf_impl+0xc6e>
				OUTC('0');
    284c:	9903      	ldr	r1, [sp, #12]
    284e:	2030      	movs	r0, #48	; 0x30
    2850:	47d0      	blx	sl
    2852:	2800      	cmp	r0, #0
    2854:	f6ff af62 	blt.w	271c <z_cbvprintf_impl+0xb30>
    2858:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    285a:	9b05      	ldr	r3, [sp, #20]
    285c:	b13b      	cbz	r3, 286e <z_cbvprintf_impl+0xc82>
				OUTC(conv->specifier);
    285e:	9903      	ldr	r1, [sp, #12]
    2860:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    2864:	47d0      	blx	sl
    2866:	2800      	cmp	r0, #0
    2868:	f6ff af58 	blt.w	271c <z_cbvprintf_impl+0xb30>
    286c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    286e:	44a8      	add	r8, r5
    2870:	e006      	b.n	2880 <z_cbvprintf_impl+0xc94>
				OUTC('0');
    2872:	9903      	ldr	r1, [sp, #12]
    2874:	2030      	movs	r0, #48	; 0x30
    2876:	47d0      	blx	sl
    2878:	2800      	cmp	r0, #0
    287a:	f6ff af4f 	blt.w	271c <z_cbvprintf_impl+0xb30>
    287e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    2880:	eba8 0305 	sub.w	r3, r8, r5
    2884:	2b00      	cmp	r3, #0
    2886:	dcf4      	bgt.n	2872 <z_cbvprintf_impl+0xc86>
			OUTS(bps, bpe);
    2888:	9903      	ldr	r1, [sp, #12]
    288a:	463b      	mov	r3, r7
    288c:	4632      	mov	r2, r6
    288e:	4650      	mov	r0, sl
    2890:	f009 fff8 	bl	c884 <outs>
    2894:	2800      	cmp	r0, #0
    2896:	f6ff af41 	blt.w	271c <z_cbvprintf_impl+0xb30>
    289a:	4428      	add	r0, r5
    289c:	e79f      	b.n	27de <z_cbvprintf_impl+0xbf2>
			OUTC(' ');
    289e:	9903      	ldr	r1, [sp, #12]
    28a0:	2020      	movs	r0, #32
    28a2:	47d0      	blx	sl
    28a4:	2800      	cmp	r0, #0
    28a6:	f6ff af39 	blt.w	271c <z_cbvprintf_impl+0xb30>
    28aa:	3501      	adds	r5, #1
		while (width > 0) {
    28ac:	1b73      	subs	r3, r6, r5
    28ae:	2b00      	cmp	r3, #0
    28b0:	dcf5      	bgt.n	289e <z_cbvprintf_impl+0xcb2>
    28b2:	f7ff bbdf 	b.w	2074 <z_cbvprintf_impl+0x488>
			decexp = 0;
    28b6:	4616      	mov	r6, r2
    28b8:	e6c1      	b.n	263e <z_cbvprintf_impl+0xa52>
		if (*buf++ != '0') {
    28ba:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
    28be:	e6be      	b.n	263e <z_cbvprintf_impl+0xa52>
    28c0:	0001112e 	.word	0x0001112e

000028c4 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    28c4:	b508      	push	{r3, lr}
    28c6:	4604      	mov	r4, r0
	__asm__ volatile(
    28c8:	f04f 0220 	mov.w	r2, #32
    28cc:	f3ef 8311 	mrs	r3, BASEPRI
    28d0:	f382 8812 	msr	BASEPRI_MAX, r2
    28d4:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
    28d8:	f006 ff7e 	bl	97d8 <sys_clock_disable>
	}

	sys_arch_reboot(type);
    28dc:	4620      	mov	r0, r4
    28de:	f004 fe51 	bl	7584 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    28e2:	4803      	ldr	r0, [pc, #12]	; (28f0 <sys_reboot+0x2c>)
    28e4:	f009 fe4d 	bl	c582 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    28e8:	f003 ffb2 	bl	6850 <arch_cpu_idle>
    28ec:	e7fc      	b.n	28e8 <sys_reboot+0x24>
    28ee:	bf00      	nop
    28f0:	0001112f 	.word	0x0001112f

000028f4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    28f4:	f006 bfbc 	b.w	9870 <SystemInit>

000028f8 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    28f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    28fc:	460f      	mov	r7, r1
    28fe:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    2900:	2108      	movs	r1, #8
    2902:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    2904:	f8df 9050 	ldr.w	r9, [pc, #80]	; 2958 <nvs_recover_last_ate+0x60>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    2908:	f00a fb76 	bl	cff8 <nvs_al_size.isra.0>
	*addr -= ate_size;
    290c:	683c      	ldr	r4, [r7, #0]
    290e:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    2910:	4680      	mov	r8, r0
	*addr -= ate_size;
    2912:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    2914:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
    2918:	42ac      	cmp	r4, r5
    291a:	d803      	bhi.n	2924 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    291c:	2000      	movs	r0, #0
}
    291e:	b003      	add	sp, #12
    2920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    2924:	2308      	movs	r3, #8
    2926:	466a      	mov	r2, sp
    2928:	4621      	mov	r1, r4
    292a:	4630      	mov	r0, r6
    292c:	f00a fad4 	bl	ced8 <nvs_flash_rd>
		if (rc) {
    2930:	2800      	cmp	r0, #0
    2932:	d1f4      	bne.n	291e <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
    2934:	4669      	mov	r1, sp
    2936:	4630      	mov	r0, r6
    2938:	f00a fb68 	bl	d00c <nvs_ate_valid>
    293c:	b140      	cbz	r0, 2950 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
    293e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    2942:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
    2946:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
    2948:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
    294c:	4413      	add	r3, r2
    294e:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
    2950:	eba4 0408 	sub.w	r4, r4, r8
    2954:	e7e0      	b.n	2918 <nvs_recover_last_ate+0x20>
    2956:	bf00      	nop
    2958:	ffff0000 	.word	0xffff0000

0000295c <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
    295c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2960:	b08f      	sub	sp, #60	; 0x3c
    2962:	4604      	mov	r4, r0
    2964:	af00      	add	r7, sp, #0

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    2966:	f100 0814 	add.w	r8, r0, #20
	return z_impl_k_mutex_init(mutex);
    296a:	4640      	mov	r0, r8
    296c:	f00c ff31 	bl	f7d2 <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    2970:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    2972:	6883      	ldr	r3, [r0, #8]
    2974:	68db      	ldr	r3, [r3, #12]
    2976:	4798      	blx	r3
    2978:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    297a:	b9a8      	cbnz	r0, 29a8 <nvs_mount+0x4c>
		LOG_ERR("Could not obtain flash parameters");
    297c:	48a8      	ldr	r0, [pc, #672]	; (2c20 <nvs_mount+0x2c4>)
    297e:	6803      	ldr	r3, [r0, #0]
    2980:	075d      	lsls	r5, r3, #29
    2982:	d106      	bne.n	2992 <nvs_mount+0x36>
		return -EINVAL;
    2984:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    2988:	4628      	mov	r0, r5
    298a:	373c      	adds	r7, #60	; 0x3c
    298c:	46bd      	mov	sp, r7
    298e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_ERR("Could not obtain flash parameters");
    2992:	4ba4      	ldr	r3, [pc, #656]	; (2c24 <nvs_mount+0x2c8>)
		LOG_ERR("Configuration error - sector count");
    2994:	637b      	str	r3, [r7, #52]	; 0x34
    2996:	2302      	movs	r3, #2
    2998:	633b      	str	r3, [r7, #48]	; 0x30
    299a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    299e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    29a2:	f00a fb26 	bl	cff2 <z_log_msg_static_create.constprop.0>
    29a6:	e7ed      	b.n	2984 <nvs_mount+0x28>
	write_block_size = flash_get_write_block_size(fs->flash_device);
    29a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    29aa:	6883      	ldr	r3, [r0, #8]
    29ac:	68db      	ldr	r3, [r3, #12]
    29ae:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    29b0:	6803      	ldr	r3, [r0, #0]
    29b2:	3b01      	subs	r3, #1
    29b4:	2b1f      	cmp	r3, #31
    29b6:	d905      	bls.n	29c4 <nvs_mount+0x68>
		LOG_ERR("Unsupported write block size");
    29b8:	4899      	ldr	r0, [pc, #612]	; (2c20 <nvs_mount+0x2c4>)
    29ba:	6803      	ldr	r3, [r0, #0]
    29bc:	075c      	lsls	r4, r3, #29
    29be:	d0e1      	beq.n	2984 <nvs_mount+0x28>
    29c0:	4b99      	ldr	r3, [pc, #612]	; (2c28 <nvs_mount+0x2cc>)
    29c2:	e7e7      	b.n	2994 <nvs_mount+0x38>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    29c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    29c6:	6821      	ldr	r1, [r4, #0]
    29c8:	f107 0214 	add.w	r2, r7, #20
    29cc:	f00c fbb1 	bl	f132 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    29d0:	b128      	cbz	r0, 29de <nvs_mount+0x82>
		LOG_ERR("Unable to get page info");
    29d2:	4893      	ldr	r0, [pc, #588]	; (2c20 <nvs_mount+0x2c4>)
    29d4:	6803      	ldr	r3, [r0, #0]
    29d6:	0759      	lsls	r1, r3, #29
    29d8:	d0d4      	beq.n	2984 <nvs_mount+0x28>
    29da:	4b94      	ldr	r3, [pc, #592]	; (2c2c <nvs_mount+0x2d0>)
    29dc:	e7da      	b.n	2994 <nvs_mount+0x38>
	if (!fs->sector_size || fs->sector_size % info.size) {
    29de:	89a5      	ldrh	r5, [r4, #12]
    29e0:	b12d      	cbz	r5, 29ee <nvs_mount+0x92>
    29e2:	69bb      	ldr	r3, [r7, #24]
    29e4:	fbb5 f2f3 	udiv	r2, r5, r3
    29e8:	fb03 5512 	mls	r5, r3, r2, r5
    29ec:	b12d      	cbz	r5, 29fa <nvs_mount+0x9e>
		LOG_ERR("Invalid sector size");
    29ee:	488c      	ldr	r0, [pc, #560]	; (2c20 <nvs_mount+0x2c4>)
    29f0:	6803      	ldr	r3, [r0, #0]
    29f2:	075a      	lsls	r2, r3, #29
    29f4:	d0c6      	beq.n	2984 <nvs_mount+0x28>
    29f6:	4b8e      	ldr	r3, [pc, #568]	; (2c30 <nvs_mount+0x2d4>)
    29f8:	e7cc      	b.n	2994 <nvs_mount+0x38>
	if (fs->sector_count < 2) {
    29fa:	89e3      	ldrh	r3, [r4, #14]
    29fc:	2b01      	cmp	r3, #1
    29fe:	d805      	bhi.n	2a0c <nvs_mount+0xb0>
		LOG_ERR("Configuration error - sector count");
    2a00:	4887      	ldr	r0, [pc, #540]	; (2c20 <nvs_mount+0x2c4>)
    2a02:	6803      	ldr	r3, [r0, #0]
    2a04:	075b      	lsls	r3, r3, #29
    2a06:	d0bd      	beq.n	2984 <nvs_mount+0x28>
    2a08:	4b8a      	ldr	r3, [pc, #552]	; (2c34 <nvs_mount+0x2d8>)
    2a0a:	e7c3      	b.n	2994 <nvs_mount+0x38>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    2a0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    2a0e:	603d      	str	r5, [r7, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    2a10:	f893 a004 	ldrb.w	sl, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    2a14:	f04f 33ff 	mov.w	r3, #4294967295
    2a18:	f04f 32ff 	mov.w	r2, #4294967295
    2a1c:	4640      	mov	r0, r8
    2a1e:	f008 faf3 	bl	b008 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    2a22:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    2a24:	2108      	movs	r1, #8
    2a26:	f00a fae7 	bl	cff8 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    2a2a:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    2a2c:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
    2a2e:	89e3      	ldrh	r3, [r4, #14]
    2a30:	fa1f fb85 	uxth.w	fp, r5
    2a34:	455b      	cmp	r3, fp
    2a36:	d808      	bhi.n	2a4a <nvs_mount+0xee>
	if (closed_sectors == fs->sector_count) {
    2a38:	89e3      	ldrh	r3, [r4, #14]
    2a3a:	454b      	cmp	r3, r9
    2a3c:	d123      	bne.n	2a86 <nvs_mount+0x12a>
	return z_impl_k_mutex_unlock(mutex);
    2a3e:	4640      	mov	r0, r8
    2a40:	f008 fb5c 	bl	b0fc <z_impl_k_mutex_unlock>
		rc = -EDEADLK;
    2a44:	f06f 052c 	mvn.w	r5, #44	; 0x2c
    2a48:	e79e      	b.n	2988 <nvs_mount+0x2c>
		       (uint16_t)(fs->sector_size - ate_size);
    2a4a:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    2a4c:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    2a4e:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
    2a50:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    2a54:	4652      	mov	r2, sl
    2a56:	2308      	movs	r3, #8
    2a58:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    2a5a:	6039      	str	r1, [r7, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    2a5c:	f00a fa81 	bl	cf62 <nvs_flash_cmp_const>
		if (rc) {
    2a60:	b178      	cbz	r0, 2a82 <nvs_mount+0x126>
			nvs_sector_advance(fs, &addr);
    2a62:	4639      	mov	r1, r7
    2a64:	4620      	mov	r0, r4
    2a66:	f00a fa45 	bl	cef4 <nvs_sector_advance>
			closed_sectors++;
    2a6a:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    2a6e:	6839      	ldr	r1, [r7, #0]
    2a70:	2308      	movs	r3, #8
    2a72:	4652      	mov	r2, sl
    2a74:	4620      	mov	r0, r4
			closed_sectors++;
    2a76:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    2a7a:	f00a fa72 	bl	cf62 <nvs_flash_cmp_const>
			if (!rc) {
    2a7e:	2800      	cmp	r0, #0
    2a80:	d0da      	beq.n	2a38 <nvs_mount+0xdc>
	for (i = 0; i < fs->sector_count; i++) {
    2a82:	3501      	adds	r5, #1
    2a84:	e7d3      	b.n	2a2e <nvs_mount+0xd2>
	if (i == fs->sector_count) {
    2a86:	455b      	cmp	r3, fp
    2a88:	d10b      	bne.n	2aa2 <nvs_mount+0x146>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    2a8a:	6839      	ldr	r1, [r7, #0]
    2a8c:	2308      	movs	r3, #8
    2a8e:	4652      	mov	r2, sl
    2a90:	1b89      	subs	r1, r1, r6
    2a92:	4620      	mov	r0, r4
    2a94:	f00a fa65 	bl	cf62 <nvs_flash_cmp_const>
		if (!rc) {
    2a98:	b918      	cbnz	r0, 2aa2 <nvs_mount+0x146>
			nvs_sector_advance(fs, &addr);
    2a9a:	4639      	mov	r1, r7
    2a9c:	4620      	mov	r0, r4
    2a9e:	f00a fa29 	bl	cef4 <nvs_sector_advance>
	rc = nvs_recover_last_ate(fs, &addr);
    2aa2:	4639      	mov	r1, r7
    2aa4:	4620      	mov	r0, r4
    2aa6:	f7ff ff27 	bl	28f8 <nvs_recover_last_ate>
	if (rc) {
    2aaa:	4605      	mov	r5, r0
    2aac:	b118      	cbz	r0, 2ab6 <nvs_mount+0x15a>
    2aae:	4640      	mov	r0, r8
    2ab0:	f008 fb24 	bl	b0fc <z_impl_k_mutex_unlock>
	if (rc) {
    2ab4:	e768      	b.n	2988 <nvs_mount+0x2c>
	fs->ate_wra = addr;
    2ab6:	683b      	ldr	r3, [r7, #0]
    2ab8:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    2aba:	ea4f 4913 	mov.w	r9, r3, lsr #16
    2abe:	ea4f 4909 	mov.w	r9, r9, lsl #16
    2ac2:	f8c4 9008 	str.w	r9, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    2ac6:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    2aca:	4299      	cmp	r1, r3
    2acc:	d30f      	bcc.n	2aee <nvs_mount+0x192>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    2ace:	2308      	movs	r3, #8
    2ad0:	1d3a      	adds	r2, r7, #4
    2ad2:	4620      	mov	r0, r4
    2ad4:	f00a fa00 	bl	ced8 <nvs_flash_rd>
		if (rc) {
    2ad8:	4605      	mov	r5, r0
    2ada:	2800      	cmp	r0, #0
    2adc:	d1e7      	bne.n	2aae <nvs_mount+0x152>
    2ade:	1d3b      	adds	r3, r7, #4
		if (data8[i] != value) {
    2ae0:	f813 2b01 	ldrb.w	r2, [r3], #1
    2ae4:	4592      	cmp	sl, r2
    2ae6:	d145      	bne.n	2b74 <nvs_mount+0x218>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    2ae8:	3501      	adds	r5, #1
    2aea:	2d08      	cmp	r5, #8
    2aec:	d1f8      	bne.n	2ae0 <nvs_mount+0x184>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    2aee:	6863      	ldr	r3, [r4, #4]
    2af0:	0c1b      	lsrs	r3, r3, #16
    2af2:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
    2af4:	4639      	mov	r1, r7
    2af6:	4620      	mov	r0, r4
	addr = fs->ate_wra & ADDR_SECT_MASK;
    2af8:	603b      	str	r3, [r7, #0]
	nvs_sector_advance(fs, &addr);
    2afa:	f00a f9fb 	bl	cef4 <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    2afe:	89a3      	ldrh	r3, [r4, #12]
    2b00:	6839      	ldr	r1, [r7, #0]
    2b02:	4652      	mov	r2, sl
    2b04:	4620      	mov	r0, r4
    2b06:	f00a fa2c 	bl	cf62 <nvs_flash_cmp_const>
	if (rc < 0) {
    2b0a:	1e05      	subs	r5, r0, #0
    2b0c:	dbcf      	blt.n	2aae <nvs_mount+0x152>
		addr = fs->ate_wra + ate_size;
    2b0e:	6863      	ldr	r3, [r4, #4]
	if (rc) {
    2b10:	f000 80a6 	beq.w	2c60 <nvs_mount+0x304>
		addr = fs->ate_wra + ate_size;
    2b14:	eb03 0906 	add.w	r9, r3, r6
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    2b18:	f64f 7aff 	movw	sl, #65535	; 0xffff
    2b1c:	89a3      	ldrh	r3, [r4, #12]
		addr = fs->ate_wra + ate_size;
    2b1e:	f8c7 9000 	str.w	r9, [r7]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    2b22:	fa1f f289 	uxth.w	r2, r9
    2b26:	1b9b      	subs	r3, r3, r6
    2b28:	429a      	cmp	r2, r3
    2b2a:	d33d      	bcc.n	2ba8 <nvs_mount+0x24c>
		bool gc_done_marker = false;
    2b2c:	2200      	movs	r2, #0
			LOG_INF("GC Done marker found");
    2b2e:	483c      	ldr	r0, [pc, #240]	; (2c20 <nvs_mount+0x2c4>)
    2b30:	6803      	ldr	r3, [r0, #0]
    2b32:	f003 0307 	and.w	r3, r3, #7
		if (gc_done_marker) {
    2b36:	2a00      	cmp	r2, #0
    2b38:	d050      	beq.n	2bdc <nvs_mount+0x280>
			LOG_INF("GC Done marker found");
    2b3a:	2b02      	cmp	r3, #2
    2b3c:	d909      	bls.n	2b52 <nvs_mount+0x1f6>
    2b3e:	4b3e      	ldr	r3, [pc, #248]	; (2c38 <nvs_mount+0x2dc>)
    2b40:	637b      	str	r3, [r7, #52]	; 0x34
    2b42:	2302      	movs	r3, #2
    2b44:	633b      	str	r3, [r7, #48]	; 0x30
    2b46:	f107 0230 	add.w	r2, r7, #48	; 0x30
    2b4a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    2b4e:	f00a fa50 	bl	cff2 <z_log_msg_static_create.constprop.0>
			addr = fs->ate_wra & ADDR_SECT_MASK;
    2b52:	6863      	ldr	r3, [r4, #4]
    2b54:	0c1b      	lsrs	r3, r3, #16
    2b56:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
    2b58:	4639      	mov	r1, r7
    2b5a:	4620      	mov	r0, r4
			addr = fs->ate_wra & ADDR_SECT_MASK;
    2b5c:	603b      	str	r3, [r7, #0]
			nvs_sector_advance(fs, &addr);
    2b5e:	f00a f9c9 	bl	cef4 <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
    2b62:	6839      	ldr	r1, [r7, #0]
    2b64:	4620      	mov	r0, r4
    2b66:	f00a fa21 	bl	cfac <nvs_flash_erase_sector>
		rc = nvs_gc(fs);
    2b6a:	4605      	mov	r5, r0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    2b6c:	2d00      	cmp	r5, #0
    2b6e:	f000 8095 	beq.w	2c9c <nvs_mount+0x340>
    2b72:	e79c      	b.n	2aae <nvs_mount+0x152>
		if (nvs_ate_valid(fs, &last_ate)) {
    2b74:	1d39      	adds	r1, r7, #4
    2b76:	4620      	mov	r0, r4
    2b78:	f00a fa48 	bl	d00c <nvs_ate_valid>
    2b7c:	6862      	ldr	r2, [r4, #4]
    2b7e:	b910      	cbnz	r0, 2b86 <nvs_mount+0x22a>
		fs->ate_wra -= ate_size;
    2b80:	1b92      	subs	r2, r2, r6
    2b82:	6062      	str	r2, [r4, #4]
    2b84:	e79f      	b.n	2ac6 <nvs_mount+0x16a>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    2b86:	893d      	ldrh	r5, [r7, #8]
    2b88:	88f9      	ldrh	r1, [r7, #6]
    2b8a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
    2b8c:	f8c4 9008 	str.w	r9, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    2b90:	4429      	add	r1, r5
    2b92:	f00a fa31 	bl	cff8 <nvs_al_size.isra.0>
    2b96:	4448      	add	r0, r9
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    2b98:	4290      	cmp	r0, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    2b9a:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    2b9c:	d1f0      	bne.n	2b80 <nvs_mount+0x224>
    2b9e:	2d00      	cmp	r5, #0
    2ba0:	d0ee      	beq.n	2b80 <nvs_mount+0x224>
				rc = -ESPIPE;
    2ba2:	f06f 051c 	mvn.w	r5, #28
    2ba6:	e0d2      	b.n	2d4e <nvs_mount+0x3f2>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    2ba8:	2308      	movs	r3, #8
    2baa:	f107 020c 	add.w	r2, r7, #12
    2bae:	4649      	mov	r1, r9
    2bb0:	4620      	mov	r0, r4
    2bb2:	f00a f991 	bl	ced8 <nvs_flash_rd>
			if (rc) {
    2bb6:	4605      	mov	r5, r0
    2bb8:	2800      	cmp	r0, #0
    2bba:	f47f af78 	bne.w	2aae <nvs_mount+0x152>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
    2bbe:	f107 010c 	add.w	r1, r7, #12
    2bc2:	4620      	mov	r0, r4
    2bc4:	f00a fa22 	bl	d00c <nvs_ate_valid>
    2bc8:	b120      	cbz	r0, 2bd4 <nvs_mount+0x278>
    2bca:	89bb      	ldrh	r3, [r7, #12]
    2bcc:	4553      	cmp	r3, sl
    2bce:	d101      	bne.n	2bd4 <nvs_mount+0x278>
			    (gc_done_ate.id == 0xffff) &&
    2bd0:	8a3b      	ldrh	r3, [r7, #16]
    2bd2:	b10b      	cbz	r3, 2bd8 <nvs_mount+0x27c>
			addr += ate_size;
    2bd4:	44b1      	add	r9, r6
    2bd6:	e7a1      	b.n	2b1c <nvs_mount+0x1c0>
				gc_done_marker = true;
    2bd8:	2201      	movs	r2, #1
    2bda:	e7a8      	b.n	2b2e <nvs_mount+0x1d2>
		LOG_INF("No GC Done marker found: restarting gc");
    2bdc:	2b02      	cmp	r3, #2
    2bde:	d909      	bls.n	2bf4 <nvs_mount+0x298>
    2be0:	4b16      	ldr	r3, [pc, #88]	; (2c3c <nvs_mount+0x2e0>)
    2be2:	637b      	str	r3, [r7, #52]	; 0x34
    2be4:	2302      	movs	r3, #2
    2be6:	633b      	str	r3, [r7, #48]	; 0x30
    2be8:	f107 0230 	add.w	r2, r7, #48	; 0x30
    2bec:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    2bf0:	f00a f9ff 	bl	cff2 <z_log_msg_static_create.constprop.0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    2bf4:	6861      	ldr	r1, [r4, #4]
    2bf6:	4620      	mov	r0, r4
    2bf8:	f00a f9d8 	bl	cfac <nvs_flash_erase_sector>
		if (rc) {
    2bfc:	4605      	mov	r5, r0
    2bfe:	2800      	cmp	r0, #0
    2c00:	f47f af55 	bne.w	2aae <nvs_mount+0x152>
		fs->ate_wra &= ADDR_SECT_MASK;
    2c04:	6863      	ldr	r3, [r4, #4]
    2c06:	4a0e      	ldr	r2, [pc, #56]	; (2c40 <nvs_mount+0x2e4>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    2c08:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    2c0a:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    2c0c:	440b      	add	r3, r1
    2c0e:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
    2c12:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    2c14:	4013      	ands	r3, r2
    2c16:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    2c18:	4620      	mov	r0, r4
    2c1a:	f00a fad9 	bl	d1d0 <nvs_gc>
    2c1e:	e7a4      	b.n	2b6a <nvs_mount+0x20e>
    2c20:	200002e0 	.word	0x200002e0
    2c24:	0001116c 	.word	0x0001116c
    2c28:	0001118e 	.word	0x0001118e
    2c2c:	000111ab 	.word	0x000111ab
    2c30:	000111c3 	.word	0x000111c3
    2c34:	000111d7 	.word	0x000111d7
    2c38:	000111fa 	.word	0x000111fa
    2c3c:	0001120f 	.word	0x0001120f
    2c40:	ffff0000 	.word	0xffff0000
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    2c44:	1a5b      	subs	r3, r3, r1
    2c46:	4652      	mov	r2, sl
    2c48:	4620      	mov	r0, r4
    2c4a:	f00a f98a 	bl	cf62 <nvs_flash_cmp_const>
		if (rc < 0) {
    2c4e:	1e05      	subs	r5, r0, #0
    2c50:	f6ff af2d 	blt.w	2aae <nvs_mount+0x152>
		if (!rc) {
    2c54:	d008      	beq.n	2c68 <nvs_mount+0x30c>
		fs->data_wra += fs->flash_parameters->write_block_size;
    2c56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2c58:	68a3      	ldr	r3, [r4, #8]
    2c5a:	6812      	ldr	r2, [r2, #0]
    2c5c:	4413      	add	r3, r2
    2c5e:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
    2c60:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    2c64:	428b      	cmp	r3, r1
    2c66:	d8ed      	bhi.n	2c44 <nvs_mount+0x2e8>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    2c68:	6861      	ldr	r1, [r4, #4]
    2c6a:	89a3      	ldrh	r3, [r4, #12]
    2c6c:	eb01 0246 	add.w	r2, r1, r6, lsl #1
    2c70:	429a      	cmp	r2, r3
    2c72:	f47f af7b 	bne.w	2b6c <nvs_mount+0x210>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    2c76:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 2d5c <nvs_mount+0x400>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    2c7a:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    2c7c:	ea01 0209 	and.w	r2, r1, r9
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    2c80:	4293      	cmp	r3, r2
    2c82:	f43f af73 	beq.w	2b6c <nvs_mount+0x210>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    2c86:	4620      	mov	r0, r4
    2c88:	f00a f990 	bl	cfac <nvs_flash_erase_sector>
		if (rc) {
    2c8c:	4605      	mov	r5, r0
    2c8e:	2800      	cmp	r0, #0
    2c90:	f47f af0d 	bne.w	2aae <nvs_mount+0x152>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    2c94:	6863      	ldr	r3, [r4, #4]
    2c96:	ea03 0309 	and.w	r3, r3, r9
    2c9a:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
    2c9c:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    2c9e:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
    2ca0:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    2ca4:	429a      	cmp	r2, r3
    2ca6:	d04e      	beq.n	2d46 <nvs_mount+0x3ea>
    2ca8:	4640      	mov	r0, r8
    2caa:	f008 fa27 	bl	b0fc <z_impl_k_mutex_unlock>
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    2cae:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 2d60 <nvs_mount+0x404>
	fs->ready = true;
    2cb2:	2301      	movs	r3, #1
    2cb4:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    2cb6:	f8d8 3000 	ldr.w	r3, [r8]
    2cba:	f003 0307 	and.w	r3, r3, #7
    2cbe:	2b02      	cmp	r3, #2
    2cc0:	d93f      	bls.n	2d42 <nvs_mount+0x3e6>
    2cc2:	466d      	mov	r5, sp
    2cc4:	b088      	sub	sp, #32
    2cc6:	89e1      	ldrh	r1, [r4, #14]
    2cc8:	89a3      	ldrh	r3, [r4, #12]
    2cca:	466a      	mov	r2, sp
    2ccc:	4825      	ldr	r0, [pc, #148]	; (2d64 <nvs_mount+0x408>)
    2cce:	61d3      	str	r3, [r2, #28]
    2cd0:	2604      	movs	r6, #4
    2cd2:	e9c2 0105 	strd	r0, r1, [r2, #20]
    2cd6:	f842 6f10 	str.w	r6, [r2, #16]!
    2cda:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    2cde:	4640      	mov	r0, r8
    2ce0:	f00a f987 	bl	cff2 <z_log_msg_static_create.constprop.0>
	LOG_INF("alloc wra: %d, %x",
    2ce4:	f8d8 3000 	ldr.w	r3, [r8]
    2ce8:	f003 0307 	and.w	r3, r3, #7
    2cec:	2b02      	cmp	r3, #2
    2cee:	46ad      	mov	sp, r5
    2cf0:	d927      	bls.n	2d42 <nvs_mount+0x3e6>
    2cf2:	b088      	sub	sp, #32
    2cf4:	6863      	ldr	r3, [r4, #4]
    2cf6:	466a      	mov	r2, sp
    2cf8:	491b      	ldr	r1, [pc, #108]	; (2d68 <nvs_mount+0x40c>)
    2cfa:	6151      	str	r1, [r2, #20]
    2cfc:	0c19      	lsrs	r1, r3, #16
    2cfe:	b29b      	uxth	r3, r3
    2d00:	6191      	str	r1, [r2, #24]
    2d02:	61d3      	str	r3, [r2, #28]
    2d04:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    2d08:	f842 6f10 	str.w	r6, [r2, #16]!
    2d0c:	4640      	mov	r0, r8
    2d0e:	f00a f970 	bl	cff2 <z_log_msg_static_create.constprop.0>
	LOG_INF("data wra: %d, %x",
    2d12:	f8d8 3000 	ldr.w	r3, [r8]
    2d16:	f003 0307 	and.w	r3, r3, #7
    2d1a:	2b02      	cmp	r3, #2
    2d1c:	46ad      	mov	sp, r5
    2d1e:	d910      	bls.n	2d42 <nvs_mount+0x3e6>
    2d20:	b088      	sub	sp, #32
    2d22:	68a3      	ldr	r3, [r4, #8]
    2d24:	466a      	mov	r2, sp
    2d26:	4911      	ldr	r1, [pc, #68]	; (2d6c <nvs_mount+0x410>)
    2d28:	6151      	str	r1, [r2, #20]
    2d2a:	0c19      	lsrs	r1, r3, #16
    2d2c:	b29b      	uxth	r3, r3
    2d2e:	6191      	str	r1, [r2, #24]
    2d30:	61d3      	str	r3, [r2, #28]
    2d32:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    2d36:	f842 6f10 	str.w	r6, [r2, #16]!
    2d3a:	4640      	mov	r0, r8
    2d3c:	f00a f959 	bl	cff2 <z_log_msg_static_create.constprop.0>
    2d40:	46ad      	mov	sp, r5
	return 0;
    2d42:	2500      	movs	r5, #0
    2d44:	e620      	b.n	2988 <nvs_mount+0x2c>
		rc = nvs_add_gc_done_ate(fs);
    2d46:	4620      	mov	r0, r4
    2d48:	f00a fa2d 	bl	d1a6 <nvs_add_gc_done_ate>
    2d4c:	4605      	mov	r5, r0
    2d4e:	4640      	mov	r0, r8
    2d50:	f008 f9d4 	bl	b0fc <z_impl_k_mutex_unlock>
	if (rc) {
    2d54:	2d00      	cmp	r5, #0
    2d56:	d0aa      	beq.n	2cae <nvs_mount+0x352>
    2d58:	e616      	b.n	2988 <nvs_mount+0x2c>
    2d5a:	bf00      	nop
    2d5c:	ffff0000 	.word	0xffff0000
    2d60:	200002e0 	.word	0x200002e0
    2d64:	00011236 	.word	0x00011236
    2d68:	0001124d 	.word	0x0001124d
    2d6c:	0001125f 	.word	0x0001125f

00002d70 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    2d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d74:	461d      	mov	r5, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    2d76:	7c03      	ldrb	r3, [r0, #16]
{
    2d78:	b08d      	sub	sp, #52	; 0x34
    2d7a:	4604      	mov	r4, r0
    2d7c:	4689      	mov	r9, r1
    2d7e:	4690      	mov	r8, r2
	if (!fs->ready) {
    2d80:	b99b      	cbnz	r3, 2daa <nvs_write+0x3a>
		LOG_ERR("NVS not initialized");
    2d82:	4868      	ldr	r0, [pc, #416]	; (2f24 <nvs_write+0x1b4>)
    2d84:	6803      	ldr	r3, [r0, #0]
    2d86:	075b      	lsls	r3, r3, #29
    2d88:	d105      	bne.n	2d96 <nvs_write+0x26>
		return -EACCES;
    2d8a:	f06f 060c 	mvn.w	r6, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    2d8e:	4630      	mov	r0, r6
    2d90:	b00d      	add	sp, #52	; 0x34
    2d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_ERR("NVS not initialized");
    2d96:	4b64      	ldr	r3, [pc, #400]	; (2f28 <nvs_write+0x1b8>)
    2d98:	930b      	str	r3, [sp, #44]	; 0x2c
    2d9a:	aa0a      	add	r2, sp, #40	; 0x28
    2d9c:	2302      	movs	r3, #2
    2d9e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2da2:	930a      	str	r3, [sp, #40]	; 0x28
    2da4:	f00a f925 	bl	cff2 <z_log_msg_static_create.constprop.0>
    2da8:	e7ef      	b.n	2d8a <nvs_write+0x1a>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    2daa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    2dac:	2108      	movs	r1, #8
    2dae:	4610      	mov	r0, r2
    2db0:	f00a f922 	bl	cff8 <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
    2db4:	4629      	mov	r1, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    2db6:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    2db8:	4610      	mov	r0, r2
    2dba:	f00a f91d 	bl	cff8 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    2dbe:	89a3      	ldrh	r3, [r4, #12]
    2dc0:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
    2dc4:	42ab      	cmp	r3, r5
	data_size = nvs_al_size(fs, len);
    2dc6:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    2dc8:	f0c0 80a9 	bcc.w	2f1e <nvs_write+0x1ae>
    2dcc:	b11d      	cbz	r5, 2dd6 <nvs_write+0x66>
	    ((len > 0) && (data == NULL))) {
    2dce:	f1b8 0f00 	cmp.w	r8, #0
    2dd2:	f000 80a4 	beq.w	2f1e <nvs_write+0x1ae>
	wlk_addr = fs->ate_wra;
    2dd6:	6863      	ldr	r3, [r4, #4]
    2dd8:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    2dda:	aa04      	add	r2, sp, #16
    2ddc:	a903      	add	r1, sp, #12
    2dde:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    2de0:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    2de4:	f00a f94a 	bl	d07c <nvs_prev_ate>
		if (rc) {
    2de8:	4606      	mov	r6, r0
    2dea:	2800      	cmp	r0, #0
    2dec:	d1cf      	bne.n	2d8e <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    2dee:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    2df2:	454b      	cmp	r3, r9
    2df4:	d005      	beq.n	2e02 <nvs_write+0x92>
		if (wlk_addr == fs->ate_wra) {
    2df6:	6862      	ldr	r2, [r4, #4]
    2df8:	9b03      	ldr	r3, [sp, #12]
    2dfa:	429a      	cmp	r2, r3
    2dfc:	d1ed      	bne.n	2dda <nvs_write+0x6a>
		if (len == 0) {
    2dfe:	b9e5      	cbnz	r5, 2e3a <nvs_write+0xca>
    2e00:	e7c5      	b.n	2d8e <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    2e02:	a904      	add	r1, sp, #16
    2e04:	4620      	mov	r0, r4
    2e06:	f00a f901 	bl	d00c <nvs_ate_valid>
    2e0a:	2800      	cmp	r0, #0
    2e0c:	d0f3      	beq.n	2df6 <nvs_write+0x86>
		rd_addr += wlk_ate.offset;
    2e0e:	f8bd 0012 	ldrh.w	r0, [sp, #18]
			if (wlk_ate.len == 0U) {
    2e12:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
    2e16:	b175      	cbz	r5, 2e36 <nvs_write+0xc6>
		} else if (len == wlk_ate.len) {
    2e18:	42ab      	cmp	r3, r5
    2e1a:	d10e      	bne.n	2e3a <nvs_write+0xca>
		rd_addr &= ADDR_SECT_MASK;
    2e1c:	ea4f 411b 	mov.w	r1, fp, lsr #16
    2e20:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    2e22:	4401      	add	r1, r0
    2e24:	462b      	mov	r3, r5
    2e26:	4642      	mov	r2, r8
    2e28:	4620      	mov	r0, r4
    2e2a:	f00a f870 	bl	cf0e <nvs_flash_block_cmp>
			if (rc <= 0) {
    2e2e:	2800      	cmp	r0, #0
    2e30:	dc03      	bgt.n	2e3a <nvs_write+0xca>
    2e32:	4606      	mov	r6, r0
    2e34:	e7ab      	b.n	2d8e <nvs_write+0x1e>
			if (wlk_ate.len == 0U) {
    2e36:	2b00      	cmp	r3, #0
    2e38:	d0a9      	beq.n	2d8e <nvs_write+0x1e>
	if (data_size) {
    2e3a:	2f00      	cmp	r7, #0
    2e3c:	d13e      	bne.n	2ebc <nvs_write+0x14c>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    2e3e:	f104 0314 	add.w	r3, r4, #20
    2e42:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    2e44:	f04f 32ff 	mov.w	r2, #4294967295
    2e48:	f04f 33ff 	mov.w	r3, #4294967295
    2e4c:	f104 0014 	add.w	r0, r4, #20
    2e50:	f008 f8da 	bl	b008 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
    2e54:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 2f2c <nvs_write+0x1bc>
		if (gc_count == fs->sector_count) {
    2e58:	89e3      	ldrh	r3, [r4, #14]
    2e5a:	429e      	cmp	r6, r3
    2e5c:	d05c      	beq.n	2f18 <nvs_write+0x1a8>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
    2e5e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    2e62:	18f9      	adds	r1, r7, r3
    2e64:	428a      	cmp	r2, r1
    2e66:	d32c      	bcc.n	2ec2 <nvs_write+0x152>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    2e68:	f8ad 301a 	strh.w	r3, [sp, #26]
	nvs_ate_crc8_update(&entry);
    2e6c:	a806      	add	r0, sp, #24
	entry.part = 0xff;
    2e6e:	23ff      	movs	r3, #255	; 0xff
    2e70:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
    2e74:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
    2e78:	f8ad 501c 	strh.w	r5, [sp, #28]
	nvs_ate_crc8_update(&entry);
    2e7c:	f00a f8b0 	bl	cfe0 <nvs_ate_crc8_update>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    2e80:	68a1      	ldr	r1, [r4, #8]
    2e82:	462b      	mov	r3, r5
    2e84:	4642      	mov	r2, r8
    2e86:	4620      	mov	r0, r4
    2e88:	f00a f942 	bl	d110 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
    2e8c:	4629      	mov	r1, r5
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    2e8e:	4682      	mov	sl, r0
	fs->data_wra += nvs_al_size(fs, len);
    2e90:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    2e92:	f00a f8b1 	bl	cff8 <nvs_al_size.isra.0>
    2e96:	68a2      	ldr	r2, [r4, #8]
    2e98:	4402      	add	r2, r0
    2e9a:	60a2      	str	r2, [r4, #8]
	if (rc) {
    2e9c:	f1ba 0f00 	cmp.w	sl, #0
    2ea0:	d107      	bne.n	2eb2 <nvs_write+0x142>
	rc = nvs_flash_ate_wrt(fs, &entry);
    2ea2:	a906      	add	r1, sp, #24
    2ea4:	4620      	mov	r0, r4
    2ea6:	f00a f96d 	bl	d184 <nvs_flash_ate_wrt>
	rc = len;
    2eaa:	2800      	cmp	r0, #0
    2eac:	bf14      	ite	ne
    2eae:	4682      	movne	sl, r0
    2eb0:	46aa      	moveq	sl, r5
	return z_impl_k_mutex_unlock(mutex);
    2eb2:	9801      	ldr	r0, [sp, #4]
    2eb4:	f008 f922 	bl	b0fc <z_impl_k_mutex_unlock>
	return rc;
    2eb8:	4656      	mov	r6, sl
    2eba:	e768      	b.n	2d8e <nvs_write+0x1e>
		required_space = data_size + ate_size;
    2ebc:	4457      	add	r7, sl
    2ebe:	b2bf      	uxth	r7, r7
    2ec0:	e7bd      	b.n	2e3e <nvs_write+0xce>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    2ec2:	2108      	movs	r1, #8
    2ec4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    2ec6:	f00a f897 	bl	cff8 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    2eca:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2ece:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
    2ed2:	2300      	movs	r3, #0
    2ed4:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    2ed8:	1813      	adds	r3, r2, r0
    2eda:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    2ede:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    2ee0:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    2ee4:	441a      	add	r2, r3
    2ee6:	1a10      	subs	r0, r2, r0
    2ee8:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    2eea:	a806      	add	r0, sp, #24
    2eec:	f00a f878 	bl	cfe0 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    2ef0:	a906      	add	r1, sp, #24
    2ef2:	4620      	mov	r0, r4
    2ef4:	f00a f946 	bl	d184 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    2ef8:	1d21      	adds	r1, r4, #4
    2efa:	4620      	mov	r0, r4
    2efc:	f009 fffa 	bl	cef4 <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    2f00:	6863      	ldr	r3, [r4, #4]
    2f02:	ea03 030b 	and.w	r3, r3, fp
    2f06:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    2f08:	4620      	mov	r0, r4
    2f0a:	f00a f961 	bl	d1d0 <nvs_gc>
		if (rc) {
    2f0e:	4682      	mov	sl, r0
    2f10:	2800      	cmp	r0, #0
    2f12:	d1ce      	bne.n	2eb2 <nvs_write+0x142>
		gc_count++;
    2f14:	3601      	adds	r6, #1
		if (gc_count == fs->sector_count) {
    2f16:	e79f      	b.n	2e58 <nvs_write+0xe8>
			rc = -ENOSPC;
    2f18:	f06f 0a1b 	mvn.w	sl, #27
    2f1c:	e7c9      	b.n	2eb2 <nvs_write+0x142>
		return -EINVAL;
    2f1e:	f06f 0615 	mvn.w	r6, #21
    2f22:	e734      	b.n	2d8e <nvs_write+0x1e>
    2f24:	200002e0 	.word	0x200002e0
    2f28:	00011158 	.word	0x00011158
    2f2c:	ffff0000 	.word	0xffff0000

00002f30 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
    2f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2f34:	461e      	mov	r6, r3
    2f36:	b088      	sub	sp, #32
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    2f38:	7c03      	ldrb	r3, [r0, #16]
{
    2f3a:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
    2f3e:	4604      	mov	r4, r0
    2f40:	460f      	mov	r7, r1
    2f42:	4690      	mov	r8, r2
	if (!fs->ready) {
    2f44:	b993      	cbnz	r3, 2f6c <nvs_read_hist+0x3c>
		LOG_ERR("NVS not initialized");
    2f46:	4831      	ldr	r0, [pc, #196]	; (300c <nvs_read_hist+0xdc>)
    2f48:	6803      	ldr	r3, [r0, #0]
    2f4a:	075b      	lsls	r3, r3, #29
    2f4c:	d104      	bne.n	2f58 <nvs_read_hist+0x28>
		return -EACCES;
    2f4e:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    2f52:	b008      	add	sp, #32
    2f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_ERR("NVS not initialized");
    2f58:	4b2d      	ldr	r3, [pc, #180]	; (3010 <nvs_read_hist+0xe0>)
    2f5a:	9307      	str	r3, [sp, #28]
    2f5c:	aa06      	add	r2, sp, #24
    2f5e:	2302      	movs	r3, #2
    2f60:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2f64:	9306      	str	r3, [sp, #24]
    2f66:	f00a f844 	bl	cff2 <z_log_msg_static_create.constprop.0>
    2f6a:	e7f0      	b.n	2f4e <nvs_read_hist+0x1e>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    2f6c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    2f6e:	2108      	movs	r1, #8
    2f70:	f00a f842 	bl	cff8 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    2f74:	89a3      	ldrh	r3, [r4, #12]
    2f76:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    2f7a:	42b3      	cmp	r3, r6
    2f7c:	d343      	bcc.n	3006 <nvs_read_hist+0xd6>
	wlk_addr = fs->ate_wra;
    2f7e:	f8d4 a004 	ldr.w	sl, [r4, #4]
    2f82:	f8cd a004 	str.w	sl, [sp, #4]
	cnt_his = 0U;
    2f86:	2500      	movs	r5, #0
	while (cnt_his <= cnt) {
    2f88:	454d      	cmp	r5, r9
    2f8a:	4651      	mov	r1, sl
		rd_addr = wlk_addr;
    2f8c:	f8dd a004 	ldr.w	sl, [sp, #4]
	while (cnt_his <= cnt) {
    2f90:	d909      	bls.n	2fa6 <nvs_read_hist+0x76>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    2f92:	6863      	ldr	r3, [r4, #4]
    2f94:	4553      	cmp	r3, sl
    2f96:	d11e      	bne.n	2fd6 <nvs_read_hist+0xa6>
    2f98:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    2f9c:	42bb      	cmp	r3, r7
    2f9e:	d01a      	beq.n	2fd6 <nvs_read_hist+0xa6>
		return -ENOENT;
    2fa0:	f06f 0001 	mvn.w	r0, #1
    2fa4:	e7d5      	b.n	2f52 <nvs_read_hist+0x22>
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    2fa6:	aa02      	add	r2, sp, #8
    2fa8:	a901      	add	r1, sp, #4
    2faa:	4620      	mov	r0, r4
    2fac:	f00a f866 	bl	d07c <nvs_prev_ate>
		if (rc) {
    2fb0:	2800      	cmp	r0, #0
    2fb2:	d1ce      	bne.n	2f52 <nvs_read_hist+0x22>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
    2fb4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    2fb8:	42bb      	cmp	r3, r7
    2fba:	d106      	bne.n	2fca <nvs_read_hist+0x9a>
    2fbc:	a902      	add	r1, sp, #8
    2fbe:	4620      	mov	r0, r4
    2fc0:	f00a f824 	bl	d00c <nvs_ate_valid>
    2fc4:	b108      	cbz	r0, 2fca <nvs_read_hist+0x9a>
			cnt_his++;
    2fc6:	3501      	adds	r5, #1
    2fc8:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
    2fca:	6862      	ldr	r2, [r4, #4]
    2fcc:	9b01      	ldr	r3, [sp, #4]
    2fce:	429a      	cmp	r2, r3
    2fd0:	d1da      	bne.n	2f88 <nvs_read_hist+0x58>
		rd_addr = wlk_addr;
    2fd2:	4651      	mov	r1, sl
    2fd4:	e7e0      	b.n	2f98 <nvs_read_hist+0x68>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    2fd6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    2fda:	2b00      	cmp	r3, #0
    2fdc:	d0e0      	beq.n	2fa0 <nvs_read_hist+0x70>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    2fde:	45a9      	cmp	r9, r5
    2fe0:	d8de      	bhi.n	2fa0 <nvs_read_hist+0x70>
	rd_addr += wlk_ate.offset;
    2fe2:	f8bd 000a 	ldrh.w	r0, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
    2fe6:	0c09      	lsrs	r1, r1, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    2fe8:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
    2fea:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    2fee:	bf28      	it	cs
    2ff0:	4633      	movcs	r3, r6
    2ff2:	4401      	add	r1, r0
    2ff4:	4642      	mov	r2, r8
    2ff6:	4620      	mov	r0, r4
    2ff8:	f009 ff6e 	bl	ced8 <nvs_flash_rd>
	if (rc) {
    2ffc:	2800      	cmp	r0, #0
    2ffe:	d1a8      	bne.n	2f52 <nvs_read_hist+0x22>
	return wlk_ate.len;
    3000:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    3004:	e7a5      	b.n	2f52 <nvs_read_hist+0x22>
		return -EINVAL;
    3006:	f06f 0015 	mvn.w	r0, #21
    300a:	e7a2      	b.n	2f52 <nvs_read_hist+0x22>
    300c:	200002e0 	.word	0x200002e0
    3010:	00011158 	.word	0x00011158

00003014 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
    3014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    3018:	f8df 8058 	ldr.w	r8, [pc, #88]	; 3074 <activate_foreach_backend+0x60>
{
    301c:	4604      	mov	r4, r0
	while (mask_cpy) {
    301e:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
    3020:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
    3024:	b914      	cbnz	r4, 302c <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
    3026:	4638      	mov	r0, r7
    3028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    302c:	fa94 f5a4 	rbit	r5, r4
    3030:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    3034:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    3038:	012e      	lsls	r6, r5, #4
    303a:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    303e:	ea6f 0a03 	mvn.w	sl, r3
    3042:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    3046:	7b2b      	ldrb	r3, [r5, #12]
    3048:	2b00      	cmp	r3, #0
    304a:	d0eb      	beq.n	3024 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    304c:	f858 3006 	ldr.w	r3, [r8, r6]
    3050:	691b      	ldr	r3, [r3, #16]
    3052:	b94b      	cbnz	r3, 3068 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    3054:	4446      	add	r6, r8
			log_backend_enable(backend,
    3056:	2204      	movs	r2, #4
    3058:	6873      	ldr	r3, [r6, #4]
    305a:	4628      	mov	r0, r5
    305c:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    305e:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    3062:	f000 fb39 	bl	36d8 <log_backend_enable>
    3066:	e7dd      	b.n	3024 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    3068:	4628      	mov	r0, r5
    306a:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    306c:	2800      	cmp	r0, #0
    306e:	d1d9      	bne.n	3024 <activate_foreach_backend+0x10>
    3070:	e7f0      	b.n	3054 <activate_foreach_backend+0x40>
    3072:	bf00      	nop
    3074:	0001012c 	.word	0x0001012c

00003078 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
    3078:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    307a:	4910      	ldr	r1, [pc, #64]	; (30bc <enable_logger+0x44>)
    307c:	4810      	ldr	r0, [pc, #64]	; (30c0 <enable_logger+0x48>)
{
    307e:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    3080:	2200      	movs	r2, #0
    3082:	f00c fcfd 	bl	fa80 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    3086:	4d0f      	ldr	r5, [pc, #60]	; (30c4 <enable_logger+0x4c>)
    3088:	490f      	ldr	r1, [pc, #60]	; (30c8 <enable_logger+0x50>)
    308a:	2200      	movs	r2, #0
    308c:	2300      	movs	r3, #0
    308e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3092:	2400      	movs	r4, #0
    3094:	230e      	movs	r3, #14
    3096:	e9cd 3403 	strd	r3, r4, [sp, #12]
    309a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    309e:	4b0b      	ldr	r3, [pc, #44]	; (30cc <enable_logger+0x54>)
    30a0:	9400      	str	r4, [sp, #0]
    30a2:	f44f 7240 	mov.w	r2, #768	; 0x300
    30a6:	4628      	mov	r0, r5
    30a8:	f007 ff06 	bl	aeb8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    30ac:	4908      	ldr	r1, [pc, #32]	; (30d0 <enable_logger+0x58>)
    30ae:	4628      	mov	r0, r5
    30b0:	f007 fe40 	bl	ad34 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    30b4:	4620      	mov	r0, r4
    30b6:	b009      	add	sp, #36	; 0x24
    30b8:	bd30      	pop	{r4, r5, pc}
    30ba:	bf00      	nop
    30bc:	000030d5 	.word	0x000030d5
    30c0:	20000820 	.word	0x20000820
    30c4:	20000360 	.word	0x20000360
    30c8:	20003e08 	.word	0x20003e08
    30cc:	00003401 	.word	0x00003401
    30d0:	000116c3 	.word	0x000116c3

000030d4 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
    30d4:	4801      	ldr	r0, [pc, #4]	; (30dc <log_process_thread_timer_expiry_fn+0x8>)
    30d6:	f008 b84f 	b.w	b178 <z_impl_k_sem_give>
    30da:	bf00      	nop
    30dc:	20000330 	.word	0x20000330

000030e0 <z_log_init>:
{
    30e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    30e4:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
    30e6:	481f      	ldr	r0, [pc, #124]	; (3164 <z_log_init+0x84>)
{
    30e8:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    30ea:	f00a f959 	bl	d3a0 <atomic_inc>
    30ee:	4606      	mov	r6, r0
    30f0:	2800      	cmp	r0, #0
    30f2:	d030      	beq.n	3156 <z_log_init+0x76>
	uint32_t mask = 0;
    30f4:	2500      	movs	r5, #0
}
    30f6:	4628      	mov	r0, r5
    30f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    30fc:	7b23      	ldrb	r3, [r4, #12]
    30fe:	b173      	cbz	r3, 311e <z_log_init+0x3e>
	if (backend->api->init) {
    3100:	6823      	ldr	r3, [r4, #0]
    3102:	68db      	ldr	r3, [r3, #12]
    3104:	b10b      	cbz	r3, 310a <z_log_init+0x2a>
		backend->api->init(backend);
    3106:	4620      	mov	r0, r4
    3108:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    310a:	6823      	ldr	r3, [r4, #0]
    310c:	691b      	ldr	r3, [r3, #16]
    310e:	b9d3      	cbnz	r3, 3146 <z_log_init+0x66>
				log_backend_enable(backend,
    3110:	6863      	ldr	r3, [r4, #4]
    3112:	2204      	movs	r2, #4
    3114:	6819      	ldr	r1, [r3, #0]
    3116:	4620      	mov	r0, r4
    3118:	f000 fade 	bl	36d8 <log_backend_enable>
			i++;
    311c:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    311e:	3410      	adds	r4, #16
    3120:	454c      	cmp	r4, r9
    3122:	d3eb      	bcc.n	30fc <z_log_init+0x1c>
	if (blocking) {
    3124:	f1b8 0f00 	cmp.w	r8, #0
    3128:	d0e5      	beq.n	30f6 <z_log_init+0x16>
		while (mask) {
    312a:	2d00      	cmp	r5, #0
    312c:	d0e2      	beq.n	30f4 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
    312e:	4628      	mov	r0, r5
    3130:	f7ff ff70 	bl	3014 <activate_foreach_backend>
    3134:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    3136:	2f00      	cmp	r7, #0
    3138:	d0f7      	beq.n	312a <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
    313a:	2100      	movs	r1, #0
    313c:	f44f 70a4 	mov.w	r0, #328	; 0x148
    3140:	f008 fb4e 	bl	b7e0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3144:	e7f1      	b.n	312a <z_log_init+0x4a>
		return backend->api->is_ready(backend);
    3146:	4620      	mov	r0, r4
    3148:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    314a:	2800      	cmp	r0, #0
    314c:	d0e0      	beq.n	3110 <z_log_init+0x30>
				mask |= BIT(i);
    314e:	fa0a f306 	lsl.w	r3, sl, r6
    3152:	431d      	orrs	r5, r3
    3154:	e7e2      	b.n	311c <z_log_init+0x3c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    3156:	4c04      	ldr	r4, [pc, #16]	; (3168 <z_log_init+0x88>)
    3158:	f8df 9010 	ldr.w	r9, [pc, #16]	; 316c <z_log_init+0x8c>
	uint32_t mask = 0;
    315c:	4605      	mov	r5, r0
				mask |= BIT(i);
    315e:	f04f 0a01 	mov.w	sl, #1
    3162:	e7dd      	b.n	3120 <z_log_init+0x40>
    3164:	20000ed8 	.word	0x20000ed8
    3168:	0001012c 	.word	0x0001012c
    316c:	0001014c 	.word	0x0001014c

00003170 <log_format_func_t_get>:
}
    3170:	4b01      	ldr	r3, [pc, #4]	; (3178 <log_format_func_t_get+0x8>)
    3172:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    3176:	4770      	bx	lr
    3178:	00010328 	.word	0x00010328

0000317c <log_set_timestamp_func>:
{
    317c:	b508      	push	{r3, lr}
    317e:	4603      	mov	r3, r0
    3180:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    3182:	b12b      	cbz	r3, 3190 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    3184:	4a04      	ldr	r2, [pc, #16]	; (3198 <log_set_timestamp_func+0x1c>)
    3186:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    3188:	f000 fd84 	bl	3c94 <log_output_timestamp_freq_set>
	return 0;
    318c:	2000      	movs	r0, #0
}
    318e:	bd08      	pop	{r3, pc}
		return -EINVAL;
    3190:	f06f 0015 	mvn.w	r0, #21
    3194:	e7fb      	b.n	318e <log_set_timestamp_func+0x12>
    3196:	bf00      	nop
    3198:	20000034 	.word	0x20000034

0000319c <z_log_notify_backend_enabled>:
{
    319c:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    319e:	4c04      	ldr	r4, [pc, #16]	; (31b0 <z_log_notify_backend_enabled+0x14>)
    31a0:	7823      	ldrb	r3, [r4, #0]
    31a2:	b913      	cbnz	r3, 31aa <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
    31a4:	4803      	ldr	r0, [pc, #12]	; (31b4 <z_log_notify_backend_enabled+0x18>)
    31a6:	f007 ffe7 	bl	b178 <z_impl_k_sem_give>
	backend_attached = true;
    31aa:	2301      	movs	r3, #1
    31ac:	7023      	strb	r3, [r4, #0]
}
    31ae:	bd10      	pop	{r4, pc}
    31b0:	200036bf 	.word	0x200036bf
    31b4:	20000330 	.word	0x20000330

000031b8 <z_log_dropped>:
{
    31b8:	b510      	push	{r4, lr}
    31ba:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    31bc:	4808      	ldr	r0, [pc, #32]	; (31e0 <z_log_dropped+0x28>)
    31be:	f00a f8ef 	bl	d3a0 <atomic_inc>
	if (buffered) {
    31c2:	b15c      	cbz	r4, 31dc <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    31c4:	f3bf 8f5b 	dmb	ish
    31c8:	4b06      	ldr	r3, [pc, #24]	; (31e4 <z_log_dropped+0x2c>)
    31ca:	e853 1f00 	ldrex	r1, [r3]
    31ce:	3901      	subs	r1, #1
    31d0:	e843 1200 	strex	r2, r1, [r3]
    31d4:	2a00      	cmp	r2, #0
    31d6:	d1f8      	bne.n	31ca <z_log_dropped+0x12>
    31d8:	f3bf 8f5b 	dmb	ish
}
    31dc:	bd10      	pop	{r4, pc}
    31de:	bf00      	nop
    31e0:	20000ed0 	.word	0x20000ed0
    31e4:	20000ed4 	.word	0x20000ed4

000031e8 <z_log_dropped_read_and_clear>:
}
    31e8:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    31ea:	4b06      	ldr	r3, [pc, #24]	; (3204 <z_log_dropped_read_and_clear+0x1c>)
    31ec:	f3bf 8f5b 	dmb	ish
    31f0:	4601      	mov	r1, r0
    31f2:	e853 0f00 	ldrex	r0, [r3]
    31f6:	e843 1200 	strex	r2, r1, [r3]
    31fa:	2a00      	cmp	r2, #0
    31fc:	d1f9      	bne.n	31f2 <z_log_dropped_read_and_clear+0xa>
    31fe:	f3bf 8f5b 	dmb	ish
    3202:	4770      	bx	lr
    3204:	20000ed0 	.word	0x20000ed0

00003208 <dropped_notify>:
{
    3208:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    320a:	f7ff ffed 	bl	31e8 <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    320e:	4c08      	ldr	r4, [pc, #32]	; (3230 <dropped_notify+0x28>)
    3210:	4e08      	ldr	r6, [pc, #32]	; (3234 <dropped_notify+0x2c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
    3212:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    3214:	42b4      	cmp	r4, r6
    3216:	d300      	bcc.n	321a <dropped_notify+0x12>
}
    3218:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    321a:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    321c:	795b      	ldrb	r3, [r3, #5]
    321e:	b12b      	cbz	r3, 322c <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
    3220:	6823      	ldr	r3, [r4, #0]
    3222:	685b      	ldr	r3, [r3, #4]
    3224:	b113      	cbz	r3, 322c <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
    3226:	4629      	mov	r1, r5
    3228:	4620      	mov	r0, r4
    322a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    322c:	3410      	adds	r4, #16
    322e:	e7f1      	b.n	3214 <dropped_notify+0xc>
    3230:	0001012c 	.word	0x0001012c
    3234:	0001014c 	.word	0x0001014c

00003238 <z_log_msg_init>:
{
    3238:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    323a:	4c04      	ldr	r4, [pc, #16]	; (324c <z_log_msg_init+0x14>)
    323c:	4904      	ldr	r1, [pc, #16]	; (3250 <z_log_msg_init+0x18>)
    323e:	4620      	mov	r0, r4
    3240:	f009 fcd9 	bl	cbf6 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    3244:	4b03      	ldr	r3, [pc, #12]	; (3254 <z_log_msg_init+0x1c>)
    3246:	601c      	str	r4, [r3, #0]
}
    3248:	bd10      	pop	{r4, pc}
    324a:	bf00      	nop
    324c:	20000270 	.word	0x20000270
    3250:	00010314 	.word	0x00010314
    3254:	20000ec8 	.word	0x20000ec8

00003258 <log_core_init>:
	panic_mode = false;
    3258:	4a09      	ldr	r2, [pc, #36]	; (3280 <log_core_init+0x28>)
		log_set_timestamp_func(default_get_timestamp,
    325a:	480a      	ldr	r0, [pc, #40]	; (3284 <log_core_init+0x2c>)
{
    325c:	b508      	push	{r3, lr}
	panic_mode = false;
    325e:	2300      	movs	r3, #0
    3260:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    3262:	4a09      	ldr	r2, [pc, #36]	; (3288 <log_core_init+0x30>)
    3264:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    3266:	4a09      	ldr	r2, [pc, #36]	; (328c <log_core_init+0x34>)
		log_set_timestamp_func(default_get_timestamp,
    3268:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	buffered_cnt = 0;
    326c:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    326e:	f7ff ff85 	bl	317c <log_set_timestamp_func>
		z_log_msg_init();
    3272:	f7ff ffe1 	bl	3238 <z_log_msg_init>
}
    3276:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_runtime_filters_init();
    327a:	f000 b985 	b.w	3588 <z_log_runtime_filters_init>
    327e:	bf00      	nop
    3280:	200036c0 	.word	0x200036c0
    3284:	0000d39d 	.word	0x0000d39d
    3288:	20000ed0 	.word	0x20000ed0
    328c:	20000ed4 	.word	0x20000ed4

00003290 <z_log_msg_alloc>:
{
    3290:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    3292:	2200      	movs	r2, #0
    3294:	4801      	ldr	r0, [pc, #4]	; (329c <z_log_msg_alloc+0xc>)
    3296:	2300      	movs	r3, #0
    3298:	f009 bcce 	b.w	cc38 <mpsc_pbuf_alloc>
    329c:	20000270 	.word	0x20000270

000032a0 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    32a0:	4801      	ldr	r0, [pc, #4]	; (32a8 <z_log_msg_local_claim+0x8>)
    32a2:	f009 bd67 	b.w	cd74 <mpsc_pbuf_claim>
    32a6:	bf00      	nop
    32a8:	20000270 	.word	0x20000270

000032ac <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    32ac:	4b02      	ldr	r3, [pc, #8]	; (32b8 <z_log_msg_free+0xc>)
{
    32ae:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    32b0:	6818      	ldr	r0, [r3, #0]
    32b2:	f009 bdb1 	b.w	ce18 <mpsc_pbuf_free>
    32b6:	bf00      	nop
    32b8:	20000ec8 	.word	0x20000ec8

000032bc <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    32bc:	4801      	ldr	r0, [pc, #4]	; (32c4 <z_log_msg_pending+0x8>)
    32be:	f009 bde7 	b.w	ce90 <mpsc_pbuf_is_pending>
    32c2:	bf00      	nop
    32c4:	20000270 	.word	0x20000270

000032c8 <z_impl_log_process>:
{
    32c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!backend_attached) {
    32ca:	4b35      	ldr	r3, [pc, #212]	; (33a0 <z_impl_log_process+0xd8>)
    32cc:	7818      	ldrb	r0, [r3, #0]
    32ce:	2800      	cmp	r0, #0
    32d0:	d064      	beq.n	339c <z_impl_log_process+0xd4>
	return z_log_msg_local_claim();
    32d2:	f7ff ffe5 	bl	32a0 <z_log_msg_local_claim>
	if (msg) {
    32d6:	4604      	mov	r4, r0
    32d8:	b190      	cbz	r0, 3300 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    32da:	f3bf 8f5b 	dmb	ish
    32de:	4b31      	ldr	r3, [pc, #196]	; (33a4 <z_impl_log_process+0xdc>)
    32e0:	e853 1f00 	ldrex	r1, [r3]
    32e4:	3901      	subs	r1, #1
    32e6:	e843 1200 	strex	r2, r1, [r3]
    32ea:	2a00      	cmp	r2, #0
    32ec:	d1f8      	bne.n	32e0 <z_impl_log_process+0x18>
    32ee:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    32f2:	4d2d      	ldr	r5, [pc, #180]	; (33a8 <z_impl_log_process+0xe0>)
    32f4:	4e2d      	ldr	r6, [pc, #180]	; (33ac <z_impl_log_process+0xe4>)
    32f6:	42b5      	cmp	r5, r6
    32f8:	d32d      	bcc.n	3356 <z_impl_log_process+0x8e>
		z_log_msg_free(msg);
    32fa:	4620      	mov	r0, r4
    32fc:	f7ff ffd6 	bl	32ac <z_log_msg_free>
	return dropped_cnt > 0;
    3300:	4b2b      	ldr	r3, [pc, #172]	; (33b0 <z_impl_log_process+0xe8>)
    3302:	4c2c      	ldr	r4, [pc, #176]	; (33b4 <z_impl_log_process+0xec>)
		if ((dropped_pend || unordered_pend) &&
    3304:	681b      	ldr	r3, [r3, #0]
    3306:	2b00      	cmp	r3, #0
    3308:	dd19      	ble.n	333e <z_impl_log_process+0x76>
	return z_impl_k_uptime_ticks();
    330a:	f00c fbb3 	bl	fa74 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    330e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3312:	fba0 0302 	umull	r0, r3, r0, r2
    3316:	fb02 3101 	mla	r1, r2, r1, r3
    331a:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    331c:	e9d4 2000 	ldrd	r2, r0, [r4]
    3320:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    3324:	1a9b      	subs	r3, r3, r2
    3326:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
    332a:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    332e:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    3332:	4293      	cmp	r3, r2
    3334:	f171 0100 	sbcs.w	r1, r1, #0
    3338:	d301      	bcc.n	333e <z_impl_log_process+0x76>
				dropped_notify();
    333a:	f7ff ff65 	bl	3208 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    333e:	e9d4 3200 	ldrd	r3, r2, [r4]
    3342:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    3346:	f142 0200 	adc.w	r2, r2, #0
    334a:	e9c4 3200 	strd	r3, r2, [r4]
}
    334e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return z_log_msg_pending();
    3352:	f7ff bfb3 	b.w	32bc <z_log_msg_pending>
	return backend->cb->active;
    3356:	686b      	ldr	r3, [r5, #4]
		if (log_backend_is_active(backend) &&
    3358:	795b      	ldrb	r3, [r3, #5]
    335a:	b13b      	cbz	r3, 336c <z_impl_log_process+0xa4>
	va_end(ap);
}

static inline bool z_log_item_is_msg(const union log_msg_generic *msg)
{
	return msg->generic.type == Z_LOG_MSG_LOG;
    335c:	7821      	ldrb	r1, [r4, #0]
	if (!z_log_item_is_msg(msg)) {
    335e:	074b      	lsls	r3, r1, #29
    3360:	d506      	bpl.n	3370 <z_impl_log_process+0xa8>
	backend->api->process(backend, msg);
    3362:	682b      	ldr	r3, [r5, #0]
    3364:	4621      	mov	r1, r4
    3366:	681b      	ldr	r3, [r3, #0]
    3368:	4628      	mov	r0, r5
    336a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    336c:	3510      	adds	r5, #16
    336e:	e7c2      	b.n	32f6 <z_impl_log_process+0x2e>
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    3370:	8823      	ldrh	r3, [r4, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    3372:	6862      	ldr	r2, [r4, #4]
	if (level == LOG_LEVEL_NONE) {
    3374:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
	return msg->hdr.desc.level;
    3378:	f3c3 1782 	ubfx	r7, r3, #6, #3
	return msg->hdr.desc.domain;
    337c:	f3c1 01c2 	ubfx	r1, r1, #3, #3
    3380:	d0ef      	beq.n	3362 <z_impl_log_process+0x9a>
	if (source) {
    3382:	2a00      	cmp	r2, #0
    3384:	d0ed      	beq.n	3362 <z_impl_log_process+0x9a>
 *
 * @return Source ID.
 */
static inline uint32_t log_dynamic_source_id(struct log_source_dynamic_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
    3386:	4b0c      	ldr	r3, [pc, #48]	; (33b8 <z_impl_log_process+0xf0>)
    3388:	1ad2      	subs	r2, r2, r3
		backend_level = log_filter_get(backend, domain_id, source_id, true);
    338a:	f342 028f 	sbfx	r2, r2, #2, #16
    338e:	2301      	movs	r3, #1
    3390:	4628      	mov	r0, r5
    3392:	f000 f9bb 	bl	370c <log_filter_get>
		if (log_backend_is_active(backend) &&
    3396:	42b8      	cmp	r0, r7
    3398:	d3e8      	bcc.n	336c <z_impl_log_process+0xa4>
    339a:	e7e2      	b.n	3362 <z_impl_log_process+0x9a>
}
    339c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    339e:	bf00      	nop
    33a0:	200036bf 	.word	0x200036bf
    33a4:	20000ed4 	.word	0x20000ed4
    33a8:	0001012c 	.word	0x0001012c
    33ac:	0001014c 	.word	0x0001014c
    33b0:	20000ed0 	.word	0x20000ed0
    33b4:	20000818 	.word	0x20000818
    33b8:	200002b4 	.word	0x200002b4

000033bc <z_impl_log_panic>:
{
    33bc:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    33be:	4d0d      	ldr	r5, [pc, #52]	; (33f4 <z_impl_log_panic+0x38>)
    33c0:	7829      	ldrb	r1, [r5, #0]
    33c2:	b961      	cbnz	r1, 33de <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
    33c4:	2001      	movs	r0, #1
    33c6:	f7ff fe8b 	bl	30e0 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    33ca:	4c0b      	ldr	r4, [pc, #44]	; (33f8 <z_impl_log_panic+0x3c>)
    33cc:	4e0b      	ldr	r6, [pc, #44]	; (33fc <z_impl_log_panic+0x40>)
    33ce:	42b4      	cmp	r4, r6
    33d0:	d306      	bcc.n	33e0 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    33d2:	f7ff ff79 	bl	32c8 <z_impl_log_process>
		while (log_process() == true) {
    33d6:	2800      	cmp	r0, #0
    33d8:	d1fb      	bne.n	33d2 <z_impl_log_panic+0x16>
	panic_mode = true;
    33da:	2301      	movs	r3, #1
    33dc:	702b      	strb	r3, [r5, #0]
}
    33de:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    33e0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    33e2:	795b      	ldrb	r3, [r3, #5]
    33e4:	b11b      	cbz	r3, 33ee <z_impl_log_panic+0x32>
	backend->api->panic(backend);
    33e6:	6823      	ldr	r3, [r4, #0]
    33e8:	4620      	mov	r0, r4
    33ea:	689b      	ldr	r3, [r3, #8]
    33ec:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    33ee:	3410      	adds	r4, #16
    33f0:	e7ed      	b.n	33ce <z_impl_log_panic+0x12>
    33f2:	bf00      	nop
    33f4:	200036c0 	.word	0x200036c0
    33f8:	0001012c 	.word	0x0001012c
    33fc:	0001014c 	.word	0x0001014c

00003400 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
    3400:	2100      	movs	r1, #0
{
    3402:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
    3406:	4608      	mov	r0, r1
    3408:	f7ff fe6a 	bl	30e0 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    340c:	4604      	mov	r4, r0
    340e:	b348      	cbz	r0, 3464 <log_process_thread_func+0x64>
    3410:	f240 6867 	movw	r8, #1639	; 0x667
    3414:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    3418:	f008 f9fc 	bl	b814 <z_impl_z_current_get>
	proc_tid = process_tid;
    341c:	4b1a      	ldr	r3, [pc, #104]	; (3488 <log_process_thread_func+0x88>)
    341e:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    3420:	b130      	cbz	r0, 3430 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    3422:	4b1a      	ldr	r3, [pc, #104]	; (348c <log_process_thread_func+0x8c>)
	    process_tid &&
    3424:	681b      	ldr	r3, [r3, #0]
    3426:	2b09      	cmp	r3, #9
    3428:	dd02      	ble.n	3430 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
    342a:	4819      	ldr	r0, [pc, #100]	; (3490 <log_process_thread_func+0x90>)
    342c:	f007 fea4 	bl	b178 <z_impl_k_sem_give>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    3430:	4f18      	ldr	r7, [pc, #96]	; (3494 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
    3432:	f8df a05c 	ldr.w	sl, [pc, #92]	; 3490 <log_process_thread_func+0x90>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    3436:	2500      	movs	r5, #0
		if (activate_mask) {
    3438:	b144      	cbz	r4, 344c <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
    343a:	4620      	mov	r0, r4
    343c:	f7ff fdea 	bl	3014 <activate_foreach_backend>
			if (!activate_mask) {
    3440:	4604      	mov	r4, r0
    3442:	b918      	cbnz	r0, 344c <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
    3444:	f04f 38ff 	mov.w	r8, #4294967295
    3448:	f04f 39ff 	mov.w	r9, #4294967295
    344c:	f7ff ff3c 	bl	32c8 <z_impl_log_process>
		if (log_process() == false) {
    3450:	4606      	mov	r6, r0
    3452:	b928      	cbnz	r0, 3460 <log_process_thread_func+0x60>
			if (processed_any) {
    3454:	b9b5      	cbnz	r5, 3484 <log_process_thread_func+0x84>
    3456:	4642      	mov	r2, r8
    3458:	464b      	mov	r3, r9
    345a:	4650      	mov	r0, sl
    345c:	f007 feb2 	bl	b1c4 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    3460:	4635      	mov	r5, r6
    3462:	e7e9      	b.n	3438 <log_process_thread_func+0x38>
    3464:	f04f 38ff 	mov.w	r8, #4294967295
    3468:	f04f 39ff 	mov.w	r9, #4294967295
    346c:	e7d4      	b.n	3418 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    346e:	682b      	ldr	r3, [r5, #0]
    3470:	699b      	ldr	r3, [r3, #24]
    3472:	b11b      	cbz	r3, 347c <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
    3474:	2200      	movs	r2, #0
    3476:	4611      	mov	r1, r2
    3478:	4628      	mov	r0, r5
    347a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    347c:	3510      	adds	r5, #16
    347e:	42bd      	cmp	r5, r7
    3480:	d3f5      	bcc.n	346e <log_process_thread_func+0x6e>
    3482:	e7e8      	b.n	3456 <log_process_thread_func+0x56>
    3484:	4d04      	ldr	r5, [pc, #16]	; (3498 <log_process_thread_func+0x98>)
    3486:	e7fa      	b.n	347e <log_process_thread_func+0x7e>
    3488:	20000ecc 	.word	0x20000ecc
    348c:	20000ed4 	.word	0x20000ed4
    3490:	20000330 	.word	0x20000330
    3494:	0001014c 	.word	0x0001014c
    3498:	0001012c 	.word	0x0001012c

0000349c <z_log_msg_post_finalize>:
{
    349c:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    349e:	4818      	ldr	r0, [pc, #96]	; (3500 <z_log_msg_post_finalize+0x64>)
    34a0:	f009 ff7e 	bl	d3a0 <atomic_inc>
	if (panic_mode) {
    34a4:	4b17      	ldr	r3, [pc, #92]	; (3504 <z_log_msg_post_finalize+0x68>)
    34a6:	781b      	ldrb	r3, [r3, #0]
    34a8:	b17b      	cbz	r3, 34ca <z_log_msg_post_finalize+0x2e>
    34aa:	f04f 0320 	mov.w	r3, #32
    34ae:	f3ef 8411 	mrs	r4, BASEPRI
    34b2:	f383 8812 	msr	BASEPRI_MAX, r3
    34b6:	f3bf 8f6f 	isb	sy
    34ba:	f7ff ff05 	bl	32c8 <z_impl_log_process>
	__asm__ volatile(
    34be:	f384 8811 	msr	BASEPRI, r4
    34c2:	f3bf 8f6f 	isb	sy
}
    34c6:	b002      	add	sp, #8
    34c8:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    34ca:	4b0f      	ldr	r3, [pc, #60]	; (3508 <z_log_msg_post_finalize+0x6c>)
    34cc:	681b      	ldr	r3, [r3, #0]
    34ce:	2b00      	cmp	r3, #0
    34d0:	d0f9      	beq.n	34c6 <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
    34d2:	b950      	cbnz	r0, 34ea <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
    34d4:	2200      	movs	r2, #0
    34d6:	2300      	movs	r3, #0
    34d8:	e9cd 2300 	strd	r2, r3, [sp]
    34dc:	480b      	ldr	r0, [pc, #44]	; (350c <z_log_msg_post_finalize+0x70>)
    34de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    34e2:	2300      	movs	r3, #0
    34e4:	f008 fbde 	bl	bca4 <z_impl_k_timer_start>
    34e8:	e7ed      	b.n	34c6 <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    34ea:	280a      	cmp	r0, #10
    34ec:	d1eb      	bne.n	34c6 <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
    34ee:	4807      	ldr	r0, [pc, #28]	; (350c <z_log_msg_post_finalize+0x70>)
    34f0:	f00c fad2 	bl	fa98 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    34f4:	4806      	ldr	r0, [pc, #24]	; (3510 <z_log_msg_post_finalize+0x74>)
}
    34f6:	b002      	add	sp, #8
    34f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    34fc:	f007 be3c 	b.w	b178 <z_impl_k_sem_give>
    3500:	20000ed4 	.word	0x20000ed4
    3504:	200036c0 	.word	0x200036c0
    3508:	20000ecc 	.word	0x20000ecc
    350c:	20000820 	.word	0x20000820
    3510:	20000330 	.word	0x20000330

00003514 <z_log_msg_commit>:
{
    3514:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    3516:	4b06      	ldr	r3, [pc, #24]	; (3530 <z_log_msg_commit+0x1c>)
    3518:	681b      	ldr	r3, [r3, #0]
{
    351a:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    351c:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    351e:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    3520:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    3522:	4804      	ldr	r0, [pc, #16]	; (3534 <z_log_msg_commit+0x20>)
    3524:	f009 fc06 	bl	cd34 <mpsc_pbuf_commit>
}
    3528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    352c:	f7ff bfb6 	b.w	349c <z_log_msg_post_finalize>
    3530:	20000034 	.word	0x20000034
    3534:	20000270 	.word	0x20000270

00003538 <log_mem_get_usage>:
{
    3538:	b508      	push	{r3, lr}
    353a:	460a      	mov	r2, r1
	mpsc_pbuf_get_utilization(&log_buffer, buf_size, usage);
    353c:	4601      	mov	r1, r0
    353e:	4802      	ldr	r0, [pc, #8]	; (3548 <log_mem_get_usage+0x10>)
    3540:	f009 fcb3 	bl	ceaa <mpsc_pbuf_get_utilization>
}
    3544:	2000      	movs	r0, #0
    3546:	bd08      	pop	{r3, pc}
    3548:	20000270 	.word	0x20000270

0000354c <log_mem_get_max_usage>:
{
    354c:	4601      	mov	r1, r0
	return mpsc_pbuf_get_max_utilization(&log_buffer, max);
    354e:	4801      	ldr	r0, [pc, #4]	; (3554 <log_mem_get_max_usage+0x8>)
    3550:	f009 bcb6 	b.w	cec0 <mpsc_pbuf_get_max_utilization>
    3554:	20000270 	.word	0x20000270

00003558 <log_src_cnt_get>:
	if (z_log_is_local_domain(domain_id)) {
		return log_const_source_id(__log_const_end);
	}

	return link_source_count(domain_id);
}
    3558:	4b02      	ldr	r3, [pc, #8]	; (3564 <log_src_cnt_get+0xc>)
    355a:	4803      	ldr	r0, [pc, #12]	; (3568 <log_src_cnt_get+0x10>)
    355c:	1ac0      	subs	r0, r0, r3
    355e:	08c0      	lsrs	r0, r0, #3
    3560:	4770      	bx	lr
    3562:	bf00      	nop
    3564:	0001005c 	.word	0x0001005c
    3568:	0001012c 	.word	0x0001012c

0000356c <log_source_name_get>:
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    356c:	4a04      	ldr	r2, [pc, #16]	; (3580 <log_source_name_get+0x14>)
    356e:	4b05      	ldr	r3, [pc, #20]	; (3584 <log_source_name_get+0x18>)
    3570:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    3572:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    3576:	bf34      	ite	cc
    3578:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    357c:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    357e:	4770      	bx	lr
    3580:	0001005c 	.word	0x0001005c
    3584:	0001012c 	.word	0x0001012c

00003588 <z_log_runtime_filters_init>:
    3588:	480b      	ldr	r0, [pc, #44]	; (35b8 <z_log_runtime_filters_init+0x30>)
    358a:	4b0c      	ldr	r3, [pc, #48]	; (35bc <z_log_runtime_filters_init+0x34>)

	return z_log_link_get_dynamic_filter(domain_id, source_id);
}

void z_log_runtime_filters_init(void)
{
    358c:	b530      	push	{r4, r5, lr}
    358e:	1a1b      	subs	r3, r3, r0
    3590:	4c0b      	ldr	r4, [pc, #44]	; (35c0 <z_log_runtime_filters_init+0x38>)
    3592:	08db      	lsrs	r3, r3, #3
	 *
	 * Each log source's aggregated runtime level is set to match its
	 * compile-time level. When backends are attached later on in
	 * log_init(), they'll be initialized to the same value.
	 */
	for (int i = 0; i < z_log_sources_count(); i++) {
    3594:	2100      	movs	r1, #0
			return __log_const_start[source_id].level;
    3596:	3004      	adds	r0, #4
	for (int i = 0; i < z_log_sources_count(); i++) {
    3598:	4299      	cmp	r1, r3
    359a:	d100      	bne.n	359e <z_log_runtime_filters_init+0x16>
		level = MAX(level, CONFIG_LOG_OVERRIDE_LEVEL);
		LOG_FILTER_SLOT_SET(filters,
				    LOG_FILTER_AGGR_SLOT_IDX,
				    level);
	}
}
    359c:	bd30      	pop	{r4, r5, pc}
		LOG_FILTER_SLOT_SET(filters,
    359e:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
    35a2:	6825      	ldr	r5, [r4, #0]
    35a4:	f002 0207 	and.w	r2, r2, #7
    35a8:	f025 0507 	bic.w	r5, r5, #7
    35ac:	432a      	orrs	r2, r5
    35ae:	f844 2b04 	str.w	r2, [r4], #4
	for (int i = 0; i < z_log_sources_count(); i++) {
    35b2:	3101      	adds	r1, #1
    35b4:	e7f0      	b.n	3598 <z_log_runtime_filters_init+0x10>
    35b6:	bf00      	nop
    35b8:	0001005c 	.word	0x0001005c
    35bc:	0001012c 	.word	0x0001012c
    35c0:	200002b4 	.word	0x200002b4

000035c4 <log_source_id_get>:

int log_source_id_get(const char *name)
{
    35c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35c6:	4f0b      	ldr	r7, [pc, #44]	; (35f4 <log_source_id_get+0x30>)
    35c8:	4d0b      	ldr	r5, [pc, #44]	; (35f8 <log_source_id_get+0x34>)
    35ca:	1bed      	subs	r5, r5, r7
    35cc:	4606      	mov	r6, r0
    35ce:	08ed      	lsrs	r5, r5, #3
	for (int i = 0; i < log_src_cnt_get(Z_LOG_LOCAL_DOMAIN_ID); i++) {
    35d0:	2400      	movs	r4, #0
    35d2:	42ac      	cmp	r4, r5
    35d4:	d102      	bne.n	35dc <log_source_id_get+0x18>

		if ((sname != NULL) && (strcmp(sname, name) == 0)) {
			return i;
		}
	}
	return -1;
    35d6:	f04f 34ff 	mov.w	r4, #4294967295
    35da:	e009      	b.n	35f0 <log_source_id_get+0x2c>
			return __log_const_start[source_id].name;
    35dc:	f857 0034 	ldr.w	r0, [r7, r4, lsl #3]
		if ((sname != NULL) && (strcmp(sname, name) == 0)) {
    35e0:	b908      	cbnz	r0, 35e6 <log_source_id_get+0x22>
	for (int i = 0; i < log_src_cnt_get(Z_LOG_LOCAL_DOMAIN_ID); i++) {
    35e2:	3401      	adds	r4, #1
    35e4:	e7f5      	b.n	35d2 <log_source_id_get+0xe>
		if ((sname != NULL) && (strcmp(sname, name) == 0)) {
    35e6:	4631      	mov	r1, r6
    35e8:	f00b fb12 	bl	ec10 <strcmp>
    35ec:	2800      	cmp	r0, #0
    35ee:	d1f8      	bne.n	35e2 <log_source_id_get+0x1e>
}
    35f0:	4620      	mov	r0, r4
    35f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    35f4:	0001005c 	.word	0x0001005c
    35f8:	0001012c 	.word	0x0001012c

000035fc <z_impl_log_filter_set>:
}

uint32_t z_impl_log_filter_set(struct log_backend const *const backend,
			       uint32_t domain_id, int16_t source_id,
			       uint32_t level)
{
    35fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3600:	4688      	mov	r8, r1
    3602:	4615      	mov	r5, r2
    3604:	461e      	mov	r6, r3
	}

	__ASSERT_NO_MSG(source_id < log_src_cnt_get(domain_id));


	if (backend == NULL) {
    3606:	b998      	cbnz	r0, 3630 <z_impl_log_filter_set+0x34>
		uint32_t max = 0U;

		STRUCT_SECTION_FOREACH(log_backend, iter_backend) {
    3608:	4f22      	ldr	r7, [pc, #136]	; (3694 <z_impl_log_filter_set+0x98>)
    360a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 3698 <z_impl_log_filter_set+0x9c>
		uint32_t max = 0U;
    360e:	4604      	mov	r4, r0
    3610:	e009      	b.n	3626 <z_impl_log_filter_set+0x2a>
		union { uintptr_t x; uint32_t val; } parm3 = { .val = level };
		return (uint32_t) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_LOG_FILTER_SET);
	}
#endif
	compiler_barrier();
	return z_impl_log_filter_set(backend, domain_id, source_id, level);
    3612:	4638      	mov	r0, r7
    3614:	4633      	mov	r3, r6
    3616:	462a      	mov	r2, r5
    3618:	4641      	mov	r1, r8
    361a:	f7ff ffef 	bl	35fc <z_impl_log_filter_set>
			uint32_t current = log_filter_set(iter_backend,
						 domain_id, source_id, level);

			max = MAX(current, max);
    361e:	4284      	cmp	r4, r0
    3620:	bf38      	it	cc
    3622:	4604      	movcc	r4, r0
		STRUCT_SECTION_FOREACH(log_backend, iter_backend) {
    3624:	3710      	adds	r7, #16
    3626:	454f      	cmp	r7, r9
    3628:	d3f3      	bcc.n	3612 <z_impl_log_filter_set+0x16>
	level = MIN(level, MAX(log_filter_get(backend, domain_id, source_id, false),
			       CONFIG_LOG_OVERRIDE_LEVEL));
	set_runtime_filter(log_backend_id_get(backend), domain_id, source_id, level);

	return level;
}
    362a:	4620      	mov	r0, r4
    362c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3630:	4b1a      	ldr	r3, [pc, #104]	; (369c <z_impl_log_filter_set+0xa0>)
    3632:	4a1b      	ldr	r2, [pc, #108]	; (36a0 <z_impl_log_filter_set+0xa4>)
    3634:	1ad2      	subs	r2, r2, r3
		if (source_id < log_src_cnt_get(domain_id)) {
    3636:	ebb5 0fd2 	cmp.w	r5, r2, lsr #3
    363a:	d228      	bcs.n	368e <z_impl_log_filter_set+0x92>
			return __log_const_start[source_id].level;
    363c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3

		return LOG_FILTER_SLOT_GET(get_dynamic_filter(domain_id, source_id),
					   log_backend_id_get(backend));
	}

	return log_compiled_level_get(domain_id, source_id);
    3640:	791c      	ldrb	r4, [r3, #4]
    3642:	42b4      	cmp	r4, r6
    3644:	bf28      	it	cs
    3646:	4634      	movcs	r4, r6
	return backend->cb->id;
    3648:	6843      	ldr	r3, [r0, #4]
	prev_max = LOG_FILTER_SLOT_GET(filters, LOG_FILTER_AGGR_SLOT_IDX);
    364a:	4e16      	ldr	r6, [pc, #88]	; (36a4 <z_impl_log_filter_set+0xa8>)
	LOG_FILTER_SLOT_SET(filters, backend_id, level);
    364c:	791a      	ldrb	r2, [r3, #4]
    364e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    3652:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3656:	2107      	movs	r1, #7
    3658:	4091      	lsls	r1, r2
    365a:	ea23 0301 	bic.w	r3, r3, r1
    365e:	f004 0107 	and.w	r1, r4, #7
    3662:	fa01 f202 	lsl.w	r2, r1, r2
    3666:	4313      	orrs	r3, r2
	uint32_t max_filter = LOG_LEVEL_NONE;
    3668:	2100      	movs	r1, #0
	LOG_FILTER_SLOT_SET(filters, backend_id, level);
    366a:	2203      	movs	r2, #3
		uint32_t tmp_filter = LOG_FILTER_SLOT_GET(&filters, i);
    366c:	fa23 f002 	lsr.w	r0, r3, r2
    3670:	f000 0007 	and.w	r0, r0, #7
    3674:	4281      	cmp	r1, r0
	for (i = first_slot; i < LOG_FILTERS_NUM_OF_SLOTS; i++) {
    3676:	f102 0203 	add.w	r2, r2, #3
    367a:	bf38      	it	cc
    367c:	4601      	movcc	r1, r0
    367e:	2a1e      	cmp	r2, #30
    3680:	d1f4      	bne.n	366c <z_impl_log_filter_set+0x70>
	LOG_FILTER_SLOT_SET(filters, LOG_FILTER_AGGR_SLOT_IDX, new_max);
    3682:	f023 0307 	bic.w	r3, r3, #7
    3686:	430b      	orrs	r3, r1
    3688:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
}
    368c:	e7cd      	b.n	362a <z_impl_log_filter_set+0x2e>
	level = MIN(level, MAX(log_filter_get(backend, domain_id, source_id, false),
    368e:	2400      	movs	r4, #0
    3690:	e7da      	b.n	3648 <z_impl_log_filter_set+0x4c>
    3692:	bf00      	nop
    3694:	0001012c 	.word	0x0001012c
    3698:	0001014c 	.word	0x0001014c
    369c:	0001005c 	.word	0x0001005c
    36a0:	0001012c 	.word	0x0001012c
    36a4:	200002b4 	.word	0x200002b4

000036a8 <backend_filter_set>:
{
    36a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36aa:	4d09      	ldr	r5, [pc, #36]	; (36d0 <backend_filter_set+0x28>)
    36ac:	4b09      	ldr	r3, [pc, #36]	; (36d4 <backend_filter_set+0x2c>)
    36ae:	1aed      	subs	r5, r5, r3
    36b0:	4606      	mov	r6, r0
    36b2:	460f      	mov	r7, r1
    36b4:	08ed      	lsrs	r5, r5, #3
	for (uint16_t s = 0; s < log_src_cnt_get(0); s++) {
    36b6:	2400      	movs	r4, #0
    36b8:	42ac      	cmp	r4, r5
    36ba:	d300      	bcc.n	36be <backend_filter_set+0x16>
}
    36bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36be:	2100      	movs	r1, #0
    36c0:	b222      	sxth	r2, r4
    36c2:	463b      	mov	r3, r7
    36c4:	4630      	mov	r0, r6
	for (uint16_t s = 0; s < log_src_cnt_get(0); s++) {
    36c6:	3401      	adds	r4, #1
    36c8:	f7ff ff98 	bl	35fc <z_impl_log_filter_set>
    36cc:	b2a4      	uxth	r4, r4
    36ce:	e7f3      	b.n	36b8 <backend_filter_set+0x10>
    36d0:	0001012c 	.word	0x0001012c
    36d4:	0001005c 	.word	0x0001005c

000036d8 <log_backend_enable>:
{
    36d8:	b538      	push	{r3, r4, r5, lr}
	id += backend - log_backend_get(0);
    36da:	4b0b      	ldr	r3, [pc, #44]	; (3708 <log_backend_enable+0x30>)
    36dc:	1ac3      	subs	r3, r0, r3
{
    36de:	460d      	mov	r5, r1
	id += backend - log_backend_get(0);
    36e0:	111b      	asrs	r3, r3, #4
{
    36e2:	4611      	mov	r1, r2
	backend->cb->id = id;
    36e4:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    36e6:	3301      	adds	r3, #1
	log_backend_id_set(backend, id);
    36e8:	7113      	strb	r3, [r2, #4]
	backend->cb->level = level;
    36ea:	6843      	ldr	r3, [r0, #4]
{
    36ec:	4604      	mov	r4, r0
	backend->cb->level = level;
    36ee:	7199      	strb	r1, [r3, #6]
	backend_filter_set(backend, level);
    36f0:	f7ff ffda 	bl	36a8 <backend_filter_set>
	backend->cb->ctx = ctx;
    36f4:	6863      	ldr	r3, [r4, #4]
    36f6:	601d      	str	r5, [r3, #0]
	backend->cb->active = true;
    36f8:	6863      	ldr	r3, [r4, #4]
    36fa:	2201      	movs	r2, #1
    36fc:	715a      	strb	r2, [r3, #5]
}
    36fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_log_notify_backend_enabled();
    3702:	f7ff bd4b 	b.w	319c <z_log_notify_backend_enabled>
    3706:	bf00      	nop
    3708:	0001012c 	.word	0x0001012c

0000370c <log_filter_get>:
{
    370c:	4601      	mov	r1, r0
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) && runtime) {
    370e:	4618      	mov	r0, r3
    3710:	b163      	cbz	r3, 372c <log_filter_get+0x20>
		if (source_id < 0) {
    3712:	2a00      	cmp	r2, #0
    3714:	db14      	blt.n	3740 <log_filter_get+0x34>
	return backend->cb->id;
    3716:	684b      	ldr	r3, [r1, #4]
		return LOG_FILTER_SLOT_GET(get_dynamic_filter(domain_id, source_id),
    3718:	490a      	ldr	r1, [pc, #40]	; (3744 <log_filter_get+0x38>)
    371a:	791b      	ldrb	r3, [r3, #4]
    371c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    3720:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3724:	40d8      	lsrs	r0, r3
    3726:	f000 0007 	and.w	r0, r0, #7
    372a:	4770      	bx	lr
    372c:	4b06      	ldr	r3, [pc, #24]	; (3748 <log_filter_get+0x3c>)
    372e:	4907      	ldr	r1, [pc, #28]	; (374c <log_filter_get+0x40>)
    3730:	1ac9      	subs	r1, r1, r3
		if (source_id < log_src_cnt_get(domain_id)) {
    3732:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
    3736:	d204      	bcs.n	3742 <log_filter_get+0x36>
			return __log_const_start[source_id].level;
    3738:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    373c:	7918      	ldrb	r0, [r3, #4]
    373e:	4770      	bx	lr
			return LOG_LEVEL_DBG;
    3740:	2004      	movs	r0, #4
}
    3742:	4770      	bx	lr
    3744:	200002b4 	.word	0x200002b4
    3748:	0001005c 	.word	0x0001005c
    374c:	0001012c 	.word	0x0001012c

00003750 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    3750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3754:	b08f      	sub	sp, #60	; 0x3c
    3756:	af04      	add	r7, sp, #16
    3758:	f3c1 284a 	ubfx	r8, r1, #9, #11
    375c:	60b8      	str	r0, [r7, #8]
    375e:	460d      	mov	r5, r1
    3760:	4691      	mov	r9, r2
    3762:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
    3764:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    3766:	f1b8 0f00 	cmp.w	r8, #0
    376a:	d067      	beq.n	383c <z_impl_z_log_msg_static_create+0xec>
	struct z_cbprintf_buf_desc buf_desc = {
    376c:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
    376e:	f107 0314 	add.w	r3, r7, #20
    3772:	f04f 0b04 	mov.w	fp, #4
    3776:	f04f 0a0a 	mov.w	sl, #10
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    377a:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
    377e:	e9c7 6607 	strd	r6, r6, [r7, #28]
    3782:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
    3784:	9301      	str	r3, [sp, #4]
    3786:	f8cd b008 	str.w	fp, [sp, #8]
    378a:	f8cd a000 	str.w	sl, [sp]
    378e:	f107 031c 	add.w	r3, r7, #28
    3792:	68f9      	ldr	r1, [r7, #12]
    3794:	4632      	mov	r2, r6
    3796:	4648      	mov	r0, r9
    3798:	f7fd ff06 	bl	15a8 <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
    379c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    37a0:	4603      	mov	r3, r0
    37a2:	d320      	bcc.n	37e6 <z_impl_z_log_msg_static_create+0x96>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
    37a4:	482a      	ldr	r0, [pc, #168]	; (3850 <z_impl_z_log_msg_static_create+0x100>)
    37a6:	6803      	ldr	r3, [r0, #0]
    37a8:	f013 0f06 	tst.w	r3, #6
    37ac:	d017      	beq.n	37de <z_impl_z_log_msg_static_create+0x8e>
    37ae:	466c      	mov	r4, sp
    37b0:	b08a      	sub	sp, #40	; 0x28
    37b2:	f8d9 1004 	ldr.w	r1, [r9, #4]
    37b6:	ab04      	add	r3, sp, #16
    37b8:	4d26      	ldr	r5, [pc, #152]	; (3854 <z_impl_z_log_msg_static_create+0x104>)
    37ba:	e9c3 5105 	strd	r5, r1, [r3, #20]
    37be:	f240 71ff 	movw	r1, #2047	; 0x7ff
    37c2:	61d9      	str	r1, [r3, #28]
    37c4:	461a      	mov	r2, r3
    37c6:	f44f 7100 	mov.w	r1, #512	; 0x200
    37ca:	8419      	strh	r1, [r3, #32]
    37cc:	4b22      	ldr	r3, [pc, #136]	; (3858 <z_impl_z_log_msg_static_create+0x108>)
    37ce:	f842 3f10 	str.w	r3, [r2, #16]!
    37d2:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    37d6:	4633      	mov	r3, r6
    37d8:	f7ff ffba 	bl	3750 <z_impl_z_log_msg_static_create>
    37dc:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
    37de:	372c      	adds	r7, #44	; 0x2c
    37e0:	46bd      	mov	sp, r7
    37e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
    37e6:	f3c0 080a 	ubfx	r8, r0, #0, #11
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    37ea:	f104 0017 	add.w	r0, r4, #23
    37ee:	4418      	add	r0, r3
    37f0:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    37f4:	0880      	lsrs	r0, r0, #2
    37f6:	603b      	str	r3, [r7, #0]
    37f8:	f7ff fd4a 	bl	3290 <z_log_msg_alloc>
    37fc:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
    3800:	4604      	mov	r4, r0
    3802:	b190      	cbz	r0, 382a <z_impl_z_log_msg_static_create+0xda>
	struct z_cbprintf_buf_desc buf_desc = {
    3804:	683b      	ldr	r3, [r7, #0]
	return cbprintf_package_convert(in_packaged, in_len,
    3806:	4a15      	ldr	r2, [pc, #84]	; (385c <z_impl_z_log_msg_static_create+0x10c>)
	struct z_cbprintf_buf_desc buf_desc = {
    3808:	e9c7 3608 	strd	r3, r6, [r7, #32]
						    msg->data, out_desc.package_len,
    380c:	f100 0110 	add.w	r1, r0, #16
	return cbprintf_package_convert(in_packaged, in_len,
    3810:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
    3814:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
    3816:	e9cd a300 	strd	sl, r3, [sp]
    381a:	f8cd b008 	str.w	fp, [sp, #8]
    381e:	68f9      	ldr	r1, [r7, #12]
    3820:	f107 031c 	add.w	r3, r7, #28
    3824:	4648      	mov	r0, r9
    3826:	f7fd febf 	bl	15a8 <cbprintf_package_convert>
	z_log_msg_finalize(msg, source, out_desc, data);
    382a:	f368 2553 	bfi	r5, r8, #9, #11
    382e:	687b      	ldr	r3, [r7, #4]
    3830:	68b9      	ldr	r1, [r7, #8]
    3832:	462a      	mov	r2, r5
    3834:	4620      	mov	r0, r4
    3836:	f009 fdf5 	bl	d424 <z_log_msg_finalize>
    383a:	e7d0      	b.n	37de <z_impl_z_log_msg_static_create+0x8e>
    383c:	f104 0017 	add.w	r0, r4, #23
    3840:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    3844:	0880      	lsrs	r0, r0, #2
    3846:	f7ff fd23 	bl	3290 <z_log_msg_alloc>
    384a:	4604      	mov	r4, r0
    384c:	e7ed      	b.n	382a <z_impl_z_log_msg_static_create+0xda>
    384e:	bf00      	nop
    3850:	200002e8 	.word	0x200002e8
    3854:	00011284 	.word	0x00011284
    3858:	01000004 	.word	0x01000004
    385c:	0000d3f9 	.word	0x0000d3f9

00003860 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    3860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3864:	b087      	sub	sp, #28
    3866:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
    386a:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
    386e:	4604      	mov	r4, r0
    3870:	460f      	mov	r7, r1
    3872:	4693      	mov	fp, r2
    3874:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
    3876:	b3a6      	cbz	r6, 38e2 <z_impl_z_log_msg_runtime_vcreate+0x82>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    3878:	2110      	movs	r1, #16
    387a:	f8cd 9000 	str.w	r9, [sp]
    387e:	4633      	mov	r3, r6
    3880:	4652      	mov	r2, sl
    3882:	2000      	movs	r0, #0
		va_copy(ap2, ap);
    3884:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    3888:	f7fd fcb8 	bl	11fc <cbvprintf_package>
    388c:	4601      	mov	r1, r0
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    388e:	f105 0017 	add.w	r0, r5, #23
    3892:	4408      	add	r0, r1
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    3894:	4b14      	ldr	r3, [pc, #80]	; (38e8 <z_impl_z_log_msg_runtime_vcreate+0x88>)
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    3896:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
    3898:	f004 0407 	and.w	r4, r4, #7
    389c:	f00b 0b07 	and.w	fp, fp, #7
    38a0:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    38a2:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
    38a6:	ea03 2341 	and.w	r3, r3, r1, lsl #9
    38aa:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
    38ae:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
    38b0:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
    38b2:	f7ff fced 	bl	3290 <z_log_msg_alloc>
	struct log_msg_desc desc =
    38b6:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    38ba:	4605      	mov	r5, r0
    38bc:	b140      	cbz	r0, 38d0 <z_impl_z_log_msg_runtime_vcreate+0x70>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    38be:	b13e      	cbz	r6, 38d0 <z_impl_z_log_msg_runtime_vcreate+0x70>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    38c0:	9903      	ldr	r1, [sp, #12]
    38c2:	f8cd 9000 	str.w	r9, [sp]
    38c6:	4633      	mov	r3, r6
    38c8:	4652      	mov	r2, sl
    38ca:	3010      	adds	r0, #16
    38cc:	f7fd fc96 	bl	11fc <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    38d0:	4643      	mov	r3, r8
    38d2:	4622      	mov	r2, r4
    38d4:	4639      	mov	r1, r7
    38d6:	4628      	mov	r0, r5
	}
}
    38d8:	b007      	add	sp, #28
    38da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
    38de:	f009 bda1 	b.w	d424 <z_log_msg_finalize>
		plen = 0;
    38e2:	4631      	mov	r1, r6
    38e4:	e7d3      	b.n	388e <z_impl_z_log_msg_runtime_vcreate+0x2e>
    38e6:	bf00      	nop
    38e8:	000ffe00 	.word	0x000ffe00

000038ec <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    38ec:	b40e      	push	{r1, r2, r3}
    38ee:	b503      	push	{r0, r1, lr}
    38f0:	ab03      	add	r3, sp, #12
    38f2:	4601      	mov	r1, r0
    38f4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    38f8:	4804      	ldr	r0, [pc, #16]	; (390c <print_formatted+0x20>)
	va_start(args, fmt);
    38fa:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    38fc:	f009 fdb8 	bl	d470 <cbvprintf>
	va_end(args);

	return length;
}
    3900:	b002      	add	sp, #8
    3902:	f85d eb04 	ldr.w	lr, [sp], #4
    3906:	b003      	add	sp, #12
    3908:	4770      	bx	lr
    390a:	bf00      	nop
    390c:	0000d499 	.word	0x0000d499

00003910 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    3910:	06ca      	lsls	r2, r1, #27
    3912:	d405      	bmi.n	3920 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    3914:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    3916:	bf4c      	ite	mi
    3918:	4902      	ldrmi	r1, [pc, #8]	; (3924 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    391a:	4903      	ldrpl	r1, [pc, #12]	; (3928 <newline_print+0x18>)
    391c:	f7ff bfe6 	b.w	38ec <print_formatted>
	}
}
    3920:	4770      	bx	lr
    3922:	bf00      	nop
    3924:	0001188e 	.word	0x0001188e
    3928:	00011383 	.word	0x00011383

0000392c <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    392c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3930:	b089      	sub	sp, #36	; 0x24
    3932:	469b      	mov	fp, r3
    3934:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    3938:	9304      	str	r3, [sp, #16]
    393a:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
    393e:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    3940:	9b04      	ldr	r3, [sp, #16]
{
    3942:	9206      	str	r2, [sp, #24]
    3944:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
    3948:	4604      	mov	r4, r0
    394a:	460d      	mov	r5, r1
	if (!raw_string) {
    394c:	2b00      	cmp	r3, #0
    394e:	f000 8087 	beq.w	3a60 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    3952:	f006 0308 	and.w	r3, r6, #8
    3956:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    3958:	f009 fd40 	bl	d3dc <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    395c:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
    3960:	4602      	mov	r2, r0
    3962:	2800      	cmp	r0, #0
    3964:	d04b      	beq.n	39fe <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
    3966:	4986      	ldr	r1, [pc, #536]	; (3b80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe8>)
    3968:	4620      	mov	r0, r4
    396a:	f7ff ffbf 	bl	38ec <print_formatted>
    396e:	4680      	mov	r8, r0
	if (stamp) {
    3970:	f1ba 0f00 	cmp.w	sl, #0
    3974:	d008      	beq.n	3988 <log_output_process+0x5c>
	if (!format) {
    3976:	f016 0f44 	tst.w	r6, #68	; 0x44
    397a:	d142      	bne.n	3a02 <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    397c:	4981      	ldr	r1, [pc, #516]	; (3b84 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xec>)
    397e:	462a      	mov	r2, r5
    3980:	4620      	mov	r0, r4
    3982:	f7ff ffb3 	bl	38ec <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    3986:	4480      	add	r8, r0
	if (color) {
    3988:	f006 0301 	and.w	r3, r6, #1
    398c:	b15b      	cbz	r3, 39a6 <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
    398e:	4b7e      	ldr	r3, [pc, #504]	; (3b88 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf0>)
    3990:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    3992:	497e      	ldr	r1, [pc, #504]	; (3b8c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf4>)
		const char *log_color = start && (colors[level] != NULL) ?
    3994:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    3998:	4b7d      	ldr	r3, [pc, #500]	; (3b90 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf8>)
    399a:	4620      	mov	r0, r4
    399c:	2a00      	cmp	r2, #0
    399e:	bf08      	it	eq
    39a0:	461a      	moveq	r2, r3
    39a2:	f7ff ffa3 	bl	38ec <print_formatted>
	if (level_on) {
    39a6:	f006 0308 	and.w	r3, r6, #8
    39aa:	2b00      	cmp	r3, #0
    39ac:	d055      	beq.n	3a5a <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
    39ae:	4b79      	ldr	r3, [pc, #484]	; (3b94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xfc>)
    39b0:	9a04      	ldr	r2, [sp, #16]
    39b2:	4979      	ldr	r1, [pc, #484]	; (3b98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x100>)
    39b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    39b8:	4620      	mov	r0, r4
    39ba:	f7ff ff97 	bl	38ec <print_formatted>
    39be:	4605      	mov	r5, r0
	if (domain) {
    39c0:	9b06      	ldr	r3, [sp, #24]
    39c2:	b12b      	cbz	r3, 39d0 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
    39c4:	4975      	ldr	r1, [pc, #468]	; (3b9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x104>)
    39c6:	461a      	mov	r2, r3
    39c8:	4620      	mov	r0, r4
    39ca:	f7ff ff8f 	bl	38ec <print_formatted>
    39ce:	4405      	add	r5, r0
	if (source) {
    39d0:	f1bb 0f00 	cmp.w	fp, #0
    39d4:	d005      	beq.n	39e2 <log_output_process+0xb6>
		total += print_formatted(output,
    39d6:	4972      	ldr	r1, [pc, #456]	; (3ba0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x108>)
    39d8:	465a      	mov	r2, fp
    39da:	4620      	mov	r0, r4
    39dc:	f7ff ff86 	bl	38ec <print_formatted>
    39e0:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    39e2:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    39e4:	f1b9 0f00 	cmp.w	r9, #0
    39e8:	d149      	bne.n	3a7e <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    39ea:	2f00      	cmp	r7, #0
    39ec:	d14f      	bne.n	3a8e <log_output_process+0x162>
	if (color) {
    39ee:	07f3      	lsls	r3, r6, #31
    39f0:	f100 80c0 	bmi.w	3b74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xdc>
	newline_print(output, flags);
    39f4:	4631      	mov	r1, r6
    39f6:	4620      	mov	r0, r4
    39f8:	f7ff ff8a 	bl	3910 <newline_print>
}
    39fc:	e0b4      	b.n	3b68 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd0>
	uint32_t length = 0U;
    39fe:	4680      	mov	r8, r0
    3a00:	e7b6      	b.n	3970 <log_output_process+0x44>
	} else if (freq != 0U) {
    3a02:	4b68      	ldr	r3, [pc, #416]	; (3ba4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10c>)
    3a04:	6818      	ldr	r0, [r3, #0]
    3a06:	2800      	cmp	r0, #0
    3a08:	d0bd      	beq.n	3986 <log_output_process+0x5a>
		timestamp /= timestamp_div;
    3a0a:	4b67      	ldr	r3, [pc, #412]	; (3ba8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x110>)
		ms = (remainder * 1000U) / freq;
    3a0c:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    3a10:	681b      	ldr	r3, [r3, #0]
    3a12:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    3a16:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    3a1a:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    3a1e:	fb00 5513 	mls	r5, r0, r3, r5
    3a22:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
    3a26:	fb0e f505 	mul.w	r5, lr, r5
    3a2a:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
    3a2e:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3a30:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
    3a34:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3a38:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
    3a3c:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3a40:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
    3a44:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3a46:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    3a4a:	4958      	ldr	r1, [pc, #352]	; (3bac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x114>)
    3a4c:	e9cd c501 	strd	ip, r5, [sp, #4]
    3a50:	4652      	mov	r2, sl
    3a52:	4620      	mov	r0, r4
    3a54:	f7ff ff4a 	bl	38ec <print_formatted>
    3a58:	e795      	b.n	3986 <log_output_process+0x5a>
	int total = 0;
    3a5a:	f006 0508 	and.w	r5, r6, #8
    3a5e:	e7af      	b.n	39c0 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    3a60:	f1bb 0f01 	cmp.w	fp, #1
    3a64:	d106      	bne.n	3a74 <log_output_process+0x148>
	if (package) {
    3a66:	f1b9 0f00 	cmp.w	r9, #0
    3a6a:	d164      	bne.n	3b36 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9e>
	if (data_len) {
    3a6c:	2f00      	cmp	r7, #0
    3a6e:	d07b      	beq.n	3b68 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd0>
		prefix_offset = 0;
    3a70:	2500      	movs	r5, #0
    3a72:	e00c      	b.n	3a8e <log_output_process+0x162>
	if (package) {
    3a74:	f1b9 0f00 	cmp.w	r9, #0
    3a78:	d0f8      	beq.n	3a6c <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    3a7a:	484d      	ldr	r0, [pc, #308]	; (3bb0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x118>)
    3a7c:	e05c      	b.n	3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>
		cb = out_func;
    3a7e:	484d      	ldr	r0, [pc, #308]	; (3bb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x11c>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    3a80:	494d      	ldr	r1, [pc, #308]	; (3bb8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x120>)
    3a82:	464b      	mov	r3, r9
    3a84:	4622      	mov	r2, r4
    3a86:	f008 fd11 	bl	c4ac <cbpprintf_external>
	if (data_len) {
    3a8a:	2f00      	cmp	r7, #0
    3a8c:	d068      	beq.n	3b60 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc8>
		print_formatted(output, " ");
    3a8e:	f8df 912c 	ldr.w	r9, [pc, #300]	; 3bbc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x124>
			print_formatted(output, "%02x ", data[i]);
    3a92:	f8df a12c 	ldr.w	sl, [pc, #300]	; 3bc0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x128>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    3a96:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    3a98:	4631      	mov	r1, r6
    3a9a:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    3a9c:	46b8      	mov	r8, r7
    3a9e:	bf28      	it	cs
    3aa0:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
    3aa4:	f7ff ff34 	bl	3910 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    3aa8:	f04f 0b00 	mov.w	fp, #0
    3aac:	455d      	cmp	r5, fp
    3aae:	dc45      	bgt.n	3b3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa4>
			print_formatted(output, "%02x ", data[i]);
    3ab0:	9b05      	ldr	r3, [sp, #20]
    3ab2:	4651      	mov	r1, sl
    3ab4:	781a      	ldrb	r2, [r3, #0]
    3ab6:	4620      	mov	r0, r4
    3ab8:	f7ff ff18 	bl	38ec <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3abc:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
    3ac0:	f01b 0f07 	tst.w	fp, #7
    3ac4:	d103      	bne.n	3ace <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x36>
			print_formatted(output, " ");
    3ac6:	4649      	mov	r1, r9
    3ac8:	4620      	mov	r0, r4
    3aca:	f7ff ff0f 	bl	38ec <print_formatted>
		if (i < length) {
    3ace:	45d8      	cmp	r8, fp
    3ad0:	d93b      	bls.n	3b4a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb2>
			print_formatted(output, "%02x ", data[i]);
    3ad2:	9b05      	ldr	r3, [sp, #20]
    3ad4:	4651      	mov	r1, sl
    3ad6:	f813 200b 	ldrb.w	r2, [r3, fp]
    3ada:	4620      	mov	r0, r4
    3adc:	f7ff ff06 	bl	38ec <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3ae0:	f10b 0b01 	add.w	fp, fp, #1
    3ae4:	f1bb 0f10 	cmp.w	fp, #16
    3ae8:	d1ea      	bne.n	3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>
	print_formatted(output, "|");
    3aea:	4936      	ldr	r1, [pc, #216]	; (3bc4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12c>)
    3aec:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3aee:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
    3af2:	f7ff fefb 	bl	38ec <print_formatted>
		if (i < length) {
    3af6:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
    3af8:	9b05      	ldr	r3, [sp, #20]
    3afa:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
    3afc:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
    3b00:	295f      	cmp	r1, #95	; 0x5f
    3b02:	bf28      	it	cs
    3b04:	222e      	movcs	r2, #46	; 0x2e
    3b06:	4930      	ldr	r1, [pc, #192]	; (3bc8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x130>)
    3b08:	4620      	mov	r0, r4
    3b0a:	f7ff feef 	bl	38ec <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3b0e:	f10b 0b01 	add.w	fp, fp, #1
    3b12:	f1bb 0f10 	cmp.w	fp, #16
    3b16:	d01d      	beq.n	3b54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xbc>
		if (i > 0 && !(i % 8)) {
    3b18:	f01b 0f07 	tst.w	fp, #7
    3b1c:	d103      	bne.n	3b26 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8e>
			print_formatted(output, " ");
    3b1e:	4649      	mov	r1, r9
    3b20:	4620      	mov	r0, r4
    3b22:	f7ff fee3 	bl	38ec <print_formatted>
		if (i < length) {
    3b26:	45d8      	cmp	r8, fp
    3b28:	465a      	mov	r2, fp
    3b2a:	d8e5      	bhi.n	3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>
			print_formatted(output, " ");
    3b2c:	4649      	mov	r1, r9
    3b2e:	4620      	mov	r0, r4
    3b30:	f7ff fedc 	bl	38ec <print_formatted>
    3b34:	e7eb      	b.n	3b0e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x76>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    3b36:	481f      	ldr	r0, [pc, #124]	; (3bb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x11c>)
		prefix_offset = 0;
    3b38:	9d04      	ldr	r5, [sp, #16]
    3b3a:	e7a1      	b.n	3a80 <log_output_process+0x154>
		print_formatted(output, " ");
    3b3c:	4649      	mov	r1, r9
    3b3e:	4620      	mov	r0, r4
    3b40:	f7ff fed4 	bl	38ec <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    3b44:	f10b 0b01 	add.w	fp, fp, #1
    3b48:	e7b0      	b.n	3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>
			print_formatted(output, "   ");
    3b4a:	4920      	ldr	r1, [pc, #128]	; (3bcc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x134>)
    3b4c:	4620      	mov	r0, r4
    3b4e:	f7ff fecd 	bl	38ec <print_formatted>
    3b52:	e7c5      	b.n	3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>
		data += length;
    3b54:	9b05      	ldr	r3, [sp, #20]
	} while (len);
    3b56:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
    3b5a:	4443      	add	r3, r8
    3b5c:	9305      	str	r3, [sp, #20]
	} while (len);
    3b5e:	d19a      	bne.n	3a96 <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    3b60:	9b04      	ldr	r3, [sp, #16]
    3b62:	2b00      	cmp	r3, #0
    3b64:	f47f af43 	bne.w	39ee <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    3b68:	4620      	mov	r0, r4
}
    3b6a:	b009      	add	sp, #36	; 0x24
    3b6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    3b70:	f009 bc85 	b.w	d47e <log_output_flush>
		print_formatted(output, "%s", log_color);
    3b74:	4a06      	ldr	r2, [pc, #24]	; (3b90 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf8>)
    3b76:	4905      	ldr	r1, [pc, #20]	; (3b8c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf4>)
    3b78:	4620      	mov	r0, r4
    3b7a:	f7ff feb7 	bl	38ec <print_formatted>
}
    3b7e:	e739      	b.n	39f4 <log_output_process+0xc8>
    3b80:	000112c8 	.word	0x000112c8
    3b84:	000112cc 	.word	0x000112cc
    3b88:	00010338 	.word	0x00010338
    3b8c:	00011ae4 	.word	0x00011ae4
    3b90:	000112c3 	.word	0x000112c3
    3b94:	0001034c 	.word	0x0001034c
    3b98:	000112f1 	.word	0x000112f1
    3b9c:	000112f7 	.word	0x000112f7
    3ba0:	000112fb 	.word	0x000112fb
    3ba4:	20000ee0 	.word	0x20000ee0
    3ba8:	20000edc 	.word	0x20000edc
    3bac:	000112d5 	.word	0x000112d5
    3bb0:	0000d4cf 	.word	0x0000d4cf
    3bb4:	0000d499 	.word	0x0000d499
    3bb8:	0000d471 	.word	0x0000d471
    3bbc:	00011308 	.word	0x00011308
    3bc0:	00011300 	.word	0x00011300
    3bc4:	0001130a 	.word	0x0001130a
    3bc8:	00011039 	.word	0x00011039
    3bcc:	00011306 	.word	0x00011306

00003bd0 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    3bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return msg->hdr.desc.level;
    3bd4:	880f      	ldrh	r7, [r1, #0]
	return msg->hdr.source;
    3bd6:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    3bd8:	688e      	ldr	r6, [r1, #8]
    3bda:	b086      	sub	sp, #24
    3bdc:	4605      	mov	r5, r0
    3bde:	460c      	mov	r4, r1
    3be0:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
    3be2:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    3be6:	b15b      	cbz	r3, 3c00 <log_output_msg_process+0x30>
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
    3be8:	4a13      	ldr	r2, [pc, #76]	; (3c38 <log_output_msg_process+0x68>)
    3bea:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    3bec:	f343 018f 	sbfx	r1, r3, #2, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    3bf0:	2900      	cmp	r1, #0
    3bf2:	db1f      	blt.n	3c34 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    3bf4:	7820      	ldrb	r0, [r4, #0]
    3bf6:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    3bfa:	f7ff fcb7 	bl	356c <log_source_name_get>
    3bfe:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    3c00:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
    3c02:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    3c04:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    3c08:	9700      	str	r7, [sp, #0]
    3c0a:	f3c2 224a 	ubfx	r2, r2, #9, #11
    3c0e:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    3c10:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
    3c14:	f3c0 100b 	ubfx	r0, r0, #4, #12
    3c18:	bf08      	it	eq
    3c1a:	2100      	moveq	r1, #0
    3c1c:	e9cd 0803 	strd	r0, r8, [sp, #12]
    3c20:	e9cd 1401 	strd	r1, r4, [sp, #4]
    3c24:	2200      	movs	r2, #0
    3c26:	4631      	mov	r1, r6
    3c28:	4628      	mov	r0, r5
    3c2a:	f7ff fe7f 	bl	392c <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    3c2e:	b006      	add	sp, #24
    3c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    3c34:	2300      	movs	r3, #0
    3c36:	e7e3      	b.n	3c00 <log_output_msg_process+0x30>
    3c38:	200002b4 	.word	0x200002b4

00003c3c <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    3c3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    3c3e:	f242 730f 	movw	r3, #9999	; 0x270f
    3c42:	428b      	cmp	r3, r1
    3c44:	bf28      	it	cs
    3c46:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    3c48:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    3c4a:	4a0f      	ldr	r2, [pc, #60]	; (3c88 <log_output_dropped_process+0x4c>)
{
    3c4c:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    3c4e:	2105      	movs	r1, #5
    3c50:	4668      	mov	r0, sp
    3c52:	f008 fca3 	bl	c59c <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    3c56:	6863      	ldr	r3, [r4, #4]
    3c58:	490c      	ldr	r1, [pc, #48]	; (3c8c <log_output_dropped_process+0x50>)
    3c5a:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    3c5c:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    3c5e:	220b      	movs	r2, #11
    3c60:	4628      	mov	r0, r5
    3c62:	f009 fbf8 	bl	d456 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    3c66:	6863      	ldr	r3, [r4, #4]
    3c68:	4632      	mov	r2, r6
    3c6a:	4669      	mov	r1, sp
    3c6c:	4628      	mov	r0, r5
    3c6e:	685b      	ldr	r3, [r3, #4]
    3c70:	f009 fbf1 	bl	d456 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    3c74:	6863      	ldr	r3, [r4, #4]
    3c76:	4906      	ldr	r1, [pc, #24]	; (3c90 <log_output_dropped_process+0x54>)
    3c78:	685b      	ldr	r3, [r3, #4]
    3c7a:	221b      	movs	r2, #27
    3c7c:	4628      	mov	r0, r5
    3c7e:	f009 fbea 	bl	d456 <buffer_write>
		     output->control_block->ctx);
}
    3c82:	b002      	add	sp, #8
    3c84:	bd70      	pop	{r4, r5, r6, pc}
    3c86:	bf00      	nop
    3c88:	00010e70 	.word	0x00010e70
    3c8c:	00011328 	.word	0x00011328
    3c90:	0001130c 	.word	0x0001130c

00003c94 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    3c94:	4a07      	ldr	r2, [pc, #28]	; (3cb4 <log_output_timestamp_freq_set+0x20>)
    3c96:	2100      	movs	r1, #0
    3c98:	2301      	movs	r3, #1
    3c9a:	4290      	cmp	r0, r2
    3c9c:	d806      	bhi.n	3cac <log_output_timestamp_freq_set+0x18>
    3c9e:	4a06      	ldr	r2, [pc, #24]	; (3cb8 <log_output_timestamp_freq_set+0x24>)
    3ca0:	b901      	cbnz	r1, 3ca4 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    3ca2:	2301      	movs	r3, #1
    3ca4:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    3ca6:	4b05      	ldr	r3, [pc, #20]	; (3cbc <log_output_timestamp_freq_set+0x28>)
    3ca8:	6018      	str	r0, [r3, #0]
}
    3caa:	4770      	bx	lr
		frequency /= 2U;
    3cac:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    3cae:	005b      	lsls	r3, r3, #1
    3cb0:	2101      	movs	r1, #1
    3cb2:	e7f2      	b.n	3c9a <log_output_timestamp_freq_set+0x6>
    3cb4:	000f4240 	.word	0x000f4240
    3cb8:	20000edc 	.word	0x20000edc
    3cbc:	20000ee0 	.word	0x20000ee0

00003cc0 <severity_lvl_get>:
}


static void severity_lvl_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
    3cc0:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &dsub_module_name;
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
					severity_lvls_sorted[idx] : NULL;
    3cc2:	2804      	cmp	r0, #4
	entry->handler = NULL;
    3cc4:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
    3cc6:	604b      	str	r3, [r1, #4]
					severity_lvls_sorted[idx] : NULL;
    3cc8:	bf98      	it	ls
    3cca:	4b04      	ldrls	r3, [pc, #16]	; (3cdc <severity_lvl_get+0x1c>)
	entry->subcmd = &dsub_module_name;
    3ccc:	4a04      	ldr	r2, [pc, #16]	; (3ce0 <severity_lvl_get+0x20>)
					severity_lvls_sorted[idx] : NULL;
    3cce:	bf98      	it	ls
    3cd0:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	entry->subcmd = &dsub_module_name;
    3cd4:	608a      	str	r2, [r1, #8]
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
    3cd6:	600b      	str	r3, [r1, #0]
}
    3cd8:	4770      	bx	lr
    3cda:	bf00      	nop
    3cdc:	000104a8 	.word	0x000104a8
    3ce0:	000101cc 	.word	0x000101cc

00003ce4 <backend_name_get>:

static void backend_name_get(size_t idx, struct shell_static_entry *entry)
{
	uint32_t section_count = 0;

	entry->handler = NULL;
    3ce4:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &sub_log_backend;
    3ce6:	4a08      	ldr	r2, [pc, #32]	; (3d08 <backend_name_get+0x24>)
	entry->syntax  = NULL;
    3ce8:	600b      	str	r3, [r1, #0]
	entry->handler = NULL;
    3cea:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
    3cec:	604b      	str	r3, [r1, #4]
	entry->subcmd = &sub_log_backend;
    3cee:	608a      	str	r2, [r1, #8]

	STRUCT_SECTION_COUNT(log_backend, &section_count);
    3cf0:	4b06      	ldr	r3, [pc, #24]	; (3d0c <backend_name_get+0x28>)
    3cf2:	4a07      	ldr	r2, [pc, #28]	; (3d10 <backend_name_get+0x2c>)
    3cf4:	1ad2      	subs	r2, r2, r3

	if (idx < section_count) {
    3cf6:	ebb0 1f12 	cmp.w	r0, r2, lsr #4
		struct log_backend *backend = NULL;

		STRUCT_SECTION_GET(log_backend, idx, &backend);
		__ASSERT_NO_MSG(backend != NULL);
		entry->syntax = backend->name;
    3cfa:	bf3e      	ittt	cc
    3cfc:	eb03 1300 	addcc.w	r3, r3, r0, lsl #4
    3d00:	689b      	ldrcc	r3, [r3, #8]
    3d02:	600b      	strcc	r3, [r1, #0]
	}
}
    3d04:	4770      	bx	lr
    3d06:	bf00      	nop
    3d08:	0001042c 	.word	0x0001042c
    3d0c:	0001012c 	.word	0x0001012c
    3d10:	0001014c 	.word	0x0001014c

00003d14 <module_name_get>:
	entry->handler = NULL;
    3d14:	2300      	movs	r3, #0
	entry->subcmd = &dsub_module_name;
    3d16:	4a06      	ldr	r2, [pc, #24]	; (3d30 <module_name_get+0x1c>)
{
    3d18:	b510      	push	{r4, lr}
    3d1a:	460c      	mov	r4, r1
	entry->handler = NULL;
    3d1c:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
    3d1e:	604b      	str	r3, [r1, #4]
	entry->subcmd = &dsub_module_name;
    3d20:	608a      	str	r2, [r1, #8]
	entry->syntax = log_source_name_get(Z_LOG_LOCAL_DOMAIN_ID, idx);
    3d22:	4601      	mov	r1, r0
    3d24:	4618      	mov	r0, r3
    3d26:	f7ff fc21 	bl	356c <log_source_name_get>
    3d2a:	6020      	str	r0, [r4, #0]
}
    3d2c:	bd10      	pop	{r4, pc}
    3d2e:	bf00      	nop
    3d30:	000101cc 	.word	0x000101cc

00003d34 <cmd_log_backends_list>:
{
    3d34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    3d38:	4c0e      	ldr	r4, [pc, #56]	; (3d74 <cmd_log_backends_list+0x40>)
    3d3a:	4e0f      	ldr	r6, [pc, #60]	; (3d78 <cmd_log_backends_list+0x44>)
		shell_fprintf(sh, SHELL_NORMAL,
    3d3c:	4f0f      	ldr	r7, [pc, #60]	; (3d7c <cmd_log_backends_list+0x48>)
    3d3e:	f8df 8040 	ldr.w	r8, [pc, #64]	; 3d80 <cmd_log_backends_list+0x4c>
{
    3d42:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    3d44:	42b4      	cmp	r4, r6
    3d46:	d303      	bcc.n	3d50 <cmd_log_backends_list+0x1c>
}
    3d48:	2000      	movs	r0, #0
    3d4a:	b002      	add	sp, #8
    3d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			      backend->cb->active ? "enabled" : "disabled",
    3d50:	6863      	ldr	r3, [r4, #4]
		shell_fprintf(sh, SHELL_NORMAL,
    3d52:	7959      	ldrb	r1, [r3, #5]
    3d54:	791b      	ldrb	r3, [r3, #4]
    3d56:	2900      	cmp	r1, #0
    3d58:	bf0c      	ite	eq
    3d5a:	463a      	moveq	r2, r7
    3d5c:	4642      	movne	r2, r8
    3d5e:	e9cd 2300 	strd	r2, r3, [sp]
    3d62:	2108      	movs	r1, #8
    3d64:	68a3      	ldr	r3, [r4, #8]
    3d66:	4a07      	ldr	r2, [pc, #28]	; (3d84 <cmd_log_backends_list+0x50>)
    3d68:	4628      	mov	r0, r5
    3d6a:	f009 fde6 	bl	d93a <shell_fprintf>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    3d6e:	3410      	adds	r4, #16
    3d70:	e7e8      	b.n	3d44 <cmd_log_backends_list+0x10>
    3d72:	bf00      	nop
    3d74:	0001012c 	.word	0x0001012c
    3d78:	0001014c 	.word	0x0001014c
    3d7c:	0001135c 	.word	0x0001135c
    3d80:	00011354 	.word	0x00011354
    3d84:	00011365 	.word	0x00011365

00003d88 <log_status>:
{
    3d88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d8c:	460d      	mov	r5, r1
    3d8e:	4604      	mov	r4, r0
	uint32_t modules_cnt = log_src_cnt_get(Z_LOG_LOCAL_DOMAIN_ID);
    3d90:	2000      	movs	r0, #0
    3d92:	f7ff fbe1 	bl	3558 <log_src_cnt_get>
	return backend->cb->active;
    3d96:	686b      	ldr	r3, [r5, #4]
	if (!log_backend_is_active(backend)) {
    3d98:	795b      	ldrb	r3, [r3, #5]
	uint32_t modules_cnt = log_src_cnt_get(Z_LOG_LOCAL_DOMAIN_ID);
    3d9a:	4607      	mov	r7, r0
	if (!log_backend_is_active(backend)) {
    3d9c:	b923      	cbnz	r3, 3da8 <log_status+0x20>
		shell_warn(sh, "Logs are halted!");
    3d9e:	4a1e      	ldr	r2, [pc, #120]	; (3e18 <log_status+0x90>)
    3da0:	2103      	movs	r1, #3
    3da2:	4620      	mov	r0, r4
    3da4:	f009 fdc9 	bl	d93a <shell_fprintf>
	shell_fprintf(sh, SHELL_NORMAL, "%-40s | current | built-in \r\n",
    3da8:	4b1c      	ldr	r3, [pc, #112]	; (3e1c <log_status+0x94>)
    3daa:	4a1d      	ldr	r2, [pc, #116]	; (3e20 <log_status+0x98>)
			      severity_lvls[compiled_lvl]);
    3dac:	f8df a074 	ldr.w	sl, [pc, #116]	; 3e24 <log_status+0x9c>
	shell_fprintf(sh, SHELL_NORMAL, "%-40s | current | built-in \r\n",
    3db0:	2108      	movs	r1, #8
    3db2:	4620      	mov	r0, r4
    3db4:	f009 fdc1 	bl	d93a <shell_fprintf>
	shell_fprintf(sh, SHELL_NORMAL,
    3db8:	4a1b      	ldr	r2, [pc, #108]	; (3e28 <log_status+0xa0>)
    3dba:	2108      	movs	r1, #8
    3dbc:	4620      	mov	r0, r4
    3dbe:	f009 fdbc 	bl	d93a <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
    3dc2:	f04f 0800 	mov.w	r8, #0
    3dc6:	fa0f f688 	sxth.w	r6, r8
    3dca:	42be      	cmp	r6, r7
    3dcc:	f108 0801 	add.w	r8, r8, #1
    3dd0:	d303      	bcc.n	3dda <log_status+0x52>
}
    3dd2:	2000      	movs	r0, #0
    3dd4:	b003      	add	sp, #12
    3dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dynamic_lvl = log_filter_get(backend, Z_LOG_LOCAL_DOMAIN_ID,
    3dda:	4632      	mov	r2, r6
    3ddc:	2301      	movs	r3, #1
    3dde:	2100      	movs	r1, #0
    3de0:	4628      	mov	r0, r5
    3de2:	f7ff fc93 	bl	370c <log_filter_get>
		compiled_lvl = log_filter_get(backend, Z_LOG_LOCAL_DOMAIN_ID,
    3de6:	2300      	movs	r3, #0
    3de8:	4632      	mov	r2, r6
    3dea:	4619      	mov	r1, r3
		dynamic_lvl = log_filter_get(backend, Z_LOG_LOCAL_DOMAIN_ID,
    3dec:	4681      	mov	r9, r0
		compiled_lvl = log_filter_get(backend, Z_LOG_LOCAL_DOMAIN_ID,
    3dee:	4628      	mov	r0, r5
    3df0:	f7ff fc8c 	bl	370c <log_filter_get>
		shell_fprintf(sh, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    3df4:	4631      	mov	r1, r6
		compiled_lvl = log_filter_get(backend, Z_LOG_LOCAL_DOMAIN_ID,
    3df6:	4683      	mov	fp, r0
		shell_fprintf(sh, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    3df8:	2000      	movs	r0, #0
    3dfa:	f7ff fbb7 	bl	356c <log_source_name_get>
    3dfe:	f85a 202b 	ldr.w	r2, [sl, fp, lsl #2]
    3e02:	9201      	str	r2, [sp, #4]
    3e04:	f85a 2029 	ldr.w	r2, [sl, r9, lsl #2]
    3e08:	9200      	str	r2, [sp, #0]
    3e0a:	4603      	mov	r3, r0
    3e0c:	4a07      	ldr	r2, [pc, #28]	; (3e2c <log_status+0xa4>)
    3e0e:	2108      	movs	r1, #8
    3e10:	4620      	mov	r0, r4
    3e12:	f009 fd92 	bl	d93a <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
    3e16:	e7d6      	b.n	3dc6 <log_status+0x3e>
    3e18:	00011386 	.word	0x00011386
    3e1c:	00011398 	.word	0x00011398
    3e20:	000113a4 	.word	0x000113a4
    3e24:	000104bc 	.word	0x000104bc
    3e28:	000113c2 	.word	0x000113c2
    3e2c:	000113ff 	.word	0x000113ff

00003e30 <shell_backend_cmd_execute>:
{
    3e30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char const *name = argv[-1];
    3e34:	f852 8c04 	ldr.w	r8, [r2, #-4]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    3e38:	4d13      	ldr	r5, [pc, #76]	; (3e88 <shell_backend_cmd_execute+0x58>)
{
    3e3a:	4606      	mov	r6, r0
	size_t slen = strlen(name);
    3e3c:	4640      	mov	r0, r8
{
    3e3e:	469b      	mov	fp, r3
    3e40:	468a      	mov	sl, r1
    3e42:	4617      	mov	r7, r2
	size_t slen = strlen(name);
    3e44:	f00a fed4 	bl	ebf0 <strlen>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    3e48:	4b10      	ldr	r3, [pc, #64]	; (3e8c <shell_backend_cmd_execute+0x5c>)
	size_t slen = strlen(name);
    3e4a:	4681      	mov	r9, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    3e4c:	429d      	cmp	r5, r3
    3e4e:	d308      	bcc.n	3e62 <shell_backend_cmd_execute+0x32>
		shell_error(sh, "Invalid backend: %s", name);
    3e50:	4a0f      	ldr	r2, [pc, #60]	; (3e90 <shell_backend_cmd_execute+0x60>)
    3e52:	4643      	mov	r3, r8
    3e54:	2101      	movs	r1, #1
    3e56:	4630      	mov	r0, r6
    3e58:	f009 fd6f 	bl	d93a <shell_fprintf>
		return -ENOEXEC;
    3e5c:	f06f 0407 	mvn.w	r4, #7
    3e60:	e00c      	b.n	3e7c <shell_backend_cmd_execute+0x4c>
		if (strncmp(name, backend->name, slen) == 0) {
    3e62:	68a9      	ldr	r1, [r5, #8]
    3e64:	464a      	mov	r2, r9
    3e66:	4640      	mov	r0, r8
    3e68:	f00a fede 	bl	ec28 <strncmp>
    3e6c:	4b07      	ldr	r3, [pc, #28]	; (3e8c <shell_backend_cmd_execute+0x5c>)
    3e6e:	4604      	mov	r4, r0
    3e70:	b938      	cbnz	r0, 3e82 <shell_backend_cmd_execute+0x52>
		func(sh, backend, argc, argv);
    3e72:	463b      	mov	r3, r7
    3e74:	4652      	mov	r2, sl
    3e76:	4629      	mov	r1, r5
    3e78:	4630      	mov	r0, r6
    3e7a:	47d8      	blx	fp
}
    3e7c:	4620      	mov	r0, r4
    3e7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    3e82:	3510      	adds	r5, #16
    3e84:	e7e2      	b.n	3e4c <shell_backend_cmd_execute+0x1c>
    3e86:	bf00      	nop
    3e88:	0001012c 	.word	0x0001012c
    3e8c:	0001014c 	.word	0x0001014c
    3e90:	00011413 	.word	0x00011413

00003e94 <cmd_log_backend_status>:
{
    3e94:	b508      	push	{r3, lr}
	shell_backend_cmd_execute(sh, argc, argv, log_status);
    3e96:	4b02      	ldr	r3, [pc, #8]	; (3ea0 <cmd_log_backend_status+0xc>)
    3e98:	f7ff ffca 	bl	3e30 <shell_backend_cmd_execute>
}
    3e9c:	2000      	movs	r0, #0
    3e9e:	bd08      	pop	{r3, pc}
    3ea0:	00003d89 	.word	0x00003d89

00003ea4 <cmd_log_backend_halt>:
	return shell_backend_cmd_execute(sh, argc, argv, log_halt);
    3ea4:	4b01      	ldr	r3, [pc, #4]	; (3eac <cmd_log_backend_halt+0x8>)
    3ea6:	f7ff bfc3 	b.w	3e30 <shell_backend_cmd_execute>
    3eaa:	bf00      	nop
    3eac:	0000d4eb 	.word	0x0000d4eb

00003eb0 <cmd_log_backend_go>:
	return shell_backend_cmd_execute(sh, argc, argv, log_go);
    3eb0:	4b01      	ldr	r3, [pc, #4]	; (3eb8 <cmd_log_backend_go+0x8>)
    3eb2:	f7ff bfbd 	b.w	3e30 <shell_backend_cmd_execute>
    3eb6:	bf00      	nop
    3eb8:	0000d4f3 	.word	0x0000d4f3

00003ebc <cmd_log_backend_enable>:
	return shell_backend_cmd_execute(sh, argc, argv, log_enable);
    3ebc:	4b01      	ldr	r3, [pc, #4]	; (3ec4 <cmd_log_backend_enable+0x8>)
    3ebe:	f7ff bfb7 	b.w	3e30 <shell_backend_cmd_execute>
    3ec2:	bf00      	nop
    3ec4:	00004055 	.word	0x00004055

00003ec8 <cmd_log_backend_disable>:
	return shell_backend_cmd_execute(sh, argc, argv, log_disable);
    3ec8:	4b01      	ldr	r3, [pc, #4]	; (3ed0 <cmd_log_backend_disable+0x8>)
    3eca:	f7ff bfb1 	b.w	3e30 <shell_backend_cmd_execute>
    3ece:	bf00      	nop
    3ed0:	0000d53f 	.word	0x0000d53f

00003ed4 <cmd_log_mem>:
{
    3ed4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3ed6:	4604      	mov	r4, r0
	err = log_mem_get_usage(&size, &used);
    3ed8:	a902      	add	r1, sp, #8
    3eda:	a801      	add	r0, sp, #4
    3edc:	f7ff fb2c 	bl	3538 <log_mem_get_usage>
	if (err < 0) {
    3ee0:	2800      	cmp	r0, #0
    3ee2:	da08      	bge.n	3ef6 <cmd_log_mem+0x22>
		shell_error(sh, "Failed to get usage (mode does not support it?)");
    3ee4:	4620      	mov	r0, r4
    3ee6:	4a16      	ldr	r2, [pc, #88]	; (3f40 <cmd_log_mem+0x6c>)
    3ee8:	2101      	movs	r1, #1
    3eea:	f009 fd26 	bl	d93a <shell_fprintf>
		return -ENOEXEC;
    3eee:	f06f 0007 	mvn.w	r0, #7
}
    3ef2:	b004      	add	sp, #16
    3ef4:	bd10      	pop	{r4, pc}
	shell_print(sh, "Log message buffer utilization report:");
    3ef6:	4a13      	ldr	r2, [pc, #76]	; (3f44 <cmd_log_mem+0x70>)
    3ef8:	2108      	movs	r1, #8
    3efa:	4620      	mov	r0, r4
    3efc:	f009 fd1d 	bl	d93a <shell_fprintf>
	shell_print(sh, "\tCapacity: %u bytes", size);
    3f00:	9b01      	ldr	r3, [sp, #4]
    3f02:	4a11      	ldr	r2, [pc, #68]	; (3f48 <cmd_log_mem+0x74>)
    3f04:	2108      	movs	r1, #8
    3f06:	4620      	mov	r0, r4
    3f08:	f009 fd17 	bl	d93a <shell_fprintf>
	shell_print(sh, "\tCurrently in use: %u bytes", used);
    3f0c:	9b02      	ldr	r3, [sp, #8]
    3f0e:	4a0f      	ldr	r2, [pc, #60]	; (3f4c <cmd_log_mem+0x78>)
    3f10:	2108      	movs	r1, #8
    3f12:	4620      	mov	r0, r4
    3f14:	f009 fd11 	bl	d93a <shell_fprintf>
	err = log_mem_get_max_usage(&max);
    3f18:	a803      	add	r0, sp, #12
    3f1a:	f7ff fb17 	bl	354c <log_mem_get_max_usage>
	if (err < 0) {
    3f1e:	2800      	cmp	r0, #0
    3f20:	da06      	bge.n	3f30 <cmd_log_mem+0x5c>
		shell_print(sh, "Enable CONFIG_LOG_MEM_UTILIZATION to get maximum usage");
    3f22:	4a0b      	ldr	r2, [pc, #44]	; (3f50 <cmd_log_mem+0x7c>)
    3f24:	2108      	movs	r1, #8
    3f26:	4620      	mov	r0, r4
    3f28:	f009 fd07 	bl	d93a <shell_fprintf>
		return 0;
    3f2c:	2000      	movs	r0, #0
    3f2e:	e7e0      	b.n	3ef2 <cmd_log_mem+0x1e>
	shell_print(sh, "\tMaximum usage: %u bytes", max);
    3f30:	9b03      	ldr	r3, [sp, #12]
    3f32:	4a08      	ldr	r2, [pc, #32]	; (3f54 <cmd_log_mem+0x80>)
    3f34:	2108      	movs	r1, #8
    3f36:	4620      	mov	r0, r4
    3f38:	f009 fcff 	bl	d93a <shell_fprintf>
	return 0;
    3f3c:	e7f6      	b.n	3f2c <cmd_log_mem+0x58>
    3f3e:	bf00      	nop
    3f40:	00011428 	.word	0x00011428
    3f44:	00011459 	.word	0x00011459
    3f48:	00011481 	.word	0x00011481
    3f4c:	00011496 	.word	0x00011496
    3f50:	000114b3 	.word	0x000114b3
    3f54:	000114eb 	.word	0x000114eb

00003f58 <shell_state_precheck>:
{
    3f58:	b510      	push	{r4, lr}
	if (sh->log_backend->control_block->state
    3f5a:	69c3      	ldr	r3, [r0, #28]
    3f5c:	689b      	ldr	r3, [r3, #8]
    3f5e:	791c      	ldrb	r4, [r3, #4]
    3f60:	b92c      	cbnz	r4, 3f6e <shell_state_precheck+0x16>
		shell_error(sh, "Shell log backend not initialized.");
    3f62:	4a04      	ldr	r2, [pc, #16]	; (3f74 <shell_state_precheck+0x1c>)
    3f64:	2101      	movs	r1, #1
    3f66:	f009 fce8 	bl	d93a <shell_fprintf>
    3f6a:	4620      	mov	r0, r4
}
    3f6c:	bd10      	pop	{r4, pc}
	return true;
    3f6e:	2001      	movs	r0, #1
    3f70:	e7fc      	b.n	3f6c <shell_state_precheck+0x14>
    3f72:	bf00      	nop
    3f74:	00011505 	.word	0x00011505

00003f78 <filters_set>:
{
    3f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f7c:	4607      	mov	r7, r0
    3f7e:	b085      	sub	sp, #20
    3f80:	4689      	mov	r9, r1
    3f82:	4698      	mov	r8, r3
	int cnt = all ? log_src_cnt_get(Z_LOG_LOCAL_DOMAIN_ID) : argc;
    3f84:	4615      	mov	r5, r2
    3f86:	bbb2      	cbnz	r2, 3ff6 <filters_set+0x7e>
    3f88:	4610      	mov	r0, r2
    3f8a:	f7ff fae5 	bl	3558 <log_src_cnt_get>
    3f8e:	4606      	mov	r6, r0
	if (!backend->cb->active) {
    3f90:	f8d9 3004 	ldr.w	r3, [r9, #4]
    3f94:	795b      	ldrb	r3, [r3, #5]
    3f96:	b923      	cbnz	r3, 3fa2 <filters_set+0x2a>
		shell_warn(sh, "Backend not active.");
    3f98:	4a2a      	ldr	r2, [pc, #168]	; (4044 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x44>)
    3f9a:	2103      	movs	r1, #3
    3f9c:	4638      	mov	r0, r7
    3f9e:	f009 fccc 	bl	d93a <shell_fprintf>
				shell_warn(sh, "%s: level set to %s.",
    3fa2:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 4048 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x48>
    3fa6:	2400      	movs	r4, #0
	for (i = 0; i < cnt; i++) {
    3fa8:	42b4      	cmp	r4, r6
    3faa:	da21      	bge.n	3ff0 <filters_set+0x78>
		id = all ? i : module_id_get(argv[i]);
    3fac:	b33d      	cbz	r5, 3ffe <filters_set+0x86>
    3fae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
    3fb2:	9302      	str	r3, [sp, #8]
	uint32_t modules_cnt = log_src_cnt_get(Z_LOG_LOCAL_DOMAIN_ID);
    3fb4:	2000      	movs	r0, #0
    3fb6:	f7ff facf 	bl	3558 <log_src_cnt_get>
	for (i = 0U; i < modules_cnt; i++) {
    3fba:	2300      	movs	r3, #0
	uint32_t modules_cnt = log_src_cnt_get(Z_LOG_LOCAL_DOMAIN_ID);
    3fbc:	4682      	mov	sl, r0
	for (i = 0U; i < modules_cnt; i++) {
    3fbe:	459a      	cmp	sl, r3
    3fc0:	d00c      	beq.n	3fdc <filters_set+0x64>
		tmp_name = log_source_name_get(Z_LOG_LOCAL_DOMAIN_ID, i);
    3fc2:	4619      	mov	r1, r3
    3fc4:	2000      	movs	r0, #0
    3fc6:	9303      	str	r3, [sp, #12]
    3fc8:	f7ff fad0 	bl	356c <log_source_name_get>
		if (strncmp(tmp_name, name, 64) == 0) {
    3fcc:	9902      	ldr	r1, [sp, #8]
    3fce:	2240      	movs	r2, #64	; 0x40
    3fd0:	f00a fe2a 	bl	ec28 <strncmp>
    3fd4:	9b03      	ldr	r3, [sp, #12]
    3fd6:	b980      	cbnz	r0, 3ffa <filters_set+0x82>
		if (id >= 0) {
    3fd8:	2b00      	cmp	r3, #0
    3fda:	da2c      	bge.n	4036 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x36>
			shell_error(sh, "%s: unknown source name.", argv[i]);
    3fdc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
    3fe0:	4a1a      	ldr	r2, [pc, #104]	; (404c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4c>)
    3fe2:	2101      	movs	r1, #1
    3fe4:	4638      	mov	r0, r7
	for (i = 0; i < cnt; i++) {
    3fe6:	3401      	adds	r4, #1
			shell_error(sh, "%s: unknown source name.", argv[i]);
    3fe8:	f009 fca7 	bl	d93a <shell_fprintf>
	for (i = 0; i < cnt; i++) {
    3fec:	42a6      	cmp	r6, r4
    3fee:	dcde      	bgt.n	3fae <filters_set+0x36>
}
    3ff0:	b005      	add	sp, #20
    3ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int cnt = all ? log_src_cnt_get(Z_LOG_LOCAL_DOMAIN_ID) : argc;
    3ff6:	4616      	mov	r6, r2
    3ff8:	e7ca      	b.n	3f90 <filters_set+0x18>
	for (i = 0U; i < modules_cnt; i++) {
    3ffa:	3301      	adds	r3, #1
    3ffc:	e7df      	b.n	3fbe <filters_set+0x46>
    3ffe:	46a2      	mov	sl, r4
    4000:	2100      	movs	r1, #0
    4002:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4004:	b222      	sxth	r2, r4
    4006:	4648      	mov	r0, r9
    4008:	f7ff faf8 	bl	35fc <z_impl_log_filter_set>
			if (set_lvl != level) {
    400c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    400e:	4283      	cmp	r3, r0
    4010:	4604      	mov	r4, r0
    4012:	d00d      	beq.n	4030 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30>
					log_source_name_get(Z_LOG_LOCAL_DOMAIN_ID, i) :
    4014:	b995      	cbnz	r5, 403c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3c>
    4016:	4651      	mov	r1, sl
    4018:	4628      	mov	r0, r5
    401a:	f7ff faa7 	bl	356c <log_source_name_get>
    401e:	4603      	mov	r3, r0
				shell_warn(sh, "%s: level set to %s.",
    4020:	f85b 2024 	ldr.w	r2, [fp, r4, lsl #2]
    4024:	9200      	str	r2, [sp, #0]
    4026:	2103      	movs	r1, #3
    4028:	4a09      	ldr	r2, [pc, #36]	; (4050 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x50>)
    402a:	4638      	mov	r0, r7
    402c:	f009 fc85 	bl	d93a <shell_fprintf>
	for (i = 0; i < cnt; i++) {
    4030:	f10a 0401 	add.w	r4, sl, #1
    4034:	e7b8      	b.n	3fa8 <filters_set+0x30>
    4036:	46a2      	mov	sl, r4
			return i;
    4038:	461c      	mov	r4, r3
    403a:	e7e1      	b.n	4000 <CONFIG_COVERAGE_GCOV_HEAP_SIZE>
					log_source_name_get(Z_LOG_LOCAL_DOMAIN_ID, i) :
    403c:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
    4040:	e7ee      	b.n	4020 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x20>
    4042:	bf00      	nop
    4044:	00011529 	.word	0x00011529
    4048:	000104bc 	.word	0x000104bc
    404c:	00011554 	.word	0x00011554
    4050:	0001153e 	.word	0x0001153e

00004054 <log_enable>:
{
    4054:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4058:	f8df b050 	ldr.w	fp, [pc, #80]	; 40ac <log_enable+0x58>
	severity_level = severity_level_get(argv[1]);
    405c:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
    4060:	4606      	mov	r6, r0
    4062:	4688      	mov	r8, r1
    4064:	4691      	mov	r9, r2
    4066:	461d      	mov	r5, r3
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
    4068:	2700      	movs	r7, #0
		if (strncmp(str, severity_lvls[i], 4) == 0) {
    406a:	f85b 1b04 	ldr.w	r1, [fp], #4
    406e:	2204      	movs	r2, #4
    4070:	4650      	mov	r0, sl
    4072:	f00a fdd9 	bl	ec28 <strncmp>
    4076:	4604      	mov	r4, r0
    4078:	b158      	cbz	r0, 4092 <log_enable+0x3e>
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
    407a:	3701      	adds	r7, #1
    407c:	2f05      	cmp	r7, #5
    407e:	d1f4      	bne.n	406a <log_enable+0x16>
		shell_error(sh, "Invalid severity: %s", argv[1]);
    4080:	686b      	ldr	r3, [r5, #4]
    4082:	4a0b      	ldr	r2, [pc, #44]	; (40b0 <log_enable+0x5c>)
    4084:	2101      	movs	r1, #1
    4086:	4630      	mov	r0, r6
    4088:	f009 fc57 	bl	d93a <shell_fprintf>
    408c:	f06f 0407 	mvn.w	r4, #7
    4090:	e008      	b.n	40a4 <log_enable+0x50>
	filters_set(sh, backend, argc - 2, &argv[2], severity_level);
    4092:	9700      	str	r7, [sp, #0]
    4094:	f105 0308 	add.w	r3, r5, #8
    4098:	f1a9 0202 	sub.w	r2, r9, #2
    409c:	4641      	mov	r1, r8
    409e:	4630      	mov	r0, r6
    40a0:	f7ff ff6a 	bl	3f78 <filters_set>
}
    40a4:	4620      	mov	r0, r4
    40a6:	b003      	add	sp, #12
    40a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    40ac:	000104bc 	.word	0x000104bc
    40b0:	0001156e 	.word	0x0001156e

000040b4 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    40b4:	4b01      	ldr	r3, [pc, #4]	; (40bc <log_backend_rtt_init+0x8>)
    40b6:	2201      	movs	r2, #1
    40b8:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    40ba:	4770      	bx	lr
    40bc:	200036c1 	.word	0x200036c1

000040c0 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    40c0:	4b01      	ldr	r3, [pc, #4]	; (40c8 <format_set+0x8>)
	return 0;
}
    40c2:	2000      	movs	r0, #0
	log_format_current = log_type;
    40c4:	6019      	str	r1, [r3, #0]
}
    40c6:	4770      	bx	lr
    40c8:	20000ef8 	.word	0x20000ef8

000040cc <panic>:
	panic_mode = true;
    40cc:	4b02      	ldr	r3, [pc, #8]	; (40d8 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    40ce:	4803      	ldr	r0, [pc, #12]	; (40dc <panic+0x10>)
    40d0:	2201      	movs	r2, #1
    40d2:	701a      	strb	r2, [r3, #0]
    40d4:	f009 b9d3 	b.w	d47e <log_output_flush>
    40d8:	200036c2 	.word	0x200036c2
    40dc:	000104ec 	.word	0x000104ec

000040e0 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    40e0:	4801      	ldr	r0, [pc, #4]	; (40e8 <dropped+0x8>)
    40e2:	f7ff bdab 	b.w	3c3c <log_output_dropped_process>
    40e6:	bf00      	nop
    40e8:	000104ec 	.word	0x000104ec

000040ec <process>:
{
    40ec:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    40ee:	4b06      	ldr	r3, [pc, #24]	; (4108 <process+0x1c>)
    40f0:	6818      	ldr	r0, [r3, #0]
{
    40f2:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    40f4:	f7ff f83c 	bl	3170 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    40f8:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    40fa:	4603      	mov	r3, r0
}
    40fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    4100:	4802      	ldr	r0, [pc, #8]	; (410c <process+0x20>)
    4102:	220f      	movs	r2, #15
    4104:	4718      	bx	r3
    4106:	bf00      	nop
    4108:	20000ef8 	.word	0x20000ef8
    410c:	000104ec 	.word	0x000104ec

00004110 <on_failed_write>:
	if (retry_cnt == 0) {
    4110:	b910      	cbnz	r0, 4118 <on_failed_write+0x8>
		host_present = false;
    4112:	4b07      	ldr	r3, [pc, #28]	; (4130 <on_failed_write+0x20>)
    4114:	7018      	strb	r0, [r3, #0]
}
    4116:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    4118:	4b06      	ldr	r3, [pc, #24]	; (4134 <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
    411a:	781b      	ldrb	r3, [r3, #0]
    411c:	b11b      	cbz	r3, 4126 <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
    411e:	f241 3088 	movw	r0, #5000	; 0x1388
    4122:	f00b bca9 	b.w	fa78 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    4126:	20a4      	movs	r0, #164	; 0xa4
    4128:	2100      	movs	r1, #0
    412a:	f007 bb59 	b.w	b7e0 <z_impl_k_sleep>
    412e:	bf00      	nop
    4130:	200036c1 	.word	0x200036c1
    4134:	200036c2 	.word	0x200036c2

00004138 <data_out_block_mode>:
{
    4138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    413c:	f8df 9074 	ldr.w	r9, [pc, #116]	; 41b4 <data_out_block_mode+0x7c>
    4140:	4f1d      	ldr	r7, [pc, #116]	; (41b8 <data_out_block_mode+0x80>)
{
    4142:	4680      	mov	r8, r0
    4144:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    4146:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    4148:	f899 5000 	ldrb.w	r5, [r9]
    414c:	b995      	cbnz	r5, 4174 <data_out_block_mode+0x3c>
			RTT_LOCK();
    414e:	f006 fbbd 	bl	a8cc <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    4152:	4628      	mov	r0, r5
    4154:	4632      	mov	r2, r6
    4156:	4641      	mov	r1, r8
    4158:	f006 fb3a 	bl	a7d0 <SEGGER_RTT_WriteSkipNoLock>
    415c:	4605      	mov	r5, r0
			RTT_UNLOCK();
    415e:	f006 fbbf 	bl	a8e0 <zephyr_rtt_mutex_unlock>
		if (ret) {
    4162:	b1e5      	cbz	r5, 419e <data_out_block_mode+0x66>
	host_present = true;
    4164:	2301      	movs	r3, #1
    4166:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
    4168:	f899 3000 	ldrb.w	r3, [r9]
    416c:	b973      	cbnz	r3, 418c <data_out_block_mode+0x54>
}
    416e:	4630      	mov	r0, r6
    4170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    4174:	4632      	mov	r2, r6
    4176:	4641      	mov	r1, r8
    4178:	2000      	movs	r0, #0
    417a:	f006 fb29 	bl	a7d0 <SEGGER_RTT_WriteSkipNoLock>
    417e:	4605      	mov	r5, r0
    4180:	e7ef      	b.n	4162 <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
    4182:	4620      	mov	r0, r4
    4184:	f7ff ffc4 	bl	4110 <on_failed_write>
    4188:	1e65      	subs	r5, r4, #1
    418a:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    418c:	2000      	movs	r0, #0
    418e:	f006 fb93 	bl	a8b8 <SEGGER_RTT_HasDataUp>
    4192:	2800      	cmp	r0, #0
    4194:	d0eb      	beq.n	416e <data_out_block_mode+0x36>
    4196:	783b      	ldrb	r3, [r7, #0]
    4198:	2b00      	cmp	r3, #0
    419a:	d1f2      	bne.n	4182 <data_out_block_mode+0x4a>
    419c:	e7e7      	b.n	416e <data_out_block_mode+0x36>
		} else if (host_present) {
    419e:	783b      	ldrb	r3, [r7, #0]
    41a0:	2b00      	cmp	r3, #0
    41a2:	d0e4      	beq.n	416e <data_out_block_mode+0x36>
			retry_cnt--;
    41a4:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
    41a6:	4620      	mov	r0, r4
    41a8:	f7ff ffb2 	bl	4110 <on_failed_write>
	} while ((ret == 0) && host_present);
    41ac:	783b      	ldrb	r3, [r7, #0]
    41ae:	2b00      	cmp	r3, #0
    41b0:	d1ca      	bne.n	4148 <data_out_block_mode+0x10>
    41b2:	e7dc      	b.n	416e <data_out_block_mode+0x36>
    41b4:	200036c2 	.word	0x200036c2
    41b8:	200036c1 	.word	0x200036c1

000041bc <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    41bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    41c0:	4605      	mov	r5, r0
	__asm__ volatile(
    41c2:	f04f 0320 	mov.w	r3, #32
    41c6:	f3ef 8611 	mrs	r6, BASEPRI
    41ca:	f383 8812 	msr	BASEPRI_MAX, r3
    41ce:	f3bf 8f6f 	isb	sy
	return list->head;
    41d2:	4b0e      	ldr	r3, [pc, #56]	; (420c <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    41d4:	4f0e      	ldr	r7, [pc, #56]	; (4210 <pm_state_notify+0x54>)
    41d6:	681c      	ldr	r4, [r3, #0]
    41d8:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4214 <pm_state_notify+0x58>
    41dc:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    41e0:	b92c      	cbnz	r4, 41ee <pm_state_notify+0x32>
	__asm__ volatile(
    41e2:	f386 8811 	msr	BASEPRI, r6
    41e6:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    41ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    41ee:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    41f2:	2d00      	cmp	r5, #0
    41f4:	bf18      	it	ne
    41f6:	4613      	movne	r3, r2
		if (callback) {
    41f8:	b12b      	cbz	r3, 4206 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    41fa:	f898 2010 	ldrb.w	r2, [r8, #16]
    41fe:	fb09 f202 	mul.w	r2, r9, r2
    4202:	5cb8      	ldrb	r0, [r7, r2]
    4204:	4798      	blx	r3
	return node->next;
    4206:	6824      	ldr	r4, [r4, #0]
    4208:	e7ea      	b.n	41e0 <pm_state_notify+0x24>
    420a:	bf00      	nop
    420c:	20000f18 	.word	0x20000f18
    4210:	20000f0c 	.word	0x20000f0c
    4214:	20003480 	.word	0x20003480

00004218 <pm_resume_devices>:
{
    4218:	b570      	push	{r4, r5, r6, lr}
	for (int i = (num_susp - 1); i >= 0; i--) {
    421a:	4d08      	ldr	r5, [pc, #32]	; (423c <pm_resume_devices+0x24>)
		pm_device_action_run(__pm_device_slots_start[i],
    421c:	4e08      	ldr	r6, [pc, #32]	; (4240 <pm_resume_devices+0x28>)
	for (int i = (num_susp - 1); i >= 0; i--) {
    421e:	682c      	ldr	r4, [r5, #0]
    4220:	3c01      	subs	r4, #1
    4222:	2c00      	cmp	r4, #0
    4224:	da02      	bge.n	422c <pm_resume_devices+0x14>
	num_susp = 0;
    4226:	2300      	movs	r3, #0
    4228:	602b      	str	r3, [r5, #0]
}
    422a:	bd70      	pop	{r4, r5, r6, pc}
		pm_device_action_run(__pm_device_slots_start[i],
    422c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    4230:	2101      	movs	r1, #1
    4232:	f000 f9c9 	bl	45c8 <pm_device_action_run>
	for (int i = (num_susp - 1); i >= 0; i--) {
    4236:	3c01      	subs	r4, #1
    4238:	e7f3      	b.n	4222 <pm_resume_devices+0xa>
    423a:	bf00      	nop
    423c:	20000efc 	.word	0x20000efc
    4240:	20000264 	.word	0x20000264

00004244 <pm_system_resume>:

void pm_system_resume(void)
{
    4244:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    4246:	4b19      	ldr	r3, [pc, #100]	; (42ac <pm_system_resume+0x68>)
    4248:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    424a:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    424e:	f004 031f 	and.w	r3, r4, #31
    4252:	2201      	movs	r2, #1
    4254:	409a      	lsls	r2, r3
    4256:	4b16      	ldr	r3, [pc, #88]	; (42b0 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4258:	0961      	lsrs	r1, r4, #5
    425a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    425e:	43d0      	mvns	r0, r2
    4260:	e853 1f00 	ldrex	r1, [r3]
    4264:	ea01 0500 	and.w	r5, r1, r0
    4268:	e843 5600 	strex	r6, r5, [r3]
    426c:	2e00      	cmp	r6, #0
    426e:	d1f7      	bne.n	4260 <pm_system_resume+0x1c>
    4270:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    4274:	420a      	tst	r2, r1
    4276:	d013      	beq.n	42a0 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    4278:	4b0e      	ldr	r3, [pc, #56]	; (42b4 <pm_system_resume+0x70>)
    427a:	4d0f      	ldr	r5, [pc, #60]	; (42b8 <pm_system_resume+0x74>)
    427c:	b18b      	cbz	r3, 42a2 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    427e:	230c      	movs	r3, #12
    4280:	4363      	muls	r3, r4
    4282:	18ea      	adds	r2, r5, r3
    4284:	5ce8      	ldrb	r0, [r5, r3]
    4286:	7851      	ldrb	r1, [r2, #1]
    4288:	f00a fe68 	bl	ef5c <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    428c:	2000      	movs	r0, #0
    428e:	f7ff ff95 	bl	41bc <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    4292:	230c      	movs	r3, #12
    4294:	435c      	muls	r4, r3
    4296:	192a      	adds	r2, r5, r4
    4298:	2300      	movs	r3, #0
    429a:	512b      	str	r3, [r5, r4]
    429c:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    42a0:	bd70      	pop	{r4, r5, r6, pc}
    42a2:	f383 8811 	msr	BASEPRI, r3
    42a6:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    42aa:	e7ef      	b.n	428c <pm_system_resume+0x48>
    42ac:	20003480 	.word	0x20003480
    42b0:	20000f20 	.word	0x20000f20
    42b4:	0000ef5d 	.word	0x0000ef5d
    42b8:	20000f0c 	.word	0x20000f0c

000042bc <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    42bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t id = CURRENT_CPU;
    42c0:	4b84      	ldr	r3, [pc, #528]	; (44d4 <pm_system_suspend+0x218>)
{
    42c2:	b083      	sub	sp, #12
	uint8_t id = CURRENT_CPU;
    42c4:	7c1d      	ldrb	r5, [r3, #16]
{
    42c6:	af00      	add	r7, sp, #0
    42c8:	4680      	mov	r8, r0
	__asm__ volatile(
    42ca:	f04f 0320 	mov.w	r3, #32
    42ce:	f3ef 8911 	mrs	r9, BASEPRI
    42d2:	f383 8812 	msr	BASEPRI_MAX, r3
    42d6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    42da:	240c      	movs	r4, #12
    42dc:	4b7e      	ldr	r3, [pc, #504]	; (44d8 <pm_system_suspend+0x21c>)
    42de:	4e7f      	ldr	r6, [pc, #508]	; (44dc <pm_system_suspend+0x220>)
    42e0:	436c      	muls	r4, r5
    42e2:	191a      	adds	r2, r3, r4
    42e4:	5d19      	ldrb	r1, [r3, r4]
    42e6:	2900      	cmp	r1, #0
    42e8:	d07e      	beq.n	43e8 <pm_system_suspend+0x12c>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    42ea:	ca07      	ldmia	r2, {r0, r1, r2}
    42ec:	eb06 0c04 	add.w	ip, r6, r4
    42f0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    42f4:	2200      	movs	r2, #0
    42f6:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    42f8:	f389 8811 	msr	BASEPRI, r9
    42fc:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    4300:	230c      	movs	r3, #12
    4302:	436b      	muls	r3, r5
    4304:	18f2      	adds	r2, r6, r3
    4306:	5cf3      	ldrb	r3, [r6, r3]
    4308:	2b00      	cmp	r3, #0
    430a:	f000 80d4 	beq.w	44b6 <pm_system_suspend+0x1fa>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    430e:	f1b8 3fff 	cmp.w	r8, #4294967295
    4312:	d011      	beq.n	4338 <pm_system_suspend+0x7c>
			return (uint32_t)((t * to_hz + off) / from_hz);
    4314:	f8d2 c008 	ldr.w	ip, [r2, #8]
    4318:	4c71      	ldr	r4, [pc, #452]	; (44e0 <pm_system_suspend+0x224>)
    431a:	4a72      	ldr	r2, [pc, #456]	; (44e4 <pm_system_suspend+0x228>)
    431c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    4320:	2100      	movs	r1, #0
    4322:	fbec 4100 	umlal	r4, r1, ip, r0
    4326:	2300      	movs	r3, #0
    4328:	4620      	mov	r0, r4
    432a:	f7fb fed7 	bl	dc <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    432e:	2101      	movs	r1, #1
    4330:	eba8 0000 	sub.w	r0, r8, r0
    4334:	f005 fa14 	bl	9760 <sys_clock_set_timeout>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    4338:	f3bf 8f5b 	dmb	ish
    433c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 44e8 <pm_system_suspend+0x22c>
    4340:	e858 4f00 	ldrex	r4, [r8]
    4344:	3c01      	subs	r4, #1
    4346:	e848 4300 	strex	r3, r4, [r8]
    434a:	2b00      	cmp	r3, #0
    434c:	d1f8      	bne.n	4340 <pm_system_suspend+0x84>
    434e:	f3bf 8f5b 	dmb	ish
    4352:	46c2      	mov	sl, r8
			     z_cpus_pm_state[id].exit_latency_us),
				     true);
	}

#if defined(CONFIG_PM_DEVICE) && !defined(CONFIG_PM_DEVICE_RUNTIME_EXCLUSIVE)
	if (atomic_sub(&z_cpus_active, 1) == 1) {
    4354:	b99c      	cbnz	r4, 437e <pm_system_suspend+0xc2>
		if (z_cpus_pm_state[id].state != PM_STATE_RUNTIME_IDLE) {
    4356:	230c      	movs	r3, #12
    4358:	436b      	muls	r3, r5
    435a:	5cf3      	ldrb	r3, [r6, r3]
    435c:	2b01      	cmp	r3, #1
    435e:	d00e      	beq.n	437e <pm_system_suspend+0xc2>
	devc = z_device_get_all_static(&devs);
    4360:	4638      	mov	r0, r7
    4362:	f006 faf1 	bl	a948 <z_device_get_all_static>
	num_susp = 0;
    4366:	f8df b184 	ldr.w	fp, [pc, #388]	; 44ec <pm_system_suspend+0x230>
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
    436a:	231c      	movs	r3, #28
	num_susp = 0;
    436c:	f8cb 4000 	str.w	r4, [fp]
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
    4370:	4358      	muls	r0, r3
    4372:	683c      	ldr	r4, [r7, #0]
    4374:	381c      	subs	r0, #28
    4376:	4404      	add	r4, r0
    4378:	683b      	ldr	r3, [r7, #0]
    437a:	429c      	cmp	r4, r3
    437c:	d23f      	bcs.n	43fe <pm_system_suspend+0x142>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    437e:	f007 f975 	bl	b66c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    4382:	2001      	movs	r0, #1
    4384:	f7ff ff1a 	bl	41bc <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4388:	f3bf 8f5b 	dmb	ish
    438c:	4b58      	ldr	r3, [pc, #352]	; (44f0 <pm_system_suspend+0x234>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    438e:	096a      	lsrs	r2, r5, #5
    4390:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    4394:	f005 011f 	and.w	r1, r5, #31
    4398:	2201      	movs	r2, #1
    439a:	408a      	lsls	r2, r1
    439c:	e853 0f00 	ldrex	r0, [r3]
    43a0:	4310      	orrs	r0, r2
    43a2:	e843 0100 	strex	r1, r0, [r3]
    43a6:	2900      	cmp	r1, #0
    43a8:	d1f8      	bne.n	439c <pm_system_suspend+0xe0>
    43aa:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    43ae:	4b51      	ldr	r3, [pc, #324]	; (44f4 <pm_system_suspend+0x238>)
    43b0:	b133      	cbz	r3, 43c0 <pm_system_suspend+0x104>
		pm_state_set(info->state, info->substate_id);
    43b2:	230c      	movs	r3, #12
    43b4:	435d      	muls	r5, r3
    43b6:	1973      	adds	r3, r6, r5
    43b8:	5d70      	ldrb	r0, [r6, r5]
    43ba:	7859      	ldrb	r1, [r3, #1]
    43bc:	f00a fdc2 	bl	ef44 <pm_state_set>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    43c0:	f3bf 8f5b 	dmb	ish
    43c4:	e85a 3f00 	ldrex	r3, [sl]
    43c8:	1c5a      	adds	r2, r3, #1
    43ca:	e84a 2100 	strex	r1, r2, [sl]
    43ce:	2900      	cmp	r1, #0
    43d0:	d1f8      	bne.n	43c4 <pm_system_suspend+0x108>
    43d2:	f3bf 8f5b 	dmb	ish
	state_set(&z_cpus_pm_state[id]);
	pm_stats_stop();

	/* Wake up sequence starts here */
#if defined(CONFIG_PM_DEVICE) && !defined(CONFIG_PM_DEVICE_RUNTIME_EXCLUSIVE)
	if (atomic_add(&z_cpus_active, 1) == 0) {
    43d6:	b90b      	cbnz	r3, 43dc <pm_system_suspend+0x120>
		pm_resume_devices();
    43d8:	f7ff ff1e 	bl	4218 <pm_resume_devices>
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    43dc:	f7ff ff32 	bl	4244 <pm_system_resume>
	k_sched_unlock();
    43e0:	f007 f958 	bl	b694 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    43e4:	2001      	movs	r0, #1
    43e6:	e067      	b.n	44b8 <pm_system_suspend+0x1fc>
		info = pm_policy_next_state(id, ticks);
    43e8:	4601      	mov	r1, r0
    43ea:	4628      	mov	r0, r5
    43ec:	f000 f88e 	bl	450c <pm_policy_next_state>
		if (info != NULL) {
    43f0:	2800      	cmp	r0, #0
    43f2:	d081      	beq.n	42f8 <pm_system_suspend+0x3c>
			z_cpus_pm_state[id] = *info;
    43f4:	c807      	ldmia	r0, {r0, r1, r2}
    43f6:	4434      	add	r4, r6
    43f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    43fc:	e77c      	b.n	42f8 <pm_system_suspend+0x3c>
    43fe:	4620      	mov	r0, r4
    4400:	f00b f996 	bl	f730 <z_device_is_ready>
		if (!device_is_ready(dev) || pm_device_is_busy(dev) ||
    4404:	2800      	cmp	r0, #0
    4406:	d063      	beq.n	44d0 <pm_system_suspend+0x214>
    4408:	4620      	mov	r0, r4
    440a:	f009 f8d4 	bl	d5b6 <pm_device_is_busy>
    440e:	2800      	cmp	r0, #0
    4410:	d15e      	bne.n	44d0 <pm_system_suspend+0x214>
		    pm_device_state_is_locked(dev) ||
    4412:	4620      	mov	r0, r4
    4414:	f009 f903 	bl	d61e <pm_device_state_is_locked>
		if (!device_is_ready(dev) || pm_device_is_busy(dev) ||
    4418:	2800      	cmp	r0, #0
    441a:	d159      	bne.n	44d0 <pm_system_suspend+0x214>
		    pm_device_wakeup_is_enabled(dev) ||
    441c:	4620      	mov	r0, r4
    441e:	f009 f8f4 	bl	d60a <pm_device_wakeup_is_enabled>
		    pm_device_state_is_locked(dev) ||
    4422:	4601      	mov	r1, r0
    4424:	2800      	cmp	r0, #0
    4426:	d153      	bne.n	44d0 <pm_system_suspend+0x214>
		ret = pm_device_action_run(dev, PM_DEVICE_ACTION_SUSPEND);
    4428:	4620      	mov	r0, r4
    442a:	f000 f8cd 	bl	45c8 <pm_device_action_run>
		if ((ret == -ENOSYS) || (ret == -ENOTSUP) || (ret == -EALREADY)) {
    442e:	f020 0320 	bic.w	r3, r0, #32
    4432:	3378      	adds	r3, #120	; 0x78
		ret = pm_device_action_run(dev, PM_DEVICE_ACTION_SUSPEND);
    4434:	4681      	mov	r9, r0
		if ((ret == -ENOSYS) || (ret == -ENOTSUP) || (ret == -EALREADY)) {
    4436:	d04b      	beq.n	44d0 <pm_system_suspend+0x214>
    4438:	f110 0f86 	cmn.w	r0, #134	; 0x86
    443c:	d048      	beq.n	44d0 <pm_system_suspend+0x214>
		} else if (ret < 0) {
    443e:	2800      	cmp	r0, #0
    4440:	da3e      	bge.n	44c0 <pm_system_suspend+0x204>
			LOG_ERR("Device %s did not enter %s state (%d)",
    4442:	4b2d      	ldr	r3, [pc, #180]	; (44f8 <pm_system_suspend+0x23c>)
    4444:	681b      	ldr	r3, [r3, #0]
    4446:	075b      	lsls	r3, r3, #29
    4448:	d024      	beq.n	4494 <pm_system_suspend+0x1d8>
    444a:	2001      	movs	r0, #1
    444c:	f8d4 a000 	ldr.w	sl, [r4]
    4450:	f000 f8ae 	bl	45b0 <pm_device_state_str>
    4454:	466c      	mov	r4, sp
    4456:	b08a      	sub	sp, #40	; 0x28
    4458:	466b      	mov	r3, sp
    445a:	4928      	ldr	r1, [pc, #160]	; (44fc <pm_system_suspend+0x240>)
    445c:	e9c3 1a05 	strd	r1, sl, [r3, #20]
    4460:	4927      	ldr	r1, [pc, #156]	; (4500 <pm_system_suspend+0x244>)
    4462:	6079      	str	r1, [r7, #4]
    4464:	e9c3 0907 	strd	r0, r9, [r3, #28]
    4468:	f103 0210 	add.w	r2, r3, #16
    446c:	1d38      	adds	r0, r7, #4
    446e:	f103 0123 	add.w	r1, r3, #35	; 0x23
    4472:	f103 0c27 	add.w	ip, r3, #39	; 0x27
    4476:	f810 eb01 	ldrb.w	lr, [r0], #1
    447a:	f801 ef01 	strb.w	lr, [r1, #1]!
    447e:	458c      	cmp	ip, r1
    4480:	d1f9      	bne.n	4476 <pm_system_suspend+0x1ba>
    4482:	4920      	ldr	r1, [pc, #128]	; (4504 <pm_system_suspend+0x248>)
    4484:	6119      	str	r1, [r3, #16]
    4486:	481c      	ldr	r0, [pc, #112]	; (44f8 <pm_system_suspend+0x23c>)
    4488:	2300      	movs	r3, #0
    448a:	f44f 5141 	mov.w	r1, #12352	; 0x3040
    448e:	f7ff f95f 	bl	3750 <z_impl_z_log_msg_static_create>
    4492:	46a5      	mov	sp, r4
				pm_resume_devices();
    4494:	f7ff fec0 	bl	4218 <pm_resume_devices>
				z_cpus_pm_state[id].state = PM_STATE_ACTIVE;
    4498:	230c      	movs	r3, #12
    449a:	436b      	muls	r3, r5
    449c:	2200      	movs	r2, #0
    449e:	54f2      	strb	r2, [r6, r3]
    44a0:	f3bf 8f5b 	dmb	ish
    44a4:	e858 3f00 	ldrex	r3, [r8]
    44a8:	3301      	adds	r3, #1
    44aa:	e848 3200 	strex	r2, r3, [r8]
    44ae:	2a00      	cmp	r2, #0
    44b0:	d1f8      	bne.n	44a4 <pm_system_suspend+0x1e8>
    44b2:	f3bf 8f5b 	dmb	ish
		return false;
    44b6:	2000      	movs	r0, #0
}
    44b8:	370c      	adds	r7, #12
    44ba:	46bd      	mov	sp, r7
    44bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__pm_device_slots_start[num_susp] = dev;
    44c0:	f8db 3000 	ldr.w	r3, [fp]
    44c4:	4a10      	ldr	r2, [pc, #64]	; (4508 <pm_system_suspend+0x24c>)
    44c6:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
		num_susp++;
    44ca:	3301      	adds	r3, #1
    44cc:	f8cb 3000 	str.w	r3, [fp]
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
    44d0:	3c1c      	subs	r4, #28
    44d2:	e751      	b.n	4378 <pm_system_suspend+0xbc>
    44d4:	20003480 	.word	0x20003480
    44d8:	20000f00 	.word	0x20000f00
    44dc:	20000f0c 	.word	0x20000f0c
    44e0:	000f423f 	.word	0x000f423f
    44e4:	000f4240 	.word	0x000f4240
    44e8:	20000038 	.word	0x20000038
    44ec:	20000efc 	.word	0x20000efc
    44f0:	20000f20 	.word	0x20000f20
    44f4:	0000ef45 	.word	0x0000ef45
    44f8:	200002fc 	.word	0x200002fc
    44fc:	00011739 	.word	0x00011739
    4500:	03010200 	.word	0x03010200
    4504:	02000005 	.word	0x02000005
    4508:	20000264 	.word	0x20000264

0000450c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    450c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4510:	b085      	sub	sp, #20
    4512:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    4514:	a903      	add	r1, sp, #12
    4516:	f000 f843 	bl	45a0 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    451a:	4b1e      	ldr	r3, [pc, #120]	; (4594 <pm_policy_next_state+0x88>)
    451c:	9d03      	ldr	r5, [sp, #12]
    451e:	f8d3 a000 	ldr.w	sl, [r3]
    4522:	f8df 8074 	ldr.w	r8, [pc, #116]	; 4598 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    4526:	1e43      	subs	r3, r0, #1
    4528:	b21b      	sxth	r3, r3
    452a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    452e:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    4530:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    4534:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    4538:	f04f 0b00 	mov.w	fp, #0
    453c:	b924      	cbnz	r4, 4548 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    453e:	46a1      	mov	r9, r4
}
    4540:	4648      	mov	r0, r9
    4542:	b005      	add	sp, #20
    4544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4548:	6868      	ldr	r0, [r5, #4]
    454a:	4a14      	ldr	r2, [pc, #80]	; (459c <pm_policy_next_state+0x90>)
    454c:	46c4      	mov	ip, r8
    454e:	4659      	mov	r1, fp
    4550:	fbe0 c107 	umlal	ip, r1, r0, r7
    4554:	2300      	movs	r3, #0
    4556:	4660      	mov	r0, ip
    4558:	f7fb fdc0 	bl	dc <__aeabi_uldivmod>
    455c:	9001      	str	r0, [sp, #4]
    455e:	68a8      	ldr	r0, [r5, #8]
    4560:	4a0e      	ldr	r2, [pc, #56]	; (459c <pm_policy_next_state+0x90>)
    4562:	46c4      	mov	ip, r8
    4564:	4659      	mov	r1, fp
    4566:	fbe0 c107 	umlal	ip, r1, r0, r7
    456a:	2300      	movs	r3, #0
    456c:	4660      	mov	r0, ip
    456e:	f7fb fdb5 	bl	dc <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    4572:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    4576:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    4578:	d001      	beq.n	457e <pm_policy_next_state+0x72>
    457a:	4582      	cmp	sl, r0
    457c:	d905      	bls.n	458a <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    457e:	1c73      	adds	r3, r6, #1
    4580:	d0de      	beq.n	4540 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    4582:	9b01      	ldr	r3, [sp, #4]
    4584:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    4586:	42b0      	cmp	r0, r6
    4588:	d9da      	bls.n	4540 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    458a:	3c01      	subs	r4, #1
    458c:	b2a4      	uxth	r4, r4
    458e:	3d0c      	subs	r5, #12
    4590:	e7d4      	b.n	453c <pm_policy_next_state+0x30>
    4592:	bf00      	nop
    4594:	2000003c 	.word	0x2000003c
    4598:	000f423f 	.word	0x000f423f
    459c:	000f4240 	.word	0x000f4240

000045a0 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    45a0:	b908      	cbnz	r0, 45a6 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    45a2:	4b02      	ldr	r3, [pc, #8]	; (45ac <pm_state_cpu_get_all+0xc>)
    45a4:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    45a6:	2000      	movs	r0, #0
    45a8:	4770      	bx	lr
    45aa:	bf00      	nop
    45ac:	000104fc 	.word	0x000104fc

000045b0 <pm_device_state_str>:
	[PM_DEVICE_ACTION_TURN_ON] = PM_DEVICE_STATE_OFF,
};

const char *pm_device_state_str(enum pm_device_state state)
{
	switch (state) {
    45b0:	2803      	cmp	r0, #3
    45b2:	bf9a      	itte	ls
    45b4:	4b02      	ldrls	r3, [pc, #8]	; (45c0 <pm_device_state_str+0x10>)
    45b6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
{
    45ba:	4802      	ldrhi	r0, [pc, #8]	; (45c4 <pm_device_state_str+0x14>)
	case PM_DEVICE_STATE_OFF:
		return "off";
	default:
		return "";
	}
}
    45bc:	4770      	bx	lr
    45be:	bf00      	nop
    45c0:	000104fc 	.word	0x000104fc
    45c4:	0001188f 	.word	0x0001188f

000045c8 <pm_device_action_run>:

int pm_device_action_run(const struct device *dev,
			 enum pm_device_action action)
{
    45c8:	b570      	push	{r4, r5, r6, lr}
	struct pm_device *pm = dev->pm;
    45ca:	6984      	ldr	r4, [r0, #24]
{
    45cc:	4603      	mov	r3, r0
    45ce:	460d      	mov	r5, r1
	int ret;

	if (pm == NULL) {
    45d0:	2c00      	cmp	r4, #0
    45d2:	d03a      	beq.n	464a <pm_device_action_run+0x82>
		return -ENOSYS;
	}

	if (pm_device_state_is_locked(dev)) {
    45d4:	f009 f823 	bl	d61e <pm_device_state_is_locked>
    45d8:	2800      	cmp	r0, #0
    45da:	d139      	bne.n	4650 <pm_device_action_run+0x88>
		return -EPERM;
	}

	/* Validate action against current state */
	if (pm->state == action_target_state[action]) {
    45dc:	4821      	ldr	r0, [pc, #132]	; (4664 <pm_device_action_run+0x9c>)
    45de:	7a22      	ldrb	r2, [r4, #8]
    45e0:	5c46      	ldrb	r6, [r0, r1]
    45e2:	42b2      	cmp	r2, r6
    45e4:	d037      	beq.n	4656 <pm_device_action_run+0x8e>
		return -EALREADY;
	}
	if (pm->state != action_expected_state[action]) {
    45e6:	4820      	ldr	r0, [pc, #128]	; (4668 <pm_device_action_run+0xa0>)
    45e8:	5c40      	ldrb	r0, [r0, r1]
    45ea:	4290      	cmp	r0, r2
    45ec:	d136      	bne.n	465c <pm_device_action_run+0x94>
		return -ENOTSUP;
	}

	ret = pm->action_cb(dev, action);
    45ee:	68e2      	ldr	r2, [r4, #12]
    45f0:	4618      	mov	r0, r3
    45f2:	4790      	blx	r2
	if (ret < 0) {
    45f4:	2800      	cmp	r0, #0
    45f6:	da15      	bge.n	4624 <pm_device_action_run+0x5c>
		 * physical behavior.
		 *
		 * The function will still return the error code so the domain
		 * can take whatever action is more appropriated.
		 */
		switch (action) {
    45f8:	2d02      	cmp	r5, #2
    45fa:	d011      	beq.n	4620 <pm_device_action_run+0x58>
    45fc:	2d03      	cmp	r5, #3
    45fe:	d110      	bne.n	4622 <pm_device_action_run+0x5a>
		case PM_DEVICE_ACTION_TURN_ON:
			/* Store an error flag when the transition explicitly fails */
			if (ret != -ENOTSUP) {
    4600:	f110 0f86 	cmn.w	r0, #134	; 0x86
    4604:	d00c      	beq.n	4620 <pm_device_action_run+0x58>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4606:	f3bf 8f5b 	dmb	ish
    460a:	1d23      	adds	r3, r4, #4
    460c:	e853 1f00 	ldrex	r1, [r3]
    4610:	f041 0102 	orr.w	r1, r1, #2
    4614:	e843 1200 	strex	r2, r1, [r3]
    4618:	2a00      	cmp	r2, #0
    461a:	d1f7      	bne.n	460c <pm_device_action_run+0x44>
    461c:	f3bf 8f5b 	dmb	ish
				atomic_set_bit(&pm->flags, PM_DEVICE_FLAG_TURN_ON_FAILED);
			}
			__fallthrough;
		case PM_DEVICE_ACTION_TURN_OFF:
			pm->state = action_target_state[action];
    4620:	7226      	strb	r6, [r4, #8]
	if (action == PM_DEVICE_ACTION_TURN_OFF) {
		atomic_clear_bit(&pm->flags, PM_DEVICE_FLAG_TURN_ON_FAILED);
	}

	return 0;
}
    4622:	bd70      	pop	{r4, r5, r6, pc}
	if (action == PM_DEVICE_ACTION_TURN_OFF) {
    4624:	2d02      	cmp	r5, #2
	pm->state = action_target_state[action];
    4626:	7226      	strb	r6, [r4, #8]
	if (action == PM_DEVICE_ACTION_TURN_OFF) {
    4628:	d001      	beq.n	462e <pm_device_action_run+0x66>
	return 0;
    462a:	2000      	movs	r0, #0
    462c:	e7f9      	b.n	4622 <pm_device_action_run+0x5a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    462e:	3404      	adds	r4, #4
    4630:	f3bf 8f5b 	dmb	ish
    4634:	e854 3f00 	ldrex	r3, [r4]
    4638:	f023 0302 	bic.w	r3, r3, #2
    463c:	e844 3200 	strex	r2, r3, [r4]
    4640:	2a00      	cmp	r2, #0
    4642:	d1f7      	bne.n	4634 <pm_device_action_run+0x6c>
    4644:	f3bf 8f5b 	dmb	ish
    4648:	e7ef      	b.n	462a <pm_device_action_run+0x62>
		return -ENOSYS;
    464a:	f06f 0057 	mvn.w	r0, #87	; 0x57
    464e:	e7e8      	b.n	4622 <pm_device_action_run+0x5a>
		return -EPERM;
    4650:	f04f 30ff 	mov.w	r0, #4294967295
    4654:	e7e5      	b.n	4622 <pm_device_action_run+0x5a>
		return -EALREADY;
    4656:	f06f 0077 	mvn.w	r0, #119	; 0x77
    465a:	e7e2      	b.n	4622 <pm_device_action_run+0x5a>
		return -ENOTSUP;
    465c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4660:	e7df      	b.n	4622 <pm_device_action_run+0x5a>
    4662:	bf00      	nop
    4664:	00011785 	.word	0x00011785
    4668:	00011781 	.word	0x00011781

0000466c <cmd_kernel_version>:
#define THREAD_MAX_NAM_LEN 10
#endif

static int cmd_kernel_version(const struct shell *sh,
			      size_t argc, char **argv)
{
    466c:	b513      	push	{r0, r1, r4, lr}
    466e:	4604      	mov	r4, r0
	uint32_t version = sys_kernel_version_get();
    4670:	f006 fcaa 	bl	afc8 <sys_kernel_version_get>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(sh, "Zephyr version %d.%d.%d",
    4674:	f3c0 2307 	ubfx	r3, r0, #8, #8
    4678:	9301      	str	r3, [sp, #4]
    467a:	f3c0 4307 	ubfx	r3, r0, #16, #8
    467e:	9300      	str	r3, [sp, #0]
    4680:	4a04      	ldr	r2, [pc, #16]	; (4694 <cmd_kernel_version+0x28>)
    4682:	0e03      	lsrs	r3, r0, #24
    4684:	2108      	movs	r1, #8
    4686:	4620      	mov	r0, r4
    4688:	f009 f957 	bl	d93a <shell_fprintf>
		      SYS_KERNEL_VER_MAJOR(version),
		      SYS_KERNEL_VER_MINOR(version),
		      SYS_KERNEL_VER_PATCHLEVEL(version));
	return 0;
}
    468c:	2000      	movs	r0, #0
    468e:	b002      	add	sp, #8
    4690:	bd10      	pop	{r4, pc}
    4692:	bf00      	nop
    4694:	00011789 	.word	0x00011789

00004698 <cmd_kernel_uptime>:

static int cmd_kernel_uptime(const struct shell *sh,
			     size_t argc, char **argv)
{
    4698:	b538      	push	{r3, r4, r5, lr}
    469a:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
    469c:	f00b f9ea 	bl	fa74 <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
    46a0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    46a4:	fba0 2305 	umull	r2, r3, r0, r5
    46a8:	fb05 3301 	mla	r3, r5, r1, r3
    46ac:	0bd2      	lsrs	r2, r2, #15
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(sh, "Uptime: %u ms", k_uptime_get_32());
    46ae:	ea42 4343 	orr.w	r3, r2, r3, lsl #17
    46b2:	4620      	mov	r0, r4
    46b4:	4a02      	ldr	r2, [pc, #8]	; (46c0 <cmd_kernel_uptime+0x28>)
    46b6:	2108      	movs	r1, #8
    46b8:	f009 f93f 	bl	d93a <shell_fprintf>
	return 0;
}
    46bc:	2000      	movs	r0, #0
    46be:	bd38      	pop	{r3, r4, r5, pc}
    46c0:	000117a2 	.word	0x000117a2

000046c4 <cmd_kernel_threads>:

}

static int cmd_kernel_threads(const struct shell *sh,
			      size_t argc, char **argv)
{
    46c4:	b510      	push	{r4, lr}
    46c6:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(sh, "Scheduler: %u since last call", sys_clock_elapsed());
    46c8:	f005 f87c 	bl	97c4 <sys_clock_elapsed>
    46cc:	4a08      	ldr	r2, [pc, #32]	; (46f0 <cmd_kernel_threads+0x2c>)
    46ce:	4603      	mov	r3, r0
    46d0:	2108      	movs	r1, #8
    46d2:	4620      	mov	r0, r4
    46d4:	f009 f931 	bl	d93a <shell_fprintf>
	shell_print(sh, "Threads:");
    46d8:	4a06      	ldr	r2, [pc, #24]	; (46f4 <cmd_kernel_threads+0x30>)
    46da:	4620      	mov	r0, r4
    46dc:	2108      	movs	r1, #8
    46de:	f009 f92c 	bl	d93a <shell_fprintf>
	k_thread_foreach(shell_tdata_dump, (void *)sh);
    46e2:	4805      	ldr	r0, [pc, #20]	; (46f8 <cmd_kernel_threads+0x34>)
    46e4:	4621      	mov	r1, r4
    46e6:	f006 faed 	bl	acc4 <k_thread_foreach>
	return 0;
}
    46ea:	2000      	movs	r0, #0
    46ec:	bd10      	pop	{r4, pc}
    46ee:	bf00      	nop
    46f0:	000117b1 	.word	0x000117b1
    46f4:	000117d0 	.word	0x000117d0
    46f8:	000046fd 	.word	0x000046fd

000046fc <shell_tdata_dump>:
{
    46fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    46fe:	b08f      	sub	sp, #60	; 0x3c
	size_t size = thread->stack_info.size;
    4700:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
{
    4704:	4604      	mov	r4, r0
    4706:	460d      	mov	r5, r1
	tname = k_thread_name_get(thread);
    4708:	f00b f83f 	bl	f78a <k_thread_name_get>
    470c:	4606      	mov	r6, r0
	return z_impl_z_current_get();
    470e:	f007 f881 	bl	b814 <z_impl_z_current_get>
	shell_print(sh, "%s%p %-10s",
    4712:	4b24      	ldr	r3, [pc, #144]	; (47a4 <shell_tdata_dump+0xa8>)
    4714:	4a24      	ldr	r2, [pc, #144]	; (47a8 <shell_tdata_dump+0xac>)
    4716:	2e00      	cmp	r6, #0
    4718:	bf08      	it	eq
    471a:	461e      	moveq	r6, r3
    471c:	4b23      	ldr	r3, [pc, #140]	; (47ac <shell_tdata_dump+0xb0>)
    471e:	e9cd 4600 	strd	r4, r6, [sp]
    4722:	4284      	cmp	r4, r0
    4724:	bf18      	it	ne
    4726:	4613      	movne	r3, r2
    4728:	2108      	movs	r1, #8
    472a:	4628      	mov	r0, r5
    472c:	4a20      	ldr	r2, [pc, #128]	; (47b0 <shell_tdata_dump+0xb4>)
    472e:	f009 f904 	bl	d93a <shell_fprintf>
	shell_print(sh, "\toptions: 0x%x, priority: %d timeout: %" PRId64,
    4732:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    4736:	e9cd 2302 	strd	r2, r3, [sp, #8]
    473a:	f994 300e 	ldrsb.w	r3, [r4, #14]
    473e:	9300      	str	r3, [sp, #0]
    4740:	7b23      	ldrb	r3, [r4, #12]
    4742:	4a1c      	ldr	r2, [pc, #112]	; (47b4 <shell_tdata_dump+0xb8>)
    4744:	4628      	mov	r0, r5
    4746:	2108      	movs	r1, #8
    4748:	f009 f8f7 	bl	d93a <shell_fprintf>
	shell_print(sh, "\tstate: %s, entry: %p",
    474c:	a906      	add	r1, sp, #24
    474e:	2220      	movs	r2, #32
    4750:	4620      	mov	r0, r4
    4752:	f006 faff 	bl	ad54 <k_thread_state_str>
    4756:	6e62      	ldr	r2, [r4, #100]	; 0x64
    4758:	9200      	str	r2, [sp, #0]
    475a:	4603      	mov	r3, r0
    475c:	4a16      	ldr	r2, [pc, #88]	; (47b8 <shell_tdata_dump+0xbc>)
    475e:	2108      	movs	r1, #8
    4760:	4628      	mov	r0, r5
    4762:	f009 f8ea 	bl	d93a <shell_fprintf>
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
    4766:	a905      	add	r1, sp, #20
    4768:	4620      	mov	r0, r4
    476a:	f00b f81e 	bl	f7aa <z_impl_k_thread_stack_space_get>
	if (ret) {
    476e:	4603      	mov	r3, r0
    4770:	b130      	cbz	r0, 4780 <shell_tdata_dump+0x84>
		shell_print(sh,
    4772:	4a12      	ldr	r2, [pc, #72]	; (47bc <shell_tdata_dump+0xc0>)
    4774:	2108      	movs	r1, #8
    4776:	4628      	mov	r0, r5
    4778:	f009 f8df 	bl	d93a <shell_fprintf>
}
    477c:	b00f      	add	sp, #60	; 0x3c
    477e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcnt = ((size - unused) * 100U) / size;
    4780:	9a05      	ldr	r2, [sp, #20]
    4782:	2364      	movs	r3, #100	; 0x64
    4784:	1ab9      	subs	r1, r7, r2
		shell_print(sh,
    4786:	e9cd 2100 	strd	r2, r1, [sp]
		pcnt = ((size - unused) * 100U) / size;
    478a:	434b      	muls	r3, r1
		shell_print(sh,
    478c:	4a0c      	ldr	r2, [pc, #48]	; (47c0 <shell_tdata_dump+0xc4>)
		pcnt = ((size - unused) * 100U) / size;
    478e:	fbb3 f3f7 	udiv	r3, r3, r7
		shell_print(sh,
    4792:	2108      	movs	r1, #8
    4794:	e9cd 7302 	strd	r7, r3, [sp, #8]
    4798:	4628      	mov	r0, r5
    479a:	463b      	mov	r3, r7
    479c:	f009 f8cd 	bl	d93a <shell_fprintf>
}
    47a0:	e7ec      	b.n	477c <shell_tdata_dump+0x80>
    47a2:	bf00      	nop
    47a4:	000117da 	.word	0x000117da
    47a8:	00011308 	.word	0x00011308
    47ac:	00012a95 	.word	0x00012a95
    47b0:	000117dd 	.word	0x000117dd
    47b4:	000117e9 	.word	0x000117e9
    47b8:	00011815 	.word	0x00011815
    47bc:	0001182c 	.word	0x0001182c
    47c0:	00011859 	.word	0x00011859

000047c4 <cmd_kernel_stacks>:
K_KERNEL_STACK_ARRAY_DECLARE(z_interrupt_stacks, CONFIG_MP_MAX_NUM_CPUS,
			     CONFIG_ISR_STACK_SIZE);

static int cmd_kernel_stacks(const struct shell *sh,
			     size_t argc, char **argv)
{
    47c4:	b530      	push	{r4, r5, lr}
    47c6:	b093      	sub	sp, #76	; 0x4c
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	char pad[THREAD_MAX_NAM_LEN] = { 0 };
    47c8:	2100      	movs	r1, #0
    47ca:	221c      	movs	r2, #28
{
    47cc:	4604      	mov	r4, r0
	char pad[THREAD_MAX_NAM_LEN] = { 0 };
    47ce:	a80b      	add	r0, sp, #44	; 0x2c
    47d0:	910a      	str	r1, [sp, #40]	; 0x28
    47d2:	f00a fa6f 	bl	ecb4 <memset>

	memset(pad, ' ', MAX((THREAD_MAX_NAM_LEN - strlen("IRQ 00")), 1));
    47d6:	481b      	ldr	r0, [pc, #108]	; (4844 <cmd_kernel_stacks+0x80>)
    47d8:	f00a fa0a 	bl	ebf0 <strlen>
    47dc:	f1c0 0020 	rsb	r0, r0, #32
    47e0:	2801      	cmp	r0, #1
    47e2:	d92c      	bls.n	483e <cmd_kernel_stacks+0x7a>
    47e4:	4817      	ldr	r0, [pc, #92]	; (4844 <cmd_kernel_stacks+0x80>)
    47e6:	f00a fa03 	bl	ebf0 <strlen>
    47ea:	f1c0 0220 	rsb	r2, r0, #32
    47ee:	ad0a      	add	r5, sp, #40	; 0x28
    47f0:	2120      	movs	r1, #32
    47f2:	4628      	mov	r0, r5
    47f4:	f00a fa5e 	bl	ecb4 <memset>

	k_thread_foreach(shell_stack_dump, (void *)sh);
    47f8:	4621      	mov	r1, r4
    47fa:	4813      	ldr	r0, [pc, #76]	; (4848 <cmd_kernel_stacks+0x84>)
    47fc:	f006 fa62 	bl	acc4 <k_thread_foreach>

	for (int i = 0; i < num_cpus; i++) {
		size_t unused;
		const uint8_t *buf = Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]);
		size_t size = K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]);
		int err = z_stack_space_get(buf, size, &unused);
    4800:	aa09      	add	r2, sp, #36	; 0x24
    4802:	f44f 6100 	mov.w	r1, #2048	; 0x800
    4806:	4811      	ldr	r0, [pc, #68]	; (484c <cmd_kernel_stacks+0x88>)
    4808:	f00a ffc3 	bl	f792 <z_stack_space_get>

		(void)err;
		__ASSERT_NO_MSG(err == 0);

		shell_print(sh,
    480c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    480e:	9501      	str	r5, [sp, #4]
    4810:	f5c2 6100 	rsb	r1, r2, #2048	; 0x800
    4814:	2364      	movs	r3, #100	; 0x64
    4816:	434b      	muls	r3, r1
    4818:	0adb      	lsrs	r3, r3, #11
    481a:	9306      	str	r3, [sp, #24]
    481c:	2500      	movs	r5, #0
    481e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    4822:	e9cd 1304 	strd	r1, r3, [sp, #16]
    4826:	e9cd 3202 	strd	r3, r2, [sp, #8]
    482a:	4620      	mov	r0, r4
    482c:	4b07      	ldr	r3, [pc, #28]	; (484c <cmd_kernel_stacks+0x88>)
    482e:	4a08      	ldr	r2, [pc, #32]	; (4850 <cmd_kernel_stacks+0x8c>)
    4830:	9500      	str	r5, [sp, #0]
    4832:	2108      	movs	r1, #8
    4834:	f009 f881 	bl	d93a <shell_fprintf>
			    &z_interrupt_stacks[i], i, pad, size, unused, size - unused, size,
			    ((size - unused) * 100U) / size);
	}

	return 0;
}
    4838:	4628      	mov	r0, r5
    483a:	b013      	add	sp, #76	; 0x4c
    483c:	bd30      	pop	{r4, r5, pc}
	memset(pad, ' ', MAX((THREAD_MAX_NAM_LEN - strlen("IRQ 00")), 1));
    483e:	2201      	movs	r2, #1
    4840:	e7d5      	b.n	47ee <cmd_kernel_stacks+0x2a>
    4842:	bf00      	nop
    4844:	00011890 	.word	0x00011890
    4848:	00004945 	.word	0x00004945
    484c:	20004908 	.word	0x20004908
    4850:	00011897 	.word	0x00011897

00004854 <cmd_kernel_cycles>:
{
    4854:	b510      	push	{r4, lr}
    4856:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    4858:	f00a fe7f 	bl	f55a <sys_clock_cycle_get_32>
	shell_print(sh, "cycles: %u hw cycles", k_cycle_get_32());
    485c:	4a03      	ldr	r2, [pc, #12]	; (486c <cmd_kernel_cycles+0x18>)
    485e:	4603      	mov	r3, r0
    4860:	2108      	movs	r1, #8
    4862:	4620      	mov	r0, r4
    4864:	f009 f869 	bl	d93a <shell_fprintf>
}
    4868:	2000      	movs	r0, #0
    486a:	bd10      	pop	{r4, pc}
    486c:	000118e0 	.word	0x000118e0

00004870 <cmd_kernel_log_level_set>:
}

#if defined(CONFIG_LOG_RUNTIME_FILTERING)
static int cmd_kernel_log_level_set(const struct shell *sh,
				    size_t argc, char **argv)
{
    4870:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4874:	4617      	mov	r7, r2
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	int err = 0;
    4876:	2300      	movs	r3, #0
{
    4878:	4604      	mov	r4, r0

	uint8_t severity = shell_strtoul(argv[2], 10, &err);
    487a:	aa01      	add	r2, sp, #4
    487c:	68b8      	ldr	r0, [r7, #8]
	int err = 0;
    487e:	9301      	str	r3, [sp, #4]
	uint8_t severity = shell_strtoul(argv[2], 10, &err);
    4880:	210a      	movs	r1, #10
    4882:	f009 fac9 	bl	de18 <shell_strtoul>

	if (err) {
    4886:	9d01      	ldr	r5, [sp, #4]
	uint8_t severity = shell_strtoul(argv[2], 10, &err);
    4888:	b2c6      	uxtb	r6, r0
	if (err) {
    488a:	b155      	cbz	r5, 48a2 <cmd_kernel_log_level_set+0x32>
		shell_error(sh, "Unable to parse log severity (err %d)", err);
    488c:	462b      	mov	r3, r5
    488e:	4a15      	ldr	r2, [pc, #84]	; (48e4 <cmd_kernel_log_level_set+0x74>)
    4890:	2101      	movs	r1, #1
    4892:	4620      	mov	r0, r4
    4894:	f009 f851 	bl	d93a <shell_fprintf>

		return err;
    4898:	9d01      	ldr	r5, [sp, #4]
	}

	log_filter_set(NULL, 0, (int16_t)source_id, severity);

	return 0;
}
    489a:	4628      	mov	r0, r5
    489c:	b002      	add	sp, #8
    489e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (severity > LOG_LEVEL_DBG) {
    48a2:	2e04      	cmp	r6, #4
    48a4:	d90a      	bls.n	48bc <cmd_kernel_log_level_set+0x4c>
		shell_error(sh, "Invalid log level: %d", severity);
    48a6:	4a10      	ldr	r2, [pc, #64]	; (48e8 <cmd_kernel_log_level_set+0x78>)
    48a8:	4633      	mov	r3, r6
    48aa:	2101      	movs	r1, #1
    48ac:	4620      	mov	r0, r4
    48ae:	f009 f844 	bl	d93a <shell_fprintf>
		shell_help(sh);
    48b2:	4620      	mov	r0, r4
    48b4:	f009 f84e 	bl	d954 <shell_help>
		return SHELL_CMD_HELP_PRINTED;
    48b8:	2501      	movs	r5, #1
    48ba:	e7ee      	b.n	489a <cmd_kernel_log_level_set+0x2a>
	int source_id = log_source_id_get(argv[1]);
    48bc:	6878      	ldr	r0, [r7, #4]
    48be:	f7fe fe81 	bl	35c4 <log_source_id_get>
	if (source_id < 0) {
    48c2:	f1b0 0800 	subs.w	r8, r0, #0
    48c6:	da05      	bge.n	48d4 <cmd_kernel_log_level_set+0x64>
		shell_error(sh, "Unable to find log source: %s", argv[1]);
    48c8:	687b      	ldr	r3, [r7, #4]
    48ca:	4a08      	ldr	r2, [pc, #32]	; (48ec <cmd_kernel_log_level_set+0x7c>)
    48cc:	2101      	movs	r1, #1
    48ce:	4620      	mov	r0, r4
    48d0:	f009 f833 	bl	d93a <shell_fprintf>
    48d4:	2100      	movs	r1, #0
    48d6:	4633      	mov	r3, r6
    48d8:	fa0f f288 	sxth.w	r2, r8
    48dc:	4608      	mov	r0, r1
    48de:	f7fe fe8d 	bl	35fc <z_impl_log_filter_set>
    48e2:	e7da      	b.n	489a <cmd_kernel_log_level_set+0x2a>
    48e4:	000118f6 	.word	0x000118f6
    48e8:	0001191d 	.word	0x0001191d
    48ec:	00011934 	.word	0x00011934

000048f0 <cmd_kernel_sleep>:
{
    48f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    48f2:	4613      	mov	r3, r2
	int err = 0;
    48f4:	2200      	movs	r2, #0
    48f6:	9201      	str	r2, [sp, #4]
{
    48f8:	4604      	mov	r4, r0
	ms = shell_strtoul(argv[1], 10, &err);
    48fa:	aa01      	add	r2, sp, #4
    48fc:	6858      	ldr	r0, [r3, #4]
    48fe:	210a      	movs	r1, #10
    4900:	f009 fa8a 	bl	de18 <shell_strtoul>
	if (!err) {
    4904:	9d01      	ldr	r5, [sp, #4]
    4906:	b995      	cbnz	r5, 492e <cmd_kernel_sleep+0x3e>
    4908:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
    490c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    4910:	4629      	mov	r1, r5
    4912:	f240 30e7 	movw	r0, #999	; 0x3e7
    4916:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    491a:	2300      	movs	r3, #0
    491c:	fbc4 0106 	smlal	r0, r1, r4, r6
    4920:	f7fb fbdc 	bl	dc <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    4924:	f006 ff5c 	bl	b7e0 <z_impl_k_sleep>
}
    4928:	4628      	mov	r0, r5
    492a:	b002      	add	sp, #8
    492c:	bd70      	pop	{r4, r5, r6, pc}
		shell_error(sh, "Unable to parse input (err %d)", err);
    492e:	462b      	mov	r3, r5
    4930:	4a03      	ldr	r2, [pc, #12]	; (4940 <cmd_kernel_sleep+0x50>)
    4932:	2101      	movs	r1, #1
    4934:	4620      	mov	r0, r4
    4936:	f009 f800 	bl	d93a <shell_fprintf>
		return err;
    493a:	9d01      	ldr	r5, [sp, #4]
    493c:	e7f4      	b.n	4928 <cmd_kernel_sleep+0x38>
    493e:	bf00      	nop
    4940:	00011953 	.word	0x00011953

00004944 <shell_stack_dump>:
{
    4944:	b5f0      	push	{r4, r5, r6, r7, lr}
    4946:	4604      	mov	r4, r0
	size_t size = thread->stack_info.size;
    4948:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
{
    494c:	b089      	sub	sp, #36	; 0x24
    494e:	460d      	mov	r5, r1
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
    4950:	a907      	add	r1, sp, #28
    4952:	f00a ff2a 	bl	f7aa <z_impl_k_thread_stack_space_get>
	if (ret) {
    4956:	4603      	mov	r3, r0
    4958:	b130      	cbz	r0, 4968 <shell_stack_dump+0x24>
		shell_print(sh,
    495a:	4a10      	ldr	r2, [pc, #64]	; (499c <shell_stack_dump+0x58>)
    495c:	2108      	movs	r1, #8
    495e:	4628      	mov	r0, r5
    4960:	f008 ffeb 	bl	d93a <shell_fprintf>
}
    4964:	b009      	add	sp, #36	; 0x24
    4966:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tname = k_thread_name_get((struct k_thread *)thread);
    4968:	4620      	mov	r0, r4
    496a:	f00a ff0e 	bl	f78a <k_thread_name_get>
	shell_print(
    496e:	4f0c      	ldr	r7, [pc, #48]	; (49a0 <shell_stack_dump+0x5c>)
	pcnt = ((size - unused) * 100U) / size;
    4970:	9a07      	ldr	r2, [sp, #28]
	shell_print(
    4972:	2800      	cmp	r0, #0
    4974:	bf18      	it	ne
    4976:	4607      	movne	r7, r0
	pcnt = ((size - unused) * 100U) / size;
    4978:	1ab1      	subs	r1, r6, r2
    497a:	2364      	movs	r3, #100	; 0x64
	shell_print(
    497c:	e9cd 2102 	strd	r2, r1, [sp, #8]
	pcnt = ((size - unused) * 100U) / size;
    4980:	434b      	muls	r3, r1
	shell_print(
    4982:	e9cd 7600 	strd	r7, r6, [sp]
	pcnt = ((size - unused) * 100U) / size;
    4986:	fbb3 f3f6 	udiv	r3, r3, r6
	shell_print(
    498a:	4a06      	ldr	r2, [pc, #24]	; (49a4 <shell_stack_dump+0x60>)
    498c:	e9cd 6304 	strd	r6, r3, [sp, #16]
    4990:	2108      	movs	r1, #8
    4992:	4623      	mov	r3, r4
    4994:	4628      	mov	r0, r5
    4996:	f008 ffd0 	bl	d93a <shell_fprintf>
    499a:	e7e3      	b.n	4964 <shell_stack_dump+0x20>
    499c:	0001182c 	.word	0x0001182c
    49a0:	000117da 	.word	0x000117da
    49a4:	00011973 	.word	0x00011973

000049a8 <get_device_name>:
};

static const char *get_device_name(const struct device *dev,
				   char *buf,
				   size_t len)
{
    49a8:	b510      	push	{r4, lr}
    49aa:	4603      	mov	r3, r0
	const char *name = dev->name;
    49ac:	6800      	ldr	r0, [r0, #0]
{
    49ae:	460c      	mov	r4, r1
    49b0:	4611      	mov	r1, r2

	if ((name == NULL) || (name[0] == 0)) {
    49b2:	b108      	cbz	r0, 49b8 <get_device_name+0x10>
    49b4:	7802      	ldrb	r2, [r0, #0]
    49b6:	b922      	cbnz	r2, 49c2 <get_device_name+0x1a>
		snprintf(buf, len, "[%p]", dev);
    49b8:	4a02      	ldr	r2, [pc, #8]	; (49c4 <get_device_name+0x1c>)
    49ba:	4620      	mov	r0, r4
    49bc:	f002 fdb0 	bl	7520 <snprintf>
		name = buf;
    49c0:	4620      	mov	r0, r4
	}

	return name;
}
    49c2:	bd10      	pop	{r4, pc}
    49c4:	00011ab4 	.word	0x00011ab4

000049c8 <cmd_device_list_visitor>:
	size_t buf_size;
};

static int cmd_device_list_visitor(const struct device *dev,
				   void *context)
{
    49c8:	b510      	push	{r4, lr}
	const struct cmd_device_list_visitor_context *ctx = context;

	shell_fprintf(ctx->sh, SHELL_NORMAL, "  requires: %s\n",
    49ca:	680c      	ldr	r4, [r1, #0]
    49cc:	e9d1 1201 	ldrd	r1, r2, [r1, #4]
    49d0:	f7ff ffea 	bl	49a8 <get_device_name>
    49d4:	4a03      	ldr	r2, [pc, #12]	; (49e4 <cmd_device_list_visitor+0x1c>)
    49d6:	4603      	mov	r3, r0
    49d8:	2108      	movs	r1, #8
    49da:	4620      	mov	r0, r4
    49dc:	f008 ffad 	bl	d93a <shell_fprintf>
		      get_device_name(dev, ctx->buf, ctx->buf_size));

	return 0;
}
    49e0:	2000      	movs	r0, #0
    49e2:	bd10      	pop	{r4, pc}
    49e4:	00011ab9 	.word	0x00011ab9

000049e8 <cmd_device_list>:

static int cmd_device_list(const struct shell *sh,
			   size_t argc, char **argv)
{
    49e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    49ec:	b08a      	sub	sp, #40	; 0x28
    49ee:	4605      	mov	r5, r0
	const struct device *devlist;
	size_t devcnt = z_device_get_all_static(&devlist);
    49f0:	a801      	add	r0, sp, #4
    49f2:	f005 ffa9 	bl	a948 <z_device_get_all_static>
	const struct device *devlist_end = devlist + devcnt;
    49f6:	9e01      	ldr	r6, [sp, #4]
	const struct device *dev;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(sh, SHELL_NORMAL, "devices:\n");
    49f8:	4a22      	ldr	r2, [pc, #136]	; (4a84 <cmd_device_list+0x9c>)
	for (dev = devlist; dev < devlist_end; dev++) {
		char buf[20];
		const char *name = get_device_name(dev, buf, sizeof(buf));
		const char *state = "READY";

		shell_fprintf(sh, SHELL_NORMAL, "- %s", name);
    49fa:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4a88 <cmd_device_list+0xa0>
		if (!device_is_ready(dev)) {
			state = "DISABLED";
    49fe:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4a8c <cmd_device_list+0xa4>
		const char *state = "READY";
    4a02:	f8df a08c 	ldr.w	sl, [pc, #140]	; 4a90 <cmd_device_list+0xa8>
	const struct device *devlist_end = devlist + devcnt;
    4a06:	231c      	movs	r3, #28
    4a08:	fb03 6600 	mla	r6, r3, r0, r6
	shell_fprintf(sh, SHELL_NORMAL, "devices:\n");
    4a0c:	2108      	movs	r1, #8
    4a0e:	4628      	mov	r0, r5
    4a10:	f008 ff93 	bl	d93a <shell_fprintf>
	for (dev = devlist; dev < devlist_end; dev++) {
    4a14:	9c01      	ldr	r4, [sp, #4]
    4a16:	42b4      	cmp	r4, r6
    4a18:	d303      	bcc.n	4a22 <cmd_device_list+0x3a>
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
		}
	}

	return 0;
}
    4a1a:	2000      	movs	r0, #0
    4a1c:	b00a      	add	sp, #40	; 0x28
    4a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const char *name = get_device_name(dev, buf, sizeof(buf));
    4a22:	af05      	add	r7, sp, #20
    4a24:	4639      	mov	r1, r7
    4a26:	2214      	movs	r2, #20
    4a28:	4620      	mov	r0, r4
    4a2a:	f7ff ffbd 	bl	49a8 <get_device_name>
		shell_fprintf(sh, SHELL_NORMAL, "- %s", name);
    4a2e:	4642      	mov	r2, r8
		const char *name = get_device_name(dev, buf, sizeof(buf));
    4a30:	4603      	mov	r3, r0
		shell_fprintf(sh, SHELL_NORMAL, "- %s", name);
    4a32:	2108      	movs	r1, #8
    4a34:	4628      	mov	r0, r5
    4a36:	f008 ff80 	bl	d93a <shell_fprintf>
    4a3a:	4620      	mov	r0, r4
    4a3c:	f00a fe78 	bl	f730 <z_device_is_ready>
		if (!device_is_ready(dev)) {
    4a40:	b1f0      	cbz	r0, 4a80 <cmd_device_list+0x98>
			enum pm_device_state st = PM_DEVICE_STATE_ACTIVE;
    4a42:	2300      	movs	r3, #0
			int err = pm_device_state_get(dev, &st);
    4a44:	a902      	add	r1, sp, #8
    4a46:	4620      	mov	r0, r4
			enum pm_device_state st = PM_DEVICE_STATE_ACTIVE;
    4a48:	f88d 3008 	strb.w	r3, [sp, #8]
			int err = pm_device_state_get(dev, &st);
    4a4c:	f008 fdaa 	bl	d5a4 <pm_device_state_get>
			if (!err) {
    4a50:	b9a0      	cbnz	r0, 4a7c <cmd_device_list+0x94>
				state = pm_device_state_str(st);
    4a52:	f89d 0008 	ldrb.w	r0, [sp, #8]
    4a56:	f7ff fdab 	bl	45b0 <pm_device_state_str>
    4a5a:	4603      	mov	r3, r0
		shell_fprintf(sh, SHELL_NORMAL, " (%s)\n", state);
    4a5c:	4a0d      	ldr	r2, [pc, #52]	; (4a94 <cmd_device_list+0xac>)
    4a5e:	2108      	movs	r1, #8
    4a60:	4628      	mov	r0, r5
    4a62:	f008 ff6a 	bl	d93a <shell_fprintf>
			struct cmd_device_list_visitor_context ctx = {
    4a66:	2314      	movs	r3, #20
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    4a68:	4620      	mov	r0, r4
    4a6a:	490b      	ldr	r1, [pc, #44]	; (4a98 <cmd_device_list+0xb0>)
			struct cmd_device_list_visitor_context ctx = {
    4a6c:	9304      	str	r3, [sp, #16]
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    4a6e:	aa02      	add	r2, sp, #8
			struct cmd_device_list_visitor_context ctx = {
    4a70:	e9cd 5702 	strd	r5, r7, [sp, #8]
	for (dev = devlist; dev < devlist_end; dev++) {
    4a74:	341c      	adds	r4, #28
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    4a76:	f00a fe66 	bl	f746 <device_required_foreach>
	for (dev = devlist; dev < devlist_end; dev++) {
    4a7a:	e7cc      	b.n	4a16 <cmd_device_list+0x2e>
		const char *state = "READY";
    4a7c:	4653      	mov	r3, sl
    4a7e:	e7ed      	b.n	4a5c <cmd_device_list+0x74>
			state = "DISABLED";
    4a80:	464b      	mov	r3, r9
    4a82:	e7eb      	b.n	4a5c <cmd_device_list+0x74>
    4a84:	00011ad8 	.word	0x00011ad8
    4a88:	00011ae2 	.word	0x00011ae2
    4a8c:	00011acf 	.word	0x00011acf
    4a90:	00011ac9 	.word	0x00011ac9
    4a94:	00011ae7 	.word	0x00011ae7
    4a98:	000049c9 	.word	0x000049c9

00004a9c <device_get_config_level>:
{
    4a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    4aa0:	4b11      	ldr	r3, [pc, #68]	; (4ae8 <device_get_config_level+0x4c>)
			shell_fprintf(sh, SHELL_NORMAL, "- %s\n",
    4aa2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 4aec <device_get_config_level+0x50>
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    4aa6:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    4aaa:	3101      	adds	r1, #1
{
    4aac:	b087      	sub	sp, #28
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    4aae:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
{
    4ab2:	4606      	mov	r6, r0
	bool devices = false;
    4ab4:	2700      	movs	r7, #0
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    4ab6:	45a0      	cmp	r8, r4
    4ab8:	d803      	bhi.n	4ac2 <device_get_config_level+0x26>
}
    4aba:	4638      	mov	r0, r7
    4abc:	b007      	add	sp, #28
    4abe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4ac2:	4620      	mov	r0, r4
    4ac4:	f00a fe34 	bl	f730 <z_device_is_ready>
		if (device_is_ready(dev)) {
    4ac8:	4605      	mov	r5, r0
    4aca:	b158      	cbz	r0, 4ae4 <device_get_config_level+0x48>
			shell_fprintf(sh, SHELL_NORMAL, "- %s\n",
    4acc:	2214      	movs	r2, #20
    4ace:	a901      	add	r1, sp, #4
    4ad0:	4620      	mov	r0, r4
    4ad2:	f7ff ff69 	bl	49a8 <get_device_name>
    4ad6:	464a      	mov	r2, r9
    4ad8:	4603      	mov	r3, r0
    4ada:	2108      	movs	r1, #8
    4adc:	4630      	mov	r0, r6
    4ade:	f008 ff2c 	bl	d93a <shell_fprintf>
			devices = true;
    4ae2:	462f      	mov	r7, r5
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    4ae4:	341c      	adds	r4, #28
    4ae6:	e7e6      	b.n	4ab6 <device_get_config_level+0x1a>
    4ae8:	0001066c 	.word	0x0001066c
    4aec:	00011aee 	.word	0x00011aee

00004af0 <cmd_device_levels>:
{
    4af0:	b510      	push	{r4, lr}
	shell_fprintf(sh, SHELL_NORMAL, "EARLY:\n");
    4af2:	2108      	movs	r1, #8
{
    4af4:	4604      	mov	r4, r0
	shell_fprintf(sh, SHELL_NORMAL, "EARLY:\n");
    4af6:	4a25      	ldr	r2, [pc, #148]	; (4b8c <cmd_device_levels+0x9c>)
    4af8:	f008 ff1f 	bl	d93a <shell_fprintf>
	ret = device_get_config_level(sh, INIT_LEVEL_EARLY);
    4afc:	2100      	movs	r1, #0
    4afe:	4620      	mov	r0, r4
    4b00:	f7ff ffcc 	bl	4a9c <device_get_config_level>
	if (ret == false) {
    4b04:	b920      	cbnz	r0, 4b10 <cmd_device_levels+0x20>
		shell_fprintf(sh, SHELL_NORMAL, "- None\n");
    4b06:	4a22      	ldr	r2, [pc, #136]	; (4b90 <cmd_device_levels+0xa0>)
    4b08:	2108      	movs	r1, #8
    4b0a:	4620      	mov	r0, r4
    4b0c:	f008 ff15 	bl	d93a <shell_fprintf>
	shell_fprintf(sh, SHELL_NORMAL, "PRE KERNEL 1:\n");
    4b10:	2108      	movs	r1, #8
    4b12:	4620      	mov	r0, r4
    4b14:	4a1f      	ldr	r2, [pc, #124]	; (4b94 <cmd_device_levels+0xa4>)
    4b16:	f008 ff10 	bl	d93a <shell_fprintf>
	ret = device_get_config_level(sh, INIT_LEVEL_PRE_KERNEL_1);
    4b1a:	2101      	movs	r1, #1
    4b1c:	4620      	mov	r0, r4
    4b1e:	f7ff ffbd 	bl	4a9c <device_get_config_level>
	if (ret == false) {
    4b22:	b920      	cbnz	r0, 4b2e <cmd_device_levels+0x3e>
		shell_fprintf(sh, SHELL_NORMAL, "- None\n");
    4b24:	4a1a      	ldr	r2, [pc, #104]	; (4b90 <cmd_device_levels+0xa0>)
    4b26:	2108      	movs	r1, #8
    4b28:	4620      	mov	r0, r4
    4b2a:	f008 ff06 	bl	d93a <shell_fprintf>
	shell_fprintf(sh, SHELL_NORMAL, "PRE KERNEL 2:\n");
    4b2e:	2108      	movs	r1, #8
    4b30:	4620      	mov	r0, r4
    4b32:	4a19      	ldr	r2, [pc, #100]	; (4b98 <cmd_device_levels+0xa8>)
    4b34:	f008 ff01 	bl	d93a <shell_fprintf>
	ret = device_get_config_level(sh, INIT_LEVEL_PRE_KERNEL_2);
    4b38:	2102      	movs	r1, #2
    4b3a:	4620      	mov	r0, r4
    4b3c:	f7ff ffae 	bl	4a9c <device_get_config_level>
	if (ret == false) {
    4b40:	b920      	cbnz	r0, 4b4c <cmd_device_levels+0x5c>
		shell_fprintf(sh, SHELL_NORMAL, "- None\n");
    4b42:	4a13      	ldr	r2, [pc, #76]	; (4b90 <cmd_device_levels+0xa0>)
    4b44:	2108      	movs	r1, #8
    4b46:	4620      	mov	r0, r4
    4b48:	f008 fef7 	bl	d93a <shell_fprintf>
	shell_fprintf(sh, SHELL_NORMAL, "POST_KERNEL:\n");
    4b4c:	2108      	movs	r1, #8
    4b4e:	4620      	mov	r0, r4
    4b50:	4a12      	ldr	r2, [pc, #72]	; (4b9c <cmd_device_levels+0xac>)
    4b52:	f008 fef2 	bl	d93a <shell_fprintf>
	ret = device_get_config_level(sh, INIT_LEVEL_POST_KERNEL);
    4b56:	2103      	movs	r1, #3
    4b58:	4620      	mov	r0, r4
    4b5a:	f7ff ff9f 	bl	4a9c <device_get_config_level>
	if (ret == false) {
    4b5e:	b920      	cbnz	r0, 4b6a <cmd_device_levels+0x7a>
		shell_fprintf(sh, SHELL_NORMAL, "- None\n");
    4b60:	4a0b      	ldr	r2, [pc, #44]	; (4b90 <cmd_device_levels+0xa0>)
    4b62:	2108      	movs	r1, #8
    4b64:	4620      	mov	r0, r4
    4b66:	f008 fee8 	bl	d93a <shell_fprintf>
	shell_fprintf(sh, SHELL_NORMAL, "APPLICATION:\n");
    4b6a:	2108      	movs	r1, #8
    4b6c:	4620      	mov	r0, r4
    4b6e:	4a0c      	ldr	r2, [pc, #48]	; (4ba0 <cmd_device_levels+0xb0>)
    4b70:	f008 fee3 	bl	d93a <shell_fprintf>
	ret = device_get_config_level(sh, INIT_LEVEL_APPLICATION);
    4b74:	2104      	movs	r1, #4
    4b76:	4620      	mov	r0, r4
    4b78:	f7ff ff90 	bl	4a9c <device_get_config_level>
	if (ret == false) {
    4b7c:	b920      	cbnz	r0, 4b88 <cmd_device_levels+0x98>
		shell_fprintf(sh, SHELL_NORMAL, "- None\n");
    4b7e:	4a04      	ldr	r2, [pc, #16]	; (4b90 <cmd_device_levels+0xa0>)
    4b80:	2108      	movs	r1, #8
    4b82:	4620      	mov	r0, r4
    4b84:	f008 fed9 	bl	d93a <shell_fprintf>
}
    4b88:	2000      	movs	r0, #0
    4b8a:	bd10      	pop	{r4, pc}
    4b8c:	00011af4 	.word	0x00011af4
    4b90:	00011afc 	.word	0x00011afc
    4b94:	00011b04 	.word	0x00011b04
    4b98:	00011b13 	.word	0x00011b13
    4b9c:	00011b22 	.word	0x00011b22
    4ba0:	00011b30 	.word	0x00011b30

00004ba4 <cmd_devmem>:
{
	mem_addr_t phys_addr, addr;
	uint32_t value = 0;
	uint8_t width;

	if (argc < 2 || argc > 4) {
    4ba4:	1e8b      	subs	r3, r1, #2
    4ba6:	2b02      	cmp	r3, #2
{
    4ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4bac:	4607      	mov	r7, r0
    4bae:	4688      	mov	r8, r1
    4bb0:	4614      	mov	r4, r2
	if (argc < 2 || argc > 4) {
    4bb2:	d837      	bhi.n	4c24 <cmd_devmem+0x80>
		return -EINVAL;
	}

	phys_addr = strtoul(argv[1], NULL, 16);
    4bb4:	6860      	ldr	r0, [r4, #4]
    4bb6:	2210      	movs	r2, #16
    4bb8:	2100      	movs	r1, #0
    4bba:	f009 ff56 	bl	ea6a <strtoul>
	shell_print(sh, "Mapped 0x%lx to 0x%lx\n", phys_addr, addr);
#else
	addr = phys_addr;
#endif /* defined(CONFIG_MMU) || defined(CONFIG_PCIE) */

	if (argc < 3) {
    4bbe:	f1b8 0f02 	cmp.w	r8, #2
	phys_addr = strtoul(argv[1], NULL, 16);
    4bc2:	4606      	mov	r6, r0
	if (argc < 3) {
    4bc4:	d107      	bne.n	4bd6 <cmd_devmem+0x32>
		width = 32;
	} else {
		width = strtoul(argv[2], NULL, 10);
	}

	shell_fprintf(sh, SHELL_NORMAL, "Using data width %d\n", width);
    4bc6:	4a26      	ldr	r2, [pc, #152]	; (4c60 <cmd_devmem+0xbc>)
    4bc8:	2320      	movs	r3, #32
    4bca:	2108      	movs	r1, #8
    4bcc:	4638      	mov	r0, r7
    4bce:	f008 feb4 	bl	d93a <shell_fprintf>
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
    4bd2:	6833      	ldr	r3, [r6, #0]
	if (err == 0) {
    4bd4:	e016      	b.n	4c04 <cmd_devmem+0x60>
		width = strtoul(argv[2], NULL, 10);
    4bd6:	220a      	movs	r2, #10
    4bd8:	2100      	movs	r1, #0
    4bda:	68a0      	ldr	r0, [r4, #8]
    4bdc:	f009 ff45 	bl	ea6a <strtoul>
    4be0:	b2c5      	uxtb	r5, r0
	shell_fprintf(sh, SHELL_NORMAL, "Using data width %d\n", width);
    4be2:	4a1f      	ldr	r2, [pc, #124]	; (4c60 <cmd_devmem+0xbc>)
    4be4:	462b      	mov	r3, r5
    4be6:	2108      	movs	r1, #8
    4be8:	4638      	mov	r0, r7
    4bea:	f008 fea6 	bl	d93a <shell_fprintf>

	if (argc <= 3) {
    4bee:	f1b8 0f04 	cmp.w	r8, #4
    4bf2:	d01a      	beq.n	4c2a <cmd_devmem+0x86>
	switch (width) {
    4bf4:	2d10      	cmp	r5, #16
    4bf6:	d00d      	beq.n	4c14 <cmd_devmem+0x70>
    4bf8:	2d20      	cmp	r5, #32
    4bfa:	d0ea      	beq.n	4bd2 <cmd_devmem+0x2e>
    4bfc:	2d08      	cmp	r5, #8
    4bfe:	d10c      	bne.n	4c1a <cmd_devmem+0x76>
	return *(volatile uint8_t *)addr;
    4c00:	7833      	ldrb	r3, [r6, #0]
    4c02:	b2db      	uxtb	r3, r3
		shell_fprintf(sh, SHELL_NORMAL, "Read value 0x%x\n", value);
    4c04:	4a17      	ldr	r2, [pc, #92]	; (4c64 <cmd_devmem+0xc0>)
    4c06:	2108      	movs	r1, #8
    4c08:	4638      	mov	r0, r7
    4c0a:	f008 fe96 	bl	d93a <shell_fprintf>
		return -EINVAL;
    4c0e:	2000      	movs	r0, #0
	value = strtoul(argv[3], NULL, 16);

	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);

	return memory_write(sh, addr, width, value);
}
    4c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return *(volatile uint16_t *)addr;
    4c14:	8833      	ldrh	r3, [r6, #0]
    4c16:	b29b      	uxth	r3, r3
	if (err == 0) {
    4c18:	e7f4      	b.n	4c04 <cmd_devmem+0x60>
		shell_fprintf(sh, SHELL_NORMAL, "Incorrect data width\n");
    4c1a:	4a13      	ldr	r2, [pc, #76]	; (4c68 <cmd_devmem+0xc4>)
    4c1c:	2108      	movs	r1, #8
    4c1e:	4638      	mov	r0, r7
    4c20:	f008 fe8b 	bl	d93a <shell_fprintf>
		return -EINVAL;
    4c24:	f06f 0015 	mvn.w	r0, #21
    4c28:	e7f2      	b.n	4c10 <cmd_devmem+0x6c>
	value = strtoul(argv[3], NULL, 16);
    4c2a:	68e0      	ldr	r0, [r4, #12]
    4c2c:	2210      	movs	r2, #16
    4c2e:	2100      	movs	r1, #0
    4c30:	f009 ff1b 	bl	ea6a <strtoul>
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
    4c34:	4a0d      	ldr	r2, [pc, #52]	; (4c6c <cmd_devmem+0xc8>)
    4c36:	4603      	mov	r3, r0
	value = strtoul(argv[3], NULL, 16);
    4c38:	4604      	mov	r4, r0
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
    4c3a:	2108      	movs	r1, #8
    4c3c:	4638      	mov	r0, r7
    4c3e:	f008 fe7c 	bl	d93a <shell_fprintf>
	switch (width) {
    4c42:	2d10      	cmp	r5, #16
    4c44:	d006      	beq.n	4c54 <cmd_devmem+0xb0>
    4c46:	2d20      	cmp	r5, #32
    4c48:	d007      	beq.n	4c5a <cmd_devmem+0xb6>
    4c4a:	2d08      	cmp	r5, #8
    4c4c:	d1e5      	bne.n	4c1a <cmd_devmem+0x76>
		sys_write8(value, addr);
    4c4e:	b2e4      	uxtb	r4, r4
	*(volatile uint8_t *)addr = data;
    4c50:	7034      	strb	r4, [r6, #0]
}
    4c52:	e7dc      	b.n	4c0e <cmd_devmem+0x6a>
		sys_write16(value, addr);
    4c54:	b2a4      	uxth	r4, r4
	*(volatile uint16_t *)addr = data;
    4c56:	8034      	strh	r4, [r6, #0]
}
    4c58:	e7d9      	b.n	4c0e <cmd_devmem+0x6a>
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
    4c5a:	6034      	str	r4, [r6, #0]
}
    4c5c:	e7d7      	b.n	4c0e <cmd_devmem+0x6a>
    4c5e:	bf00      	nop
    4c60:	00011b8d 	.word	0x00011b8d
    4c64:	00011bb8 	.word	0x00011bb8
    4c68:	00011ba2 	.word	0x00011ba2
    4c6c:	00011bc9 	.word	0x00011bc9

00004c70 <set_bypass.isra.0>:
static int set_bypass(const struct shell *sh, shell_bypass_cb_t bypass)
    4c70:	b570      	push	{r4, r5, r6, lr}
	if (bypass && in_use) {
    4c72:	4e10      	ldr	r6, [pc, #64]	; (4cb4 <set_bypass.isra.0+0x44>)
static int set_bypass(const struct shell *sh, shell_bypass_cb_t bypass)
    4c74:	4604      	mov	r4, r0
	if (bypass && in_use) {
    4c76:	7833      	ldrb	r3, [r6, #0]
    4c78:	460d      	mov	r5, r1
    4c7a:	b181      	cbz	r1, 4c9e <set_bypass.isra.0+0x2e>
    4c7c:	b12b      	cbz	r3, 4c8a <set_bypass.isra.0+0x1a>
}
    4c7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		shell_error(sh, "devmem load supports setting bypass on a single instance.");
    4c82:	4a0d      	ldr	r2, [pc, #52]	; (4cb8 <set_bypass.isra.0+0x48>)
    4c84:	2101      	movs	r1, #1
    4c86:	f008 be58 	b.w	d93a <shell_fprintf>
	in_use = !in_use;
    4c8a:	2301      	movs	r3, #1
    4c8c:	7033      	strb	r3, [r6, #0]
		shell_print(sh, "Loading...\npress ctrl-x ctrl-q to escape");
    4c8e:	4a0b      	ldr	r2, [pc, #44]	; (4cbc <set_bypass.isra.0+0x4c>)
    4c90:	2108      	movs	r1, #8
    4c92:	4620      	mov	r0, r4
    4c94:	f008 fe51 	bl	d93a <shell_fprintf>
		in_use = true;
    4c98:	2301      	movs	r3, #1
    4c9a:	7033      	strb	r3, [r6, #0]
    4c9c:	e004      	b.n	4ca8 <set_bypass.isra.0+0x38>
	in_use = !in_use;
    4c9e:	f083 0301 	eor.w	r3, r3, #1
    4ca2:	7033      	strb	r3, [r6, #0]
	if (in_use) {
    4ca4:	2b00      	cmp	r3, #0
    4ca6:	d1f2      	bne.n	4c8e <set_bypass.isra.0+0x1e>
	shell_set_bypass(sh, bypass);
    4ca8:	4629      	mov	r1, r5
    4caa:	4620      	mov	r0, r4
}
    4cac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	shell_set_bypass(sh, bypass);
    4cb0:	f008 be65 	b.w	d97e <shell_set_bypass>
    4cb4:	200036d3 	.word	0x200036d3
    4cb8:	00011bdd 	.word	0x00011bdd
    4cbc:	00011c18 	.word	0x00011c18

00004cc0 <bypass_cb>:
{
    4cc0:	b570      	push	{r4, r5, r6, lr}
    4cc2:	4604      	mov	r4, r0
	if (tail == CHAR_CAN && recv[0] == CHAR_DC1) {
    4cc4:	483c      	ldr	r0, [pc, #240]	; (4db8 <bypass_cb+0xf8>)
    4cc6:	7803      	ldrb	r3, [r0, #0]
    4cc8:	2b18      	cmp	r3, #24
    4cca:	d102      	bne.n	4cd2 <bypass_cb+0x12>
    4ccc:	780b      	ldrb	r3, [r1, #0]
    4cce:	2b11      	cmp	r3, #17
    4cd0:	d031      	beq.n	4d36 <bypass_cb+0x76>
    4cd2:	3a01      	subs	r2, #1
    4cd4:	460b      	mov	r3, r1
    4cd6:	188d      	adds	r5, r1, r2
		for (int i = 0; i < (len - 1); i++) {
    4cd8:	42ab      	cmp	r3, r5
    4cda:	d125      	bne.n	4d28 <bypass_cb+0x68>
	tail = recv[len - 1];
    4cdc:	5c8b      	ldrb	r3, [r1, r2]
	if (is_ascii(*recv)) {
    4cde:	780a      	ldrb	r2, [r1, #0]
	tail = recv[len - 1];
    4ce0:	7003      	strb	r3, [r0, #0]
	return (data >= 0x30 && data <= 0x39) || (data >= 0x61 && data <= 0x66) ||
    4ce2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    4ce6:	2b09      	cmp	r3, #9
    4ce8:	4c34      	ldr	r4, [pc, #208]	; (4dbc <bypass_cb+0xfc>)
    4cea:	d904      	bls.n	4cf6 <bypass_cb+0x36>
    4cec:	f022 0320 	bic.w	r3, r2, #32
    4cf0:	3b41      	subs	r3, #65	; 0x41
    4cf2:	2b05      	cmp	r3, #5
    4cf4:	d804      	bhi.n	4d00 <bypass_cb+0x40>
		chunk[chunk_element] = *recv;
    4cf6:	6823      	ldr	r3, [r4, #0]
    4cf8:	4931      	ldr	r1, [pc, #196]	; (4dc0 <bypass_cb+0x100>)
    4cfa:	54ca      	strb	r2, [r1, r3]
		chunk_element++;
    4cfc:	3301      	adds	r3, #1
    4cfe:	6023      	str	r3, [r4, #0]
	if (chunk_element == 2) {
    4d00:	6823      	ldr	r3, [r4, #0]
    4d02:	2b02      	cmp	r3, #2
    4d04:	d134      	bne.n	4d70 <bypass_cb+0xb0>
		byte = (uint8_t)strtoul(chunk, NULL, 16);
    4d06:	2210      	movs	r2, #16
    4d08:	482d      	ldr	r0, [pc, #180]	; (4dc0 <bypass_cb+0x100>)
    4d0a:	2100      	movs	r1, #0
    4d0c:	f009 fead 	bl	ea6a <strtoul>
		*bytes = byte;
    4d10:	4a2c      	ldr	r2, [pc, #176]	; (4dc4 <bypass_cb+0x104>)
		byte = (uint8_t)strtoul(chunk, NULL, 16);
    4d12:	6813      	ldr	r3, [r2, #0]
    4d14:	f803 0b01 	strb.w	r0, [r3], #1
		bytes++;
    4d18:	6013      	str	r3, [r2, #0]
		sum++;
    4d1a:	4a2b      	ldr	r2, [pc, #172]	; (4dc8 <bypass_cb+0x108>)
    4d1c:	6813      	ldr	r3, [r2, #0]
    4d1e:	3301      	adds	r3, #1
    4d20:	6013      	str	r3, [r2, #0]
		chunk_element = 0;
    4d22:	2300      	movs	r3, #0
    4d24:	6023      	str	r3, [r4, #0]
    4d26:	e023      	b.n	4d70 <bypass_cb+0xb0>
			if (recv[i] == CHAR_CAN && recv[i + 1] == CHAR_DC1) {
    4d28:	f813 6b01 	ldrb.w	r6, [r3], #1
    4d2c:	2e18      	cmp	r6, #24
    4d2e:	d1d3      	bne.n	4cd8 <bypass_cb+0x18>
    4d30:	781e      	ldrb	r6, [r3, #0]
    4d32:	2e11      	cmp	r6, #17
    4d34:	d1d0      	bne.n	4cd8 <bypass_cb+0x18>
		shell_print(sh, "Number of bytes read: %d", sum);
    4d36:	4d24      	ldr	r5, [pc, #144]	; (4dc8 <bypass_cb+0x108>)
    4d38:	4a24      	ldr	r2, [pc, #144]	; (4dcc <bypass_cb+0x10c>)
    4d3a:	682b      	ldr	r3, [r5, #0]
    4d3c:	2108      	movs	r1, #8
    4d3e:	4620      	mov	r0, r4
    4d40:	f008 fdfb 	bl	d93a <shell_fprintf>
		set_bypass(sh, NULL);
    4d44:	4620      	mov	r0, r4
    4d46:	2100      	movs	r1, #0
    4d48:	f7ff ff92 	bl	4c70 <set_bypass.isra.0>
		if (!littleendian) {
    4d4c:	4b20      	ldr	r3, [pc, #128]	; (4dd0 <bypass_cb+0x110>)
    4d4e:	7818      	ldrb	r0, [r3, #0]
    4d50:	b970      	cbnz	r0, 4d70 <bypass_cb+0xb0>
    4d52:	4a20      	ldr	r2, [pc, #128]	; (4dd4 <bypass_cb+0x114>)
    4d54:	682b      	ldr	r3, [r5, #0]
    4d56:	6811      	ldr	r1, [r2, #0]
			while (sum > 4) {
    4d58:	2b04      	cmp	r3, #4
    4d5a:	dc0a      	bgt.n	4d72 <bypass_cb+0xb2>
    4d5c:	b108      	cbz	r0, 4d62 <bypass_cb+0xa2>
    4d5e:	6011      	str	r1, [r2, #0]
    4d60:	602b      	str	r3, [r5, #0]
			if (sum % 4 == 0) {
    4d62:	f013 0103 	ands.w	r1, r3, #3
    4d66:	d10b      	bne.n	4d80 <bypass_cb+0xc0>
				*data = __bswap_32(*data);
    4d68:	6812      	ldr	r2, [r2, #0]
    4d6a:	6813      	ldr	r3, [r2, #0]
    4d6c:	ba1b      	rev	r3, r3
				*data = __bswap_16(*data);
    4d6e:	6013      	str	r3, [r2, #0]
}
    4d70:	bd70      	pop	{r4, r5, r6, pc}
				*data = __bswap_32(*data);
    4d72:	6808      	ldr	r0, [r1, #0]
    4d74:	ba00      	rev	r0, r0
    4d76:	f841 0b04 	str.w	r0, [r1], #4
				sum = sum - 4;
    4d7a:	3b04      	subs	r3, #4
				data++;
    4d7c:	2001      	movs	r0, #1
    4d7e:	e7eb      	b.n	4d58 <bypass_cb+0x98>
			} else if (sum % 4 == 2) {
    4d80:	425b      	negs	r3, r3
    4d82:	f003 0303 	and.w	r3, r3, #3
    4d86:	bf58      	it	pl
    4d88:	4259      	negpl	r1, r3
    4d8a:	2902      	cmp	r1, #2
    4d8c:	d104      	bne.n	4d98 <bypass_cb+0xd8>
				*data = __bswap_16(*data);
    4d8e:	6812      	ldr	r2, [r2, #0]
    4d90:	8813      	ldrh	r3, [r2, #0]
    4d92:	ba5b      	rev16	r3, r3
    4d94:	b29b      	uxth	r3, r3
    4d96:	e7ea      	b.n	4d6e <bypass_cb+0xae>
			} else if (sum % 4 == 3) {
    4d98:	2903      	cmp	r1, #3
    4d9a:	d1e9      	bne.n	4d70 <bypass_cb+0xb0>
				*data = __bswap_24(*data);
    4d9c:	6810      	ldr	r0, [r2, #0]
    4d9e:	6802      	ldr	r2, [r0, #0]
    4da0:	0411      	lsls	r1, r2, #16
    4da2:	f3c2 4307 	ubfx	r3, r2, #16, #8
    4da6:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    4daa:	430b      	orrs	r3, r1
    4dac:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    4db0:	4313      	orrs	r3, r2
    4db2:	6003      	str	r3, [r0, #0]
    4db4:	e7dc      	b.n	4d70 <bypass_cb+0xb0>
    4db6:	bf00      	nop
    4db8:	200036d4 	.word	0x200036d4
    4dbc:	20000f24 	.word	0x20000f24
    4dc0:	200036d6 	.word	0x200036d6
    4dc4:	20000f30 	.word	0x20000f30
    4dc8:	20000f28 	.word	0x20000f28
    4dcc:	00011c42 	.word	0x00011c42
    4dd0:	200036d5 	.word	0x200036d5
    4dd4:	20000f2c 	.word	0x20000f2c

00004dd8 <cmd_load>:
{
    4dd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ddc:	460d      	mov	r5, r1
	chunk_element = 0;
    4dde:	492b      	ldr	r1, [pc, #172]	; (4e8c <cmd_load+0xb4>)
	littleendian = false;
    4de0:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 4e90 <cmd_load+0xb8>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    4de4:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 4e94 <cmd_load+0xbc>
			shell_print(sh, "Unknown option \"%s\"", arg);
    4de8:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 4e98 <cmd_load+0xc0>
	littleendian = false;
    4dec:	2300      	movs	r3, #0
	chunk_element = 0;
    4dee:	600b      	str	r3, [r1, #0]
	sum = 0;
    4df0:	492a      	ldr	r1, [pc, #168]	; (4e9c <cmd_load+0xc4>)
	littleendian = false;
    4df2:	f888 3000 	strb.w	r3, [r8]
{
    4df6:	4606      	mov	r6, r0
	sum = 0;
    4df8:	600b      	str	r3, [r1, #0]
	while (argc >= 2) {
    4dfa:	4614      	mov	r4, r2
    4dfc:	2d01      	cmp	r5, #1
    4dfe:	4627      	mov	r7, r4
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    4e00:	f854 af04 	ldr.w	sl, [r4, #4]!
	while (argc >= 2) {
    4e04:	d91e      	bls.n	4e44 <cmd_load+0x6c>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    4e06:	2202      	movs	r2, #2
    4e08:	4649      	mov	r1, r9
    4e0a:	4650      	mov	r0, sl
    4e0c:	f009 ff0c 	bl	ec28 <strncmp>
    4e10:	b980      	cbnz	r0, 4e34 <cmd_load+0x5c>
    4e12:	6822      	ldr	r2, [r4, #0]
    4e14:	7892      	ldrb	r2, [r2, #2]
    4e16:	3a00      	subs	r2, #0
    4e18:	bf18      	it	ne
    4e1a:	2201      	movne	r2, #1
    4e1c:	4492      	add	sl, r2
		if (!strncmp(arg, "-e", 2)) {
    4e1e:	4920      	ldr	r1, [pc, #128]	; (4ea0 <cmd_load+0xc8>)
    4e20:	2202      	movs	r2, #2
    4e22:	4650      	mov	r0, sl
    4e24:	f009 ff00 	bl	ec28 <strncmp>
    4e28:	b930      	cbnz	r0, 4e38 <cmd_load+0x60>
			littleendian = true;
    4e2a:	2301      	movs	r3, #1
    4e2c:	f888 3000 	strb.w	r3, [r8]
		argc--;
    4e30:	3d01      	subs	r5, #1
    4e32:	e7e3      	b.n	4dfc <cmd_load+0x24>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    4e34:	2200      	movs	r2, #0
    4e36:	e7f1      	b.n	4e1c <cmd_load+0x44>
		} else if (!strcmp(arg, "--")) {
    4e38:	4649      	mov	r1, r9
    4e3a:	4650      	mov	r0, sl
    4e3c:	f009 fee8 	bl	ec10 <strcmp>
    4e40:	b9a8      	cbnz	r0, 4e6e <cmd_load+0x96>
			argv++;
    4e42:	3704      	adds	r7, #4
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
    4e44:	2200      	movs	r2, #0
    4e46:	4611      	mov	r1, r2
    4e48:	6878      	ldr	r0, [r7, #4]
    4e4a:	f009 fd99 	bl	e980 <strtol>
    4e4e:	4b15      	ldr	r3, [pc, #84]	; (4ea4 <cmd_load+0xcc>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    4e50:	2200      	movs	r2, #0
    4e52:	4611      	mov	r1, r2
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
    4e54:	6018      	str	r0, [r3, #0]
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    4e56:	6878      	ldr	r0, [r7, #4]
    4e58:	f009 fd92 	bl	e980 <strtol>
    4e5c:	4b12      	ldr	r3, [pc, #72]	; (4ea8 <cmd_load+0xd0>)
	set_bypass(sh, bypass_cb);
    4e5e:	4913      	ldr	r1, [pc, #76]	; (4eac <cmd_load+0xd4>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    4e60:	6018      	str	r0, [r3, #0]
	set_bypass(sh, bypass_cb);
    4e62:	4630      	mov	r0, r6
    4e64:	f7ff ff04 	bl	4c70 <set_bypass.isra.0>
}
    4e68:	2000      	movs	r0, #0
    4e6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (arg[0] == '-' && arg[1]) {
    4e6e:	f89a 2000 	ldrb.w	r2, [sl]
    4e72:	2a2d      	cmp	r2, #45	; 0x2d
    4e74:	d1e6      	bne.n	4e44 <cmd_load+0x6c>
    4e76:	f89a 2001 	ldrb.w	r2, [sl, #1]
    4e7a:	2a00      	cmp	r2, #0
    4e7c:	d0e2      	beq.n	4e44 <cmd_load+0x6c>
			shell_print(sh, "Unknown option \"%s\"", arg);
    4e7e:	4653      	mov	r3, sl
    4e80:	465a      	mov	r2, fp
    4e82:	2108      	movs	r1, #8
    4e84:	4630      	mov	r0, r6
    4e86:	f008 fd58 	bl	d93a <shell_fprintf>
    4e8a:	e7d1      	b.n	4e30 <cmd_load+0x58>
    4e8c:	20000f24 	.word	0x20000f24
    4e90:	200036d5 	.word	0x200036d5
    4e94:	00011c5c 	.word	0x00011c5c
    4e98:	00011c62 	.word	0x00011c62
    4e9c:	20000f28 	.word	0x20000f28
    4ea0:	00011c5f 	.word	0x00011c5f
    4ea4:	20000f30 	.word	0x20000f30
    4ea8:	20000f2c 	.word	0x20000f2c
    4eac:	00004cc1 	.word	0x00004cc1

00004eb0 <cmd_dump>:
{
    4eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	optind = 1;
    4eb4:	4b57      	ldr	r3, [pc, #348]	; (5014 <cmd_dump+0x164>)
	while ((rv = getopt(argc, argv, "a:s:w:")) != -1) {
    4eb6:	f8df a160 	ldr.w	sl, [pc, #352]	; 5018 <cmd_dump+0x168>
{
    4eba:	4691      	mov	r9, r2
	mem_addr_t addr = -1;
    4ebc:	f04f 35ff 	mov.w	r5, #4294967295
	optind = 1;
    4ec0:	2201      	movs	r2, #1
{
    4ec2:	b085      	sub	sp, #20
    4ec4:	4607      	mov	r7, r0
    4ec6:	4688      	mov	r8, r1
	optind = 1;
    4ec8:	601a      	str	r2, [r3, #0]
	size_t width = 32;
    4eca:	2620      	movs	r6, #32
	size_t size = -1;
    4ecc:	462c      	mov	r4, r5
	while ((rv = getopt(argc, argv, "a:s:w:")) != -1) {
    4ece:	4649      	mov	r1, r9
    4ed0:	4652      	mov	r2, sl
    4ed2:	4640      	mov	r0, r8
    4ed4:	f7fc f8c4 	bl	1060 <getopt>
    4ed8:	1c41      	adds	r1, r0, #1
    4eda:	d107      	bne.n	4eec <cmd_dump+0x3c>
	if (addr == -1) {
    4edc:	1c6a      	adds	r2, r5, #1
    4ede:	d14f      	bne.n	4f80 <cmd_dump+0xd0>
		shell_error(sh, "'-a <address>' is mandatory");
    4ee0:	4a4e      	ldr	r2, [pc, #312]	; (501c <cmd_dump+0x16c>)
		shell_error(sh, "'-s <size>' is mandatory");
    4ee2:	2101      	movs	r1, #1
				shell_fprintf(sh, SHELL_NORMAL, "Incorrect data width\n");
    4ee4:	4638      	mov	r0, r7
    4ee6:	f008 fd28 	bl	d93a <shell_fprintf>
    4eea:	e01c      	b.n	4f26 <cmd_dump+0x76>
		switch (rv) {
    4eec:	2873      	cmp	r0, #115	; 0x73
    4eee:	d01f      	beq.n	4f30 <cmd_dump+0x80>
    4ef0:	2877      	cmp	r0, #119	; 0x77
    4ef2:	d031      	beq.n	4f58 <cmd_dump+0xa8>
    4ef4:	2861      	cmp	r0, #97	; 0x61
    4ef6:	d116      	bne.n	4f26 <cmd_dump+0x76>
			addr = (mem_addr_t)strtoul(optarg, NULL, 16);
    4ef8:	f8df b124 	ldr.w	fp, [pc, #292]	; 5020 <cmd_dump+0x170>
    4efc:	2210      	movs	r2, #16
    4efe:	f8db 0000 	ldr.w	r0, [fp]
    4f02:	2100      	movs	r1, #0
    4f04:	f009 fdb1 	bl	ea6a <strtoul>
			if (addr == 0 && errno == EINVAL) {
    4f08:	4605      	mov	r5, r0
    4f0a:	2800      	cmp	r0, #0
    4f0c:	d1df      	bne.n	4ece <cmd_dump+0x1e>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    4f0e:	f005 fd53 	bl	a9b8 <z_impl_z_errno>
    4f12:	6803      	ldr	r3, [r0, #0]
    4f14:	2b16      	cmp	r3, #22
    4f16:	d1da      	bne.n	4ece <cmd_dump+0x1e>
				shell_error(sh, "invalid addr '%s'", optarg);
    4f18:	f8db 3000 	ldr.w	r3, [fp]
    4f1c:	4a41      	ldr	r2, [pc, #260]	; (5024 <cmd_dump+0x174>)
				shell_error(sh, "invalid size '%s'", optarg);
    4f1e:	2101      	movs	r1, #1
    4f20:	4638      	mov	r0, r7
    4f22:	f008 fd0a 	bl	d93a <shell_fprintf>
				return -EINVAL;
    4f26:	f06f 0015 	mvn.w	r0, #21
}
    4f2a:	b005      	add	sp, #20
    4f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			size = (size_t)strtoul(optarg, NULL, 0);
    4f30:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 5020 <cmd_dump+0x170>
    4f34:	2200      	movs	r2, #0
    4f36:	f8db 0000 	ldr.w	r0, [fp]
    4f3a:	4611      	mov	r1, r2
    4f3c:	f009 fd95 	bl	ea6a <strtoul>
			if (size == 0 && errno == EINVAL) {
    4f40:	4604      	mov	r4, r0
    4f42:	2800      	cmp	r0, #0
    4f44:	d1c3      	bne.n	4ece <cmd_dump+0x1e>
    4f46:	f005 fd37 	bl	a9b8 <z_impl_z_errno>
    4f4a:	6803      	ldr	r3, [r0, #0]
    4f4c:	2b16      	cmp	r3, #22
    4f4e:	d1be      	bne.n	4ece <cmd_dump+0x1e>
				shell_error(sh, "invalid size '%s'", optarg);
    4f50:	f8db 3000 	ldr.w	r3, [fp]
    4f54:	4a34      	ldr	r2, [pc, #208]	; (5028 <cmd_dump+0x178>)
    4f56:	e7e2      	b.n	4f1e <cmd_dump+0x6e>
			width = (size_t)strtoul(optarg, NULL, 0);
    4f58:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 5020 <cmd_dump+0x170>
    4f5c:	2200      	movs	r2, #0
    4f5e:	f8db 0000 	ldr.w	r0, [fp]
    4f62:	4611      	mov	r1, r2
    4f64:	f009 fd81 	bl	ea6a <strtoul>
			if (width == 0 && errno == EINVAL) {
    4f68:	4606      	mov	r6, r0
    4f6a:	2800      	cmp	r0, #0
    4f6c:	d1af      	bne.n	4ece <cmd_dump+0x1e>
    4f6e:	f005 fd23 	bl	a9b8 <z_impl_z_errno>
    4f72:	6803      	ldr	r3, [r0, #0]
    4f74:	2b16      	cmp	r3, #22
    4f76:	d1aa      	bne.n	4ece <cmd_dump+0x1e>
				shell_error(sh, "invalid width '%s'", optarg);
    4f78:	f8db 3000 	ldr.w	r3, [fp]
    4f7c:	4a2b      	ldr	r2, [pc, #172]	; (502c <cmd_dump+0x17c>)
    4f7e:	e7ce      	b.n	4f1e <cmd_dump+0x6e>
	if (size == -1) {
    4f80:	1c63      	adds	r3, r4, #1
    4f82:	d101      	bne.n	4f88 <cmd_dump+0xd8>
		shell_error(sh, "'-s <size>' is mandatory");
    4f84:	4a2a      	ldr	r2, [pc, #168]	; (5030 <cmd_dump+0x180>)
    4f86:	e7ac      	b.n	4ee2 <cmd_dump+0x32>
	return memory_dump(sh, addr, size, width);
    4f88:	fa5f f886 	uxtb.w	r8, r6
	const size_t vsize = width / BITS_PER_BYTE;
    4f8c:	f3c6 06c4 	ubfx	r6, r6, #3, #5
	for (; size > 0;
    4f90:	2c00      	cmp	r4, #0
    4f92:	d03c      	beq.n	500e <cmd_dump+0x15e>
    4f94:	466b      	mov	r3, sp
    4f96:	4629      	mov	r1, r5
    4f98:	461a      	mov	r2, r3
		     size >= vsize && data_offset + vsize <= SHELL_HEXDUMP_BYTES_IN_LINE;
    4f9a:	eba6 0c05 	sub.w	ip, r6, r5
    4f9e:	e00c      	b.n	4fba <cmd_dump+0x10a>
			switch (width) {
    4fa0:	f1b8 0f10 	cmp.w	r8, #16
    4fa4:	d01d      	beq.n	4fe2 <cmd_dump+0x132>
    4fa6:	f1b8 0f20 	cmp.w	r8, #32
    4faa:	d020      	beq.n	4fee <cmd_dump+0x13e>
    4fac:	f1b8 0f08 	cmp.w	r8, #8
    4fb0:	d12a      	bne.n	5008 <cmd_dump+0x158>
	return *(volatile uint8_t *)addr;
    4fb2:	7808      	ldrb	r0, [r1, #0]
				data[data_offset] = value;
    4fb4:	7018      	strb	r0, [r3, #0]
				break;
    4fb6:	4431      	add	r1, r6
    4fb8:	4433      	add	r3, r6
		     size >= vsize && data_offset + vsize <= SHELL_HEXDUMP_BYTES_IN_LINE;
    4fba:	42a6      	cmp	r6, r4
    4fbc:	d803      	bhi.n	4fc6 <cmd_dump+0x116>
    4fbe:	eb0c 0001 	add.w	r0, ip, r1
    4fc2:	2810      	cmp	r0, #16
    4fc4:	d9ec      	bls.n	4fa0 <cmd_dump+0xf0>
		shell_hexdump_line(sh, addr, data, MIN(size, SHELL_HEXDUMP_BYTES_IN_LINE));
    4fc6:	2c10      	cmp	r4, #16
    4fc8:	46a1      	mov	r9, r4
    4fca:	bf28      	it	cs
    4fcc:	f04f 0910 	movcs.w	r9, #16
    4fd0:	4629      	mov	r1, r5
    4fd2:	464b      	mov	r3, r9
    4fd4:	4638      	mov	r0, r7
    4fd6:	f000 ff6f 	bl	5eb8 <shell_hexdump_line>
	     addr += SHELL_HEXDUMP_BYTES_IN_LINE, size -= MIN(size, SHELL_HEXDUMP_BYTES_IN_LINE)) {
    4fda:	3510      	adds	r5, #16
    4fdc:	eba4 0409 	sub.w	r4, r4, r9
    4fe0:	e7d6      	b.n	4f90 <cmd_dump+0xe0>
	return *(volatile uint16_t *)addr;
    4fe2:	8808      	ldrh	r0, [r1, #0]
    4fe4:	b280      	uxth	r0, r0
				data[data_offset] = (uint8_t)value;
    4fe6:	7018      	strb	r0, [r3, #0]
				value >>= 8;
    4fe8:	0a00      	lsrs	r0, r0, #8
				data[data_offset + 1] = (uint8_t)value;
    4fea:	7058      	strb	r0, [r3, #1]
				break;
    4fec:	e7e3      	b.n	4fb6 <cmd_dump+0x106>
	return *(volatile uint32_t *)addr;
    4fee:	6808      	ldr	r0, [r1, #0]
				data[data_offset] = (uint8_t)value;
    4ff0:	7018      	strb	r0, [r3, #0]
				value >>= 8;
    4ff2:	ea4f 2e10 	mov.w	lr, r0, lsr #8
				data[data_offset + 1] = (uint8_t)value;
    4ff6:	f883 e001 	strb.w	lr, [r3, #1]
				value >>= 8;
    4ffa:	ea4f 4e10 	mov.w	lr, r0, lsr #16
				value >>= 8;
    4ffe:	0e00      	lsrs	r0, r0, #24
				data[data_offset + 2] = (uint8_t)value;
    5000:	f883 e002 	strb.w	lr, [r3, #2]
				data[data_offset + 3] = (uint8_t)value;
    5004:	70d8      	strb	r0, [r3, #3]
				break;
    5006:	e7d6      	b.n	4fb6 <cmd_dump+0x106>
				shell_fprintf(sh, SHELL_NORMAL, "Incorrect data width\n");
    5008:	4a0a      	ldr	r2, [pc, #40]	; (5034 <cmd_dump+0x184>)
    500a:	2108      	movs	r1, #8
    500c:	e76a      	b.n	4ee4 <cmd_dump+0x34>
	return 0;
    500e:	4620      	mov	r0, r4
	return memory_dump(sh, addr, size, width);
    5010:	e78b      	b.n	4f2a <cmd_dump+0x7a>
    5012:	bf00      	nop
    5014:	20000028 	.word	0x20000028
    5018:	00011cb1 	.word	0x00011cb1
    501c:	00011cb8 	.word	0x00011cb8
    5020:	20000ebc 	.word	0x20000ebc
    5024:	00011c77 	.word	0x00011c77
    5028:	00011c8a 	.word	0x00011c8a
    502c:	00011c9d 	.word	0x00011c9d
    5030:	00011cd5 	.word	0x00011cd5
    5034:	00011ba2 	.word	0x00011ba2

00005038 <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_TRANSPORT_SHELL */
};

static int enable_shell_uart(void)
{
    5038:	b507      	push	{r0, r1, r2, lr}
    503a:	480a      	ldr	r0, [pc, #40]	; (5064 <enable_shell_uart+0x2c>)
    503c:	f00a fb78 	bl	f730 <z_device_is_ready>
		(CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > LOG_LEVEL_DBG) ?
		CONFIG_LOG_MAX_LEVEL : CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL;
	static const struct shell_backend_config_flags cfg_flags =
					SHELL_DEFAULT_BACKEND_CONFIG_FLAGS;

	if (!device_is_ready(dev)) {
    5040:	b160      	cbz	r0, 505c <enable_shell_uart+0x24>

	if (IS_ENABLED(CONFIG_MCUMGR_TRANSPORT_SHELL)) {
		smp_shell_init();
	}

	shell_init(&shell_uart, dev, cfg_flags, log_backend, level);
    5042:	4a09      	ldr	r2, [pc, #36]	; (5068 <enable_shell_uart+0x30>)
    5044:	4907      	ldr	r1, [pc, #28]	; (5064 <enable_shell_uart+0x2c>)
    5046:	6812      	ldr	r2, [r2, #0]
    5048:	4808      	ldr	r0, [pc, #32]	; (506c <enable_shell_uart+0x34>)
    504a:	2304      	movs	r3, #4
    504c:	9300      	str	r3, [sp, #0]
    504e:	2301      	movs	r3, #1
    5050:	f000 fe04 	bl	5c5c <shell_init>

	return 0;
    5054:	2000      	movs	r0, #0
}
    5056:	b003      	add	sp, #12
    5058:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENODEV;
    505c:	f06f 0012 	mvn.w	r0, #18
    5060:	e7f9      	b.n	5056 <enable_shell_uart+0x1e>
    5062:	bf00      	nop
    5064:	0000fe88 	.word	0x0000fe88
    5068:	000106d8 	.word	0x000106d8
    506c:	0001014c 	.word	0x0001014c

00005070 <init>:
{
    5070:	b510      	push	{r4, lr}
    5072:	4614      	mov	r4, r2
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    5074:	6842      	ldr	r2, [r0, #4]
	sh_uart->ctrl_blk->dev = (const struct device *)config;
    5076:	6810      	ldr	r0, [r2, #0]
    5078:	6001      	str	r1, [r0, #0]
	sh_uart->ctrl_blk->handler = evt_handler;
    507a:	6811      	ldr	r1, [r2, #0]
    507c:	604c      	str	r4, [r1, #4]
	sh_uart->ctrl_blk->context = context;
    507e:	6811      	ldr	r1, [r2, #0]
    5080:	608b      	str	r3, [r1, #8]
	const struct device *dev = sh_uart->ctrl_blk->dev;
    5082:	6813      	ldr	r3, [r2, #0]
	ring_buf_reset(sh_uart->tx_ringbuf);
    5084:	68d1      	ldr	r1, [r2, #12]
	const struct device *dev = sh_uart->ctrl_blk->dev;
    5086:	681c      	ldr	r4, [r3, #0]
 *
 * Any value other than 0 makes sense only in validation testing context.
 */
static inline void ring_buf_internal_reset(struct ring_buf *buf, int32_t value)
{
	buf->put_head = buf->put_tail = buf->put_base = value;
    5088:	2300      	movs	r3, #0
    508a:	e9c1 3302 	strd	r3, r3, [r1, #8]
	buf->get_head = buf->get_tail = buf->get_base = value;
    508e:	e9c1 3305 	strd	r3, r3, [r1, #20]
	buf->put_head = buf->put_tail = buf->put_base = value;
    5092:	604b      	str	r3, [r1, #4]
	buf->get_head = buf->get_tail = buf->get_base = value;
    5094:	610b      	str	r3, [r1, #16]
	ring_buf_reset(sh_uart->rx_ringbuf);
    5096:	6911      	ldr	r1, [r2, #16]
	buf->put_head = buf->put_tail = buf->put_base = value;
    5098:	e9c1 3302 	strd	r3, r3, [r1, #8]
	buf->get_head = buf->get_tail = buf->get_base = value;
    509c:	e9c1 3305 	strd	r3, r3, [r1, #20]
	buf->put_head = buf->put_tail = buf->put_base = value;
    50a0:	604b      	str	r3, [r1, #4]
	buf->get_head = buf->get_tail = buf->get_base = value;
    50a2:	610b      	str	r3, [r1, #16]
	sh_uart->ctrl_blk->tx_busy = 0;
    50a4:	6811      	ldr	r1, [r2, #0]
    50a6:	60cb      	str	r3, [r1, #12]
static inline int uart_irq_callback_user_data_set(const struct device *dev,
						  uart_irq_callback_user_data_t cb,
						  void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    50a8:	68a3      	ldr	r3, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    50aa:	b123      	cbz	r3, 50b6 <init+0x46>
    50ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    50ae:	b113      	cbz	r3, 50b6 <init+0x46>
		api->irq_callback_set(dev, cb, user_data);
    50b0:	4904      	ldr	r1, [pc, #16]	; (50c4 <init+0x54>)
    50b2:	4620      	mov	r0, r4
    50b4:	4798      	blx	r3
	if (api->irq_rx_enable != NULL) {
    50b6:	68a3      	ldr	r3, [r4, #8]
    50b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    50ba:	b10b      	cbz	r3, 50c0 <init+0x50>
		api->irq_rx_enable(dev);
    50bc:	4620      	mov	r0, r4
    50be:	4798      	blx	r3
}
    50c0:	2000      	movs	r0, #0
    50c2:	bd10      	pop	{r4, pc}
    50c4:	000050c9 	.word	0x000050c9

000050c8 <uart_callback>:
{
    50c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    50cc:	4604      	mov	r4, r0
    50ce:	b088      	sub	sp, #32
    50d0:	460d      	mov	r5, r1
	if (api->irq_update == NULL) {
    50d2:	6883      	ldr	r3, [r0, #8]
    50d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    50d6:	b103      	cbz	r3, 50da <uart_callback+0x12>
	return api->irq_update(dev);
    50d8:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
    50da:	68a3      	ldr	r3, [r4, #8]
    50dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    50de:	bb03      	cbnz	r3, 5122 <uart_callback+0x5a>
    50e0:	f04f 0800 	mov.w	r8, #0
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
    50e4:	6928      	ldr	r0, [r5, #16]
    50e6:	a901      	add	r1, sp, #4
    50e8:	69c2      	ldr	r2, [r0, #28]
    50ea:	f007 fbe2 	bl	c8b2 <ring_buf_put_claim>
		if (len > 0) {
    50ee:	4607      	mov	r7, r0
    50f0:	2800      	cmp	r0, #0
    50f2:	d037      	beq.n	5164 <uart_callback+0x9c>
	if (api->fifo_read == NULL) {
    50f4:	68a3      	ldr	r3, [r4, #8]
			rd_len = uart_fifo_read(dev, data, len);
    50f6:	9901      	ldr	r1, [sp, #4]
    50f8:	699b      	ldr	r3, [r3, #24]
    50fa:	b343      	cbz	r3, 514e <uart_callback+0x86>
	return api->fifo_read(dev, rx_data, size);
    50fc:	4602      	mov	r2, r0
    50fe:	4620      	mov	r0, r4
    5100:	4798      	blx	r3
			if (rd_len > 0) {
    5102:	4606      	mov	r6, r0
    5104:	b330      	cbz	r0, 5154 <uart_callback+0x8c>
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    5106:	6928      	ldr	r0, [r5, #16]
    5108:	4631      	mov	r1, r6
    510a:	f007 fbf1 	bl	c8f0 <ring_buf_put_finish>
	} while (rd_len && (rd_len == len));
    510e:	42b7      	cmp	r7, r6
				new_data = true;
    5110:	f04f 0801 	mov.w	r8, #1
	} while (rd_len && (rd_len == len));
    5114:	d0e6      	beq.n	50e4 <uart_callback+0x1c>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
    5116:	682b      	ldr	r3, [r5, #0]
    5118:	2000      	movs	r0, #0
    511a:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    511e:	4790      	blx	r2
}
    5120:	e003      	b.n	512a <uart_callback+0x62>
	return api->irq_rx_ready(dev);
    5122:	4620      	mov	r0, r4
    5124:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
    5126:	2800      	cmp	r0, #0
    5128:	d1da      	bne.n	50e0 <uart_callback+0x18>
	if (api->irq_tx_ready == NULL) {
    512a:	68a3      	ldr	r3, [r4, #8]
    512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    512e:	2b00      	cmp	r3, #0
    5130:	d130      	bne.n	5194 <uart_callback+0xcc>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (uint8_t **)&data,
    5132:	68e8      	ldr	r0, [r5, #12]
    5134:	a902      	add	r1, sp, #8
    5136:	69c2      	ldr	r2, [r0, #28]
    5138:	f007 fc0e 	bl	c958 <ring_buf_get_claim>
	if (len) {
    513c:	4606      	mov	r6, r0
    513e:	2800      	cmp	r0, #0
    5140:	d12f      	bne.n	51a2 <uart_callback+0xda>
		uart_irq_tx_disable(dev);
    5142:	4620      	mov	r0, r4
    5144:	f008 fa8d 	bl	d662 <uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
    5148:	682b      	ldr	r3, [r5, #0]
    514a:	60de      	str	r6, [r3, #12]
    514c:	e034      	b.n	51b8 <uart_callback+0xf0>
			rd_len = uart_fifo_read(dev, data, len);
    514e:	f06f 0657 	mvn.w	r6, #87	; 0x57
    5152:	e7d8      	b.n	5106 <uart_callback+0x3e>
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    5154:	4601      	mov	r1, r0
    5156:	6928      	ldr	r0, [r5, #16]
    5158:	f007 fbca 	bl	c8f0 <ring_buf_put_finish>
	if (new_data) {
    515c:	f1b8 0f00 	cmp.w	r8, #0
    5160:	d0e3      	beq.n	512a <uart_callback+0x62>
    5162:	e7d8      	b.n	5116 <uart_callback+0x4e>
			LOG_WRN("RX ring buffer full.");
    5164:	4819      	ldr	r0, [pc, #100]	; (51cc <uart_callback+0x104>)
    5166:	6803      	ldr	r3, [r0, #0]
    5168:	f013 0f06 	tst.w	r3, #6
    516c:	d009      	beq.n	5182 <uart_callback+0xba>
    516e:	4b18      	ldr	r3, [pc, #96]	; (51d0 <uart_callback+0x108>)
    5170:	9307      	str	r3, [sp, #28]
    5172:	2302      	movs	r3, #2
    5174:	9306      	str	r3, [sp, #24]
    5176:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    517a:	463b      	mov	r3, r7
    517c:	aa06      	add	r2, sp, #24
    517e:	f7fe fae7 	bl	3750 <z_impl_z_log_msg_static_create>
	if (api->fifo_read == NULL) {
    5182:	68a3      	ldr	r3, [r4, #8]
    5184:	699b      	ldr	r3, [r3, #24]
    5186:	2b00      	cmp	r3, #0
    5188:	d0e8      	beq.n	515c <uart_callback+0x94>
	return api->fifo_read(dev, rx_data, size);
    518a:	2201      	movs	r2, #1
    518c:	a902      	add	r1, sp, #8
    518e:	4620      	mov	r0, r4
    5190:	4798      	blx	r3
    5192:	e7e3      	b.n	515c <uart_callback+0x94>
	return api->irq_tx_ready(dev);
    5194:	4620      	mov	r0, r4
    5196:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
    5198:	2800      	cmp	r0, #0
    519a:	d1ca      	bne.n	5132 <uart_callback+0x6a>
}
    519c:	b008      	add	sp, #32
    519e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (api->fifo_fill == NULL) {
    51a2:	68a3      	ldr	r3, [r4, #8]
		len = uart_fifo_fill(dev, data, len);
    51a4:	9902      	ldr	r1, [sp, #8]
    51a6:	695b      	ldr	r3, [r3, #20]
    51a8:	b163      	cbz	r3, 51c4 <uart_callback+0xfc>
	return api->fifo_fill(dev, tx_data, size);
    51aa:	4602      	mov	r2, r0
    51ac:	4620      	mov	r0, r4
    51ae:	4798      	blx	r3
    51b0:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
    51b2:	68e8      	ldr	r0, [r5, #12]
    51b4:	f007 fbf0 	bl	c998 <ring_buf_get_finish>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    51b8:	682b      	ldr	r3, [r5, #0]
    51ba:	2001      	movs	r0, #1
    51bc:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    51c0:	4790      	blx	r2
}
    51c2:	e7eb      	b.n	519c <uart_callback+0xd4>
		return -ENOSYS;
    51c4:	f06f 0157 	mvn.w	r1, #87	; 0x57
    51c8:	e7f3      	b.n	51b2 <uart_callback+0xea>
    51ca:	bf00      	nop
    51cc:	20000308 	.word	0x20000308
    51d0:	00011e3b 	.word	0x00011e3b

000051d4 <shell_internal_help_print>:
	sh->ctx->cmd_buff_pos = 0;
	sh->ctx->cmd_buff_len = 0;
}

static void shell_internal_help_print(const struct shell *sh)
{
    51d4:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP)) {
		return;
	}

	z_shell_help_cmd_print(sh, &sh->ctx->active_cmd);
    51d6:	6881      	ldr	r1, [r0, #8]
{
    51d8:	4604      	mov	r4, r0
	z_shell_help_cmd_print(sh, &sh->ctx->active_cmd);
    51da:	3108      	adds	r1, #8
    51dc:	f001 f902 	bl	63e4 <z_shell_help_cmd_print>
	z_shell_help_subcmd_print(sh, &sh->ctx->active_cmd,
    51e0:	68a1      	ldr	r1, [r4, #8]
    51e2:	4a03      	ldr	r2, [pc, #12]	; (51f0 <shell_internal_help_print+0x1c>)
    51e4:	4620      	mov	r0, r4
    51e6:	3108      	adds	r1, #8
				  "Subcommands:\n");
}
    51e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_help_subcmd_print(sh, &sh->ctx->active_cmd,
    51ec:	f001 b89a 	b.w	6324 <z_shell_help_subcmd_print>
    51f0:	00011e7d 	.word	0x00011e7d

000051f4 <z_cursor_next_line_move.isra.0>:
/* Function forcing new line - cannot be replaced with function
 * cursor_down_move.
 */
static inline void z_cursor_next_line_move(const struct shell *sh)
{
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    51f4:	4901      	ldr	r1, [pc, #4]	; (51fc <z_cursor_next_line_move.isra.0+0x8>)
    51f6:	f008 bad8 	b.w	d7aa <z_shell_raw_fprintf>
    51fa:	bf00      	nop
    51fc:	0001188e 	.word	0x0001188e

00005200 <history_handle>:

	z_shell_history_put(sh->history, line, length);
}

static void history_handle(const struct shell *sh, bool up)
{
    5200:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5202:	4604      	mov	r4, r0
	return sh->ctx->ctx.flags.history_exit == 1;
    5204:	6880      	ldr	r0, [r0, #8]
    5206:	f8d0 3264 	ldr.w	r3, [r0, #612]	; 0x264
	if (!IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		return;
	}

	/* Checking if history process has been stopped */
	if (z_flag_history_exit_get(sh)) {
    520a:	075a      	lsls	r2, r3, #29
{
    520c:	460d      	mov	r5, r1
	if (z_flag_history_exit_get(sh)) {
    520e:	d505      	bpl.n	521c <history_handle+0x1c>
		z_flag_history_exit_set(sh, false);
    5210:	2100      	movs	r1, #0
    5212:	f008 fb16 	bl	d842 <z_flag_history_exit_set.isra.0>
		z_shell_history_mode_exit(sh->history);
    5216:	68e0      	ldr	r0, [r4, #12]
    5218:	f009 fab4 	bl	e784 <z_shell_history_mode_exit>
 *
 * @return True if in browsing mode.
 */
static inline bool z_shell_history_active(struct shell_history *history)
{
	return (history->current) ? true : false;
    521c:	68e3      	ldr	r3, [r4, #12]
	}

	/* Backup command if history is entered */
	if (!z_shell_history_active(sh->history)) {
    521e:	68db      	ldr	r3, [r3, #12]
    5220:	b973      	cbnz	r3, 5240 <history_handle+0x40>
		if (up) {
    5222:	2d00      	cmp	r5, #0
    5224:	d039      	beq.n	529a <history_handle+0x9a>
			uint16_t cmd_len = z_shell_strlen(sh->ctx->cmd_buff);
    5226:	68a0      	ldr	r0, [r4, #8]
    5228:	3042      	adds	r0, #66	; 0x42
    522a:	f008 fab8 	bl	d79e <z_shell_strlen>

			if (cmd_len) {
    522e:	68a3      	ldr	r3, [r4, #8]
    5230:	2800      	cmp	r0, #0
    5232:	d034      	beq.n	529e <history_handle+0x9e>
				strcpy(sh->ctx->temp_buff,
    5234:	f103 0142 	add.w	r1, r3, #66	; 0x42
    5238:	f503 70a1 	add.w	r0, r3, #322	; 0x142
    523c:	f009 fcac 	bl	eb98 <strcpy>
		}
	}

	/* Start by checking if history is not empty. */
	history_mode = z_shell_history_get(sh->history, up,
					   sh->ctx->cmd_buff, &len);
    5240:	68a2      	ldr	r2, [r4, #8]
	history_mode = z_shell_history_get(sh->history, up,
    5242:	68e0      	ldr	r0, [r4, #12]
    5244:	f10d 0306 	add.w	r3, sp, #6
    5248:	3242      	adds	r2, #66	; 0x42
    524a:	4629      	mov	r1, r5
    524c:	f009 fa9d 	bl	e78a <z_shell_history_get>

	/* On exiting history mode print backed up command. */
	if (!history_mode) {
    5250:	b958      	cbnz	r0, 526a <history_handle+0x6a>
		strcpy(sh->ctx->cmd_buff, sh->ctx->temp_buff);
    5252:	68a0      	ldr	r0, [r4, #8]
    5254:	f500 71a1 	add.w	r1, r0, #322	; 0x142
    5258:	3042      	adds	r0, #66	; 0x42
    525a:	f009 fc9d 	bl	eb98 <strcpy>
		len = z_shell_strlen(sh->ctx->cmd_buff);
    525e:	68a0      	ldr	r0, [r4, #8]
    5260:	3042      	adds	r0, #66	; 0x42
    5262:	f008 fa9c 	bl	d79e <z_shell_strlen>
    5266:	f8ad 0006 	strh.w	r0, [sp, #6]
	}

	z_shell_op_cursor_home_move(sh);
    526a:	4620      	mov	r0, r4
    526c:	f008 fed0 	bl	e010 <z_shell_op_cursor_home_move>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    5270:	68a3      	ldr	r3, [r4, #8]
    5272:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    5276:	069b      	lsls	r3, r3, #26
    5278:	d503      	bpl.n	5282 <history_handle+0x82>
    527a:	490a      	ldr	r1, [pc, #40]	; (52a4 <history_handle+0xa4>)
    527c:	6960      	ldr	r0, [r4, #20]
    527e:	f008 fa94 	bl	d7aa <z_shell_raw_fprintf>
	z_clear_eos(sh);
	z_shell_print_cmd(sh);
    5282:	4620      	mov	r0, r4
    5284:	f000 ff1a 	bl	60bc <z_shell_print_cmd>
	sh->ctx->cmd_buff_pos = len;
    5288:	68a2      	ldr	r2, [r4, #8]
    528a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    528e:	87d3      	strh	r3, [r2, #62]	; 0x3e
	sh->ctx->cmd_buff_len = len;
    5290:	68a2      	ldr	r2, [r4, #8]
	z_shell_op_cond_next_line(sh);
    5292:	4620      	mov	r0, r4
	sh->ctx->cmd_buff_len = len;
    5294:	8793      	strh	r3, [r2, #60]	; 0x3c
	z_shell_op_cond_next_line(sh);
    5296:	f008 fe26 	bl	dee6 <z_shell_op_cond_next_line>
}
    529a:	b003      	add	sp, #12
    529c:	bd30      	pop	{r4, r5, pc}
				sh->ctx->temp_buff[0] = '\0';
    529e:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
    52a2:	e7cd      	b.n	5240 <history_handle+0x40>
    52a4:	00010217 	.word	0x00010217

000052a8 <execute>:
 * the command handler without any preprocessing.
 * Because of that feature, command buffer is processed argument by argument and
 * decision on further processing is based on currently processed command.
 */
static int execute(const struct shell *sh)
{
    52a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    52ac:	b0a7      	sub	sp, #156	; 0x9c
    52ae:	4604      	mov	r4, r0
	struct shell_static_entry dloc; /* Memory for dynamic commands. */
	const char *argv[CONFIG_SHELL_ARGC_MAX + 1] = {0}; /* +1 reserved for NULL */
    52b0:	2254      	movs	r2, #84	; 0x54
    52b2:	2100      	movs	r1, #0
    52b4:	a811      	add	r0, sp, #68	; 0x44
    52b6:	f009 fcfd 	bl	ecb4 <memset>
	const struct shell_static_entry *parent = selected_cmd_get(sh);
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry help_entry;
	size_t cmd_lvl = 0;
    52ba:	2300      	movs	r3, #0
	size_t cmd_with_handler_lvl = 0;
	bool wildcard_found = false;
	size_t argc = 0, args_left = SIZE_MAX;
    52bc:	e9cd 3305 	strd	r3, r3, [sp, #20]
	char quote;
	const char **argvp;
	char *cmd_buf = sh->ctx->cmd_buff;
    52c0:	68a3      	ldr	r3, [r4, #8]
	bool has_last_handler = false;

	z_shell_op_cursor_end_move(sh);
    52c2:	4620      	mov	r0, r4
	char *cmd_buf = sh->ctx->cmd_buff;
    52c4:	3342      	adds	r3, #66	; 0x42
    52c6:	9302      	str	r3, [sp, #8]
	z_shell_op_cursor_end_move(sh);
    52c8:	f008 fea8 	bl	e01c <z_shell_op_cursor_end_move>
	if (!z_shell_cursor_in_empty_line(sh)) {
    52cc:	4620      	mov	r0, r4
    52ce:	f008 fdf1 	bl	deb4 <z_shell_cursor_in_empty_line>
    52d2:	b910      	cbnz	r0, 52da <execute+0x32>
		z_cursor_next_line_move(sh);
    52d4:	6960      	ldr	r0, [r4, #20]
    52d6:	f7ff ff8d 	bl	51f4 <z_cursor_next_line_move.isra.0>
	}

	memset(&sh->ctx->active_cmd, 0, sizeof(sh->ctx->active_cmd));
    52da:	68a0      	ldr	r0, [r4, #8]
    52dc:	2214      	movs	r2, #20
    52de:	2100      	movs	r1, #0
    52e0:	3008      	adds	r0, #8
    52e2:	f009 fce7 	bl	ecb4 <memset>

	if (IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		z_shell_cmd_trim(sh);
    52e6:	4620      	mov	r0, r4
    52e8:	f008 fd2e 	bl	dd48 <z_shell_cmd_trim>
		history_put(sh, sh->ctx->cmd_buff,
    52ec:	68a1      	ldr	r1, [r4, #8]
	z_shell_history_put(sh->history, line, length);
    52ee:	68e0      	ldr	r0, [r4, #12]
    52f0:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
    52f2:	3142      	adds	r1, #66	; 0x42
		argvp = &argv[1];
		active_cmd_prepare(parent, &sh->ctx->active_cmd, &help_entry,
				   &cmd_lvl, &cmd_with_handler_lvl, &args_left);
		cmd_lvl++;
	} else {
		help_entry.help = NULL;
    52f4:	2600      	movs	r6, #0
	z_shell_history_put(sh->history, line, length);
    52f6:	f009 fa7f 	bl	e7f8 <z_shell_history_put>
		z_shell_wildcard_prepare(sh);
    52fa:	4620      	mov	r0, r4
    52fc:	f009 fafe 	bl	e8fc <z_shell_wildcard_prepare>
	size_t argc = 0, args_left = SIZE_MAX;
    5300:	f04f 37ff 	mov.w	r7, #4294967295
	size_t cmd_with_handler_lvl = 0;
    5304:	46b2      	mov	sl, r6
		z_shell_wildcard_prepare(sh);
    5306:	9603      	str	r6, [sp, #12]
    5308:	f10d 0844 	add.w	r8, sp, #68	; 0x44
    530c:	46b3      	mov	fp, r6
    530e:	4635      	mov	r5, r6
    5310:	46b1      	mov	r9, r6
		argvp = &argv[0];
	}

	/* Below loop is analyzing subcommands of found root command. */
	while ((argc != 1) && (cmd_lvl < CONFIG_SHELL_ARGC_MAX)
		&& args_left > 0) {
    5312:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    5316:	2a01      	cmp	r2, #1
    5318:	d06d      	beq.n	53f6 <execute+0x14e>
	while ((argc != 1) && (cmd_lvl < CONFIG_SHELL_ARGC_MAX)
    531a:	2b13      	cmp	r3, #19
    531c:	d86e      	bhi.n	53fc <execute+0x154>
		&& args_left > 0) {
    531e:	bb5f      	cbnz	r7, 5378 <execute+0xd0>
		z_shell_fprintf(sh, SHELL_ERROR, "%s\n",
				SHELL_MSG_TOO_MANY_ARGS);
		return -ENOEXEC;
	}

	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
    5320:	f1bb 0f00 	cmp.w	fp, #0
    5324:	d00a      	beq.n	533c <execute+0x94>
		z_shell_wildcard_finalize(sh);
    5326:	4620      	mov	r0, r4
    5328:	f009 fb09 	bl	e93e <z_shell_wildcard_finalize>
		 * with all expanded commands. Hence shell_make_argv needs to
		 * be called again.
		 */
		(void)z_shell_make_argv(&cmd_lvl,
					&argv[selected_cmd_get(sh) ? 1 : 0],
					sh->ctx->cmd_buff,
    532c:	68a2      	ldr	r2, [r4, #8]
		(void)z_shell_make_argv(&cmd_lvl,
    532e:	2314      	movs	r3, #20
    5330:	3242      	adds	r2, #66	; 0x42
    5332:	a911      	add	r1, sp, #68	; 0x44
    5334:	eb0d 0003 	add.w	r0, sp, r3
    5338:	f008 fb91 	bl	da5e <z_shell_make_argv>
			cmd_lvl++;
		}
	}

	/* If a command was found */
	if (parent != NULL) {
    533c:	f1b9 0f00 	cmp.w	r9, #0
    5340:	d00c      	beq.n	535c <execute+0xb4>
		/* If the found command uses a raw optional argument and
		 * we have a remaining unprocessed non-null string,
		 * then increment command level so handler receives raw string
		 */
		if (parent->args.optional == SHELL_OPT_ARG_RAW && argv[cmd_lvl] != NULL) {
    5342:	f899 3011 	ldrb.w	r3, [r9, #17]
    5346:	2bfe      	cmp	r3, #254	; 0xfe
    5348:	d108      	bne.n	535c <execute+0xb4>
    534a:	9b05      	ldr	r3, [sp, #20]
    534c:	aa26      	add	r2, sp, #152	; 0x98
    534e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    5352:	f852 2c54 	ldr.w	r2, [r2, #-84]
    5356:	b10a      	cbz	r2, 535c <execute+0xb4>
			cmd_lvl++;
    5358:	3301      	adds	r3, #1
    535a:	9305      	str	r3, [sp, #20]
	if (sh->ctx->active_cmd.handler == NULL) {
    535c:	68a0      	ldr	r0, [r4, #8]
		}
	}

	/* Executing the deepest found handler. */
	return exec_cmd(sh, cmd_lvl - cmd_with_handler_lvl,
    535e:	9d05      	ldr	r5, [sp, #20]
	if (sh->ctx->active_cmd.handler == NULL) {
    5360:	6943      	ldr	r3, [r0, #20]
    5362:	2b00      	cmp	r3, #0
    5364:	f040 80b6 	bne.w	54d4 <execute+0x22c>
			if (help_entry->help == NULL) {
    5368:	b1ce      	cbz	r6, 539e <execute+0xf6>
			if (help_entry->help != sh->ctx->active_cmd.help) {
    536a:	68c3      	ldr	r3, [r0, #12]
    536c:	429e      	cmp	r6, r3
    536e:	d02d      	beq.n	53cc <execute+0x124>
				sh->ctx->active_cmd = *help_entry;
    5370:	960d      	str	r6, [sp, #52]	; 0x34
    5372:	f100 0508 	add.w	r5, r0, #8
    5376:	e024      	b.n	53c2 <execute+0x11a>
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
    5378:	9a02      	ldr	r2, [sp, #8]
    537a:	2302      	movs	r3, #2
    537c:	4641      	mov	r1, r8
    537e:	a806      	add	r0, sp, #24
    5380:	f008 fb6d 	bl	da5e <z_shell_make_argv>
		if (argc == 0) {
    5384:	9906      	ldr	r1, [sp, #24]
		cmd_buf = (char *)argvp[1];
    5386:	f8d8 2004 	ldr.w	r2, [r8, #4]
    538a:	9202      	str	r2, [sp, #8]
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
    538c:	4603      	mov	r3, r0
		if (argc == 0) {
    538e:	b131      	cbz	r1, 539e <execute+0xf6>
		} else if ((argc == 1) && (quote != 0)) {
    5390:	2901      	cmp	r1, #1
    5392:	d10a      	bne.n	53aa <execute+0x102>
    5394:	b148      	cbz	r0, 53aa <execute+0x102>
			z_shell_fprintf(sh, SHELL_ERROR,
    5396:	4a6c      	ldr	r2, [pc, #432]	; (5548 <execute+0x2a0>)
    5398:	4620      	mov	r0, r4
    539a:	f008 feec 	bl	e176 <z_shell_fprintf>
			return -ENOEXEC;
    539e:	f06f 0507 	mvn.w	r5, #7
			&argv[cmd_with_handler_lvl], &help_entry);
}
    53a2:	4628      	mov	r0, r5
    53a4:	b027      	add	sp, #156	; 0x9c
    53a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    53aa:	9b05      	ldr	r3, [sp, #20]
    53ac:	2b00      	cmp	r3, #0
    53ae:	d034      	beq.n	541a <execute+0x172>
		    z_shell_help_request(argvp[0])) {
    53b0:	f8d8 0000 	ldr.w	r0, [r8]
    53b4:	f001 f83a 	bl	642c <z_shell_help_request>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    53b8:	b198      	cbz	r0, 53e2 <execute+0x13a>
			if (help_entry.help) {
    53ba:	b166      	cbz	r6, 53d6 <execute+0x12e>
				sh->ctx->active_cmd = help_entry;
    53bc:	68a5      	ldr	r5, [r4, #8]
    53be:	960d      	str	r6, [sp, #52]	; 0x34
    53c0:	3508      	adds	r5, #8
				sh->ctx->active_cmd = *help_entry;
    53c2:	ae0c      	add	r6, sp, #48	; 0x30
    53c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    53c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    53c8:	6833      	ldr	r3, [r6, #0]
    53ca:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(sh);
    53cc:	4620      	mov	r0, r4
    53ce:	f7ff ff01 	bl	51d4 <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
    53d2:	2501      	movs	r5, #1
    53d4:	e7e5      	b.n	53a2 <execute+0xfa>
			z_shell_fprintf(sh, SHELL_ERROR,
    53d6:	4a5d      	ldr	r2, [pc, #372]	; (554c <execute+0x2a4>)
		z_shell_fprintf(sh, SHELL_ERROR,
    53d8:	2101      	movs	r1, #1
    53da:	4620      	mov	r0, r4
    53dc:	f008 fecb 	bl	e176 <z_shell_fprintf>
		return false;
    53e0:	e7dd      	b.n	539e <execute+0xf6>
		if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && (cmd_lvl > 0)) {
    53e2:	9b05      	ldr	r3, [sp, #20]
    53e4:	b1cb      	cbz	r3, 541a <execute+0x172>
			status = z_shell_wildcard_process(sh, entry,
    53e6:	f8d8 2000 	ldr.w	r2, [r8]
    53ea:	4629      	mov	r1, r5
    53ec:	4620      	mov	r0, r4
    53ee:	f001 f9b7 	bl	6760 <z_shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
    53f2:	2802      	cmp	r0, #2
    53f4:	d109      	bne.n	540a <execute+0x162>
	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
    53f6:	9b05      	ldr	r3, [sp, #20]
    53f8:	2b13      	cmp	r3, #19
    53fa:	d991      	bls.n	5320 <execute+0x78>
    53fc:	9b06      	ldr	r3, [sp, #24]
    53fe:	2b02      	cmp	r3, #2
    5400:	d18e      	bne.n	5320 <execute+0x78>
		z_shell_fprintf(sh, SHELL_ERROR, "%s\n",
    5402:	4b53      	ldr	r3, [pc, #332]	; (5550 <execute+0x2a8>)
    5404:	4a53      	ldr	r2, [pc, #332]	; (5554 <execute+0x2ac>)
    5406:	2101      	movs	r1, #1
    5408:	e7c6      	b.n	5398 <execute+0xf0>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
    540a:	2803      	cmp	r0, #3
    540c:	d005      	beq.n	541a <execute+0x172>
				++cmd_lvl;
    540e:	9b05      	ldr	r3, [sp, #20]
    5410:	3301      	adds	r3, #1
    5412:	9305      	str	r3, [sp, #20]
				wildcard_found = true;
    5414:	f04f 0b01 	mov.w	fp, #1
				continue;
    5418:	e77b      	b.n	5312 <execute+0x6a>
		if (has_last_handler == false) {
    541a:	9b03      	ldr	r3, [sp, #12]
    541c:	b933      	cbnz	r3, 542c <execute+0x184>
			entry = z_shell_find_cmd(parent, argvp[0], &dloc);
    541e:	f8d8 1000 	ldr.w	r1, [r8]
    5422:	aa07      	add	r2, sp, #28
    5424:	4648      	mov	r0, r9
    5426:	f008 fc10 	bl	dc4a <z_shell_find_cmd>
    542a:	4605      	mov	r5, r0
		argvp++;
    542c:	f108 0804 	add.w	r8, r8, #4
		args_left--;
    5430:	3f01      	subs	r7, #1
		if (entry) {
    5432:	b39d      	cbz	r5, 549c <execute+0x1f4>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && found && entry->handler) {
    5434:	68eb      	ldr	r3, [r5, #12]
    5436:	f1bb 0f00 	cmp.w	fp, #0
    543a:	d008      	beq.n	544e <execute+0x1a6>
    543c:	b1f3      	cbz	r3, 547c <execute+0x1d4>
		z_shell_op_cursor_end_move(sh);
    543e:	4620      	mov	r0, r4
    5440:	f008 fdec 	bl	e01c <z_shell_op_cursor_end_move>
		z_shell_op_cond_next_line(sh);
    5444:	4620      	mov	r0, r4
    5446:	f008 fd4e 	bl	dee6 <z_shell_op_cond_next_line>
		z_shell_fprintf(sh, SHELL_ERROR,
    544a:	4a43      	ldr	r2, [pc, #268]	; (5558 <execute+0x2b0>)
    544c:	e7c4      	b.n	53d8 <execute+0x130>
	if (entry->handler) {
    544e:	b1ab      	cbz	r3, 547c <execute+0x1d4>
			active_cmd_prepare(entry, &sh->ctx->active_cmd,
    5450:	68a3      	ldr	r3, [r4, #8]
		*handler_lvl = *lvl;
    5452:	f8dd a014 	ldr.w	sl, [sp, #20]
		*active_cmd = *entry;
    5456:	46ae      	mov	lr, r5
    5458:	f103 0c08 	add.w	ip, r3, #8
    545c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    5460:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    5464:	f8de 3000 	ldr.w	r3, [lr]
    5468:	f8cc 3000 	str.w	r3, [ip]
		if ((entry->subcmd == NULL)
    546c:	68ab      	ldr	r3, [r5, #8]
    546e:	b92b      	cbnz	r3, 547c <execute+0x1d4>
		    && entry->args.optional == SHELL_OPT_ARG_RAW) {
    5470:	7c6b      	ldrb	r3, [r5, #17]
    5472:	2bfe      	cmp	r3, #254	; 0xfe
			*args_left = entry->args.mandatory - 1;
    5474:	bf04      	itt	eq
    5476:	7c2f      	ldrbeq	r7, [r5, #16]
    5478:	f107 37ff 	addeq.w	r7, r7, #4294967295
	if (entry->help) {
    547c:	f8d5 c004 	ldr.w	ip, [r5, #4]
    5480:	f1bc 0f00 	cmp.w	ip, #0
    5484:	d008      	beq.n	5498 <execute+0x1f0>
		*help_entry = *entry;
    5486:	46ae      	mov	lr, r5
    5488:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    548c:	ae0c      	add	r6, sp, #48	; 0x30
    548e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    5490:	f8de 3000 	ldr.w	r3, [lr]
    5494:	6033      	str	r3, [r6, #0]
    5496:	4666      	mov	r6, ip
    5498:	46a9      	mov	r9, r5
    549a:	e003      	b.n	54a4 <execute+0x1fc>
			if (cmd_lvl == 0 &&
    549c:	9b05      	ldr	r3, [sp, #20]
    549e:	b153      	cbz	r3, 54b6 <execute+0x20e>
			has_last_handler = true;
    54a0:	2301      	movs	r3, #1
    54a2:	9303      	str	r3, [sp, #12]
		if (args_left || (argc == 2)) {
    54a4:	9b06      	ldr	r3, [sp, #24]
    54a6:	b917      	cbnz	r7, 54ae <execute+0x206>
    54a8:	2b02      	cmp	r3, #2
    54aa:	f47f af32 	bne.w	5312 <execute+0x6a>
			cmd_lvl++;
    54ae:	9b05      	ldr	r3, [sp, #20]
    54b0:	3301      	adds	r3, #1
    54b2:	9305      	str	r3, [sp, #20]
    54b4:	e72d      	b.n	5312 <execute+0x6a>
	z_shell_fprintf_buffer_flush(sh->fprintf_ctx);
}

static inline bool z_shell_in_select_mode(const struct shell *sh)
{
	return sh->ctx->selected_cmd == NULL ? false : true;
    54b6:	68a3      	ldr	r3, [r4, #8]
    54b8:	69db      	ldr	r3, [r3, #28]
			if (cmd_lvl == 0 &&
    54ba:	b113      	cbz	r3, 54c2 <execute+0x21a>
				(!z_shell_in_select_mode(sh) ||
    54bc:	68db      	ldr	r3, [r3, #12]
    54be:	2b00      	cmp	r3, #0
    54c0:	d1ee      	bne.n	54a0 <execute+0x1f8>
				z_shell_fprintf(sh, SHELL_ERROR,
    54c2:	4b26      	ldr	r3, [pc, #152]	; (555c <execute+0x2b4>)
    54c4:	9300      	str	r3, [sp, #0]
    54c6:	4a26      	ldr	r2, [pc, #152]	; (5560 <execute+0x2b8>)
    54c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    54ca:	2101      	movs	r1, #1
    54cc:	4620      	mov	r0, r4
    54ce:	f008 fe52 	bl	e176 <z_shell_fprintf>
    54d2:	e7e5      	b.n	54a0 <execute+0x1f8>
	if (sh->ctx->active_cmd.args.mandatory) {
    54d4:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(sh, cmd_lvl - cmd_with_handler_lvl,
    54d6:	eba5 050a 	sub.w	r5, r5, sl
	if (sh->ctx->active_cmd.args.mandatory) {
    54da:	b1b3      	cbz	r3, 550a <execute+0x262>
		uint8_t opt8 = sh->ctx->active_cmd.args.optional;
    54dc:	7e41      	ldrb	r1, [r0, #25]
				UINT16_MAX : opt8;
    54de:	f64f 72ff 	movw	r2, #65535	; 0xffff
    54e2:	29ff      	cmp	r1, #255	; 0xff
    54e4:	bf18      	it	ne
    54e6:	460a      	movne	r2, r1
		const bool in_range = IN_RANGE(argc, mand, mand + opt);
    54e8:	429d      	cmp	r5, r3
    54ea:	d302      	bcc.n	54f2 <execute+0x24a>
    54ec:	4413      	add	r3, r2
    54ee:	429d      	cmp	r5, r3
    54f0:	d90b      	bls.n	550a <execute+0x262>
		z_shell_fprintf(sh, SHELL_ERROR,
    54f2:	6883      	ldr	r3, [r0, #8]
    54f4:	4a1b      	ldr	r2, [pc, #108]	; (5564 <execute+0x2bc>)
    54f6:	2101      	movs	r1, #1
    54f8:	4620      	mov	r0, r4
    54fa:	f008 fe3c 	bl	e176 <z_shell_fprintf>
			shell_internal_help_print(sh);
    54fe:	4620      	mov	r0, r4
    5500:	f7ff fe68 	bl	51d4 <shell_internal_help_print>
		return -EINVAL;
    5504:	f06f 0515 	mvn.w	r5, #21
    5508:	e74b      	b.n	53a2 <execute+0xfa>
		z_flag_cmd_ctx_set(sh, true);
    550a:	2101      	movs	r1, #1
    550c:	f008 f98e 	bl	d82c <z_flag_cmd_ctx_set.isra.0>
		k_mutex_unlock(&sh->ctx->wr_mtx);
    5510:	68a0      	ldr	r0, [r4, #8]
    5512:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    5516:	f008 f9ad 	bl	d874 <k_mutex_unlock.isra.0>
		ret_val = sh->ctx->active_cmd.handler(sh, argc,
    551a:	68a3      	ldr	r3, [r4, #8]
    551c:	aa11      	add	r2, sp, #68	; 0x44
    551e:	4629      	mov	r1, r5
    5520:	eb02 028a 	add.w	r2, r2, sl, lsl #2
    5524:	695b      	ldr	r3, [r3, #20]
    5526:	4620      	mov	r0, r4
    5528:	4798      	blx	r3
    552a:	4605      	mov	r5, r0
		k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
    552c:	68a0      	ldr	r0, [r4, #8]
    552e:	f04f 32ff 	mov.w	r2, #4294967295
    5532:	f04f 33ff 	mov.w	r3, #4294967295
    5536:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    553a:	f008 f943 	bl	d7c4 <k_mutex_lock.constprop.0.isra.0>
		z_flag_cmd_ctx_set(sh, false);
    553e:	68a0      	ldr	r0, [r4, #8]
    5540:	2100      	movs	r1, #0
    5542:	f008 f973 	bl	d82c <z_flag_cmd_ctx_set.isra.0>
    5546:	e72c      	b.n	53a2 <execute+0xfa>
    5548:	00011e8b 	.word	0x00011e8b
    554c:	00011e9f 	.word	0x00011e9f
    5550:	00011f00 	.word	0x00011f00
    5554:	00011af0 	.word	0x00011af0
    5558:	00011ebd 	.word	0x00011ebd
    555c:	00011eec 	.word	0x00011eec
    5560:	000121da 	.word	0x000121da
    5564:	00011f24 	.word	0x00011f24

00005568 <state_set.constprop.0>:
static inline void state_set(const struct shell *sh, enum shell_state state)
    5568:	b510      	push	{r4, lr}
	sh->ctx->state = state;
    556a:	6883      	ldr	r3, [r0, #8]
    556c:	2202      	movs	r2, #2
    556e:	711a      	strb	r2, [r3, #4]
	if (state == SHELL_STATE_ACTIVE && !sh->ctx->bypass) {
    5570:	6883      	ldr	r3, [r0, #8]
    5572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
static inline void state_set(const struct shell *sh, enum shell_state state)
    5574:	4604      	mov	r4, r0
	if (state == SHELL_STATE_ACTIVE && !sh->ctx->bypass) {
    5576:	b9bb      	cbnz	r3, 55a8 <state_set.constprop.0+0x40>
		cmd_buffer_clear(sh);
    5578:	f008 f8d4 	bl	d724 <cmd_buffer_clear>
	return sh->ctx->ctx.flags.print_noinit == 1;
    557c:	6883      	ldr	r3, [r0, #8]
    557e:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (z_flag_print_noinit_get(sh)) {
    5582:	04db      	lsls	r3, r3, #19
    5584:	d50b      	bpl.n	559e <state_set.constprop.0+0x36>
			z_shell_fprintf(sh, SHELL_WARNING, "%s",
    5586:	2103      	movs	r1, #3
    5588:	4b08      	ldr	r3, [pc, #32]	; (55ac <state_set.constprop.0+0x44>)
    558a:	4a09      	ldr	r2, [pc, #36]	; (55b0 <state_set.constprop.0+0x48>)
    558c:	f008 fdf3 	bl	e176 <z_shell_fprintf>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
    5590:	68a0      	ldr	r0, [r4, #8]
    5592:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    5596:	f500 7019 	add.w	r0, r0, #612	; 0x264
    559a:	f008 f8db 	bl	d754 <atomic_and>
		z_shell_print_prompt_and_cmd(sh);
    559e:	4620      	mov	r0, r4
}
    55a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_print_prompt_and_cmd(sh);
    55a4:	f000 bea0 	b.w	62e8 <z_shell_print_prompt_and_cmd>
}
    55a8:	bd10      	pop	{r4, pc}
    55aa:	bf00      	nop
    55ac:	00011f3f 	.word	0x00011f3f
    55b0:	00011ae4 	.word	0x00011ae4

000055b4 <shell_process>:

	return 0;
}

void shell_process(const struct shell *sh)
{
    55b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    55b8:	4604      	mov	r4, r0
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, processing, val, ret);
    55ba:	6880      	ldr	r0, [r0, #8]
    55bc:	b0b1      	sub	sp, #196	; 0xc4
    55be:	2101      	movs	r1, #1
    55c0:	f500 7019 	add.w	r0, r0, #612	; 0x264
    55c4:	f008 f8b7 	bl	d736 <atomic_or>
	__ASSERT_NO_MSG(sh->ctx);

	/* atomically set the processing flag */
	z_flag_processing_set(sh, true);

	switch (sh->ctx->state) {
    55c8:	68a3      	ldr	r3, [r4, #8]
    55ca:	791b      	ldrb	r3, [r3, #4]
    55cc:	2b02      	cmp	r3, #2
    55ce:	d120      	bne.n	5612 <shell_process+0x5e>
	size_t count = 0;
    55d0:	2300      	movs	r3, #0
    55d2:	9309      	str	r3, [sp, #36]	; 0x24
		shell_bypass_cb_t bypass = sh->ctx->bypass;
    55d4:	68a3      	ldr	r3, [r4, #8]
			(void)sh->iface->api->read(sh->iface, buf,
    55d6:	6860      	ldr	r0, [r4, #4]
		shell_bypass_cb_t bypass = sh->ctx->bypass;
    55d8:	6b9e      	ldr	r6, [r3, #56]	; 0x38
			(void)sh->iface->api->read(sh->iface, buf,
    55da:	6803      	ldr	r3, [r0, #0]
    55dc:	691d      	ldr	r5, [r3, #16]
    55de:	ab09      	add	r3, sp, #36	; 0x24
		if (bypass) {
    55e0:	b30e      	cbz	r6, 5626 <shell_process+0x72>
			(void)sh->iface->api->read(sh->iface, buf,
    55e2:	2210      	movs	r2, #16
    55e4:	a91b      	add	r1, sp, #108	; 0x6c
    55e6:	47a8      	blx	r5
			if (count) {
    55e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    55ea:	b193      	cbz	r3, 5612 <shell_process+0x5e>
				z_flag_cmd_ctx_set(sh, true);
    55ec:	68a0      	ldr	r0, [r4, #8]
    55ee:	2101      	movs	r1, #1
    55f0:	f008 f91c 	bl	d82c <z_flag_cmd_ctx_set.isra.0>
				bypass(sh, buf, count);
    55f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    55f6:	a91b      	add	r1, sp, #108	; 0x6c
    55f8:	4620      	mov	r0, r4
    55fa:	47b0      	blx	r6
				z_flag_cmd_ctx_set(sh, false);
    55fc:	68a0      	ldr	r0, [r4, #8]
    55fe:	2100      	movs	r1, #0
    5600:	f008 f914 	bl	d82c <z_flag_cmd_ctx_set.isra.0>
				if (!(volatile shell_bypass_cb_t *)sh->ctx->bypass) {
    5604:	68a3      	ldr	r3, [r4, #8]
    5606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5608:	2b00      	cmp	r3, #0
    560a:	d1e3      	bne.n	55d4 <shell_process+0x20>
					state_set(sh, SHELL_STATE_ACTIVE);
    560c:	4620      	mov	r0, r4
    560e:	f7ff ffab 	bl	5568 <state_set.constprop.0>
    5612:	68a0      	ldr	r0, [r4, #8]
    5614:	f06f 0101 	mvn.w	r1, #1
    5618:	f500 7019 	add.w	r0, r0, #612	; 0x264
		break;
	}

	/* atomically clear the processing flag */
	z_flag_processing_set(sh, false);
}
    561c:	b031      	add	sp, #196	; 0xc4
    561e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5622:	f008 b897 	b.w	d754 <atomic_and>
		(void)sh->iface->api->read(sh->iface, &data,
    5626:	2201      	movs	r2, #1
    5628:	f10d 0123 	add.w	r1, sp, #35	; 0x23
    562c:	47a8      	blx	r5
		if (count == 0) {
    562e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5630:	2b00      	cmp	r3, #0
    5632:	d0ee      	beq.n	5612 <shell_process+0x5e>
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
    5634:	f99d 2023 	ldrsb.w	r2, [sp, #35]	; 0x23
		if (ascii_filter(data) != 0) {
    5638:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
		switch (sh->ctx->receive_state) {
    563c:	68a3      	ldr	r3, [r4, #8]
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
    563e:	2a00      	cmp	r2, #0
    5640:	dbc8      	blt.n	55d4 <shell_process+0x20>
		switch (sh->ctx->receive_state) {
    5642:	795a      	ldrb	r2, [r3, #5]
    5644:	2a03      	cmp	r2, #3
    5646:	f200 828f 	bhi.w	5b68 <shell_process+0x5b4>
    564a:	e8df f012 	tbh	[pc, r2, lsl #1]
    564e:	0004      	.short	0x0004
    5650:	0293027c 	.word	0x0293027c
    5654:	028d      	.short	0x028d
	if ((data != '\r') && (data != '\n')) {
    5656:	290d      	cmp	r1, #13
    5658:	d07a      	beq.n	5750 <shell_process+0x19c>
    565a:	290a      	cmp	r1, #10
    565c:	d058      	beq.n	5710 <shell_process+0x15c>
	sh->ctx->ctx.flags.last_nl = val;
    565e:	f8b3 2264 	ldrh.w	r2, [r3, #612]	; 0x264
    5662:	f36f 02ca 	bfc	r2, #3, #8
    5666:	f8a3 2264 	strh.w	r2, [r3, #612]	; 0x264
			switch (data) {
    566a:	2909      	cmp	r1, #9
    566c:	68a0      	ldr	r0, [r4, #8]
    566e:	f000 8082 	beq.w	5776 <shell_process+0x1c2>
    5672:	d83d      	bhi.n	56f0 <shell_process+0x13c>
    5674:	2900      	cmp	r1, #0
    5676:	d0ad      	beq.n	55d4 <shell_process+0x20>
    5678:	2908      	cmp	r1, #8
    567a:	f000 81f3 	beq.w	5a64 <shell_process+0x4b0>
    567e:	4603      	mov	r3, r0
	return sh->ctx->cfg.flags.echo == 1;
    5680:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
				} else if (z_flag_echo_get(sh)) {
    5684:	0792      	lsls	r2, r2, #30
    5686:	d5a5      	bpl.n	55d4 <shell_process+0x20>
	switch (data) {
    5688:	3901      	subs	r1, #1
    568a:	2916      	cmp	r1, #22
    568c:	d8a2      	bhi.n	55d4 <shell_process+0x20>
    568e:	a201      	add	r2, pc, #4	; (adr r2, 5694 <shell_process+0xe0>)
    5690:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
    5694:	00005c15 	.word	0x00005c15
    5698:	00005a9f 	.word	0x00005a9f
    569c:	00005aa7 	.word	0x00005aa7
    56a0:	00005a97 	.word	0x00005a97
    56a4:	00005c09 	.word	0x00005c09
    56a8:	00005ac5 	.word	0x00005ac5
    56ac:	000055d5 	.word	0x000055d5
    56b0:	000055d5 	.word	0x000055d5
    56b4:	000055d5 	.word	0x000055d5
    56b8:	000055d5 	.word	0x000055d5
    56bc:	00005acd 	.word	0x00005acd
    56c0:	00005ad5 	.word	0x00005ad5
    56c4:	000055d5 	.word	0x000055d5
    56c8:	00005aff 	.word	0x00005aff
    56cc:	000055d5 	.word	0x000055d5
    56d0:	00005b09 	.word	0x00005b09
    56d4:	000055d5 	.word	0x000055d5
    56d8:	000055d5 	.word	0x000055d5
    56dc:	000055d5 	.word	0x000055d5
    56e0:	000055d5 	.word	0x000055d5
    56e4:	00005b0d 	.word	0x00005b0d
    56e8:	000055d5 	.word	0x000055d5
    56ec:	00005b37 	.word	0x00005b37
    56f0:	291b      	cmp	r1, #27
    56f2:	d03d      	beq.n	5770 <shell_process+0x1bc>
    56f4:	297f      	cmp	r1, #127	; 0x7f
    56f6:	f000 81c1 	beq.w	5a7c <shell_process+0x4c8>
    56fa:	f1a1 0220 	sub.w	r2, r1, #32
				if (isprint((int) data) != 0) {
    56fe:	2a5e      	cmp	r2, #94	; 0x5e
    5700:	4603      	mov	r3, r0
    5702:	d8bd      	bhi.n	5680 <shell_process+0xcc>
					z_flag_history_exit_set(sh, true);
    5704:	2101      	movs	r1, #1
    5706:	f008 f89c 	bl	d842 <z_flag_history_exit_set.isra.0>
					z_shell_op_char_insert(sh, data);
    570a:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
    570e:	e0e4      	b.n	58da <shell_process+0x326>
	return sh->ctx->ctx.flags.last_nl;
    5710:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
    5714:	f3c2 02c7 	ubfx	r2, r2, #3, #8
	if ((z_flag_last_nl_get(sh) == 0U) ||
    5718:	b12a      	cbz	r2, 5726 <shell_process+0x172>
    571a:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
    571e:	f3c2 02c7 	ubfx	r2, r2, #3, #8
    5722:	2a0a      	cmp	r2, #10
    5724:	d1ac      	bne.n	5680 <shell_process+0xcc>
	sh->ctx->ctx.flags.last_nl = val;
    5726:	f8b3 2264 	ldrh.w	r2, [r3, #612]	; 0x264
    572a:	f361 02ca 	bfi	r2, r1, #3, #8
    572e:	f8a3 2264 	strh.w	r2, [r3, #612]	; 0x264
				if (!sh->ctx->cmd_buff_len) {
    5732:	68a0      	ldr	r0, [r4, #8]
    5734:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
    5736:	b9b9      	cbnz	r1, 5768 <shell_process+0x1b4>
	z_flag_history_exit_set(sh, false);
    5738:	f008 f883 	bl	d842 <z_flag_history_exit_set.isra.0>
	z_shell_history_mode_exit(sh->history);
    573c:	68e0      	ldr	r0, [r4, #12]
    573e:	f009 f821 	bl	e784 <z_shell_history_mode_exit>
					z_cursor_next_line_move(sh);
    5742:	6960      	ldr	r0, [r4, #20]
    5744:	f7ff fd56 	bl	51f4 <z_cursor_next_line_move.isra.0>
		state_set(sh, SHELL_STATE_ACTIVE);
    5748:	4620      	mov	r0, r4
    574a:	f7ff ff0d 	bl	5568 <state_set.constprop.0>
		break;
    574e:	e741      	b.n	55d4 <shell_process+0x20>
	return sh->ctx->ctx.flags.last_nl;
    5750:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
    5754:	f3c2 02c7 	ubfx	r2, r2, #3, #8
	if ((z_flag_last_nl_get(sh) == 0U) ||
    5758:	2a00      	cmp	r2, #0
    575a:	d0e4      	beq.n	5726 <shell_process+0x172>
    575c:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
    5760:	f3c2 02c7 	ubfx	r2, r2, #3, #8
    5764:	2a0d      	cmp	r2, #13
    5766:	e7dd      	b.n	5724 <shell_process+0x170>
					(void)execute(sh);
    5768:	4620      	mov	r0, r4
    576a:	f7ff fd9d 	bl	52a8 <execute>
				state_set(sh, SHELL_STATE_ACTIVE);
    576e:	e7eb      	b.n	5748 <shell_process+0x194>
	sh->ctx->receive_state = state;
    5770:	2301      	movs	r3, #1
    5772:	7143      	strb	r3, [r0, #5]
}
    5774:	e72e      	b.n	55d4 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
    5776:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(sh) &&
    577a:	079b      	lsls	r3, r3, #30
    577c:	f57f af2a 	bpl.w	55d4 <shell_process+0x20>
					z_flag_history_exit_set(sh, true);
    5780:	2101      	movs	r1, #1
    5782:	f008 f85e 	bl	d842 <z_flag_history_exit_set.isra.0>
			sh->ctx->cmd_buff_len;
    5786:	68a0      	ldr	r0, [r4, #8]
	if (compl_space == 0U) {
    5788:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    578a:	2bff      	cmp	r3, #255	; 0xff
    578c:	f43f af22 	beq.w	55d4 <shell_process+0x20>
	memcpy(sh->ctx->temp_buff, sh->ctx->cmd_buff,
    5790:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
    5792:	f100 0142 	add.w	r1, r0, #66	; 0x42
    5796:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    579a:	f009 fa80 	bl	ec9e <memcpy>
	sh->ctx->temp_buff[sh->ctx->cmd_buff_pos] = '\0';
    579e:	68a3      	ldr	r3, [r4, #8]
    57a0:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    57a2:	4413      	add	r3, r2
    57a4:	2500      	movs	r5, #0
    57a6:	f883 5142 	strb.w	r5, [r3, #322]	; 0x142
	(void)z_shell_make_argv(argc, *argv, sh->ctx->temp_buff,
    57aa:	68a2      	ldr	r2, [r4, #8]
    57ac:	a91b      	add	r1, sp, #108	; 0x6c
    57ae:	2314      	movs	r3, #20
    57b0:	f502 72a1 	add.w	r2, r2, #322	; 0x142
    57b4:	a80b      	add	r0, sp, #44	; 0x2c
    57b6:	f008 f952 	bl	da5e <z_shell_make_argv>
	if (*argc > CONFIG_SHELL_ARGC_MAX) {
    57ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
    57bc:	2914      	cmp	r1, #20
    57be:	f63f af09 	bhi.w	55d4 <shell_process+0x20>
	(*argv)[*argc] = NULL;
    57c2:	ab30      	add	r3, sp, #192	; 0xc0
    57c4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    57c8:	f843 5c54 	str.w	r5, [r3, #-84]
	int space = isspace((int)sh->ctx->cmd_buff[
    57cc:	68a3      	ldr	r3, [r4, #8]
						sh->ctx->cmd_buff_pos - 1]);
    57ce:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
	int space = isspace((int)sh->ctx->cmd_buff[
    57d0:	4413      	add	r3, r2
    57d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    57d6:	2b20      	cmp	r3, #32
    57d8:	d002      	beq.n	57e0 <shell_process+0x22c>
    57da:	3b09      	subs	r3, #9
    57dc:	2b04      	cmp	r3, #4
    57de:	d846      	bhi.n	586e <shell_process+0x2ba>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
    57e0:	2900      	cmp	r1, #0
    57e2:	d147      	bne.n	5874 <shell_process+0x2c0>
		*complete_arg_idx = Z_SHELL_CMD_ROOT_LVL;
    57e4:	2500      	movs	r5, #0
    57e6:	950a      	str	r5, [sp, #40]	; 0x28
	find_completion_candidates(sh, cmd, argv[arg_idx], &first, &cnt,
    57e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    57ea:	aa30      	add	r2, sp, #192	; 0xc0
    57ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	*cnt = 0;
    57f0:	2600      	movs	r6, #0
	find_completion_candidates(sh, cmd, argv[arg_idx], &first, &cnt,
    57f2:	f853 ac54 	ldr.w	sl, [r3, #-84]
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
    57f6:	4650      	mov	r0, sl
    57f8:	f007 ffd1 	bl	d79e <z_shell_strlen>
	*longest = 0U;
    57fc:	46b3      	mov	fp, r6
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
    57fe:	9002      	str	r0, [sp, #8]
	size_t first = 0;
    5800:	46b0      	mov	r8, r6
	size_t idx = 0;
    5802:	4637      	mov	r7, r6
	while ((candidate = z_shell_cmd_get(cmd, idx, &dloc)) != NULL) {
    5804:	aa16      	add	r2, sp, #88	; 0x58
    5806:	4639      	mov	r1, r7
    5808:	4628      	mov	r0, r5
    580a:	f000 fbdf 	bl	5fcc <z_shell_cmd_get>
    580e:	4681      	mov	r9, r0
    5810:	2800      	cmp	r0, #0
    5812:	d13b      	bne.n	588c <shell_process+0x2d8>
	if (cnt == 1) {
    5814:	2e01      	cmp	r6, #1
    5816:	d164      	bne.n	58e2 <shell_process+0x32e>
		autocomplete(sh, cmd, argv[arg_idx], first);
    5818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    581a:	aa30      	add	r2, sp, #192	; 0xc0
    581c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	uint16_t arg_len = z_shell_strlen(arg);
    5820:	f853 0c54 	ldr.w	r0, [r3, #-84]
    5824:	f007 ffbb 	bl	d79e <z_shell_strlen>
	match = z_shell_cmd_get(cmd, subcmd_idx, &sh->ctx->active_cmd);
    5828:	68a2      	ldr	r2, [r4, #8]
	uint16_t arg_len = z_shell_strlen(arg);
    582a:	4606      	mov	r6, r0
	match = z_shell_cmd_get(cmd, subcmd_idx, &sh->ctx->active_cmd);
    582c:	3208      	adds	r2, #8
    582e:	4641      	mov	r1, r8
    5830:	4628      	mov	r0, r5
    5832:	f000 fbcb 	bl	5fcc <z_shell_cmd_get>
    5836:	4605      	mov	r5, r0
	cmd_len = z_shell_strlen(match->syntax);
    5838:	6800      	ldr	r0, [r0, #0]
    583a:	f007 ffb0 	bl	d79e <z_shell_strlen>
	if (cmd_len != arg_len) {
    583e:	4286      	cmp	r6, r0
    5840:	d006      	beq.n	5850 <shell_process+0x29c>
		z_shell_op_completion_insert(sh,
    5842:	6829      	ldr	r1, [r5, #0]
    5844:	1b82      	subs	r2, r0, r6
    5846:	b292      	uxth	r2, r2
    5848:	4431      	add	r1, r6
    584a:	4620      	mov	r0, r4
    584c:	f008 fcd3 	bl	e1f6 <z_shell_op_completion_insert>
	if (isspace((int) sh->ctx->cmd_buff[
    5850:	68a0      	ldr	r0, [r4, #8]
					sh->ctx->cmd_buff_pos]) == 0) {
    5852:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
	if (isspace((int) sh->ctx->cmd_buff[
    5854:	4403      	add	r3, r0
    5856:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    585a:	2b20      	cmp	r3, #32
    585c:	d002      	beq.n	5864 <shell_process+0x2b0>
    585e:	3b09      	subs	r3, #9
    5860:	2b04      	cmp	r3, #4
    5862:	d829      	bhi.n	58b8 <shell_process+0x304>
		z_shell_op_cursor_move(sh, 1);
    5864:	2101      	movs	r1, #1
    5866:	4620      	mov	r0, r4
    5868:	f008 fb70 	bl	df4c <z_shell_op_cursor_move>
    586c:	e6b2      	b.n	55d4 <shell_process+0x20>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
    586e:	2901      	cmp	r1, #1
    5870:	d9b8      	bls.n	57e4 <shell_process+0x230>
	search_argc = space ? *argc : *argc - 1;
    5872:	3901      	subs	r1, #1
	*cmd = z_shell_get_last_command(selected_cmd_get(sh), search_argc,
    5874:	2000      	movs	r0, #0
    5876:	ab0c      	add	r3, sp, #48	; 0x30
    5878:	9300      	str	r3, [sp, #0]
    587a:	9001      	str	r0, [sp, #4]
    587c:	ab0a      	add	r3, sp, #40	; 0x28
    587e:	aa1b      	add	r2, sp, #108	; 0x6c
    5880:	f008 fa03 	bl	dc8a <z_shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
    5884:	4605      	mov	r5, r0
    5886:	2800      	cmp	r0, #0
    5888:	d1ae      	bne.n	57e8 <shell_process+0x234>
    588a:	e6a3      	b.n	55d4 <shell_process+0x20>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    588c:	9a02      	ldr	r2, [sp, #8]
    588e:	f8d9 0000 	ldr.w	r0, [r9]
    5892:	4651      	mov	r1, sl
    5894:	f009 f9c8 	bl	ec28 <strncmp>
		if (is_candidate) {
    5898:	b960      	cbnz	r0, 58b4 <shell_process+0x300>
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
    589a:	f8d9 0000 	ldr.w	r0, [r9]
    589e:	f009 f9a7 	bl	ebf0 <strlen>
    58a2:	4558      	cmp	r0, fp
    58a4:	bf38      	it	cc
    58a6:	4658      	movcc	r0, fp
    58a8:	fa1f fb80 	uxth.w	fp, r0
				*first_idx = idx;
    58ac:	2e00      	cmp	r6, #0
    58ae:	bf08      	it	eq
    58b0:	46b8      	moveq	r8, r7
			(*cnt)++;
    58b2:	3601      	adds	r6, #1
		idx++;
    58b4:	3701      	adds	r7, #1
    58b6:	e7a5      	b.n	5804 <shell_process+0x250>
	return sh->ctx->cfg.flags.insert_mode == 1;
    58b8:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		if (z_flag_insert_mode_get(sh)) {
    58bc:	07df      	lsls	r7, r3, #31
    58be:	d50b      	bpl.n	58d8 <shell_process+0x324>
			z_flag_insert_mode_set(sh, false);
    58c0:	2100      	movs	r1, #0
    58c2:	f007 ffc8 	bl	d856 <z_flag_insert_mode_set.isra.0>
			z_shell_op_char_insert(sh, ' ');
    58c6:	2120      	movs	r1, #32
    58c8:	4620      	mov	r0, r4
    58ca:	f000 fcd7 	bl	627c <z_shell_op_char_insert>
			z_flag_insert_mode_set(sh, true);
    58ce:	68a0      	ldr	r0, [r4, #8]
    58d0:	2101      	movs	r1, #1
				z_flag_insert_mode_set(sh, !status);
    58d2:	f007 ffc0 	bl	d856 <z_flag_insert_mode_set.isra.0>
				break;
    58d6:	e67d      	b.n	55d4 <shell_process+0x20>
			z_shell_op_char_insert(sh, ' ');
    58d8:	2120      	movs	r1, #32
					z_shell_op_char_insert(sh, data);
    58da:	4620      	mov	r0, r4
    58dc:	f000 fcce 	bl	627c <z_shell_op_char_insert>
    58e0:	e678      	b.n	55d4 <shell_process+0x20>
	} else if (cnt > 1) {
    58e2:	f67f ae77 	bls.w	55d4 <shell_process+0x20>
		tab_options_print(sh, cmd, argv[arg_idx], first, cnt,
    58e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    58e8:	ab30      	add	r3, sp, #192	; 0xc0
    58ea:	eb03 0282 	add.w	r2, r3, r2, lsl #2
		sh->ctx->vt100_ctx.printed_cmd = 0;
    58ee:	46c2      	mov	sl, r8
		tab_options_print(sh, cmd, argv[arg_idx], first, cnt,
    58f0:	f852 3c54 	ldr.w	r3, [r2, #-84]
    58f4:	9302      	str	r3, [sp, #8]
	size_t str_len = z_shell_strlen(str);
    58f6:	4618      	mov	r0, r3
    58f8:	f007 ff51 	bl	d79e <z_shell_strlen>
		sh->ctx->vt100_ctx.printed_cmd = 0;
    58fc:	68a2      	ldr	r2, [r4, #8]
	size_t str_len = z_shell_strlen(str);
    58fe:	9004      	str	r0, [sp, #16]
		sh->ctx->vt100_ctx.printed_cmd = 0;
    5900:	f8a2 9030 	strh.w	r9, [r2, #48]	; 0x30
    5904:	9603      	str	r6, [sp, #12]
		match = z_shell_cmd_get(cmd, idx, &sh->ctx->active_cmd);
    5906:	68a2      	ldr	r2, [r4, #8]
    5908:	4651      	mov	r1, sl
    590a:	3208      	adds	r2, #8
    590c:	4628      	mov	r0, r5
    590e:	f000 fb5d 	bl	5fcc <z_shell_cmd_get>
		if (str && match->syntax &&
    5912:	9b02      	ldr	r3, [sp, #8]
		match = z_shell_cmd_get(cmd, idx, &sh->ctx->active_cmd);
    5914:	4607      	mov	r7, r0
		idx++;
    5916:	f10a 0a01 	add.w	sl, sl, #1
		if (str && match->syntax &&
    591a:	2b00      	cmp	r3, #0
    591c:	d151      	bne.n	59c2 <shell_process+0x40e>
		tab_item_print(sh, match->syntax, longest);
    591e:	683b      	ldr	r3, [r7, #0]
	if (option == NULL) {
    5920:	2b00      	cmp	r3, #0
    5922:	d158      	bne.n	59d6 <shell_process+0x422>
		sh->ctx->vt100_ctx.printed_cmd = 0;
    5924:	68a2      	ldr	r2, [r4, #8]
    5926:	8613      	strh	r3, [r2, #48]	; 0x30
	while (cnt) {
    5928:	9b03      	ldr	r3, [sp, #12]
    592a:	3b01      	subs	r3, #1
    592c:	9303      	str	r3, [sp, #12]
    592e:	d1ea      	bne.n	5906 <shell_process+0x352>
	z_cursor_next_line_move(sh);
    5930:	6960      	ldr	r0, [r4, #20]
    5932:	f7ff fc5f 	bl	51f4 <z_cursor_next_line_move.isra.0>
	z_shell_print_prompt_and_cmd(sh);
    5936:	4620      	mov	r0, r4
    5938:	f000 fcd6 	bl	62e8 <z_shell_print_prompt_and_cmd>
		partial_autocomplete(sh, cmd, argv[arg_idx], first, cnt);
    593c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    593e:	aa30      	add	r2, sp, #192	; 0xc0
    5940:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	size_t idx = first + 1;
    5944:	f108 0a01 	add.w	sl, r8, #1
	uint16_t arg_len = z_shell_strlen(arg);
    5948:	f853 0c54 	ldr.w	r0, [r3, #-84]
    594c:	f007 ff27 	bl	d79e <z_shell_strlen>
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
    5950:	4641      	mov	r1, r8
    5952:	aa11      	add	r2, sp, #68	; 0x44
	uint16_t arg_len = z_shell_strlen(arg);
    5954:	4681      	mov	r9, r0
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
    5956:	4628      	mov	r0, r5
    5958:	f000 fb38 	bl	5fcc <z_shell_cmd_get>
    595c:	4607      	mov	r7, r0
	strncpy(sh->ctx->temp_buff, match->syntax,
    595e:	68a0      	ldr	r0, [r4, #8]
    5960:	6839      	ldr	r1, [r7, #0]
    5962:	22ff      	movs	r2, #255	; 0xff
    5964:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    5968:	f009 f920 	bl	ebac <strncpy>
	*str = match->syntax;
    596c:	683b      	ldr	r3, [r7, #0]
    596e:	9302      	str	r3, [sp, #8]
	uint16_t common = UINT16_MAX;
    5970:	f64f 77ff 	movw	r7, #65535	; 0xffff
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    5974:	46b8      	mov	r8, r7
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
    5976:	aa16      	add	r2, sp, #88	; 0x58
    5978:	4651      	mov	r1, sl
    597a:	4628      	mov	r0, r5
    597c:	f10a 0b01 	add.w	fp, sl, #1
    5980:	f000 fb24 	bl	5fcc <z_shell_cmd_get>
		if (match2 == NULL) {
    5984:	2800      	cmp	r0, #0
    5986:	d061      	beq.n	5a4c <shell_process+0x498>
		curr_common = str_common(sh->ctx->temp_buff, match2->syntax,
    5988:	68a1      	ldr	r1, [r4, #8]
    598a:	6803      	ldr	r3, [r0, #0]
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    598c:	f201 1141 	addw	r1, r1, #321	; 0x141
	size_t common = 0;
    5990:	2200      	movs	r2, #0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    5992:	f811 ef01 	ldrb.w	lr, [r1, #1]!
    5996:	5c98      	ldrb	r0, [r3, r2]
    5998:	4570      	cmp	r0, lr
    599a:	d103      	bne.n	59a4 <shell_process+0x3f0>
    599c:	b110      	cbz	r0, 59a4 <shell_process+0x3f0>
		common++;
    599e:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    59a0:	4542      	cmp	r2, r8
    59a2:	d1f6      	bne.n	5992 <shell_process+0x3de>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
    59a4:	f1b9 0f00 	cmp.w	r9, #0
    59a8:	d001      	beq.n	59ae <shell_process+0x3fa>
    59aa:	454a      	cmp	r2, r9
    59ac:	db07      	blt.n	59be <shell_process+0x40a>
			common = (curr_common < common) ? curr_common : common;
    59ae:	42ba      	cmp	r2, r7
			--cnt;
    59b0:	f106 36ff 	add.w	r6, r6, #4294967295
			common = (curr_common < common) ? curr_common : common;
    59b4:	bfa8      	it	ge
    59b6:	463a      	movge	r2, r7
	while (cnt > 1) {
    59b8:	2e01      	cmp	r6, #1
			common = (curr_common < common) ? curr_common : common;
    59ba:	b297      	uxth	r7, r2
	while (cnt > 1) {
    59bc:	d046      	beq.n	5a4c <shell_process+0x498>
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
    59be:	46da      	mov	sl, fp
    59c0:	e7d9      	b.n	5976 <shell_process+0x3c2>
		if (str && match->syntax &&
    59c2:	6800      	ldr	r0, [r0, #0]
    59c4:	2800      	cmp	r0, #0
    59c6:	d0aa      	beq.n	591e <shell_process+0x36a>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    59c8:	9a04      	ldr	r2, [sp, #16]
    59ca:	9902      	ldr	r1, [sp, #8]
    59cc:	f009 f92c 	bl	ec28 <strncmp>
		if (str && match->syntax &&
    59d0:	2800      	cmp	r0, #0
    59d2:	d0a4      	beq.n	591e <shell_process+0x36a>
    59d4:	e797      	b.n	5906 <shell_process+0x352>
	longest_option += z_shell_strlen(tab);
    59d6:	489b      	ldr	r0, [pc, #620]	; (5c44 <shell_process+0x690>)
    59d8:	9306      	str	r3, [sp, #24]
    59da:	f007 fee0 	bl	d79e <z_shell_strlen>
	columns = (sh->ctx->vt100_ctx.cons.terminal_wid
    59de:	68a1      	ldr	r1, [r4, #8]
	longest_option += z_shell_strlen(tab);
    59e0:	eb00 020b 	add.w	r2, r0, fp
    59e4:	b292      	uxth	r2, r2
			- z_shell_strlen(tab)) / longest_option;
    59e6:	4897      	ldr	r0, [pc, #604]	; (5c44 <shell_process+0x690>)
	columns = (sh->ctx->vt100_ctx.cons.terminal_wid
    59e8:	8d4f      	ldrh	r7, [r1, #42]	; 0x2a
	longest_option += z_shell_strlen(tab);
    59ea:	9207      	str	r2, [sp, #28]
			- z_shell_strlen(tab)) / longest_option;
    59ec:	f007 fed7 	bl	d79e <z_shell_strlen>
	diff = longest_option - z_shell_strlen(option);
    59f0:	9b06      	ldr	r3, [sp, #24]
			- z_shell_strlen(tab)) / longest_option;
    59f2:	9005      	str	r0, [sp, #20]
	diff = longest_option - z_shell_strlen(option);
    59f4:	4618      	mov	r0, r3
    59f6:	f007 fed2 	bl	d79e <z_shell_strlen>
    59fa:	9a07      	ldr	r2, [sp, #28]
	if (sh->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    59fc:	68a1      	ldr	r1, [r4, #8]
			- z_shell_strlen(tab)) / longest_option;
    59fe:	9b05      	ldr	r3, [sp, #20]
	diff = longest_option - z_shell_strlen(option);
    5a00:	eba2 0900 	sub.w	r9, r2, r0
	if (sh->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    5a04:	8e08      	ldrh	r0, [r1, #48]	; 0x30
			- z_shell_strlen(tab)) / longest_option;
    5a06:	1aff      	subs	r7, r7, r3
    5a08:	fb97 f7f2 	sdiv	r7, r7, r2
	if (sh->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    5a0c:	b2bf      	uxth	r7, r7
    5a0e:	f100 0e01 	add.w	lr, r0, #1
    5a12:	fbb0 f2f7 	udiv	r2, r0, r7
    5a16:	fb07 0012 	mls	r0, r7, r2, r0
    5a1a:	b280      	uxth	r0, r0
    5a1c:	9b06      	ldr	r3, [sp, #24]
    5a1e:	f8a1 e030 	strh.w	lr, [r1, #48]	; 0x30
	diff = longest_option - z_shell_strlen(option);
    5a22:	fa1f f989 	uxth.w	r9, r9
	if (sh->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    5a26:	b958      	cbnz	r0, 5a40 <shell_process+0x48c>
		z_shell_fprintf(sh, SHELL_OPTION, "\n%s%s", tab, option);
    5a28:	9300      	str	r3, [sp, #0]
    5a2a:	4a87      	ldr	r2, [pc, #540]	; (5c48 <shell_process+0x694>)
    5a2c:	4b85      	ldr	r3, [pc, #532]	; (5c44 <shell_process+0x690>)
    5a2e:	2106      	movs	r1, #6
    5a30:	4620      	mov	r0, r4
    5a32:	f008 fba0 	bl	e176 <z_shell_fprintf>
	z_shell_op_cursor_horiz_move(sh, diff);
    5a36:	4649      	mov	r1, r9
    5a38:	4620      	mov	r0, r4
    5a3a:	f000 fb29 	bl	6090 <z_shell_op_cursor_horiz_move>
    5a3e:	e773      	b.n	5928 <shell_process+0x374>
		z_shell_fprintf(sh, SHELL_OPTION, "%s", option);
    5a40:	4a82      	ldr	r2, [pc, #520]	; (5c4c <shell_process+0x698>)
    5a42:	2106      	movs	r1, #6
    5a44:	4620      	mov	r0, r4
    5a46:	f008 fb96 	bl	e176 <z_shell_fprintf>
    5a4a:	e7f4      	b.n	5a36 <shell_process+0x482>
	if (common) {
    5a4c:	2f00      	cmp	r7, #0
    5a4e:	f43f adc1 	beq.w	55d4 <shell_process+0x20>
		z_shell_op_completion_insert(sh, &completion[arg_len],
    5a52:	9902      	ldr	r1, [sp, #8]
    5a54:	eba7 0209 	sub.w	r2, r7, r9
    5a58:	b292      	uxth	r2, r2
    5a5a:	4449      	add	r1, r9
    5a5c:	4620      	mov	r0, r4
    5a5e:	f008 fbca 	bl	e1f6 <z_shell_op_completion_insert>
    5a62:	e5b7      	b.n	55d4 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
    5a64:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(sh)) {
    5a68:	079e      	lsls	r6, r3, #30
    5a6a:	f57f adb3 	bpl.w	55d4 <shell_process+0x20>
					z_flag_history_exit_set(sh, true);
    5a6e:	2101      	movs	r1, #1
    5a70:	f007 fee7 	bl	d842 <z_flag_history_exit_set.isra.0>
						z_shell_op_char_backspace(sh);
    5a74:	4620      	mov	r0, r4
    5a76:	f008 fbdb 	bl	e230 <z_shell_op_char_backspace>
    5a7a:	e5ab      	b.n	55d4 <shell_process+0x20>
    5a7c:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(sh)) {
    5a80:	079d      	lsls	r5, r3, #30
    5a82:	f57f ada7 	bpl.w	55d4 <shell_process+0x20>
					z_flag_history_exit_set(sh, true);
    5a86:	2101      	movs	r1, #1
    5a88:	f007 fedb 	bl	d842 <z_flag_history_exit_set.isra.0>
	return sh->ctx->cfg.flags.mode_delete == 1;
    5a8c:	68a3      	ldr	r3, [r4, #8]
    5a8e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
					if (z_flag_mode_delete_get(sh)) {
    5a92:	0719      	lsls	r1, r3, #28
    5a94:	d4ee      	bmi.n	5a74 <shell_process+0x4c0>
		z_shell_op_char_delete(sh);
    5a96:	4620      	mov	r0, r4
    5a98:	f008 fbaf 	bl	e1fa <z_shell_op_char_delete>
		break;
    5a9c:	e59a      	b.n	55d4 <shell_process+0x20>
		z_shell_op_left_arrow(sh);
    5a9e:	4620      	mov	r0, r4
    5aa0:	f008 fac3 	bl	e02a <z_shell_op_left_arrow>
		break;
    5aa4:	e596      	b.n	55d4 <shell_process+0x20>
		z_shell_op_cursor_end_move(sh);
    5aa6:	4620      	mov	r0, r4
    5aa8:	f008 fab8 	bl	e01c <z_shell_op_cursor_end_move>
		if (!z_shell_cursor_in_empty_line(sh)) {
    5aac:	4620      	mov	r0, r4
    5aae:	f008 fa01 	bl	deb4 <z_shell_cursor_in_empty_line>
    5ab2:	b910      	cbnz	r0, 5aba <shell_process+0x506>
			z_cursor_next_line_move(sh);
    5ab4:	6960      	ldr	r0, [r4, #20]
    5ab6:	f7ff fb9d 	bl	51f4 <z_cursor_next_line_move.isra.0>
		z_flag_history_exit_set(sh, true);
    5aba:	68a0      	ldr	r0, [r4, #8]
    5abc:	2101      	movs	r1, #1
    5abe:	f007 fec0 	bl	d842 <z_flag_history_exit_set.isra.0>
    5ac2:	e641      	b.n	5748 <shell_process+0x194>
		z_shell_op_right_arrow(sh);
    5ac4:	4620      	mov	r0, r4
    5ac6:	f008 fab8 	bl	e03a <z_shell_op_right_arrow>
		break;
    5aca:	e583      	b.n	55d4 <shell_process+0x20>
		z_shell_op_delete_from_cursor(sh);
    5acc:	4620      	mov	r0, r4
    5ace:	f008 fabd 	bl	e04c <z_shell_op_delete_from_cursor>
		break;
    5ad2:	e57f      	b.n	55d4 <shell_process+0x20>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    5ad4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
		Z_SHELL_VT100_CMD(sh, SHELL_VT100_CURSORHOME);
    5ad8:	069b      	lsls	r3, r3, #26
    5ada:	d503      	bpl.n	5ae4 <shell_process+0x530>
    5adc:	495c      	ldr	r1, [pc, #368]	; (5c50 <shell_process+0x69c>)
    5ade:	6960      	ldr	r0, [r4, #20]
    5ae0:	f007 fe63 	bl	d7aa <z_shell_raw_fprintf>
    5ae4:	68a3      	ldr	r3, [r4, #8]
    5ae6:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
		Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEARSCREEN);
    5aea:	069f      	lsls	r7, r3, #26
    5aec:	d503      	bpl.n	5af6 <shell_process+0x542>
    5aee:	4959      	ldr	r1, [pc, #356]	; (5c54 <shell_process+0x6a0>)
    5af0:	6960      	ldr	r0, [r4, #20]
    5af2:	f007 fe5a 	bl	d7aa <z_shell_raw_fprintf>
		z_shell_print_prompt_and_cmd(sh);
    5af6:	4620      	mov	r0, r4
    5af8:	f000 fbf6 	bl	62e8 <z_shell_print_prompt_and_cmd>
		break;
    5afc:	e56a      	b.n	55d4 <shell_process+0x20>
		history_handle(sh, false);
    5afe:	2100      	movs	r1, #0
		history_handle(sh, true);
    5b00:	4620      	mov	r0, r4
    5b02:	f7ff fb7d 	bl	5200 <history_handle>
		break;
    5b06:	e565      	b.n	55d4 <shell_process+0x20>
		history_handle(sh, true);
    5b08:	2101      	movs	r1, #1
    5b0a:	e7f9      	b.n	5b00 <shell_process+0x54c>
		z_shell_op_cursor_home_move(sh);
    5b0c:	4620      	mov	r0, r4
    5b0e:	f008 fa7f 	bl	e010 <z_shell_op_cursor_home_move>
		cmd_buffer_clear(sh);
    5b12:	4620      	mov	r0, r4
    5b14:	f007 fe06 	bl	d724 <cmd_buffer_clear>
		z_flag_history_exit_set(sh, true);
    5b18:	2101      	movs	r1, #1
    5b1a:	68a0      	ldr	r0, [r4, #8]
    5b1c:	f007 fe91 	bl	d842 <z_flag_history_exit_set.isra.0>
    5b20:	68a3      	ldr	r3, [r4, #8]
    5b22:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    5b26:	069e      	lsls	r6, r3, #26
    5b28:	f57f ad54 	bpl.w	55d4 <shell_process+0x20>
    5b2c:	494a      	ldr	r1, [pc, #296]	; (5c58 <shell_process+0x6a4>)
    5b2e:	6960      	ldr	r0, [r4, #20]
    5b30:	f007 fe3b 	bl	d7aa <z_shell_raw_fprintf>
    5b34:	e54e      	b.n	55d4 <shell_process+0x20>
		z_shell_op_word_remove(sh);
    5b36:	4620      	mov	r0, r4
    5b38:	f000 fb06 	bl	6148 <z_shell_op_word_remove>
		z_flag_history_exit_set(sh, true);
    5b3c:	68a0      	ldr	r0, [r4, #8]
    5b3e:	2101      	movs	r1, #1
    5b40:	f007 fe7f 	bl	d842 <z_flag_history_exit_set.isra.0>
		break;
    5b44:	e546      	b.n	55d4 <shell_process+0x20>
			if (data == '[') {
    5b46:	295b      	cmp	r1, #91	; 0x5b
    5b48:	d102      	bne.n	5b50 <shell_process+0x59c>
	sh->ctx->receive_state = state;
    5b4a:	2202      	movs	r2, #2
    5b4c:	715a      	strb	r2, [r3, #5]
}
    5b4e:	e541      	b.n	55d4 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
    5b50:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
			} else if (z_flag_echo_get(sh)) {
    5b54:	079d      	lsls	r5, r3, #30
    5b56:	d506      	bpl.n	5b66 <shell_process+0x5b2>
	if (data == SHELL_VT100_ASCII_ALT_B) {
    5b58:	2962      	cmp	r1, #98	; 0x62
    5b5a:	d107      	bne.n	5b6c <shell_process+0x5b8>
		z_shell_op_cursor_word_move(sh, -1);
    5b5c:	f04f 31ff 	mov.w	r1, #4294967295
		z_shell_op_cursor_word_move(sh, 1);
    5b60:	4620      	mov	r0, r4
    5b62:	f008 fa17 	bl	df94 <z_shell_op_cursor_word_move>
	sh->ctx->receive_state = state;
    5b66:	68a3      	ldr	r3, [r4, #8]
    5b68:	2200      	movs	r2, #0
    5b6a:	e7ef      	b.n	5b4c <shell_process+0x598>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
    5b6c:	2966      	cmp	r1, #102	; 0x66
    5b6e:	d1fa      	bne.n	5b66 <shell_process+0x5b2>
		z_shell_op_cursor_word_move(sh, 1);
    5b70:	2101      	movs	r1, #1
    5b72:	e7f5      	b.n	5b60 <shell_process+0x5ac>
	sh->ctx->receive_state = state;
    5b74:	2200      	movs	r2, #0
    5b76:	715a      	strb	r2, [r3, #5]
    5b78:	68a2      	ldr	r2, [r4, #8]
    5b7a:	f8d2 3260 	ldr.w	r3, [r2, #608]	; 0x260
			if (!z_flag_echo_get(sh)) {
    5b7e:	0798      	lsls	r0, r3, #30
    5b80:	f57f ad28 	bpl.w	55d4 <shell_process+0x20>
			switch (data) {
    5b84:	f1a1 0331 	sub.w	r3, r1, #49	; 0x31
    5b88:	2b1b      	cmp	r3, #27
    5b8a:	f63f ad23 	bhi.w	55d4 <shell_process+0x20>
    5b8e:	a101      	add	r1, pc, #4	; (adr r1, 5b94 <shell_process+0x5e0>)
    5b90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    5b94:	00005c11 	.word	0x00005c11
    5b98:	00005c1d 	.word	0x00005c1d
    5b9c:	00005c31 	.word	0x00005c31
    5ba0:	00005c05 	.word	0x00005c05
    5ba4:	000055d5 	.word	0x000055d5
    5ba8:	000055d5 	.word	0x000055d5
    5bac:	000055d5 	.word	0x000055d5
    5bb0:	000055d5 	.word	0x000055d5
    5bb4:	000055d5 	.word	0x000055d5
    5bb8:	000055d5 	.word	0x000055d5
    5bbc:	000055d5 	.word	0x000055d5
    5bc0:	000055d5 	.word	0x000055d5
    5bc4:	000055d5 	.word	0x000055d5
    5bc8:	000055d5 	.word	0x000055d5
    5bcc:	000055d5 	.word	0x000055d5
    5bd0:	000055d5 	.word	0x000055d5
    5bd4:	00005b09 	.word	0x00005b09
    5bd8:	00005aff 	.word	0x00005aff
    5bdc:	00005ac5 	.word	0x00005ac5
    5be0:	00005a9f 	.word	0x00005a9f
    5be4:	000055d5 	.word	0x000055d5
    5be8:	00005c09 	.word	0x00005c09
    5bec:	000055d5 	.word	0x000055d5
    5bf0:	00005c15 	.word	0x00005c15
    5bf4:	000055d5 	.word	0x000055d5
    5bf8:	000055d5 	.word	0x000055d5
    5bfc:	000055d5 	.word	0x000055d5
    5c00:	00005c21 	.word	0x00005c21
	sh->ctx->receive_state = state;
    5c04:	2303      	movs	r3, #3
    5c06:	7153      	strb	r3, [r2, #5]
		z_shell_op_cursor_end_move(sh);
    5c08:	4620      	mov	r0, r4
    5c0a:	f008 fa07 	bl	e01c <z_shell_op_cursor_end_move>
		break;
    5c0e:	e4e1      	b.n	55d4 <shell_process+0x20>
	sh->ctx->receive_state = state;
    5c10:	2303      	movs	r3, #3
    5c12:	7153      	strb	r3, [r2, #5]
		z_shell_op_cursor_home_move(sh);
    5c14:	4620      	mov	r0, r4
    5c16:	f008 f9fb 	bl	e010 <z_shell_op_cursor_home_move>
		break;
    5c1a:	e4db      	b.n	55d4 <shell_process+0x20>
	sh->ctx->receive_state = state;
    5c1c:	2303      	movs	r3, #3
    5c1e:	7153      	strb	r3, [r2, #5]
	return sh->ctx->cfg.flags.insert_mode == 1;
    5c20:	68a0      	ldr	r0, [r4, #8]
    5c22:	f8d0 1260 	ldr.w	r1, [r0, #608]	; 0x260
    5c26:	f001 0101 	and.w	r1, r1, #1
				z_flag_insert_mode_set(sh, !status);
    5c2a:	f081 0101 	eor.w	r1, r1, #1
    5c2e:	e650      	b.n	58d2 <shell_process+0x31e>
	sh->ctx->receive_state = state;
    5c30:	2303      	movs	r3, #3
    5c32:	7153      	strb	r3, [r2, #5]
	return sh->ctx->cfg.flags.echo == 1;
    5c34:	68a3      	ldr	r3, [r4, #8]
    5c36:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
				if (z_flag_echo_get(sh)) {
    5c3a:	079b      	lsls	r3, r3, #30
    5c3c:	f57f acca 	bpl.w	55d4 <shell_process+0x20>
    5c40:	e729      	b.n	5a96 <shell_process+0x4e2>
    5c42:	bf00      	nop
    5c44:	00011307 	.word	0x00011307
    5c48:	00011f83 	.word	0x00011f83
    5c4c:	00011ae4 	.word	0x00011ae4
    5c50:	0001021c 	.word	0x0001021c
    5c54:	00010221 	.word	0x00010221
    5c58:	00010217 	.word	0x00010217

00005c5c <shell_init>:
{
    5c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5c60:	4604      	mov	r4, r0
	if (sh->ctx->tid) {
    5c62:	6880      	ldr	r0, [r0, #8]
{
    5c64:	4688      	mov	r8, r1
	if (sh->ctx->tid) {
    5c66:	f8d0 130c 	ldr.w	r1, [r0, #780]	; 0x30c
{
    5c6a:	b089      	sub	sp, #36	; 0x24
    5c6c:	4615      	mov	r5, r2
    5c6e:	461f      	mov	r7, r3
	if (sh->ctx->tid) {
    5c70:	2900      	cmp	r1, #0
    5c72:	d166      	bne.n	5d42 <shell_init+0xe6>
	memset(sh->ctx, 0, sizeof(*sh->ctx));
    5c74:	f44f 7244 	mov.w	r2, #784	; 0x310
    5c78:	f009 f81c 	bl	ecb4 <memset>
	sh->ctx->prompt = sh->default_prompt;
    5c7c:	68a3      	ldr	r3, [r4, #8]
    5c7e:	6822      	ldr	r2, [r4, #0]
    5c80:	601a      	str	r2, [r3, #0]
	z_shell_history_init(sh->history);
    5c82:	68e0      	ldr	r0, [r4, #12]
    5c84:	f008 fe20 	bl	e8c8 <z_shell_history_init>
	k_mutex_init(&sh->ctx->wr_mtx);
    5c88:	68a0      	ldr	r0, [r4, #8]
    5c8a:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_init(mutex);
    5c8e:	f009 fda0 	bl	f7d2 <z_impl_k_mutex_init>
    5c92:	f44f 792a 	mov.w	r9, #680	; 0x2a8
    5c96:	f44f 761a 	mov.w	r6, #616	; 0x268
		k_poll_signal_init(&sh->ctx->signals[i]);
    5c9a:	68a0      	ldr	r0, [r4, #8]
    5c9c:	4430      	add	r0, r6
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
    5c9e:	f00a f866 	bl	fd6e <z_impl_k_poll_signal_init>
		k_poll_event_init(&sh->ctx->events[i],
    5ca2:	68a0      	ldr	r0, [r4, #8]
    5ca4:	2200      	movs	r2, #0
    5ca6:	1983      	adds	r3, r0, r6
    5ca8:	2101      	movs	r1, #1
    5caa:	4448      	add	r0, r9
	for (int i = 0; i < SHELL_SIGNALS; i++) {
    5cac:	3610      	adds	r6, #16
		k_poll_event_init(&sh->ctx->events[i],
    5cae:	f00a f841 	bl	fd34 <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
    5cb2:	f5b6 7f2a 	cmp.w	r6, #680	; 0x2a8
    5cb6:	f109 0914 	add.w	r9, r9, #20
    5cba:	d1ee      	bne.n	5c9a <shell_init+0x3e>
		sh->stats->log_lost_cnt = 0;
    5cbc:	69a3      	ldr	r3, [r4, #24]
    5cbe:	2600      	movs	r6, #0
    5cc0:	601e      	str	r6, [r3, #0]
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, tx_rdy, val, ret);
    5cc2:	68a0      	ldr	r0, [r4, #8]
    5cc4:	2102      	movs	r1, #2
    5cc6:	f500 7019 	add.w	r0, r0, #612	; 0x264
    5cca:	f007 fd34 	bl	d736 <atomic_or>
	sh->ctx->vt100_ctx.cons.terminal_wid =
    5cce:	68a3      	ldr	r3, [r4, #8]
    5cd0:	2250      	movs	r2, #80	; 0x50
    5cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
	sh->ctx->vt100_ctx.cons.terminal_hei =
    5cd4:	68a3      	ldr	r3, [r4, #8]
    5cd6:	2218      	movs	r2, #24
    5cd8:	851a      	strh	r2, [r3, #40]	; 0x28
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
    5cda:	68a3      	ldr	r3, [r4, #8]
    5cdc:	6818      	ldr	r0, [r3, #0]
    5cde:	f007 fd5e 	bl	d79e <z_shell_strlen>
    5ce2:	68a3      	ldr	r3, [r4, #8]
	int ret = sh->iface->api->init(sh->iface, transport_config,
    5ce4:	4a18      	ldr	r2, [pc, #96]	; (5d48 <shell_init+0xec>)
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
    5ce6:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	sh->ctx->cfg.flags = cfg_flags;
    5cea:	68a3      	ldr	r3, [r4, #8]
    5cec:	f366 0582 	bfi	r5, r6, #2, #1
    5cf0:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
	int ret = sh->iface->api->init(sh->iface, transport_config,
    5cf4:	6860      	ldr	r0, [r4, #4]
    5cf6:	6803      	ldr	r3, [r0, #0]
    5cf8:	4641      	mov	r1, r8
    5cfa:	681d      	ldr	r5, [r3, #0]
    5cfc:	4623      	mov	r3, r4
    5cfe:	47a8      	blx	r5
	if (ret == 0) {
    5d00:	4605      	mov	r5, r0
    5d02:	b9d0      	cbnz	r0, 5d3a <shell_init+0xde>
	sh->ctx->state = state;
    5d04:	68a3      	ldr	r3, [r4, #8]
    5d06:	2201      	movs	r2, #1
    5d08:	711a      	strb	r2, [r3, #4]
				  sh->stack, CONFIG_SHELL_STACK_SIZE,
    5d0a:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    5d0e:	2200      	movs	r2, #0
    5d10:	2300      	movs	r3, #0
    5d12:	e9cd 2306 	strd	r2, r3, [sp, #24]
    5d16:	230e      	movs	r3, #14
    5d18:	9303      	str	r3, [sp, #12]
    5d1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5d1c:	9504      	str	r5, [sp, #16]
	k_tid_t tid = k_thread_create(sh->thread,
    5d1e:	e9cd 7301 	strd	r7, r3, [sp, #4]
    5d22:	9400      	str	r4, [sp, #0]
    5d24:	4b09      	ldr	r3, [pc, #36]	; (5d4c <shell_init+0xf0>)
    5d26:	f44f 6200 	mov.w	r2, #2048	; 0x800
    5d2a:	f005 f8c5 	bl	aeb8 <z_impl_k_thread_create>
	sh->ctx->tid = tid;
    5d2e:	68a3      	ldr	r3, [r4, #8]
    5d30:	f8c3 030c 	str.w	r0, [r3, #780]	; 0x30c
	k_thread_name_set(tid, sh->thread_name);
    5d34:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return z_impl_k_thread_name_set(thread, str);
    5d36:	f004 fffd 	bl	ad34 <z_impl_k_thread_name_set>
}
    5d3a:	4628      	mov	r0, r5
    5d3c:	b009      	add	sp, #36	; 0x24
    5d3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EALREADY;
    5d42:	f06f 0577 	mvn.w	r5, #119	; 0x77
    5d46:	e7f8      	b.n	5d3a <shell_init+0xde>
    5d48:	0000d7c9 	.word	0x0000d7c9
    5d4c:	00005da5 	.word	0x00005da5

00005d50 <shell_start>:
{
    5d50:	b510      	push	{r4, lr}
    5d52:	4604      	mov	r4, r0
	return sh->ctx->state;
    5d54:	6880      	ldr	r0, [r0, #8]
	if (state_get(sh) != SHELL_STATE_INITIALIZED) {
    5d56:	7903      	ldrb	r3, [r0, #4]
    5d58:	2b01      	cmp	r3, #1
    5d5a:	d11d      	bne.n	5d98 <shell_start+0x48>
	k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
    5d5c:	f04f 32ff 	mov.w	r2, #4294967295
    5d60:	f04f 33ff 	mov.w	r3, #4294967295
    5d64:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    5d68:	f007 fd2c 	bl	d7c4 <k_mutex_lock.constprop.0.isra.0>
		z_shell_vt100_color_set(sh, SHELL_NORMAL);
    5d6c:	4620      	mov	r0, r4
    5d6e:	2108      	movs	r1, #8
    5d70:	f000 f9ac 	bl	60cc <z_shell_vt100_color_set>
	if (z_shell_strlen(sh->default_prompt) > 0) {
    5d74:	6820      	ldr	r0, [r4, #0]
    5d76:	f007 fd12 	bl	d79e <z_shell_strlen>
    5d7a:	b118      	cbz	r0, 5d84 <shell_start+0x34>
		z_shell_raw_fprintf(sh->fprintf_ctx, "\n\n");
    5d7c:	4908      	ldr	r1, [pc, #32]	; (5da0 <shell_start+0x50>)
    5d7e:	6960      	ldr	r0, [r4, #20]
    5d80:	f007 fd13 	bl	d7aa <z_shell_raw_fprintf>
	state_set(sh, SHELL_STATE_ACTIVE);
    5d84:	4620      	mov	r0, r4
    5d86:	f7ff fbef 	bl	5568 <state_set.constprop.0>
	k_mutex_unlock(&sh->ctx->wr_mtx);
    5d8a:	68a0      	ldr	r0, [r4, #8]
    5d8c:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    5d90:	f007 fd70 	bl	d874 <k_mutex_unlock.isra.0>
	return 0;
    5d94:	2000      	movs	r0, #0
}
    5d96:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    5d98:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5d9c:	e7fb      	b.n	5d96 <shell_start+0x46>
    5d9e:	bf00      	nop
    5da0:	0001188d 	.word	0x0001188d

00005da4 <shell_thread>:
{
    5da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5da8:	4604      	mov	r4, r0
	err = sh->iface->api->enable(sh->iface, false);
    5daa:	6840      	ldr	r0, [r0, #4]
    5dac:	6803      	ldr	r3, [r0, #0]
{
    5dae:	460e      	mov	r6, r1
	err = sh->iface->api->enable(sh->iface, false);
    5db0:	689b      	ldr	r3, [r3, #8]
    5db2:	2100      	movs	r1, #0
{
    5db4:	4615      	mov	r5, r2
	err = sh->iface->api->enable(sh->iface, false);
    5db6:	4798      	blx	r3
	if (err != 0) {
    5db8:	2800      	cmp	r0, #0
    5dba:	d14c      	bne.n	5e56 <shell_thread+0xb2>
	if (IS_ENABLED(CONFIG_SHELL_LOG_BACKEND) && log_backend
    5dbc:	b126      	cbz	r6, 5dc8 <shell_thread+0x24>
		z_shell_log_backend_enable(sh->log_backend, (void *)sh,
    5dbe:	69e0      	ldr	r0, [r4, #28]
    5dc0:	462a      	mov	r2, r5
    5dc2:	4621      	mov	r1, r4
    5dc4:	f008 fb29 	bl	e41a <z_shell_log_backend_enable>
		err = shell_start(sh);
    5dc8:	4620      	mov	r0, r4
    5dca:	f7ff ffc1 	bl	5d50 <shell_start>
		if (err != 0) {
    5dce:	2800      	cmp	r0, #0
    5dd0:	d141      	bne.n	5e56 <shell_thread+0xb2>
		shell_signal_handle(sh, SHELL_SIGNAL_KILL, kill_handler);
    5dd2:	4e22      	ldr	r6, [pc, #136]	; (5e5c <shell_thread+0xb8>)
		shell_signal_handle(sh, SHELL_SIGNAL_RXRDY, shell_process);
    5dd4:	4f22      	ldr	r7, [pc, #136]	; (5e60 <shell_thread+0xbc>)
			shell_signal_handle(sh, SHELL_SIGNAL_LOG_MSG,
    5dd6:	f8df 808c 	ldr.w	r8, [pc, #140]	; 5e64 <shell_thread+0xc0>
		err = k_poll(sh->ctx->events, SHELL_SIGNAL_TXDONE,
    5dda:	68a0      	ldr	r0, [r4, #8]
    5ddc:	f500 702a 	add.w	r0, r0, #680	; 0x2a8
	return z_impl_k_poll(events, num_events, timeout);
    5de0:	f04f 32ff 	mov.w	r2, #4294967295
    5de4:	f04f 33ff 	mov.w	r3, #4294967295
    5de8:	2103      	movs	r1, #3
    5dea:	f005 ff8b 	bl	bd04 <z_impl_k_poll>
		if (err != 0) {
    5dee:	4605      	mov	r5, r0
    5df0:	68a0      	ldr	r0, [r4, #8]
			k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
    5df2:	f04f 32ff 	mov.w	r2, #4294967295
    5df6:	f04f 33ff 	mov.w	r3, #4294967295
    5dfa:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
		if (err != 0) {
    5dfe:	b175      	cbz	r5, 5e1e <shell_thread+0x7a>
			k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
    5e00:	f007 fce0 	bl	d7c4 <k_mutex_lock.constprop.0.isra.0>
			z_shell_fprintf(sh, SHELL_ERROR,
    5e04:	4620      	mov	r0, r4
    5e06:	462b      	mov	r3, r5
    5e08:	4a17      	ldr	r2, [pc, #92]	; (5e68 <shell_thread+0xc4>)
    5e0a:	2101      	movs	r1, #1
    5e0c:	f008 f9b3 	bl	e176 <z_shell_fprintf>
			k_mutex_unlock(&sh->ctx->wr_mtx);
    5e10:	68a0      	ldr	r0, [r4, #8]
}
    5e12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_mutex_unlock(&sh->ctx->wr_mtx);
    5e16:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    5e1a:	f007 bd2b 	b.w	d874 <k_mutex_unlock.isra.0>
		k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
    5e1e:	f007 fcd1 	bl	d7c4 <k_mutex_lock.constprop.0.isra.0>
		shell_signal_handle(sh, SHELL_SIGNAL_KILL, kill_handler);
    5e22:	4632      	mov	r2, r6
    5e24:	2102      	movs	r1, #2
    5e26:	4620      	mov	r0, r4
    5e28:	f007 fca3 	bl	d772 <shell_signal_handle>
		shell_signal_handle(sh, SHELL_SIGNAL_RXRDY, shell_process);
    5e2c:	463a      	mov	r2, r7
    5e2e:	4629      	mov	r1, r5
    5e30:	4620      	mov	r0, r4
    5e32:	f007 fc9e 	bl	d772 <shell_signal_handle>
			shell_signal_handle(sh, SHELL_SIGNAL_LOG_MSG,
    5e36:	4620      	mov	r0, r4
    5e38:	4642      	mov	r2, r8
    5e3a:	2101      	movs	r1, #1
    5e3c:	f007 fc99 	bl	d772 <shell_signal_handle>
		if (sh->iface->api->update) {
    5e40:	6860      	ldr	r0, [r4, #4]
    5e42:	6803      	ldr	r3, [r0, #0]
    5e44:	695b      	ldr	r3, [r3, #20]
    5e46:	b103      	cbz	r3, 5e4a <shell_thread+0xa6>
			sh->iface->api->update(sh->iface);
    5e48:	4798      	blx	r3
		k_mutex_unlock(&sh->ctx->wr_mtx);
    5e4a:	68a0      	ldr	r0, [r4, #8]
    5e4c:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    5e50:	f007 fd10 	bl	d874 <k_mutex_unlock.isra.0>
	while (true) {
    5e54:	e7c1      	b.n	5dda <shell_thread+0x36>
}
    5e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e5a:	bf00      	nop
    5e5c:	0000d7dd 	.word	0x0000d7dd
    5e60:	000055b5 	.word	0x000055b5
    5e64:	0000d879 	.word	0x0000d879
    5e68:	00011f89 	.word	0x00011f89

00005e6c <cmd_help>:

	return state_get(sh) ==	SHELL_STATE_ACTIVE;
}

static int cmd_help(const struct shell *sh, size_t argc, char **argv)
{
    5e6c:	b510      	push	{r4, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

#if defined(CONFIG_SHELL_TAB)
	shell_print(sh, "Please press the <Tab> button to see all available "
    5e6e:	4a0d      	ldr	r2, [pc, #52]	; (5ea4 <cmd_help+0x38>)
{
    5e70:	4604      	mov	r4, r0
	shell_print(sh, "Please press the <Tab> button to see all available "
    5e72:	2108      	movs	r1, #8
    5e74:	f007 fd61 	bl	d93a <shell_fprintf>
			   "commands.");
#endif

#if defined(CONFIG_SHELL_TAB_AUTOCOMPLETION)
	shell_print(sh,
    5e78:	4620      	mov	r0, r4
    5e7a:	4a0b      	ldr	r2, [pc, #44]	; (5ea8 <cmd_help+0x3c>)
    5e7c:	2108      	movs	r1, #8
    5e7e:	f007 fd5c 	bl	d93a <shell_fprintf>
		"You can also use the <Tab> button to prompt or auto-complete"
		" all commands or its subcommands.");
#endif

#if defined(CONFIG_SHELL_HELP)
	shell_print(sh,
    5e82:	4620      	mov	r0, r4
    5e84:	4a09      	ldr	r2, [pc, #36]	; (5eac <cmd_help+0x40>)
    5e86:	2108      	movs	r1, #8
    5e88:	f007 fd57 	bl	d93a <shell_fprintf>
		"You can try to call commands with <-h> or <--help> parameter"
		" for more information.");
#endif

#if defined(CONFIG_SHELL_METAKEYS)
	shell_print(sh,
    5e8c:	4620      	mov	r0, r4
    5e8e:	4a08      	ldr	r2, [pc, #32]	; (5eb0 <cmd_help+0x44>)
    5e90:	2108      	movs	r1, #8
    5e92:	f007 fd52 	bl	d93a <shell_fprintf>
		"Please refer to shell documentation for more details.");
#endif

	if (IS_ENABLED(CONFIG_SHELL_HELP)) {
		/* For NULL argument function will print all root commands */
		z_shell_help_subcmd_print(sh, NULL,
    5e96:	4620      	mov	r0, r4
    5e98:	4a06      	ldr	r2, [pc, #24]	; (5eb4 <cmd_help+0x48>)
    5e9a:	2100      	movs	r1, #0
    5e9c:	f000 fa42 	bl	6324 <z_shell_help_subcmd_print>
			shell_print(sh, "  %s", entry->syntax);
		}
	}

	return 0;
}
    5ea0:	2000      	movs	r0, #0
    5ea2:	bd10      	pop	{r4, pc}
    5ea4:	00011fa0 	.word	0x00011fa0
    5ea8:	00011fde 	.word	0x00011fde
    5eac:	0001203d 	.word	0x0001203d
    5eb0:	00012091 	.word	0x00012091
    5eb4:	0001212b 	.word	0x0001212b

00005eb8 <shell_hexdump_line>:
{
    5eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5eba:	461e      	mov	r6, r3
    5ebc:	4617      	mov	r7, r2
	shell_fprintf(sh, SHELL_NORMAL, "%08X: ", offset);
    5ebe:	460b      	mov	r3, r1
    5ec0:	4a2f      	ldr	r2, [pc, #188]	; (5f80 <shell_hexdump_line+0xc8>)
    5ec2:	2108      	movs	r1, #8
{
    5ec4:	4604      	mov	r4, r0
	shell_fprintf(sh, SHELL_NORMAL, "%08X: ", offset);
    5ec6:	f007 fd38 	bl	d93a <shell_fprintf>
		if (i < len) {
    5eca:	b36e      	cbz	r6, 5f28 <shell_hexdump_line+0x70>
			shell_fprintf(sh, SHELL_NORMAL, "%02x ",
    5ecc:	783b      	ldrb	r3, [r7, #0]
    5ece:	4a2d      	ldr	r2, [pc, #180]	; (5f84 <shell_hexdump_line+0xcc>)
    5ed0:	2108      	movs	r1, #8
    5ed2:	4620      	mov	r0, r4
    5ed4:	f007 fd31 	bl	d93a <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    5ed8:	2501      	movs	r5, #1
		if (i > 0 && !(i % 8)) {
    5eda:	076a      	lsls	r2, r5, #29
    5edc:	d104      	bne.n	5ee8 <shell_hexdump_line+0x30>
			shell_fprintf(sh, SHELL_NORMAL, " ");
    5ede:	4a2a      	ldr	r2, [pc, #168]	; (5f88 <shell_hexdump_line+0xd0>)
    5ee0:	2108      	movs	r1, #8
    5ee2:	4620      	mov	r0, r4
    5ee4:	f007 fd29 	bl	d93a <shell_fprintf>
		if (i < len) {
    5ee8:	42ae      	cmp	r6, r5
    5eea:	d923      	bls.n	5f34 <shell_hexdump_line+0x7c>
			shell_fprintf(sh, SHELL_NORMAL, "%02x ",
    5eec:	5d7b      	ldrb	r3, [r7, r5]
    5eee:	4a25      	ldr	r2, [pc, #148]	; (5f84 <shell_hexdump_line+0xcc>)
    5ef0:	2108      	movs	r1, #8
    5ef2:	4620      	mov	r0, r4
    5ef4:	f007 fd21 	bl	d93a <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    5ef8:	3501      	adds	r5, #1
    5efa:	2d10      	cmp	r5, #16
    5efc:	d1ed      	bne.n	5eda <shell_hexdump_line+0x22>
	shell_fprintf(sh, SHELL_NORMAL, "|");
    5efe:	4a23      	ldr	r2, [pc, #140]	; (5f8c <shell_hexdump_line+0xd4>)
    5f00:	2108      	movs	r1, #8
    5f02:	4620      	mov	r0, r4
    5f04:	f007 fd19 	bl	d93a <shell_fprintf>
		if (i < len) {
    5f08:	b9d6      	cbnz	r6, 5f40 <shell_hexdump_line+0x88>
			shell_fprintf(sh, SHELL_NORMAL, " ");
    5f0a:	4a1f      	ldr	r2, [pc, #124]	; (5f88 <shell_hexdump_line+0xd0>)
    5f0c:	2108      	movs	r1, #8
    5f0e:	4620      	mov	r0, r4
    5f10:	f007 fd13 	bl	d93a <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    5f14:	2501      	movs	r5, #1
		if (i < len) {
    5f16:	42ae      	cmp	r6, r5
    5f18:	462b      	mov	r3, r5
    5f1a:	d813      	bhi.n	5f44 <shell_hexdump_line+0x8c>
			shell_fprintf(sh, SHELL_NORMAL, " ");
    5f1c:	4a1a      	ldr	r2, [pc, #104]	; (5f88 <shell_hexdump_line+0xd0>)
    5f1e:	2108      	movs	r1, #8
    5f20:	4620      	mov	r0, r4
    5f22:	f007 fd0a 	bl	d93a <shell_fprintf>
    5f26:	e018      	b.n	5f5a <shell_hexdump_line+0xa2>
			shell_fprintf(sh, SHELL_NORMAL, "   ");
    5f28:	4a19      	ldr	r2, [pc, #100]	; (5f90 <shell_hexdump_line+0xd8>)
    5f2a:	2108      	movs	r1, #8
    5f2c:	4620      	mov	r0, r4
    5f2e:	f007 fd04 	bl	d93a <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    5f32:	2501      	movs	r5, #1
			shell_fprintf(sh, SHELL_NORMAL, "   ");
    5f34:	4a16      	ldr	r2, [pc, #88]	; (5f90 <shell_hexdump_line+0xd8>)
    5f36:	2108      	movs	r1, #8
    5f38:	4620      	mov	r0, r4
    5f3a:	f007 fcfe 	bl	d93a <shell_fprintf>
    5f3e:	e7db      	b.n	5ef8 <shell_hexdump_line+0x40>
		if (i < len) {
    5f40:	2500      	movs	r5, #0
    5f42:	462b      	mov	r3, r5
			char c = data[i];
    5f44:	5cfb      	ldrb	r3, [r7, r3]
	return (int)((((unsigned)c) >= ' ') &&
    5f46:	f1a3 0220 	sub.w	r2, r3, #32
			shell_fprintf(sh, SHELL_NORMAL, "%c",
    5f4a:	2a5f      	cmp	r2, #95	; 0x5f
    5f4c:	bf28      	it	cs
    5f4e:	232e      	movcs	r3, #46	; 0x2e
    5f50:	4a10      	ldr	r2, [pc, #64]	; (5f94 <shell_hexdump_line+0xdc>)
    5f52:	2108      	movs	r1, #8
    5f54:	4620      	mov	r0, r4
    5f56:	f007 fcf0 	bl	d93a <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    5f5a:	3501      	adds	r5, #1
    5f5c:	2d10      	cmp	r5, #16
    5f5e:	d007      	beq.n	5f70 <shell_hexdump_line+0xb8>
		if (i > 0 && !(i % 8)) {
    5f60:	076b      	lsls	r3, r5, #29
    5f62:	d1d8      	bne.n	5f16 <shell_hexdump_line+0x5e>
			shell_fprintf(sh, SHELL_NORMAL, " ");
    5f64:	4a08      	ldr	r2, [pc, #32]	; (5f88 <shell_hexdump_line+0xd0>)
    5f66:	2108      	movs	r1, #8
    5f68:	4620      	mov	r0, r4
    5f6a:	f007 fce6 	bl	d93a <shell_fprintf>
    5f6e:	e7d2      	b.n	5f16 <shell_hexdump_line+0x5e>
	shell_print(sh, "|");
    5f70:	4620      	mov	r0, r4
    5f72:	4a09      	ldr	r2, [pc, #36]	; (5f98 <shell_hexdump_line+0xe0>)
}
    5f74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	shell_print(sh, "|");
    5f78:	2108      	movs	r1, #8
    5f7a:	f007 bcde 	b.w	d93a <shell_fprintf>
    5f7e:	bf00      	nop
    5f80:	00012141 	.word	0x00012141
    5f84:	00011300 	.word	0x00011300
    5f88:	00011308 	.word	0x00011308
    5f8c:	0001130a 	.word	0x0001130a
    5f90:	00011306 	.word	0x00011306
    5f94:	00011039 	.word	0x00011039
    5f98:	00012148 	.word	0x00012148

00005f9c <z_shell_fprintf_fmt>:
	return 0;
}

void z_shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
			 const char *fmt, va_list args)
{
    5f9c:	b513      	push	{r0, r1, r4, lr}
    5f9e:	4613      	mov	r3, r2
    5fa0:	4604      	mov	r4, r0
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    5fa2:	2200      	movs	r2, #0
    5fa4:	9200      	str	r2, [sp, #0]
    5fa6:	460a      	mov	r2, r1
    5fa8:	4601      	mov	r1, r0
    5faa:	4807      	ldr	r0, [pc, #28]	; (5fc8 <z_shell_fprintf_fmt+0x2c>)
    5fac:	f7fb fe1e 	bl	1bec <z_cbvprintf_impl>
	(void)cbvprintf(out_func, (void *)sh_fprintf, fmt, args);

	if (sh_fprintf->ctrl_blk->autoflush) {
    5fb0:	6923      	ldr	r3, [r4, #16]
    5fb2:	791b      	ldrb	r3, [r3, #4]
    5fb4:	b12b      	cbz	r3, 5fc2 <z_shell_fprintf_fmt+0x26>
		z_shell_fprintf_buffer_flush(sh_fprintf);
    5fb6:	4620      	mov	r0, r4
	}
}
    5fb8:	b002      	add	sp, #8
    5fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_fprintf_buffer_flush(sh_fprintf);
    5fbe:	f007 bce4 	b.w	d98a <z_shell_fprintf_buffer_flush>
}
    5fc2:	b002      	add	sp, #8
    5fc4:	bd10      	pop	{r4, pc}
    5fc6:	bf00      	nop
    5fc8:	0000d9a3 	.word	0x0000d9a3

00005fcc <z_shell_cmd_get>:

const struct shell_static_entry *z_shell_cmd_get(
					const struct shell_static_entry *parent,
					size_t idx,
					struct shell_static_entry *dloc)
{
    5fcc:	b538      	push	{r3, r4, r5, lr}
    5fce:	460b      	mov	r3, r1
    5fd0:	4615      	mov	r5, r2
	const struct shell_static_entry *res = NULL;

	if (parent == NULL) {
    5fd2:	b948      	cbnz	r0, 5fe8 <z_shell_cmd_get+0x1c>
	return ((uint8_t *)__shell_root_cmds_end -
    5fd4:	4914      	ldr	r1, [pc, #80]	; (6028 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x28>)
    5fd6:	4a15      	ldr	r2, [pc, #84]	; (602c <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x2c>)
    5fd8:	1a52      	subs	r2, r2, r1
		return  (idx < shell_root_cmd_count()) ?
				shell_root_cmd_get(idx)->entry : NULL;
    5fda:	ebb3 0f92 	cmp.w	r3, r2, lsr #2
    5fde:	d205      	bcs.n	5fec <z_shell_cmd_get+0x20>
    5fe0:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			}
		}
	}

	return res;
}
    5fe4:	4628      	mov	r0, r5
    5fe6:	bd38      	pop	{r3, r4, r5, pc}
	if (parent->subcmd) {
    5fe8:	6884      	ldr	r4, [r0, #8]
    5fea:	b90c      	cbnz	r4, 5ff0 <z_shell_cmd_get+0x24>
	const struct shell_static_entry *res = NULL;
    5fec:	2500      	movs	r5, #0
    5fee:	e7f9      	b.n	5fe4 <z_shell_cmd_get+0x18>
	return (entry >= __shell_dynamic_subcmds_start) &&
    5ff0:	4a0f      	ldr	r2, [pc, #60]	; (6030 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x30>)
    5ff2:	4294      	cmp	r4, r2
    5ff4:	d30a      	bcc.n	600c <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xc>
    5ff6:	4a0f      	ldr	r2, [pc, #60]	; (6034 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x34>)
    5ff8:	4294      	cmp	r4, r2
    5ffa:	d207      	bcs.n	600c <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xc>
			parent->subcmd->dynamic_get(idx, dloc);
    5ffc:	4618      	mov	r0, r3
    5ffe:	6822      	ldr	r2, [r4, #0]
    6000:	4629      	mov	r1, r5
    6002:	4790      	blx	r2
			if (dloc->syntax != NULL) {
    6004:	682b      	ldr	r3, [r5, #0]
			if (entry_list[idx].syntax != NULL) {
    6006:	2b00      	cmp	r3, #0
    6008:	d1ec      	bne.n	5fe4 <z_shell_cmd_get+0x18>
    600a:	e7ef      	b.n	5fec <z_shell_cmd_get+0x20>
	return (entry >= __shell_subcmds_start) &&
    600c:	4a0a      	ldr	r2, [pc, #40]	; (6038 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x38>)
    600e:	4294      	cmp	r4, r2
    6010:	d302      	bcc.n	6018 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x18>
    6012:	4a0a      	ldr	r2, [pc, #40]	; (603c <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x3c>)
    6014:	4294      	cmp	r4, r2
    6016:	d305      	bcc.n	6024 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x24>
				entry_list = parent->subcmd->entry;
    6018:	6824      	ldr	r4, [r4, #0]
			if (entry_list[idx].syntax != NULL) {
    601a:	2214      	movs	r2, #20
    601c:	4353      	muls	r3, r2
    601e:	18e5      	adds	r5, r4, r3
    6020:	58e3      	ldr	r3, [r4, r3]
    6022:	e7f0      	b.n	6006 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x6>
				idx++;
    6024:	3301      	adds	r3, #1
    6026:	e7f8      	b.n	601a <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x1a>
    6028:	0001017c 	.word	0x0001017c
    602c:	000101b0 	.word	0x000101b0
    6030:	000101c4 	.word	0x000101c4
    6034:	000101d4 	.word	0x000101d4
    6038:	000101b0 	.word	0x000101b0
    603c:	000101c4 	.word	0x000101c4

00006040 <z_clear_eos>:
	return sh->ctx->cfg.flags.use_vt100 == 1;
    6040:	6883      	ldr	r3, [r0, #8]
    6042:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    6046:	069b      	lsls	r3, r3, #26
    6048:	d503      	bpl.n	6052 <z_clear_eos+0x12>
    604a:	4902      	ldr	r1, [pc, #8]	; (6054 <z_clear_eos+0x14>)
    604c:	6940      	ldr	r0, [r0, #20]
    604e:	f007 bf10 	b.w	de72 <z_shell_raw_fprintf>
}
    6052:	4770      	bx	lr
    6054:	00010227 	.word	0x00010227

00006058 <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    6058:	4901      	ldr	r1, [pc, #4]	; (6060 <z_cursor_next_line_move.isra.0+0x8>)
    605a:	f007 bf0a 	b.w	de72 <z_shell_raw_fprintf>
    605e:	bf00      	nop
    6060:	0001188e 	.word	0x0001188e

00006064 <z_shell_op_cursor_vert_move>:
#include "shell_ops.h"

#define CMD_CURSOR_LEN 8
void z_shell_op_cursor_vert_move(const struct shell *sh, int32_t delta)
{
	char dir = delta > 0 ? 'A' : 'B';
    6064:	1e0a      	subs	r2, r1, #0
    6066:	dc0d      	bgt.n	6084 <z_shell_op_cursor_vert_move+0x20>

	if (delta == 0) {
    6068:	d00e      	beq.n	6088 <z_shell_op_cursor_vert_move+0x24>
	char dir = delta > 0 ? 'A' : 'B';
    606a:	2342      	movs	r3, #66	; 0x42
	return sh->ctx->cfg.flags.use_vt100 == 1;
    606c:	6881      	ldr	r1, [r0, #8]
    606e:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(sh, "\e[%d%c", delta, dir);
    6072:	0689      	lsls	r1, r1, #26
    6074:	d508      	bpl.n	6088 <z_shell_op_cursor_vert_move+0x24>
    6076:	2a00      	cmp	r2, #0
    6078:	4904      	ldr	r1, [pc, #16]	; (608c <z_shell_op_cursor_vert_move+0x28>)
    607a:	6940      	ldr	r0, [r0, #20]
    607c:	bfb8      	it	lt
    607e:	4252      	neglt	r2, r2
    6080:	f007 bef7 	b.w	de72 <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'A' : 'B';
    6084:	2341      	movs	r3, #65	; 0x41
    6086:	e7f1      	b.n	606c <z_shell_op_cursor_vert_move+0x8>
}
    6088:	4770      	bx	lr
    608a:	bf00      	nop
    608c:	00012164 	.word	0x00012164

00006090 <z_shell_op_cursor_horiz_move>:

void z_shell_op_cursor_horiz_move(const struct shell *sh, int32_t delta)
{
	char dir = delta > 0 ? 'C' : 'D';
    6090:	1e0a      	subs	r2, r1, #0
    6092:	dc0d      	bgt.n	60b0 <z_shell_op_cursor_horiz_move+0x20>

	if (delta == 0) {
    6094:	d00e      	beq.n	60b4 <z_shell_op_cursor_horiz_move+0x24>
	char dir = delta > 0 ? 'C' : 'D';
    6096:	2344      	movs	r3, #68	; 0x44
    6098:	6881      	ldr	r1, [r0, #8]
    609a:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(sh, "\e[%d%c", delta, dir);
    609e:	0689      	lsls	r1, r1, #26
    60a0:	d508      	bpl.n	60b4 <z_shell_op_cursor_horiz_move+0x24>
    60a2:	2a00      	cmp	r2, #0
    60a4:	4904      	ldr	r1, [pc, #16]	; (60b8 <z_shell_op_cursor_horiz_move+0x28>)
    60a6:	6940      	ldr	r0, [r0, #20]
    60a8:	bfb8      	it	lt
    60aa:	4252      	neglt	r2, r2
    60ac:	f007 bee1 	b.w	de72 <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'C' : 'D';
    60b0:	2343      	movs	r3, #67	; 0x43
    60b2:	e7f1      	b.n	6098 <z_shell_op_cursor_horiz_move+0x8>
}
    60b4:	4770      	bx	lr
    60b6:	bf00      	nop
    60b8:	00012164 	.word	0x00012164

000060bc <z_shell_print_cmd>:
	z_shell_fprintf(sh, SHELL_INFO, "%s", sh->ctx->prompt);
}

void z_shell_print_cmd(const struct shell *sh)
{
	z_shell_raw_fprintf(sh->fprintf_ctx, "%s", sh->ctx->cmd_buff);
    60bc:	6882      	ldr	r2, [r0, #8]
    60be:	4902      	ldr	r1, [pc, #8]	; (60c8 <z_shell_print_cmd+0xc>)
    60c0:	6940      	ldr	r0, [r0, #20]
    60c2:	3242      	adds	r2, #66	; 0x42
    60c4:	f007 bed5 	b.w	de72 <z_shell_raw_fprintf>
    60c8:	00011ae4 	.word	0x00011ae4

000060cc <z_shell_vt100_color_set>:
{
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	if (color >= VT100_COLOR_END) {
    60cc:	2908      	cmp	r1, #8
{
    60ce:	460a      	mov	r2, r1
	if (color >= VT100_COLOR_END) {
    60d0:	d817      	bhi.n	6102 <z_shell_vt100_color_set+0x36>
		return;
	}

	if (sh->ctx->vt100_ctx.col.col == color) {
    60d2:	6883      	ldr	r3, [r0, #8]
    60d4:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
    60d8:	4291      	cmp	r1, r2
    60da:	d012      	beq.n	6102 <z_shell_vt100_color_set+0x36>
		return;
	}

	sh->ctx->vt100_ctx.col.col = color;
    60dc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	if (color != SHELL_NORMAL) {
    60e0:	6883      	ldr	r3, [r0, #8]
    60e2:	2a08      	cmp	r2, #8
    60e4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
    60e8:	d005      	beq.n	60f6 <z_shell_vt100_color_set+0x2a>
		Z_SHELL_VT100_CMD(sh, "\e[1;3%dm", color);
    60ea:	0699      	lsls	r1, r3, #26
    60ec:	d509      	bpl.n	6102 <z_shell_vt100_color_set+0x36>
    60ee:	4905      	ldr	r1, [pc, #20]	; (6104 <z_shell_vt100_color_set+0x38>)
    60f0:	6940      	ldr	r0, [r0, #20]
    60f2:	f007 bebe 	b.w	de72 <z_shell_raw_fprintf>
	} else {
		Z_SHELL_VT100_CMD(sh, SHELL_VT100_MODESOFF);
    60f6:	069b      	lsls	r3, r3, #26
    60f8:	d503      	bpl.n	6102 <z_shell_vt100_color_set+0x36>
    60fa:	4903      	ldr	r1, [pc, #12]	; (6108 <z_shell_vt100_color_set+0x3c>)
    60fc:	6940      	ldr	r0, [r0, #20]
    60fe:	f007 beb8 	b.w	de72 <z_shell_raw_fprintf>
	}
}
    6102:	4770      	bx	lr
    6104:	0001216b 	.word	0x0001216b
    6108:	0001022c 	.word	0x0001022c

0000610c <z_shell_vt100_colors_restore>:

void z_shell_vt100_colors_restore(const struct shell *sh,
				  const struct shell_vt100_colors *color)
{
    610c:	b538      	push	{r3, r4, r5, lr}
    610e:	460d      	mov	r5, r1
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	z_shell_vt100_color_set(sh, color->col);
    6110:	7809      	ldrb	r1, [r1, #0]
{
    6112:	4604      	mov	r4, r0
	z_shell_vt100_color_set(sh, color->col);
    6114:	f7ff ffda 	bl	60cc <z_shell_vt100_color_set>
	vt100_bgcolor_set(sh, color->bgcol);
    6118:	786a      	ldrb	r2, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
    611a:	2a07      	cmp	r2, #7
    611c:	d811      	bhi.n	6142 <z_shell_vt100_colors_restore+0x36>
	    (sh->ctx->vt100_ctx.col.bgcol == bgcolor)) {
    611e:	68a3      	ldr	r3, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
    6120:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
    6124:	4291      	cmp	r1, r2
    6126:	d00c      	beq.n	6142 <z_shell_vt100_colors_restore+0x36>
	sh->ctx->vt100_ctx.col.bgcol = bgcolor;
    6128:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    612c:	68a3      	ldr	r3, [r4, #8]
    612e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, "\e[403%dm", bgcolor);
    6132:	069b      	lsls	r3, r3, #26
    6134:	d505      	bpl.n	6142 <z_shell_vt100_colors_restore+0x36>
    6136:	6960      	ldr	r0, [r4, #20]
    6138:	4902      	ldr	r1, [pc, #8]	; (6144 <z_shell_vt100_colors_restore+0x38>)
}
    613a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Z_SHELL_VT100_CMD(sh, "\e[403%dm", bgcolor);
    613e:	f007 be98 	b.w	de72 <z_shell_raw_fprintf>
}
    6142:	bd38      	pop	{r3, r4, r5, pc}
    6144:	00012174 	.word	0x00012174

00006148 <z_shell_op_word_remove>:
{
    6148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos - 1];
    614a:	6883      	ldr	r3, [r0, #8]
	if ((sh->ctx->cmd_buff_len == 0) ||
    614c:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	char *str = &sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos - 1];
    614e:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
{
    6150:	4604      	mov	r4, r0
	if ((sh->ctx->cmd_buff_len == 0) ||
    6152:	2a00      	cmp	r2, #0
    6154:	d050      	beq.n	61f8 <z_shell_op_word_remove+0xb0>
    6156:	2900      	cmp	r1, #0
    6158:	d04e      	beq.n	61f8 <z_shell_op_word_remove+0xb0>
	char *str = &sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos - 1];
    615a:	3141      	adds	r1, #65	; 0x41
	char *str_start = &sh->ctx->cmd_buff[0];
    615c:	f103 0542 	add.w	r5, r3, #66	; 0x42
	char *str = &sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos - 1];
    6160:	440b      	add	r3, r1
	char *str_start = &sh->ctx->cmd_buff[0];
    6162:	4618      	mov	r0, r3
	while ((str >= str_start) && (*str == ' ')) {
    6164:	42a8      	cmp	r0, r5
    6166:	d306      	bcc.n	6176 <z_shell_op_word_remove+0x2e>
    6168:	4601      	mov	r1, r0
    616a:	f811 6901 	ldrb.w	r6, [r1], #-1
    616e:	2e20      	cmp	r6, #32
    6170:	d039      	beq.n	61e6 <z_shell_op_word_remove+0x9e>
	while ((str >= str_start) && (*str != ' ')) {
    6172:	42a8      	cmp	r0, r5
    6174:	d239      	bcs.n	61ea <z_shell_op_word_remove+0xa2>
    6176:	b286      	uxth	r6, r0
    6178:	b29d      	uxth	r5, r3
    617a:	1bab      	subs	r3, r5, r6
    617c:	b29b      	uxth	r3, r3
	memmove(str + 1, str + 1 + chars_to_delete,
    617e:	1c59      	adds	r1, r3, #1
    6180:	1c47      	adds	r7, r0, #1
    6182:	1ad2      	subs	r2, r2, r3
    6184:	4401      	add	r1, r0
    6186:	4638      	mov	r0, r7
    6188:	f008 fd72 	bl	ec70 <memmove>
	sh->ctx->cmd_buff_len -= chars_to_delete;
    618c:	68a2      	ldr	r2, [r4, #8]
    618e:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
    6190:	1b71      	subs	r1, r6, r5
    6192:	fa13 f381 	uxtah	r3, r3, r1
    6196:	8793      	strh	r3, [r2, #60]	; 0x3c
	sh->ctx->cmd_buff[sh->ctx->cmd_buff_len] = '\0';
    6198:	68a3      	ldr	r3, [r4, #8]
    619a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    619c:	4413      	add	r3, r2
    619e:	2200      	movs	r2, #0
    61a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	z_shell_op_cursor_move(sh, -chars_to_delete);
    61a4:	b209      	sxth	r1, r1
    61a6:	4620      	mov	r0, r4
    61a8:	f007 fed0 	bl	df4c <z_shell_op_cursor_move>
    61ac:	68a3      	ldr	r3, [r4, #8]
    61ae:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
    61b2:	069a      	lsls	r2, r3, #26
    61b4:	d503      	bpl.n	61be <z_shell_op_word_remove+0x76>
    61b6:	4911      	ldr	r1, [pc, #68]	; (61fc <z_shell_op_word_remove+0xb4>)
    61b8:	6960      	ldr	r0, [r4, #20]
    61ba:	f007 fe5a 	bl	de72 <z_shell_raw_fprintf>
	z_shell_fprintf(sh, SHELL_NORMAL, "%s", str + 1);
    61be:	463b      	mov	r3, r7
    61c0:	4a0f      	ldr	r2, [pc, #60]	; (6200 <z_shell_op_word_remove+0xb8>)
    61c2:	2108      	movs	r1, #8
    61c4:	4620      	mov	r0, r4
    61c6:	f007 ffd6 	bl	e176 <z_shell_fprintf>
	z_clear_eos(sh);
    61ca:	4620      	mov	r0, r4
    61cc:	f7ff ff38 	bl	6040 <z_clear_eos>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    61d0:	68a3      	ldr	r3, [r4, #8]
    61d2:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    61d6:	069b      	lsls	r3, r3, #26
    61d8:	d50e      	bpl.n	61f8 <z_shell_op_word_remove+0xb0>
    61da:	6960      	ldr	r0, [r4, #20]
    61dc:	4909      	ldr	r1, [pc, #36]	; (6204 <z_shell_op_word_remove+0xbc>)
}
    61de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    61e2:	f007 be46 	b.w	de72 <z_shell_raw_fprintf>
    61e6:	4608      	mov	r0, r1
    61e8:	e7bc      	b.n	6164 <z_shell_op_word_remove+0x1c>
    61ea:	4601      	mov	r1, r0
	while ((str >= str_start) && (*str != ' ')) {
    61ec:	f811 6901 	ldrb.w	r6, [r1], #-1
    61f0:	2e20      	cmp	r6, #32
    61f2:	d0c0      	beq.n	6176 <z_shell_op_word_remove+0x2e>
    61f4:	4608      	mov	r0, r1
    61f6:	e7bc      	b.n	6172 <z_shell_op_word_remove+0x2a>
}
    61f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    61fa:	bf00      	nop
    61fc:	00010231 	.word	0x00010231
    6200:	00011ae4 	.word	0x00011ae4
    6204:	00010235 	.word	0x00010235

00006208 <reprint_from_cursor>:
{
    6208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    620c:	4604      	mov	r4, r0
    620e:	460d      	mov	r5, r1
	if (data_removed) {
    6210:	4617      	mov	r7, r2
    6212:	b10a      	cbz	r2, 6218 <reprint_from_cursor+0x10>
		z_clear_eos(sh);
    6214:	f7ff ff14 	bl	6040 <z_clear_eos>
	return sh->ctx->cfg.flags.obscure == 1;
    6218:	68a3      	ldr	r3, [r4, #8]
		int len = strlen(&sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos]);
    621a:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    621c:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
    6220:	3242      	adds	r2, #66	; 0x42
    6222:	4413      	add	r3, r2
	if (z_flag_obscure_get(sh)) {
    6224:	074a      	lsls	r2, r1, #29
    6226:	d51f      	bpl.n	6268 <reprint_from_cursor+0x60>
		int len = strlen(&sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos]);
    6228:	4618      	mov	r0, r3
    622a:	f008 fce1 	bl	ebf0 <strlen>
			z_shell_raw_fprintf(sh->fprintf_ctx, "*");
    622e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 6274 <reprint_from_cursor+0x6c>
		int len = strlen(&sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos]);
    6232:	4606      	mov	r6, r0
		while (len--) {
    6234:	b996      	cbnz	r6, 625c <reprint_from_cursor+0x54>
	sh->ctx->cmd_buff_pos = sh->ctx->cmd_buff_len;
    6236:	68a3      	ldr	r3, [r4, #8]
    6238:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    623a:	87da      	strh	r2, [r3, #62]	; 0x3e
	if (full_line_cmd(sh)) {
    623c:	4620      	mov	r0, r4
    623e:	f007 fe25 	bl	de8c <full_line_cmd>
    6242:	b120      	cbz	r0, 624e <reprint_from_cursor+0x46>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
    6244:	b107      	cbz	r7, 6248 <reprint_from_cursor+0x40>
    6246:	b115      	cbz	r5, 624e <reprint_from_cursor+0x46>
			z_cursor_next_line_move(sh);
    6248:	6960      	ldr	r0, [r4, #20]
    624a:	f7ff ff05 	bl	6058 <z_cursor_next_line_move.isra.0>
	z_shell_op_cursor_move(sh, -diff);
    624e:	4269      	negs	r1, r5
    6250:	4620      	mov	r0, r4
    6252:	b209      	sxth	r1, r1
}
    6254:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_shell_op_cursor_move(sh, -diff);
    6258:	f007 be78 	b.w	df4c <z_shell_op_cursor_move>
			z_shell_raw_fprintf(sh->fprintf_ctx, "*");
    625c:	6960      	ldr	r0, [r4, #20]
    625e:	4641      	mov	r1, r8
    6260:	f007 fe07 	bl	de72 <z_shell_raw_fprintf>
    6264:	3e01      	subs	r6, #1
    6266:	e7e5      	b.n	6234 <reprint_from_cursor+0x2c>
		z_shell_fprintf(sh, SHELL_NORMAL, "%s",
    6268:	4a03      	ldr	r2, [pc, #12]	; (6278 <reprint_from_cursor+0x70>)
    626a:	2108      	movs	r1, #8
    626c:	4620      	mov	r0, r4
    626e:	f007 ff82 	bl	e176 <z_shell_fprintf>
    6272:	e7e0      	b.n	6236 <reprint_from_cursor+0x2e>
    6274:	00012a95 	.word	0x00012a95
    6278:	00011ae4 	.word	0x00011ae4

0000627c <z_shell_op_char_insert>:
{
    627c:	b513      	push	{r0, r1, r4, lr}
	return sh->ctx->cfg.flags.insert_mode == 1;
    627e:	6883      	ldr	r3, [r0, #8]
    6280:	f88d 1007 	strb.w	r1, [sp, #7]
    6284:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
    6288:	4604      	mov	r4, r0
	if (z_flag_insert_mode_get(sh) &&
    628a:	07d0      	lsls	r0, r2, #31
    628c:	d522      	bpl.n	62d4 <z_shell_op_char_insert+0x58>
	    (sh->ctx->cmd_buff_len != sh->ctx->cmd_buff_pos)) {
    628e:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
	if (z_flag_insert_mode_get(sh) &&
    6290:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    6292:	428a      	cmp	r2, r1
    6294:	d01e      	beq.n	62d4 <z_shell_op_char_insert+0x58>
	sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos++] = data;
    6296:	1c48      	adds	r0, r1, #1
    6298:	87d8      	strh	r0, [r3, #62]	; 0x3e
    629a:	440b      	add	r3, r1
		char_replace(sh, data);
    629c:	f89d 2007 	ldrb.w	r2, [sp, #7]
	sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos++] = data;
    62a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	return sh->ctx->cfg.flags.echo == 1;
    62a4:	68a3      	ldr	r3, [r4, #8]
    62a6:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
	if (!z_flag_echo_get(sh)) {
    62aa:	0789      	lsls	r1, r1, #30
    62ac:	d510      	bpl.n	62d0 <z_shell_op_char_insert+0x54>
	return sh->ctx->cfg.flags.obscure == 1;
    62ae:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	z_shell_raw_fprintf(sh->fprintf_ctx, "%c", data);
    62b2:	6960      	ldr	r0, [r4, #20]
    62b4:	490b      	ldr	r1, [pc, #44]	; (62e4 <z_shell_op_char_insert+0x68>)
		data = '*';
    62b6:	f013 0f04 	tst.w	r3, #4
	z_shell_raw_fprintf(sh->fprintf_ctx, "%c", data);
    62ba:	bf18      	it	ne
    62bc:	222a      	movne	r2, #42	; 0x2a
    62be:	f007 fdd8 	bl	de72 <z_shell_raw_fprintf>
	if (z_shell_cursor_in_empty_line(sh)) {
    62c2:	4620      	mov	r0, r4
    62c4:	f007 fdf6 	bl	deb4 <z_shell_cursor_in_empty_line>
    62c8:	b110      	cbz	r0, 62d0 <z_shell_op_char_insert+0x54>
		z_cursor_next_line_move(sh);
    62ca:	6960      	ldr	r0, [r4, #20]
    62cc:	f7ff fec4 	bl	6058 <z_cursor_next_line_move.isra.0>
}
    62d0:	b002      	add	sp, #8
    62d2:	bd10      	pop	{r4, pc}
		data_insert(sh, &data, 1);
    62d4:	2201      	movs	r2, #1
    62d6:	f10d 0107 	add.w	r1, sp, #7
    62da:	4620      	mov	r0, r4
    62dc:	f007 ff58 	bl	e190 <data_insert>
}
    62e0:	e7f6      	b.n	62d0 <z_shell_op_char_insert+0x54>
    62e2:	bf00      	nop
    62e4:	00011039 	.word	0x00011039

000062e8 <z_shell_print_prompt_and_cmd>:
{
    62e8:	b510      	push	{r4, lr}
	z_shell_fprintf(sh, SHELL_INFO, "%s", sh->ctx->prompt);
    62ea:	6883      	ldr	r3, [r0, #8]
    62ec:	4a09      	ldr	r2, [pc, #36]	; (6314 <z_shell_print_prompt_and_cmd+0x2c>)
    62ee:	681b      	ldr	r3, [r3, #0]
{
    62f0:	4604      	mov	r4, r0
	z_shell_fprintf(sh, SHELL_INFO, "%s", sh->ctx->prompt);
    62f2:	2102      	movs	r1, #2
    62f4:	f007 ff3f 	bl	e176 <z_shell_fprintf>
	return sh->ctx->cfg.flags.echo == 1;
    62f8:	68a3      	ldr	r3, [r4, #8]
    62fa:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	if (z_flag_echo_get(sh)) {
    62fe:	079b      	lsls	r3, r3, #30
    6300:	d507      	bpl.n	6312 <z_shell_print_prompt_and_cmd+0x2a>
		z_shell_print_cmd(sh);
    6302:	4620      	mov	r0, r4
    6304:	f7ff feda 	bl	60bc <z_shell_print_cmd>
		z_shell_op_cursor_position_synchronize(sh);
    6308:	4620      	mov	r0, r4
}
    630a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_op_cursor_position_synchronize(sh);
    630e:	f007 bdfa 	b.w	df06 <z_shell_op_cursor_position_synchronize>
}
    6312:	bd10      	pop	{r4, pc}
    6314:	00011ae4 	.word	0x00011ae4

00006318 <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    6318:	4901      	ldr	r1, [pc, #4]	; (6320 <z_cursor_next_line_move.isra.0+0x8>)
    631a:	f008 b90b 	b.w	e534 <z_shell_raw_fprintf>
    631e:	bf00      	nop
    6320:	0001188e 	.word	0x0001188e

00006324 <z_shell_help_subcmd_print>:
 * help string
 */
void z_shell_help_subcmd_print(const struct shell *sh,
			       const struct shell_static_entry *parent,
			       const char *description)
{
    6324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6328:	460e      	mov	r6, r1
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry dloc;
	uint16_t longest = 0U;
	size_t idx = 0;
    632a:	2100      	movs	r1, #0
{
    632c:	b08b      	sub	sp, #44	; 0x2c
    632e:	4604      	mov	r4, r0
    6330:	4617      	mov	r7, r2
	uint16_t longest = 0U;
    6332:	460d      	mov	r5, r1

	/* Searching for the longest subcommand to print. */
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    6334:	aa05      	add	r2, sp, #20
    6336:	4630      	mov	r0, r6
    6338:	f101 0801 	add.w	r8, r1, #1
    633c:	f7ff fe46 	bl	5fcc <z_shell_cmd_get>
    6340:	b9a0      	cbnz	r0, 636c <z_shell_help_subcmd_print+0x48>
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
	}

	/* No help to print */
	if (longest == 0) {
    6342:	b185      	cbz	r5, 6366 <z_shell_help_subcmd_print+0x42>
		return;
	}

	if (description != NULL) {
    6344:	b127      	cbz	r7, 6350 <z_shell_help_subcmd_print+0x2c>
		z_shell_fprintf(sh, SHELL_NORMAL, description);
    6346:	463a      	mov	r2, r7
    6348:	2108      	movs	r1, #8
    634a:	4620      	mov	r0, r4
    634c:	f007 ff13 	bl	e176 <z_shell_fprintf>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    6350:	4f21      	ldr	r7, [pc, #132]	; (63d8 <z_shell_help_subcmd_print+0xb4>)
		z_shell_fprintf(sh, SHELL_NORMAL, "%s:", tabulator);
    6352:	f8df b088 	ldr.w	fp, [pc, #136]	; 63dc <z_shell_help_subcmd_print+0xb8>
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    6356:	2100      	movs	r1, #0
	}

	/* Printing subcommands and help string (if exists). */
	idx = 0;

	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    6358:	aa05      	add	r2, sp, #20
    635a:	4630      	mov	r0, r6
    635c:	f101 0a01 	add.w	sl, r1, #1
    6360:	f7ff fe34 	bl	5fcc <z_shell_cmd_get>
    6364:	b960      	cbnz	r0, 6380 <z_shell_help_subcmd_print+0x5c>
		help_item_print(sh, entry->syntax, longest, entry->help);
	}
}
    6366:	b00b      	add	sp, #44	; 0x2c
    6368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
    636c:	6800      	ldr	r0, [r0, #0]
	return str == NULL ? 0U : (uint16_t)strlen(str);
    636e:	b110      	cbz	r0, 6376 <z_shell_help_subcmd_print+0x52>
    6370:	f008 fc3e 	bl	ebf0 <strlen>
    6374:	b280      	uxth	r0, r0
    6376:	4285      	cmp	r5, r0
    6378:	bf38      	it	cc
    637a:	4605      	movcc	r5, r0
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    637c:	4641      	mov	r1, r8
    637e:	e7d9      	b.n	6334 <z_shell_help_subcmd_print+0x10>
		help_item_print(sh, entry->syntax, longest, entry->help);
    6380:	6803      	ldr	r3, [r0, #0]
    6382:	f8d0 9004 	ldr.w	r9, [r0, #4]
    6386:	9303      	str	r3, [sp, #12]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    6388:	4638      	mov	r0, r7
    638a:	f008 fc31 	bl	ebf0 <strlen>
	if ((item_name == NULL) || (item_name[0] == '\0')) {
    638e:	9b03      	ldr	r3, [sp, #12]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    6390:	4680      	mov	r8, r0
	if ((item_name == NULL) || (item_name[0] == '\0')) {
    6392:	b17b      	cbz	r3, 63b4 <z_shell_help_subcmd_print+0x90>
    6394:	781a      	ldrb	r2, [r3, #0]
    6396:	b16a      	cbz	r2, 63b4 <z_shell_help_subcmd_print+0x90>
		z_shell_fprintf(sh, SHELL_NORMAL, "%s%-*s", tabulator,
    6398:	e9cd 5300 	strd	r5, r3, [sp]
    639c:	4a10      	ldr	r2, [pc, #64]	; (63e0 <z_shell_help_subcmd_print+0xbc>)
    639e:	463b      	mov	r3, r7
    63a0:	2108      	movs	r1, #8
    63a2:	4620      	mov	r0, r4
    63a4:	f007 fee7 	bl	e176 <z_shell_fprintf>
	if (item_help == NULL) {
    63a8:	f1b9 0f00 	cmp.w	r9, #0
    63ac:	d104      	bne.n	63b8 <z_shell_help_subcmd_print+0x94>
		z_cursor_next_line_move(sh);
    63ae:	6960      	ldr	r0, [r4, #20]
    63b0:	f7ff ffb2 	bl	6318 <z_cursor_next_line_move.isra.0>
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    63b4:	4651      	mov	r1, sl
    63b6:	e7cf      	b.n	6358 <z_shell_help_subcmd_print+0x34>
		z_shell_fprintf(sh, SHELL_NORMAL, "%s:", tabulator);
    63b8:	465a      	mov	r2, fp
    63ba:	4620      	mov	r0, r4
    63bc:	463b      	mov	r3, r7
    63be:	2108      	movs	r1, #8
    63c0:	f007 fed9 	bl	e176 <z_shell_fprintf>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    63c4:	1c6a      	adds	r2, r5, #1
    63c6:	eb02 0248 	add.w	r2, r2, r8, lsl #1
	formatted_text_print(sh, item_help, offset, false);
    63ca:	b292      	uxth	r2, r2
    63cc:	4649      	mov	r1, r9
    63ce:	4620      	mov	r0, r4
    63d0:	f008 f8bd 	bl	e54e <formatted_text_print.constprop.0>
    63d4:	e7ee      	b.n	63b4 <z_shell_help_subcmd_print+0x90>
    63d6:	bf00      	nop
    63d8:	00012196 	.word	0x00012196
    63dc:	00012184 	.word	0x00012184
    63e0:	0001217d 	.word	0x0001217d

000063e4 <z_shell_help_cmd_print>:

void z_shell_help_cmd_print(const struct shell *sh,
			    const struct shell_static_entry *cmd)
{
    63e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    63e6:	4606      	mov	r6, r0
	static const char cmd_sep[] = " - "; /* commands separator */
	uint16_t field_width;

	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    63e8:	6808      	ldr	r0, [r1, #0]
{
    63ea:	460d      	mov	r5, r1
    63ec:	b1b8      	cbz	r0, 641e <z_shell_help_cmd_print+0x3a>
    63ee:	f008 fbff 	bl	ebf0 <strlen>
    63f2:	b284      	uxth	r4, r0
    63f4:	4f0b      	ldr	r7, [pc, #44]	; (6424 <z_shell_help_cmd_print+0x40>)
    63f6:	4638      	mov	r0, r7
    63f8:	f008 fbfa 	bl	ebf0 <strlen>

	z_shell_fprintf(sh, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
    63fc:	9700      	str	r7, [sp, #0]
    63fe:	682b      	ldr	r3, [r5, #0]
    6400:	4a09      	ldr	r2, [pc, #36]	; (6428 <z_shell_help_cmd_print+0x44>)
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    6402:	4404      	add	r4, r0
	z_shell_fprintf(sh, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
    6404:	2108      	movs	r1, #8
    6406:	4630      	mov	r0, r6
    6408:	f007 feb5 	bl	e176 <z_shell_fprintf>
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    640c:	b2a4      	uxth	r4, r4

	formatted_text_print(sh, cmd->help, field_width, false);
    640e:	6869      	ldr	r1, [r5, #4]
    6410:	4622      	mov	r2, r4
    6412:	4630      	mov	r0, r6
}
    6414:	b003      	add	sp, #12
    6416:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	formatted_text_print(sh, cmd->help, field_width, false);
    641a:	f008 b898 	b.w	e54e <formatted_text_print.constprop.0>
    641e:	4604      	mov	r4, r0
    6420:	e7e8      	b.n	63f4 <z_shell_help_cmd_print+0x10>
    6422:	bf00      	nop
    6424:	00012192 	.word	0x00012192
    6428:	00011f84 	.word	0x00011f84

0000642c <z_shell_help_request>:

bool z_shell_help_request(const char *str)
{
    642c:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP_OPT_PARSE)) {
		return false;
	}

	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
    642e:	4907      	ldr	r1, [pc, #28]	; (644c <z_shell_help_request+0x20>)
{
    6430:	4604      	mov	r4, r0
	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
    6432:	f008 fbed 	bl	ec10 <strcmp>
    6436:	b138      	cbz	r0, 6448 <z_shell_help_request+0x1c>
    6438:	4905      	ldr	r1, [pc, #20]	; (6450 <z_shell_help_request+0x24>)
    643a:	4620      	mov	r0, r4
    643c:	f008 fbe8 	bl	ec10 <strcmp>
    6440:	fab0 f080 	clz	r0, r0
    6444:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
    6446:	bd10      	pop	{r4, pc}
		return true;
    6448:	2001      	movs	r0, #1
    644a:	e7fc      	b.n	6446 <z_shell_help_request+0x1a>
    644c:	00012188 	.word	0x00012188
    6450:	0001218b 	.word	0x0001218b

00006454 <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *sh,
			      size_t argc, char **argv)
{
    6454:	b510      	push	{r4, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
    6456:	6883      	ldr	r3, [r0, #8]
    6458:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SETCOL_80);
    645c:	069b      	lsls	r3, r3, #26
{
    645e:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SETCOL_80);
    6460:	d503      	bpl.n	646a <cmd_resize_default+0x16>
    6462:	4906      	ldr	r1, [pc, #24]	; (647c <cmd_resize_default+0x28>)
    6464:	6940      	ldr	r0, [r0, #20]
    6466:	f008 f8e6 	bl	e636 <z_shell_raw_fprintf>
	sh->ctx->vt100_ctx.cons.terminal_wid = SHELL_DEFAULT_TERMINAL_WIDTH;
    646a:	68a3      	ldr	r3, [r4, #8]
    646c:	2250      	movs	r2, #80	; 0x50
    646e:	855a      	strh	r2, [r3, #42]	; 0x2a
	sh->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
    6470:	68a3      	ldr	r3, [r4, #8]
    6472:	2218      	movs	r2, #24
    6474:	851a      	strh	r2, [r3, #40]	; 0x28

	return 0;
}
    6476:	2000      	movs	r0, #0
    6478:	bd10      	pop	{r4, pc}
    647a:	bf00      	nop
    647c:	00010239 	.word	0x00010239

00006480 <cmd_shell_stats_show>:
{
    6480:	b508      	push	{r3, lr}
	shell_print(sh, "Lost logs: %lu", sh->stats->log_lost_cnt);
    6482:	6983      	ldr	r3, [r0, #24]
    6484:	4a03      	ldr	r2, [pc, #12]	; (6494 <cmd_shell_stats_show+0x14>)
    6486:	681b      	ldr	r3, [r3, #0]
    6488:	2108      	movs	r1, #8
    648a:	f007 fa56 	bl	d93a <shell_fprintf>
}
    648e:	2000      	movs	r0, #0
    6490:	bd08      	pop	{r3, pc}
    6492:	bf00      	nop
    6494:	00012199 	.word	0x00012199

00006498 <cmd_backends>:
{
    6498:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	shell_print(sh, "Active shell backends:");
    649c:	4a0e      	ldr	r2, [pc, #56]	; (64d8 <cmd_backends+0x40>)
	STRUCT_SECTION_FOREACH(shell, obj) {
    649e:	4c0f      	ldr	r4, [pc, #60]	; (64dc <cmd_backends+0x44>)
    64a0:	4e0f      	ldr	r6, [pc, #60]	; (64e0 <cmd_backends+0x48>)
		shell_print(sh, "  %2d. :%s", cnt++, obj->ctx->prompt);
    64a2:	f8df 8040 	ldr.w	r8, [pc, #64]	; 64e4 <cmd_backends+0x4c>
	shell_print(sh, "Active shell backends:");
    64a6:	2108      	movs	r1, #8
{
    64a8:	4605      	mov	r5, r0
	shell_print(sh, "Active shell backends:");
    64aa:	f007 fa46 	bl	d93a <shell_fprintf>
	STRUCT_SECTION_FOREACH(shell, obj) {
    64ae:	2300      	movs	r3, #0
    64b0:	42b4      	cmp	r4, r6
    64b2:	f103 0701 	add.w	r7, r3, #1
    64b6:	d303      	bcc.n	64c0 <cmd_backends+0x28>
}
    64b8:	2000      	movs	r0, #0
    64ba:	b002      	add	sp, #8
    64bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		shell_print(sh, "  %2d. :%s", cnt++, obj->ctx->prompt);
    64c0:	68a2      	ldr	r2, [r4, #8]
    64c2:	6812      	ldr	r2, [r2, #0]
    64c4:	9200      	str	r2, [sp, #0]
    64c6:	b29b      	uxth	r3, r3
    64c8:	4642      	mov	r2, r8
    64ca:	2108      	movs	r1, #8
    64cc:	4628      	mov	r0, r5
    64ce:	f007 fa34 	bl	d93a <shell_fprintf>
	STRUCT_SECTION_FOREACH(shell, obj) {
    64d2:	3430      	adds	r4, #48	; 0x30
    64d4:	463b      	mov	r3, r7
    64d6:	e7eb      	b.n	64b0 <cmd_backends+0x18>
    64d8:	000121a9 	.word	0x000121a9
    64dc:	0001014c 	.word	0x0001014c
    64e0:	0001017c 	.word	0x0001017c
    64e4:	000121c1 	.word	0x000121c1

000064e8 <cmd_history>:
{
    64e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			shell_print(sh, "[%3d] %s",
    64ea:	4e0f      	ldr	r6, [pc, #60]	; (6528 <cmd_history+0x40>)
{
    64ec:	4604      	mov	r4, r0
    64ee:	2500      	movs	r5, #0
				    sh->ctx->temp_buff, &len);
    64f0:	68a2      	ldr	r2, [r4, #8]
		z_shell_history_get(sh->history, true,
    64f2:	68e0      	ldr	r0, [r4, #12]
    64f4:	f10d 030e 	add.w	r3, sp, #14
    64f8:	f502 72a1 	add.w	r2, r2, #322	; 0x142
    64fc:	2101      	movs	r1, #1
    64fe:	f008 f944 	bl	e78a <z_shell_history_get>
		if (len) {
    6502:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    6506:	68a3      	ldr	r3, [r4, #8]
    6508:	b150      	cbz	r0, 6520 <cmd_history+0x38>
			shell_print(sh, "[%3d] %s",
    650a:	f503 73a1 	add.w	r3, r3, #322	; 0x142
    650e:	9300      	str	r3, [sp, #0]
    6510:	4632      	mov	r2, r6
    6512:	462b      	mov	r3, r5
    6514:	2108      	movs	r1, #8
    6516:	4620      	mov	r0, r4
    6518:	f007 fa0f 	bl	d93a <shell_fprintf>
	while (1) {
    651c:	3501      	adds	r5, #1
		z_shell_history_get(sh->history, true,
    651e:	e7e7      	b.n	64f0 <cmd_history+0x8>
	sh->ctx->temp_buff[0] = '\0';
    6520:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
}
    6524:	b004      	add	sp, #16
    6526:	bd70      	pop	{r4, r5, r6, pc}
    6528:	000121cd 	.word	0x000121cd

0000652c <cmd_echo>:
	if (argc == 2) {
    652c:	2902      	cmp	r1, #2
{
    652e:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
    6530:	d10d      	bne.n	654e <cmd_echo+0x22>
		shell_error(sh, "%s:%s%s", argv[0],
    6532:	6853      	ldr	r3, [r2, #4]
    6534:	9301      	str	r3, [sp, #4]
    6536:	4b0e      	ldr	r3, [pc, #56]	; (6570 <cmd_echo+0x44>)
    6538:	9300      	str	r3, [sp, #0]
    653a:	6813      	ldr	r3, [r2, #0]
    653c:	4a0d      	ldr	r2, [pc, #52]	; (6574 <cmd_echo+0x48>)
    653e:	2101      	movs	r1, #1
    6540:	f007 f9fb 	bl	d93a <shell_fprintf>
    6544:	f06f 0015 	mvn.w	r0, #21
}
    6548:	b003      	add	sp, #12
    654a:	f85d fb04 	ldr.w	pc, [sp], #4
	return sh->ctx->cfg.flags.echo == 1;
    654e:	6883      	ldr	r3, [r0, #8]
	shell_print(sh, "Echo status: %s",
    6550:	4a09      	ldr	r2, [pc, #36]	; (6578 <cmd_echo+0x4c>)
    6552:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
    6556:	f013 0f02 	tst.w	r3, #2
    655a:	f04f 0108 	mov.w	r1, #8
    655e:	4b07      	ldr	r3, [pc, #28]	; (657c <cmd_echo+0x50>)
    6560:	bf08      	it	eq
    6562:	4613      	moveq	r3, r2
    6564:	4a06      	ldr	r2, [pc, #24]	; (6580 <cmd_echo+0x54>)
    6566:	f007 f9e8 	bl	d93a <shell_fprintf>
	return 0;
    656a:	2000      	movs	r0, #0
    656c:	e7ec      	b.n	6548 <cmd_echo+0x1c>
    656e:	bf00      	nop
    6570:	000121e0 	.word	0x000121e0
    6574:	000121d7 	.word	0x000121d7
    6578:	00011773 	.word	0x00011773
    657c:	00011a4b 	.word	0x00011a4b
    6580:	000121f5 	.word	0x000121f5

00006584 <cmd_clear>:
{
    6584:	b510      	push	{r4, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
    6586:	6883      	ldr	r3, [r0, #8]
    6588:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CURSORHOME);
    658c:	069a      	lsls	r2, r3, #26
{
    658e:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CURSORHOME);
    6590:	d503      	bpl.n	659a <cmd_clear+0x16>
    6592:	4907      	ldr	r1, [pc, #28]	; (65b0 <cmd_clear+0x2c>)
    6594:	6940      	ldr	r0, [r0, #20]
    6596:	f008 f84e 	bl	e636 <z_shell_raw_fprintf>
    659a:	68a3      	ldr	r3, [r4, #8]
    659c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEARSCREEN);
    65a0:	069b      	lsls	r3, r3, #26
    65a2:	d503      	bpl.n	65ac <cmd_clear+0x28>
    65a4:	4903      	ldr	r1, [pc, #12]	; (65b4 <cmd_clear+0x30>)
    65a6:	6960      	ldr	r0, [r4, #20]
    65a8:	f008 f845 	bl	e636 <z_shell_raw_fprintf>
}
    65ac:	2000      	movs	r0, #0
    65ae:	bd10      	pop	{r4, pc}
    65b0:	00010240 	.word	0x00010240
    65b4:	00010245 	.word	0x00010245

000065b8 <cmd_resize>:

static int cmd_resize(const struct shell *sh, size_t argc, char **argv)
{
    65b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (argc != 1) {
    65ba:	2901      	cmp	r1, #1
{
    65bc:	b085      	sub	sp, #20
    65be:	4604      	mov	r4, r0
	if (argc != 1) {
    65c0:	d00c      	beq.n	65dc <cmd_resize+0x24>
		shell_error(sh, "%s:%s%s", argv[0],
    65c2:	6853      	ldr	r3, [r2, #4]
    65c4:	9301      	str	r3, [sp, #4]
    65c6:	4b60      	ldr	r3, [pc, #384]	; (6748 <cmd_resize+0x190>)
    65c8:	9300      	str	r3, [sp, #0]
    65ca:	6813      	ldr	r3, [r2, #0]
    65cc:	4a5f      	ldr	r2, [pc, #380]	; (674c <cmd_resize+0x194>)
    65ce:	2101      	movs	r1, #1
    65d0:	f007 f9b3 	bl	d93a <shell_fprintf>
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
    65d4:	f06f 0015 	mvn.w	r0, #21
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
    65d8:	b005      	add	sp, #20
    65da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    65dc:	6883      	ldr	r3, [r0, #8]
    65de:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
    65e2:	0699      	lsls	r1, r3, #26
    65e4:	d503      	bpl.n	65ee <cmd_resize+0x36>
    65e6:	495a      	ldr	r1, [pc, #360]	; (6750 <cmd_resize+0x198>)
    65e8:	6940      	ldr	r0, [r0, #20]
    65ea:	f008 f824 	bl	e636 <z_shell_raw_fprintf>
	z_shell_op_cursor_vert_move(sh, -SHELL_MAX_TERMINAL_SIZE);
    65ee:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
    65f2:	4620      	mov	r0, r4
    65f4:	f7ff fd36 	bl	6064 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(sh, SHELL_MAX_TERMINAL_SIZE);
    65f8:	21fa      	movs	r1, #250	; 0xfa
    65fa:	4620      	mov	r0, r4
    65fc:	f7ff fd48 	bl	6090 <z_shell_op_cursor_horiz_move>
	memset(sh->ctx->temp_buff, 0, sizeof(sh->ctx->temp_buff));
    6600:	68a0      	ldr	r0, [r4, #8]
	char c = 0;
    6602:	2500      	movs	r5, #0
	memset(sh->ctx->temp_buff, 0, sizeof(sh->ctx->temp_buff));
    6604:	f44f 7280 	mov.w	r2, #256	; 0x100
    6608:	4629      	mov	r1, r5
    660a:	f500 70a1 	add.w	r0, r0, #322	; 0x142
	char c = 0;
    660e:	f88d 500b 	strb.w	r5, [sp, #11]
	memset(sh->ctx->temp_buff, 0, sizeof(sh->ctx->temp_buff));
    6612:	f008 fb4f 	bl	ecb4 <memset>
	z_shell_raw_fprintf(sh->fprintf_ctx, cmd_get_terminal_size);
    6616:	494f      	ldr	r1, [pc, #316]	; (6754 <cmd_resize+0x19c>)
    6618:	6960      	ldr	r0, [r4, #20]
    661a:	f008 f80c 	bl	e636 <z_shell_raw_fprintf>
	z_shell_fprintf_buffer_flush(sh->fprintf_ctx);
    661e:	6960      	ldr	r0, [r4, #20]
    6620:	f007 f9b3 	bl	d98a <z_shell_fprintf_buffer_flush>
    6624:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			(void)sh->iface->api->read(sh->iface, &c,
    6628:	6860      	ldr	r0, [r4, #4]
    662a:	6803      	ldr	r3, [r0, #0]
    662c:	2201      	movs	r2, #1
    662e:	691f      	ldr	r7, [r3, #16]
    6630:	f10d 010b 	add.w	r1, sp, #11
    6634:	ab03      	add	r3, sp, #12
    6636:	47b8      	blx	r7
			if (cnt == 0) {
    6638:	9b03      	ldr	r3, [sp, #12]
    663a:	b9f3      	cbnz	r3, 667a <cmd_resize+0xc2>
	for (uint16_t i = 0; i < 1000; i++) {
    663c:	3e01      	subs	r6, #1
	z_impl_k_busy_wait(usec_to_wait);
    663e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    6642:	b2b6      	uxth	r6, r6
    6644:	f009 fa18 	bl	fa78 <z_impl_k_busy_wait>
    6648:	2e00      	cmp	r6, #0
    664a:	d1ed      	bne.n	6628 <cmd_resize+0x70>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    664c:	68a3      	ldr	r3, [r4, #8]
    664e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    6652:	069b      	lsls	r3, r3, #26
    6654:	d503      	bpl.n	665e <cmd_resize+0xa6>
    6656:	4940      	ldr	r1, [pc, #256]	; (6758 <cmd_resize+0x1a0>)
    6658:	6960      	ldr	r0, [r4, #20]
    665a:	f007 ffec 	bl	e636 <z_shell_raw_fprintf>
		sh->ctx->vt100_ctx.cons.terminal_wid =
    665e:	68a3      	ldr	r3, [r4, #8]
    6660:	2250      	movs	r2, #80	; 0x50
    6662:	855a      	strh	r2, [r3, #42]	; 0x2a
		sh->ctx->vt100_ctx.cons.terminal_hei =
    6664:	68a3      	ldr	r3, [r4, #8]
    6666:	2218      	movs	r2, #24
    6668:	851a      	strh	r2, [r3, #40]	; 0x28
		shell_warn(sh, "No response from the terminal, assumed 80x24"
    666a:	4620      	mov	r0, r4
    666c:	4a3b      	ldr	r2, [pc, #236]	; (675c <cmd_resize+0x1a4>)
    666e:	2103      	movs	r1, #3
    6670:	f007 f963 	bl	d93a <shell_fprintf>
    6674:	f06f 0007 	mvn.w	r0, #7
    6678:	e7ae      	b.n	65d8 <cmd_resize+0x20>
			if ((c != SHELL_VT100_ASCII_ESC) &&
    667a:	f89d 200b 	ldrb.w	r2, [sp, #11]
			    (sh->ctx->temp_buff[0] !=
    667e:	68a3      	ldr	r3, [r4, #8]
			if ((c != SHELL_VT100_ASCII_ESC) &&
    6680:	2a1b      	cmp	r2, #27
    6682:	d053      	beq.n	672c <cmd_resize+0x174>
    6684:	f893 1142 	ldrb.w	r1, [r3, #322]	; 0x142
    6688:	291b      	cmp	r1, #27
    668a:	d1cd      	bne.n	6628 <cmd_resize+0x70>
			if (c == 'R') { /* End of response from the terminal. */
    668c:	2a52      	cmp	r2, #82	; 0x52
    668e:	d14d      	bne.n	672c <cmd_resize+0x174>
				sh->ctx->temp_buff[buff_idx] = '\0';
    6690:	195a      	adds	r2, r3, r5
    6692:	2300      	movs	r3, #0
    6694:	f882 3142 	strb.w	r3, [r2, #322]	; 0x142
				if (sh->ctx->temp_buff[1] != '[') {
    6698:	68a6      	ldr	r6, [r4, #8]
    669a:	f896 2143 	ldrb.w	r2, [r6, #323]	; 0x143
    669e:	2a5b      	cmp	r2, #91	; 0x5b
    66a0:	d12b      	bne.n	66fa <cmd_resize+0x142>
    66a2:	f206 1043 	addw	r0, r6, #323	; 0x143
				buff_idx = 2U;
    66a6:	2502      	movs	r5, #2
				while (sh->ctx->temp_buff[buff_idx] != ';') {
    66a8:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    66ac:	462a      	mov	r2, r5
    66ae:	293b      	cmp	r1, #59	; 0x3b
					(sh->ctx->temp_buff[buff_idx++] -
    66b0:	f105 0501 	add.w	r5, r5, #1
    66b4:	b2ad      	uxth	r5, r5
				while (sh->ctx->temp_buff[buff_idx] != ';') {
    66b6:	d123      	bne.n	6700 <cmd_resize+0x148>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    66b8:	2aff      	cmp	r2, #255	; 0xff
    66ba:	d0c7      	beq.n	664c <cmd_resize+0x94>
    66bc:	f502 72a1 	add.w	r2, r2, #322	; 0x142
    66c0:	fa16 f182 	uxtah	r1, r6, r2
	*x = 0U;
    66c4:	2200      	movs	r2, #0
				while (sh->ctx->temp_buff[buff_idx]
    66c6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
							     != '\0') {
    66ca:	bb18      	cbnz	r0, 6714 <cmd_resize+0x15c>
				sh->ctx->temp_buff[0] = 0;
    66cc:	f886 0142 	strb.w	r0, [r6, #322]	; 0x142
				if (*x > SHELL_MAX_TERMINAL_SIZE) {
    66d0:	2afa      	cmp	r2, #250	; 0xfa
		sh->ctx->vt100_ctx.cons.terminal_wid = x;
    66d2:	68a1      	ldr	r1, [r4, #8]
				if (*x > SHELL_MAX_TERMINAL_SIZE) {
    66d4:	bf28      	it	cs
    66d6:	22fa      	movcs	r2, #250	; 0xfa
		sh->ctx->vt100_ctx.cons.terminal_wid = x;
    66d8:	854a      	strh	r2, [r1, #42]	; 0x2a
				if (*y > SHELL_MAX_TERMINAL_SIZE) {
    66da:	2bfa      	cmp	r3, #250	; 0xfa
		sh->ctx->vt100_ctx.cons.terminal_hei = y;
    66dc:	68a2      	ldr	r2, [r4, #8]
				if (*y > SHELL_MAX_TERMINAL_SIZE) {
    66de:	bf28      	it	cs
    66e0:	23fa      	movcs	r3, #250	; 0xfa
		sh->ctx->vt100_ctx.cons.terminal_hei = y;
    66e2:	8513      	strh	r3, [r2, #40]	; 0x28
	return sh->ctx->cfg.flags.use_vt100 == 1;
    66e4:	68a3      	ldr	r3, [r4, #8]
    66e6:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    66ea:	069a      	lsls	r2, r3, #26
    66ec:	d503      	bpl.n	66f6 <cmd_resize+0x13e>
    66ee:	491a      	ldr	r1, [pc, #104]	; (6758 <cmd_resize+0x1a0>)
    66f0:	6960      	ldr	r0, [r4, #20]
    66f2:	f007 ffa0 	bl	e636 <z_shell_raw_fprintf>
	return 0;
    66f6:	2000      	movs	r0, #0
    66f8:	e76e      	b.n	65d8 <cmd_resize+0x20>
					sh->ctx->temp_buff[0] = 0;
    66fa:	f886 3142 	strb.w	r3, [r6, #322]	; 0x142
					return -EIO;
    66fe:	e7a5      	b.n	664c <cmd_resize+0x94>
					*y = *y * 10U +
    6700:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6704:	3930      	subs	r1, #48	; 0x30
    6706:	eb01 0143 	add.w	r1, r1, r3, lsl #1
					if (buff_idx >=
    670a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
					*y = *y * 10U +
    670e:	b28b      	uxth	r3, r1
					if (buff_idx >=
    6710:	d1ca      	bne.n	66a8 <cmd_resize+0xf0>
    6712:	e79b      	b.n	664c <cmd_resize+0x94>
					(sh->ctx->temp_buff[buff_idx++] -
    6714:	3501      	adds	r5, #1
					*x = *x * 10U +
    6716:	eb02 0282 	add.w	r2, r2, r2, lsl #2
					(sh->ctx->temp_buff[buff_idx++] -
    671a:	b2ad      	uxth	r5, r5
					*x = *x * 10U +
    671c:	3830      	subs	r0, #48	; 0x30
    671e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
					if (buff_idx >=
    6722:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
					*x = *x * 10U +
    6726:	b282      	uxth	r2, r0
					if (buff_idx >=
    6728:	d1cd      	bne.n	66c6 <cmd_resize+0x10e>
    672a:	e78f      	b.n	664c <cmd_resize+0x94>
			sh->ctx->temp_buff[buff_idx] = c;
    672c:	442b      	add	r3, r5
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    672e:	3501      	adds	r5, #1
    6730:	b2ad      	uxth	r5, r5
    6732:	2d09      	cmp	r5, #9
			sh->ctx->temp_buff[buff_idx] = c;
    6734:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    6738:	f67f af76 	bls.w	6628 <cmd_resize+0x70>
				sh->ctx->temp_buff[0] = 0;
    673c:	68a3      	ldr	r3, [r4, #8]
    673e:	2200      	movs	r2, #0
    6740:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
				return -ENOMEM;
    6744:	e782      	b.n	664c <cmd_resize+0x94>
    6746:	bf00      	nop
    6748:	000121e0 	.word	0x000121e0
    674c:	000121d7 	.word	0x000121d7
    6750:	0001024b 	.word	0x0001024b
    6754:	00012240 	.word	0x00012240
    6758:	0001024f 	.word	0x0001024f
    675c:	00012206 	.word	0x00012206

00006760 <z_shell_wildcard_process>:


enum shell_wildcard_status z_shell_wildcard_process(const struct shell *sh,
					const struct shell_static_entry *cmd,
					const char *pattern)
{
    6760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6764:	4607      	mov	r7, r0
    6766:	b089      	sub	sp, #36	; 0x24
    6768:	4615      	mov	r5, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
    676a:	4689      	mov	r9, r1
    676c:	b921      	cbnz	r1, 6778 <z_shell_wildcard_process+0x18>
		return ret_val;
    676e:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(sh, cmd, pattern);

	return ret_val;
}
    6770:	4620      	mov	r0, r4
    6772:	b009      	add	sp, #36	; 0x24
    6774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!z_shell_has_wildcard(pattern)) {
    6778:	4610      	mov	r0, r2
    677a:	f008 f8ab 	bl	e8d4 <z_shell_has_wildcard>
    677e:	2800      	cmp	r0, #0
    6780:	d0f5      	beq.n	676e <z_shell_wildcard_process+0xe>
	size_t cnt = 0;
    6782:	f04f 0800 	mov.w	r8, #0
	size_t cmd_idx = 0;
    6786:	4641      	mov	r1, r8
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
    6788:	2402      	movs	r4, #2
    678a:	e024      	b.n	67d6 <z_shell_wildcard_process+0x76>
	return str == NULL ? 0U : (uint16_t)strlen(str);
    678c:	465c      	mov	r4, fp
    678e:	e03c      	b.n	680a <z_shell_wildcard_process+0xaa>
	completion_addr = strstr(buff, pattern);
    6790:	4629      	mov	r1, r5
    6792:	f50a 70a1 	add.w	r0, sl, #322	; 0x142
    6796:	f008 f9df 	bl	eb58 <strstr>
	if (!completion_addr) {
    679a:	4606      	mov	r6, r0
    679c:	2800      	cmp	r0, #0
    679e:	d04c      	beq.n	683a <z_shell_wildcard_process+0xda>
    67a0:	f008 fa26 	bl	ebf0 <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
    67a4:	b282      	uxth	r2, r0
    67a6:	1c60      	adds	r0, r4, #1
    67a8:	3201      	adds	r2, #1
    67aa:	4631      	mov	r1, r6
    67ac:	4430      	add	r0, r6
    67ae:	f008 fa5f 	bl	ec70 <memmove>
	memcpy(completion_addr, cmd, cmd_len);
    67b2:	4622      	mov	r2, r4
    67b4:	4659      	mov	r1, fp
    67b6:	4630      	mov	r0, r6
    67b8:	f008 fa71 	bl	ec9e <memcpy>
	completion_addr[cmd_len] = ' ';
    67bc:	f04f 0320 	mov.w	r3, #32
    67c0:	5533      	strb	r3, [r6, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
    67c2:	f8ba 3040 	ldrh.w	r3, [sl, #64]	; 0x40
    67c6:	3301      	adds	r3, #1
    67c8:	441c      	add	r4, r3
    67ca:	f8aa 4040 	strh.w	r4, [sl, #64]	; 0x40
			cnt++;
    67ce:	f108 0801 	add.w	r8, r8, #1
			ret_val = command_add(sh->ctx->temp_buff,
    67d2:	2400      	movs	r4, #0
    67d4:	9901      	ldr	r1, [sp, #4]
	while ((entry = z_shell_cmd_get(cmd, cmd_idx++, &dloc)) != NULL) {
    67d6:	1c4b      	adds	r3, r1, #1
    67d8:	aa03      	add	r2, sp, #12
    67da:	4648      	mov	r0, r9
    67dc:	9301      	str	r3, [sp, #4]
    67de:	f7ff fbf5 	bl	5fcc <z_shell_cmd_get>
    67e2:	4606      	mov	r6, r0
    67e4:	b1e8      	cbz	r0, 6822 <z_shell_wildcard_process+0xc2>
		if (fnmatch(pattern, entry->syntax, 0) == 0) {
    67e6:	6831      	ldr	r1, [r6, #0]
    67e8:	2200      	movs	r2, #0
    67ea:	4628      	mov	r0, r5
    67ec:	f008 fba7 	bl	ef3e <fnmatch>
    67f0:	2800      	cmp	r0, #0
    67f2:	d1ef      	bne.n	67d4 <z_shell_wildcard_process+0x74>
					      entry->syntax, pattern);
    67f4:	f8d6 b000 	ldr.w	fp, [r6]
			ret_val = command_add(sh->ctx->temp_buff,
    67f8:	f8d7 a008 	ldr.w	sl, [r7, #8]
    67fc:	f1bb 0f00 	cmp.w	fp, #0
    6800:	d0c4      	beq.n	678c <z_shell_wildcard_process+0x2c>
    6802:	4658      	mov	r0, fp
    6804:	f008 f9f4 	bl	ebf0 <strlen>
    6808:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
    680a:	f8ba 3040 	ldrh.w	r3, [sl, #64]	; 0x40
    680e:	4423      	add	r3, r4
    6810:	2bff      	cmp	r3, #255	; 0xff
    6812:	ddbd      	ble.n	6790 <z_shell_wildcard_process+0x30>
				z_shell_fprintf(sh, SHELL_WARNING,
    6814:	4a0a      	ldr	r2, [pc, #40]	; (6840 <z_shell_wildcard_process+0xe0>)
    6816:	462b      	mov	r3, r5
    6818:	2103      	movs	r1, #3
    681a:	4638      	mov	r0, r7
    681c:	f007 fcab 	bl	e176 <z_shell_fprintf>
			ret_val = command_add(sh->ctx->temp_buff,
    6820:	2401      	movs	r4, #1
	if (cnt > 0) {
    6822:	f1b8 0f00 	cmp.w	r8, #0
    6826:	d0a3      	beq.n	6770 <z_shell_wildcard_process+0x10>
		z_shell_pattern_remove(sh->ctx->temp_buff,
    6828:	68b8      	ldr	r0, [r7, #8]
    682a:	462a      	mov	r2, r5
    682c:	f100 0140 	add.w	r1, r0, #64	; 0x40
    6830:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    6834:	f007 f9e2 	bl	dbfc <z_shell_pattern_remove>
	return ret_val;
    6838:	e79a      	b.n	6770 <z_shell_wildcard_process+0x10>
    683a:	2402      	movs	r4, #2
    683c:	e7f1      	b.n	6822 <z_shell_wildcard_process+0xc2>
    683e:	bf00      	nop
    6840:	0001266c 	.word	0x0001266c

00006844 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    6844:	4901      	ldr	r1, [pc, #4]	; (684c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    6846:	2210      	movs	r2, #16
	str	r2, [r1]
    6848:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    684a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    684c:	e000ed10 	.word	0xe000ed10

00006850 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    6850:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    6852:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    6854:	f380 8811 	msr	BASEPRI, r0
	isb
    6858:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    685c:	f3bf 8f4f 	dsb	sy
    6860:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    6862:	b662      	cpsie	i
	isb
    6864:	f3bf 8f6f 	isb	sy

	bx	lr
    6868:	4770      	bx	lr
    686a:	bf00      	nop

0000686c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    686c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    686e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    6870:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    6874:	f3bf 8f4f 	dsb	sy
    6878:	bf20      	wfe

	msr	BASEPRI, r0
    687a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    687e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    6880:	4770      	bx	lr
    6882:	bf00      	nop

00006884 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6888:	4606      	mov	r6, r0
    688a:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    688c:	460c      	mov	r4, r1
    688e:	2900      	cmp	r1, #0
    6890:	d05c      	beq.n	694c <z_arm_fatal_error+0xc8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    6892:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 695c <z_arm_fatal_error+0xd8>
    6896:	f8d9 3000 	ldr.w	r3, [r9]
    689a:	0758      	lsls	r0, r3, #29
    689c:	d056      	beq.n	694c <z_arm_fatal_error+0xc8>
    689e:	466d      	mov	r5, sp
    68a0:	b08a      	sub	sp, #40	; 0x28
    68a2:	e9d1 0100 	ldrd	r0, r1, [r1]
    68a6:	68a3      	ldr	r3, [r4, #8]
    68a8:	466a      	mov	r2, sp
    68aa:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 6960 <z_arm_fatal_error+0xdc>
    68ae:	f04f 0805 	mov.w	r8, #5
    68b2:	e9c2 c005 	strd	ip, r0, [r2, #20]
    68b6:	e9c2 1307 	strd	r1, r3, [r2, #28]
    68ba:	f842 8f10 	str.w	r8, [r2, #16]!
    68be:	2300      	movs	r3, #0
    68c0:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    68c4:	4648      	mov	r0, r9
    68c6:	f7fc ff43 	bl	3750 <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    68ca:	f8d9 3000 	ldr.w	r3, [r9]
    68ce:	0759      	lsls	r1, r3, #29
    68d0:	46ad      	mov	sp, r5
    68d2:	d03b      	beq.n	694c <z_arm_fatal_error+0xc8>
    68d4:	b08a      	sub	sp, #40	; 0x28
    68d6:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    68da:	6963      	ldr	r3, [r4, #20]
    68dc:	466a      	mov	r2, sp
    68de:	f8df c084 	ldr.w	ip, [pc, #132]	; 6964 <z_arm_fatal_error+0xe0>
    68e2:	e9c2 1307 	strd	r1, r3, [r2, #28]
    68e6:	e9c2 c005 	strd	ip, r0, [r2, #20]
    68ea:	f842 8f10 	str.w	r8, [r2, #16]!
    68ee:	2300      	movs	r3, #0
    68f0:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    68f4:	4648      	mov	r0, r9
    68f6:	f7fc ff2b 	bl	3750 <z_impl_z_log_msg_static_create>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    68fa:	f8d9 3000 	ldr.w	r3, [r9]
    68fe:	075a      	lsls	r2, r3, #29
    6900:	46ad      	mov	sp, r5
    6902:	d023      	beq.n	694c <z_arm_fatal_error+0xc8>
    6904:	b088      	sub	sp, #32
    6906:	69e3      	ldr	r3, [r4, #28]
    6908:	466a      	mov	r2, sp
    690a:	4917      	ldr	r1, [pc, #92]	; (6968 <z_arm_fatal_error+0xe4>)
    690c:	f04f 0803 	mov.w	r8, #3
    6910:	e9c2 1305 	strd	r1, r3, [r2, #20]
    6914:	f842 8f10 	str.w	r8, [r2, #16]!
    6918:	2300      	movs	r3, #0
    691a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    691e:	4648      	mov	r0, r9
    6920:	f7fc ff16 	bl	3750 <z_impl_z_log_msg_static_create>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    6924:	f8d9 3000 	ldr.w	r3, [r9]
    6928:	075b      	lsls	r3, r3, #29
    692a:	46ad      	mov	sp, r5
    692c:	d00e      	beq.n	694c <z_arm_fatal_error+0xc8>
    692e:	b088      	sub	sp, #32
    6930:	69a3      	ldr	r3, [r4, #24]
    6932:	466a      	mov	r2, sp
    6934:	490d      	ldr	r1, [pc, #52]	; (696c <z_arm_fatal_error+0xe8>)
    6936:	e9c2 1305 	strd	r1, r3, [r2, #20]
    693a:	f842 8f10 	str.w	r8, [r2, #16]!
    693e:	2300      	movs	r3, #0
    6940:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6944:	4648      	mov	r0, r9
    6946:	f7fc ff03 	bl	3750 <z_impl_z_log_msg_static_create>
    694a:	46ad      	mov	sp, r5
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    694c:	4621      	mov	r1, r4
    694e:	4630      	mov	r0, r6
    6950:	f004 f838 	bl	a9c4 <z_fatal_error>
}
    6954:	46bd      	mov	sp, r7
    6956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    695a:	bf00      	nop
    695c:	200002f8 	.word	0x200002f8
    6960:	000126be 	.word	0x000126be
    6964:	000126ed 	.word	0x000126ed
    6968:	0001271c 	.word	0x0001271c
    696c:	0001272b 	.word	0x0001272b

00006970 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    6970:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    6972:	2800      	cmp	r0, #0
    6974:	db07      	blt.n	6986 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6976:	4a04      	ldr	r2, [pc, #16]	; (6988 <arch_irq_enable+0x18>)
    6978:	0941      	lsrs	r1, r0, #5
    697a:	2301      	movs	r3, #1
    697c:	f000 001f 	and.w	r0, r0, #31
    6980:	4083      	lsls	r3, r0
    6982:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    6986:	4770      	bx	lr
    6988:	e000e100 	.word	0xe000e100

0000698c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    698c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    698e:	2800      	cmp	r0, #0
    6990:	db0c      	blt.n	69ac <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6992:	0943      	lsrs	r3, r0, #5
    6994:	4906      	ldr	r1, [pc, #24]	; (69b0 <arch_irq_disable+0x24>)
    6996:	f000 001f 	and.w	r0, r0, #31
    699a:	3320      	adds	r3, #32
    699c:	2201      	movs	r2, #1
    699e:	4082      	lsls	r2, r0
    69a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    69a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    69a8:	f3bf 8f6f 	isb	sy
}
    69ac:	4770      	bx	lr
    69ae:	bf00      	nop
    69b0:	e000e100 	.word	0xe000e100

000069b4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    69b4:	4b05      	ldr	r3, [pc, #20]	; (69cc <arch_irq_is_enabled+0x18>)
    69b6:	0942      	lsrs	r2, r0, #5
    69b8:	f000 001f 	and.w	r0, r0, #31
    69bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    69c0:	2301      	movs	r3, #1
    69c2:	fa03 f000 	lsl.w	r0, r3, r0
}
    69c6:	4010      	ands	r0, r2
    69c8:	4770      	bx	lr
    69ca:	bf00      	nop
    69cc:	e000e100 	.word	0xe000e100

000069d0 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    69d0:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    69d2:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    69d4:	bfa8      	it	ge
    69d6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    69da:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    69de:	bfb8      	it	lt
    69e0:	4b06      	ldrlt	r3, [pc, #24]	; (69fc <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    69e2:	ea4f 1141 	mov.w	r1, r1, lsl #5
    69e6:	bfac      	ite	ge
    69e8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    69ec:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    69f0:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    69f2:	bfb4      	ite	lt
    69f4:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    69f6:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    69fa:	4770      	bx	lr
    69fc:	e000ed14 	.word	0xe000ed14

00006a00 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    6a00:	bf30      	wfi
    b z_SysNmiOnReset
    6a02:	f7ff bffd 	b.w	6a00 <z_SysNmiOnReset>
    6a06:	bf00      	nop

00006a08 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    6a08:	4a0b      	ldr	r2, [pc, #44]	; (6a38 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    6a0a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    6a0c:	4b0b      	ldr	r3, [pc, #44]	; (6a3c <z_arm_prep_c+0x34>)
    6a0e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    6a12:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    6a14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6a18:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    6a1c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    6a20:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    6a24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    6a28:	f004 f898 	bl	ab5c <z_bss_zero>
	z_data_copy();
    6a2c:	f004 ff6e 	bl	b90c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    6a30:	f000 fc0e 	bl	7250 <z_arm_interrupt_init>
	z_cstart();
    6a34:	f004 f8d6 	bl	abe4 <z_cstart>
    6a38:	00000000 	.word	0x00000000
    6a3c:	e000ed00 	.word	0xe000ed00

00006a40 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    6a40:	4a0a      	ldr	r2, [pc, #40]	; (6a6c <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    6a42:	490b      	ldr	r1, [pc, #44]	; (6a70 <arch_swap+0x30>)
	_current->arch.basepri = key;
    6a44:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    6a46:	6809      	ldr	r1, [r1, #0]
    6a48:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6a4c:	4909      	ldr	r1, [pc, #36]	; (6a74 <arch_swap+0x34>)
	_current->arch.basepri = key;
    6a4e:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6a52:	684b      	ldr	r3, [r1, #4]
    6a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    6a58:	604b      	str	r3, [r1, #4]
    6a5a:	2300      	movs	r3, #0
    6a5c:	f383 8811 	msr	BASEPRI, r3
    6a60:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    6a64:	6893      	ldr	r3, [r2, #8]
}
    6a66:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
    6a6a:	4770      	bx	lr
    6a6c:	20003480 	.word	0x20003480
    6a70:	00010d60 	.word	0x00010d60
    6a74:	e000ed00 	.word	0xe000ed00

00006a78 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    6a78:	4910      	ldr	r1, [pc, #64]	; (6abc <z_arm_pendsv+0x44>)
    ldr r2, [r1, #_kernel_offset_to_current]
    6a7a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    6a7c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    6a80:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    6a82:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    6a86:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    6a8a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    6a8c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    6a90:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    6a94:	4f0a      	ldr	r7, [pc, #40]	; (6ac0 <z_arm_pendsv+0x48>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    6a96:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    6a9a:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    6a9c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    6a9e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    6aa0:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
    6aa4:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    6aa6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    6aaa:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    6aae:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    6ab2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    6ab6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    6aba:	4770      	bx	lr
    ldr r1, =_kernel
    6abc:	20003480 	.word	0x20003480
    ldr v4, =_SCS_ICSR
    6ac0:	e000ed04 	.word	0xe000ed04

00006ac4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    6ac4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    6ac8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    6aca:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    6ace:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    6ad2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    6ad4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    6ad8:	2902      	cmp	r1, #2
    beq _oops
    6ada:	d0ff      	beq.n	6adc <_oops>

00006adc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    6adc:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    6ade:	f007 ff3d 	bl	e95c <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    6ae2:	bd01      	pop	{r0, pc}

00006ae4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    6ae4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    6ae8:	9b00      	ldr	r3, [sp, #0]
    6aea:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    6aee:	490a      	ldr	r1, [pc, #40]	; (6b18 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    6af0:	9b01      	ldr	r3, [sp, #4]
    6af2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    6af6:	9b02      	ldr	r3, [sp, #8]
    6af8:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    6afc:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    6b00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    6b04:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    6b08:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    6b0c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    6b0e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    6b10:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    6b12:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    6b16:	4770      	bx	lr
    6b18:	0000c5b7 	.word	0x0000c5b7

00006b1c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    6b1c:	4b07      	ldr	r3, [pc, #28]	; (6b3c <arch_switch_to_main_thread+0x20>)
    6b1e:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    6b20:	4610      	mov	r0, r2
    6b22:	f381 8809 	msr	PSP, r1
    6b26:	2100      	movs	r1, #0
    6b28:	b663      	cpsie	if
    6b2a:	f381 8811 	msr	BASEPRI, r1
    6b2e:	f3bf 8f6f 	isb	sy
    6b32:	2200      	movs	r2, #0
    6b34:	2300      	movs	r3, #0
    6b36:	f005 fd3e 	bl	c5b6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    6b3a:	bf00      	nop
    6b3c:	20003480 	.word	0x20003480

00006b40 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    6b40:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    6b42:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    6b44:	4a0b      	ldr	r2, [pc, #44]	; (6b74 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    6b46:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    6b48:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    6b4a:	bf1e      	ittt	ne
	movne	r1, #0
    6b4c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    6b4e:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    6b50:	f008 fe30 	blne	f7b4 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    6b54:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    6b56:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    6b5a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    6b5e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    6b62:	4905      	ldr	r1, [pc, #20]	; (6b78 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    6b64:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    6b66:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    6b68:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    6b6a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    6b6e:	4903      	ldr	r1, [pc, #12]	; (6b7c <_isr_wrapper+0x3c>)
	bx r1
    6b70:	4708      	bx	r1
    6b72:	0000      	.short	0x0000
	ldr r2, =_kernel
    6b74:	20003480 	.word	0x20003480
	ldr r1, =_sw_isr_table
    6b78:	0000fef8 	.word	0x0000fef8
	ldr r1, =z_arm_int_exit
    6b7c:	00006b81 	.word	0x00006b81

00006b80 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    6b80:	4b04      	ldr	r3, [pc, #16]	; (6b94 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    6b82:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    6b84:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    6b86:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    6b88:	d003      	beq.n	6b92 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    6b8a:	4903      	ldr	r1, [pc, #12]	; (6b98 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    6b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    6b90:	600a      	str	r2, [r1, #0]

00006b92 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    6b92:	4770      	bx	lr
	ldr r3, =_kernel
    6b94:	20003480 	.word	0x20003480
	ldr r1, =_SCS_ICSR
    6b98:	e000ed04 	.word	0xe000ed04

00006b9c <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    6b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			      bool *recoverable)
{
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
    6ba0:	4c53      	ldr	r4, [pc, #332]	; (6cf0 <mem_manage_fault.constprop.0+0x154>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    6ba2:	b086      	sub	sp, #24
	PR_FAULT_INFO("***** MPU FAULT *****");
    6ba4:	6823      	ldr	r3, [r4, #0]
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    6ba6:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    6ba8:	0758      	lsls	r0, r3, #29
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    6baa:	af00      	add	r7, sp, #0
    6bac:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    6bae:	d00a      	beq.n	6bc6 <mem_manage_fault.constprop.0+0x2a>
    6bb0:	4b50      	ldr	r3, [pc, #320]	; (6cf4 <mem_manage_fault.constprop.0+0x158>)
    6bb2:	617b      	str	r3, [r7, #20]
    6bb4:	2302      	movs	r3, #2
    6bb6:	613b      	str	r3, [r7, #16]
    6bb8:	f107 0210 	add.w	r2, r7, #16
    6bbc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6bc0:	4620      	mov	r0, r4
    6bc2:	f007 feda 	bl	e97a <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    6bc6:	4b4c      	ldr	r3, [pc, #304]	; (6cf8 <mem_manage_fault.constprop.0+0x15c>)
    6bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6bca:	06d9      	lsls	r1, r3, #27
    6bcc:	f140 808e 	bpl.w	6cec <mem_manage_fault.constprop.0+0x150>
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
    6bd0:	6823      	ldr	r3, [r4, #0]
    6bd2:	075a      	lsls	r2, r3, #29
    6bd4:	d00a      	beq.n	6bec <mem_manage_fault.constprop.0+0x50>
    6bd6:	4b49      	ldr	r3, [pc, #292]	; (6cfc <mem_manage_fault.constprop.0+0x160>)
    6bd8:	617b      	str	r3, [r7, #20]
    6bda:	2302      	movs	r3, #2
    6bdc:	4844      	ldr	r0, [pc, #272]	; (6cf0 <mem_manage_fault.constprop.0+0x154>)
    6bde:	613b      	str	r3, [r7, #16]
    6be0:	f107 0210 	add.w	r2, r7, #16
    6be4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6be8:	f007 fec7 	bl	e97a <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_STACKING;
    6bec:	2011      	movs	r0, #17
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    6bee:	4b42      	ldr	r3, [pc, #264]	; (6cf8 <mem_manage_fault.constprop.0+0x15c>)
    6bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6bf2:	071b      	lsls	r3, r3, #28
    6bf4:	d50e      	bpl.n	6c14 <mem_manage_fault.constprop.0+0x78>
		reason = K_ERR_ARM_MEM_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    6bf6:	6823      	ldr	r3, [r4, #0]
    6bf8:	0758      	lsls	r0, r3, #29
    6bfa:	d00a      	beq.n	6c12 <mem_manage_fault.constprop.0+0x76>
    6bfc:	4b40      	ldr	r3, [pc, #256]	; (6d00 <mem_manage_fault.constprop.0+0x164>)
    6bfe:	617b      	str	r3, [r7, #20]
    6c00:	2302      	movs	r3, #2
    6c02:	483b      	ldr	r0, [pc, #236]	; (6cf0 <mem_manage_fault.constprop.0+0x154>)
    6c04:	613b      	str	r3, [r7, #16]
    6c06:	f107 0210 	add.w	r2, r7, #16
    6c0a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6c0e:	f007 feb4 	bl	e97a <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_UNSTACKING;
    6c12:	2012      	movs	r0, #18
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    6c14:	4b38      	ldr	r3, [pc, #224]	; (6cf8 <mem_manage_fault.constprop.0+0x15c>)
    6c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c18:	0799      	lsls	r1, r3, #30
    6c1a:	d52b      	bpl.n	6c74 <mem_manage_fault.constprop.0+0xd8>
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
		PR_FAULT_INFO("  Data Access Violation");
    6c1c:	6823      	ldr	r3, [r4, #0]
    6c1e:	075a      	lsls	r2, r3, #29
    6c20:	d00a      	beq.n	6c38 <mem_manage_fault.constprop.0+0x9c>
    6c22:	4b38      	ldr	r3, [pc, #224]	; (6d04 <mem_manage_fault.constprop.0+0x168>)
    6c24:	617b      	str	r3, [r7, #20]
    6c26:	2302      	movs	r3, #2
    6c28:	4831      	ldr	r0, [pc, #196]	; (6cf0 <mem_manage_fault.constprop.0+0x154>)
    6c2a:	613b      	str	r3, [r7, #16]
    6c2c:	f107 0210 	add.w	r2, r7, #16
    6c30:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6c34:	f007 fea1 	bl	e97a <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    6c38:	4b2f      	ldr	r3, [pc, #188]	; (6cf8 <mem_manage_fault.constprop.0+0x15c>)
    6c3a:	6b59      	ldr	r1, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    6c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c3e:	061b      	lsls	r3, r3, #24
    6c40:	d517      	bpl.n	6c72 <mem_manage_fault.constprop.0+0xd6>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    6c42:	6823      	ldr	r3, [r4, #0]
    6c44:	0758      	lsls	r0, r3, #29
    6c46:	d00e      	beq.n	6c66 <mem_manage_fault.constprop.0+0xca>
    6c48:	46e8      	mov	r8, sp
    6c4a:	b088      	sub	sp, #32
    6c4c:	466a      	mov	r2, sp
    6c4e:	4b2e      	ldr	r3, [pc, #184]	; (6d08 <mem_manage_fault.constprop.0+0x16c>)
    6c50:	4827      	ldr	r0, [pc, #156]	; (6cf0 <mem_manage_fault.constprop.0+0x154>)
    6c52:	e9c2 3105 	strd	r3, r1, [r2, #20]
    6c56:	2303      	movs	r3, #3
    6c58:	f842 3f10 	str.w	r3, [r2, #16]!
    6c5c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6c60:	f007 fe8b 	bl	e97a <z_log_msg_static_create.constprop.0>
    6c64:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    6c66:	b126      	cbz	r6, 6c72 <mem_manage_fault.constprop.0+0xd6>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    6c68:	4a23      	ldr	r2, [pc, #140]	; (6cf8 <mem_manage_fault.constprop.0+0x15c>)
    6c6a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6c6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    6c70:	6293      	str	r3, [r2, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    6c72:	2013      	movs	r0, #19
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    6c74:	4b20      	ldr	r3, [pc, #128]	; (6cf8 <mem_manage_fault.constprop.0+0x15c>)
    6c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c78:	07da      	lsls	r2, r3, #31
    6c7a:	d50e      	bpl.n	6c9a <mem_manage_fault.constprop.0+0xfe>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
		PR_FAULT_INFO("  Instruction Access Violation");
    6c7c:	6823      	ldr	r3, [r4, #0]
    6c7e:	075b      	lsls	r3, r3, #29
    6c80:	d00a      	beq.n	6c98 <mem_manage_fault.constprop.0+0xfc>
    6c82:	4b22      	ldr	r3, [pc, #136]	; (6d0c <mem_manage_fault.constprop.0+0x170>)
    6c84:	617b      	str	r3, [r7, #20]
    6c86:	2302      	movs	r3, #2
    6c88:	4819      	ldr	r0, [pc, #100]	; (6cf0 <mem_manage_fault.constprop.0+0x154>)
    6c8a:	613b      	str	r3, [r7, #16]
    6c8c:	f107 0210 	add.w	r2, r7, #16
    6c90:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6c94:	f007 fe71 	bl	e97a <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    6c98:	2014      	movs	r0, #20
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    6c9a:	4b17      	ldr	r3, [pc, #92]	; (6cf8 <mem_manage_fault.constprop.0+0x15c>)
    6c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c9e:	069e      	lsls	r6, r3, #26
    6ca0:	d50e      	bpl.n	6cc0 <mem_manage_fault.constprop.0+0x124>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
		PR_FAULT_INFO(
    6ca2:	6823      	ldr	r3, [r4, #0]
    6ca4:	0758      	lsls	r0, r3, #29
    6ca6:	d00a      	beq.n	6cbe <mem_manage_fault.constprop.0+0x122>
    6ca8:	4b19      	ldr	r3, [pc, #100]	; (6d10 <mem_manage_fault.constprop.0+0x174>)
    6caa:	617b      	str	r3, [r7, #20]
    6cac:	2302      	movs	r3, #2
    6cae:	4810      	ldr	r0, [pc, #64]	; (6cf0 <mem_manage_fault.constprop.0+0x154>)
    6cb0:	613b      	str	r3, [r7, #16]
    6cb2:	f107 0210 	add.w	r2, r7, #16
    6cb6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6cba:	f007 fe5e 	bl	e97a <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    6cbe:	2015      	movs	r0, #21
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    6cc0:	4b0d      	ldr	r3, [pc, #52]	; (6cf8 <mem_manage_fault.constprop.0+0x15c>)
    6cc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6cc4:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    6cc6:	bf58      	it	pl
    6cc8:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    6cca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6ccc:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    6cce:	bf42      	ittt	mi
    6cd0:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    6cd2:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    6cd6:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    6cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6cda:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    6cde:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
    6ce0:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    6ce2:	2300      	movs	r3, #0
    6ce4:	702b      	strb	r3, [r5, #0]
}
    6ce6:	46bd      	mov	sp, r7
    6ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    6cec:	2010      	movs	r0, #16
    6cee:	e77e      	b.n	6bee <mem_manage_fault.constprop.0+0x52>
    6cf0:	200002f8 	.word	0x200002f8
    6cf4:	00012759 	.word	0x00012759
    6cf8:	e000ed00 	.word	0xe000ed00
    6cfc:	0001276f 	.word	0x0001276f
    6d00:	000127a2 	.word	0x000127a2
    6d04:	000127b5 	.word	0x000127b5
    6d08:	000127cd 	.word	0x000127cd
    6d0c:	000127e3 	.word	0x000127e3
    6d10:	00012802 	.word	0x00012802

00006d14 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    6d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
    6d18:	4c57      	ldr	r4, [pc, #348]	; (6e78 <bus_fault.constprop.0+0x164>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    6d1a:	b086      	sub	sp, #24
	PR_FAULT_INFO("***** BUS FAULT *****");
    6d1c:	6823      	ldr	r3, [r4, #0]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    6d1e:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    6d20:	0758      	lsls	r0, r3, #29
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    6d22:	af00      	add	r7, sp, #0
    6d24:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    6d26:	d00a      	beq.n	6d3e <bus_fault.constprop.0+0x2a>
    6d28:	4b54      	ldr	r3, [pc, #336]	; (6e7c <bus_fault.constprop.0+0x168>)
    6d2a:	617b      	str	r3, [r7, #20]
    6d2c:	2302      	movs	r3, #2
    6d2e:	613b      	str	r3, [r7, #16]
    6d30:	f107 0210 	add.w	r2, r7, #16
    6d34:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6d38:	4620      	mov	r0, r4
    6d3a:	f007 fe1e 	bl	e97a <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    6d3e:	4b50      	ldr	r3, [pc, #320]	; (6e80 <bus_fault.constprop.0+0x16c>)
    6d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d42:	04d9      	lsls	r1, r3, #19
    6d44:	f140 8083 	bpl.w	6e4e <bus_fault.constprop.0+0x13a>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
    6d48:	6823      	ldr	r3, [r4, #0]
    6d4a:	075a      	lsls	r2, r3, #29
    6d4c:	d00a      	beq.n	6d64 <bus_fault.constprop.0+0x50>
    6d4e:	4b4d      	ldr	r3, [pc, #308]	; (6e84 <bus_fault.constprop.0+0x170>)
    6d50:	617b      	str	r3, [r7, #20]
    6d52:	2302      	movs	r3, #2
    6d54:	4848      	ldr	r0, [pc, #288]	; (6e78 <bus_fault.constprop.0+0x164>)
    6d56:	613b      	str	r3, [r7, #16]
    6d58:	f107 0210 	add.w	r2, r7, #16
    6d5c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6d60:	f007 fe0b 	bl	e97a <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
    6d64:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    6d66:	4b46      	ldr	r3, [pc, #280]	; (6e80 <bus_fault.constprop.0+0x16c>)
    6d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d6a:	051b      	lsls	r3, r3, #20
    6d6c:	d50e      	bpl.n	6d8c <bus_fault.constprop.0+0x78>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    6d6e:	6823      	ldr	r3, [r4, #0]
    6d70:	0758      	lsls	r0, r3, #29
    6d72:	d00a      	beq.n	6d8a <bus_fault.constprop.0+0x76>
    6d74:	4b44      	ldr	r3, [pc, #272]	; (6e88 <bus_fault.constprop.0+0x174>)
    6d76:	617b      	str	r3, [r7, #20]
    6d78:	2302      	movs	r3, #2
    6d7a:	483f      	ldr	r0, [pc, #252]	; (6e78 <bus_fault.constprop.0+0x164>)
    6d7c:	613b      	str	r3, [r7, #16]
    6d7e:	f107 0210 	add.w	r2, r7, #16
    6d82:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6d86:	f007 fdf8 	bl	e97a <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    6d8a:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    6d8c:	4b3c      	ldr	r3, [pc, #240]	; (6e80 <bus_fault.constprop.0+0x16c>)
    6d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d90:	0599      	lsls	r1, r3, #22
    6d92:	d52b      	bpl.n	6dec <bus_fault.constprop.0+0xd8>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
    6d94:	6823      	ldr	r3, [r4, #0]
    6d96:	075a      	lsls	r2, r3, #29
    6d98:	d00a      	beq.n	6db0 <bus_fault.constprop.0+0x9c>
    6d9a:	4b3c      	ldr	r3, [pc, #240]	; (6e8c <bus_fault.constprop.0+0x178>)
    6d9c:	617b      	str	r3, [r7, #20]
    6d9e:	2302      	movs	r3, #2
    6da0:	4835      	ldr	r0, [pc, #212]	; (6e78 <bus_fault.constprop.0+0x164>)
    6da2:	613b      	str	r3, [r7, #16]
    6da4:	f107 0210 	add.w	r2, r7, #16
    6da8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6dac:	f007 fde5 	bl	e97a <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    6db0:	4b33      	ldr	r3, [pc, #204]	; (6e80 <bus_fault.constprop.0+0x16c>)
    6db2:	6b99      	ldr	r1, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    6db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6db6:	041b      	lsls	r3, r3, #16
    6db8:	d517      	bpl.n	6dea <bus_fault.constprop.0+0xd6>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    6dba:	6823      	ldr	r3, [r4, #0]
    6dbc:	0758      	lsls	r0, r3, #29
    6dbe:	d00e      	beq.n	6dde <bus_fault.constprop.0+0xca>
    6dc0:	46e8      	mov	r8, sp
    6dc2:	b088      	sub	sp, #32
    6dc4:	466a      	mov	r2, sp
    6dc6:	4b32      	ldr	r3, [pc, #200]	; (6e90 <bus_fault.constprop.0+0x17c>)
    6dc8:	482b      	ldr	r0, [pc, #172]	; (6e78 <bus_fault.constprop.0+0x164>)
    6dca:	e9c2 3105 	strd	r3, r1, [r2, #20]
    6dce:	2303      	movs	r3, #3
    6dd0:	f842 3f10 	str.w	r3, [r2, #16]!
    6dd4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6dd8:	f007 fdcf 	bl	e97a <z_log_msg_static_create.constprop.0>
    6ddc:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    6dde:	b126      	cbz	r6, 6dea <bus_fault.constprop.0+0xd6>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    6de0:	4a27      	ldr	r2, [pc, #156]	; (6e80 <bus_fault.constprop.0+0x16c>)
    6de2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6de4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    6de8:	6293      	str	r3, [r2, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    6dea:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    6dec:	4b24      	ldr	r3, [pc, #144]	; (6e80 <bus_fault.constprop.0+0x16c>)
    6dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6df0:	055a      	lsls	r2, r3, #21
    6df2:	d50e      	bpl.n	6e12 <bus_fault.constprop.0+0xfe>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
    6df4:	6823      	ldr	r3, [r4, #0]
    6df6:	075b      	lsls	r3, r3, #29
    6df8:	d00a      	beq.n	6e10 <bus_fault.constprop.0+0xfc>
    6dfa:	4b26      	ldr	r3, [pc, #152]	; (6e94 <bus_fault.constprop.0+0x180>)
    6dfc:	617b      	str	r3, [r7, #20]
    6dfe:	2302      	movs	r3, #2
    6e00:	481d      	ldr	r0, [pc, #116]	; (6e78 <bus_fault.constprop.0+0x164>)
    6e02:	613b      	str	r3, [r7, #16]
    6e04:	f107 0210 	add.w	r2, r7, #16
    6e08:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6e0c:	f007 fdb5 	bl	e97a <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    6e10:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    6e12:	4b1b      	ldr	r3, [pc, #108]	; (6e80 <bus_fault.constprop.0+0x16c>)
    6e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6e16:	05d6      	lsls	r6, r2, #23
    6e18:	d51b      	bpl.n	6e52 <bus_fault.constprop.0+0x13e>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
    6e1a:	6823      	ldr	r3, [r4, #0]
    6e1c:	0759      	lsls	r1, r3, #29
    6e1e:	d00a      	beq.n	6e36 <bus_fault.constprop.0+0x122>
    6e20:	4b1d      	ldr	r3, [pc, #116]	; (6e98 <bus_fault.constprop.0+0x184>)
    6e22:	617b      	str	r3, [r7, #20]
    6e24:	2302      	movs	r3, #2
    6e26:	4814      	ldr	r0, [pc, #80]	; (6e78 <bus_fault.constprop.0+0x164>)
    6e28:	613b      	str	r3, [r7, #16]
    6e2a:	f107 0210 	add.w	r2, r7, #16
    6e2e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6e32:	f007 fda2 	bl	e97a <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    6e36:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    6e38:	4a11      	ldr	r2, [pc, #68]	; (6e80 <bus_fault.constprop.0+0x16c>)
    6e3a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6e3c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    6e40:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
    6e42:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    6e44:	2300      	movs	r3, #0
    6e46:	702b      	strb	r3, [r5, #0]
}
    6e48:	46bd      	mov	sp, r7
    6e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    6e4e:	2016      	movs	r0, #22
    6e50:	e789      	b.n	6d66 <bus_fault.constprop.0+0x52>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    6e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e54:	049a      	lsls	r2, r3, #18
    6e56:	d5ef      	bpl.n	6e38 <bus_fault.constprop.0+0x124>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    6e58:	6823      	ldr	r3, [r4, #0]
    6e5a:	075b      	lsls	r3, r3, #29
    6e5c:	d00a      	beq.n	6e74 <bus_fault.constprop.0+0x160>
    6e5e:	4b0f      	ldr	r3, [pc, #60]	; (6e9c <bus_fault.constprop.0+0x188>)
    6e60:	617b      	str	r3, [r7, #20]
    6e62:	2302      	movs	r3, #2
    6e64:	4804      	ldr	r0, [pc, #16]	; (6e78 <bus_fault.constprop.0+0x164>)
    6e66:	613b      	str	r3, [r7, #16]
    6e68:	f107 0210 	add.w	r2, r7, #16
    6e6c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6e70:	f007 fd83 	bl	e97a <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    6e74:	201c      	movs	r0, #28
    6e76:	e7df      	b.n	6e38 <bus_fault.constprop.0+0x124>
    6e78:	200002f8 	.word	0x200002f8
    6e7c:	00012831 	.word	0x00012831
    6e80:	e000ed00 	.word	0xe000ed00
    6e84:	00012847 	.word	0x00012847
    6e88:	000127a2 	.word	0x000127a2
    6e8c:	00012858 	.word	0x00012858
    6e90:	00012871 	.word	0x00012871
    6e94:	00012886 	.word	0x00012886
    6e98:	000128a1 	.word	0x000128a1
    6e9c:	00012802 	.word	0x00012802

00006ea0 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    6ea0:	b510      	push	{r4, lr}
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    6ea2:	4c43      	ldr	r4, [pc, #268]	; (6fb0 <usage_fault.constprop.0+0x110>)
    6ea4:	6823      	ldr	r3, [r4, #0]
    6ea6:	075a      	lsls	r2, r3, #29
static uint32_t usage_fault(const z_arch_esf_t *esf)
    6ea8:	b086      	sub	sp, #24
	PR_FAULT_INFO("***** USAGE FAULT *****");
    6eaa:	d009      	beq.n	6ec0 <usage_fault.constprop.0+0x20>
    6eac:	4b41      	ldr	r3, [pc, #260]	; (6fb4 <usage_fault.constprop.0+0x114>)
    6eae:	9305      	str	r3, [sp, #20]
    6eb0:	aa04      	add	r2, sp, #16
    6eb2:	2302      	movs	r3, #2
    6eb4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6eb8:	4620      	mov	r0, r4
    6eba:	9304      	str	r3, [sp, #16]
    6ebc:	f007 fd5d 	bl	e97a <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    6ec0:	4b3d      	ldr	r3, [pc, #244]	; (6fb8 <usage_fault.constprop.0+0x118>)
    6ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6ec4:	019b      	lsls	r3, r3, #6
    6ec6:	d570      	bpl.n	6faa <usage_fault.constprop.0+0x10a>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
    6ec8:	6823      	ldr	r3, [r4, #0]
    6eca:	0758      	lsls	r0, r3, #29
    6ecc:	d009      	beq.n	6ee2 <usage_fault.constprop.0+0x42>
    6ece:	4b3b      	ldr	r3, [pc, #236]	; (6fbc <usage_fault.constprop.0+0x11c>)
    6ed0:	9305      	str	r3, [sp, #20]
    6ed2:	4837      	ldr	r0, [pc, #220]	; (6fb0 <usage_fault.constprop.0+0x110>)
    6ed4:	2302      	movs	r3, #2
    6ed6:	aa04      	add	r2, sp, #16
    6ed8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6edc:	9304      	str	r3, [sp, #16]
    6ede:	f007 fd4c 	bl	e97a <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
    6ee2:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    6ee4:	4b34      	ldr	r3, [pc, #208]	; (6fb8 <usage_fault.constprop.0+0x118>)
    6ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6ee8:	01d9      	lsls	r1, r3, #7
    6eea:	d50d      	bpl.n	6f08 <usage_fault.constprop.0+0x68>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
    6eec:	6823      	ldr	r3, [r4, #0]
    6eee:	075a      	lsls	r2, r3, #29
    6ef0:	d009      	beq.n	6f06 <usage_fault.constprop.0+0x66>
    6ef2:	4b33      	ldr	r3, [pc, #204]	; (6fc0 <usage_fault.constprop.0+0x120>)
    6ef4:	9305      	str	r3, [sp, #20]
    6ef6:	482e      	ldr	r0, [pc, #184]	; (6fb0 <usage_fault.constprop.0+0x110>)
    6ef8:	2302      	movs	r3, #2
    6efa:	aa04      	add	r2, sp, #16
    6efc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6f00:	9304      	str	r3, [sp, #16]
    6f02:	f007 fd3a 	bl	e97a <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    6f06:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    6f08:	4b2b      	ldr	r3, [pc, #172]	; (6fb8 <usage_fault.constprop.0+0x118>)
    6f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6f0c:	031b      	lsls	r3, r3, #12
    6f0e:	d50d      	bpl.n	6f2c <usage_fault.constprop.0+0x8c>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
    6f10:	6823      	ldr	r3, [r4, #0]
    6f12:	0758      	lsls	r0, r3, #29
    6f14:	d009      	beq.n	6f2a <usage_fault.constprop.0+0x8a>
    6f16:	4b2b      	ldr	r3, [pc, #172]	; (6fc4 <usage_fault.constprop.0+0x124>)
    6f18:	9305      	str	r3, [sp, #20]
    6f1a:	4825      	ldr	r0, [pc, #148]	; (6fb0 <usage_fault.constprop.0+0x110>)
    6f1c:	2302      	movs	r3, #2
    6f1e:	aa04      	add	r2, sp, #16
    6f20:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6f24:	9304      	str	r3, [sp, #16]
    6f26:	f007 fd28 	bl	e97a <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    6f2a:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    6f2c:	4b22      	ldr	r3, [pc, #136]	; (6fb8 <usage_fault.constprop.0+0x118>)
    6f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6f30:	0359      	lsls	r1, r3, #13
    6f32:	d50d      	bpl.n	6f50 <usage_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    6f34:	6823      	ldr	r3, [r4, #0]
    6f36:	075a      	lsls	r2, r3, #29
    6f38:	d009      	beq.n	6f4e <usage_fault.constprop.0+0xae>
    6f3a:	4b23      	ldr	r3, [pc, #140]	; (6fc8 <usage_fault.constprop.0+0x128>)
    6f3c:	9305      	str	r3, [sp, #20]
    6f3e:	481c      	ldr	r0, [pc, #112]	; (6fb0 <usage_fault.constprop.0+0x110>)
    6f40:	2302      	movs	r3, #2
    6f42:	aa04      	add	r2, sp, #16
    6f44:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6f48:	9304      	str	r3, [sp, #16]
    6f4a:	f007 fd16 	bl	e97a <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    6f4e:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    6f50:	4b19      	ldr	r3, [pc, #100]	; (6fb8 <usage_fault.constprop.0+0x118>)
    6f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6f54:	039b      	lsls	r3, r3, #14
    6f56:	d50d      	bpl.n	6f74 <usage_fault.constprop.0+0xd4>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
    6f58:	6823      	ldr	r3, [r4, #0]
    6f5a:	0759      	lsls	r1, r3, #29
    6f5c:	d009      	beq.n	6f72 <usage_fault.constprop.0+0xd2>
    6f5e:	4b1b      	ldr	r3, [pc, #108]	; (6fcc <usage_fault.constprop.0+0x12c>)
    6f60:	9305      	str	r3, [sp, #20]
    6f62:	4813      	ldr	r0, [pc, #76]	; (6fb0 <usage_fault.constprop.0+0x110>)
    6f64:	2302      	movs	r3, #2
    6f66:	aa04      	add	r2, sp, #16
    6f68:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6f6c:	9304      	str	r3, [sp, #16]
    6f6e:	f007 fd04 	bl	e97a <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    6f72:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    6f74:	4b10      	ldr	r3, [pc, #64]	; (6fb8 <usage_fault.constprop.0+0x118>)
    6f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6f78:	03da      	lsls	r2, r3, #15
    6f7a:	d50d      	bpl.n	6f98 <usage_fault.constprop.0+0xf8>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    6f7c:	6823      	ldr	r3, [r4, #0]
    6f7e:	075b      	lsls	r3, r3, #29
    6f80:	d009      	beq.n	6f96 <usage_fault.constprop.0+0xf6>
    6f82:	4b13      	ldr	r3, [pc, #76]	; (6fd0 <usage_fault.constprop.0+0x130>)
    6f84:	9305      	str	r3, [sp, #20]
    6f86:	480a      	ldr	r0, [pc, #40]	; (6fb0 <usage_fault.constprop.0+0x110>)
    6f88:	2302      	movs	r3, #2
    6f8a:	aa04      	add	r2, sp, #16
    6f8c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6f90:	9304      	str	r3, [sp, #16]
    6f92:	f007 fcf2 	bl	e97a <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    6f96:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    6f98:	4a07      	ldr	r2, [pc, #28]	; (6fb8 <usage_fault.constprop.0+0x118>)
    6f9a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6f9c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    6fa0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    6fa4:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    6fa6:	b006      	add	sp, #24
    6fa8:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    6faa:	201d      	movs	r0, #29
    6fac:	e79a      	b.n	6ee4 <usage_fault.constprop.0+0x44>
    6fae:	bf00      	nop
    6fb0:	200002f8 	.word	0x200002f8
    6fb4:	000128b9 	.word	0x000128b9
    6fb8:	e000ed00 	.word	0xe000ed00
    6fbc:	000128d1 	.word	0x000128d1
    6fc0:	000128e4 	.word	0x000128e4
    6fc4:	000128fe 	.word	0x000128fe
    6fc8:	0001291c 	.word	0x0001291c
    6fcc:	00012941 	.word	0x00012941
    6fd0:	0001295b 	.word	0x0001295b

00006fd4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    6fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6fd8:	4b87      	ldr	r3, [pc, #540]	; (71f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1f8>)
{
    6fda:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6fdc:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    6fe0:	af00      	add	r7, sp, #0
    6fe2:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6fe4:	f3c8 0408 	ubfx	r4, r8, #0, #9
    6fe8:	2600      	movs	r6, #0
    6fea:	f386 8811 	msr	BASEPRI, r6
    6fee:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    6ff2:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    6ff6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    6ffa:	d111      	bne.n	7020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    6ffc:	f002 030c 	and.w	r3, r2, #12
    7000:	2b08      	cmp	r3, #8
    7002:	d11c      	bne.n	703e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    7004:	487d      	ldr	r0, [pc, #500]	; (71fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1fc>)
    7006:	6803      	ldr	r3, [r0, #0]
    7008:	0759      	lsls	r1, r3, #29
    700a:	d009      	beq.n	7020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>
    700c:	4b7c      	ldr	r3, [pc, #496]	; (7200 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x200>)
    700e:	61fb      	str	r3, [r7, #28]
    7010:	2302      	movs	r3, #2
    7012:	61bb      	str	r3, [r7, #24]
    7014:	f107 0218 	add.w	r2, r7, #24
    7018:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    701c:	f007 fcad 	bl	e97a <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
    7020:	2600      	movs	r6, #0
		return NULL;
    7022:	4635      	mov	r5, r6
	*recoverable = false;
    7024:	2300      	movs	r3, #0
    7026:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    7028:	1ee3      	subs	r3, r4, #3
    702a:	2b09      	cmp	r3, #9
    702c:	f200 80c0 	bhi.w	71b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b0>
    7030:	e8df f003 	tbb	[pc, r3]
    7034:	a6adaa0a 	.word	0xa6adaa0a
    7038:	bebebebe 	.word	0xbebebebe
    703c:	b0be      	.short	0xb0be
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    703e:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    7040:	bf4c      	ite	mi
    7042:	460d      	movmi	r5, r1
			*nested_exc = true;
    7044:	2601      	movpl	r6, #1
    7046:	e7ed      	b.n	7024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
	PR_FAULT_INFO("***** HARD FAULT *****");
    7048:	4c6c      	ldr	r4, [pc, #432]	; (71fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1fc>)
    704a:	6823      	ldr	r3, [r4, #0]
    704c:	075b      	lsls	r3, r3, #29
    704e:	d00a      	beq.n	7066 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x66>
    7050:	4b6c      	ldr	r3, [pc, #432]	; (7204 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x204>)
    7052:	61fb      	str	r3, [r7, #28]
    7054:	2302      	movs	r3, #2
    7056:	61bb      	str	r3, [r7, #24]
    7058:	f107 0218 	add.w	r2, r7, #24
    705c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7060:	4620      	mov	r0, r4
    7062:	f007 fc8a 	bl	e97a <z_log_msg_static_create.constprop.0>
	*recoverable = false;
    7066:	2300      	movs	r3, #0
    7068:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    706a:	4b63      	ldr	r3, [pc, #396]	; (71f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1f8>)
    706c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    706e:	0790      	lsls	r0, r2, #30
    7070:	d50f      	bpl.n	7092 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x92>
		PR_EXC("  Bus fault on vector table read");
    7072:	6823      	ldr	r3, [r4, #0]
    7074:	0759      	lsls	r1, r3, #29
    7076:	d00a      	beq.n	708e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8e>
    7078:	4b63      	ldr	r3, [pc, #396]	; (7208 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x208>)
		PR_EXC("  Debug event");
    707a:	61fb      	str	r3, [r7, #28]
    707c:	485f      	ldr	r0, [pc, #380]	; (71fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1fc>)
    707e:	2302      	movs	r3, #2
    7080:	61bb      	str	r3, [r7, #24]
    7082:	f107 0218 	add.w	r2, r7, #24
    7086:	f44f 5182 	mov.w	r1, #4160	; 0x1040
	PR_FAULT_INFO(
    708a:	f007 fc76 	bl	e97a <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    708e:	2400      	movs	r4, #0
    7090:	e04d      	b.n	712e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12e>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    7092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7094:	2a00      	cmp	r2, #0
    7096:	da04      	bge.n	70a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa2>
		PR_EXC("  Debug event");
    7098:	6823      	ldr	r3, [r4, #0]
    709a:	075a      	lsls	r2, r3, #29
    709c:	d0f7      	beq.n	708e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8e>
    709e:	4b5b      	ldr	r3, [pc, #364]	; (720c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20c>)
    70a0:	e7eb      	b.n	707a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    70a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    70a4:	005b      	lsls	r3, r3, #1
    70a6:	d5f2      	bpl.n	708e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8e>
		PR_EXC("  Fault escalation (see below)");
    70a8:	6823      	ldr	r3, [r4, #0]
    70aa:	0758      	lsls	r0, r3, #29
    70ac:	d00a      	beq.n	70c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    70ae:	4b58      	ldr	r3, [pc, #352]	; (7210 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x210>)
    70b0:	61fb      	str	r3, [r7, #28]
    70b2:	2302      	movs	r3, #2
    70b4:	4851      	ldr	r0, [pc, #324]	; (71fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1fc>)
    70b6:	61bb      	str	r3, [r7, #24]
    70b8:	f107 0218 	add.w	r2, r7, #24
    70bc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    70c0:	f007 fc5b 	bl	e97a <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    70c4:	4b4c      	ldr	r3, [pc, #304]	; (71f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1f8>)
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    70c6:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    70c8:	695a      	ldr	r2, [r3, #20]
    70ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    70ce:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    70d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    70d4:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    70d8:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    70da:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    70de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    70e2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    70e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    70e8:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    70ec:	f64d 7202 	movw	r2, #57090	; 0xdf02
    70f0:	4291      	cmp	r1, r2
    70f2:	d008      	beq.n	7106 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x106>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    70f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    70f6:	b2d2      	uxtb	r2, r2
    70f8:	2a00      	cmp	r2, #0
    70fa:	d034      	beq.n	7166 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x166>
			reason = mem_manage_fault(esf, 1, recoverable);
    70fc:	1df9      	adds	r1, r7, #7
    70fe:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    7100:	f7ff fd4c 	bl	6b9c <mem_manage_fault.constprop.0>
    7104:	e03e      	b.n	7184 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x184>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    7106:	6823      	ldr	r3, [r4, #0]
    7108:	0759      	lsls	r1, r3, #29
    710a:	d00f      	beq.n	712c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12c>
    710c:	466c      	mov	r4, sp
    710e:	b088      	sub	sp, #32
    7110:	682b      	ldr	r3, [r5, #0]
    7112:	466a      	mov	r2, sp
    7114:	493f      	ldr	r1, [pc, #252]	; (7214 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x214>)
    7116:	4839      	ldr	r0, [pc, #228]	; (71fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1fc>)
    7118:	e9c2 1305 	strd	r1, r3, [r2, #20]
    711c:	2303      	movs	r3, #3
    711e:	f842 3f10 	str.w	r3, [r2, #16]!
    7122:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    7126:	f007 fc28 	bl	e97a <z_log_msg_static_create.constprop.0>
    712a:	46a5      	mov	sp, r4
			reason = esf->basic.r0;
    712c:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    712e:	79fb      	ldrb	r3, [r7, #7]
    7130:	b9ab      	cbnz	r3, 715e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15e>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    7132:	2220      	movs	r2, #32
    7134:	4629      	mov	r1, r5
    7136:	f107 0008 	add.w	r0, r7, #8
    713a:	f007 fdb0 	bl	ec9e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    713e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7140:	2e00      	cmp	r6, #0
    7142:	d054      	beq.n	71ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ee>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    7144:	f3c3 0208 	ubfx	r2, r3, #0, #9
    7148:	b922      	cbnz	r2, 7154 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x154>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    714a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    714e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    7152:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    7154:	f107 0108 	add.w	r1, r7, #8
    7158:	4620      	mov	r0, r4
    715a:	f7ff fb93 	bl	6884 <z_arm_fatal_error>
}
    715e:	3728      	adds	r7, #40	; 0x28
    7160:	46bd      	mov	sp, r7
    7162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    7166:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7168:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    716c:	d004      	beq.n	7178 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x178>
			reason = bus_fault(esf, 1, recoverable);
    716e:	1df9      	adds	r1, r7, #7
    7170:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    7172:	f7ff fdcf 	bl	6d14 <bus_fault.constprop.0>
    7176:	e005      	b.n	7184 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x184>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    7178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    717a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    717e:	d386      	bcc.n	708e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8e>
			reason = usage_fault(esf);
    7180:	f7ff fe8e 	bl	6ea0 <usage_fault.constprop.0>
    7184:	4604      	mov	r4, r0
    7186:	e7d2      	b.n	712e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12e>
		reason = mem_manage_fault(esf, 0, recoverable);
    7188:	1df9      	adds	r1, r7, #7
    718a:	2000      	movs	r0, #0
    718c:	e7b8      	b.n	7100 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x100>
		reason = bus_fault(esf, 0, recoverable);
    718e:	1df9      	adds	r1, r7, #7
    7190:	2000      	movs	r0, #0
    7192:	e7ee      	b.n	7172 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x172>
	PR_FAULT_INFO(
    7194:	4819      	ldr	r0, [pc, #100]	; (71fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1fc>)
    7196:	6803      	ldr	r3, [r0, #0]
    7198:	075a      	lsls	r2, r3, #29
    719a:	f43f af78 	beq.w	708e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8e>
    719e:	4b1e      	ldr	r3, [pc, #120]	; (7218 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x218>)
    71a0:	61fb      	str	r3, [r7, #28]
    71a2:	2302      	movs	r3, #2
    71a4:	61bb      	str	r3, [r7, #24]
    71a6:	f107 0218 	add.w	r2, r7, #24
    71aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    71ae:	e76c      	b.n	708a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8a>
	PR_FAULT_INFO("***** %s %d) *****",
    71b0:	4812      	ldr	r0, [pc, #72]	; (71fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1fc>)
    71b2:	6803      	ldr	r3, [r0, #0]
    71b4:	075b      	lsls	r3, r3, #29
    71b6:	f43f af6a 	beq.w	708e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8e>
    71ba:	4a18      	ldr	r2, [pc, #96]	; (721c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x21c>)
    71bc:	4b18      	ldr	r3, [pc, #96]	; (7220 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x220>)
    71be:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    71c2:	46e8      	mov	r8, sp
    71c4:	b08a      	sub	sp, #40	; 0x28
    71c6:	bf18      	it	ne
    71c8:	4613      	movne	r3, r2
    71ca:	466a      	mov	r2, sp
    71cc:	4915      	ldr	r1, [pc, #84]	; (7224 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x224>)
    71ce:	e9c2 1305 	strd	r1, r3, [r2, #20]
    71d2:	f44f 7300 	mov.w	r3, #512	; 0x200
    71d6:	8413      	strh	r3, [r2, #32]
    71d8:	3c10      	subs	r4, #16
    71da:	4b13      	ldr	r3, [pc, #76]	; (7228 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x228>)
    71dc:	61d4      	str	r4, [r2, #28]
    71de:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    71e2:	f842 3f10 	str.w	r3, [r2, #16]!
    71e6:	f007 fbc8 	bl	e97a <z_log_msg_static_create.constprop.0>
    71ea:	46c5      	mov	sp, r8
    71ec:	e74f      	b.n	708e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    71ee:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    71f2:	f023 0301 	bic.w	r3, r3, #1
    71f6:	e7ac      	b.n	7152 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x152>
    71f8:	e000ed00 	.word	0xe000ed00
    71fc:	200002f8 	.word	0x200002f8
    7200:	000129b4 	.word	0x000129b4
    7204:	000129df 	.word	0x000129df
    7208:	000129f6 	.word	0x000129f6
    720c:	00012a17 	.word	0x00012a17
    7210:	00012a25 	.word	0x00012a25
    7214:	00012a44 	.word	0x00012a44
    7218:	00012a60 	.word	0x00012a60
    721c:	0001299b 	.word	0x0001299b
    7220:	00012986 	.word	0x00012986
    7224:	00012a84 	.word	0x00012a84
    7228:	01000004 	.word	0x01000004

0000722c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    722c:	4a02      	ldr	r2, [pc, #8]	; (7238 <z_arm_fault_init+0xc>)
    722e:	6953      	ldr	r3, [r2, #20]
    7230:	f043 0310 	orr.w	r3, r3, #16
    7234:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    7236:	4770      	bx	lr
    7238:	e000ed00 	.word	0xe000ed00

0000723c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    723c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    7240:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    7244:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    7246:	4672      	mov	r2, lr
	bl z_arm_fault
    7248:	f7ff fec4 	bl	6fd4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    724c:	bd01      	pop	{r0, pc}
    724e:	bf00      	nop

00007250 <z_arm_interrupt_init>:
    7250:	4804      	ldr	r0, [pc, #16]	; (7264 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    7252:	2300      	movs	r3, #0
    7254:	2120      	movs	r1, #32
    7256:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    7258:	3301      	adds	r3, #1
    725a:	2b27      	cmp	r3, #39	; 0x27
    725c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    7260:	d1f9      	bne.n	7256 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    7262:	4770      	bx	lr
    7264:	e000e100 	.word	0xe000e100

00007268 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    7268:	2000      	movs	r0, #0
    msr CONTROL, r0
    726a:	f380 8814 	msr	CONTROL, r0
    isb
    726e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    7272:	f7fb fb3f 	bl	28f4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    7276:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    7278:	4911      	ldr	r1, [pc, #68]	; (72c0 <__start+0x58>)
    str r0, [r1]
    727a:	6008      	str	r0, [r1, #0]
    dsb
    727c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    7280:	4810      	ldr	r0, [pc, #64]	; (72c4 <__start+0x5c>)
    msr msp, r0
    7282:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    7286:	f000 f833 	bl	72f0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    728a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    728c:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
    7290:	480d      	ldr	r0, [pc, #52]	; (72c8 <__start+0x60>)
    ldr r1, =0xaa
    7292:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    7296:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bl z_early_memset
    729a:	f008 fa6c 	bl	f776 <z_early_memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    729e:	480a      	ldr	r0, [pc, #40]	; (72c8 <__start+0x60>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    72a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    72a4:	1840      	adds	r0, r0, r1
    msr PSP, r0
    72a6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    72aa:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    72ae:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    72b0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    72b2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    72b6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    72ba:	f7ff fba5 	bl	6a08 <z_arm_prep_c>
    72be:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    72c0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    72c4:	20005648 	.word	0x20005648
    ldr r0, =z_interrupt_stacks
    72c8:	20004908 	.word	0x20004908

000072cc <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    72cc:	4907      	ldr	r1, [pc, #28]	; (72ec <z_arm_clear_arm_mpu_config+0x20>)
    72ce:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    72d2:	2300      	movs	r3, #0
	int num_regions =
    72d4:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    72d8:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    72da:	4293      	cmp	r3, r2
    72dc:	db00      	blt.n	72e0 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    72de:	4770      	bx	lr
  MPU->RNR = rnr;
    72e0:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    72e4:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    72e8:	3301      	adds	r3, #1
    72ea:	e7f6      	b.n	72da <z_arm_clear_arm_mpu_config+0xe>
    72ec:	e000ed00 	.word	0xe000ed00

000072f0 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    72f0:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    72f2:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    72f4:	2300      	movs	r3, #0
    72f6:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    72fa:	f7ff ffe7 	bl	72cc <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    72fe:	4b14      	ldr	r3, [pc, #80]	; (7350 <z_arm_init_arch_hw_at_boot+0x60>)
    7300:	f04f 32ff 	mov.w	r2, #4294967295
    7304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    7308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    730c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    7310:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    7314:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    7318:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    731c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    7320:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    7324:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    7328:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    732c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    7330:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    7334:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    7338:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    733c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    7340:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    7344:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    7346:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    734a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    734e:	bd08      	pop	{r3, pc}
    7350:	e000e100 	.word	0xe000e100

00007354 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    7354:	4b08      	ldr	r3, [pc, #32]	; (7378 <z_impl_k_thread_abort+0x24>)
    7356:	689b      	ldr	r3, [r3, #8]
    7358:	4283      	cmp	r3, r0
    735a:	d10b      	bne.n	7374 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    735c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    7360:	b143      	cbz	r3, 7374 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    7362:	4b06      	ldr	r3, [pc, #24]	; (737c <z_impl_k_thread_abort+0x28>)
    7364:	685a      	ldr	r2, [r3, #4]
    7366:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    736a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    736c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    736e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    7372:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    7374:	f004 ba54 	b.w	b820 <z_thread_abort>
    7378:	20003480 	.word	0x20003480
    737c:	e000ed00 	.word	0xe000ed00

00007380 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    7380:	4b02      	ldr	r3, [pc, #8]	; (738c <z_arm_configure_static_mpu_regions+0xc>)
    7382:	4a03      	ldr	r2, [pc, #12]	; (7390 <z_arm_configure_static_mpu_regions+0x10>)
    7384:	4803      	ldr	r0, [pc, #12]	; (7394 <z_arm_configure_static_mpu_regions+0x14>)
    7386:	2101      	movs	r1, #1
    7388:	f000 b88a 	b.w	74a0 <arm_core_mpu_configure_static_mpu_regions>
    738c:	20010000 	.word	0x20010000
    7390:	20000000 	.word	0x20000000
    7394:	000109d4 	.word	0x000109d4

00007398 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    7398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    739c:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 7464 <mpu_configure_regions+0xcc>
    73a0:	469c      	mov	ip, r3
    73a2:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
    73a4:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
    73a6:	2300      	movs	r3, #0
    73a8:	428b      	cmp	r3, r1
    73aa:	da1d      	bge.n	73e8 <mpu_configure_regions+0x50>
		if (regions[i].size == 0U) {
    73ac:	6844      	ldr	r4, [r0, #4]
    73ae:	2c00      	cmp	r4, #0
    73b0:	d054      	beq.n	745c <mpu_configure_regions+0xc4>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    73b2:	f1bc 0f00 	cmp.w	ip, #0
    73b6:	d020      	beq.n	73fa <mpu_configure_regions+0x62>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    73b8:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    73ba:	4234      	tst	r4, r6
    73bc:	d018      	beq.n	73f0 <mpu_configure_regions+0x58>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    73be:	482a      	ldr	r0, [pc, #168]	; (7468 <mpu_configure_regions+0xd0>)
    73c0:	6802      	ldr	r2, [r0, #0]
    73c2:	0752      	lsls	r2, r2, #29
    73c4:	d00e      	beq.n	73e4 <mpu_configure_regions+0x4c>
    73c6:	466c      	mov	r4, sp
    73c8:	b088      	sub	sp, #32
    73ca:	466a      	mov	r2, sp
    73cc:	4927      	ldr	r1, [pc, #156]	; (746c <mpu_configure_regions+0xd4>)
    73ce:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    73d2:	2303      	movs	r3, #3
    73d4:	f842 3f10 	str.w	r3, [r2, #16]!
    73d8:	2300      	movs	r3, #0
    73da:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    73de:	f7fc f9b7 	bl	3750 <z_impl_z_log_msg_static_create>
    73e2:	46a5      	mov	sp, r4
			return -EINVAL;
    73e4:	f06f 0515 	mvn.w	r5, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    73e8:	4628      	mov	r0, r5
    73ea:	46bd      	mov	sp, r7
    73ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
    73f0:	2c1f      	cmp	r4, #31
    73f2:	d9e4      	bls.n	73be <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
    73f4:	6802      	ldr	r2, [r0, #0]
		&&
    73f6:	4216      	tst	r6, r2
    73f8:	d1e1      	bne.n	73be <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    73fa:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    73fc:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    73fe:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    7400:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
    7404:	d918      	bls.n	7438 <mpu_configure_regions+0xa0>
	if (size > (1UL << 31)) {
    7406:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    740a:	d817      	bhi.n	743c <mpu_configure_regions+0xa4>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    740c:	3c01      	subs	r4, #1
    740e:	fab4 f484 	clz	r4, r4
    7412:	f1c4 041f 	rsb	r4, r4, #31
    7416:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    7418:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    741c:	ea46 0604 	orr.w	r6, r6, r4
    7420:	d90e      	bls.n	7440 <mpu_configure_regions+0xa8>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    7422:	4811      	ldr	r0, [pc, #68]	; (7468 <mpu_configure_regions+0xd0>)
    7424:	6803      	ldr	r3, [r0, #0]
    7426:	075b      	lsls	r3, r3, #29
    7428:	d0dc      	beq.n	73e4 <mpu_configure_regions+0x4c>
    742a:	466c      	mov	r4, sp
    742c:	b088      	sub	sp, #32
    742e:	466a      	mov	r2, sp
    7430:	4b0f      	ldr	r3, [pc, #60]	; (7470 <mpu_configure_regions+0xd8>)
    7432:	e9c2 3505 	strd	r3, r5, [r2, #20]
    7436:	e7cc      	b.n	73d2 <mpu_configure_regions+0x3a>
		return REGION_32B;
    7438:	2408      	movs	r4, #8
    743a:	e7ed      	b.n	7418 <mpu_configure_regions+0x80>
		return REGION_4G;
    743c:	243e      	movs	r4, #62	; 0x3e
    743e:	e7eb      	b.n	7418 <mpu_configure_regions+0x80>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7440:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    7444:	432a      	orrs	r2, r5
    7446:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    744a:	f046 0601 	orr.w	r6, r6, #1
    744e:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7452:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
    7456:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7458:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    745c:	3301      	adds	r3, #1
    745e:	300c      	adds	r0, #12
    7460:	e7a2      	b.n	73a8 <mpu_configure_regions+0x10>
    7462:	bf00      	nop
    7464:	e000ed00 	.word	0xe000ed00
    7468:	200002f4 	.word	0x200002f4
    746c:	00012a9b 	.word	0x00012a9b
    7470:	00012abe 	.word	0x00012abe

00007474 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    7474:	4b04      	ldr	r3, [pc, #16]	; (7488 <arm_core_mpu_enable+0x14>)
    7476:	2205      	movs	r2, #5
    7478:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    747c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7480:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    7484:	4770      	bx	lr
    7486:	bf00      	nop
    7488:	e000ed00 	.word	0xe000ed00

0000748c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    748c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    7490:	4b02      	ldr	r3, [pc, #8]	; (749c <arm_core_mpu_disable+0x10>)
    7492:	2200      	movs	r2, #0
    7494:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    7498:	4770      	bx	lr
    749a:	bf00      	nop
    749c:	e000ed00 	.word	0xe000ed00

000074a0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    74a0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    74a2:	4c03      	ldr	r4, [pc, #12]	; (74b0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    74a4:	2301      	movs	r3, #1
    74a6:	7822      	ldrb	r2, [r4, #0]
    74a8:	f7ff ff76 	bl	7398 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    74ac:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    74ae:	bd10      	pop	{r4, pc}
    74b0:	200036f6 	.word	0x200036f6

000074b4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    74b4:	4914      	ldr	r1, [pc, #80]	; (7508 <z_arm_mpu_init+0x54>)
    74b6:	6808      	ldr	r0, [r1, #0]
    74b8:	2808      	cmp	r0, #8
{
    74ba:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    74bc:	d821      	bhi.n	7502 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    74be:	f7ff ffe5 	bl	748c <arm_core_mpu_disable>
    74c2:	4c12      	ldr	r4, [pc, #72]	; (750c <z_arm_mpu_init+0x58>)
    74c4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    74c6:	2200      	movs	r2, #0
    74c8:	4290      	cmp	r0, r2
    74ca:	f101 010c 	add.w	r1, r1, #12
    74ce:	d105      	bne.n	74dc <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    74d0:	4b0f      	ldr	r3, [pc, #60]	; (7510 <z_arm_mpu_init+0x5c>)
    74d2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    74d4:	f7ff ffce 	bl	7474 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    74d8:	2000      	movs	r0, #0
}
    74da:	bd10      	pop	{r4, pc}
    74dc:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    74e0:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    74e4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    74e8:	4313      	orrs	r3, r2
    74ea:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    74ee:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    74f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
    74f6:	f043 0301 	orr.w	r3, r3, #1
    74fa:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    74fe:	3201      	adds	r2, #1
    7500:	e7e2      	b.n	74c8 <z_arm_mpu_init+0x14>
		return -1;
    7502:	f04f 30ff 	mov.w	r0, #4294967295
    7506:	e7e8      	b.n	74da <z_arm_mpu_init+0x26>
    7508:	000109e0 	.word	0x000109e0
    750c:	e000ed00 	.word	0xe000ed00
    7510:	200036f6 	.word	0x200036f6

00007514 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    7514:	4b01      	ldr	r3, [pc, #4]	; (751c <__stdout_hook_install+0x8>)
    7516:	6018      	str	r0, [r3, #0]
}
    7518:	4770      	bx	lr
    751a:	bf00      	nop
    751c:	200000c0 	.word	0x200000c0

00007520 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
    7520:	b40c      	push	{r2, r3}
    7522:	b510      	push	{r4, lr}
    7524:	b086      	sub	sp, #24

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    7526:	b909      	cbnz	r1, 752c <snprintf+0xc>
		str = &dummy; /* write final NUL to dummy, can't change *s */
    7528:	f10d 000b 	add.w	r0, sp, #11
    752c:	2400      	movs	r4, #0
	}

	p.ptr = str;
	p.len = (int) len;
    752e:	e9cd 0104 	strd	r0, r1, [sp, #16]

	va_start(vargs, format);
    7532:	ab09      	add	r3, sp, #36	; 0x24
    7534:	9a08      	ldr	r2, [sp, #32]
    7536:	9400      	str	r4, [sp, #0]
    7538:	a904      	add	r1, sp, #16
    753a:	4805      	ldr	r0, [pc, #20]	; (7550 <snprintf+0x30>)
    753c:	9303      	str	r3, [sp, #12]
    753e:	f7fa fb55 	bl	1bec <z_cbvprintf_impl>
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
	va_end(vargs);

	*(p.ptr) = 0;
    7542:	9b04      	ldr	r3, [sp, #16]
    7544:	701c      	strb	r4, [r3, #0]
	return r;
}
    7546:	b006      	add	sp, #24
    7548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    754c:	b002      	add	sp, #8
    754e:	4770      	bx	lr
    7550:	0000eccd 	.word	0x0000eccd

00007554 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    7554:	f04f 0320 	mov.w	r3, #32
    7558:	f3ef 8211 	mrs	r2, BASEPRI
    755c:	f383 8812 	msr	BASEPRI_MAX, r3
    7560:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    7564:	4906      	ldr	r1, [pc, #24]	; (7580 <nordicsemi_nrf52_init+0x2c>)
    7566:	2301      	movs	r3, #1
    7568:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    756c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    7570:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    7574:	f382 8811 	msr	BASEPRI, r2
    7578:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    757c:	2000      	movs	r0, #0
    757e:	4770      	bx	lr
    7580:	4001e000 	.word	0x4001e000

00007584 <sys_arch_reboot>:
    *p_gpregret = val;
    7584:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7588:	b2c0      	uxtb	r0, r0
    758a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    758e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    7592:	4905      	ldr	r1, [pc, #20]	; (75a8 <sys_arch_reboot+0x24>)
    7594:	4b05      	ldr	r3, [pc, #20]	; (75ac <sys_arch_reboot+0x28>)
    7596:	68ca      	ldr	r2, [r1, #12]
    7598:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    759c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    759e:	60cb      	str	r3, [r1, #12]
    75a0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    75a4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    75a6:	e7fd      	b.n	75a4 <sys_arch_reboot+0x20>
    75a8:	e000ed00 	.word	0xe000ed00
    75ac:	05fa0004 	.word	0x05fa0004

000075b0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    75b0:	b120      	cbz	r0, 75bc <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    75b2:	4b03      	ldr	r3, [pc, #12]	; (75c0 <arch_busy_wait+0x10>)
    75b4:	0180      	lsls	r0, r0, #6
    75b6:	f043 0301 	orr.w	r3, r3, #1
    75ba:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    75bc:	4770      	bx	lr
    75be:	bf00      	nop
    75c0:	00010260 	.word	0x00010260

000075c4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    75c4:	4b08      	ldr	r3, [pc, #32]	; (75e8 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    75c6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    75c8:	1ac3      	subs	r3, r0, r3
{
    75ca:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    75cc:	4907      	ldr	r1, [pc, #28]	; (75ec <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    75ce:	109b      	asrs	r3, r3, #2
{
    75d0:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    75d2:	4359      	muls	r1, r3
    75d4:	4806      	ldr	r0, [pc, #24]	; (75f0 <onoff_stop+0x2c>)
    75d6:	2240      	movs	r2, #64	; 0x40
    75d8:	f007 fce2 	bl	efa0 <stop>
	notify(mgr, res);
    75dc:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    75de:	4601      	mov	r1, r0
	notify(mgr, res);
    75e0:	4620      	mov	r0, r4
}
    75e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    75e6:	4718      	bx	r3
    75e8:	200012cc 	.word	0x200012cc
    75ec:	b6db6db7 	.word	0xb6db6db7
    75f0:	0000fe50 	.word	0x0000fe50

000075f4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    75f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    75f6:	4c0c      	ldr	r4, [pc, #48]	; (7628 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    75f8:	4a0c      	ldr	r2, [pc, #48]	; (762c <onoff_start+0x38>)
    75fa:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    75fc:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    75fe:	9300      	str	r3, [sp, #0]
{
    7600:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    7602:	460b      	mov	r3, r1
    7604:	490a      	ldr	r1, [pc, #40]	; (7630 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    7606:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    7608:	4361      	muls	r1, r4
{
    760a:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    760c:	4809      	ldr	r0, [pc, #36]	; (7634 <onoff_start+0x40>)
    760e:	f007 fcf3 	bl	eff8 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    7612:	1e01      	subs	r1, r0, #0
    7614:	da05      	bge.n	7622 <onoff_start+0x2e>
		notify(mgr, err);
    7616:	4630      	mov	r0, r6
    7618:	462b      	mov	r3, r5
	}
}
    761a:	b002      	add	sp, #8
    761c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    7620:	4718      	bx	r3
}
    7622:	b002      	add	sp, #8
    7624:	bd70      	pop	{r4, r5, r6, pc}
    7626:	bf00      	nop
    7628:	200012cc 	.word	0x200012cc
    762c:	0000f063 	.word	0x0000f063
    7630:	b6db6db7 	.word	0xb6db6db7
    7634:	0000fe50 	.word	0x0000fe50

00007638 <hfclk_start>:
{
    7638:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
    763a:	f008 fa1b 	bl	fa74 <z_impl_k_uptime_ticks>
    763e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7642:	fba0 0302 	umull	r0, r3, r0, r2
		hf_start_tstamp = k_uptime_get();
    7646:	4c07      	ldr	r4, [pc, #28]	; (7664 <hfclk_start+0x2c>)
    7648:	fb02 3101 	mla	r1, r2, r1, r3
    764c:	0bc0      	lsrs	r0, r0, #15
    764e:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    7652:	0bc9      	lsrs	r1, r1, #15
    7654:	e9c4 0100 	strd	r0, r1, [r4]
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    7658:	2001      	movs	r0, #1
}
    765a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    765e:	f002 baf7 	b.w	9c50 <nrfx_clock_start>
    7662:	bf00      	nop
    7664:	20000b50 	.word	0x20000b50

00007668 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    7668:	2200      	movs	r2, #0
{
    766a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    766c:	2101      	movs	r1, #1
{
    766e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    7670:	4610      	mov	r0, r2
    7672:	f7ff f9ad 	bl	69d0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    7676:	480f      	ldr	r0, [pc, #60]	; (76b4 <clk_init+0x4c>)
    7678:	f002 fada 	bl	9c30 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    767c:	4b0e      	ldr	r3, [pc, #56]	; (76b8 <clk_init+0x50>)
    767e:	4298      	cmp	r0, r3
    7680:	d115      	bne.n	76ae <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    7682:	f007 ff7f 	bl	f584 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    7686:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    7688:	490c      	ldr	r1, [pc, #48]	; (76bc <clk_init+0x54>)
    768a:	4630      	mov	r0, r6
    768c:	f004 ffed 	bl	c66a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    7690:	2800      	cmp	r0, #0
    7692:	db0b      	blt.n	76ac <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    7694:	2501      	movs	r5, #1
    7696:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    7698:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    769a:	4908      	ldr	r1, [pc, #32]	; (76bc <clk_init+0x54>)
    769c:	f104 001c 	add.w	r0, r4, #28
    76a0:	f004 ffe3 	bl	c66a <onoff_manager_init>
		if (err < 0) {
    76a4:	2800      	cmp	r0, #0
    76a6:	db01      	blt.n	76ac <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    76a8:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    76aa:	2000      	movs	r0, #0
}
    76ac:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    76ae:	f06f 0004 	mvn.w	r0, #4
    76b2:	e7fb      	b.n	76ac <clk_init+0x44>
    76b4:	000076f5 	.word	0x000076f5
    76b8:	0bad0000 	.word	0x0bad0000
    76bc:	00010a00 	.word	0x00010a00

000076c0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    76c0:	b570      	push	{r4, r5, r6, lr}
    76c2:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    76c4:	230c      	movs	r3, #12
    76c6:	4809      	ldr	r0, [pc, #36]	; (76ec <clkstarted_handle.constprop.0+0x2c>)
    76c8:	434b      	muls	r3, r1
    76ca:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    76cc:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    76d0:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    76d2:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    76d4:	4418      	add	r0, r3
	sub_data->cb = NULL;
    76d6:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    76d8:	f007 fc4f 	bl	ef7a <set_on_state>
	if (callback) {
    76dc:	b12d      	cbz	r5, 76ea <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    76de:	4632      	mov	r2, r6
    76e0:	462b      	mov	r3, r5
    76e2:	4803      	ldr	r0, [pc, #12]	; (76f0 <clkstarted_handle.constprop.0+0x30>)
}
    76e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    76e8:	4718      	bx	r3
}
    76ea:	bd70      	pop	{r4, r5, r6, pc}
    76ec:	200012cc 	.word	0x200012cc
    76f0:	0000fe50 	.word	0x0000fe50

000076f4 <clock_event_handler>:
	switch (event) {
    76f4:	b110      	cbz	r0, 76fc <clock_event_handler+0x8>
    76f6:	2801      	cmp	r0, #1
    76f8:	d004      	beq.n	7704 <clock_event_handler+0x10>
    76fa:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    76fc:	4b03      	ldr	r3, [pc, #12]	; (770c <clock_event_handler+0x18>)
    76fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7700:	075b      	lsls	r3, r3, #29
    7702:	d101      	bne.n	7708 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    7704:	f7ff bfdc 	b.w	76c0 <clkstarted_handle.constprop.0>
}
    7708:	4770      	bx	lr
    770a:	bf00      	nop
    770c:	200012cc 	.word	0x200012cc

00007710 <generic_hfclk_start>:
{
    7710:	b508      	push	{r3, lr}
	__asm__ volatile(
    7712:	f04f 0320 	mov.w	r3, #32
    7716:	f3ef 8111 	mrs	r1, BASEPRI
    771a:	f383 8812 	msr	BASEPRI_MAX, r3
    771e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    7722:	4a11      	ldr	r2, [pc, #68]	; (7768 <generic_hfclk_start+0x58>)
    7724:	6813      	ldr	r3, [r2, #0]
    7726:	f043 0002 	orr.w	r0, r3, #2
    772a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    772c:	07da      	lsls	r2, r3, #31
    772e:	d407      	bmi.n	7740 <generic_hfclk_start+0x30>
	__asm__ volatile(
    7730:	f381 8811 	msr	BASEPRI, r1
    7734:	f3bf 8f6f 	isb	sy
}
    7738:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	hfclk_start();
    773c:	f7ff bf7c 	b.w	7638 <hfclk_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    7740:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7744:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    7748:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    774c:	07d3      	lsls	r3, r2, #31
    774e:	d5ef      	bpl.n	7730 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    7750:	4806      	ldr	r0, [pc, #24]	; (776c <generic_hfclk_start+0x5c>)
    7752:	f007 fc12 	bl	ef7a <set_on_state>
    7756:	f381 8811 	msr	BASEPRI, r1
    775a:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    775e:	2000      	movs	r0, #0
}
    7760:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    7764:	f7ff bfac 	b.w	76c0 <clkstarted_handle.constprop.0>
    7768:	2000131c 	.word	0x2000131c
    776c:	2000130c 	.word	0x2000130c

00007770 <api_blocking_start>:
{
    7770:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    7772:	2200      	movs	r2, #0
    7774:	2301      	movs	r3, #1
    7776:	e9cd 2302 	strd	r2, r3, [sp, #8]
    777a:	ab04      	add	r3, sp, #16
    777c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    7780:	4a09      	ldr	r2, [pc, #36]	; (77a8 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    7782:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    7786:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    7788:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    778c:	f007 fc62 	bl	f054 <api_start>
	if (err < 0) {
    7790:	2800      	cmp	r0, #0
    7792:	db05      	blt.n	77a0 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    7794:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    7798:	2300      	movs	r3, #0
    779a:	4668      	mov	r0, sp
    779c:	f003 fd12 	bl	b1c4 <z_impl_k_sem_take>
}
    77a0:	b007      	add	sp, #28
    77a2:	f85d fb04 	ldr.w	pc, [sp], #4
    77a6:	bf00      	nop
    77a8:	0000f07b 	.word	0x0000f07b

000077ac <lfclk_start>:
{
    77ac:	b510      	push	{r4, lr}
	if (!once) {
    77ae:	4c07      	ldr	r4, [pc, #28]	; (77cc <lfclk_start+0x20>)
    77b0:	7823      	ldrb	r3, [r4, #0]
    77b2:	b92b      	cbnz	r3, 77c0 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
    77b4:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    77b8:	f008 f95e 	bl	fa78 <z_impl_k_busy_wait>
		once = true;
    77bc:	2301      	movs	r3, #1
    77be:	7023      	strb	r3, [r4, #0]
}
    77c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    77c4:	2000      	movs	r0, #0
    77c6:	f002 ba43 	b.w	9c50 <nrfx_clock_start>
    77ca:	bf00      	nop
    77cc:	200036f7 	.word	0x200036f7

000077d0 <cmd_status>:
		 &data, &config,
		 PRE_KERNEL_1, CONFIG_CLOCK_CONTROL_INIT_PRIORITY,
		 &clock_control_api);

static int cmd_status(const struct shell *sh, size_t argc, char **argv)
{
    77d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    77d4:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    77d8:	4605      	mov	r5, r0
    77da:	f8d8 6418 	ldr.w	r6, [r8, #1048]	; 0x418
    77de:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
	__asm__ volatile(
    77e2:	f04f 0320 	mov.w	r3, #32
    77e6:	f3ef 8711 	mrs	r7, BASEPRI
    77ea:	f383 8812 	msr	BASEPRI_MAX, r3
    77ee:	f3bf 8f6f 	isb	sy
	return z_impl_k_uptime_ticks();
    77f2:	f008 f93f 	bl	fa74 <z_impl_k_uptime_ticks>
    77f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    77fa:	fba0 4302 	umull	r4, r3, r0, r2
    77fe:	fb02 3301 	mla	r3, r2, r1, r3
    7802:	0be4      	lsrs	r4, r4, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    7804:	f8d8 940c 	ldr.w	r9, [r8, #1036]	; 0x40c
    7808:	ea44 4443 	orr.w	r4, r4, r3, lsl #17
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    780c:	f8d8 340c 	ldr.w	r3, [r8, #1036]	; 0x40c
	uint64_t now = k_uptime_get();

	(void)nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, (void *)&hfclk_src);
	hf_status = (hfclk_src == NRF_CLOCK_HFCLK_HIGH_ACCURACY);

	abs_start = hf_start_tstamp;
    7810:	4b23      	ldr	r3, [pc, #140]	; (78a0 <cmd_status+0xd0>)
    7812:	f8d3 b000 	ldr.w	fp, [r3]
	abs_stop = hf_stop_tstamp;
    7816:	4b23      	ldr	r3, [pc, #140]	; (78a4 <cmd_status+0xd4>)
    7818:	f8d3 a000 	ldr.w	sl, [r3]
	__asm__ volatile(
    781c:	f387 8811 	msr	BASEPRI, r7
    7820:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	shell_print(sh, "HF clock:");
    7824:	4a20      	ldr	r2, [pc, #128]	; (78a8 <cmd_status+0xd8>)
	shell_print(sh, "\t- %srunning (users: %u)",
    7826:	f8df 8084 	ldr.w	r8, [pc, #132]	; 78ac <cmd_status+0xdc>
    782a:	4f21      	ldr	r7, [pc, #132]	; (78b0 <cmd_status+0xe0>)
	shell_print(sh, "HF clock:");
    782c:	4628      	mov	r0, r5
    782e:	2108      	movs	r1, #8
    7830:	f006 f883 	bl	d93a <shell_fprintf>
	shell_print(sh, "\t- %srunning (users: %u)",
    7834:	f019 0f01 	tst.w	r9, #1
    7838:	f8df 9078 	ldr.w	r9, [pc, #120]	; 78b4 <cmd_status+0xe4>
    783c:	4a1e      	ldr	r2, [pc, #120]	; (78b8 <cmd_status+0xe8>)
    783e:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    7842:	9300      	str	r3, [sp, #0]
    7844:	4628      	mov	r0, r5
    7846:	bf0c      	ite	eq
    7848:	4643      	moveq	r3, r8
    784a:	463b      	movne	r3, r7
    784c:	2108      	movs	r1, #8
    784e:	f006 f874 	bl	d93a <shell_fprintf>
			hf_status ? "" : "not ", hf_mgr->refs);
	shell_print(sh, "\t- last start: %u ms (%u ms ago)",
    7852:	eba4 030b 	sub.w	r3, r4, fp
    7856:	9300      	str	r3, [sp, #0]
    7858:	4628      	mov	r0, r5
    785a:	465b      	mov	r3, fp
    785c:	4a17      	ldr	r2, [pc, #92]	; (78bc <cmd_status+0xec>)
    785e:	2108      	movs	r1, #8
			(uint32_t)abs_start, (uint32_t)(now - abs_start));
	shell_print(sh, "\t- last stop: %u ms (%u ms ago)",
    7860:	eba4 040a 	sub.w	r4, r4, sl
	shell_print(sh, "\t- last start: %u ms (%u ms ago)",
    7864:	f006 f869 	bl	d93a <shell_fprintf>
	shell_print(sh, "\t- last stop: %u ms (%u ms ago)",
    7868:	4653      	mov	r3, sl
    786a:	4628      	mov	r0, r5
    786c:	4a14      	ldr	r2, [pc, #80]	; (78c0 <cmd_status+0xf0>)
    786e:	9400      	str	r4, [sp, #0]
    7870:	2108      	movs	r1, #8
    7872:	f006 f862 	bl	d93a <shell_fprintf>
			(uint32_t)abs_stop, (uint32_t)(now - abs_stop));
	shell_print(sh, "LF clock:");
    7876:	4628      	mov	r0, r5
    7878:	4a12      	ldr	r2, [pc, #72]	; (78c4 <cmd_status+0xf4>)
    787a:	2108      	movs	r1, #8
    787c:	f006 f85d 	bl	d93a <shell_fprintf>
	shell_print(sh, "\t- %srunning (users: %u)",
    7880:	f8b9 3036 	ldrh.w	r3, [r9, #54]	; 0x36
    7884:	9300      	str	r3, [sp, #0]
    7886:	4628      	mov	r0, r5
    7888:	4a0b      	ldr	r2, [pc, #44]	; (78b8 <cmd_status+0xe8>)
    788a:	2e00      	cmp	r6, #0
    788c:	bf0c      	ite	eq
    788e:	4643      	moveq	r3, r8
    7890:	463b      	movne	r3, r7
    7892:	2108      	movs	r1, #8
    7894:	f006 f851 	bl	d93a <shell_fprintf>
			lf_status ? "" : "not ", lf_mgr->refs);

	return 0;
}
    7898:	2000      	movs	r0, #0
    789a:	b003      	add	sp, #12
    789c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    78a0:	20000b50 	.word	0x20000b50
    78a4:	20000b48 	.word	0x20000b48
    78a8:	00012afc 	.word	0x00012afc
    78ac:	00012af7 	.word	0x00012af7
    78b0:	0001188f 	.word	0x0001188f
    78b4:	200012cc 	.word	0x200012cc
    78b8:	00012b07 	.word	0x00012b07
    78bc:	00012b21 	.word	0x00012b21
    78c0:	00012b43 	.word	0x00012b43
    78c4:	00012b64 	.word	0x00012b64

000078c8 <hfclk_stop>:
{
    78c8:	b510      	push	{r4, lr}
    78ca:	f008 f8d3 	bl	fa74 <z_impl_k_uptime_ticks>
    78ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    78d2:	fba0 0302 	umull	r0, r3, r0, r2
		hf_stop_tstamp = k_uptime_get();
    78d6:	4c07      	ldr	r4, [pc, #28]	; (78f4 <hfclk_stop+0x2c>)
    78d8:	fb02 3101 	mla	r1, r2, r1, r3
    78dc:	0bc0      	lsrs	r0, r0, #15
    78de:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    78e2:	0bc9      	lsrs	r1, r1, #15
    78e4:	e9c4 0100 	strd	r0, r1, [r4]
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    78e8:	2001      	movs	r0, #1
}
    78ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    78ee:	f007 be56 	b.w	f59e <nrfx_clock_stop>
    78f2:	bf00      	nop
    78f4:	20000b48 	.word	0x20000b48

000078f8 <generic_hfclk_stop>:
{
    78f8:	b510      	push	{r4, lr}
	__asm__ volatile(
    78fa:	f04f 0320 	mov.w	r3, #32
    78fe:	f3ef 8411 	mrs	r4, BASEPRI
    7902:	f383 8812 	msr	BASEPRI_MAX, r3
    7906:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    790a:	4a07      	ldr	r2, [pc, #28]	; (7928 <generic_hfclk_stop+0x30>)
    790c:	6813      	ldr	r3, [r2, #0]
    790e:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    7912:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    7914:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    7916:	d401      	bmi.n	791c <generic_hfclk_stop+0x24>
		hfclk_stop();
    7918:	f7ff ffd6 	bl	78c8 <hfclk_stop>
	__asm__ volatile(
    791c:	f384 8811 	msr	BASEPRI, r4
    7920:	f3bf 8f6f 	isb	sy
}
    7924:	bd10      	pop	{r4, pc}
    7926:	bf00      	nop
    7928:	2000131c 	.word	0x2000131c

0000792c <z_nrf_clock_control_lf_on>:
{
    792c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    7930:	4938      	ldr	r1, [pc, #224]	; (7a14 <z_nrf_clock_control_lf_on+0xe8>)
    7932:	f3bf 8f5b 	dmb	ish
    7936:	4607      	mov	r7, r0
    7938:	2201      	movs	r2, #1
    793a:	e851 3f00 	ldrex	r3, [r1]
    793e:	e841 2000 	strex	r0, r2, [r1]
    7942:	2800      	cmp	r0, #0
    7944:	d1f9      	bne.n	793a <z_nrf_clock_control_lf_on+0xe>
    7946:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    794a:	b933      	cbnz	r3, 795a <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    794c:	4932      	ldr	r1, [pc, #200]	; (7a18 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    794e:	4833      	ldr	r0, [pc, #204]	; (7a1c <z_nrf_clock_control_lf_on+0xf0>)
    7950:	604b      	str	r3, [r1, #4]
    7952:	60cb      	str	r3, [r1, #12]
    7954:	608a      	str	r2, [r1, #8]
    7956:	f004 fe9b 	bl	c690 <onoff_request>
	switch (start_mode) {
    795a:	1e7b      	subs	r3, r7, #1
    795c:	2b01      	cmp	r3, #1
    795e:	d82b      	bhi.n	79b8 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    7960:	2f01      	cmp	r7, #1
    7962:	d107      	bne.n	7974 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    7964:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7968:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    796c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    7970:	2b01      	cmp	r3, #1
    7972:	d021      	beq.n	79b8 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    7974:	f007 ff03 	bl	f77e <k_is_in_isr>
    7978:	4605      	mov	r5, r0
    797a:	b9f8      	cbnz	r0, 79bc <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
    797c:	4b28      	ldr	r3, [pc, #160]	; (7a20 <z_nrf_clock_control_lf_on+0xf4>)
    797e:	781b      	ldrb	r3, [r3, #0]
    7980:	b1e3      	cbz	r3, 79bc <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    7982:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7986:	2202      	movs	r2, #2
    7988:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    798c:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    798e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 7a24 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7992:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    7996:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    799a:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    799e:	03d2      	lsls	r2, r2, #15
    79a0:	d516      	bpl.n	79d0 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    79a2:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    79a6:	2b01      	cmp	r3, #1
    79a8:	d001      	beq.n	79ae <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    79aa:	2f01      	cmp	r7, #1
    79ac:	d110      	bne.n	79d0 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    79ae:	b35d      	cbz	r5, 7a08 <z_nrf_clock_control_lf_on+0xdc>
    79b0:	f386 8811 	msr	BASEPRI, r6
    79b4:	f3bf 8f6f 	isb	sy
}
    79b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    79bc:	f04f 0320 	mov.w	r3, #32
    79c0:	f3ef 8611 	mrs	r6, BASEPRI
    79c4:	f383 8812 	msr	BASEPRI_MAX, r3
    79c8:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    79cc:	2501      	movs	r5, #1
    79ce:	e7de      	b.n	798e <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    79d0:	b1ad      	cbz	r5, 79fe <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    79d2:	4630      	mov	r0, r6
    79d4:	f7fe ff4a 	bl	686c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    79d8:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    79dc:	2b00      	cmp	r3, #0
    79de:	d1da      	bne.n	7996 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    79e0:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    79e4:	2a00      	cmp	r2, #0
    79e6:	d0d6      	beq.n	7996 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    79e8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    79ec:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    79f0:	2301      	movs	r3, #1
    79f2:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    79f6:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    79fa:	60a3      	str	r3, [r4, #8]
}
    79fc:	e7cb      	b.n	7996 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    79fe:	2100      	movs	r1, #0
    7a00:	2021      	movs	r0, #33	; 0x21
    7a02:	f003 feed 	bl	b7e0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    7a06:	e7e7      	b.n	79d8 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    7a08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7a0c:	2202      	movs	r2, #2
    7a0e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    7a12:	e7d1      	b.n	79b8 <z_nrf_clock_control_lf_on+0x8c>
    7a14:	200012c8 	.word	0x200012c8
    7a18:	200012b8 	.word	0x200012b8
    7a1c:	200012e8 	.word	0x200012e8
    7a20:	20003c0c 	.word	0x20003c0c
    7a24:	e000e100 	.word	0xe000e100

00007a28 <rtt_console_init>:

	return character;
}

static int rtt_console_init(void)
{
    7a28:	b510      	push	{r4, lr}

#ifdef CONFIG_PRINTK
	__printk_hook_install(rtt_console_out);
    7a2a:	4c04      	ldr	r4, [pc, #16]	; (7a3c <rtt_console_init+0x14>)
    7a2c:	4620      	mov	r0, r4
    7a2e:	f7f9 ff9d 	bl	196c <__printk_hook_install>
#endif
	__stdout_hook_install(rtt_console_out);
    7a32:	4620      	mov	r0, r4
    7a34:	f7ff fd6e 	bl	7514 <__stdout_hook_install>

	return 0;
}
    7a38:	2000      	movs	r0, #0
    7a3a:	bd10      	pop	{r4, pc}
    7a3c:	00007a41 	.word	0x00007a41

00007a40 <rtt_console_out>:
{
    7a40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7a42:	4e13      	ldr	r6, [pc, #76]	; (7a90 <rtt_console_out+0x50>)
	char c = (char)character;
    7a44:	f88d 0007 	strb.w	r0, [sp, #7]
{
    7a48:	4604      	mov	r4, r0
	char c = (char)character;
    7a4a:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
    7a4c:	f002 ff3e 	bl	a8cc <zephyr_rtt_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    7a50:	2201      	movs	r2, #1
    7a52:	f10d 0107 	add.w	r1, sp, #7
    7a56:	2000      	movs	r0, #0
    7a58:	f002 ff02 	bl	a860 <SEGGER_RTT_WriteNoLock>
    7a5c:	4607      	mov	r7, r0
		SEGGER_RTT_UNLOCK();
    7a5e:	f002 ff3f 	bl	a8e0 <zephyr_rtt_mutex_unlock>
		if (cnt) {
    7a62:	b127      	cbz	r7, 7a6e <rtt_console_out+0x2e>
			host_present = true;
    7a64:	2301      	movs	r3, #1
    7a66:	7033      	strb	r3, [r6, #0]
}
    7a68:	4620      	mov	r0, r4
    7a6a:	b003      	add	sp, #12
    7a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
    7a6e:	7833      	ldrb	r3, [r6, #0]
    7a70:	2b00      	cmp	r3, #0
    7a72:	d0f9      	beq.n	7a68 <rtt_console_out+0x28>
			if (max_cnt) {
    7a74:	3d01      	subs	r5, #1
    7a76:	d008      	beq.n	7a8a <rtt_console_out+0x4a>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    7a78:	f007 fe81 	bl	f77e <k_is_in_isr>
    7a7c:	2800      	cmp	r0, #0
    7a7e:	d1e5      	bne.n	7a4c <rtt_console_out+0xc>
    7a80:	2100      	movs	r1, #0
    7a82:	2042      	movs	r0, #66	; 0x42
    7a84:	f003 feac 	bl	b7e0 <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
    7a88:	e7e0      	b.n	7a4c <rtt_console_out+0xc>
				host_present = false;
    7a8a:	7035      	strb	r5, [r6, #0]
    7a8c:	e7ec      	b.n	7a68 <rtt_console_out+0x28>
    7a8e:	bf00      	nop
    7a90:	200036f8 	.word	0x200036f8

00007a94 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    7a94:	b508      	push	{r3, lr}
    7a96:	4807      	ldr	r0, [pc, #28]	; (7ab4 <uart_console_init+0x20>)
    7a98:	f007 fe4a 	bl	f730 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    7a9c:	b138      	cbz	r0, 7aae <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    7a9e:	4806      	ldr	r0, [pc, #24]	; (7ab8 <uart_console_init+0x24>)
    7aa0:	f7ff fd38 	bl	7514 <__stdout_hook_install>
	__printk_hook_install(console_out);
    7aa4:	4804      	ldr	r0, [pc, #16]	; (7ab8 <uart_console_init+0x24>)
    7aa6:	f7f9 ff61 	bl	196c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    7aaa:	2000      	movs	r0, #0
}
    7aac:	bd08      	pop	{r3, pc}
		return -ENODEV;
    7aae:	f06f 0012 	mvn.w	r0, #18
    7ab2:	e7fb      	b.n	7aac <uart_console_init+0x18>
    7ab4:	0000fe88 	.word	0x0000fe88
    7ab8:	00007abd 	.word	0x00007abd

00007abc <console_out>:
	if ('\n' == c) {
    7abc:	280a      	cmp	r0, #10
{
    7abe:	b538      	push	{r3, r4, r5, lr}
    7ac0:	4d07      	ldr	r5, [pc, #28]	; (7ae0 <console_out+0x24>)
    7ac2:	4604      	mov	r4, r0
	if ('\n' == c) {
    7ac4:	d104      	bne.n	7ad0 <console_out+0x14>
	api->poll_out(dev, out_char);
    7ac6:	68ab      	ldr	r3, [r5, #8]
    7ac8:	210d      	movs	r1, #13
    7aca:	685b      	ldr	r3, [r3, #4]
    7acc:	4628      	mov	r0, r5
    7ace:	4798      	blx	r3
    7ad0:	68ab      	ldr	r3, [r5, #8]
    7ad2:	4803      	ldr	r0, [pc, #12]	; (7ae0 <console_out+0x24>)
    7ad4:	685b      	ldr	r3, [r3, #4]
    7ad6:	b2e1      	uxtb	r1, r4
    7ad8:	4798      	blx	r3
}
    7ada:	4620      	mov	r0, r4
    7adc:	bd38      	pop	{r3, r4, r5, pc}
    7ade:	bf00      	nop
    7ae0:	0000fe88 	.word	0x0000fe88

00007ae4 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    7ae4:	4b02      	ldr	r3, [pc, #8]	; (7af0 <flash_nrf_pages_layout+0xc>)
    7ae6:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    7ae8:	2301      	movs	r3, #1
    7aea:	6013      	str	r3, [r2, #0]
}
    7aec:	4770      	bx	lr
    7aee:	bf00      	nop
    7af0:	20001320 	.word	0x20001320

00007af4 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    7af4:	4800      	ldr	r0, [pc, #0]	; (7af8 <flash_nrf_get_parameters+0x4>)
    7af6:	4770      	bx	lr
    7af8:	00010a94 	.word	0x00010a94

00007afc <flash_nrf_read.part.0>:
static int flash_nrf_read(const struct device *dev, off_t addr,
    7afc:	b5b0      	push	{r4, r5, r7, lr}
    7afe:	4603      	mov	r3, r0
		LOG_ERR("invalid address: 0x%08lx:%zu",
    7b00:	480c      	ldr	r0, [pc, #48]	; (7b34 <flash_nrf_read.part.0+0x38>)
    7b02:	6802      	ldr	r2, [r0, #0]
    7b04:	0752      	lsls	r2, r2, #29
static int flash_nrf_read(const struct device *dev, off_t addr,
    7b06:	af00      	add	r7, sp, #0
		LOG_ERR("invalid address: 0x%08lx:%zu",
    7b08:	d00f      	beq.n	7b2a <flash_nrf_read.part.0+0x2e>
    7b0a:	466c      	mov	r4, sp
    7b0c:	b088      	sub	sp, #32
    7b0e:	466a      	mov	r2, sp
    7b10:	4d09      	ldr	r5, [pc, #36]	; (7b38 <flash_nrf_read.part.0+0x3c>)
    7b12:	61d1      	str	r1, [r2, #28]
    7b14:	e9c2 5305 	strd	r5, r3, [r2, #20]
    7b18:	2304      	movs	r3, #4
    7b1a:	f842 3f10 	str.w	r3, [r2, #16]!
    7b1e:	2300      	movs	r3, #0
    7b20:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    7b24:	f7fb fe14 	bl	3750 <z_impl_z_log_msg_static_create>
    7b28:	46a5      	mov	sp, r4
}
    7b2a:	f06f 0015 	mvn.w	r0, #21
    7b2e:	46bd      	mov	sp, r7
    7b30:	bdb0      	pop	{r4, r5, r7, pc}
    7b32:	bf00      	nop
    7b34:	200002dc 	.word	0x200002dc
    7b38:	00012bba 	.word	0x00012bba

00007b3c <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    7b3c:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    7b3e:	2201      	movs	r2, #1
    7b40:	4611      	mov	r1, r2
    7b42:	4806      	ldr	r0, [pc, #24]	; (7b5c <nrf_flash_init+0x20>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    7b44:	4c06      	ldr	r4, [pc, #24]	; (7b60 <nrf_flash_init+0x24>)
    7b46:	f007 fe4b 	bl	f7e0 <z_impl_k_sem_init>
    7b4a:	f007 fd42 	bl	f5d2 <nrfx_nvmc_flash_page_count_get>
    7b4e:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    7b50:	f007 fd3b 	bl	f5ca <nrfx_nvmc_flash_page_size_get>
    7b54:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    7b56:	2000      	movs	r0, #0
    7b58:	bd10      	pop	{r4, pc}
    7b5a:	bf00      	nop
    7b5c:	20001328 	.word	0x20001328
    7b60:	20001320 	.word	0x20001320

00007b64 <flash_nrf_erase>:
{
    7b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b68:	af00      	add	r7, sp, #0
    7b6a:	460e      	mov	r6, r1
    7b6c:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    7b6e:	f007 fd2c 	bl	f5ca <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    7b72:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    7b74:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
    7b76:	4630      	mov	r0, r6
    7b78:	f007 fa82 	bl	f080 <is_regular_addr_valid>
    7b7c:	4603      	mov	r3, r0
    7b7e:	2800      	cmp	r0, #0
    7b80:	d03b      	beq.n	7bfa <flash_nrf_erase+0x96>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    7b82:	fbb6 f3f5 	udiv	r3, r6, r5
    7b86:	fb05 6313 	mls	r3, r5, r3, r6
    7b8a:	46b0      	mov	r8, r6
    7b8c:	b923      	cbnz	r3, 7b98 <flash_nrf_erase+0x34>
    7b8e:	fbb4 f3f5 	udiv	r3, r4, r5
    7b92:	fb05 4313 	mls	r3, r5, r3, r4
    7b96:	b1c3      	cbz	r3, 7bca <flash_nrf_erase+0x66>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    7b98:	481f      	ldr	r0, [pc, #124]	; (7c18 <flash_nrf_erase+0xb4>)
    7b9a:	6803      	ldr	r3, [r0, #0]
    7b9c:	0759      	lsls	r1, r3, #29
    7b9e:	d00f      	beq.n	7bc0 <flash_nrf_erase+0x5c>
    7ba0:	466d      	mov	r5, sp
    7ba2:	b088      	sub	sp, #32
    7ba4:	466a      	mov	r2, sp
    7ba6:	4b1d      	ldr	r3, [pc, #116]	; (7c1c <flash_nrf_erase+0xb8>)
    7ba8:	61d4      	str	r4, [r2, #28]
    7baa:	e9c2 3605 	strd	r3, r6, [r2, #20]
    7bae:	2304      	movs	r3, #4
    7bb0:	f842 3f10 	str.w	r3, [r2, #16]!
    7bb4:	2300      	movs	r3, #0
    7bb6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    7bba:	f7fb fdc9 	bl	3750 <z_impl_z_log_msg_static_create>
    7bbe:	46ad      	mov	sp, r5
			return -EINVAL;
    7bc0:	f06f 0015 	mvn.w	r0, #21
}
    7bc4:	46bd      	mov	sp, r7
    7bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!n_pages) {
    7bca:	42a5      	cmp	r5, r4
    7bcc:	d901      	bls.n	7bd2 <flash_nrf_erase+0x6e>
			return 0;
    7bce:	2000      	movs	r0, #0
    7bd0:	e7f8      	b.n	7bc4 <flash_nrf_erase+0x60>
	return z_impl_k_sem_take(sem, timeout);
    7bd2:	f04f 32ff 	mov.w	r2, #4294967295
    7bd6:	f04f 33ff 	mov.w	r3, #4294967295
    7bda:	4811      	ldr	r0, [pc, #68]	; (7c20 <flash_nrf_erase+0xbc>)
    7bdc:	f003 faf2 	bl	b1c4 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    7be0:	f007 fcf3 	bl	f5ca <nrfx_nvmc_flash_page_size_get>
    7be4:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    7be6:	4640      	mov	r0, r8
    7be8:	f002 fbf6 	bl	a3d8 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
    7bec:	1b64      	subs	r4, r4, r5
    7bee:	44a8      	add	r8, r5
    7bf0:	d1f9      	bne.n	7be6 <flash_nrf_erase+0x82>
	z_impl_k_sem_give(sem);
    7bf2:	480b      	ldr	r0, [pc, #44]	; (7c20 <flash_nrf_erase+0xbc>)
    7bf4:	f003 fac0 	bl	b178 <z_impl_k_sem_give>
}
    7bf8:	e7e9      	b.n	7bce <flash_nrf_erase+0x6a>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    7bfa:	4807      	ldr	r0, [pc, #28]	; (7c18 <flash_nrf_erase+0xb4>)
    7bfc:	6802      	ldr	r2, [r0, #0]
    7bfe:	0752      	lsls	r2, r2, #29
    7c00:	d0de      	beq.n	7bc0 <flash_nrf_erase+0x5c>
    7c02:	466d      	mov	r5, sp
    7c04:	b088      	sub	sp, #32
    7c06:	466a      	mov	r2, sp
    7c08:	4906      	ldr	r1, [pc, #24]	; (7c24 <flash_nrf_erase+0xc0>)
    7c0a:	61d4      	str	r4, [r2, #28]
    7c0c:	e9c2 1605 	strd	r1, r6, [r2, #20]
    7c10:	2104      	movs	r1, #4
    7c12:	f842 1f10 	str.w	r1, [r2, #16]!
    7c16:	e7ce      	b.n	7bb6 <flash_nrf_erase+0x52>
    7c18:	200002dc 	.word	0x200002dc
    7c1c:	00012bd7 	.word	0x00012bd7
    7c20:	20001328 	.word	0x20001328
    7c24:	00012bba 	.word	0x00012bba

00007c28 <flash_nrf_write>:
{
    7c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7c2c:	460e      	mov	r6, r1
    7c2e:	af00      	add	r7, sp, #0
	if (is_regular_addr_valid(addr, len)) {
    7c30:	4619      	mov	r1, r3
    7c32:	4630      	mov	r0, r6
{
    7c34:	461d      	mov	r5, r3
    7c36:	4690      	mov	r8, r2
	if (is_regular_addr_valid(addr, len)) {
    7c38:	f007 fa22 	bl	f080 <is_regular_addr_valid>
    7c3c:	4603      	mov	r3, r0
    7c3e:	b9b8      	cbnz	r0, 7c70 <flash_nrf_write+0x48>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    7c40:	4825      	ldr	r0, [pc, #148]	; (7cd8 <flash_nrf_write+0xb0>)
    7c42:	6802      	ldr	r2, [r0, #0]
    7c44:	0751      	lsls	r1, r2, #29
    7c46:	d00e      	beq.n	7c66 <flash_nrf_write+0x3e>
    7c48:	466c      	mov	r4, sp
    7c4a:	b088      	sub	sp, #32
    7c4c:	466a      	mov	r2, sp
    7c4e:	4923      	ldr	r1, [pc, #140]	; (7cdc <flash_nrf_write+0xb4>)
    7c50:	61d5      	str	r5, [r2, #28]
    7c52:	e9c2 1605 	strd	r1, r6, [r2, #20]
    7c56:	2104      	movs	r1, #4
    7c58:	f842 1f10 	str.w	r1, [r2, #16]!
    7c5c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    7c60:	f7fb fd76 	bl	3750 <z_impl_z_log_msg_static_create>
    7c64:	46a5      	mov	sp, r4
		return -EINVAL;
    7c66:	f06f 0015 	mvn.w	r0, #21
}
    7c6a:	46bd      	mov	sp, r7
    7c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    7c70:	ea45 0406 	orr.w	r4, r5, r6
    7c74:	f014 0403 	ands.w	r4, r4, #3
    7c78:	d00f      	beq.n	7c9a <flash_nrf_write+0x72>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    7c7a:	4817      	ldr	r0, [pc, #92]	; (7cd8 <flash_nrf_write+0xb0>)
    7c7c:	6803      	ldr	r3, [r0, #0]
    7c7e:	075a      	lsls	r2, r3, #29
    7c80:	d0f1      	beq.n	7c66 <flash_nrf_write+0x3e>
    7c82:	466c      	mov	r4, sp
    7c84:	b088      	sub	sp, #32
    7c86:	466a      	mov	r2, sp
    7c88:	4b15      	ldr	r3, [pc, #84]	; (7ce0 <flash_nrf_write+0xb8>)
    7c8a:	61d5      	str	r5, [r2, #28]
    7c8c:	e9c2 3605 	strd	r3, r6, [r2, #20]
    7c90:	2304      	movs	r3, #4
    7c92:	f842 3f10 	str.w	r3, [r2, #16]!
    7c96:	2300      	movs	r3, #0
    7c98:	e7e0      	b.n	7c5c <flash_nrf_write+0x34>
	if (!len) {
    7c9a:	b19d      	cbz	r5, 7cc4 <flash_nrf_write+0x9c>
	return z_impl_k_sem_take(sem, timeout);
    7c9c:	4811      	ldr	r0, [pc, #68]	; (7ce4 <flash_nrf_write+0xbc>)
    7c9e:	f04f 32ff 	mov.w	r2, #4294967295
    7ca2:	f04f 33ff 	mov.w	r3, #4294967295
    7ca6:	f003 fa8d 	bl	b1c4 <z_impl_k_sem_take>
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
    7caa:	192b      	adds	r3, r5, r4
    7cac:	2b03      	cmp	r3, #3
    7cae:	eba6 0004 	sub.w	r0, r6, r4
    7cb2:	d809      	bhi.n	7cc8 <flash_nrf_write+0xa0>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    7cb4:	4a0c      	ldr	r2, [pc, #48]	; (7ce8 <flash_nrf_write+0xc0>)
    7cb6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    7cba:	07db      	lsls	r3, r3, #31
    7cbc:	d5fb      	bpl.n	7cb6 <flash_nrf_write+0x8e>
	z_impl_k_sem_give(sem);
    7cbe:	4809      	ldr	r0, [pc, #36]	; (7ce4 <flash_nrf_write+0xbc>)
    7cc0:	f003 fa5a 	bl	b178 <z_impl_k_sem_give>
	return ret;
    7cc4:	2000      	movs	r0, #0
    7cc6:	e7d0      	b.n	7c6a <flash_nrf_write+0x42>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
    7cc8:	eba8 0304 	sub.w	r3, r8, r4
    7ccc:	3c04      	subs	r4, #4
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    7cce:	6819      	ldr	r1, [r3, #0]
    7cd0:	f002 fba2 	bl	a418 <nrfx_nvmc_word_write>
}
    7cd4:	e7e9      	b.n	7caa <flash_nrf_write+0x82>
    7cd6:	bf00      	nop
    7cd8:	200002dc 	.word	0x200002dc
    7cdc:	00012bba 	.word	0x00012bba
    7ce0:	00012bf6 	.word	0x00012bf6
    7ce4:	20001328 	.word	0x20001328
    7ce8:	4001e000 	.word	0x4001e000

00007cec <device_name_get>:
static void device_name_get(size_t idx, struct shell_static_entry *entry);

SHELL_DYNAMIC_CMD_CREATE(dsub_device_name, device_name_get);

static void device_name_get(size_t idx, struct shell_static_entry *entry)
{
    7cec:	b510      	push	{r4, lr}
    7cee:	460c      	mov	r4, r1
	const struct device *dev = shell_device_lookup(idx, NULL);
    7cf0:	2100      	movs	r1, #0
    7cf2:	f006 f85d 	bl	ddb0 <shell_device_lookup>

	entry->syntax = (dev != NULL) ? dev->name : NULL;
    7cf6:	b100      	cbz	r0, 7cfa <device_name_get+0xe>
    7cf8:	6800      	ldr	r0, [r0, #0]
    7cfa:	6020      	str	r0, [r4, #0]
	entry->handler = NULL;
    7cfc:	2300      	movs	r3, #0
    7cfe:	60e3      	str	r3, [r4, #12]
	entry->help  = NULL;
    7d00:	6063      	str	r3, [r4, #4]
	entry->subcmd = &dsub_device_name;
    7d02:	4b01      	ldr	r3, [pc, #4]	; (7d08 <device_name_get+0x1c>)
    7d04:	60a3      	str	r3, [r4, #8]
}
    7d06:	bd10      	pop	{r4, pc}
    7d08:	000101d0 	.word	0x000101d0

00007d0c <cmd_flash>:

	SHELL_SUBCMD_SET_END
);

static int cmd_flash(const struct shell *sh, size_t argc, char **argv)
{
    7d0c:	b507      	push	{r0, r1, r2, lr}
	shell_error(sh, "%s:unknown parameter: %s", argv[0], argv[1]);
    7d0e:	6853      	ldr	r3, [r2, #4]
    7d10:	9300      	str	r3, [sp, #0]
    7d12:	6813      	ldr	r3, [r2, #0]
    7d14:	4a04      	ldr	r2, [pc, #16]	; (7d28 <cmd_flash+0x1c>)
    7d16:	2101      	movs	r1, #1
    7d18:	f005 fe0f 	bl	d93a <shell_fprintf>
	return -EINVAL;
}
    7d1c:	f06f 0015 	mvn.w	r0, #21
    7d20:	b003      	add	sp, #12
    7d22:	f85d fb04 	ldr.w	pc, [sp], #4
    7d26:	bf00      	nop
    7d28:	00012c38 	.word	0x00012c38

00007d2c <parse_helper>:
{
    7d2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    7d30:	461f      	mov	r7, r3
	*addr = strtoul((*argv)[1], &endptr, 16);
    7d32:	6813      	ldr	r3, [r2, #0]
{
    7d34:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    7d38:	4606      	mov	r6, r0
    7d3a:	460d      	mov	r5, r1
	*addr = strtoul((*argv)[1], &endptr, 16);
    7d3c:	6858      	ldr	r0, [r3, #4]
{
    7d3e:	4614      	mov	r4, r2
	*addr = strtoul((*argv)[1], &endptr, 16);
    7d40:	a901      	add	r1, sp, #4
    7d42:	2210      	movs	r2, #16
    7d44:	f006 fe91 	bl	ea6a <strtoul>
	if (*endptr != '\0') {
    7d48:	9b01      	ldr	r3, [sp, #4]
	*addr = strtoul((*argv)[1], &endptr, 16);
    7d4a:	f8c8 0000 	str.w	r0, [r8]
	if (*endptr != '\0') {
    7d4e:	781b      	ldrb	r3, [r3, #0]
    7d50:	b17b      	cbz	r3, 7d72 <parse_helper+0x46>
		*flash_dev = device_get_binding((*argv)[1]);
    7d52:	6823      	ldr	r3, [r4, #0]
    7d54:	6858      	ldr	r0, [r3, #4]
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    7d56:	f002 fe05 	bl	a964 <z_impl_device_get_binding>
    7d5a:	6038      	str	r0, [r7, #0]
		if (!*flash_dev) {
    7d5c:	b998      	cbnz	r0, 7d86 <parse_helper+0x5a>
			shell_error(sh, "Given flash device was not found");
    7d5e:	4a19      	ldr	r2, [pc, #100]	; (7dc4 <parse_helper+0x98>)
			shell_error(sh, "Default flash driver not ready");
    7d60:	4630      	mov	r0, r6
    7d62:	2101      	movs	r1, #1
    7d64:	f005 fde9 	bl	d93a <shell_fprintf>
			return -ENODEV;
    7d68:	f06f 0012 	mvn.w	r0, #18
}
    7d6c:	b003      	add	sp, #12
    7d6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7d72:	f8df 9054 	ldr.w	r9, [pc, #84]	; 7dc8 <parse_helper+0x9c>
    7d76:	4648      	mov	r0, r9
    7d78:	f007 fcda 	bl	f730 <z_device_is_ready>
		if (!device_is_ready(zephyr_flash_controller)) {
    7d7c:	b908      	cbnz	r0, 7d82 <parse_helper+0x56>
			shell_error(sh, "Default flash driver not ready");
    7d7e:	4a13      	ldr	r2, [pc, #76]	; (7dcc <parse_helper+0xa0>)
    7d80:	e7ee      	b.n	7d60 <parse_helper+0x34>
		*flash_dev = zephyr_flash_controller;
    7d82:	f8c7 9000 	str.w	r9, [r7]
	if (*endptr == '\0') {
    7d86:	9b01      	ldr	r3, [sp, #4]
    7d88:	781b      	ldrb	r3, [r3, #0]
    7d8a:	b90b      	cbnz	r3, 7d90 <parse_helper+0x64>
	return 0;
    7d8c:	2000      	movs	r0, #0
    7d8e:	e7ed      	b.n	7d6c <parse_helper+0x40>
	if (*argc < 3) {
    7d90:	682b      	ldr	r3, [r5, #0]
    7d92:	2b02      	cmp	r3, #2
    7d94:	d807      	bhi.n	7da6 <parse_helper+0x7a>
		shell_error(sh, "Missing address.");
    7d96:	4630      	mov	r0, r6
    7d98:	4a0d      	ldr	r2, [pc, #52]	; (7dd0 <parse_helper+0xa4>)
    7d9a:	2101      	movs	r1, #1
    7d9c:	f005 fdcd 	bl	d93a <shell_fprintf>
		return -EINVAL;
    7da0:	f06f 0015 	mvn.w	r0, #21
    7da4:	e7e2      	b.n	7d6c <parse_helper+0x40>
	*addr = strtoul((*argv)[2], &endptr, 16);
    7da6:	6823      	ldr	r3, [r4, #0]
    7da8:	2210      	movs	r2, #16
    7daa:	6898      	ldr	r0, [r3, #8]
    7dac:	a901      	add	r1, sp, #4
    7dae:	f006 fe5c 	bl	ea6a <strtoul>
    7db2:	f8c8 0000 	str.w	r0, [r8]
	(*argc)--;
    7db6:	682b      	ldr	r3, [r5, #0]
    7db8:	3b01      	subs	r3, #1
    7dba:	602b      	str	r3, [r5, #0]
	(*argv)++;
    7dbc:	6823      	ldr	r3, [r4, #0]
    7dbe:	3304      	adds	r3, #4
    7dc0:	6023      	str	r3, [r4, #0]
	return 0;
    7dc2:	e7e3      	b.n	7d8c <parse_helper+0x60>
    7dc4:	00012c52 	.word	0x00012c52
    7dc8:	0000fea4 	.word	0x0000fea4
    7dcc:	00012c74 	.word	0x00012c74
    7dd0:	00012c94 	.word	0x00012c94

00007dd4 <cmd_erase>:
{
    7dd4:	b530      	push	{r4, r5, lr}
    7dd6:	b08b      	sub	sp, #44	; 0x2c
	result = parse_helper(sh, &argc, &argv, &flash_dev, &page_addr);
    7dd8:	ab06      	add	r3, sp, #24
{
    7dda:	e9cd 2102 	strd	r2, r1, [sp, #8]
	result = parse_helper(sh, &argc, &argv, &flash_dev, &page_addr);
    7dde:	9300      	str	r3, [sp, #0]
    7de0:	aa02      	add	r2, sp, #8
    7de2:	ab05      	add	r3, sp, #20
    7de4:	a903      	add	r1, sp, #12
{
    7de6:	4605      	mov	r5, r0
	result = parse_helper(sh, &argc, &argv, &flash_dev, &page_addr);
    7de8:	f7ff ffa0 	bl	7d2c <parse_helper>
	if (result) {
    7dec:	4604      	mov	r4, r0
    7dee:	bb28      	cbnz	r0, 7e3c <cmd_erase+0x68>
	if (argc > 2) {
    7df0:	9b03      	ldr	r3, [sp, #12]
    7df2:	2b02      	cmp	r3, #2
		result = flash_get_page_info_by_offs(flash_dev, page_addr,
    7df4:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
	if (argc > 2) {
    7df8:	d914      	bls.n	7e24 <cmd_erase+0x50>
		size = strtoul(argv[2], NULL, 16);
    7dfa:	9b02      	ldr	r3, [sp, #8]
    7dfc:	2210      	movs	r2, #16
    7dfe:	6898      	ldr	r0, [r3, #8]
    7e00:	4621      	mov	r1, r4
    7e02:	f006 fe32 	bl	ea6a <strtoul>
    7e06:	4602      	mov	r2, r0
	result = flash_erase(flash_dev, page_addr, size);
    7e08:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
	rc = api->erase(dev, offset, size);
    7e0c:	6883      	ldr	r3, [r0, #8]
    7e0e:	689b      	ldr	r3, [r3, #8]
    7e10:	4798      	blx	r3
	if (result) {
    7e12:	4604      	mov	r4, r0
    7e14:	b1b8      	cbz	r0, 7e46 <cmd_erase+0x72>
		shell_error(sh, "Erase Failed, code %d.", result);
    7e16:	4603      	mov	r3, r0
    7e18:	4a0e      	ldr	r2, [pc, #56]	; (7e54 <cmd_erase+0x80>)
    7e1a:	2101      	movs	r1, #1
    7e1c:	4628      	mov	r0, r5
    7e1e:	f005 fd8c 	bl	d93a <shell_fprintf>
    7e22:	e00b      	b.n	7e3c <cmd_erase+0x68>
    7e24:	aa07      	add	r2, sp, #28
    7e26:	f007 f984 	bl	f132 <z_impl_flash_get_page_info_by_offs>
		if (result != 0) {
    7e2a:	4603      	mov	r3, r0
    7e2c:	b148      	cbz	r0, 7e42 <cmd_erase+0x6e>
			shell_error(sh, "Could not determine page size, "
    7e2e:	4a0a      	ldr	r2, [pc, #40]	; (7e58 <cmd_erase+0x84>)
    7e30:	2101      	movs	r1, #1
    7e32:	4628      	mov	r0, r5
    7e34:	f005 fd81 	bl	d93a <shell_fprintf>
			return -EINVAL;
    7e38:	f06f 0415 	mvn.w	r4, #21
}
    7e3c:	4620      	mov	r0, r4
    7e3e:	b00b      	add	sp, #44	; 0x2c
    7e40:	bd30      	pop	{r4, r5, pc}
		size = info.size;
    7e42:	9a08      	ldr	r2, [sp, #32]
    7e44:	e7e0      	b.n	7e08 <cmd_erase+0x34>
		shell_print(sh, "Erase success.");
    7e46:	4a05      	ldr	r2, [pc, #20]	; (7e5c <cmd_erase+0x88>)
    7e48:	2108      	movs	r1, #8
    7e4a:	4628      	mov	r0, r5
    7e4c:	f005 fd75 	bl	d93a <shell_fprintf>
    7e50:	e7f4      	b.n	7e3c <cmd_erase+0x68>
    7e52:	bf00      	nop
    7e54:	00012ccf 	.word	0x00012ccf
    7e58:	00012ca6 	.word	0x00012ca6
    7e5c:	00012ce7 	.word	0x00012ce7

00007e60 <cmd_write>:
{
    7e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7e64:	b0aa      	sub	sp, #168	; 0xa8
	ret = parse_helper(sh, &argc, &argv, &flash_dev, &w_addr);
    7e66:	ab05      	add	r3, sp, #20
{
    7e68:	e9cd 2102 	strd	r2, r1, [sp, #8]
	ret = parse_helper(sh, &argc, &argv, &flash_dev, &w_addr);
    7e6c:	9300      	str	r3, [sp, #0]
    7e6e:	aa02      	add	r2, sp, #8
    7e70:	ab04      	add	r3, sp, #16
    7e72:	a903      	add	r1, sp, #12
{
    7e74:	4605      	mov	r5, r0
	ret = parse_helper(sh, &argc, &argv, &flash_dev, &w_addr);
    7e76:	f7ff ff59 	bl	7d2c <parse_helper>
	if (ret) {
    7e7a:	4604      	mov	r4, r0
    7e7c:	b958      	cbnz	r0, 7e96 <cmd_write+0x36>
	if (argc <= 2) {
    7e7e:	f8dd a00c 	ldr.w	sl, [sp, #12]
    7e82:	f1ba 0f02 	cmp.w	sl, #2
    7e86:	d80a      	bhi.n	7e9e <cmd_write+0x3e>
		shell_error(sh, "Missing data to be written.");
    7e88:	4a29      	ldr	r2, [pc, #164]	; (7f30 <cmd_write+0xd0>)
    7e8a:	2101      	movs	r1, #1
    7e8c:	4628      	mov	r0, r5
    7e8e:	f005 fd54 	bl	d93a <shell_fprintf>
		return -EINVAL;
    7e92:	f06f 0415 	mvn.w	r4, #21
}
    7e96:	4620      	mov	r0, r4
    7e98:	b02a      	add	sp, #168	; 0xa8
    7e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7e9e:	f10d 0960 	add.w	r9, sp, #96	; 0x60
    7ea2:	f10d 0818 	add.w	r8, sp, #24
	for (int i = 2; i < argc; i++) {
    7ea6:	2402      	movs	r4, #2
    7ea8:	464e      	mov	r6, r9
    7eaa:	4647      	mov	r7, r8
		buf_array[j] = strtoul(argv[i], NULL, 16);
    7eac:	9b02      	ldr	r3, [sp, #8]
    7eae:	2210      	movs	r2, #16
    7eb0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    7eb4:	2100      	movs	r1, #0
    7eb6:	f006 fdd8 	bl	ea6a <strtoul>
	for (int i = 2; i < argc; i++) {
    7eba:	3401      	adds	r4, #1
		buf_array[j] = strtoul(argv[i], NULL, 16);
    7ebc:	f849 0b04 	str.w	r0, [r9], #4
	for (int i = 2; i < argc; i++) {
    7ec0:	4554      	cmp	r4, sl
		check_array[j] = ~buf_array[j];
    7ec2:	ea6f 0000 	mvn.w	r0, r0
    7ec6:	f848 0b04 	str.w	r0, [r8], #4
	for (int i = 2; i < argc; i++) {
    7eca:	d1ef      	bne.n	7eac <cmd_write+0x4c>
	if (flash_write(flash_dev, w_addr, buf_array, op_size) != 0) {
    7ecc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
		op_size += sizeof(buf_array[0]);
    7ed0:	3c02      	subs	r4, #2
    7ed2:	00a4      	lsls	r4, r4, #2
	if (flash_write(flash_dev, w_addr, buf_array, op_size) != 0) {
    7ed4:	4623      	mov	r3, r4
    7ed6:	4632      	mov	r2, r6
    7ed8:	4649      	mov	r1, r9
    7eda:	4640      	mov	r0, r8
    7edc:	f007 f933 	bl	f146 <flash_write>
    7ee0:	b110      	cbz	r0, 7ee8 <cmd_write+0x88>
		shell_error(sh, "Write internal ERROR!");
    7ee2:	4a14      	ldr	r2, [pc, #80]	; (7f34 <cmd_write+0xd4>)
		shell_error(sh, "Verification ERROR!");
    7ee4:	2101      	movs	r1, #1
    7ee6:	e00e      	b.n	7f06 <cmd_write+0xa6>
	shell_print(sh, "Write OK.");
    7ee8:	4a13      	ldr	r2, [pc, #76]	; (7f38 <cmd_write+0xd8>)
    7eea:	2108      	movs	r1, #8
    7eec:	4628      	mov	r0, r5
    7eee:	f005 fd24 	bl	d93a <shell_fprintf>
	if (flash_read(flash_dev, w_addr, check_array, op_size) < 0) {
    7ef2:	4623      	mov	r3, r4
    7ef4:	463a      	mov	r2, r7
    7ef6:	4649      	mov	r1, r9
    7ef8:	4640      	mov	r0, r8
    7efa:	f007 f91e 	bl	f13a <flash_read>
    7efe:	2800      	cmp	r0, #0
    7f00:	da07      	bge.n	7f12 <cmd_write+0xb2>
		shell_print(sh, "Verification read ERROR!");
    7f02:	4a0e      	ldr	r2, [pc, #56]	; (7f3c <cmd_write+0xdc>)
    7f04:	2108      	movs	r1, #8
    7f06:	4628      	mov	r0, r5
    7f08:	f005 fd17 	bl	d93a <shell_fprintf>
		return -EIO;
    7f0c:	f06f 0404 	mvn.w	r4, #4
    7f10:	e7c1      	b.n	7e96 <cmd_write+0x36>
	if (memcmp(buf_array, check_array, op_size) == 0) {
    7f12:	4622      	mov	r2, r4
    7f14:	4639      	mov	r1, r7
    7f16:	4630      	mov	r0, r6
    7f18:	f006 fe9a 	bl	ec50 <memcmp>
    7f1c:	4604      	mov	r4, r0
    7f1e:	b928      	cbnz	r0, 7f2c <cmd_write+0xcc>
		shell_print(sh, "Verified.");
    7f20:	4a07      	ldr	r2, [pc, #28]	; (7f40 <cmd_write+0xe0>)
    7f22:	2108      	movs	r1, #8
    7f24:	4628      	mov	r0, r5
    7f26:	f005 fd08 	bl	d93a <shell_fprintf>
	return 0;
    7f2a:	e7b4      	b.n	7e96 <cmd_write+0x36>
		shell_error(sh, "Verification ERROR!");
    7f2c:	4a05      	ldr	r2, [pc, #20]	; (7f44 <cmd_write+0xe4>)
    7f2e:	e7d9      	b.n	7ee4 <cmd_write+0x84>
    7f30:	00012cf7 	.word	0x00012cf7
    7f34:	00012d14 	.word	0x00012d14
    7f38:	00012d2b 	.word	0x00012d2b
    7f3c:	00012d36 	.word	0x00012d36
    7f40:	00012d50 	.word	0x00012d50
    7f44:	00012d5b 	.word	0x00012d5b

00007f48 <cmd_read>:
{
    7f48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7f4c:	b08b      	sub	sp, #44	; 0x2c
	ret = parse_helper(sh, &argc, &argv, &flash_dev, &addr);
    7f4e:	ab05      	add	r3, sp, #20
{
    7f50:	e9cd 2102 	strd	r2, r1, [sp, #8]
	ret = parse_helper(sh, &argc, &argv, &flash_dev, &addr);
    7f54:	9300      	str	r3, [sp, #0]
    7f56:	aa02      	add	r2, sp, #8
    7f58:	ab04      	add	r3, sp, #16
    7f5a:	a903      	add	r1, sp, #12
{
    7f5c:	4606      	mov	r6, r0
	ret = parse_helper(sh, &argc, &argv, &flash_dev, &addr);
    7f5e:	f7ff fee5 	bl	7d2c <parse_helper>
	if (ret) {
    7f62:	4604      	mov	r4, r0
    7f64:	bb50      	cbnz	r0, 7fbc <cmd_read+0x74>
	if (argc > 2) {
    7f66:	9b03      	ldr	r3, [sp, #12]
    7f68:	2b02      	cmp	r3, #2
    7f6a:	d910      	bls.n	7f8e <cmd_read+0x46>
		cnt = strtoul(argv[2], NULL, 16);
    7f6c:	9b02      	ldr	r3, [sp, #8]
    7f6e:	4601      	mov	r1, r0
    7f70:	2210      	movs	r2, #16
    7f72:	6898      	ldr	r0, [r3, #8]
    7f74:	f006 fd79 	bl	ea6a <strtoul>
    7f78:	4607      	mov	r7, r0
	for (upto = 0; upto < cnt; upto += todo) {
    7f7a:	f04f 0900 	mov.w	r9, #0
    7f7e:	45b9      	cmp	r9, r7
    7f80:	db07      	blt.n	7f92 <cmd_read+0x4a>
	shell_print(sh, "");
    7f82:	4a16      	ldr	r2, [pc, #88]	; (7fdc <cmd_read+0x94>)
    7f84:	2108      	movs	r1, #8
    7f86:	4630      	mov	r0, r6
    7f88:	f005 fcd7 	bl	d93a <shell_fprintf>
	return 0;
    7f8c:	e016      	b.n	7fbc <cmd_read+0x74>
		cnt = 1;
    7f8e:	2701      	movs	r7, #1
    7f90:	e7f3      	b.n	7f7a <cmd_read+0x32>
		todo = MIN(cnt - upto, SHELL_HEXDUMP_BYTES_IN_LINE);
    7f92:	eba7 0509 	sub.w	r5, r7, r9
    7f96:	2d10      	cmp	r5, #16
		ret = flash_read(flash_dev, addr, data, todo);
    7f98:	f8dd 8014 	ldr.w	r8, [sp, #20]
    7f9c:	9804      	ldr	r0, [sp, #16]
		todo = MIN(cnt - upto, SHELL_HEXDUMP_BYTES_IN_LINE);
    7f9e:	bfa8      	it	ge
    7fa0:	2510      	movge	r5, #16
		ret = flash_read(flash_dev, addr, data, todo);
    7fa2:	462b      	mov	r3, r5
    7fa4:	aa06      	add	r2, sp, #24
    7fa6:	4641      	mov	r1, r8
    7fa8:	f007 f8c7 	bl	f13a <flash_read>
		if (ret != 0) {
    7fac:	b150      	cbz	r0, 7fc4 <cmd_read+0x7c>
			shell_error(sh, "Read ERROR!");
    7fae:	4a0c      	ldr	r2, [pc, #48]	; (7fe0 <cmd_read+0x98>)
    7fb0:	2101      	movs	r1, #1
    7fb2:	4630      	mov	r0, r6
    7fb4:	f005 fcc1 	bl	d93a <shell_fprintf>
			return -EIO;
    7fb8:	f06f 0404 	mvn.w	r4, #4
}
    7fbc:	4620      	mov	r0, r4
    7fbe:	b00b      	add	sp, #44	; 0x2c
    7fc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		shell_hexdump_line(sh, addr, data, todo);
    7fc4:	4641      	mov	r1, r8
    7fc6:	462b      	mov	r3, r5
    7fc8:	aa06      	add	r2, sp, #24
    7fca:	4630      	mov	r0, r6
    7fcc:	f7fd ff74 	bl	5eb8 <shell_hexdump_line>
		addr += todo;
    7fd0:	eb08 0105 	add.w	r1, r8, r5
    7fd4:	9105      	str	r1, [sp, #20]
	for (upto = 0; upto < cnt; upto += todo) {
    7fd6:	44a9      	add	r9, r5
    7fd8:	e7d1      	b.n	7f7e <cmd_read+0x36>
    7fda:	bf00      	nop
    7fdc:	0001188e 	.word	0x0001188e
    7fe0:	00012d70 	.word	0x00012d70

00007fe4 <cmd_page_info>:
{
    7fe4:	b570      	push	{r4, r5, r6, lr}
    7fe6:	b08c      	sub	sp, #48	; 0x30
	result = parse_helper(sh, &argc, &argv, &flash_dev, &addr);
    7fe8:	ab08      	add	r3, sp, #32
{
    7fea:	e9cd 2104 	strd	r2, r1, [sp, #16]
	result = parse_helper(sh, &argc, &argv, &flash_dev, &addr);
    7fee:	9300      	str	r3, [sp, #0]
    7ff0:	aa04      	add	r2, sp, #16
    7ff2:	ab07      	add	r3, sp, #28
    7ff4:	a905      	add	r1, sp, #20
{
    7ff6:	4605      	mov	r5, r0
	result = parse_helper(sh, &argc, &argv, &flash_dev, &addr);
    7ff8:	f7ff fe98 	bl	7d2c <parse_helper>
	if (result) {
    7ffc:	4604      	mov	r4, r0
    7ffe:	b978      	cbnz	r0, 8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>
	result = flash_get_page_info_by_offs(flash_dev, addr, &info);
    8000:	e9dd 0607 	ldrd	r0, r6, [sp, #28]
    8004:	aa09      	add	r2, sp, #36	; 0x24
    8006:	4631      	mov	r1, r6
    8008:	f007 f893 	bl	f132 <z_impl_flash_get_page_info_by_offs>
	if (result != 0) {
    800c:	4604      	mov	r4, r0
    800e:	b150      	cbz	r0, 8026 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26>
		shell_error(sh, "Could not determine page size, error code %d.", result);
    8010:	4603      	mov	r3, r0
    8012:	4a0b      	ldr	r2, [pc, #44]	; (8040 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40>)
    8014:	2101      	movs	r1, #1
    8016:	4628      	mov	r0, r5
    8018:	f005 fc8f 	bl	d93a <shell_fprintf>
		return -EINVAL;
    801c:	f06f 0415 	mvn.w	r4, #21
}
    8020:	4620      	mov	r0, r4
    8022:	b00c      	add	sp, #48	; 0x30
    8024:	bd70      	pop	{r4, r5, r6, pc}
	shell_print(sh, "Page for address 0x%x:\nstart offset: 0x%lx\nsize: %zu\nindex: %d",
    8026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8028:	9302      	str	r3, [sp, #8]
    802a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    802c:	9301      	str	r3, [sp, #4]
    802e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8030:	9300      	str	r3, [sp, #0]
    8032:	4a04      	ldr	r2, [pc, #16]	; (8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>)
    8034:	4633      	mov	r3, r6
    8036:	2108      	movs	r1, #8
    8038:	4628      	mov	r0, r5
    803a:	f005 fc7e 	bl	d93a <shell_fprintf>
	return 0;
    803e:	e7ef      	b.n	8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>
    8040:	00012d7d 	.word	0x00012d7d
    8044:	00012dac 	.word	0x00012dac

00008048 <bypass_cb>:
{
    8048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t left_to_read = flash_load_total - flash_load_written - flash_load_boff;
    804c:	4d51      	ldr	r5, [pc, #324]	; (8194 <bypass_cb+0x14c>)
    804e:	4e52      	ldr	r6, [pc, #328]	; (8198 <bypass_cb+0x150>)
    8050:	f8df 9148 	ldr.w	r9, [pc, #328]	; 819c <bypass_cb+0x154>
    8054:	682b      	ldr	r3, [r5, #0]
    8056:	f8d9 7000 	ldr.w	r7, [r9]
		uint32_t buf_copy = MIN(to_copy, flash_load_buf_size - flash_load_boff);
    805a:	f8df a144 	ldr.w	sl, [pc, #324]	; 81a0 <bypass_cb+0x158>
{
    805e:	b085      	sub	sp, #20
    8060:	4604      	mov	r4, r0
    8062:	9102      	str	r1, [sp, #8]
	uint32_t left_to_read = flash_load_total - flash_load_written - flash_load_boff;
    8064:	6831      	ldr	r1, [r6, #0]
    8066:	440b      	add	r3, r1
    8068:	1aff      	subs	r7, r7, r3
	uint32_t to_copy = MIN(len, left_to_read);
    806a:	4297      	cmp	r7, r2
    806c:	bf28      	it	cs
    806e:	4617      	movcs	r7, r2
	uint32_t copied = 0;
    8070:	f04f 0800 	mov.w	r8, #0
	while (copied < to_copy) {
    8074:	45b8      	cmp	r8, r7
    8076:	d312      	bcc.n	809e <bypass_cb+0x56>
	if (flash_load_written < flash_load_total &&
    8078:	682a      	ldr	r2, [r5, #0]
    807a:	f8d9 1000 	ldr.w	r1, [r9]
    807e:	428a      	cmp	r2, r1
    8080:	d352      	bcc.n	8128 <bypass_cb+0xe0>
	in_use = bypass != NULL;
    8082:	4b48      	ldr	r3, [pc, #288]	; (81a4 <bypass_cb+0x15c>)
    8084:	2100      	movs	r1, #0
	shell_set_bypass(sh, bypass);
    8086:	4620      	mov	r0, r4
	in_use = bypass != NULL;
    8088:	7019      	strb	r1, [r3, #0]
	shell_set_bypass(sh, bypass);
    808a:	f005 fc78 	bl	d97e <shell_set_bypass>
		shell_print(sh, "Read all");
    808e:	4a46      	ldr	r2, [pc, #280]	; (81a8 <bypass_cb+0x160>)
    8090:	2108      	movs	r1, #8
    8092:	4620      	mov	r0, r4
}
    8094:	b005      	add	sp, #20
    8096:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		shell_print(sh, "Read all");
    809a:	f005 bc4e 	b.w	d93a <shell_fprintf>
		uint32_t buf_copy = MIN(to_copy, flash_load_buf_size - flash_load_boff);
    809e:	6830      	ldr	r0, [r6, #0]
    80a0:	f8da 3000 	ldr.w	r3, [sl]
    80a4:	eba3 0b00 	sub.w	fp, r3, r0
		memcpy(flash_load_buf + flash_load_boff, recv + copied, buf_copy);
    80a8:	9b02      	ldr	r3, [sp, #8]
		uint32_t buf_copy = MIN(to_copy, flash_load_buf_size - flash_load_boff);
    80aa:	45bb      	cmp	fp, r7
		memcpy(flash_load_buf + flash_load_boff, recv + copied, buf_copy);
    80ac:	eb03 0108 	add.w	r1, r3, r8
    80b0:	4b3e      	ldr	r3, [pc, #248]	; (81ac <bypass_cb+0x164>)
		uint32_t buf_copy = MIN(to_copy, flash_load_buf_size - flash_load_boff);
    80b2:	bf28      	it	cs
    80b4:	46bb      	movcs	fp, r7
		memcpy(flash_load_buf + flash_load_boff, recv + copied, buf_copy);
    80b6:	465a      	mov	r2, fp
    80b8:	4418      	add	r0, r3
    80ba:	f006 fdf0 	bl	ec9e <memcpy>
		flash_load_boff += buf_copy;
    80be:	6833      	ldr	r3, [r6, #0]
		if (flash_load_boff == flash_load_buf_size) {
    80c0:	f8da 2000 	ldr.w	r2, [sl]
		flash_load_boff += buf_copy;
    80c4:	445b      	add	r3, fp
		if (flash_load_boff == flash_load_buf_size) {
    80c6:	4293      	cmp	r3, r2
		flash_load_boff += buf_copy;
    80c8:	6033      	str	r3, [r6, #0]
		copied += buf_copy;
    80ca:	44d8      	add	r8, fp
		if (flash_load_boff == flash_load_buf_size) {
    80cc:	d1d2      	bne.n	8074 <bypass_cb+0x2c>
			uint32_t addr = flash_load_addr + flash_load_written;
    80ce:	4a38      	ldr	r2, [pc, #224]	; (81b0 <bypass_cb+0x168>)
			int rc = flash_write(flash_load_dev, addr, flash_load_buf,
    80d0:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 81b4 <bypass_cb+0x16c>
			uint32_t addr = flash_load_addr + flash_load_written;
    80d4:	6811      	ldr	r1, [r2, #0]
    80d6:	682a      	ldr	r2, [r5, #0]
			int rc = flash_write(flash_load_dev, addr, flash_load_buf,
    80d8:	f8db 0000 	ldr.w	r0, [fp]
			uint32_t addr = flash_load_addr + flash_load_written;
    80dc:	4411      	add	r1, r2
			int rc = flash_write(flash_load_dev, addr, flash_load_buf,
    80de:	4a33      	ldr	r2, [pc, #204]	; (81ac <bypass_cb+0x164>)
    80e0:	9103      	str	r1, [sp, #12]
    80e2:	f007 f830 	bl	f146 <flash_write>
			if (rc != 0) {
    80e6:	9903      	ldr	r1, [sp, #12]
    80e8:	b140      	cbz	r0, 80fc <bypass_cb+0xb4>
				shell_error(sh, "Write to addr %x on dev %p ERROR!",
    80ea:	f8db 3000 	ldr.w	r3, [fp]
    80ee:	9300      	str	r3, [sp, #0]
    80f0:	4a31      	ldr	r2, [pc, #196]	; (81b8 <bypass_cb+0x170>)
    80f2:	460b      	mov	r3, r1
    80f4:	4620      	mov	r0, r4
    80f6:	2101      	movs	r1, #1
    80f8:	f005 fc1f 	bl	d93a <shell_fprintf>
			shell_print(sh, "Written chunk %d", flash_load_chunk);
    80fc:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 81bc <bypass_cb+0x174>
    8100:	4a2f      	ldr	r2, [pc, #188]	; (81c0 <bypass_cb+0x178>)
    8102:	f8db 3000 	ldr.w	r3, [fp]
    8106:	2108      	movs	r1, #8
    8108:	4620      	mov	r0, r4
    810a:	f005 fc16 	bl	d93a <shell_fprintf>
			flash_load_written += flash_load_buf_size;
    810e:	682b      	ldr	r3, [r5, #0]
    8110:	f8da 2000 	ldr.w	r2, [sl]
    8114:	4413      	add	r3, r2
    8116:	602b      	str	r3, [r5, #0]
			flash_load_chunk++;
    8118:	f8db 3000 	ldr.w	r3, [fp]
    811c:	3301      	adds	r3, #1
    811e:	f8cb 3000 	str.w	r3, [fp]
			flash_load_boff = 0;
    8122:	2300      	movs	r3, #0
    8124:	6033      	str	r3, [r6, #0]
    8126:	e7a5      	b.n	8074 <bypass_cb+0x2c>
			flash_load_written + flash_load_boff >= flash_load_total) {
    8128:	6833      	ldr	r3, [r6, #0]
    812a:	18d0      	adds	r0, r2, r3
	if (flash_load_written < flash_load_total &&
    812c:	4281      	cmp	r1, r0
    812e:	d81a      	bhi.n	8166 <bypass_cb+0x11e>
		uint32_t addr = flash_load_addr + flash_load_written;
    8130:	491f      	ldr	r1, [pc, #124]	; (81b0 <bypass_cb+0x168>)
		int rc = flash_write(flash_load_dev, addr, flash_load_buf, flash_load_boff);
    8132:	f8df 8080 	ldr.w	r8, [pc, #128]	; 81b4 <bypass_cb+0x16c>
		uint32_t addr = flash_load_addr + flash_load_written;
    8136:	680f      	ldr	r7, [r1, #0]
		int rc = flash_write(flash_load_dev, addr, flash_load_buf, flash_load_boff);
    8138:	f8d8 0000 	ldr.w	r0, [r8]
		uint32_t addr = flash_load_addr + flash_load_written;
    813c:	4417      	add	r7, r2
		int rc = flash_write(flash_load_dev, addr, flash_load_buf, flash_load_boff);
    813e:	4639      	mov	r1, r7
    8140:	4a1a      	ldr	r2, [pc, #104]	; (81ac <bypass_cb+0x164>)
    8142:	f007 f800 	bl	f146 <flash_write>
		if (rc != 0) {
    8146:	b188      	cbz	r0, 816c <bypass_cb+0x124>
	in_use = bypass != NULL;
    8148:	4b16      	ldr	r3, [pc, #88]	; (81a4 <bypass_cb+0x15c>)
    814a:	2100      	movs	r1, #0
	shell_set_bypass(sh, bypass);
    814c:	4620      	mov	r0, r4
	in_use = bypass != NULL;
    814e:	7019      	strb	r1, [r3, #0]
	shell_set_bypass(sh, bypass);
    8150:	f005 fc15 	bl	d97e <shell_set_bypass>
			shell_error(sh, "Write to addr %x on dev %p ERROR!",
    8154:	f8d8 3000 	ldr.w	r3, [r8]
    8158:	9300      	str	r3, [sp, #0]
    815a:	4a17      	ldr	r2, [pc, #92]	; (81b8 <bypass_cb+0x170>)
    815c:	463b      	mov	r3, r7
    815e:	2101      	movs	r1, #1
    8160:	4620      	mov	r0, r4
    8162:	f005 fbea 	bl	d93a <shell_fprintf>
}
    8166:	b005      	add	sp, #20
    8168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		shell_print(sh, "Written chunk %d", flash_load_chunk);
    816c:	4f13      	ldr	r7, [pc, #76]	; (81bc <bypass_cb+0x174>)
    816e:	4a14      	ldr	r2, [pc, #80]	; (81c0 <bypass_cb+0x178>)
    8170:	683b      	ldr	r3, [r7, #0]
    8172:	2108      	movs	r1, #8
    8174:	4620      	mov	r0, r4
    8176:	f005 fbe0 	bl	d93a <shell_fprintf>
		flash_load_written += flash_load_boff;
    817a:	682b      	ldr	r3, [r5, #0]
    817c:	6832      	ldr	r2, [r6, #0]
    817e:	4413      	add	r3, r2
		flash_load_chunk++;
    8180:	683a      	ldr	r2, [r7, #0]
		flash_load_written += flash_load_boff;
    8182:	602b      	str	r3, [r5, #0]
		flash_load_chunk++;
    8184:	3201      	adds	r2, #1
    8186:	603a      	str	r2, [r7, #0]
	if (flash_load_written >= flash_load_total) {
    8188:	f8d9 2000 	ldr.w	r2, [r9]
    818c:	4293      	cmp	r3, r2
    818e:	d3ea      	bcc.n	8166 <bypass_cb+0x11e>
    8190:	e777      	b.n	8082 <bypass_cb+0x3a>
    8192:	bf00      	nop
    8194:	20002348 	.word	0x20002348
    8198:	20002340 	.word	0x20002340
    819c:	2000234c 	.word	0x2000234c
    81a0:	20002354 	.word	0x20002354
    81a4:	200036f9 	.word	0x200036f9
    81a8:	00012e21 	.word	0x00012e21
    81ac:	200036fa 	.word	0x200036fa
    81b0:	20002350 	.word	0x20002350
    81b4:	20002358 	.word	0x20002358
    81b8:	00012dec 	.word	0x00012dec
    81bc:	20002344 	.word	0x20002344
    81c0:	00012e0f 	.word	0x00012e0f

000081c4 <cmd_load>:
{
    81c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    81c8:	b087      	sub	sp, #28
	result = parse_helper(sh, &argc, &argv, &flash_dev, &addr);
    81ca:	ab05      	add	r3, sp, #20
{
    81cc:	e9cd 2102 	strd	r2, r1, [sp, #8]
	result = parse_helper(sh, &argc, &argv, &flash_dev, &addr);
    81d0:	9300      	str	r3, [sp, #0]
    81d2:	aa02      	add	r2, sp, #8
    81d4:	ab04      	add	r3, sp, #16
    81d6:	a903      	add	r1, sp, #12
{
    81d8:	4604      	mov	r4, r0
	result = parse_helper(sh, &argc, &argv, &flash_dev, &addr);
    81da:	f7ff fda7 	bl	7d2c <parse_helper>
	if (result) {
    81de:	4605      	mov	r5, r0
    81e0:	b9c0      	cbnz	r0, 8214 <cmd_load+0x50>
	size = strtoul(argv[2], NULL, 0);
    81e2:	9b02      	ldr	r3, [sp, #8]
    81e4:	4602      	mov	r2, r0
    81e6:	4601      	mov	r1, r0
    81e8:	6898      	ldr	r0, [r3, #8]
    81ea:	f006 fc3e 	bl	ea6a <strtoul>
	write_block_size = flash_get_write_block_size(flash_dev);
    81ee:	9f04      	ldr	r7, [sp, #16]
	size = strtoul(argv[2], NULL, 0);
    81f0:	4606      	mov	r6, r0
	return api->get_parameters(dev)->write_block_size;
    81f2:	68bb      	ldr	r3, [r7, #8]
    81f4:	4638      	mov	r0, r7
    81f6:	68db      	ldr	r3, [r3, #12]
    81f8:	4798      	blx	r3
    81fa:	6803      	ldr	r3, [r0, #0]
	if (size % write_block_size != 0) {
    81fc:	fbb6 f2f3 	udiv	r2, r6, r3
    8200:	fb03 6212 	mls	r2, r3, r2, r6
    8204:	b152      	cbz	r2, 821c <cmd_load+0x58>
		shell_error(sh, "Size must be %zu bytes aligned", write_block_size);
    8206:	4a2e      	ldr	r2, [pc, #184]	; (82c0 <cmd_load+0xfc>)
    8208:	2101      	movs	r1, #1
    820a:	4620      	mov	r0, r4
    820c:	f005 fb95 	bl	d93a <shell_fprintf>
		return -EIO;
    8210:	f06f 0504 	mvn.w	r5, #4
}
    8214:	4628      	mov	r0, r5
    8216:	b007      	add	sp, #28
    8218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	flash_load_buf_size = FLASH_LOAD_BUF_MAX;
    821c:	f44f 7880 	mov.w	r8, #256	; 0x100
    8220:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 82c4 <cmd_load+0x100>
	if (flash_load_buf_size < write_block_size) {
    8224:	4543      	cmp	r3, r8
	flash_load_buf_size = FLASH_LOAD_BUF_MAX;
    8226:	f8c9 8000 	str.w	r8, [r9]
	if (flash_load_buf_size < write_block_size) {
    822a:	d907      	bls.n	823c <cmd_load+0x78>
		shell_error(sh, "Size of buffer is too small to be aligned to %zu.",
    822c:	4a26      	ldr	r2, [pc, #152]	; (82c8 <cmd_load+0x104>)
    822e:	2101      	movs	r1, #1
    8230:	4620      	mov	r0, r4
    8232:	f005 fb82 	bl	d93a <shell_fprintf>
		return -ENOSPC;
    8236:	f06f 051b 	mvn.w	r5, #27
    823a:	e7eb      	b.n	8214 <cmd_load+0x50>
	if (flash_load_buf_size % write_block_size != 0) {
    823c:	fbb8 f2f3 	udiv	r2, r8, r3
    8240:	435a      	muls	r2, r3
    8242:	f5d2 7280 	rsbs	r2, r2, #256	; 0x100
    8246:	d011      	beq.n	826c <cmd_load+0xa8>
		flash_load_buf_size -= flash_load_buf_size % write_block_size;
    8248:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
    824c:	f8c9 2000 	str.w	r2, [r9]
		shell_warn(sh, "Load buffer was not aligned to %zu.", write_block_size);
    8250:	2103      	movs	r1, #3
    8252:	4a1e      	ldr	r2, [pc, #120]	; (82cc <cmd_load+0x108>)
    8254:	4620      	mov	r0, r4
    8256:	f005 fb70 	bl	d93a <shell_fprintf>
		shell_warn(sh, "Effective load buffer size was set from %d to %d",
    825a:	f8d9 3000 	ldr.w	r3, [r9]
    825e:	9300      	str	r3, [sp, #0]
    8260:	4a1b      	ldr	r2, [pc, #108]	; (82d0 <cmd_load+0x10c>)
    8262:	4643      	mov	r3, r8
    8264:	2103      	movs	r1, #3
    8266:	4620      	mov	r0, r4
    8268:	f005 fb67 	bl	d93a <shell_fprintf>
	flash_load_dev = flash_dev;
    826c:	4b19      	ldr	r3, [pc, #100]	; (82d4 <cmd_load+0x110>)
	flash_load_addr = addr;
    826e:	9a05      	ldr	r2, [sp, #20]
	flash_load_dev = flash_dev;
    8270:	601f      	str	r7, [r3, #0]
	flash_load_addr = addr;
    8272:	4b19      	ldr	r3, [pc, #100]	; (82d8 <cmd_load+0x114>)
	flash_load_written = 0;
    8274:	4919      	ldr	r1, [pc, #100]	; (82dc <cmd_load+0x118>)
	flash_load_addr = addr;
    8276:	601a      	str	r2, [r3, #0]
	flash_load_total = size;
    8278:	4b19      	ldr	r3, [pc, #100]	; (82e0 <cmd_load+0x11c>)
    827a:	601e      	str	r6, [r3, #0]
	flash_load_written = 0;
    827c:	2300      	movs	r3, #0
    827e:	600b      	str	r3, [r1, #0]
	flash_load_boff = 0;
    8280:	4918      	ldr	r1, [pc, #96]	; (82e4 <cmd_load+0x120>)
    8282:	600b      	str	r3, [r1, #0]
	flash_load_chunk = 0;
    8284:	4918      	ldr	r1, [pc, #96]	; (82e8 <cmd_load+0x124>)
	shell_print(sh, "Loading %d bytes starting at address %x", size, addr);
    8286:	4620      	mov	r0, r4
	flash_load_chunk = 0;
    8288:	600b      	str	r3, [r1, #0]
	shell_print(sh, "Loading %d bytes starting at address %x", size, addr);
    828a:	9200      	str	r2, [sp, #0]
    828c:	4633      	mov	r3, r6
    828e:	4a17      	ldr	r2, [pc, #92]	; (82ec <cmd_load+0x128>)
    8290:	2108      	movs	r1, #8
    8292:	f005 fb52 	bl	d93a <shell_fprintf>
	if (bypass && in_use) {
    8296:	4b16      	ldr	r3, [pc, #88]	; (82f0 <cmd_load+0x12c>)
    8298:	781a      	ldrb	r2, [r3, #0]
    829a:	b12a      	cbz	r2, 82a8 <cmd_load+0xe4>
		shell_error(sh, "flash load supports setting bypass on a single instance.");
    829c:	4a15      	ldr	r2, [pc, #84]	; (82f4 <cmd_load+0x130>)
    829e:	2101      	movs	r1, #1
    82a0:	4620      	mov	r0, r4
    82a2:	f005 fb4a 	bl	d93a <shell_fprintf>
		return -EBUSY;
    82a6:	e7b5      	b.n	8214 <cmd_load+0x50>
	in_use = bypass != NULL;
    82a8:	2201      	movs	r2, #1
    82aa:	701a      	strb	r2, [r3, #0]
		shell_print(sh, "Loading...");
    82ac:	4620      	mov	r0, r4
    82ae:	4a12      	ldr	r2, [pc, #72]	; (82f8 <cmd_load+0x134>)
    82b0:	2108      	movs	r1, #8
    82b2:	f005 fb42 	bl	d93a <shell_fprintf>
	shell_set_bypass(sh, bypass);
    82b6:	4911      	ldr	r1, [pc, #68]	; (82fc <cmd_load+0x138>)
    82b8:	4620      	mov	r0, r4
    82ba:	f005 fb60 	bl	d97e <shell_set_bypass>
	return 0;
    82be:	e7a9      	b.n	8214 <cmd_load+0x50>
    82c0:	00012e2b 	.word	0x00012e2b
    82c4:	20002354 	.word	0x20002354
    82c8:	00012e4b 	.word	0x00012e4b
    82cc:	00012e7e 	.word	0x00012e7e
    82d0:	00012ea3 	.word	0x00012ea3
    82d4:	20002358 	.word	0x20002358
    82d8:	20002350 	.word	0x20002350
    82dc:	20002348 	.word	0x20002348
    82e0:	2000234c 	.word	0x2000234c
    82e4:	20002340 	.word	0x20002340
    82e8:	20002344 	.word	0x20002344
    82ec:	00012ed5 	.word	0x00012ed5
    82f0:	200036f9 	.word	0x200036f9
    82f4:	00012efe 	.word	0x00012efe
    82f8:	00012f38 	.word	0x00012f38
    82fc:	00008049 	.word	0x00008049

00008300 <cmd_test>:
{
    8300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8304:	b087      	sub	sp, #28
	result = parse_helper(sh, &argc, &argv, &flash_dev, &addr);
    8306:	ab05      	add	r3, sp, #20
{
    8308:	e9cd 2102 	strd	r2, r1, [sp, #8]
	result = parse_helper(sh, &argc, &argv, &flash_dev, &addr);
    830c:	9300      	str	r3, [sp, #0]
    830e:	aa02      	add	r2, sp, #8
    8310:	ab04      	add	r3, sp, #16
    8312:	a903      	add	r1, sp, #12
{
    8314:	4605      	mov	r5, r0
	result = parse_helper(sh, &argc, &argv, &flash_dev, &addr);
    8316:	f7ff fd09 	bl	7d2c <parse_helper>
	if (result) {
    831a:	4604      	mov	r4, r0
    831c:	b9c0      	cbnz	r0, 8350 <cmd_test+0x50>
	size = strtoul(argv[2], NULL, 16);
    831e:	9e02      	ldr	r6, [sp, #8]
    8320:	4601      	mov	r1, r0
    8322:	2210      	movs	r2, #16
    8324:	68b0      	ldr	r0, [r6, #8]
    8326:	f006 fba0 	bl	ea6a <strtoul>
	repeat = strtoul(argv[3], NULL, 16);
    832a:	2210      	movs	r2, #16
	size = strtoul(argv[2], NULL, 16);
    832c:	4607      	mov	r7, r0
	repeat = strtoul(argv[3], NULL, 16);
    832e:	4621      	mov	r1, r4
    8330:	68f0      	ldr	r0, [r6, #12]
    8332:	f006 fb9a 	bl	ea6a <strtoul>
	if (size > CONFIG_FLASH_SHELL_BUFFER_SIZE) {
    8336:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
	repeat = strtoul(argv[3], NULL, 16);
    833a:	4606      	mov	r6, r0
	if (size > CONFIG_FLASH_SHELL_BUFFER_SIZE) {
    833c:	d90c      	bls.n	8358 <cmd_test+0x58>
		shell_error(sh, "<size> must be at most 0x%x.",
    833e:	4a35      	ldr	r2, [pc, #212]	; (8414 <cmd_test+0x114>)
    8340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    8344:	2101      	movs	r1, #1
    8346:	4628      	mov	r0, r5
    8348:	f005 faf7 	bl	d93a <shell_fprintf>
		return -EINVAL;
    834c:	f06f 0415 	mvn.w	r4, #21
}
    8350:	4620      	mov	r0, r4
    8352:	b007      	add	sp, #28
    8354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (repeat == 0) {
    8358:	2801      	cmp	r0, #1
    835a:	4b2f      	ldr	r3, [pc, #188]	; (8418 <cmd_test+0x118>)
    835c:	bf38      	it	cc
    835e:	2601      	movcc	r6, #1
	for (uint32_t i = 0; i < size; i++) {
    8360:	42bc      	cmp	r4, r7
    8362:	d116      	bne.n	8392 <cmd_test+0x92>
		result = flash_write(flash_dev, addr, test_arr, size);
    8364:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8418 <cmd_test+0x118>
		shell_print(sh, "Write OK.");
    8368:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 841c <cmd_test+0x11c>
	while (repeat--) {
    836c:	3e01      	subs	r6, #1
		result = flash_erase(flash_dev, addr, size);
    836e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
	rc = api->erase(dev, offset, size);
    8372:	f8d8 3008 	ldr.w	r3, [r8, #8]
    8376:	463a      	mov	r2, r7
    8378:	689b      	ldr	r3, [r3, #8]
    837a:	4649      	mov	r1, r9
    837c:	4640      	mov	r0, r8
    837e:	4798      	blx	r3
		if (result) {
    8380:	4604      	mov	r4, r0
    8382:	b150      	cbz	r0, 839a <cmd_test+0x9a>
			shell_error(sh, "Erase Failed, code %d.", result);
    8384:	4a26      	ldr	r2, [pc, #152]	; (8420 <cmd_test+0x120>)
    8386:	4603      	mov	r3, r0
			shell_error(sh, "Write failed, code %d", result);
    8388:	2101      	movs	r1, #1
    838a:	4628      	mov	r0, r5
    838c:	f005 fad5 	bl	d93a <shell_fprintf>
	if (result == 0) {
    8390:	e7de      	b.n	8350 <cmd_test+0x50>
		test_arr[i] = (uint8_t)i;
    8392:	f803 4b01 	strb.w	r4, [r3], #1
	for (uint32_t i = 0; i < size; i++) {
    8396:	3401      	adds	r4, #1
    8398:	e7e2      	b.n	8360 <cmd_test+0x60>
		shell_print(sh, "Erase OK.");
    839a:	4a22      	ldr	r2, [pc, #136]	; (8424 <cmd_test+0x124>)
    839c:	2108      	movs	r1, #8
    839e:	4628      	mov	r0, r5
    83a0:	f005 facb 	bl	d93a <shell_fprintf>
		result = flash_write(flash_dev, addr, test_arr, size);
    83a4:	463b      	mov	r3, r7
    83a6:	4652      	mov	r2, sl
    83a8:	4649      	mov	r1, r9
    83aa:	4640      	mov	r0, r8
    83ac:	f006 fecb 	bl	f146 <flash_write>
		if (result) {
    83b0:	4604      	mov	r4, r0
    83b2:	b110      	cbz	r0, 83ba <cmd_test+0xba>
			shell_error(sh, "Write failed, code %d", result);
    83b4:	4a1c      	ldr	r2, [pc, #112]	; (8428 <cmd_test+0x128>)
    83b6:	4603      	mov	r3, r0
    83b8:	e7e6      	b.n	8388 <cmd_test+0x88>
		shell_print(sh, "Write OK.");
    83ba:	465a      	mov	r2, fp
    83bc:	2108      	movs	r1, #8
    83be:	4628      	mov	r0, r5
    83c0:	f005 fabb 	bl	d93a <shell_fprintf>
		result = flash_read(flash_dev, addr, check_arr, size);
    83c4:	4a19      	ldr	r2, [pc, #100]	; (842c <cmd_test+0x12c>)
    83c6:	463b      	mov	r3, r7
    83c8:	4649      	mov	r1, r9
    83ca:	4640      	mov	r0, r8
    83cc:	f006 feb5 	bl	f13a <flash_read>
		if (result < 0) {
    83d0:	1e04      	subs	r4, r0, #0
    83d2:	da03      	bge.n	83dc <cmd_test+0xdc>
			shell_print(sh, "Verification read failed, code: %d", result);
    83d4:	4a16      	ldr	r2, [pc, #88]	; (8430 <cmd_test+0x130>)
    83d6:	4623      	mov	r3, r4
    83d8:	2108      	movs	r1, #8
    83da:	e7d6      	b.n	838a <cmd_test+0x8a>
		if (memcmp(test_arr, check_arr, size) != 0) {
    83dc:	4913      	ldr	r1, [pc, #76]	; (842c <cmd_test+0x12c>)
    83de:	463a      	mov	r2, r7
    83e0:	4650      	mov	r0, sl
    83e2:	f006 fc35 	bl	ec50 <memcmp>
    83e6:	b160      	cbz	r0, 8402 <cmd_test+0x102>
			shell_error(sh, "Verification ERROR!");
    83e8:	4a12      	ldr	r2, [pc, #72]	; (8434 <cmd_test+0x134>)
    83ea:	2101      	movs	r1, #1
    83ec:	4628      	mov	r0, r5
    83ee:	f005 faa4 	bl	d93a <shell_fprintf>
	if (result == 0) {
    83f2:	2c00      	cmp	r4, #0
    83f4:	d1ac      	bne.n	8350 <cmd_test+0x50>
		shell_print(sh, "Erase-Write-Verify test done.");
    83f6:	4a10      	ldr	r2, [pc, #64]	; (8438 <cmd_test+0x138>)
    83f8:	2108      	movs	r1, #8
    83fa:	4628      	mov	r0, r5
    83fc:	f005 fa9d 	bl	d93a <shell_fprintf>
    8400:	e7a6      	b.n	8350 <cmd_test+0x50>
		shell_print(sh, "Verified OK.");
    8402:	4a0e      	ldr	r2, [pc, #56]	; (843c <cmd_test+0x13c>)
    8404:	2108      	movs	r1, #8
    8406:	4628      	mov	r0, r5
    8408:	f005 fa97 	bl	d93a <shell_fprintf>
	while (repeat--) {
    840c:	3e01      	subs	r6, #1
    840e:	d2ae      	bcs.n	836e <cmd_test+0x6e>
    8410:	e7ef      	b.n	83f2 <cmd_test+0xf2>
    8412:	bf00      	nop
    8414:	00012f44 	.word	0x00012f44
    8418:	2000235c 	.word	0x2000235c
    841c:	00012d2b 	.word	0x00012d2b
    8420:	00012ccf 	.word	0x00012ccf
    8424:	00012f62 	.word	0x00012f62
    8428:	00012f6d 	.word	0x00012f6d
    842c:	20001340 	.word	0x20001340
    8430:	00012f84 	.word	0x00012f84
    8434:	00012d5b 	.word	0x00012d5b
    8438:	00012fb6 	.word	0x00012fb6
    843c:	00012fa8 	.word	0x00012fa8

00008440 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    8440:	b530      	push	{r4, r5, lr}
	return port->config;
    8442:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    8444:	7b05      	ldrb	r5, [r0, #12]
    8446:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    844a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    844e:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    8450:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    8454:	d105      	bne.n	8462 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    8456:	4620      	mov	r0, r4
    8458:	f001 febe 	bl	a1d8 <nrfx_gpiote_trigger_disable>

		return 0;
    845c:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    845e:	b005      	add	sp, #20
    8460:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    8462:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    8464:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    8468:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    846c:	d114      	bne.n	8498 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    846e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    8472:	bf0c      	ite	eq
    8474:	2304      	moveq	r3, #4
    8476:	2305      	movne	r3, #5
    8478:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    847c:	2300      	movs	r3, #0
    847e:	4619      	mov	r1, r3
    8480:	aa02      	add	r2, sp, #8
    8482:	4620      	mov	r0, r4
    8484:	f001 fcde 	bl	9e44 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    8488:	4b1d      	ldr	r3, [pc, #116]	; (8500 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    848a:	4298      	cmp	r0, r3
    848c:	d135      	bne.n	84fa <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    848e:	2101      	movs	r1, #1
    8490:	4620      	mov	r0, r4
    8492:	f001 fe5d 	bl	a150 <nrfx_gpiote_trigger_enable>
	return 0;
    8496:	e7e1      	b.n	845c <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    8498:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    849c:	d022      	beq.n	84e4 <gpio_nrfx_pin_interrupt_configure+0xa4>
    849e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    84a2:	bf14      	ite	ne
    84a4:	2301      	movne	r3, #1
    84a6:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    84a8:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    84ac:	6883      	ldr	r3, [r0, #8]
    84ae:	40cb      	lsrs	r3, r1
    84b0:	07d9      	lsls	r1, r3, #31
    84b2:	d4e3      	bmi.n	847c <gpio_nrfx_pin_interrupt_configure+0x3c>
    84b4:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    84b8:	d1e0      	bne.n	847c <gpio_nrfx_pin_interrupt_configure+0x3c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    84ba:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    84be:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    84c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    84c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    84ca:	07db      	lsls	r3, r3, #31
    84cc:	d4d6      	bmi.n	847c <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    84ce:	f10d 0507 	add.w	r5, sp, #7
    84d2:	4629      	mov	r1, r5
    84d4:	4620      	mov	r0, r4
    84d6:	f001 fde7 	bl	a0a8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    84da:	4b0a      	ldr	r3, [pc, #40]	; (8504 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    84dc:	4298      	cmp	r0, r3
    84de:	d003      	beq.n	84e8 <gpio_nrfx_pin_interrupt_configure+0xa8>
		trigger_config.p_in_channel = &ch;
    84e0:	9503      	str	r5, [sp, #12]
    84e2:	e7cb      	b.n	847c <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    84e4:	2303      	movs	r3, #3
    84e6:	e7df      	b.n	84a8 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    84e8:	4628      	mov	r0, r5
    84ea:	f001 fe2b 	bl	a144 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    84ee:	4b04      	ldr	r3, [pc, #16]	; (8500 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    84f0:	4298      	cmp	r0, r3
    84f2:	d0f5      	beq.n	84e0 <gpio_nrfx_pin_interrupt_configure+0xa0>
				return -ENOMEM;
    84f4:	f06f 000b 	mvn.w	r0, #11
    84f8:	e7b1      	b.n	845e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    84fa:	f06f 0015 	mvn.w	r0, #21
    84fe:	e7ae      	b.n	845e <gpio_nrfx_pin_interrupt_configure+0x1e>
    8500:	0bad0000 	.word	0x0bad0000
    8504:	0bad0004 	.word	0x0bad0004

00008508 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    8508:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    850a:	f001 fe0b 	bl	a124 <nrfx_gpiote_is_init>
    850e:	4604      	mov	r4, r0
    8510:	b968      	cbnz	r0, 852e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    8512:	f001 fddf 	bl	a0d4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    8516:	4b08      	ldr	r3, [pc, #32]	; (8538 <gpio_nrfx_init+0x30>)
    8518:	4298      	cmp	r0, r3
    851a:	d10a      	bne.n	8532 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    851c:	4807      	ldr	r0, [pc, #28]	; (853c <gpio_nrfx_init+0x34>)
    851e:	4621      	mov	r1, r4
    8520:	f001 fdbc 	bl	a09c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    8524:	4622      	mov	r2, r4
    8526:	2105      	movs	r1, #5
    8528:	2006      	movs	r0, #6
    852a:	f7fe fa51 	bl	69d0 <z_arm_irq_priority_set>
		return 0;
    852e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    8530:	bd10      	pop	{r4, pc}
		return -EIO;
    8532:	f06f 0004 	mvn.w	r0, #4
    8536:	e7fb      	b.n	8530 <gpio_nrfx_init+0x28>
    8538:	0bad0000 	.word	0x0bad0000
    853c:	00008541 	.word	0x00008541

00008540 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    8540:	0943      	lsrs	r3, r0, #5
{
    8542:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    8544:	d107      	bne.n	8556 <nrfx_gpio_handler+0x16>
	return list->head;
    8546:	4b0b      	ldr	r3, [pc, #44]	; (8574 <nrfx_gpio_handler+0x34>)
    8548:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    854a:	b121      	cbz	r1, 8556 <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
    854c:	2501      	movs	r5, #1
	return node->next;
    854e:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    8550:	4e09      	ldr	r6, [pc, #36]	; (8578 <nrfx_gpio_handler+0x38>)
    8552:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    8554:	b901      	cbnz	r1, 8558 <nrfx_gpio_handler+0x18>
}
    8556:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    8558:	688a      	ldr	r2, [r1, #8]
    855a:	402a      	ands	r2, r5
    855c:	d002      	beq.n	8564 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
    855e:	684b      	ldr	r3, [r1, #4]
    8560:	4630      	mov	r0, r6
    8562:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    8564:	b11c      	cbz	r4, 856e <nrfx_gpio_handler+0x2e>
    8566:	6823      	ldr	r3, [r4, #0]
    8568:	4621      	mov	r1, r4
    856a:	461c      	mov	r4, r3
    856c:	e7f2      	b.n	8554 <nrfx_gpio_handler+0x14>
    856e:	4623      	mov	r3, r4
    8570:	e7fa      	b.n	8568 <nrfx_gpio_handler+0x28>
    8572:	bf00      	nop
    8574:	2000335c 	.word	0x2000335c
    8578:	0000fe6c 	.word	0x0000fe6c

0000857c <gpio_nrfx_pin_configure>:
{
    857c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    8580:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    8582:	7b3b      	ldrb	r3, [r7, #12]
    8584:	f001 051f 	and.w	r5, r1, #31
    8588:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    858c:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    858e:	4628      	mov	r0, r5
    8590:	f10d 0103 	add.w	r1, sp, #3
{
    8594:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    8596:	f001 fd87 	bl	a0a8 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    859a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    859e:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    85a0:	d10b      	bne.n	85ba <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    85a2:	4628      	mov	r0, r5
    85a4:	f001 fe40 	bl	a228 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    85a8:	4b3d      	ldr	r3, [pc, #244]	; (86a0 <gpio_nrfx_pin_configure+0x124>)
    85aa:	4598      	cmp	r8, r3
    85ac:	d103      	bne.n	85b6 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    85ae:	f89d 0003 	ldrb.w	r0, [sp, #3]
    85b2:	f001 fdc1 	bl	a138 <nrfx_gpiote_channel_free>
		return 0;
    85b6:	2000      	movs	r0, #0
    85b8:	e00c      	b.n	85d4 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    85ba:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    85bc:	4619      	mov	r1, r3
    85be:	aa02      	add	r2, sp, #8
    85c0:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    85c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    85c6:	f001 fc3d 	bl	9e44 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    85ca:	4b35      	ldr	r3, [pc, #212]	; (86a0 <gpio_nrfx_pin_configure+0x124>)
    85cc:	4298      	cmp	r0, r3
    85ce:	d004      	beq.n	85da <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    85d0:	f06f 0015 	mvn.w	r0, #21
}
    85d4:	b004      	add	sp, #16
    85d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    85da:	4580      	cmp	r8, r0
    85dc:	d103      	bne.n	85e6 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    85de:	f89d 0003 	ldrb.w	r0, [sp, #3]
    85e2:	f001 fda9 	bl	a138 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    85e6:	03a3      	lsls	r3, r4, #14
    85e8:	d54b      	bpl.n	8682 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    85ea:	f240 3306 	movw	r3, #774	; 0x306
    85ee:	4023      	ands	r3, r4
    85f0:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    85f4:	d019      	beq.n	862a <gpio_nrfx_pin_configure+0xae>
    85f6:	d80c      	bhi.n	8612 <gpio_nrfx_pin_configure+0x96>
    85f8:	2b06      	cmp	r3, #6
    85fa:	d017      	beq.n	862c <gpio_nrfx_pin_configure+0xb0>
    85fc:	d804      	bhi.n	8608 <gpio_nrfx_pin_configure+0x8c>
    85fe:	b1ab      	cbz	r3, 862c <gpio_nrfx_pin_configure+0xb0>
    8600:	2b02      	cmp	r3, #2
    8602:	d1e5      	bne.n	85d0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    8604:	2304      	movs	r3, #4
    8606:	e011      	b.n	862c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    8608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    860c:	d1e0      	bne.n	85d0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    860e:	2301      	movs	r3, #1
    8610:	e00c      	b.n	862c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    8612:	f240 2202 	movw	r2, #514	; 0x202
    8616:	4293      	cmp	r3, r2
    8618:	d027      	beq.n	866a <gpio_nrfx_pin_configure+0xee>
    861a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    861e:	d026      	beq.n	866e <gpio_nrfx_pin_configure+0xf2>
    8620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8624:	d1d4      	bne.n	85d0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    8626:	2302      	movs	r3, #2
    8628:	e000      	b.n	862c <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    862a:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    862c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    8630:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    8634:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    8638:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    863a:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    863e:	bf54      	ite	pl
    8640:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    8644:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    8646:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    8648:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    864c:	d511      	bpl.n	8672 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    864e:	687a      	ldr	r2, [r7, #4]
    8650:	2301      	movs	r3, #1
    8652:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    8654:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    8658:	2200      	movs	r2, #0
    865a:	a901      	add	r1, sp, #4
    865c:	4628      	mov	r0, r5
    865e:	f001 fc9f 	bl	9fa0 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    8662:	4b0f      	ldr	r3, [pc, #60]	; (86a0 <gpio_nrfx_pin_configure+0x124>)
    8664:	4298      	cmp	r0, r3
    8666:	d0a6      	beq.n	85b6 <gpio_nrfx_pin_configure+0x3a>
    8668:	e7b2      	b.n	85d0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    866a:	2305      	movs	r3, #5
    866c:	e7de      	b.n	862c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    866e:	2303      	movs	r3, #3
    8670:	e7dc      	b.n	862c <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    8672:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    8674:	bf41      	itttt	mi
    8676:	2301      	movmi	r3, #1
    8678:	687a      	ldrmi	r2, [r7, #4]
    867a:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    867c:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    8680:	e7ea      	b.n	8658 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    8682:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    8684:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    8688:	bf54      	ite	pl
    868a:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    868e:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    8690:	461a      	mov	r2, r3
    8692:	a901      	add	r1, sp, #4
    8694:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    8696:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    869a:	f001 fbd3 	bl	9e44 <nrfx_gpiote_input_configure>
    869e:	e7e0      	b.n	8662 <gpio_nrfx_pin_configure+0xe6>
    86a0:	0bad0000 	.word	0x0bad0000

000086a4 <print_all_reset_causes>:
		return "unknown";
	}
}

static void print_all_reset_causes(const struct shell *sh, uint32_t cause)
{
    86a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (uint32_t cause_mask = 1; cause_mask; cause_mask <<= 1) {
		if (cause & cause_mask) {
			shell_print(sh, "- %s",
    86a8:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8778 <print_all_reset_causes+0xd4>
		return "clock";
    86ac:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 877c <print_all_reset_causes+0xd8>
		return "user";
    86b0:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8780 <print_all_reset_causes+0xdc>
{
    86b4:	4607      	mov	r7, r0
    86b6:	460d      	mov	r5, r1
    86b8:	2620      	movs	r6, #32
	for (uint32_t cause_mask = 1; cause_mask; cause_mask <<= 1) {
    86ba:	2401      	movs	r4, #1
		if (cause & cause_mask) {
    86bc:	ea15 0204 	ands.w	r2, r5, r4
    86c0:	d013      	beq.n	86ea <print_all_reset_causes+0x46>
	switch (cause) {
    86c2:	2a80      	cmp	r2, #128	; 0x80
    86c4:	d045      	beq.n	8752 <print_all_reset_causes+0xae>
    86c6:	d820      	bhi.n	870a <print_all_reset_causes+0x66>
    86c8:	2a08      	cmp	r2, #8
    86ca:	d814      	bhi.n	86f6 <print_all_reset_causes+0x52>
    86cc:	3a01      	subs	r2, #1
    86ce:	2a07      	cmp	r2, #7
    86d0:	d83d      	bhi.n	874e <print_all_reset_causes+0xaa>
    86d2:	e8df f002 	tbb	[pc, r2]
    86d6:	4004      	.short	0x4004
    86d8:	3c3c383c 	.word	0x3c3c383c
    86dc:	3a3c      	.short	0x3a3c
		return "pin";
    86de:	4b29      	ldr	r3, [pc, #164]	; (8784 <print_all_reset_causes+0xe0>)
			shell_print(sh, "- %s",
    86e0:	4652      	mov	r2, sl
    86e2:	2108      	movs	r1, #8
    86e4:	4638      	mov	r0, r7
    86e6:	f005 f928 	bl	d93a <shell_fprintf>
	for (uint32_t cause_mask = 1; cause_mask; cause_mask <<= 1) {
    86ea:	3e01      	subs	r6, #1
    86ec:	ea4f 0444 	mov.w	r4, r4, lsl #1
    86f0:	d1e4      	bne.n	86bc <print_all_reset_causes+0x18>
				    cause_to_string(cause & cause_mask));
		}
	}
}
    86f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (cause) {
    86f6:	2a20      	cmp	r2, #32
    86f8:	d02f      	beq.n	875a <print_all_reset_causes+0xb6>
    86fa:	2a40      	cmp	r2, #64	; 0x40
    86fc:	d02f      	beq.n	875e <print_all_reset_causes+0xba>
		return "unknown";
    86fe:	4b22      	ldr	r3, [pc, #136]	; (8788 <print_all_reset_causes+0xe4>)
    8700:	4922      	ldr	r1, [pc, #136]	; (878c <print_all_reset_causes+0xe8>)
    8702:	2a10      	cmp	r2, #16
    8704:	bf18      	it	ne
    8706:	460b      	movne	r3, r1
    8708:	e7ea      	b.n	86e0 <print_all_reset_causes+0x3c>
	switch (cause) {
    870a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    870e:	d028      	beq.n	8762 <print_all_reset_causes+0xbe>
    8710:	d80c      	bhi.n	872c <print_all_reset_causes+0x88>
    8712:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    8716:	d026      	beq.n	8766 <print_all_reset_causes+0xc2>
    8718:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    871c:	d025      	beq.n	876a <print_all_reset_causes+0xc6>
		return "unknown";
    871e:	4b1c      	ldr	r3, [pc, #112]	; (8790 <print_all_reset_causes+0xec>)
    8720:	491a      	ldr	r1, [pc, #104]	; (878c <print_all_reset_causes+0xe8>)
    8722:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    8726:	bf18      	it	ne
    8728:	460b      	movne	r3, r1
    872a:	e7d9      	b.n	86e0 <print_all_reset_causes+0x3c>
	switch (cause) {
    872c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    8730:	d01d      	beq.n	876e <print_all_reset_causes+0xca>
    8732:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    8736:	d01c      	beq.n	8772 <print_all_reset_causes+0xce>
		return "unknown";
    8738:	4b16      	ldr	r3, [pc, #88]	; (8794 <print_all_reset_causes+0xf0>)
    873a:	4914      	ldr	r1, [pc, #80]	; (878c <print_all_reset_causes+0xe8>)
    873c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    8740:	bf18      	it	ne
    8742:	460b      	movne	r3, r1
    8744:	e7cc      	b.n	86e0 <print_all_reset_causes+0x3c>
		return "brownout";
    8746:	4b14      	ldr	r3, [pc, #80]	; (8798 <print_all_reset_causes+0xf4>)
    8748:	e7ca      	b.n	86e0 <print_all_reset_causes+0x3c>
		return "power-on reset";
    874a:	4b14      	ldr	r3, [pc, #80]	; (879c <print_all_reset_causes+0xf8>)
    874c:	e7c8      	b.n	86e0 <print_all_reset_causes+0x3c>
		return "unknown";
    874e:	4b0f      	ldr	r3, [pc, #60]	; (878c <print_all_reset_causes+0xe8>)
    8750:	e7c6      	b.n	86e0 <print_all_reset_causes+0x3c>
		return "low power wake-up";
    8752:	4b13      	ldr	r3, [pc, #76]	; (87a0 <print_all_reset_causes+0xfc>)
    8754:	e7c4      	b.n	86e0 <print_all_reset_causes+0x3c>
	switch (cause) {
    8756:	4b13      	ldr	r3, [pc, #76]	; (87a4 <print_all_reset_causes+0x100>)
    8758:	e7c2      	b.n	86e0 <print_all_reset_causes+0x3c>
		return "debug";
    875a:	4b13      	ldr	r3, [pc, #76]	; (87a8 <print_all_reset_causes+0x104>)
    875c:	e7c0      	b.n	86e0 <print_all_reset_causes+0x3c>
		return "security";
    875e:	4b13      	ldr	r3, [pc, #76]	; (87ac <print_all_reset_causes+0x108>)
    8760:	e7be      	b.n	86e0 <print_all_reset_causes+0x3c>
		return "clock";
    8762:	4643      	mov	r3, r8
    8764:	e7bc      	b.n	86e0 <print_all_reset_causes+0x3c>
		return "parity error";
    8766:	4b12      	ldr	r3, [pc, #72]	; (87b0 <print_all_reset_causes+0x10c>)
    8768:	e7ba      	b.n	86e0 <print_all_reset_causes+0x3c>
		return "PLL error";
    876a:	4b12      	ldr	r3, [pc, #72]	; (87b4 <print_all_reset_causes+0x110>)
    876c:	e7b8      	b.n	86e0 <print_all_reset_causes+0x3c>
		return "user";
    876e:	464b      	mov	r3, r9
    8770:	e7b6      	b.n	86e0 <print_all_reset_causes+0x3c>
		return "temperature";
    8772:	4b11      	ldr	r3, [pc, #68]	; (87b8 <print_all_reset_causes+0x114>)
    8774:	e7b4      	b.n	86e0 <print_all_reset_causes+0x3c>
    8776:	bf00      	nop
    8778:	00011aee 	.word	0x00011aee
    877c:	00013151 	.word	0x00013151
    8780:	00013160 	.word	0x00013160
    8784:	000130e1 	.word	0x000130e1
    8788:	00013105 	.word	0x00013105
    878c:	000130e5 	.word	0x000130e5
    8790:	0001312f 	.word	0x0001312f
    8794:	00013157 	.word	0x00013157
    8798:	000130ed 	.word	0x000130ed
    879c:	000130f6 	.word	0x000130f6
    87a0:	0001311d 	.word	0x0001311d
    87a4:	00013171 	.word	0x00013171
    87a8:	0001310e 	.word	0x0001310e
    87ac:	00013114 	.word	0x00013114
    87b0:	0001313a 	.word	0x0001313a
    87b4:	00013147 	.word	0x00013147
    87b8:	00013165 	.word	0x00013165

000087bc <cmd_show_reset_cause>:

static int cmd_show_reset_cause(const struct shell *sh, size_t argc,
				char **argv)
{
    87bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    87be:	4604      	mov	r4, r0
		union { uintptr_t x; uint32_t * val; } parm0 = { .val = cause };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_HWINFO_GET_RESET_CAUSE);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_reset_cause(cause);
    87c0:	a801      	add	r0, sp, #4
    87c2:	f006 fd2f 	bl	f224 <z_impl_hwinfo_get_reset_cause>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	res = hwinfo_get_reset_cause(&cause);
	if (res == -ENOTSUP) {
    87c6:	f110 0f86 	cmn.w	r0, #134	; 0x86
    87ca:	4605      	mov	r5, r0
    87cc:	d105      	bne.n	87da <cmd_show_reset_cause+0x1e>
		shell_error(sh, "Not supported by hardware");
    87ce:	4a0f      	ldr	r2, [pc, #60]	; (880c <cmd_show_reset_cause+0x50>)
    87d0:	2101      	movs	r1, #1

	if (cause != 0) {
		shell_print(sh, "reset caused by:");
		print_all_reset_causes(sh, cause);
	} else {
		shell_print(sh, "No reset cause set");
    87d2:	4620      	mov	r0, r4
    87d4:	f005 f8b1 	bl	d93a <shell_fprintf>
    87d8:	e006      	b.n	87e8 <cmd_show_reset_cause+0x2c>
	} else if (res != 0) {
    87da:	b140      	cbz	r0, 87ee <cmd_show_reset_cause+0x32>
		shell_error(sh, "Error reading the cause [%d]", res);
    87dc:	4603      	mov	r3, r0
    87de:	4a0c      	ldr	r2, [pc, #48]	; (8810 <cmd_show_reset_cause+0x54>)
    87e0:	2101      	movs	r1, #1
    87e2:	4620      	mov	r0, r4
    87e4:	f005 f8a9 	bl	d93a <shell_fprintf>
	}

	return 0;
}
    87e8:	4628      	mov	r0, r5
    87ea:	b003      	add	sp, #12
    87ec:	bd30      	pop	{r4, r5, pc}
	if (cause != 0) {
    87ee:	9b01      	ldr	r3, [sp, #4]
    87f0:	b14b      	cbz	r3, 8806 <cmd_show_reset_cause+0x4a>
		shell_print(sh, "reset caused by:");
    87f2:	4620      	mov	r0, r4
    87f4:	4a07      	ldr	r2, [pc, #28]	; (8814 <cmd_show_reset_cause+0x58>)
    87f6:	2108      	movs	r1, #8
    87f8:	f005 f89f 	bl	d93a <shell_fprintf>
		print_all_reset_causes(sh, cause);
    87fc:	9901      	ldr	r1, [sp, #4]
    87fe:	4620      	mov	r0, r4
    8800:	f7ff ff50 	bl	86a4 <print_all_reset_causes>
    8804:	e7f0      	b.n	87e8 <cmd_show_reset_cause+0x2c>
		shell_print(sh, "No reset cause set");
    8806:	4a04      	ldr	r2, [pc, #16]	; (8818 <cmd_show_reset_cause+0x5c>)
    8808:	2108      	movs	r1, #8
    880a:	e7e2      	b.n	87d2 <cmd_show_reset_cause+0x16>
    880c:	0001317a 	.word	0x0001317a
    8810:	00013195 	.word	0x00013195
    8814:	000131b3 	.word	0x000131b3
    8818:	000131c5 	.word	0x000131c5

0000881c <cmd_supported_reset_cause>:
	return 0;
}

static int cmd_supported_reset_cause(const struct shell *sh, size_t argc,
				     char **argv)
{
    881c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    881e:	4605      	mov	r5, r0
		union { uintptr_t x; uint32_t * val; } parm0 = { .val = supported };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_HWINFO_GET_SUPPORTED_RESET_CAUSE);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_supported_reset_cause(supported);
    8820:	a801      	add	r0, sp, #4
    8822:	f006 fd24 	bl	f26e <z_impl_hwinfo_get_supported_reset_cause>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	res = hwinfo_get_supported_reset_cause(&cause);
	if (res == -ENOTSUP) {
    8826:	f110 0f86 	cmn.w	r0, #134	; 0x86
    882a:	4604      	mov	r4, r0
    882c:	d111      	bne.n	8852 <cmd_supported_reset_cause+0x36>
		shell_error(sh, "Not supported by hardware");
    882e:	4a11      	ldr	r2, [pc, #68]	; (8874 <cmd_supported_reset_cause+0x58>)
    8830:	2101      	movs	r1, #1
    8832:	4628      	mov	r0, r5
    8834:	f005 f881 	bl	d93a <shell_fprintf>
	} else if (res != 0) {
		shell_error(sh, "Could not get the supported reset causes [%d]", res);
		return res;
	}

	if (cause != 0) {
    8838:	9b01      	ldr	r3, [sp, #4]
    883a:	b1ab      	cbz	r3, 8868 <cmd_supported_reset_cause+0x4c>
		shell_print(sh, "supported reset causes:");
    883c:	2108      	movs	r1, #8
    883e:	4628      	mov	r0, r5
    8840:	4a0d      	ldr	r2, [pc, #52]	; (8878 <cmd_supported_reset_cause+0x5c>)
    8842:	f005 f87a 	bl	d93a <shell_fprintf>
		print_all_reset_causes(sh, cause);
    8846:	9901      	ldr	r1, [sp, #4]
    8848:	4628      	mov	r0, r5
    884a:	f7ff ff2b 	bl	86a4 <print_all_reset_causes>
	} else {
		shell_print(sh, "No causes supported");
	}

	return 0;
    884e:	2400      	movs	r4, #0
    8850:	e007      	b.n	8862 <cmd_supported_reset_cause+0x46>
	} else if (res != 0) {
    8852:	2800      	cmp	r0, #0
    8854:	d0f0      	beq.n	8838 <cmd_supported_reset_cause+0x1c>
		shell_error(sh, "Could not get the supported reset causes [%d]", res);
    8856:	4603      	mov	r3, r0
    8858:	4a08      	ldr	r2, [pc, #32]	; (887c <cmd_supported_reset_cause+0x60>)
    885a:	2101      	movs	r1, #1
    885c:	4628      	mov	r0, r5
    885e:	f005 f86c 	bl	d93a <shell_fprintf>
}
    8862:	4620      	mov	r0, r4
    8864:	b003      	add	sp, #12
    8866:	bd30      	pop	{r4, r5, pc}
		shell_print(sh, "No causes supported");
    8868:	4a05      	ldr	r2, [pc, #20]	; (8880 <cmd_supported_reset_cause+0x64>)
    886a:	2108      	movs	r1, #8
    886c:	4628      	mov	r0, r5
    886e:	f005 f864 	bl	d93a <shell_fprintf>
    8872:	e7ec      	b.n	884e <cmd_supported_reset_cause+0x32>
    8874:	0001317a 	.word	0x0001317a
    8878:	00013208 	.word	0x00013208
    887c:	000131d9 	.word	0x000131d9
    8880:	00013221 	.word	0x00013221

00008884 <cmd_clear_reset_cause>:
{
    8884:	b538      	push	{r3, r4, r5, lr}
    8886:	4605      	mov	r5, r0
	return z_impl_hwinfo_clear_reset_cause();
    8888:	f006 fce9 	bl	f25e <z_impl_hwinfo_clear_reset_cause>
	if (res == -ENOTSUP) {
    888c:	f110 0f86 	cmn.w	r0, #134	; 0x86
    8890:	4604      	mov	r4, r0
    8892:	d107      	bne.n	88a4 <cmd_clear_reset_cause+0x20>
		shell_error(sh, "Not supported by hardware");
    8894:	4a08      	ldr	r2, [pc, #32]	; (88b8 <cmd_clear_reset_cause+0x34>)
    8896:	2101      	movs	r1, #1
    8898:	4628      	mov	r0, r5
    889a:	f005 f84e 	bl	d93a <shell_fprintf>
	return 0;
    889e:	2400      	movs	r4, #0
}
    88a0:	4620      	mov	r0, r4
    88a2:	bd38      	pop	{r3, r4, r5, pc}
	} else if (res != 0) {
    88a4:	2800      	cmp	r0, #0
    88a6:	d0fa      	beq.n	889e <cmd_clear_reset_cause+0x1a>
		shell_error(sh, "Error clearing the reset causes [%d]", res);
    88a8:	4603      	mov	r3, r0
    88aa:	4a04      	ldr	r2, [pc, #16]	; (88bc <cmd_clear_reset_cause+0x38>)
    88ac:	2101      	movs	r1, #1
    88ae:	4628      	mov	r0, r5
    88b0:	f005 f843 	bl	d93a <shell_fprintf>
		return res;
    88b4:	e7f4      	b.n	88a0 <cmd_clear_reset_cause+0x1c>
    88b6:	bf00      	nop
    88b8:	0001317a 	.word	0x0001317a
    88bc:	00013236 	.word	0x00013236

000088c0 <cmd_get_device_id>:
{
    88c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    88c4:	4605      	mov	r5, r0
	return z_impl_hwinfo_get_device_id(buffer, length);
    88c6:	2110      	movs	r1, #16
    88c8:	4668      	mov	r0, sp
    88ca:	f006 fc97 	bl	f1fc <z_impl_hwinfo_get_device_id>
	if (length == -ENOTSUP) {
    88ce:	f110 0f86 	cmn.w	r0, #134	; 0x86
    88d2:	4604      	mov	r4, r0
    88d4:	d108      	bne.n	88e8 <cmd_get_device_id+0x28>
		shell_error(sh, "Not supported by hardware");
    88d6:	4a19      	ldr	r2, [pc, #100]	; (893c <cmd_get_device_id+0x7c>)
    88d8:	2101      	movs	r1, #1
    88da:	4628      	mov	r0, r5
    88dc:	f005 f82d 	bl	d93a <shell_fprintf>
}
    88e0:	4620      	mov	r0, r4
    88e2:	b004      	add	sp, #16
    88e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (length < 0) {
    88e8:	2800      	cmp	r0, #0
		shell_error(sh, "Error: %zd", length);
    88ea:	4603      	mov	r3, r0
	} else if (length < 0) {
    88ec:	da05      	bge.n	88fa <cmd_get_device_id+0x3a>
		shell_error(sh, "Error: %zd", length);
    88ee:	4a14      	ldr	r2, [pc, #80]	; (8940 <cmd_get_device_id+0x80>)
    88f0:	2101      	movs	r1, #1
    88f2:	4628      	mov	r0, r5
    88f4:	f005 f821 	bl	d93a <shell_fprintf>
		return length;
    88f8:	e7f2      	b.n	88e0 <cmd_get_device_id+0x20>
	shell_fprintf(sh, SHELL_NORMAL, "Length: %zd\n", length);
    88fa:	4a12      	ldr	r2, [pc, #72]	; (8944 <cmd_get_device_id+0x84>)
		shell_fprintf(sh, SHELL_NORMAL, "%02x", dev_id[i]);
    88fc:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8948 <cmd_get_device_id+0x88>
	shell_fprintf(sh, SHELL_NORMAL, "Length: %zd\n", length);
    8900:	2108      	movs	r1, #8
    8902:	4628      	mov	r0, r5
    8904:	f005 f819 	bl	d93a <shell_fprintf>
	shell_fprintf(sh, SHELL_NORMAL, "ID: 0x");
    8908:	4a10      	ldr	r2, [pc, #64]	; (894c <cmd_get_device_id+0x8c>)
    890a:	2108      	movs	r1, #8
    890c:	4628      	mov	r0, r5
    890e:	f005 f814 	bl	d93a <shell_fprintf>
	for (i = 0 ; i < length ; i++) {
    8912:	466e      	mov	r6, sp
    8914:	2700      	movs	r7, #0
    8916:	42a7      	cmp	r7, r4
    8918:	d106      	bne.n	8928 <cmd_get_device_id+0x68>
	shell_fprintf(sh, SHELL_NORMAL, "\n");
    891a:	4a0d      	ldr	r2, [pc, #52]	; (8950 <cmd_get_device_id+0x90>)
    891c:	2108      	movs	r1, #8
    891e:	4628      	mov	r0, r5
    8920:	f005 f80b 	bl	d93a <shell_fprintf>
	return 0;
    8924:	2400      	movs	r4, #0
    8926:	e7db      	b.n	88e0 <cmd_get_device_id+0x20>
		shell_fprintf(sh, SHELL_NORMAL, "%02x", dev_id[i]);
    8928:	f816 3b01 	ldrb.w	r3, [r6], #1
    892c:	4642      	mov	r2, r8
    892e:	2108      	movs	r1, #8
    8930:	4628      	mov	r0, r5
    8932:	f005 f802 	bl	d93a <shell_fprintf>
	for (i = 0 ; i < length ; i++) {
    8936:	3701      	adds	r7, #1
    8938:	e7ed      	b.n	8916 <cmd_get_device_id+0x56>
    893a:	bf00      	nop
    893c:	0001317a 	.word	0x0001317a
    8940:	0001325c 	.word	0x0001325c
    8944:	00013268 	.word	0x00013268
    8948:	0001327c 	.word	0x0001327c
    894c:	00013275 	.word	0x00013275
    8950:	0001188e 	.word	0x0001188e

00008954 <event_txdrdy_check>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8954:	4b05      	ldr	r3, [pc, #20]	; (896c <event_txdrdy_check+0x18>)
    8956:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c

static bool event_txdrdy_check(void)
{
	return (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_TXDRDY)
#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
		|| uart_sw_event_txdrdy
    895a:	b92b      	cbnz	r3, 8968 <event_txdrdy_check+0x14>
    895c:	4b04      	ldr	r3, [pc, #16]	; (8970 <event_txdrdy_check+0x1c>)
    895e:	7818      	ldrb	r0, [r3, #0]
    8960:	3800      	subs	r0, #0
    8962:	bf18      	it	ne
    8964:	2001      	movne	r0, #1
    8966:	4770      	bx	lr
    8968:	2001      	movs	r0, #1
#endif
	       );
}
    896a:	4770      	bx	lr
    896c:	40002000 	.word	0x40002000
    8970:	200037fb 	.word	0x200037fb

00008974 <uart_nrfx_poll_in>:
    8974:	4b07      	ldr	r3, [pc, #28]	; (8994 <uart_nrfx_poll_in+0x20>)
    8976:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    897a:	b142      	cbz	r2, 898e <uart_nrfx_poll_in+0x1a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    897c:	2000      	movs	r0, #0
    897e:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    8982:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
    8986:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    898a:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
    898c:	4770      	bx	lr
		return -1;
    898e:	f04f 30ff 	mov.w	r0, #4294967295
}
    8992:	4770      	bx	lr
    8994:	40002000 	.word	0x40002000

00008998 <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    8998:	4b02      	ldr	r3, [pc, #8]	; (89a4 <uart_nrfx_err_check+0xc>)
    899a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    899e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
    89a2:	4770      	bx	lr
    89a4:	40002000 	.word	0x40002000

000089a8 <uart_nrfx_fifo_read>:

/** Interrupt driven FIFO read function */
static int uart_nrfx_fifo_read(const struct device *dev,
			       uint8_t *rx_data,
			       const int size)
{
    89a8:	b570      	push	{r4, r5, r6, lr}
	uint8_t num_rx = 0U;

	while ((size - num_rx > 0) &&
    89aa:	2300      	movs	r3, #0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    89ac:	4c08      	ldr	r4, [pc, #32]	; (89d0 <uart_nrfx_fifo_read+0x28>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    89ae:	461e      	mov	r6, r3
    89b0:	b2d8      	uxtb	r0, r3
    89b2:	4282      	cmp	r2, r0
    89b4:	dd03      	ble.n	89be <uart_nrfx_fifo_read+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    89b6:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
    89ba:	3301      	adds	r3, #1
    89bc:	b905      	cbnz	r5, 89c0 <uart_nrfx_fifo_read+0x18>
		/* Receive a character */
		rx_data[num_rx++] = (uint8_t)nrf_uart_rxd_get(uart0_addr);
	}

	return num_rx;
}
    89be:	bd70      	pop	{r4, r5, r6, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    89c0:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
    89c4:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
    return p_reg->RXD;
    89c8:	f8d4 5518 	ldr.w	r5, [r4, #1304]	; 0x518
    89cc:	540d      	strb	r5, [r1, r0]
    89ce:	e7ef      	b.n	89b0 <uart_nrfx_fifo_read+0x8>
    89d0:	40002000 	.word	0x40002000

000089d4 <uart_nrfx_irq_tx_disable>:

/** Interrupt driven transfer disabling function */
static void uart_nrfx_irq_tx_disable(const struct device *dev)
{
	/* Disable TX interrupt in uart_nrfx_isr() when transmission is done. */
	disable_tx_irq = true;
    89d4:	4b01      	ldr	r3, [pc, #4]	; (89dc <uart_nrfx_irq_tx_disable+0x8>)
    89d6:	2201      	movs	r2, #1
    89d8:	701a      	strb	r2, [r3, #0]
}
    89da:	4770      	bx	lr
    89dc:	200037fa 	.word	0x200037fa

000089e0 <uart_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
    89e0:	4b02      	ldr	r3, [pc, #8]	; (89ec <uart_nrfx_irq_rx_enable+0xc>)
    89e2:	2204      	movs	r2, #4
    89e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

/** Interrupt driven receiver enabling function */
static void uart_nrfx_irq_rx_enable(const struct device *dev)
{
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
}
    89e8:	4770      	bx	lr
    89ea:	bf00      	nop
    89ec:	40002000 	.word	0x40002000

000089f0 <uart_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
    89f0:	4b02      	ldr	r3, [pc, #8]	; (89fc <uart_nrfx_irq_rx_disable+0xc>)
    89f2:	2204      	movs	r2, #4
    89f4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

/** Interrupt driven receiver disabling function */
static void uart_nrfx_irq_rx_disable(const struct device *dev)
{
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
}
    89f8:	4770      	bx	lr
    89fa:	bf00      	nop
    89fc:	40002000 	.word	0x40002000

00008a00 <uart_nrfx_irq_tx_ready_complete>:

/** Interrupt driven transfer empty function */
static int uart_nrfx_irq_tx_ready_complete(const struct device *dev)
{
    8a00:	b508      	push	{r3, lr}
    return p_reg->INTENSET & mask;
    8a02:	4b07      	ldr	r3, [pc, #28]	; (8a20 <uart_nrfx_irq_tx_ready_complete+0x20>)
    8a04:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
	 * called after the TX interrupt is requested to be disabled but before
	 * the disabling is actually performed (in the IRQ handler).
	 */
	return nrf_uart_int_enable_check(uart0_addr,
					 NRF_UART_INT_MASK_TXDRDY) &&
	       !disable_tx_irq &&
    8a08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    8a0c:	d004      	beq.n	8a18 <uart_nrfx_irq_tx_ready_complete+0x18>
    8a0e:	4b05      	ldr	r3, [pc, #20]	; (8a24 <uart_nrfx_irq_tx_ready_complete+0x24>)
    8a10:	781b      	ldrb	r3, [r3, #0]
					 NRF_UART_INT_MASK_TXDRDY) &&
    8a12:	b913      	cbnz	r3, 8a1a <uart_nrfx_irq_tx_ready_complete+0x1a>
	       event_txdrdy_check();
    8a14:	f7ff ff9e 	bl	8954 <event_txdrdy_check>
}
    8a18:	bd08      	pop	{r3, pc}
	       !disable_tx_irq &&
    8a1a:	2000      	movs	r0, #0
    8a1c:	e7fc      	b.n	8a18 <uart_nrfx_irq_tx_ready_complete+0x18>
    8a1e:	bf00      	nop
    8a20:	40002000 	.word	0x40002000
    8a24:	200037fa 	.word	0x200037fa

00008a28 <uart_nrfx_irq_rx_ready>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8a28:	4b03      	ldr	r3, [pc, #12]	; (8a38 <uart_nrfx_irq_rx_ready+0x10>)
    8a2a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108

/** Interrupt driven receiver ready function */
static int uart_nrfx_irq_rx_ready(const struct device *dev)
{
	return nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY);
}
    8a2e:	3800      	subs	r0, #0
    8a30:	bf18      	it	ne
    8a32:	2001      	movne	r0, #1
    8a34:	4770      	bx	lr
    8a36:	bf00      	nop
    8a38:	40002000 	.word	0x40002000

00008a3c <uart_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
    8a3c:	4b02      	ldr	r3, [pc, #8]	; (8a48 <uart_nrfx_irq_err_enable+0xc>)
    8a3e:	f44f 7200 	mov.w	r2, #512	; 0x200
    8a42:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

/** Interrupt driven error enabling function */
static void uart_nrfx_irq_err_enable(const struct device *dev)
{
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_ERROR);
}
    8a46:	4770      	bx	lr
    8a48:	40002000 	.word	0x40002000

00008a4c <uart_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
    8a4c:	4b02      	ldr	r3, [pc, #8]	; (8a58 <uart_nrfx_irq_err_disable+0xc>)
    8a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
    8a52:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

/** Interrupt driven error disabling function */
static void uart_nrfx_irq_err_disable(const struct device *dev)
{
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_ERROR);
}
    8a56:	4770      	bx	lr
    8a58:	40002000 	.word	0x40002000

00008a5c <uart_nrfx_irq_is_pending>:

/** Interrupt driven pending status function */
static int uart_nrfx_irq_is_pending(const struct device *dev)
{
    8a5c:	b508      	push	{r3, lr}
    return p_reg->INTENSET & mask;
    8a5e:	4a0b      	ldr	r2, [pc, #44]	; (8a8c <uart_nrfx_irq_is_pending+0x30>)
    8a60:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	return ((nrf_uart_int_enable_check(uart0_addr,
					   NRF_UART_INT_MASK_TXDRDY) &&
		 uart_nrfx_irq_tx_ready_complete(dev))
		||
    8a64:	061b      	lsls	r3, r3, #24
    8a66:	d405      	bmi.n	8a74 <uart_nrfx_irq_is_pending+0x18>
    8a68:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
    8a6c:	f010 0004 	ands.w	r0, r0, #4
    8a70:	d106      	bne.n	8a80 <uart_nrfx_irq_is_pending+0x24>
		(nrf_uart_int_enable_check(uart0_addr,
					   NRF_UART_INT_MASK_RXDRDY) &&
		 uart_nrfx_irq_rx_ready(dev)));
}
    8a72:	bd08      	pop	{r3, pc}
		 uart_nrfx_irq_tx_ready_complete(dev))
    8a74:	f7ff ffc4 	bl	8a00 <uart_nrfx_irq_tx_ready_complete>
					   NRF_UART_INT_MASK_TXDRDY) &&
    8a78:	2800      	cmp	r0, #0
    8a7a:	d0f5      	beq.n	8a68 <uart_nrfx_irq_is_pending+0xc>
		||
    8a7c:	2001      	movs	r0, #1
    8a7e:	e7f8      	b.n	8a72 <uart_nrfx_irq_is_pending+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8a80:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
					   NRF_UART_INT_MASK_RXDRDY) &&
    8a84:	3800      	subs	r0, #0
    8a86:	bf18      	it	ne
    8a88:	2001      	movne	r0, #1
    8a8a:	e7f2      	b.n	8a72 <uart_nrfx_irq_is_pending+0x16>
    8a8c:	40002000 	.word	0x40002000

00008a90 <uart_nrfx_irq_callback_set>:
static void uart_nrfx_irq_callback_set(const struct device *dev,
				       uart_irq_callback_user_data_t cb,
				       void *cb_data)
{
	(void)dev;
	irq_callback = cb;
    8a90:	4b02      	ldr	r3, [pc, #8]	; (8a9c <uart_nrfx_irq_callback_set+0xc>)
    8a92:	6019      	str	r1, [r3, #0]
	irq_cb_data = cb_data;
    8a94:	4b02      	ldr	r3, [pc, #8]	; (8aa0 <uart_nrfx_irq_callback_set+0x10>)
    8a96:	601a      	str	r2, [r3, #0]
}
    8a98:	4770      	bx	lr
    8a9a:	bf00      	nop
    8a9c:	20003370 	.word	0x20003370
    8aa0:	2000336c 	.word	0x2000336c

00008aa4 <uart_nrfx_irq_tx_enable>:
{
    8aa4:	b508      	push	{r3, lr}
	disable_tx_irq = false;
    8aa6:	4b0f      	ldr	r3, [pc, #60]	; (8ae4 <uart_nrfx_irq_tx_enable+0x40>)
    8aa8:	2200      	movs	r2, #0
    8aaa:	701a      	strb	r2, [r3, #0]
	pm_device_busy_set(dev);
    8aac:	f004 fd8d 	bl	d5ca <pm_device_busy_set>
    p_reg->TXD = txd;
}

NRF_STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8ab0:	4b0d      	ldr	r3, [pc, #52]	; (8ae8 <uart_nrfx_irq_tx_enable+0x44>)
    8ab2:	2201      	movs	r2, #1
    8ab4:	609a      	str	r2, [r3, #8]
    p_reg->INTENSET = mask;
    8ab6:	2280      	movs	r2, #128	; 0x80
    8ab8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    8abc:	f04f 0220 	mov.w	r2, #32
    8ac0:	f3ef 8311 	mrs	r3, BASEPRI
    8ac4:	f382 8812 	msr	BASEPRI_MAX, r2
    8ac8:	f3bf 8f6f 	isb	sy
	if (uart_sw_event_txdrdy) {
    8acc:	4a07      	ldr	r2, [pc, #28]	; (8aec <uart_nrfx_irq_tx_enable+0x48>)
    8ace:	7812      	ldrb	r2, [r2, #0]
    8ad0:	b11a      	cbz	r2, 8ada <uart_nrfx_irq_tx_enable+0x36>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8ad2:	4a07      	ldr	r2, [pc, #28]	; (8af0 <uart_nrfx_irq_tx_enable+0x4c>)
    8ad4:	2104      	movs	r1, #4
    8ad6:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	__asm__ volatile(
    8ada:	f383 8811 	msr	BASEPRI, r3
    8ade:	f3bf 8f6f 	isb	sy
}
    8ae2:	bd08      	pop	{r3, pc}
    8ae4:	200037fa 	.word	0x200037fa
    8ae8:	40002000 	.word	0x40002000
    8aec:	200037fb 	.word	0x200037fb
    8af0:	e000e100 	.word	0xe000e100

00008af4 <uart_nrfx_isr>:
 * This simply calls the callback function, if one exists.
 *
 * @param arg Argument to ISR.
 */
static void uart_nrfx_isr(const struct device *dev)
{
    8af4:	b510      	push	{r4, lr}
	if (disable_tx_irq &&
    8af6:	4c12      	ldr	r4, [pc, #72]	; (8b40 <uart_nrfx_isr+0x4c>)
    8af8:	4b12      	ldr	r3, [pc, #72]	; (8b44 <uart_nrfx_isr+0x50>)
    8afa:	7821      	ldrb	r1, [r4, #0]
{
    8afc:	4602      	mov	r2, r0
	if (disable_tx_irq &&
    8afe:	b161      	cbz	r1, 8b1a <uart_nrfx_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8b00:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
    8b04:	b149      	cbz	r1, 8b1a <uart_nrfx_isr+0x26>
    p_reg->INTENCLR = mask;
    8b06:	2280      	movs	r2, #128	; 0x80
    8b08:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8b0c:	2201      	movs	r2, #1
    8b0e:	60da      	str	r2, [r3, #12]
		nrf_uart_task_trigger(uart0_addr, NRF_UART_TASK_STOPTX);

		/* The transaction is over. It is okay to enter the deep sleep
		 * mode if needed.
		 */
		pm_device_busy_clear(dev);
    8b10:	f004 fd6b 	bl	d5ea <pm_device_busy_clear>

		disable_tx_irq = false;
    8b14:	2300      	movs	r3, #0
    8b16:	7023      	strb	r3, [r4, #0]
	}

	if (irq_callback) {
		irq_callback(dev, irq_cb_data);
	}
}
    8b18:	bd10      	pop	{r4, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8b1a:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_ERROR)) {
    8b1e:	b121      	cbz	r1, 8b2a <uart_nrfx_isr+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8b20:	2100      	movs	r1, #0
    8b22:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    8b26:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (irq_callback) {
    8b2a:	4b07      	ldr	r3, [pc, #28]	; (8b48 <uart_nrfx_isr+0x54>)
    8b2c:	681b      	ldr	r3, [r3, #0]
    8b2e:	2b00      	cmp	r3, #0
    8b30:	d0f2      	beq.n	8b18 <uart_nrfx_isr+0x24>
		irq_callback(dev, irq_cb_data);
    8b32:	4906      	ldr	r1, [pc, #24]	; (8b4c <uart_nrfx_isr+0x58>)
}
    8b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_callback(dev, irq_cb_data);
    8b38:	6809      	ldr	r1, [r1, #0]
    8b3a:	4610      	mov	r0, r2
    8b3c:	4718      	bx	r3
    8b3e:	bf00      	nop
    8b40:	200037fa 	.word	0x200037fa
    8b44:	40002000 	.word	0x40002000
    8b48:	20003370 	.word	0x20003370
    8b4c:	2000336c 	.word	0x2000336c

00008b50 <uart_nrfx_configure>:
{
    8b50:	b510      	push	{r4, lr}
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    8b52:	794b      	ldrb	r3, [r1, #5]
    8b54:	2b01      	cmp	r3, #1
    8b56:	d11c      	bne.n	8b92 <uart_nrfx_configure+0x42>
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    8b58:	798b      	ldrb	r3, [r1, #6]
    8b5a:	2b03      	cmp	r3, #3
    8b5c:	d119      	bne.n	8b92 <uart_nrfx_configure+0x42>
	switch (cfg->flow_ctrl) {
    8b5e:	79cb      	ldrb	r3, [r1, #7]
    8b60:	b9bb      	cbnz	r3, 8b92 <uart_nrfx_configure+0x42>
	switch (cfg->parity) {
    8b62:	790a      	ldrb	r2, [r1, #4]
    8b64:	b112      	cbz	r2, 8b6c <uart_nrfx_configure+0x1c>
    8b66:	2a02      	cmp	r2, #2
    8b68:	d113      	bne.n	8b92 <uart_nrfx_configure+0x42>
    8b6a:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    8b6c:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
    8b6e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    8b72:	d05e      	beq.n	8c32 <uart_nrfx_configure+0xe2>
    8b74:	d82b      	bhi.n	8bce <uart_nrfx_configure+0x7e>
    8b76:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    8b7a:	d05c      	beq.n	8c36 <uart_nrfx_configure+0xe6>
    8b7c:	d814      	bhi.n	8ba8 <uart_nrfx_configure+0x58>
    8b7e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    8b82:	d05a      	beq.n	8c3a <uart_nrfx_configure+0xea>
    8b84:	d808      	bhi.n	8b98 <uart_nrfx_configure+0x48>
    8b86:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    8b8a:	d059      	beq.n	8c40 <uart_nrfx_configure+0xf0>
    8b8c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    8b90:	d059      	beq.n	8c46 <uart_nrfx_configure+0xf6>
    8b92:	f06f 0085 	mvn.w	r0, #133	; 0x85
    8b96:	e04b      	b.n	8c30 <uart_nrfx_configure+0xe0>
    8b98:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    8b9c:	d056      	beq.n	8c4c <uart_nrfx_configure+0xfc>
    8b9e:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    8ba2:	d1f6      	bne.n	8b92 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    8ba4:	4b33      	ldr	r3, [pc, #204]	; (8c74 <uart_nrfx_configure+0x124>)
    8ba6:	e039      	b.n	8c1c <uart_nrfx_configure+0xcc>
	switch (baudrate) {
    8ba8:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    8bac:	d051      	beq.n	8c52 <uart_nrfx_configure+0x102>
    8bae:	d807      	bhi.n	8bc0 <uart_nrfx_configure+0x70>
    8bb0:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    8bb4:	d04f      	beq.n	8c56 <uart_nrfx_configure+0x106>
    8bb6:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    8bba:	d1ea      	bne.n	8b92 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    8bbc:	4b2e      	ldr	r3, [pc, #184]	; (8c78 <uart_nrfx_configure+0x128>)
    8bbe:	e02d      	b.n	8c1c <uart_nrfx_configure+0xcc>
	switch (baudrate) {
    8bc0:	f647 2412 	movw	r4, #31250	; 0x7a12
    8bc4:	42a3      	cmp	r3, r4
    8bc6:	d1e4      	bne.n	8b92 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    8bc8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    8bcc:	e026      	b.n	8c1c <uart_nrfx_configure+0xcc>
	switch (baudrate) {
    8bce:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    8bd2:	d043      	beq.n	8c5c <uart_nrfx_configure+0x10c>
    8bd4:	d811      	bhi.n	8bfa <uart_nrfx_configure+0xaa>
    8bd6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    8bda:	d041      	beq.n	8c60 <uart_nrfx_configure+0x110>
    8bdc:	d808      	bhi.n	8bf0 <uart_nrfx_configure+0xa0>
    8bde:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    8be2:	42a3      	cmp	r3, r4
    8be4:	d03e      	beq.n	8c64 <uart_nrfx_configure+0x114>
    8be6:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    8bea:	d1d2      	bne.n	8b92 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    8bec:	4b23      	ldr	r3, [pc, #140]	; (8c7c <uart_nrfx_configure+0x12c>)
    8bee:	e015      	b.n	8c1c <uart_nrfx_configure+0xcc>
	switch (baudrate) {
    8bf0:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    8bf4:	d1cd      	bne.n	8b92 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    8bf6:	4b22      	ldr	r3, [pc, #136]	; (8c80 <uart_nrfx_configure+0x130>)
    8bf8:	e010      	b.n	8c1c <uart_nrfx_configure+0xcc>
	switch (baudrate) {
    8bfa:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    8bfe:	d034      	beq.n	8c6a <uart_nrfx_configure+0x11a>
    8c00:	d807      	bhi.n	8c12 <uart_nrfx_configure+0xc2>
    8c02:	4c20      	ldr	r4, [pc, #128]	; (8c84 <uart_nrfx_configure+0x134>)
    8c04:	42a3      	cmp	r3, r4
    8c06:	d032      	beq.n	8c6e <uart_nrfx_configure+0x11e>
    8c08:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    8c0c:	d1c1      	bne.n	8b92 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    8c0e:	4b1e      	ldr	r3, [pc, #120]	; (8c88 <uart_nrfx_configure+0x138>)
    8c10:	e004      	b.n	8c1c <uart_nrfx_configure+0xcc>
	switch (baudrate) {
    8c12:	4c1e      	ldr	r4, [pc, #120]	; (8c8c <uart_nrfx_configure+0x13c>)
    8c14:	42a3      	cmp	r3, r4
    8c16:	d1bc      	bne.n	8b92 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    8c18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uart_nrfx_data *data = dev->data;
    8c1c:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    8c1e:	481c      	ldr	r0, [pc, #112]	; (8c90 <uart_nrfx_configure+0x140>)
    8c20:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    8c24:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
    8c28:	c903      	ldmia	r1, {r0, r1}
    8c2a:	e884 0003 	stmia.w	r4, {r0, r1}
	return 0;
    8c2e:	2000      	movs	r0, #0
}
    8c30:	bd10      	pop	{r4, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    8c32:	4b18      	ldr	r3, [pc, #96]	; (8c94 <uart_nrfx_configure+0x144>)
    8c34:	e7f2      	b.n	8c1c <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    8c36:	4b18      	ldr	r3, [pc, #96]	; (8c98 <uart_nrfx_configure+0x148>)
    8c38:	e7f0      	b.n	8c1c <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    8c3a:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    8c3e:	e7ed      	b.n	8c1c <uart_nrfx_configure+0xcc>
		nrf_baudrate = 0x00014000;
    8c40:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    8c44:	e7ea      	b.n	8c1c <uart_nrfx_configure+0xcc>
	switch (baudrate) {
    8c46:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    8c4a:	e7e7      	b.n	8c1c <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    8c4c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    8c50:	e7e4      	b.n	8c1c <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    8c52:	4b12      	ldr	r3, [pc, #72]	; (8c9c <uart_nrfx_configure+0x14c>)
    8c54:	e7e2      	b.n	8c1c <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    8c56:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    8c5a:	e7df      	b.n	8c1c <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    8c5c:	4b10      	ldr	r3, [pc, #64]	; (8ca0 <uart_nrfx_configure+0x150>)
    8c5e:	e7dd      	b.n	8c1c <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    8c60:	4b10      	ldr	r3, [pc, #64]	; (8ca4 <uart_nrfx_configure+0x154>)
    8c62:	e7db      	b.n	8c1c <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    8c64:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    8c68:	e7d8      	b.n	8c1c <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    8c6a:	4b0f      	ldr	r3, [pc, #60]	; (8ca8 <uart_nrfx_configure+0x158>)
    8c6c:	e7d6      	b.n	8c1c <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    8c6e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    8c72:	e7d3      	b.n	8c1c <uart_nrfx_configure+0xcc>
    8c74:	0013b000 	.word	0x0013b000
    8c78:	004ea000 	.word	0x004ea000
    8c7c:	00ebf000 	.word	0x00ebf000
    8c80:	01d7e000 	.word	0x01d7e000
    8c84:	0003d090 	.word	0x0003d090
    8c88:	075f7000 	.word	0x075f7000
    8c8c:	000f4240 	.word	0x000f4240
    8c90:	40002000 	.word	0x40002000
    8c94:	009d5000 	.word	0x009d5000
    8c98:	00275000 	.word	0x00275000
    8c9c:	0075f000 	.word	0x0075f000
    8ca0:	03afb000 	.word	0x03afb000
    8ca4:	013a9000 	.word	0x013a9000
    8ca8:	0ebed000 	.word	0x0ebed000

00008cac <uart_nrfx_poll_out>:
{
    8cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8cae:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
    8cb0:	f006 fd65 	bl	f77e <k_is_in_isr>
    8cb4:	4d1b      	ldr	r5, [pc, #108]	; (8d24 <uart_nrfx_poll_out+0x78>)
    8cb6:	bb90      	cbnz	r0, 8d1e <uart_nrfx_poll_out+0x72>
    8cb8:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    8cba:	2701      	movs	r7, #1
    8cbc:	f3bf 8f5b 	dmb	ish
    8cc0:	e855 3f00 	ldrex	r3, [r5]
    8cc4:	2b00      	cmp	r3, #0
    8cc6:	d103      	bne.n	8cd0 <uart_nrfx_poll_out+0x24>
    8cc8:	e845 7200 	strex	r2, r7, [r5]
    8ccc:	2a00      	cmp	r2, #0
    8cce:	d1f7      	bne.n	8cc0 <uart_nrfx_poll_out+0x14>
    8cd0:	f3bf 8f5b 	dmb	ish
				  (atomic_val_t) 1) == false) {
    8cd4:	d007      	beq.n	8ce6 <uart_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
    8cd6:	2021      	movs	r0, #33	; 0x21
    8cd8:	2100      	movs	r1, #0
			if (--safety_cnt == 0) {
    8cda:	3c01      	subs	r4, #1
    8cdc:	f002 fd80 	bl	b7e0 <z_impl_k_sleep>
    8ce0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    8ce4:	d1ea      	bne.n	8cbc <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8ce6:	4b10      	ldr	r3, [pc, #64]	; (8d28 <uart_nrfx_poll_out+0x7c>)
    8ce8:	2200      	movs	r2, #0
    8cea:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    8cee:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
	uart_sw_event_txdrdy = 0U;
    8cf2:	490e      	ldr	r1, [pc, #56]	; (8d2c <uart_nrfx_poll_out+0x80>)
    8cf4:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8cf6:	2201      	movs	r2, #1
    8cf8:	609a      	str	r2, [r3, #8]
    p_reg->TXD = txd;
    8cfa:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    8cfe:	f8c3 651c 	str.w	r6, [r3, #1308]	; 0x51c
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
    8d02:	f7ff fe27 	bl	8954 <event_txdrdy_check>
    8d06:	b920      	cbnz	r0, 8d12 <uart_nrfx_poll_out+0x66>
    8d08:	2001      	movs	r0, #1
    8d0a:	f006 fc39 	bl	f580 <nrfx_busy_wait>
    8d0e:	3c01      	subs	r4, #1
    8d10:	d1f7      	bne.n	8d02 <uart_nrfx_poll_out+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8d12:	4b05      	ldr	r3, [pc, #20]	; (8d28 <uart_nrfx_poll_out+0x7c>)
    8d14:	2201      	movs	r2, #1
    8d16:	60da      	str	r2, [r3, #12]
	*lock = 0;
    8d18:	2300      	movs	r3, #0
    8d1a:	602b      	str	r3, [r5, #0]
}
    8d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
    8d1e:	2301      	movs	r3, #1
    8d20:	602b      	str	r3, [r5, #0]
    8d22:	e7e0      	b.n	8ce6 <uart_nrfx_poll_out+0x3a>
    8d24:	20003368 	.word	0x20003368
    8d28:	40002000 	.word	0x40002000
    8d2c:	200037fb 	.word	0x200037fb

00008d30 <uart_nrfx_pm_action>:
};

#ifdef CONFIG_PM_DEVICE
static int uart_nrfx_pm_action(const struct device *dev,
			       enum pm_device_action action)
{
    8d30:	b510      	push	{r4, lr}
	const struct uart_nrfx_config *config = dev->config;
	int ret;

	switch (action) {
    8d32:	460c      	mov	r4, r1
	const struct uart_nrfx_config *config = dev->config;
    8d34:	6843      	ldr	r3, [r0, #4]
	switch (action) {
    8d36:	b171      	cbz	r1, 8d56 <uart_nrfx_pm_action+0x26>
    8d38:	2901      	cmp	r1, #1
    8d3a:	d116      	bne.n	8d6a <uart_nrfx_pm_action+0x3a>
	case PM_DEVICE_ACTION_RESUME:
		if (IS_ENABLED(CONFIG_UART_0_GPIO_MANAGEMENT)) {
			ret = pinctrl_apply_state(config->pcfg,
    8d3c:	6818      	ldr	r0, [r3, #0]
    8d3e:	2100      	movs	r1, #0
    8d40:	f006 fb3e 	bl	f3c0 <pinctrl_apply_state>
						  PINCTRL_STATE_DEFAULT);
			if (ret < 0) {
    8d44:	2800      	cmp	r0, #0
    8d46:	db05      	blt.n	8d54 <uart_nrfx_pm_action+0x24>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    8d48:	4b09      	ldr	r3, [pc, #36]	; (8d70 <uart_nrfx_pm_action+0x40>)
    8d4a:	2204      	movs	r2, #4
    8d4c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		break;
	default:
		return -ENOTSUP;
	}

	return 0;
    8d50:	2000      	movs	r0, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8d52:	601c      	str	r4, [r3, #0]
}
    8d54:	bd10      	pop	{r4, pc}
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
    8d56:	4a06      	ldr	r2, [pc, #24]	; (8d70 <uart_nrfx_pm_action+0x40>)
    8d58:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
			ret = pinctrl_apply_state(config->pcfg,
    8d5c:	6818      	ldr	r0, [r3, #0]
    8d5e:	2101      	movs	r1, #1
    8d60:	f006 fb2e 	bl	f3c0 <pinctrl_apply_state>
			if (ret < 0) {
    8d64:	ea00 70e0 	and.w	r0, r0, r0, asr #31
    8d68:	e7f4      	b.n	8d54 <uart_nrfx_pm_action+0x24>
	switch (action) {
    8d6a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    8d6e:	e7f1      	b.n	8d54 <uart_nrfx_pm_action+0x24>
    8d70:	40002000 	.word	0x40002000

00008d74 <uart_nrfx_init>:
{
    8d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d76:	4d13      	ldr	r5, [pc, #76]	; (8dc4 <uart_nrfx_init+0x50>)
	const struct uart_nrfx_config *config = dev->config;
    8d78:	6843      	ldr	r3, [r0, #4]
	struct uart_nrfx_data *data = dev->data;
    8d7a:	6907      	ldr	r7, [r0, #16]
    8d7c:	2100      	movs	r1, #0
    8d7e:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
{
    8d82:	4606      	mov	r6, r0
	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
    8d84:	6818      	ldr	r0, [r3, #0]
    8d86:	f006 fb1b 	bl	f3c0 <pinctrl_apply_state>
	if (err < 0) {
    8d8a:	1e04      	subs	r4, r0, #0
    8d8c:	db17      	blt.n	8dbe <uart_nrfx_init+0x4a>
	err = uart_nrfx_configure(dev, &data->uart_config);
    8d8e:	4639      	mov	r1, r7
    8d90:	4630      	mov	r0, r6
    8d92:	f7ff fedd 	bl	8b50 <uart_nrfx_configure>
	if (err) {
    8d96:	4604      	mov	r4, r0
    8d98:	b988      	cbnz	r0, 8dbe <uart_nrfx_init+0x4a>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    8d9a:	2304      	movs	r3, #4
    8d9c:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8da0:	f8c5 0108 	str.w	r0, [r5, #264]	; 0x108
    8da4:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
	uart_sw_event_txdrdy = 1U;
    8da8:	4b07      	ldr	r3, [pc, #28]	; (8dc8 <uart_nrfx_init+0x54>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8daa:	2101      	movs	r1, #1
    8dac:	6029      	str	r1, [r5, #0]
	IRQ_CONNECT(IRQN,
    8dae:	4602      	mov	r2, r0
    8db0:	2002      	movs	r0, #2
	uart_sw_event_txdrdy = 1U;
    8db2:	7019      	strb	r1, [r3, #0]
	IRQ_CONNECT(IRQN,
    8db4:	f7fd fe0c 	bl	69d0 <z_arm_irq_priority_set>
	irq_enable(IRQN);
    8db8:	2002      	movs	r0, #2
    8dba:	f7fd fdd9 	bl	6970 <arch_irq_enable>
}
    8dbe:	4620      	mov	r0, r4
    8dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8dc2:	bf00      	nop
    8dc4:	40002000 	.word	0x40002000
    8dc8:	200037fb 	.word	0x200037fb

00008dcc <uart_nrfx_fifo_fill>:
{
    8dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	while ((len - num_tx > 0) &&
    8dd0:	2400      	movs	r4, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8dd2:	4e0c      	ldr	r6, [pc, #48]	; (8e04 <uart_nrfx_fifo_fill+0x38>)
	uart_sw_event_txdrdy = 0U;
    8dd4:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8e08 <uart_nrfx_fifo_fill+0x3c>
    8dd8:	4627      	mov	r7, r4
	while ((len - num_tx > 0) &&
    8dda:	b2e5      	uxtb	r5, r4
    8ddc:	42aa      	cmp	r2, r5
    8dde:	dd03      	ble.n	8de8 <uart_nrfx_fifo_fill+0x1c>
	       event_txdrdy_check()) {
    8de0:	f7ff fdb8 	bl	8954 <event_txdrdy_check>
	while ((len - num_tx > 0) &&
    8de4:	3401      	adds	r4, #1
    8de6:	b910      	cbnz	r0, 8dee <uart_nrfx_fifo_fill+0x22>
}
    8de8:	4628      	mov	r0, r5
    8dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8dee:	f8c6 711c 	str.w	r7, [r6, #284]	; 0x11c
    8df2:	f8d6 311c 	ldr.w	r3, [r6, #284]	; 0x11c
    p_reg->TXD = txd;
    8df6:	5d4b      	ldrb	r3, [r1, r5]
	uart_sw_event_txdrdy = 0U;
    8df8:	f888 7000 	strb.w	r7, [r8]
    8dfc:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
}
    8e00:	e7eb      	b.n	8dda <uart_nrfx_fifo_fill+0xe>
    8e02:	bf00      	nop
    8e04:	40002000 	.word	0x40002000
    8e08:	200037fb 	.word	0x200037fb

00008e0c <spi_nrfx_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int spi_nrfx_init(const struct device *dev)
{
    8e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
    8e10:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    8e12:	6905      	ldr	r5, [r0, #16]
	int err;

	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    8e14:	6a20      	ldr	r0, [r4, #32]
{
    8e16:	af00      	add	r7, sp, #0
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    8e18:	2100      	movs	r1, #0
    8e1a:	f006 fb00 	bl	f41e <pinctrl_apply_state>
	if (err < 0) {
    8e1e:	2800      	cmp	r0, #0
    8e20:	db2d      	blt.n	8e7e <spi_nrfx_init+0x72>
		return err;
	}

	dev_config->irq_connect();
    8e22:	69e3      	ldr	r3, [r4, #28]
    8e24:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    8e26:	68ac      	ldr	r4, [r5, #8]

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
    8e28:	2601      	movs	r6, #1
    8e2a:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    8e2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    8e32:	429c      	cmp	r4, r3
    8e34:	d304      	bcc.n	8e40 <spi_nrfx_init+0x34>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
    8e36:	4628      	mov	r0, r5
    8e38:	f006 fb50 	bl	f4dc <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
    8e3c:	2000      	movs	r0, #0

	return 0;
    8e3e:	e01e      	b.n	8e7e <spi_nrfx_init+0x72>
		if (!device_is_ready(cs_gpio->port)) {
    8e40:	6820      	ldr	r0, [r4, #0]
    8e42:	f006 fc75 	bl	f730 <z_device_is_ready>
    8e46:	b9e8      	cbnz	r0, 8e84 <spi_nrfx_init+0x78>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
    8e48:	481f      	ldr	r0, [pc, #124]	; (8ec8 <spi_nrfx_init+0xbc>)
    8e4a:	6803      	ldr	r3, [r0, #0]
    8e4c:	0759      	lsls	r1, r3, #29
    8e4e:	d014      	beq.n	8e7a <spi_nrfx_init+0x6e>
    8e50:	6823      	ldr	r3, [r4, #0]
    8e52:	6819      	ldr	r1, [r3, #0]
    8e54:	7923      	ldrb	r3, [r4, #4]
    8e56:	466c      	mov	r4, sp
    8e58:	b08a      	sub	sp, #40	; 0x28
    8e5a:	466a      	mov	r2, sp
    8e5c:	4d1b      	ldr	r5, [pc, #108]	; (8ecc <spi_nrfx_init+0xc0>)
    8e5e:	61d3      	str	r3, [r2, #28]
    8e60:	f44f 7300 	mov.w	r3, #512	; 0x200
    8e64:	8413      	strh	r3, [r2, #32]
    8e66:	4b1a      	ldr	r3, [pc, #104]	; (8ed0 <spi_nrfx_init+0xc4>)
    8e68:	e9c2 5105 	strd	r5, r1, [r2, #20]
    8e6c:	f842 3f10 	str.w	r3, [r2, #16]!
    8e70:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    8e74:	f006 fad0 	bl	f418 <z_log_msg_static_create.constprop.0>
    8e78:	46a5      	mov	sp, r4
			return -ENODEV;
    8e7a:	f06f 0012 	mvn.w	r0, #18
}
    8e7e:	46bd      	mov	sp, r7
    8e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
    8e84:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
    8e86:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
    8e88:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
    8e8a:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
    8e8e:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    8e92:	f8de c000 	ldr.w	ip, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    8e96:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
    8e98:	bf54      	ite	pl
    8e9a:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    8e9e:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    8ea2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    8ea6:	fa06 f801 	lsl.w	r8, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    8eaa:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    8eac:	bf4c      	ite	mi
    8eae:	ea48 030c 	orrmi.w	r3, r8, ip
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    8eb2:	ea2c 0308 	bicpl.w	r3, ip, r8
    8eb6:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
    8eba:	f8d9 3000 	ldr.w	r3, [r9]
    8ebe:	4798      	blx	r3
		if (ret < 0) {
    8ec0:	2800      	cmp	r0, #0
    8ec2:	dbdc      	blt.n	8e7e <spi_nrfx_init+0x72>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    8ec4:	3408      	adds	r4, #8
    8ec6:	e7b0      	b.n	8e2a <spi_nrfx_init+0x1e>
    8ec8:	20000310 	.word	0x20000310
    8ecc:	00013344 	.word	0x00013344
    8ed0:	01000004 	.word	0x01000004

00008ed4 <transfer_next_chunk>:
{
    8ed4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    8ed6:	4605      	mov	r5, r0
	const struct spi_nrfx_config *dev_config = dev->config;
    8ed8:	6840      	ldr	r0, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    8eda:	692a      	ldr	r2, [r5, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    8edc:	6d93      	ldr	r3, [r2, #88]	; 0x58
		return ctx->rx_len;
    8ede:	6e11      	ldr	r1, [r2, #96]	; 0x60
	if (!ctx->tx_len) {
    8ee0:	b9e3      	cbnz	r3, 8f1c <transfer_next_chunk+0x48>
	if (chunk_len > 0) {
    8ee2:	b1a9      	cbz	r1, 8f10 <transfer_next_chunk+0x3c>
		xfer.p_tx_buffer = ctx->tx_buf;
    8ee4:	6d54      	ldr	r4, [r2, #84]	; 0x54
		dev_data->chunk_len = chunk_len;
    8ee6:	6691      	str	r1, [r2, #104]	; 0x68
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    8ee8:	461e      	mov	r6, r3
		xfer.p_tx_buffer = ctx->tx_buf;
    8eea:	460b      	mov	r3, r1
		xfer.p_rx_buffer = ctx->rx_buf;
    8eec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    8eee:	9202      	str	r2, [sp, #8]
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    8ef0:	e9cd 4600 	strd	r4, r6, [sp]
	return !!(ctx->rx_buf && ctx->rx_len);
    8ef4:	b1ea      	cbz	r2, 8f32 <transfer_next_chunk+0x5e>
    8ef6:	2900      	cmp	r1, #0
    8ef8:	bf18      	it	ne
    8efa:	4619      	movne	r1, r3
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    8efc:	9103      	str	r1, [sp, #12]
		result = nrfx_spi_xfer(&dev_config->spi, &xfer, 0);
    8efe:	2200      	movs	r2, #0
    8f00:	4669      	mov	r1, sp
    8f02:	f001 fb97 	bl	a634 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
    8f06:	4b0d      	ldr	r3, [pc, #52]	; (8f3c <transfer_next_chunk+0x68>)
    8f08:	4298      	cmp	r0, r3
    8f0a:	d014      	beq.n	8f36 <transfer_next_chunk+0x62>
		error = -EIO;
    8f0c:	f06f 0104 	mvn.w	r1, #4
	finish_transaction(dev, error);
    8f10:	6928      	ldr	r0, [r5, #16]
}
    8f12:	b004      	add	sp, #16
    8f14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	finish_transaction(dev, error);
    8f18:	f006 bb02 	b.w	f520 <finish_transaction.isra.0>
	} else if (!ctx->rx_len) {
    8f1c:	6d54      	ldr	r4, [r2, #84]	; 0x54
    8f1e:	b111      	cbz	r1, 8f26 <transfer_next_chunk+0x52>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    8f20:	428b      	cmp	r3, r1
    8f22:	bf28      	it	cs
    8f24:	460b      	movcs	r3, r1
		return ctx->tx_len;
    8f26:	2c00      	cmp	r4, #0
		dev_data->chunk_len = chunk_len;
    8f28:	6693      	str	r3, [r2, #104]	; 0x68
    8f2a:	bf14      	ite	ne
    8f2c:	461e      	movne	r6, r3
    8f2e:	2600      	moveq	r6, #0
    8f30:	e7dc      	b.n	8eec <transfer_next_chunk+0x18>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    8f32:	4611      	mov	r1, r2
    8f34:	e7e2      	b.n	8efc <transfer_next_chunk+0x28>
}
    8f36:	b004      	add	sp, #16
    8f38:	bd70      	pop	{r4, r5, r6, pc}
    8f3a:	bf00      	nop
    8f3c:	0bad0000 	.word	0x0bad0000

00008f40 <event_handler>:
{
    8f40:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    8f42:	7803      	ldrb	r3, [r0, #0]
{
    8f44:	b086      	sub	sp, #24
    8f46:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    8f48:	2b00      	cmp	r3, #0
    8f4a:	d164      	bne.n	9016 <event_handler+0xd6>
		if (dev_data->chunk_len == 0) {
    8f4c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
    8f4e:	b942      	cbnz	r2, 8f62 <event_handler+0x22>
			finish_transaction(dev_data->dev, -ETIMEDOUT);
    8f50:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    8f52:	6918      	ldr	r0, [r3, #16]
    8f54:	f06f 0173 	mvn.w	r1, #115	; 0x73
}
    8f58:	b006      	add	sp, #24
    8f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			finish_transaction(dev_data->dev, -ETIMEDOUT);
    8f5e:	f006 badf 	b.w	f520 <finish_transaction.isra.0>
	if (!ctx->tx_len) {
    8f62:	6d8b      	ldr	r3, [r1, #88]	; 0x58
    8f64:	b173      	cbz	r3, 8f84 <event_handler+0x44>
	if (len > ctx->tx_len) {
    8f66:	429a      	cmp	r2, r3
    8f68:	d924      	bls.n	8fb4 <event_handler+0x74>
		LOG_ERR("Update exceeds current buffer");
    8f6a:	482c      	ldr	r0, [pc, #176]	; (901c <event_handler+0xdc>)
    8f6c:	6803      	ldr	r3, [r0, #0]
    8f6e:	075a      	lsls	r2, r3, #29
    8f70:	d008      	beq.n	8f84 <event_handler+0x44>
    8f72:	4b2b      	ldr	r3, [pc, #172]	; (9020 <event_handler+0xe0>)
    8f74:	9305      	str	r3, [sp, #20]
    8f76:	aa04      	add	r2, sp, #16
    8f78:	2302      	movs	r3, #2
    8f7a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8f7e:	9304      	str	r3, [sp, #16]
    8f80:	f006 fa4a 	bl	f418 <z_log_msg_static_create.constprop.0>
	if (!ctx->rx_len) {
    8f84:	6e23      	ldr	r3, [r4, #96]	; 0x60
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    8f86:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    8f88:	b173      	cbz	r3, 8fa8 <event_handler+0x68>
	if (len > ctx->rx_len) {
    8f8a:	429a      	cmp	r2, r3
    8f8c:	d92a      	bls.n	8fe4 <event_handler+0xa4>
		LOG_ERR("Update exceeds current buffer");
    8f8e:	4823      	ldr	r0, [pc, #140]	; (901c <event_handler+0xdc>)
    8f90:	6803      	ldr	r3, [r0, #0]
    8f92:	075b      	lsls	r3, r3, #29
    8f94:	d008      	beq.n	8fa8 <event_handler+0x68>
    8f96:	4b22      	ldr	r3, [pc, #136]	; (9020 <event_handler+0xe0>)
    8f98:	9305      	str	r3, [sp, #20]
    8f9a:	aa04      	add	r2, sp, #16
    8f9c:	2302      	movs	r3, #2
    8f9e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8fa2:	9304      	str	r3, [sp, #16]
    8fa4:	f006 fa38 	bl	f418 <z_log_msg_static_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
    8fa8:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
    8faa:	b006      	add	sp, #24
    8fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    8fb0:	f7ff bf90 	b.w	8ed4 <transfer_next_chunk>
	ctx->tx_len -= len;
    8fb4:	1a9b      	subs	r3, r3, r2
    8fb6:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
    8fb8:	b973      	cbnz	r3, 8fd8 <event_handler+0x98>
		++ctx->current_tx;
    8fba:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    8fbc:	3308      	adds	r3, #8
    8fbe:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
    8fc0:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    8fc2:	3b01      	subs	r3, #1
    8fc4:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
    8fc6:	f101 0258 	add.w	r2, r1, #88	; 0x58
    8fca:	f104 0044 	add.w	r0, r4, #68	; 0x44
    8fce:	3148      	adds	r1, #72	; 0x48
    8fd0:	f006 fa0f 	bl	f3f2 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
    8fd4:	6560      	str	r0, [r4, #84]	; 0x54
    8fd6:	e7d5      	b.n	8f84 <event_handler+0x44>
	} else if (ctx->tx_buf) {
    8fd8:	6d4b      	ldr	r3, [r1, #84]	; 0x54
    8fda:	2b00      	cmp	r3, #0
    8fdc:	d0d2      	beq.n	8f84 <event_handler+0x44>
		ctx->tx_buf += dfs * len;
    8fde:	4413      	add	r3, r2
    8fe0:	654b      	str	r3, [r1, #84]	; 0x54
    8fe2:	e7cf      	b.n	8f84 <event_handler+0x44>
	ctx->rx_len -= len;
    8fe4:	1a9b      	subs	r3, r3, r2
    8fe6:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
    8fe8:	b97b      	cbnz	r3, 900a <event_handler+0xca>
		++ctx->current_rx;
    8fea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    8fec:	3308      	adds	r3, #8
    8fee:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
    8ff0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    8ff2:	3b01      	subs	r3, #1
    8ff4:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
    8ff6:	f104 0260 	add.w	r2, r4, #96	; 0x60
    8ffa:	f104 0150 	add.w	r1, r4, #80	; 0x50
    8ffe:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    9002:	f006 f9f6 	bl	f3f2 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
    9006:	65e0      	str	r0, [r4, #92]	; 0x5c
    9008:	e7ce      	b.n	8fa8 <event_handler+0x68>
	} else if (ctx->rx_buf) {
    900a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    900c:	2b00      	cmp	r3, #0
    900e:	d0cb      	beq.n	8fa8 <event_handler+0x68>
		ctx->rx_buf += dfs * len;
    9010:	4413      	add	r3, r2
    9012:	65e3      	str	r3, [r4, #92]	; 0x5c
    9014:	e7c8      	b.n	8fa8 <event_handler+0x68>
}
    9016:	b006      	add	sp, #24
    9018:	bd10      	pop	{r4, pc}
    901a:	bf00      	nop
    901c:	20000310 	.word	0x20000310
    9020:	00013368 	.word	0x00013368

00009024 <spi_nrfx_transceive>:
{
    9024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9028:	b08b      	sub	sp, #44	; 0x2c
    902a:	af00      	add	r7, sp, #0
    902c:	4688      	mov	r8, r1
    902e:	60fb      	str	r3, [r7, #12]
	const struct spi_nrfx_config *dev_config = dev->config;
    9030:	6843      	ldr	r3, [r0, #4]
    9032:	603b      	str	r3, [r7, #0]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    9034:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    9036:	6904      	ldr	r4, [r0, #16]
    9038:	0499      	lsls	r1, r3, #18
{
    903a:	4606      	mov	r6, r0
    903c:	4691      	mov	r9, r2
    903e:	d43a      	bmi.n	90b6 <spi_nrfx_transceive+0x92>
	return z_impl_k_sem_take(sem, timeout);
    9040:	f04f 32ff 	mov.w	r2, #4294967295
    9044:	f04f 33ff 	mov.w	r3, #4294967295
    9048:	f104 0010 	add.w	r0, r4, #16
    904c:	f002 f8ba 	bl	b1c4 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    9050:	f8c4 8004 	str.w	r8, [r4, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    9054:	f8d6 a010 	ldr.w	sl, [r6, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    9058:	6873      	ldr	r3, [r6, #4]
    905a:	60bb      	str	r3, [r7, #8]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    905c:	f89a 306d 	ldrb.w	r3, [sl, #109]	; 0x6d
    9060:	607b      	str	r3, [r7, #4]
    9062:	b123      	cbz	r3, 906e <spi_nrfx_transceive+0x4a>
    9064:	f8da 3000 	ldr.w	r3, [sl]
    9068:	4598      	cmp	r8, r3
    906a:	f000 80e0 	beq.w	922e <spi_nrfx_transceive+0x20a>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    906e:	f8b8 c004 	ldrh.w	ip, [r8, #4]
    9072:	f41c 6f00 	tst.w	ip, #2048	; 0x800
    9076:	d025      	beq.n	90c4 <spi_nrfx_transceive+0xa0>
		LOG_ERR("Half-duplex not supported");
    9078:	48ad      	ldr	r0, [pc, #692]	; (9330 <spi_nrfx_transceive+0x30c>)
    907a:	6803      	ldr	r3, [r0, #0]
    907c:	075a      	lsls	r2, r3, #29
    907e:	d009      	beq.n	9094 <spi_nrfx_transceive+0x70>
    9080:	4bac      	ldr	r3, [pc, #688]	; (9334 <spi_nrfx_transceive+0x310>)
    9082:	627b      	str	r3, [r7, #36]	; 0x24
    9084:	2302      	movs	r3, #2
    9086:	623b      	str	r3, [r7, #32]
    9088:	f107 0220 	add.w	r2, r7, #32
    908c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9090:	f006 f9c2 	bl	f418 <z_log_msg_static_create.constprop.0>
		return -ENOTSUP;
    9094:	f06f 0585 	mvn.w	r5, #133	; 0x85
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    9098:	6823      	ldr	r3, [r4, #0]
    909a:	889b      	ldrh	r3, [r3, #4]
    909c:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    90a0:	d104      	bne.n	90ac <spi_nrfx_transceive+0x88>
		ctx->owner = NULL;
    90a2:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    90a4:	f104 0010 	add.w	r0, r4, #16
    90a8:	f002 f866 	bl	b178 <z_impl_k_sem_give>
}
    90ac:	4628      	mov	r0, r5
    90ae:	372c      	adds	r7, #44	; 0x2c
    90b0:	46bd      	mov	sp, r7
    90b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    90b6:	69a3      	ldr	r3, [r4, #24]
    90b8:	2b00      	cmp	r3, #0
    90ba:	d1c1      	bne.n	9040 <spi_nrfx_transceive+0x1c>
		(k_sem_count_get(&ctx->lock) == 0) &&
    90bc:	6863      	ldr	r3, [r4, #4]
    90be:	4598      	cmp	r8, r3
    90c0:	d1be      	bne.n	9040 <spi_nrfx_transceive+0x1c>
    90c2:	e7c7      	b.n	9054 <spi_nrfx_transceive+0x30>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    90c4:	f01c 0f01 	tst.w	ip, #1
    90c8:	d018      	beq.n	90fc <spi_nrfx_transceive+0xd8>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
    90ca:	4899      	ldr	r0, [pc, #612]	; (9330 <spi_nrfx_transceive+0x30c>)
    90cc:	6803      	ldr	r3, [r0, #0]
    90ce:	075b      	lsls	r3, r3, #29
    90d0:	d011      	beq.n	90f6 <spi_nrfx_transceive+0xd2>
    90d2:	466d      	mov	r5, sp
    90d4:	b088      	sub	sp, #32
    90d6:	6833      	ldr	r3, [r6, #0]
    90d8:	466a      	mov	r2, sp
    90da:	4997      	ldr	r1, [pc, #604]	; (9338 <spi_nrfx_transceive+0x314>)
    90dc:	e9c2 1305 	strd	r1, r3, [r2, #20]
    90e0:	f44f 7300 	mov.w	r3, #512	; 0x200
    90e4:	8393      	strh	r3, [r2, #28]
    90e6:	4b95      	ldr	r3, [pc, #596]	; (933c <spi_nrfx_transceive+0x318>)
    90e8:	f842 3f10 	str.w	r3, [r2, #16]!
    90ec:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    90f0:	f006 f992 	bl	f418 <z_log_msg_static_create.constprop.0>
    90f4:	46ad      	mov	sp, r5
		return -EINVAL;
    90f6:	f06f 0515 	mvn.w	r5, #21
    90fa:	e7cd      	b.n	9098 <spi_nrfx_transceive+0x74>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    90fc:	f01c 0f08 	tst.w	ip, #8
    9100:	d00e      	beq.n	9120 <spi_nrfx_transceive+0xfc>
		LOG_ERR("Loopback mode is not supported");
    9102:	488b      	ldr	r0, [pc, #556]	; (9330 <spi_nrfx_transceive+0x30c>)
    9104:	6803      	ldr	r3, [r0, #0]
    9106:	075e      	lsls	r6, r3, #29
    9108:	d0f5      	beq.n	90f6 <spi_nrfx_transceive+0xd2>
    910a:	4b8d      	ldr	r3, [pc, #564]	; (9340 <spi_nrfx_transceive+0x31c>)
		LOG_ERR("Word sizes other than 8 bits are not supported");
    910c:	627b      	str	r3, [r7, #36]	; 0x24
    910e:	2302      	movs	r3, #2
    9110:	623b      	str	r3, [r7, #32]
    9112:	f107 0220 	add.w	r2, r7, #32
    9116:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    911a:	f006 f97d 	bl	f418 <z_log_msg_static_create.constprop.0>
	if (error == 0) {
    911e:	e7ea      	b.n	90f6 <spi_nrfx_transceive+0xd2>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    9120:	f3cc 1345 	ubfx	r3, ip, #5, #6
    9124:	2b08      	cmp	r3, #8
    9126:	d005      	beq.n	9134 <spi_nrfx_transceive+0x110>
		LOG_ERR("Word sizes other than 8 bits are not supported");
    9128:	4881      	ldr	r0, [pc, #516]	; (9330 <spi_nrfx_transceive+0x30c>)
    912a:	6803      	ldr	r3, [r0, #0]
    912c:	075d      	lsls	r5, r3, #29
    912e:	d0e2      	beq.n	90f6 <spi_nrfx_transceive+0xd2>
    9130:	4b84      	ldr	r3, [pc, #528]	; (9344 <spi_nrfx_transceive+0x320>)
    9132:	e7eb      	b.n	910c <spi_nrfx_transceive+0xe8>
	if (spi_cfg->frequency < 125000) {
    9134:	f8d8 5000 	ldr.w	r5, [r8]
    9138:	4b83      	ldr	r3, [pc, #524]	; (9348 <spi_nrfx_transceive+0x324>)
    913a:	429d      	cmp	r5, r3
    913c:	d805      	bhi.n	914a <spi_nrfx_transceive+0x126>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    913e:	487c      	ldr	r0, [pc, #496]	; (9330 <spi_nrfx_transceive+0x30c>)
    9140:	6803      	ldr	r3, [r0, #0]
    9142:	0759      	lsls	r1, r3, #29
    9144:	d0d7      	beq.n	90f6 <spi_nrfx_transceive+0xd2>
    9146:	4b81      	ldr	r3, [pc, #516]	; (934c <spi_nrfx_transceive+0x328>)
    9148:	e7e0      	b.n	910c <spi_nrfx_transceive+0xe8>
	config = dev_config->def_config;
    914a:	68bb      	ldr	r3, [r7, #8]
    914c:	f103 0b08 	add.w	fp, r3, #8
    9150:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
    9154:	f107 0e10 	add.w	lr, r7, #16
    9158:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    915c:	f8db 3000 	ldr.w	r3, [fp]
    9160:	f8ce 3000 	str.w	r3, [lr]
	if (frequency < 250000) {
    9164:	4b7a      	ldr	r3, [pc, #488]	; (9350 <spi_nrfx_transceive+0x32c>)
    9166:	429d      	cmp	r5, r3
    9168:	d949      	bls.n	91fe <spi_nrfx_transceive+0x1da>
	} else if (frequency < 500000) {
    916a:	4b7a      	ldr	r3, [pc, #488]	; (9354 <spi_nrfx_transceive+0x330>)
    916c:	429d      	cmp	r5, r3
    916e:	d949      	bls.n	9204 <spi_nrfx_transceive+0x1e0>
	} else if (frequency < 1000000) {
    9170:	4b79      	ldr	r3, [pc, #484]	; (9358 <spi_nrfx_transceive+0x334>)
    9172:	429d      	cmp	r5, r3
    9174:	d949      	bls.n	920a <spi_nrfx_transceive+0x1e6>
	} else if (frequency < 2000000) {
    9176:	4b79      	ldr	r3, [pc, #484]	; (935c <spi_nrfx_transceive+0x338>)
    9178:	429d      	cmp	r5, r3
    917a:	d949      	bls.n	9210 <spi_nrfx_transceive+0x1ec>
	} else if (frequency < 4000000) {
    917c:	4b78      	ldr	r3, [pc, #480]	; (9360 <spi_nrfx_transceive+0x33c>)
    917e:	429d      	cmp	r5, r3
    9180:	d949      	bls.n	9216 <spi_nrfx_transceive+0x1f2>
		return NRF_SPI_FREQ_4M;
    9182:	4b78      	ldr	r3, [pc, #480]	; (9364 <spi_nrfx_transceive+0x340>)
    9184:	429d      	cmp	r5, r3
    9186:	bf2c      	ite	cs
    9188:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
    918c:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    9190:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
    9194:	61bd      	str	r5, [r7, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    9196:	f00c 0304 	and.w	r3, ip, #4
    919a:	d03f      	beq.n	921c <spi_nrfx_transceive+0x1f8>
			return NRF_SPI_MODE_2;
    919c:	2b00      	cmp	r3, #0
    919e:	bf14      	ite	ne
    91a0:	2303      	movne	r3, #3
    91a2:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
    91a4:	773b      	strb	r3, [r7, #28]
	if (dev_data->initialized) {
    91a6:	687b      	ldr	r3, [r7, #4]
	if (operation & SPI_TRANSFER_LSB) {
    91a8:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
    91ac:	f887 c01d 	strb.w	ip, [r7, #29]
	if (dev_data->initialized) {
    91b0:	b12b      	cbz	r3, 91be <spi_nrfx_transceive+0x19a>
		nrfx_spi_uninit(&dev_config->spi);
    91b2:	68b8      	ldr	r0, [r7, #8]
    91b4:	f001 f9ec 	bl	a590 <nrfx_spi_uninit>
		dev_data->initialized = false;
    91b8:	2300      	movs	r3, #0
    91ba:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	result = nrfx_spi_init(&dev_config->spi, &config,
    91be:	4a6a      	ldr	r2, [pc, #424]	; (9368 <spi_nrfx_transceive+0x344>)
    91c0:	68b8      	ldr	r0, [r7, #8]
    91c2:	4653      	mov	r3, sl
    91c4:	f107 0110 	add.w	r1, r7, #16
    91c8:	f001 f934 	bl	a434 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
    91cc:	4a67      	ldr	r2, [pc, #412]	; (936c <spi_nrfx_transceive+0x348>)
    91ce:	4290      	cmp	r0, r2
	result = nrfx_spi_init(&dev_config->spi, &config,
    91d0:	4603      	mov	r3, r0
	if (result != NRFX_SUCCESS) {
    91d2:	d027      	beq.n	9224 <spi_nrfx_transceive+0x200>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
    91d4:	4856      	ldr	r0, [pc, #344]	; (9330 <spi_nrfx_transceive+0x30c>)
    91d6:	6802      	ldr	r2, [r0, #0]
    91d8:	0752      	lsls	r2, r2, #29
    91da:	d00d      	beq.n	91f8 <spi_nrfx_transceive+0x1d4>
    91dc:	466d      	mov	r5, sp
    91de:	b088      	sub	sp, #32
    91e0:	466a      	mov	r2, sp
    91e2:	4963      	ldr	r1, [pc, #396]	; (9370 <spi_nrfx_transceive+0x34c>)
    91e4:	e9c2 1305 	strd	r1, r3, [r2, #20]
    91e8:	2303      	movs	r3, #3
    91ea:	f842 3f10 	str.w	r3, [r2, #16]!
    91ee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    91f2:	f006 f911 	bl	f418 <z_log_msg_static_create.constprop.0>
    91f6:	46ad      	mov	sp, r5
		return -EIO;
    91f8:	f06f 0504 	mvn.w	r5, #4
    91fc:	e74c      	b.n	9098 <spi_nrfx_transceive+0x74>
		return NRF_SPI_FREQ_125K;
    91fe:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
    9202:	e7c5      	b.n	9190 <spi_nrfx_transceive+0x16c>
		return NRF_SPI_FREQ_250K;
    9204:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    9208:	e7c2      	b.n	9190 <spi_nrfx_transceive+0x16c>
		return NRF_SPI_FREQ_500K;
    920a:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    920e:	e7bf      	b.n	9190 <spi_nrfx_transceive+0x16c>
		return NRF_SPI_FREQ_1M;
    9210:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    9214:	e7bc      	b.n	9190 <spi_nrfx_transceive+0x16c>
		return NRF_SPI_FREQ_2M;
    9216:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
    921a:	e7b9      	b.n	9190 <spi_nrfx_transceive+0x16c>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    921c:	3b00      	subs	r3, #0
    921e:	bf18      	it	ne
    9220:	2301      	movne	r3, #1
    9222:	e7bf      	b.n	91a4 <spi_nrfx_transceive+0x180>
	dev_data->initialized = true;
    9224:	2301      	movs	r3, #1
    9226:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	ctx->config = spi_cfg;
    922a:	f8ca 8000 	str.w	r8, [sl]
		dev_data->busy = true;
    922e:	2301      	movs	r3, #1
    9230:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    9234:	f1b9 0f00 	cmp.w	r9, #0
    9238:	d171      	bne.n	931e <spi_nrfx_transceive+0x2fa>
    923a:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    923e:	2300      	movs	r3, #0
    9240:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    9242:	f104 0258 	add.w	r2, r4, #88	; 0x58
    9246:	f104 0148 	add.w	r1, r4, #72	; 0x48
    924a:	f104 0044 	add.w	r0, r4, #68	; 0x44
    924e:	f006 f8d0 	bl	f3f2 <spi_context_get_next_buf.constprop.0>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    9252:	68fb      	ldr	r3, [r7, #12]
	ctx->tx_buf = (const uint8_t *)
    9254:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    9256:	2b00      	cmp	r3, #0
    9258:	f040 808e 	bne.w	9378 <spi_nrfx_transceive+0x354>
    925c:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    925e:	2300      	movs	r3, #0
    9260:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    9262:	f104 0260 	add.w	r2, r4, #96	; 0x60
    9266:	f104 0150 	add.w	r1, r4, #80	; 0x50
    926a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    926e:	f006 f8c0 	bl	f3f2 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
    9272:	2500      	movs	r5, #0
	_spi_context_cs_control(ctx, on, false);
    9274:	462a      	mov	r2, r5
	ctx->rx_buf = (uint8_t *)
    9276:	65e0      	str	r0, [r4, #92]	; 0x5c
	_spi_context_cs_control(ctx, on, false);
    9278:	2101      	movs	r1, #1
    927a:	4620      	mov	r0, r4
	ctx->sync_status = 0;
    927c:	6425      	str	r5, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
    927e:	f006 f90b 	bl	f498 <_spi_context_cs_control>
		transfer_next_chunk(dev);
    9282:	4630      	mov	r0, r6
    9284:	f7ff fe26 	bl	8ed4 <transfer_next_chunk>
static inline size_t spi_context_total_tx_len(struct spi_context *ctx)
{
	size_t n;
	size_t total_len = 0;

	for (n = 0; n < ctx->tx_count; ++n) {
    9288:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	size_t total_len = 0;
    928a:	462a      	mov	r2, r5
	for (n = 0; n < ctx->tx_count; ++n) {
    928c:	462b      	mov	r3, r5
    928e:	4283      	cmp	r3, r0
    9290:	d17b      	bne.n	938a <spi_nrfx_transceive+0x366>
}

static inline size_t spi_context_total_rx_len(struct spi_context *ctx)
{
	size_t n;
	size_t total_len = 0;
    9292:	2300      	movs	r3, #0

	for (n = 0; n < ctx->rx_count; ++n) {
    9294:	6d25      	ldr	r5, [r4, #80]	; 0x50
    9296:	4619      	mov	r1, r3
    9298:	42a9      	cmp	r1, r5
    929a:	d17d      	bne.n	9398 <spi_nrfx_transceive+0x374>
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    929c:	4293      	cmp	r3, r2
				     ctx->config->frequency;
    929e:	46a0      	mov	r8, r4
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    92a0:	bf38      	it	cc
    92a2:	4613      	movcc	r3, r2
    92a4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    92a8:	fb02 f503 	mul.w	r5, r2, r3
				     ctx->config->frequency;
    92ac:	f858 3b28 	ldr.w	r3, [r8], #40
    92b0:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    92b4:	681b      	ldr	r3, [r3, #0]
    92b6:	fbb5 f5f3 	udiv	r5, r5, r3
    92ba:	f240 30e7 	movw	r0, #999	; 0x3e7
			timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    92be:	35c8      	adds	r5, #200	; 0xc8
    92c0:	2100      	movs	r1, #0
    92c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    92c6:	2300      	movs	r3, #0
    92c8:	fbe5 010c 	umlal	r0, r1, r5, ip
    92cc:	f7f6 ff06 	bl	dc <__aeabi_uldivmod>
    92d0:	4602      	mov	r2, r0
    92d2:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    92d4:	4640      	mov	r0, r8
    92d6:	f001 ff75 	bl	b1c4 <z_impl_k_sem_take>
		if (k_sem_take(&ctx->sync, timeout)) {
    92da:	2800      	cmp	r0, #0
    92dc:	d063      	beq.n	93a6 <spi_nrfx_transceive+0x382>
			LOG_ERR("Timeout waiting for transfer complete");
    92de:	4814      	ldr	r0, [pc, #80]	; (9330 <spi_nrfx_transceive+0x30c>)
    92e0:	6803      	ldr	r3, [r0, #0]
    92e2:	075b      	lsls	r3, r3, #29
    92e4:	d009      	beq.n	92fa <spi_nrfx_transceive+0x2d6>
    92e6:	4b23      	ldr	r3, [pc, #140]	; (9374 <spi_nrfx_transceive+0x350>)
    92e8:	627b      	str	r3, [r7, #36]	; 0x24
    92ea:	2302      	movs	r3, #2
    92ec:	623b      	str	r3, [r7, #32]
    92ee:	f107 0220 	add.w	r2, r7, #32
    92f2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    92f6:	f006 f88f 	bl	f418 <z_log_msg_static_create.constprop.0>
			dev_data->chunk_len = 0;
    92fa:	2500      	movs	r5, #0
			nrfx_spi_uninit(&dev_config->spi);
    92fc:	6838      	ldr	r0, [r7, #0]
			dev_data->chunk_len = 0;
    92fe:	66a5      	str	r5, [r4, #104]	; 0x68
			nrfx_spi_uninit(&dev_config->spi);
    9300:	f001 f946 	bl	a590 <nrfx_spi_uninit>
			dev_data->initialized = false;
    9304:	f884 506d 	strb.w	r5, [r4, #109]	; 0x6d
			finish_transaction(dev, -ETIMEDOUT);
    9308:	6930      	ldr	r0, [r6, #16]
    930a:	f06f 0173 	mvn.w	r1, #115	; 0x73
    930e:	f006 f907 	bl	f520 <finish_transaction.isra.0>
	z_impl_k_sem_reset(sem);
    9312:	4640      	mov	r0, r8
    9314:	f001 ff7e 	bl	b214 <z_impl_k_sem_reset>
		error = spi_context_wait_for_completion(&dev_data->ctx);
    9318:	f06f 0573 	mvn.w	r5, #115	; 0x73
}
    931c:	e6bc      	b.n	9098 <spi_nrfx_transceive+0x74>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    931e:	f8d9 3000 	ldr.w	r3, [r9]
    9322:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    9324:	2b00      	cmp	r3, #0
    9326:	d08a      	beq.n	923e <spi_nrfx_transceive+0x21a>
    9328:	f8d9 3004 	ldr.w	r3, [r9, #4]
    932c:	e788      	b.n	9240 <spi_nrfx_transceive+0x21c>
    932e:	bf00      	nop
    9330:	20000310 	.word	0x20000310
    9334:	00013386 	.word	0x00013386
    9338:	000133a0 	.word	0x000133a0
    933c:	01000003 	.word	0x01000003
    9340:	000133c2 	.word	0x000133c2
    9344:	000133e1 	.word	0x000133e1
    9348:	0001e847 	.word	0x0001e847
    934c:	00013410 	.word	0x00013410
    9350:	0003d08f 	.word	0x0003d08f
    9354:	0007a11f 	.word	0x0007a11f
    9358:	000f423f 	.word	0x000f423f
    935c:	001e847f 	.word	0x001e847f
    9360:	003d08ff 	.word	0x003d08ff
    9364:	007a1200 	.word	0x007a1200
    9368:	00008f41 	.word	0x00008f41
    936c:	0bad0000 	.word	0x0bad0000
    9370:	00013441 	.word	0x00013441
    9374:	00013468 	.word	0x00013468
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    9378:	68fb      	ldr	r3, [r7, #12]
    937a:	681b      	ldr	r3, [r3, #0]
    937c:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    937e:	2b00      	cmp	r3, #0
    9380:	f43f af6d 	beq.w	925e <spi_nrfx_transceive+0x23a>
    9384:	68fb      	ldr	r3, [r7, #12]
    9386:	685b      	ldr	r3, [r3, #4]
    9388:	e76a      	b.n	9260 <spi_nrfx_transceive+0x23c>
		total_len += ctx->current_tx[n].len;
    938a:	6c61      	ldr	r1, [r4, #68]	; 0x44
    938c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
	for (n = 0; n < ctx->tx_count; ++n) {
    9390:	3301      	adds	r3, #1
		total_len += ctx->current_tx[n].len;
    9392:	6849      	ldr	r1, [r1, #4]
    9394:	440a      	add	r2, r1
	for (n = 0; n < ctx->tx_count; ++n) {
    9396:	e77a      	b.n	928e <spi_nrfx_transceive+0x26a>
		total_len += ctx->current_rx[n].len;
    9398:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    939a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
	for (n = 0; n < ctx->rx_count; ++n) {
    939e:	3101      	adds	r1, #1
		total_len += ctx->current_rx[n].len;
    93a0:	6840      	ldr	r0, [r0, #4]
    93a2:	4403      	add	r3, r0
	for (n = 0; n < ctx->rx_count; ++n) {
    93a4:	e778      	b.n	9298 <spi_nrfx_transceive+0x274>
		status = ctx->sync_status;
    93a6:	6c25      	ldr	r5, [r4, #64]	; 0x40
		if (error == -ETIMEDOUT) {
    93a8:	f115 0f74 	cmn.w	r5, #116	; 0x74
    93ac:	f47f ae74 	bne.w	9098 <spi_nrfx_transceive+0x74>
    93b0:	e7a3      	b.n	92fa <spi_nrfx_transceive+0x2d6>
    93b2:	bf00      	nop

000093b4 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    93b4:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    93b6:	2301      	movs	r3, #1
    93b8:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    93ba:	4a0e      	ldr	r2, [pc, #56]	; (93f4 <compare_int_lock+0x40>)
    93bc:	f3bf 8f5b 	dmb	ish
    93c0:	43dc      	mvns	r4, r3
    93c2:	e852 1f00 	ldrex	r1, [r2]
    93c6:	ea01 0504 	and.w	r5, r1, r4
    93ca:	e842 5600 	strex	r6, r5, [r2]
    93ce:	2e00      	cmp	r6, #0
    93d0:	d1f7      	bne.n	93c2 <compare_int_lock+0xe>
    93d2:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    93d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    93da:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    93dc:	4806      	ldr	r0, [pc, #24]	; (93f8 <compare_int_lock+0x44>)
    93de:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    93e2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    93e6:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    93ea:	420b      	tst	r3, r1
}
    93ec:	bf14      	ite	ne
    93ee:	2001      	movne	r0, #1
    93f0:	2000      	moveq	r0, #0
    93f2:	bd70      	pop	{r4, r5, r6, pc}
    93f4:	20003378 	.word	0x20003378
    93f8:	40011000 	.word	0x40011000

000093fc <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    93fc:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    93fe:	490e      	ldr	r1, [pc, #56]	; (9438 <sys_clock_timeout_handler+0x3c>)
    9400:	e9d1 3400 	ldrd	r3, r4, [r1]
    9404:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    9406:	18c3      	adds	r3, r0, r3
    9408:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    940c:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    9410:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    9414:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    9418:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    941c:	d209      	bcs.n	9432 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    941e:	4b07      	ldr	r3, [pc, #28]	; (943c <sys_clock_timeout_handler+0x40>)
    9420:	681b      	ldr	r3, [r3, #0]
    9422:	0a1a      	lsrs	r2, r3, #8
    9424:	061b      	lsls	r3, r3, #24
    9426:	199c      	adds	r4, r3, r6
    9428:	4b05      	ldr	r3, [pc, #20]	; (9440 <sys_clock_timeout_handler+0x44>)
    942a:	f142 0500 	adc.w	r5, r2, #0
    942e:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    9432:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    9434:	f002 bb40 	b.w	bab8 <sys_clock_announce>
    9438:	20000b68 	.word	0x20000b68
    943c:	2000337c 	.word	0x2000337c
    9440:	20000b70 	.word	0x20000b70

00009444 <compare_int_unlock>:
	if (key) {
    9444:	b311      	cbz	r1, 948c <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9446:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    944a:	2301      	movs	r3, #1
    944c:	4a10      	ldr	r2, [pc, #64]	; (9490 <compare_int_unlock+0x4c>)
    944e:	4083      	lsls	r3, r0
    9450:	e852 cf00 	ldrex	ip, [r2]
    9454:	ea4c 0c03 	orr.w	ip, ip, r3
    9458:	e842 c100 	strex	r1, ip, [r2]
    945c:	2900      	cmp	r1, #0
    945e:	d1f7      	bne.n	9450 <compare_int_unlock+0xc>
    9460:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    9464:	4a0b      	ldr	r2, [pc, #44]	; (9494 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    9466:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    946a:	4083      	lsls	r3, r0
    946c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9470:	4b09      	ldr	r3, [pc, #36]	; (9498 <compare_int_unlock+0x54>)
    9472:	f3bf 8f5b 	dmb	ish
    9476:	681b      	ldr	r3, [r3, #0]
    9478:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    947c:	40c3      	lsrs	r3, r0
    947e:	07db      	lsls	r3, r3, #31
    9480:	bf42      	ittt	mi
    9482:	4b06      	ldrmi	r3, [pc, #24]	; (949c <compare_int_unlock+0x58>)
    9484:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    9488:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    948c:	4770      	bx	lr
    948e:	bf00      	nop
    9490:	20003378 	.word	0x20003378
    9494:	40011000 	.word	0x40011000
    9498:	20003374 	.word	0x20003374
    949c:	e000e100 	.word	0xe000e100

000094a0 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    94a0:	4b0d      	ldr	r3, [pc, #52]	; (94d8 <z_nrf_rtc_timer_read+0x38>)
    94a2:	6818      	ldr	r0, [r3, #0]
    94a4:	0a01      	lsrs	r1, r0, #8
    94a6:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    94a8:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    94ac:	4b0b      	ldr	r3, [pc, #44]	; (94dc <z_nrf_rtc_timer_read+0x3c>)
    94ae:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    94b2:	1818      	adds	r0, r3, r0
    94b4:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    94b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    94bc:	d20a      	bcs.n	94d4 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    94be:	4b08      	ldr	r3, [pc, #32]	; (94e0 <z_nrf_rtc_timer_read+0x40>)
    94c0:	e9d3 2300 	ldrd	r2, r3, [r3]
    94c4:	4290      	cmp	r0, r2
    94c6:	eb71 0303 	sbcs.w	r3, r1, r3
    94ca:	d203      	bcs.n	94d4 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    94cc:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    94d0:	f141 0100 	adc.w	r1, r1, #0
}
    94d4:	4770      	bx	lr
    94d6:	bf00      	nop
    94d8:	2000337c 	.word	0x2000337c
    94dc:	40011000 	.word	0x40011000
    94e0:	20000b70 	.word	0x20000b70

000094e4 <compare_set>:
{
    94e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    94e8:	4616      	mov	r6, r2
    94ea:	461f      	mov	r7, r3
    94ec:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    94ee:	f7ff ff61 	bl	93b4 <compare_int_lock>
    94f2:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    94f4:	f7ff ffd4 	bl	94a0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    94f8:	42b0      	cmp	r0, r6
    94fa:	eb71 0307 	sbcs.w	r3, r1, r7
    94fe:	d251      	bcs.n	95a4 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    9500:	4b3a      	ldr	r3, [pc, #232]	; (95ec <compare_set+0x108>)
    9502:	1a30      	subs	r0, r6, r0
    9504:	eb67 0101 	sbc.w	r1, r7, r1
    9508:	4298      	cmp	r0, r3
    950a:	f171 0100 	sbcs.w	r1, r1, #0
    950e:	d26a      	bcs.n	95e6 <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
    9510:	4b37      	ldr	r3, [pc, #220]	; (95f0 <compare_set+0x10c>)
    9512:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    9516:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    951a:	429f      	cmp	r7, r3
    951c:	bf08      	it	eq
    951e:	4296      	cmpeq	r6, r2
    9520:	d04e      	beq.n	95c0 <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    9522:	4934      	ldr	r1, [pc, #208]	; (95f4 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    9524:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    9528:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    952c:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    9530:	00ad      	lsls	r5, r5, #2
    9532:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    9536:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9538:	b2ad      	uxth	r5, r5
    953a:	f006 f802 	bl	f542 <event_clear>
	return absolute_time & COUNTER_MAX;
    953e:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    9542:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    9546:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    954a:	4a2b      	ldr	r2, [pc, #172]	; (95f8 <compare_set+0x114>)
    954c:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    954e:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    9552:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    9554:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
    9558:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    955a:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
    955e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
    9562:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    9566:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    956a:	f06f 0002 	mvn.w	r0, #2
    956e:	eba0 0008 	sub.w	r0, r0, r8
    9572:	4460      	add	r0, ip
    9574:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    9578:	4290      	cmp	r0, r2
    957a:	d921      	bls.n	95c0 <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    957c:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    957e:	b160      	cbz	r0, 959a <compare_set+0xb6>
     return p_reg->COUNTER;
    9580:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    9584:	eba8 000b 	sub.w	r0, r8, fp
    9588:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    958c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    9590:	d916      	bls.n	95c0 <compare_set+0xdc>
					event_clear(chan);
    9592:	4620      	mov	r0, r4
    9594:	f005 ffd5 	bl	f542 <event_clear>
    9598:	4a17      	ldr	r2, [pc, #92]	; (95f8 <compare_set+0x114>)
			cc_val = now + cc_inc;
    959a:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
    959e:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    95a2:	e7d9      	b.n	9558 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    95a4:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    95a6:	4a15      	ldr	r2, [pc, #84]	; (95fc <compare_set+0x118>)
    95a8:	f3bf 8f5b 	dmb	ish
    95ac:	40a3      	lsls	r3, r4
    95ae:	e852 0f00 	ldrex	r0, [r2]
    95b2:	4318      	orrs	r0, r3
    95b4:	e842 0100 	strex	r1, r0, [r2]
    95b8:	2900      	cmp	r1, #0
    95ba:	d1f8      	bne.n	95ae <compare_set+0xca>
    95bc:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    95c0:	490b      	ldr	r1, [pc, #44]	; (95f0 <compare_set+0x10c>)
	cc_data[chan].callback = handler;
    95c2:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    95c4:	0123      	lsls	r3, r4, #4
    95c6:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    95ca:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
    95ce:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    95d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    95d2:	6053      	str	r3, [r2, #4]
	return ret;
    95d4:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
    95d6:	4620      	mov	r0, r4
    95d8:	9900      	ldr	r1, [sp, #0]
    95da:	f7ff ff33 	bl	9444 <compare_int_unlock>
}
    95de:	4628      	mov	r0, r5
    95e0:	b003      	add	sp, #12
    95e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    95e6:	f06f 0515 	mvn.w	r5, #21
    95ea:	e7f4      	b.n	95d6 <compare_set+0xf2>
    95ec:	00800001 	.word	0x00800001
    95f0:	20000b58 	.word	0x20000b58
    95f4:	40011000 	.word	0x40011000
    95f8:	007ffffd 	.word	0x007ffffd
    95fc:	20003374 	.word	0x20003374

00009600 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    9600:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
    9602:	4c1b      	ldr	r4, [pc, #108]	; (9670 <sys_clock_driver_init+0x70>)
    9604:	4b1b      	ldr	r3, [pc, #108]	; (9674 <sys_clock_driver_init+0x74>)
    9606:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    960a:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    960e:	4b1a      	ldr	r3, [pc, #104]	; (9678 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    9610:	2500      	movs	r5, #0
    9612:	f04f 30ff 	mov.w	r0, #4294967295
    9616:	f04f 31ff 	mov.w	r1, #4294967295
    961a:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    961e:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    9622:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    9626:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    962a:	4b14      	ldr	r3, [pc, #80]	; (967c <sys_clock_driver_init+0x7c>)
    962c:	2602      	movs	r6, #2
    962e:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    9632:	2101      	movs	r1, #1
    9634:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    9638:	2011      	movs	r0, #17
    963a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    963e:	462a      	mov	r2, r5
    9640:	f7fd f9c6 	bl	69d0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    9644:	2011      	movs	r0, #17
    9646:	f7fd f993 	bl	6970 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    964a:	4a0d      	ldr	r2, [pc, #52]	; (9680 <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    964c:	2301      	movs	r3, #1
    964e:	60a3      	str	r3, [r4, #8]
    9650:	6023      	str	r3, [r4, #0]
    9652:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    9654:	4b0b      	ldr	r3, [pc, #44]	; (9684 <sys_clock_driver_init+0x84>)
    9656:	4a0c      	ldr	r2, [pc, #48]	; (9688 <sys_clock_driver_init+0x88>)
    9658:	9300      	str	r3, [sp, #0]
    965a:	9501      	str	r5, [sp, #4]
    965c:	2300      	movs	r3, #0
    965e:	4628      	mov	r0, r5
    9660:	f7ff ff40 	bl	94e4 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    9664:	4630      	mov	r0, r6
    9666:	f7fe f961 	bl	792c <z_nrf_clock_control_lf_on>

	return 0;
}
    966a:	4628      	mov	r0, r5
    966c:	b002      	add	sp, #8
    966e:	bd70      	pop	{r4, r5, r6, pc}
    9670:	40011000 	.word	0x40011000
    9674:	000f0003 	.word	0x000f0003
    9678:	20000b58 	.word	0x20000b58
    967c:	e000e100 	.word	0xe000e100
    9680:	20003378 	.word	0x20003378
    9684:	000093fd 	.word	0x000093fd
    9688:	007fffff 	.word	0x007fffff

0000968c <rtc_nrf_isr>:
{
    968c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    9690:	4c2f      	ldr	r4, [pc, #188]	; (9750 <rtc_nrf_isr+0xc4>)
    9692:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    9696:	0799      	lsls	r1, r3, #30
    9698:	d50b      	bpl.n	96b2 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    969a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    969e:	b143      	cbz	r3, 96b2 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    96a0:	4a2c      	ldr	r2, [pc, #176]	; (9754 <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    96a2:	2300      	movs	r3, #0
    96a4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    96a8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    96ac:	6813      	ldr	r3, [r2, #0]
    96ae:	3301      	adds	r3, #1
    96b0:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    96b2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    96b6:	03da      	lsls	r2, r3, #15
    96b8:	d52a      	bpl.n	9710 <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    96ba:	f3bf 8f5b 	dmb	ish
    96be:	4b26      	ldr	r3, [pc, #152]	; (9758 <rtc_nrf_isr+0xcc>)
    96c0:	e853 2f00 	ldrex	r2, [r3]
    96c4:	f022 0101 	bic.w	r1, r2, #1
    96c8:	e843 1000 	strex	r0, r1, [r3]
    96cc:	2800      	cmp	r0, #0
    96ce:	d1f7      	bne.n	96c0 <rtc_nrf_isr+0x34>
    96d0:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    96d4:	07d3      	lsls	r3, r2, #31
    96d6:	d402      	bmi.n	96de <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    96d8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    96dc:	b1c3      	cbz	r3, 9710 <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    96de:	2500      	movs	r5, #0
    96e0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    96e4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    96e8:	f7ff feda 	bl	94a0 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    96ec:	f04f 0320 	mov.w	r3, #32
    96f0:	f3ef 8211 	mrs	r2, BASEPRI
    96f4:	f383 8812 	msr	BASEPRI_MAX, r3
    96f8:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    96fc:	4b17      	ldr	r3, [pc, #92]	; (975c <rtc_nrf_isr+0xd0>)
    96fe:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    9702:	42b0      	cmp	r0, r6
    9704:	41b9      	sbcs	r1, r7
    9706:	d206      	bcs.n	9716 <rtc_nrf_isr+0x8a>
	__asm__ volatile(
    9708:	f382 8811 	msr	BASEPRI, r2
    970c:	f3bf 8f6f 	isb	sy
}
    9710:	b003      	add	sp, #12
    9712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    9716:	f04f 38ff 	mov.w	r8, #4294967295
    971a:	f04f 39ff 	mov.w	r9, #4294967295
    971e:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    9722:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    9726:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    9728:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    972c:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    9730:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    9734:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    9738:	f382 8811 	msr	BASEPRI, r2
    973c:	f3bf 8f6f 	isb	sy
		if (handler) {
    9740:	2900      	cmp	r1, #0
    9742:	d0e5      	beq.n	9710 <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
    9744:	9000      	str	r0, [sp, #0]
    9746:	4632      	mov	r2, r6
    9748:	463b      	mov	r3, r7
    974a:	4628      	mov	r0, r5
    974c:	4788      	blx	r1
    974e:	e7df      	b.n	9710 <rtc_nrf_isr+0x84>
    9750:	40011000 	.word	0x40011000
    9754:	2000337c 	.word	0x2000337c
    9758:	20003374 	.word	0x20003374
    975c:	20000b58 	.word	0x20000b58

00009760 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    9760:	1c43      	adds	r3, r0, #1
{
    9762:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    9764:	d022      	beq.n	97ac <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    9766:	2801      	cmp	r0, #1
    9768:	dd22      	ble.n	97b0 <sys_clock_set_timeout+0x50>
    976a:	4a12      	ldr	r2, [pc, #72]	; (97b4 <sys_clock_set_timeout+0x54>)
    976c:	4b12      	ldr	r3, [pc, #72]	; (97b8 <sys_clock_set_timeout+0x58>)
    976e:	4290      	cmp	r0, r2
    9770:	bfd4      	ite	le
    9772:	4604      	movle	r4, r0
    9774:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    9776:	f7ff fe93 	bl	94a0 <z_nrf_rtc_timer_read>
    977a:	4b10      	ldr	r3, [pc, #64]	; (97bc <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    977c:	490e      	ldr	r1, [pc, #56]	; (97b8 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    977e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9782:	1a80      	subs	r0, r0, r2
		cyc = 0;
    9784:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    9788:	bf28      	it	cs
    978a:	2400      	movcs	r4, #0
	cyc += unannounced;
    978c:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    978e:	428c      	cmp	r4, r1
    9790:	bf28      	it	cs
    9792:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    9794:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    9796:	490a      	ldr	r1, [pc, #40]	; (97c0 <sys_clock_set_timeout+0x60>)
    9798:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    979a:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    979e:	9001      	str	r0, [sp, #4]
    97a0:	f143 0300 	adc.w	r3, r3, #0
    97a4:	f7ff fe9e 	bl	94e4 <compare_set>
}
    97a8:	b002      	add	sp, #8
    97aa:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    97ac:	4c02      	ldr	r4, [pc, #8]	; (97b8 <sys_clock_set_timeout+0x58>)
    97ae:	e7e2      	b.n	9776 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    97b0:	2401      	movs	r4, #1
    97b2:	e7e0      	b.n	9776 <sys_clock_set_timeout+0x16>
    97b4:	007ffffe 	.word	0x007ffffe
    97b8:	007fffff 	.word	0x007fffff
    97bc:	20000b68 	.word	0x20000b68
    97c0:	000093fd 	.word	0x000093fd

000097c4 <sys_clock_elapsed>:
{
    97c4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    97c6:	f7ff fe6b 	bl	94a0 <z_nrf_rtc_timer_read>
    97ca:	4b02      	ldr	r3, [pc, #8]	; (97d4 <sys_clock_elapsed+0x10>)
    97cc:	681b      	ldr	r3, [r3, #0]
}
    97ce:	1ac0      	subs	r0, r0, r3
    97d0:	bd08      	pop	{r3, pc}
    97d2:	bf00      	nop
    97d4:	20000b68 	.word	0x20000b68

000097d8 <sys_clock_disable>:
{
    97d8:	b510      	push	{r4, lr}
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    97da:	4c08      	ldr	r4, [pc, #32]	; (97fc <sys_clock_disable+0x24>)
    97dc:	2301      	movs	r3, #1
    97de:	6063      	str	r3, [r4, #4]
	irq_disable(RTC_IRQn);
    97e0:	2011      	movs	r0, #17
    97e2:	f7fd f8d3 	bl	698c <arch_irq_disable>
    p_reg->INTENCLR = mask;
    97e6:	4b06      	ldr	r3, [pc, #24]	; (9800 <sys_clock_disable+0x28>)
    97e8:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    97ec:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    97f0:	4b04      	ldr	r3, [pc, #16]	; (9804 <sys_clock_disable+0x2c>)
    97f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    97f6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    97fa:	bd10      	pop	{r4, pc}
    97fc:	40011000 	.word	0x40011000
    9800:	000f0003 	.word	0x000f0003
    9804:	e000e100 	.word	0xe000e100

00009808 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    9808:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
    980a:	f7f9 fdd7 	bl	33bc <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    980e:	4808      	ldr	r0, [pc, #32]	; (9830 <k_sys_fatal_error_handler+0x28>)
    9810:	6803      	ldr	r3, [r0, #0]
    9812:	075b      	lsls	r3, r3, #29
    9814:	d009      	beq.n	982a <k_sys_fatal_error_handler+0x22>
    9816:	4b07      	ldr	r3, [pc, #28]	; (9834 <k_sys_fatal_error_handler+0x2c>)
    9818:	9305      	str	r3, [sp, #20]
    981a:	2302      	movs	r3, #2
    981c:	9304      	str	r3, [sp, #16]
    981e:	2300      	movs	r3, #0
    9820:	aa04      	add	r2, sp, #16
    9822:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9826:	f7f9 ff93 	bl	3750 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
    982a:	2000      	movs	r0, #0
    982c:	f7fd feaa 	bl	7584 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    9830:	200002d8 	.word	0x200002d8
    9834:	000134b5 	.word	0x000134b5

00009838 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    9838:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    983c:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    9840:	2a06      	cmp	r2, #6
    9842:	d109      	bne.n	9858 <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    9844:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    9848:	f3c3 1303 	ubfx	r3, r3, #4, #4
    984c:	3b03      	subs	r3, #3
    984e:	2b04      	cmp	r3, #4
    9850:	d802      	bhi.n	9858 <nrf52_errata_16+0x20>
    9852:	4a02      	ldr	r2, [pc, #8]	; (985c <nrf52_errata_16+0x24>)
    9854:	5cd0      	ldrb	r0, [r2, r3]
    9856:	4770      	bx	lr
                switch(var2)
                {
                    case 0x03ul:
                        return true;
                    case 0x04ul:
                        return false;
    9858:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
    985a:	4770      	bx	lr
    985c:	000134e1 	.word	0x000134e1

00009860 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    9860:	4a02      	ldr	r2, [pc, #8]	; (986c <nvmc_wait+0xc>)
    9862:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    9866:	2b00      	cmp	r3, #0
    9868:	d0fb      	beq.n	9862 <nvmc_wait+0x2>
}
    986a:	4770      	bx	lr
    986c:	4001e000 	.word	0x4001e000

00009870 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    9870:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    9872:	f005 fe76 	bl	f562 <nrf52_errata_108>
    9876:	b140      	cbz	r0, 988a <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    9878:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    987c:	4a8e      	ldr	r2, [pc, #568]	; (9ab8 <SystemInit+0x248>)
    987e:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
    9882:	f3c3 2304 	ubfx	r3, r3, #8, #5
    9886:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    988a:	f7ff ffd5 	bl	9838 <nrf52_errata_16>
    988e:	b110      	cbz	r0, 9896 <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    9890:	4b8a      	ldr	r3, [pc, #552]	; (9abc <SystemInit+0x24c>)
    9892:	4a8b      	ldr	r2, [pc, #556]	; (9ac0 <SystemInit+0x250>)
    9894:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    9896:	f005 fe64 	bl	f562 <nrf52_errata_108>
    989a:	b148      	cbz	r0, 98b0 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    989c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    98a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    98a4:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    98a8:	f3c3 3342 	ubfx	r3, r3, #13, #3
    98ac:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    98b0:	f7ff ffc2 	bl	9838 <nrf52_errata_16>
    98b4:	b130      	cbz	r0, 98c4 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    98b6:	4a83      	ldr	r2, [pc, #524]	; (9ac4 <SystemInit+0x254>)
    98b8:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    98bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    98c0:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    98c4:	f005 fe4d 	bl	f562 <nrf52_errata_108>
    98c8:	b140      	cbz	r0, 98dc <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
    98ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    98ce:	2200      	movs	r2, #0
    98d0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    98d4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    98d8:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    98dc:	f7ff ffac 	bl	9838 <nrf52_errata_16>
    98e0:	b120      	cbz	r0, 98ec <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    98e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    98e6:	2203      	movs	r2, #3
    98e8:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    98ec:	f7ff ffa4 	bl	9838 <nrf52_errata_16>
    98f0:	b160      	cbz	r0, 990c <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    98f2:	4b75      	ldr	r3, [pc, #468]	; (9ac8 <SystemInit+0x258>)
    98f4:	2205      	movs	r2, #5
    98f6:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    98fa:	2201      	movs	r2, #1
    98fc:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    9900:	2200      	movs	r2, #0
    9902:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    9906:	223f      	movs	r2, #63	; 0x3f
    9908:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    990c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9910:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    9914:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    9916:	bf09      	itett	eq
    9918:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    991c:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    9920:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    9924:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
    9928:	bf08      	it	eq
    992a:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    992e:	2a06      	cmp	r2, #6
    9930:	d14d      	bne.n	99ce <SystemInit+0x15e>
            {
                switch(var2)
    9932:	3b03      	subs	r3, #3
    9934:	2b04      	cmp	r3, #4
    9936:	d803      	bhi.n	9940 <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    9938:	4a64      	ldr	r2, [pc, #400]	; (9acc <SystemInit+0x25c>)
    993a:	5cd3      	ldrb	r3, [r2, r3]
    993c:	2b00      	cmp	r3, #0
    993e:	d046      	beq.n	99ce <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    9940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9944:	4b62      	ldr	r3, [pc, #392]	; (9ad0 <SystemInit+0x260>)
    9946:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    994a:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    994e:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    9952:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    9956:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    995a:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    995e:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    9962:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    9966:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    996a:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    996e:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    9972:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    9976:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    997a:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    997e:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    9982:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    9986:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    998a:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    998e:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    9992:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    9996:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    999a:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    999e:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    99a2:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    99a6:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    99aa:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    99ae:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    99b2:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    99b6:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    99ba:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    99be:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    99c2:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    99c6:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    99ca:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    99ce:	f005 fdc8 	bl	f562 <nrf52_errata_108>
    99d2:	b148      	cbz	r0, 99e8 <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    99d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    99d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    99dc:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    99e0:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    99e4:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    99e8:	f005 fdbb 	bl	f562 <nrf52_errata_108>
    99ec:	b148      	cbz	r0, 9a02 <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    99ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    99f2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    99f6:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    99f8:	bf44      	itt	mi
    99fa:	f06f 0201 	mvnmi.w	r2, #1
    99fe:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9a02:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    9a06:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    9a0a:	2a06      	cmp	r2, #6
    9a0c:	d126      	bne.n	9a5c <SystemInit+0x1ec>
            {
                switch(var2)
    9a0e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    9a12:	3b03      	subs	r3, #3
    9a14:	2b04      	cmp	r3, #4
    9a16:	d802      	bhi.n	9a1e <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    9a18:	4a2e      	ldr	r2, [pc, #184]	; (9ad4 <SystemInit+0x264>)
    9a1a:	5cd3      	ldrb	r3, [r2, r3]
    9a1c:	b163      	cbz	r3, 9a38 <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    9a1e:	4a2e      	ldr	r2, [pc, #184]	; (9ad8 <SystemInit+0x268>)
    9a20:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
    9a24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    9a28:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9a2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    9a30:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    9a34:	2b06      	cmp	r3, #6
    9a36:	d111      	bne.n	9a5c <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    9a38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9a3c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    9a40:	3b03      	subs	r3, #3
    9a42:	2b04      	cmp	r3, #4
    9a44:	d802      	bhi.n	9a4c <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    9a46:	4a25      	ldr	r2, [pc, #148]	; (9adc <SystemInit+0x26c>)
    9a48:	5cd3      	ldrb	r3, [r2, r3]
    9a4a:	b13b      	cbz	r3, 9a5c <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    9a4c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    9a50:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    9a54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9a58:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    9a5c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    9a60:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    9a64:	2a00      	cmp	r2, #0
    9a66:	db03      	blt.n	9a70 <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    9a68:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    9a6c:	2b00      	cmp	r3, #0
    9a6e:	da22      	bge.n	9ab6 <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    9a70:	491b      	ldr	r1, [pc, #108]	; (9ae0 <SystemInit+0x270>)
    9a72:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    9a74:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    9a78:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    9a7c:	2415      	movs	r4, #21
    nvmc_wait();
    9a7e:	f7ff feef 	bl	9860 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    9a82:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    9a86:	f7ff feeb 	bl	9860 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    9a8a:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    9a8e:	f7ff fee7 	bl	9860 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    9a92:	2300      	movs	r3, #0
    9a94:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    9a98:	f7ff fee2 	bl	9860 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    9a9c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    9aa0:	4908      	ldr	r1, [pc, #32]	; (9ac4 <SystemInit+0x254>)
    9aa2:	4b10      	ldr	r3, [pc, #64]	; (9ae4 <SystemInit+0x274>)
    9aa4:	68ca      	ldr	r2, [r1, #12]
    9aa6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    9aaa:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    9aac:	60cb      	str	r3, [r1, #12]
    9aae:	f3bf 8f4f 	dsb	sy
    __NOP();
    9ab2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    9ab4:	e7fd      	b.n	9ab2 <SystemInit+0x242>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    9ab6:	bd10      	pop	{r4, pc}
    9ab8:	40013000 	.word	0x40013000
    9abc:	4007c000 	.word	0x4007c000
    9ac0:	baadf00d 	.word	0xbaadf00d
    9ac4:	e000ed00 	.word	0xe000ed00
    9ac8:	40005000 	.word	0x40005000
    9acc:	000134dc 	.word	0x000134dc
    9ad0:	4000c000 	.word	0x4000c000
    9ad4:	000134d7 	.word	0x000134d7
    9ad8:	40001000 	.word	0x40001000
    9adc:	000134d2 	.word	0x000134d2
    9ae0:	4001e000 	.word	0x4001e000
    9ae4:	05fa0004 	.word	0x05fa0004

00009ae8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    9ae8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    9aea:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    9aec:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    9aee:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    9af2:	fab2 f382 	clz	r3, r2
    9af6:	f1c3 031f 	rsb	r3, r3, #31
    9afa:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    9afc:	fa05 f403 	lsl.w	r4, r5, r3
    9b00:	ea22 0404 	bic.w	r4, r2, r4
    9b04:	e850 6f00 	ldrex	r6, [r0]
    9b08:	4296      	cmp	r6, r2
    9b0a:	d104      	bne.n	9b16 <nrfx_flag32_alloc+0x2e>
    9b0c:	e840 4c00 	strex	ip, r4, [r0]
    9b10:	f1bc 0f00 	cmp.w	ip, #0
    9b14:	d1f6      	bne.n	9b04 <nrfx_flag32_alloc+0x1c>
    9b16:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    9b1a:	d1e7      	bne.n	9aec <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    9b1c:	4801      	ldr	r0, [pc, #4]	; (9b24 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    9b1e:	700b      	strb	r3, [r1, #0]
}
    9b20:	bd70      	pop	{r4, r5, r6, pc}
    9b22:	bf00      	nop
    9b24:	0bad0000 	.word	0x0bad0000

00009b28 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    9b28:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    9b2a:	6803      	ldr	r3, [r0, #0]
    9b2c:	40cb      	lsrs	r3, r1
    9b2e:	07db      	lsls	r3, r3, #31
    9b30:	d414      	bmi.n	9b5c <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    9b32:	2301      	movs	r3, #1
    9b34:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    9b36:	6802      	ldr	r2, [r0, #0]
    9b38:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    9b3c:	ea43 0102 	orr.w	r1, r3, r2
    9b40:	e850 4f00 	ldrex	r4, [r0]
    9b44:	4294      	cmp	r4, r2
    9b46:	d104      	bne.n	9b52 <nrfx_flag32_free+0x2a>
    9b48:	e840 1c00 	strex	ip, r1, [r0]
    9b4c:	f1bc 0f00 	cmp.w	ip, #0
    9b50:	d1f6      	bne.n	9b40 <nrfx_flag32_free+0x18>
    9b52:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    9b56:	d1ee      	bne.n	9b36 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    9b58:	4801      	ldr	r0, [pc, #4]	; (9b60 <nrfx_flag32_free+0x38>)
}
    9b5a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    9b5c:	4801      	ldr	r0, [pc, #4]	; (9b64 <nrfx_flag32_free+0x3c>)
    9b5e:	e7fc      	b.n	9b5a <nrfx_flag32_free+0x32>
    9b60:	0bad0000 	.word	0x0bad0000
    9b64:	0bad0004 	.word	0x0bad0004

00009b68 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    9b68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    9b6a:	4604      	mov	r4, r0
    9b6c:	b118      	cbz	r0, 9b76 <clock_stop+0xe>
    9b6e:	2801      	cmp	r0, #1
    9b70:	d022      	beq.n	9bb8 <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    9b72:	b003      	add	sp, #12
    9b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    9b76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9b7a:	2202      	movs	r2, #2
    9b7c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9b80:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    9b84:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9b88:	2201      	movs	r2, #1
    9b8a:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    9b8c:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    9b8e:	2301      	movs	r3, #1
    9b90:	f88d 3007 	strb.w	r3, [sp, #7]
    9b94:	f242 7510 	movw	r5, #10000	; 0x2710
    9b98:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    9b9c:	b1cc      	cbz	r4, 9bd2 <clock_stop+0x6a>
    9b9e:	2c01      	cmp	r4, #1
    9ba0:	d1e7      	bne.n	9b72 <clock_stop+0xa>
            if (p_clk_src != NULL)
    9ba2:	b3c7      	cbz	r7, 9c16 <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    9ba4:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    9ba8:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    9bac:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    9bae:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    9bb2:	03da      	lsls	r2, r3, #15
    9bb4:	d521      	bpl.n	9bfa <clock_stop+0x92>
    9bb6:	e016      	b.n	9be6 <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
    9bb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9bbc:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    9bbe:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9bc2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    9bc6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9bca:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    9bcc:	f10d 0707 	add.w	r7, sp, #7
    9bd0:	e7dd      	b.n	9b8e <clock_stop+0x26>
            if (p_clk_src != NULL)
    9bd2:	b1b7      	cbz	r7, 9c02 <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9bd4:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    9bd8:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    9bdc:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    9bde:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    9be2:	03d8      	lsls	r0, r3, #15
    9be4:	d5c5      	bpl.n	9b72 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    9be6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9bea:	2801      	cmp	r0, #1
    9bec:	d103      	bne.n	9bf6 <clock_stop+0x8e>
    9bee:	f005 fcc7 	bl	f580 <nrfx_busy_wait>
    9bf2:	3d01      	subs	r5, #1
    9bf4:	d1d2      	bne.n	9b9c <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    9bf6:	2c01      	cmp	r4, #1
    9bf8:	d1bb      	bne.n	9b72 <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
    9bfa:	4b0c      	ldr	r3, [pc, #48]	; (9c2c <clock_stop+0xc4>)
    9bfc:	2200      	movs	r2, #0
    9bfe:	715a      	strb	r2, [r3, #5]
    9c00:	e7b7      	b.n	9b72 <clock_stop+0xa>
    9c02:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    9c06:	03d9      	lsls	r1, r3, #15
    9c08:	d5b3      	bpl.n	9b72 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    9c0a:	2001      	movs	r0, #1
    9c0c:	f005 fcb8 	bl	f580 <nrfx_busy_wait>
    9c10:	3d01      	subs	r5, #1
    9c12:	d1f6      	bne.n	9c02 <clock_stop+0x9a>
    9c14:	e7ad      	b.n	9b72 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    9c16:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    9c1a:	03db      	lsls	r3, r3, #15
    9c1c:	d5ed      	bpl.n	9bfa <clock_stop+0x92>
    9c1e:	2001      	movs	r0, #1
    9c20:	f005 fcae 	bl	f580 <nrfx_busy_wait>
    9c24:	3d01      	subs	r5, #1
    9c26:	d1f6      	bne.n	9c16 <clock_stop+0xae>
    9c28:	e7e7      	b.n	9bfa <clock_stop+0x92>
    9c2a:	bf00      	nop
    9c2c:	20003380 	.word	0x20003380

00009c30 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    9c30:	4b04      	ldr	r3, [pc, #16]	; (9c44 <nrfx_clock_init+0x14>)
    9c32:	791a      	ldrb	r2, [r3, #4]
    9c34:	b922      	cbnz	r2, 9c40 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    9c36:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    9c38:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    9c3a:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    9c3c:	4802      	ldr	r0, [pc, #8]	; (9c48 <nrfx_clock_init+0x18>)
    9c3e:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    9c40:	4802      	ldr	r0, [pc, #8]	; (9c4c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    9c42:	4770      	bx	lr
    9c44:	20003380 	.word	0x20003380
    9c48:	0bad0000 	.word	0x0bad0000
    9c4c:	0bad000c 	.word	0x0bad000c

00009c50 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    9c50:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    9c52:	b110      	cbz	r0, 9c5a <nrfx_clock_start+0xa>
    9c54:	2801      	cmp	r0, #1
    9c56:	d043      	beq.n	9ce0 <nrfx_clock_start+0x90>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    9c58:	bd38      	pop	{r3, r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9c5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    9c5e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    9c62:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    9c66:	03c8      	lsls	r0, r1, #15
    9c68:	d40b      	bmi.n	9c82 <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    9c6a:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    9c6e:	07d9      	lsls	r1, r3, #31
    9c70:	d50f      	bpl.n	9c92 <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    9c72:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    9c76:	079b      	lsls	r3, r3, #30
    9c78:	d408      	bmi.n	9c8c <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
    9c7a:	2302      	movs	r3, #2
    9c7c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    9c80:	e7ea      	b.n	9c58 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    9c82:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    9c86:	2b01      	cmp	r3, #1
    9c88:	d004      	beq.n	9c94 <nrfx_clock_start+0x44>
    9c8a:	b113      	cbz	r3, 9c92 <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    9c8c:	2000      	movs	r0, #0
    9c8e:	f7ff ff6b 	bl	9b68 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    9c92:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    9c94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    9c98:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9c9c:	2300      	movs	r3, #0
    9c9e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    9ca2:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    9ca6:	2302      	movs	r3, #2
    9ca8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
    9cac:	4a12      	ldr	r2, [pc, #72]	; (9cf8 <nrfx_clock_start+0xa8>)
    9cae:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    9cb2:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
    9cb6:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dwt_ctrl = DWT->CTRL;
    9cba:	4b10      	ldr	r3, [pc, #64]	; (9cfc <nrfx_clock_start+0xac>)
    9cbc:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    9cbe:	f044 0101 	orr.w	r1, r4, #1
    9cc2:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
    9cc4:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    9cc6:	6859      	ldr	r1, [r3, #4]
    9cc8:	1b49      	subs	r1, r1, r5
    9cca:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
    9cce:	d3fa      	bcc.n	9cc6 <nrfx_clock_start+0x76>
    DWT->CTRL = dwt_ctrl;
    9cd0:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9cd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    CoreDebug->DEMCR = core_debug;
    9cd6:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    9cda:	2201      	movs	r2, #1
    9cdc:	609a      	str	r2, [r3, #8]
}
    9cde:	e7bb      	b.n	9c58 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9ce0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9ce4:	2200      	movs	r2, #0
    9ce6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    9cea:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    9cee:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9cf2:	6018      	str	r0, [r3, #0]
}
    9cf4:	e7b0      	b.n	9c58 <nrfx_clock_start+0x8>
    9cf6:	bf00      	nop
    9cf8:	e000ed00 	.word	0xe000ed00
    9cfc:	e0001000 	.word	0xe0001000

00009d00 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    9d00:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    9d02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9d06:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    9d0a:	b16a      	cbz	r2, 9d28 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9d0c:	2200      	movs	r2, #0
    9d0e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    9d12:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    9d16:	2201      	movs	r2, #1
    9d18:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    9d1c:	4b11      	ldr	r3, [pc, #68]	; (9d64 <nrfx_power_clock_irq_handler+0x64>)
    9d1e:	7958      	ldrb	r0, [r3, #5]
    9d20:	b910      	cbnz	r0, 9d28 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    9d22:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    9d24:	681b      	ldr	r3, [r3, #0]
    9d26:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    9d28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9d2c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    9d30:	b172      	cbz	r2, 9d50 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9d32:	2200      	movs	r2, #0
    9d34:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    9d38:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9d3c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    9d40:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    9d44:	0792      	lsls	r2, r2, #30
    9d46:	d104      	bne.n	9d52 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    9d48:	2201      	movs	r2, #1
    9d4a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9d4e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    9d50:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    9d52:	2202      	movs	r2, #2
    9d54:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    9d58:	4b02      	ldr	r3, [pc, #8]	; (9d64 <nrfx_power_clock_irq_handler+0x64>)
}
    9d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    9d5e:	681b      	ldr	r3, [r3, #0]
    9d60:	2001      	movs	r0, #1
    9d62:	4718      	bx	r3
    9d64:	20003380 	.word	0x20003380

00009d68 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    9d68:	4b03      	ldr	r3, [pc, #12]	; (9d78 <pin_in_use_by_te+0x10>)
    9d6a:	3008      	adds	r0, #8
    9d6c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    9d70:	f3c0 1040 	ubfx	r0, r0, #5, #1
    9d74:	4770      	bx	lr
    9d76:	bf00      	nop
    9d78:	200001dc 	.word	0x200001dc

00009d7c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    9d7c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    9d7e:	f100 0308 	add.w	r3, r0, #8
    9d82:	4c0c      	ldr	r4, [pc, #48]	; (9db4 <call_handler+0x38>)
    9d84:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    9d88:	05da      	lsls	r2, r3, #23
{
    9d8a:	4605      	mov	r5, r0
    9d8c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    9d8e:	d507      	bpl.n	9da0 <call_handler+0x24>
    9d90:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    9d94:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    9d98:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    9d9c:	6852      	ldr	r2, [r2, #4]
    9d9e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    9da0:	68a3      	ldr	r3, [r4, #8]
    9da2:	b12b      	cbz	r3, 9db0 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    9da4:	68e2      	ldr	r2, [r4, #12]
    9da6:	4631      	mov	r1, r6
    9da8:	4628      	mov	r0, r5
    }
}
    9daa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    9dae:	4718      	bx	r3
}
    9db0:	bd70      	pop	{r4, r5, r6, pc}
    9db2:	bf00      	nop
    9db4:	200001dc 	.word	0x200001dc

00009db8 <release_handler>:
{
    9db8:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    9dba:	4a12      	ldr	r2, [pc, #72]	; (9e04 <release_handler+0x4c>)
    9dbc:	3008      	adds	r0, #8
    9dbe:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    9dc2:	05d9      	lsls	r1, r3, #23
    9dc4:	d51b      	bpl.n	9dfe <release_handler+0x46>
    9dc6:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    9dca:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    9dce:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    9dd2:	f102 040e 	add.w	r4, r2, #14
    9dd6:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    9dd8:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    9ddc:	f413 7f80 	tst.w	r3, #256	; 0x100
    9de0:	d003      	beq.n	9dea <release_handler+0x32>
    9de2:	f3c3 2343 	ubfx	r3, r3, #9, #4
    9de6:	4299      	cmp	r1, r3
    9de8:	d009      	beq.n	9dfe <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    9dea:	3001      	adds	r0, #1
    9dec:	2820      	cmp	r0, #32
    9dee:	d1f3      	bne.n	9dd8 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    9df0:	2300      	movs	r3, #0
    9df2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    9df6:	4804      	ldr	r0, [pc, #16]	; (9e08 <release_handler+0x50>)
}
    9df8:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    9dfa:	f7ff be95 	b.w	9b28 <nrfx_flag32_free>
}
    9dfe:	bc10      	pop	{r4}
    9e00:	4770      	bx	lr
    9e02:	bf00      	nop
    9e04:	200001dc 	.word	0x200001dc
    9e08:	20000230 	.word	0x20000230

00009e0c <pin_handler_trigger_uninit>:
{
    9e0c:	b538      	push	{r3, r4, r5, lr}
    9e0e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    9e10:	f7ff ffaa 	bl	9d68 <pin_in_use_by_te>
    9e14:	4c09      	ldr	r4, [pc, #36]	; (9e3c <pin_handler_trigger_uninit+0x30>)
    9e16:	f102 0508 	add.w	r5, r2, #8
    9e1a:	b140      	cbz	r0, 9e2e <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    9e1c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    9e20:	4907      	ldr	r1, [pc, #28]	; (9e40 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    9e22:	0b5b      	lsrs	r3, r3, #13
    9e24:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    9e28:	2000      	movs	r0, #0
    9e2a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    9e2e:	4610      	mov	r0, r2
    9e30:	f7ff ffc2 	bl	9db8 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    9e34:	2300      	movs	r3, #0
    9e36:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    9e3a:	bd38      	pop	{r3, r4, r5, pc}
    9e3c:	200001dc 	.word	0x200001dc
    9e40:	40006000 	.word	0x40006000

00009e44 <nrfx_gpiote_input_configure>:
{
    9e44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9e48:	4604      	mov	r4, r0
    9e4a:	461d      	mov	r5, r3
    if (p_input_config)
    9e4c:	b309      	cbz	r1, 9e92 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    9e4e:	4f4f      	ldr	r7, [pc, #316]	; (9f8c <nrfx_gpiote_input_configure+0x148>)
    9e50:	f100 0808 	add.w	r8, r0, #8
    9e54:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    9e58:	07b3      	lsls	r3, r6, #30
    9e5a:	d506      	bpl.n	9e6a <nrfx_gpiote_input_configure+0x26>
    9e5c:	f7ff ff84 	bl	9d68 <pin_in_use_by_te>
    9e60:	b118      	cbz	r0, 9e6a <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    9e62:	484b      	ldr	r0, [pc, #300]	; (9f90 <nrfx_gpiote_input_configure+0x14c>)
}
    9e64:	b002      	add	sp, #8
    9e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
    9e6a:	f004 031f 	and.w	r3, r4, #31
    9e6e:	009b      	lsls	r3, r3, #2
    9e70:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    9e74:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9e76:	f8d3 0700 	ldr.w	r0, [r3, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    9e7a:	f026 0602 	bic.w	r6, r6, #2
    cnf &= ~to_update;
    9e7e:	f020 000f 	bic.w	r0, r0, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    9e82:	f046 0601 	orr.w	r6, r6, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9e86:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
    9e8a:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    9e8e:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
    if (p_trigger_config)
    9e92:	b19a      	cbz	r2, 9ebc <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    9e94:	4b3d      	ldr	r3, [pc, #244]	; (9f8c <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    9e96:	7817      	ldrb	r7, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    9e98:	6850      	ldr	r0, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    9e9a:	f104 0608 	add.w	r6, r4, #8
    9e9e:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
    9ea2:	f011 0f02 	tst.w	r1, #2
    9ea6:	d00d      	beq.n	9ec4 <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
    9ea8:	2800      	cmp	r0, #0
    9eaa:	d1da      	bne.n	9e62 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    9eac:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    9eb0:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    9eb4:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
    9eb8:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
    if (p_handler_config)
    9ebc:	2d00      	cmp	r5, #0
    9ebe:	d13b      	bne.n	9f38 <nrfx_gpiote_input_configure+0xf4>
        err = NRFX_SUCCESS;
    9ec0:	4834      	ldr	r0, [pc, #208]	; (9f94 <nrfx_gpiote_input_configure+0x150>)
    9ec2:	e7cf      	b.n	9e64 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    9ec4:	f021 0120 	bic.w	r1, r1, #32
    9ec8:	04c9      	lsls	r1, r1, #19
    9eca:	0cc9      	lsrs	r1, r1, #19
    9ecc:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
    9ed0:	2800      	cmp	r0, #0
    9ed2:	d0eb      	beq.n	9eac <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    9ed4:	2f03      	cmp	r7, #3
    9ed6:	d8c4      	bhi.n	9e62 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    9ed8:	6852      	ldr	r2, [r2, #4]
    9eda:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    9ede:	b92f      	cbnz	r7, 9eec <nrfx_gpiote_input_configure+0xa8>
    9ee0:	4a2d      	ldr	r2, [pc, #180]	; (9f98 <nrfx_gpiote_input_configure+0x154>)
    9ee2:	f50c 7ca2 	add.w	ip, ip, #324	; 0x144
    9ee6:	f842 702c 	str.w	r7, [r2, ip, lsl #2]
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
#endif
}
    9eea:	e7df      	b.n	9eac <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    9eec:	ea4f 028c 	mov.w	r2, ip, lsl #2
    9ef0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    9ef4:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    9ef8:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    9efc:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    9f00:	f020 0003 	bic.w	r0, r0, #3
    9f04:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    9f08:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    9f0c:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    9f10:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    9f14:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9f18:	0220      	lsls	r0, r4, #8
    9f1a:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    9f1e:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
    9f22:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    9f26:	ea40 000e 	orr.w	r0, r0, lr
    9f2a:	f041 0120 	orr.w	r1, r1, #32
    9f2e:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
    9f32:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    9f36:	e7b9      	b.n	9eac <nrfx_gpiote_input_configure+0x68>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    9f38:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    9f3c:	4620      	mov	r0, r4
    9f3e:	f7ff ff3b 	bl	9db8 <release_handler>
    if (!handler)
    9f42:	2e00      	cmp	r6, #0
    9f44:	d0bc      	beq.n	9ec0 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    9f46:	4d11      	ldr	r5, [pc, #68]	; (9f8c <nrfx_gpiote_input_configure+0x148>)
    9f48:	e9d5 2300 	ldrd	r2, r3, [r5]
    9f4c:	4296      	cmp	r6, r2
    9f4e:	d101      	bne.n	9f54 <nrfx_gpiote_input_configure+0x110>
    9f50:	429f      	cmp	r7, r3
    9f52:	d019      	beq.n	9f88 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    9f54:	4811      	ldr	r0, [pc, #68]	; (9f9c <nrfx_gpiote_input_configure+0x158>)
    9f56:	f10d 0107 	add.w	r1, sp, #7
    9f5a:	f7ff fdc5 	bl	9ae8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    9f5e:	4b0d      	ldr	r3, [pc, #52]	; (9f94 <nrfx_gpiote_input_configure+0x150>)
    9f60:	4298      	cmp	r0, r3
    9f62:	f47f af7f 	bne.w	9e64 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    9f66:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
    9f6a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    9f6e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    9f72:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    9f74:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    9f76:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    9f7a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    9f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    9f82:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    9f86:	e79b      	b.n	9ec0 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    9f88:	2200      	movs	r2, #0
    9f8a:	e7ee      	b.n	9f6a <nrfx_gpiote_input_configure+0x126>
    9f8c:	200001dc 	.word	0x200001dc
    9f90:	0bad0004 	.word	0x0bad0004
    9f94:	0bad0000 	.word	0x0bad0000
    9f98:	40006000 	.word	0x40006000
    9f9c:	20000230 	.word	0x20000230

00009fa0 <nrfx_gpiote_output_configure>:
{
    9fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9fa2:	4604      	mov	r4, r0
    if (p_config)
    9fa4:	b389      	cbz	r1, a00a <nrfx_gpiote_output_configure+0x6a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    9fa6:	4e3a      	ldr	r6, [pc, #232]	; (a090 <nrfx_gpiote_output_configure+0xf0>)
    9fa8:	f100 0708 	add.w	r7, r0, #8
    9fac:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    9fb0:	07ab      	lsls	r3, r5, #30
    9fb2:	d404      	bmi.n	9fbe <nrfx_gpiote_output_configure+0x1e>
    9fb4:	f7ff fed8 	bl	9d68 <pin_in_use_by_te>
    9fb8:	b108      	cbz	r0, 9fbe <nrfx_gpiote_output_configure+0x1e>
{
    9fba:	4836      	ldr	r0, [pc, #216]	; (a094 <nrfx_gpiote_output_configure+0xf4>)
}
    9fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    9fbe:	f015 0f1c 	tst.w	r5, #28
    9fc2:	784b      	ldrb	r3, [r1, #1]
    9fc4:	d124      	bne.n	a010 <nrfx_gpiote_output_configure+0x70>
    *p_pin = pin_number & 0x1F;
    9fc6:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9fca:	f500 7ee0 	add.w	lr, r0, #448	; 0x1c0
    9fce:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    9fd2:	005b      	lsls	r3, r3, #1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9fd4:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    9fd8:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    9fdc:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    9fde:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
    9fe2:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    9fe6:	f02c 0c07 	bic.w	ip, ip, #7
    9fea:	ea43 030c 	orr.w	r3, r3, ip
    9fee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    9ff2:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    9ff6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9ffa:	f043 0301 	orr.w	r3, r3, #1
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    9ffe:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    a002:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    a006:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    a00a:	b922      	cbnz	r2, a016 <nrfx_gpiote_output_configure+0x76>
    return NRFX_SUCCESS;
    a00c:	4822      	ldr	r0, [pc, #136]	; (a098 <nrfx_gpiote_output_configure+0xf8>)
    a00e:	e7d5      	b.n	9fbc <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    a010:	2b01      	cmp	r3, #1
    a012:	d1d8      	bne.n	9fc6 <nrfx_gpiote_output_configure+0x26>
    a014:	e7d1      	b.n	9fba <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    a016:	4e1e      	ldr	r6, [pc, #120]	; (a090 <nrfx_gpiote_output_configure+0xf0>)
    a018:	f104 0708 	add.w	r7, r4, #8
    a01c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    a020:	0783      	lsls	r3, r0, #30
    a022:	d5ca      	bpl.n	9fba <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    a024:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    a028:	4661      	mov	r1, ip
    a02a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    a02c:	f020 0020 	bic.w	r0, r0, #32
    a030:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    a034:	04c0      	lsls	r0, r0, #19
    a036:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    a03a:	0cc0      	lsrs	r0, r0, #19
    a03c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    a040:	2300      	movs	r3, #0
    a042:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    a046:	7855      	ldrb	r5, [r2, #1]
    a048:	2d00      	cmp	r5, #0
    a04a:	d0df      	beq.n	a00c <nrfx_gpiote_output_configure+0x6c>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    a04c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    a050:	7892      	ldrb	r2, [r2, #2]
    a052:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    a056:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    a05a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    a05e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    a062:	0223      	lsls	r3, r4, #8
    a064:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    a068:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    a06a:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    a06e:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    a072:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    a074:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    a076:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    a07a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    a07e:	4313      	orrs	r3, r2
    a080:	f040 0020 	orr.w	r0, r0, #32
    a084:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    a088:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    a08c:	e7be      	b.n	a00c <nrfx_gpiote_output_configure+0x6c>
    a08e:	bf00      	nop
    a090:	200001dc 	.word	0x200001dc
    a094:	0bad0004 	.word	0x0bad0004
    a098:	0bad0000 	.word	0x0bad0000

0000a09c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    a09c:	4b01      	ldr	r3, [pc, #4]	; (a0a4 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    a09e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    a0a2:	4770      	bx	lr
    a0a4:	200001dc 	.word	0x200001dc

0000a0a8 <nrfx_gpiote_channel_get>:
{
    a0a8:	b508      	push	{r3, lr}
    a0aa:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    a0ac:	f7ff fe5c 	bl	9d68 <pin_in_use_by_te>
    a0b0:	b138      	cbz	r0, a0c2 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    a0b2:	4b05      	ldr	r3, [pc, #20]	; (a0c8 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    a0b4:	4805      	ldr	r0, [pc, #20]	; (a0cc <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    a0b6:	3208      	adds	r2, #8
    a0b8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    a0bc:	0b5b      	lsrs	r3, r3, #13
    a0be:	700b      	strb	r3, [r1, #0]
}
    a0c0:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    a0c2:	4803      	ldr	r0, [pc, #12]	; (a0d0 <nrfx_gpiote_channel_get+0x28>)
    a0c4:	e7fc      	b.n	a0c0 <nrfx_gpiote_channel_get+0x18>
    a0c6:	bf00      	nop
    a0c8:	200001dc 	.word	0x200001dc
    a0cc:	0bad0000 	.word	0x0bad0000
    a0d0:	0bad0004 	.word	0x0bad0004

0000a0d4 <nrfx_gpiote_init>:
{
    a0d4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    a0d6:	4c0f      	ldr	r4, [pc, #60]	; (a114 <nrfx_gpiote_init+0x40>)
    a0d8:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    a0dc:	b9bd      	cbnz	r5, a10e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    a0de:	2240      	movs	r2, #64	; 0x40
    a0e0:	4629      	mov	r1, r5
    a0e2:	f104 0010 	add.w	r0, r4, #16
    a0e6:	f004 fde5 	bl	ecb4 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    a0ea:	2006      	movs	r0, #6
    a0ec:	f7fc fc40 	bl	6970 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    a0f0:	4b09      	ldr	r3, [pc, #36]	; (a118 <nrfx_gpiote_init+0x44>)
    return err_code;
    a0f2:	480a      	ldr	r0, [pc, #40]	; (a11c <nrfx_gpiote_init+0x48>)
    a0f4:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    a0f8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    a0fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    a100:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    a104:	2301      	movs	r3, #1
    a106:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    a10a:	6563      	str	r3, [r4, #84]	; 0x54
}
    a10c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    a10e:	4804      	ldr	r0, [pc, #16]	; (a120 <nrfx_gpiote_init+0x4c>)
    a110:	e7fc      	b.n	a10c <nrfx_gpiote_init+0x38>
    a112:	bf00      	nop
    a114:	200001dc 	.word	0x200001dc
    a118:	40006000 	.word	0x40006000
    a11c:	0bad0000 	.word	0x0bad0000
    a120:	0bad0005 	.word	0x0bad0005

0000a124 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    a124:	4b03      	ldr	r3, [pc, #12]	; (a134 <nrfx_gpiote_is_init+0x10>)
    a126:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    a12a:	3800      	subs	r0, #0
    a12c:	bf18      	it	ne
    a12e:	2001      	movne	r0, #1
    a130:	4770      	bx	lr
    a132:	bf00      	nop
    a134:	200001dc 	.word	0x200001dc

0000a138 <nrfx_gpiote_channel_free>:
{
    a138:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    a13a:	4801      	ldr	r0, [pc, #4]	; (a140 <nrfx_gpiote_channel_free+0x8>)
    a13c:	f7ff bcf4 	b.w	9b28 <nrfx_flag32_free>
    a140:	2000022c 	.word	0x2000022c

0000a144 <nrfx_gpiote_channel_alloc>:
{
    a144:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    a146:	4801      	ldr	r0, [pc, #4]	; (a14c <nrfx_gpiote_channel_alloc+0x8>)
    a148:	f7ff bcce 	b.w	9ae8 <nrfx_flag32_alloc>
    a14c:	2000022c 	.word	0x2000022c

0000a150 <nrfx_gpiote_trigger_enable>:
{
    a150:	b510      	push	{r4, lr}
    a152:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    a154:	f7ff fe08 	bl	9d68 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    a158:	f102 0408 	add.w	r4, r2, #8
    a15c:	4b1c      	ldr	r3, [pc, #112]	; (a1d0 <nrfx_gpiote_trigger_enable+0x80>)
    a15e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    a162:	b1e0      	cbz	r0, a19e <nrfx_gpiote_trigger_enable+0x4e>
    a164:	f013 0402 	ands.w	r4, r3, #2
    a168:	d119      	bne.n	a19e <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    a16a:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    a16c:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    a16e:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    a172:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    a176:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    a17a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    a17e:	6004      	str	r4, [r0, #0]
    a180:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    a182:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    a186:	f040 0001 	orr.w	r0, r0, #1
    a18a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    a18e:	b129      	cbz	r1, a19c <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    a190:	2201      	movs	r2, #1
    a192:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    a196:	4a0f      	ldr	r2, [pc, #60]	; (a1d4 <nrfx_gpiote_trigger_enable+0x84>)
    a198:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    a19c:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    a19e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    a1a2:	2b04      	cmp	r3, #4
    a1a4:	d010      	beq.n	a1c8 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    a1a6:	2b05      	cmp	r3, #5
    a1a8:	d010      	beq.n	a1cc <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
    a1aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    a1ae:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
    a1b2:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    a1b6:	40d9      	lsrs	r1, r3
    a1b8:	f001 0101 	and.w	r1, r1, #1
    a1bc:	3102      	adds	r1, #2
}
    a1be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    a1c2:	4610      	mov	r0, r2
    a1c4:	f005 b9ed 	b.w	f5a2 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    a1c8:	2103      	movs	r1, #3
    a1ca:	e7f8      	b.n	a1be <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    a1cc:	2102      	movs	r1, #2
    a1ce:	e7f6      	b.n	a1be <nrfx_gpiote_trigger_enable+0x6e>
    a1d0:	200001dc 	.word	0x200001dc
    a1d4:	40006000 	.word	0x40006000

0000a1d8 <nrfx_gpiote_trigger_disable>:
{
    a1d8:	b508      	push	{r3, lr}
    a1da:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    a1dc:	f7ff fdc4 	bl	9d68 <pin_in_use_by_te>
    a1e0:	b1c0      	cbz	r0, a214 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    a1e2:	f102 0108 	add.w	r1, r2, #8
    a1e6:	4b0e      	ldr	r3, [pc, #56]	; (a220 <nrfx_gpiote_trigger_disable+0x48>)
    a1e8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    a1ec:	0799      	lsls	r1, r3, #30
    a1ee:	d411      	bmi.n	a214 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    a1f0:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    a1f2:	2201      	movs	r2, #1
    a1f4:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    a1f6:	009b      	lsls	r3, r3, #2
    a1f8:	490a      	ldr	r1, [pc, #40]	; (a224 <nrfx_gpiote_trigger_disable+0x4c>)
    a1fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a1fe:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    a202:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    a206:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    a20a:	f022 0203 	bic.w	r2, r2, #3
    a20e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    a212:	bd08      	pop	{r3, pc}
    a214:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    a218:	2100      	movs	r1, #0
    a21a:	4610      	mov	r0, r2
    a21c:	f005 b9c1 	b.w	f5a2 <nrf_gpio_cfg_sense_set>
    a220:	200001dc 	.word	0x200001dc
    a224:	40006000 	.word	0x40006000

0000a228 <nrfx_gpiote_pin_uninit>:
{
    a228:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    a22a:	4b0d      	ldr	r3, [pc, #52]	; (a260 <nrfx_gpiote_pin_uninit+0x38>)
    a22c:	f100 0208 	add.w	r2, r0, #8
{
    a230:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    a232:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    a236:	07db      	lsls	r3, r3, #31
    a238:	d50f      	bpl.n	a25a <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
    a23a:	f7ff ffcd 	bl	a1d8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    a23e:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
    a240:	f004 041f 	and.w	r4, r4, #31
    a244:	f7ff fde2 	bl	9e0c <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    a248:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    a24c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    a250:	2202      	movs	r2, #2
    a252:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    a256:	4803      	ldr	r0, [pc, #12]	; (a264 <nrfx_gpiote_pin_uninit+0x3c>)
}
    a258:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    a25a:	4803      	ldr	r0, [pc, #12]	; (a268 <nrfx_gpiote_pin_uninit+0x40>)
    a25c:	e7fc      	b.n	a258 <nrfx_gpiote_pin_uninit+0x30>
    a25e:	bf00      	nop
    a260:	200001dc 	.word	0x200001dc
    a264:	0bad0000 	.word	0x0bad0000
    a268:	0bad0004 	.word	0x0bad0004

0000a26c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    a26c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a270:	4b4f      	ldr	r3, [pc, #316]	; (a3b0 <nrfx_gpiote_irq_handler+0x144>)
    return p_reg->INTENSET & mask;
    a272:	4850      	ldr	r0, [pc, #320]	; (a3b4 <nrfx_gpiote_irq_handler+0x148>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    a274:	4950      	ldr	r1, [pc, #320]	; (a3b8 <nrfx_gpiote_irq_handler+0x14c>)
    uint32_t status = 0;
    a276:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    a278:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    a27a:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a27c:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    a27e:	b136      	cbz	r6, a28e <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
    a280:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    a284:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    a286:	bf1e      	ittt	ne
    a288:	601c      	strne	r4, [r3, #0]
    a28a:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    a28c:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    a28e:	3304      	adds	r3, #4
    a290:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    a292:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    a296:	d1f1      	bne.n	a27c <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a298:	4b46      	ldr	r3, [pc, #280]	; (a3b4 <nrfx_gpiote_irq_handler+0x148>)
    a29a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    a29e:	b1bb      	cbz	r3, a2d0 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
    a2a0:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    a2a4:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    a2a8:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    a2aa:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    a2ae:	af01      	add	r7, sp, #4
    a2b0:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
    a2b4:	9c01      	ldr	r4, [sp, #4]
    a2b6:	b98c      	cbnz	r4, a2dc <nrfx_gpiote_irq_handler+0x70>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    a2b8:	4b3e      	ldr	r3, [pc, #248]	; (a3b4 <nrfx_gpiote_irq_handler+0x148>)
    a2ba:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    a2be:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    a2c2:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    a2c6:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    a2c8:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
    a2cc:	2b00      	cmp	r3, #0
    a2ce:	d1ee      	bne.n	a2ae <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    a2d0:	2401      	movs	r4, #1
    while (mask)
    a2d2:	2d00      	cmp	r5, #0
    a2d4:	d153      	bne.n	a37e <nrfx_gpiote_irq_handler+0x112>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    a2d6:	b003      	add	sp, #12
    a2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    a2dc:	fa94 f4a4 	rbit	r4, r4
    a2e0:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    a2e4:	4a35      	ldr	r2, [pc, #212]	; (a3bc <nrfx_gpiote_irq_handler+0x150>)
    a2e6:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    a2ea:	08e0      	lsrs	r0, r4, #3
    a2ec:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    a2f0:	5c3b      	ldrb	r3, [r7, r0]
    bit = BITMASK_RELBIT_GET(bit);
    a2f2:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    a2f6:	fa08 f202 	lsl.w	r2, r8, r2
    a2fa:	ea23 0302 	bic.w	r3, r3, r2
    a2fe:	543b      	strb	r3, [r7, r0]
    a300:	00a3      	lsls	r3, r4, #2
    a302:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
    a306:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    a30a:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
    a30e:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    a310:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    a312:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    a316:	d518      	bpl.n	a34a <nrfx_gpiote_irq_handler+0xde>
        call_handler(pin, trigger);
    a318:	4659      	mov	r1, fp
    a31a:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    a31c:	fa5f fa82 	uxtb.w	sl, r2
    a320:	f7ff fd2c 	bl	9d7c <call_handler>
    a324:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
    a328:	f3c3 4301 	ubfx	r3, r3, #16, #2
    a32c:	459a      	cmp	sl, r3
    a32e:	d107      	bne.n	a340 <nrfx_gpiote_irq_handler+0xd4>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    a330:	2100      	movs	r1, #0
    a332:	4620      	mov	r0, r4
    a334:	f005 f935 	bl	f5a2 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    a338:	4651      	mov	r1, sl
    a33a:	4620      	mov	r0, r4
    a33c:	f005 f931 	bl	f5a2 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    a340:	fa08 f404 	lsl.w	r4, r8, r4
    a344:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
    a348:	e7b4      	b.n	a2b4 <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    a34a:	2a02      	cmp	r2, #2
    a34c:	d10c      	bne.n	a368 <nrfx_gpiote_irq_handler+0xfc>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    a34e:	2103      	movs	r1, #3
    a350:	4620      	mov	r0, r4
    a352:	f005 f926 	bl	f5a2 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    a356:	f00a 0305 	and.w	r3, sl, #5
    a35a:	2b01      	cmp	r3, #1
    a35c:	d1f0      	bne.n	a340 <nrfx_gpiote_irq_handler+0xd4>
            call_handler(pin, trigger);
    a35e:	4659      	mov	r1, fp
    a360:	4620      	mov	r0, r4
    a362:	f7ff fd0b 	bl	9d7c <call_handler>
    a366:	e7eb      	b.n	a340 <nrfx_gpiote_irq_handler+0xd4>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    a368:	2102      	movs	r1, #2
    a36a:	4620      	mov	r0, r4
    a36c:	f005 f919 	bl	f5a2 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    a370:	f1ba 0f03 	cmp.w	sl, #3
    a374:	d0f3      	beq.n	a35e <nrfx_gpiote_irq_handler+0xf2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    a376:	2a03      	cmp	r2, #3
    a378:	d1e2      	bne.n	a340 <nrfx_gpiote_irq_handler+0xd4>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    a37a:	458a      	cmp	sl, r1
    a37c:	e7ee      	b.n	a35c <nrfx_gpiote_irq_handler+0xf0>
        uint32_t ch = NRF_CTZ(mask);
    a37e:	fa95 f3a5 	rbit	r3, r5
    a382:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    a386:	fa04 f203 	lsl.w	r2, r4, r3
    a38a:	009b      	lsls	r3, r3, #2
    a38c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a390:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    a394:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    a398:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    a39c:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    a3a0:	f3c0 2004 	ubfx	r0, r0, #8, #5
    a3a4:	f3c1 4101 	ubfx	r1, r1, #16, #2
    a3a8:	f7ff fce8 	bl	9d7c <call_handler>
    a3ac:	e791      	b.n	a2d2 <nrfx_gpiote_irq_handler+0x66>
    a3ae:	bf00      	nop
    a3b0:	40006100 	.word	0x40006100
    a3b4:	40006000 	.word	0x40006000
    a3b8:	40006120 	.word	0x40006120
    a3bc:	200001dc 	.word	0x200001dc

0000a3c0 <nvmc_word_write>:
    a3c0:	4a04      	ldr	r2, [pc, #16]	; (a3d4 <nvmc_word_write+0x14>)
    a3c2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF91_SERIES)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    a3c6:	07db      	lsls	r3, r3, #31
    a3c8:	d5fb      	bpl.n	a3c2 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
    a3ca:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    a3cc:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    a3d0:	4770      	bx	lr
    a3d2:	bf00      	nop
    a3d4:	4001e000 	.word	0x4001e000

0000a3d8 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
    a3d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    a3dc:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
    a3de:	fbb0 f3f2 	udiv	r3, r0, r2
    a3e2:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    a3e6:	b973      	cbnz	r3, a406 <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
    a3e8:	4b08      	ldr	r3, [pc, #32]	; (a40c <nrfx_nvmc_page_erase+0x34>)
    a3ea:	2202      	movs	r2, #2
    a3ec:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
    a3f0:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    a3f4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    a3f8:	07d2      	lsls	r2, r2, #31
    a3fa:	d5fb      	bpl.n	a3f4 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
    a3fc:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
    a3fe:	4804      	ldr	r0, [pc, #16]	; (a410 <nrfx_nvmc_page_erase+0x38>)
    a400:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    a404:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
    a406:	4803      	ldr	r0, [pc, #12]	; (a414 <nrfx_nvmc_page_erase+0x3c>)
}
    a408:	4770      	bx	lr
    a40a:	bf00      	nop
    a40c:	4001e000 	.word	0x4001e000
    a410:	0bad0000 	.word	0x0bad0000
    a414:	0bad000a 	.word	0x0bad000a

0000a418 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    a418:	b510      	push	{r4, lr}
    a41a:	4c05      	ldr	r4, [pc, #20]	; (a430 <nrfx_nvmc_word_write+0x18>)
    a41c:	2301      	movs	r3, #1
    a41e:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
    a422:	f7ff ffcd 	bl	a3c0 <nvmc_word_write>
    a426:	2300      	movs	r3, #0
    a428:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
    a42c:	bd10      	pop	{r4, pc}
    a42e:	bf00      	nop
    a430:	4001e000 	.word	0x4001e000

0000a434 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
    a434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    a436:	7906      	ldrb	r6, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    a438:	4c52      	ldr	r4, [pc, #328]	; (a584 <nrfx_spi_init+0x150>)
    a43a:	f04f 0c28 	mov.w	ip, #40	; 0x28
    a43e:	fb0c fc06 	mul.w	ip, ip, r6
    a442:	eb04 070c 	add.w	r7, r4, ip
    a446:	7f3d      	ldrb	r5, [r7, #28]
    a448:	2d00      	cmp	r5, #0
    a44a:	f040 8098 	bne.w	a57e <nrfx_spi_init+0x14a>
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    a44e:	6805      	ldr	r5, [r0, #0]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    a450:	f844 200c 	str.w	r2, [r4, ip]
    p_cb->p_context = p_context;
    a454:	607b      	str	r3, [r7, #4]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    a456:	7bcb      	ldrb	r3, [r1, #15]
    a458:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    p_cb->ss_pin = p_config->ss_pin;
    a45c:	78cb      	ldrb	r3, [r1, #3]
    a45e:	77bb      	strb	r3, [r7, #30]
    p_cb->orc = p_config->orc;
    a460:	794b      	ldrb	r3, [r1, #5]
    a462:	77fb      	strb	r3, [r7, #31]
    if (!p_config->skip_gpio_cfg)
    a464:	7bcb      	ldrb	r3, [r1, #15]
    a466:	2b00      	cmp	r3, #0
    a468:	d149      	bne.n	a4fe <nrfx_spi_init+0xca>
    *p_pin = pin_number & 0x1F;
    a46a:	780f      	ldrb	r7, [r1, #0]
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    a46c:	2301      	movs	r3, #1
    *p_pin = pin_number & 0x1F;
    a46e:	f007 071f 	and.w	r7, r7, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    a472:	40bb      	lsls	r3, r7
    if (value == 0)
    a474:	7b0f      	ldrb	r7, [r1, #12]
    a476:	2f01      	cmp	r7, #1
    a478:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    a47c:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
    p_reg->OUTCLR = clr_mask;
    a480:	bf94      	ite	ls
    a482:	f8c7 350c 	strls.w	r3, [r7, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
    a486:	f8c7 3508 	strhi.w	r3, [r7, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    a48a:	780b      	ldrb	r3, [r1, #0]
    a48c:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    a490:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    a494:	2701      	movs	r7, #1
    a496:	f84c 7023 	str.w	r7, [ip, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    a49a:	784b      	ldrb	r3, [r1, #1]
    a49c:	2bff      	cmp	r3, #255	; 0xff
    a49e:	d00c      	beq.n	a4ba <nrfx_spi_init+0x86>
    *p_pin = pin_number & 0x1F;
    a4a0:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    a4a4:	409f      	lsls	r7, r3
    p_reg->OUTCLR = clr_mask;
    a4a6:	f8cc 750c 	str.w	r7, [ip, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    a4aa:	784b      	ldrb	r3, [r1, #1]
    a4ac:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    a4b0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    a4b4:	2703      	movs	r7, #3
    a4b6:	f84c 7023 	str.w	r7, [ip, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    a4ba:	788b      	ldrb	r3, [r1, #2]
    a4bc:	2bff      	cmp	r3, #255	; 0xff
    a4be:	d009      	beq.n	a4d4 <nrfx_spi_init+0xa0>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    a4c0:	7b8f      	ldrb	r7, [r1, #14]
    *p_pin = pin_number & 0x1F;
    a4c2:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    a4c6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    a4ca:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    a4ce:	00bf      	lsls	r7, r7, #2
    reg->PIN_CNF[pin_number] = cnf;
    a4d0:	f84c 7023 	str.w	r7, [ip, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
    a4d4:	78cb      	ldrb	r3, [r1, #3]
    a4d6:	2bff      	cmp	r3, #255	; 0xff
    a4d8:	d011      	beq.n	a4fe <nrfx_spi_init+0xca>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    a4da:	2701      	movs	r7, #1
    *p_pin = pin_number & 0x1F;
    a4dc:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    a4e0:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTSET = set_mask;
    a4e4:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    a4e8:	f04f 0c03 	mov.w	ip, #3
    p_reg->OUTSET = set_mask;
    a4ec:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    a4f0:	78cb      	ldrb	r3, [r1, #3]
    a4f2:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    a4f6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    a4fa:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    a4fe:	7c0b      	ldrb	r3, [r1, #16]
    a500:	b99b      	cbnz	r3, a52a <nrfx_spi_init+0xf6>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    a502:	784b      	ldrb	r3, [r1, #1]
        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
    a504:	f891 c000 	ldrb.w	ip, [r1]
                            : NRF_SPI_PIN_NOT_CONNECTED;
    a508:	2bff      	cmp	r3, #255	; 0xff
    a50a:	bf18      	it	ne
    a50c:	461f      	movne	r7, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    a50e:	788b      	ldrb	r3, [r1, #2]
                                        uint32_t       miso_pin)
{
#if defined(SPI_PSEL_SCK_CONNECT_Pos)
    p_reg->PSEL.SCK = sck_pin;
#else
    p_reg->PSELSCK  = sck_pin;
    a510:	f8c5 c508 	str.w	ip, [r5, #1288]	; 0x508
                            : NRF_SPI_PIN_NOT_CONNECTED;
    a514:	bf08      	it	eq
    a516:	f04f 37ff 	moveq.w	r7, #4294967295
                            : NRF_SPI_PIN_NOT_CONNECTED;
    a51a:	2bff      	cmp	r3, #255	; 0xff
    a51c:	bf08      	it	eq
    a51e:	f04f 33ff 	moveq.w	r3, #4294967295
#endif

#if defined(SPI_PSEL_MOSI_CONNECT_Pos)
    p_reg->PSEL.MOSI = mosi_pin;
#else
    p_reg->PSELMOSI = mosi_pin;
    a522:	f8c5 750c 	str.w	r7, [r5, #1292]	; 0x50c
#endif

#if defined(SPI_PSEL_MISO_CONNECT_Pos)
    p_reg->PSEL.MISO = miso_pin;
#else
    p_reg->PSELMISO = miso_pin;
    a526:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    a52a:	688b      	ldr	r3, [r1, #8]
    a52c:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    a530:	7b4b      	ldrb	r3, [r1, #13]

    configure_pins(p_spi, p_config);

    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
    a532:	7b0f      	ldrb	r7, [r1, #12]
    a534:	3b00      	subs	r3, #0
    a536:	bf18      	it	ne
    a538:	2301      	movne	r3, #1
    switch (spi_mode)
    a53a:	2f02      	cmp	r7, #2
    a53c:	d019      	beq.n	a572 <nrfx_spi_init+0x13e>
    a53e:	2f03      	cmp	r7, #3
    a540:	d01a      	beq.n	a578 <nrfx_spi_init+0x144>
    a542:	2f01      	cmp	r7, #1
    a544:	d101      	bne.n	a54a <nrfx_spi_init+0x116>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
    a546:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    a54a:	f8c5 3554 	str.w	r3, [r5, #1364]	; 0x554
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    a54e:	2301      	movs	r3, #1
    a550:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
    a554:	b122      	cbz	r2, a560 <nrfx_spi_init+0x12c>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    a556:	6800      	ldr	r0, [r0, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    a558:	f340 3007 	sbfx	r0, r0, #12, #8
    a55c:	f7fc fa08 	bl	6970 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    a560:	2328      	movs	r3, #40	; 0x28
    a562:	fb03 4406 	mla	r4, r3, r6, r4
    a566:	2300      	movs	r3, #0
    a568:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    a56a:	4807      	ldr	r0, [pc, #28]	; (a588 <nrfx_spi_init+0x154>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    a56c:	2301      	movs	r3, #1
    a56e:	7723      	strb	r3, [r4, #28]
}
    a570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    a572:	f043 0304 	orr.w	r3, r3, #4
        break;
    a576:	e7e8      	b.n	a54a <nrfx_spi_init+0x116>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    a578:	f043 0306 	orr.w	r3, r3, #6
        break;
    a57c:	e7e5      	b.n	a54a <nrfx_spi_init+0x116>
        return err_code;
    a57e:	4803      	ldr	r0, [pc, #12]	; (a58c <nrfx_spi_init+0x158>)
    a580:	e7f6      	b.n	a570 <nrfx_spi_init+0x13c>
    a582:	bf00      	nop
    a584:	20003388 	.word	0x20003388
    a588:	0bad0000 	.word	0x0bad0000
    a58c:	0bad0005 	.word	0x0bad0005

0000a590 <nrfx_spi_uninit>:

void nrfx_spi_uninit(nrfx_spi_t const * p_instance)
{
    a590:	b570      	push	{r4, r5, r6, lr}
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    a592:	7906      	ldrb	r6, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPI_Type * p_spi = p_instance->p_reg;

    if (p_cb->handler)
    a594:	4c26      	ldr	r4, [pc, #152]	; (a630 <nrfx_spi_uninit+0xa0>)
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    a596:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
    a598:	2328      	movs	r3, #40	; 0x28
    a59a:	4373      	muls	r3, r6
    a59c:	58e3      	ldr	r3, [r4, r3]
    a59e:	b133      	cbz	r3, a5ae <nrfx_spi_uninit+0x1e>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    a5a0:	f345 3007 	sbfx	r0, r5, #12, #8
    a5a4:	f7fc f9f2 	bl	698c <arch_irq_disable>
    p_reg->INTENCLR = mask;
    a5a8:	2304      	movs	r3, #4
    a5aa:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
    a5ae:	2300      	movs	r3, #0
    a5b0:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        nrf_spi_int_disable(p_spi, NRF_SPI_ALL_INTS_MASK);
    }

    nrf_spi_disable(p_spi);

    if (!p_cb->skip_gpio_cfg)
    a5b4:	2328      	movs	r3, #40	; 0x28
    a5b6:	fb03 4306 	mla	r3, r3, r6, r4
    a5ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    a5be:	bb83      	cbnz	r3, a622 <nrfx_spi_uninit+0x92>
    return p_reg->PSELSCK;
    a5c0:	f8d5 3508 	ldr.w	r3, [r5, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    a5c4:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    a5c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    a5cc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    a5d0:	2102      	movs	r1, #2
    a5d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return p_reg->PSELMISO;
    a5d6:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
    {
        nrf_gpio_cfg_default(nrf_spi_sck_pin_get(p_spi));

        uint32_t miso_pin = nrf_spi_miso_pin_get(p_spi);
        if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
    a5da:	1c58      	adds	r0, r3, #1
    *p_pin = pin_number & 0x1F;
    a5dc:	bf1e      	ittt	ne
    a5de:	f003 031f 	andne.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    a5e2:	f503 73e0 	addne.w	r3, r3, #448	; 0x1c0
    a5e6:	f842 1023 	strne.w	r1, [r2, r3, lsl #2]
    return p_reg->PSELMOSI;
    a5ea:	f8d5 350c 	ldr.w	r3, [r5, #1292]	; 0x50c
        {
            nrf_gpio_cfg_default(miso_pin);
        }

        uint32_t mosi_pin = nrf_spi_mosi_pin_get(p_spi);
        if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
    a5ee:	1c5a      	adds	r2, r3, #1
    a5f0:	d008      	beq.n	a604 <nrfx_spi_uninit+0x74>
    *p_pin = pin_number & 0x1F;
    a5f2:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    a5f6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    a5fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    a5fe:	2102      	movs	r1, #2
    a600:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        {
            nrf_gpio_cfg_default(mosi_pin);
        }

        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    a604:	2328      	movs	r3, #40	; 0x28
    a606:	fb03 4306 	mla	r3, r3, r6, r4
    a60a:	7f9b      	ldrb	r3, [r3, #30]
    a60c:	2bff      	cmp	r3, #255	; 0xff
    a60e:	d008      	beq.n	a622 <nrfx_spi_uninit+0x92>
    *p_pin = pin_number & 0x1F;
    a610:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    a614:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    a618:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    a61c:	2102      	movs	r1, #2
    a61e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    a622:	2328      	movs	r3, #40	; 0x28
    a624:	fb03 4406 	mla	r4, r3, r6, r4
    a628:	2300      	movs	r3, #0
    a62a:	7723      	strb	r3, [r4, #28]
}
    a62c:	bd70      	pop	{r4, r5, r6, pc}
    a62e:	bf00      	nop
    a630:	20003388 	.word	0x20003388

0000a634 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    a634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    a638:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    a63a:	4e41      	ldr	r6, [pc, #260]	; (a740 <nrfx_spi_xfer+0x10c>)
    a63c:	2328      	movs	r3, #40	; 0x28
    a63e:	437b      	muls	r3, r7
{
    a640:	4694      	mov	ip, r2
    if (p_cb->transfer_in_progress)
    a642:	18f2      	adds	r2, r6, r3
{
    a644:	460d      	mov	r5, r1
    if (p_cb->transfer_in_progress)
    a646:	7f51      	ldrb	r1, [r2, #29]
{
    a648:	4686      	mov	lr, r0
    if (p_cb->transfer_in_progress)
    a64a:	2900      	cmp	r1, #0
    a64c:	d176      	bne.n	a73c <nrfx_spi_xfer+0x108>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
    a64e:	f856 8003 	ldr.w	r8, [r6, r3]
    a652:	f1b8 0f00 	cmp.w	r8, #0
    a656:	d001      	beq.n	a65c <nrfx_spi_xfer+0x28>
        {
            p_cb->transfer_in_progress = true;
    a658:	2301      	movs	r3, #1
    a65a:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    a65c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    a660:	2428      	movs	r4, #40	; 0x28
    a662:	fb04 6407 	mla	r4, r4, r7, r6
    a666:	f104 090c 	add.w	r9, r4, #12
    a66a:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
    p_cb->abort = false;
    a66e:	2300      	movs	r3, #0
    a670:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    a674:	7fa3      	ldrb	r3, [r4, #30]
    a676:	2bff      	cmp	r3, #255	; 0xff
    a678:	d008      	beq.n	a68c <nrfx_spi_xfer+0x58>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    a67a:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
    a67c:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    a680:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTCLR = clr_mask;
    a684:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    a688:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    {
        nrf_gpio_pin_write(p_cb->ss_pin, 0);
    }
    if (flags)
    a68c:	2328      	movs	r3, #40	; 0x28
    a68e:	f1bc 0f00 	cmp.w	ip, #0
    a692:	d006      	beq.n	a6a2 <nrfx_spi_xfer+0x6e>
    {
        p_cb->transfer_in_progress = false;
    a694:	fb03 6307 	mla	r3, r3, r7, r6
    a698:	2200      	movs	r2, #0
        err_code = NRFX_ERROR_NOT_SUPPORTED;
    a69a:	482a      	ldr	r0, [pc, #168]	; (a744 <nrfx_spi_xfer+0x110>)
        p_cb->transfer_in_progress = false;
    a69c:	775a      	strb	r2, [r3, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    a69e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
    a6a2:	f8de 4000 	ldr.w	r4, [lr]
    p_cb->bytes_transferred = 0;
    a6a6:	fb03 6307 	mla	r3, r3, r7, r6
    p_reg->INTENCLR = mask;
    a6aa:	2204      	movs	r2, #4
    a6ac:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    a6b0:	f8c3 c020 	str.w	ip, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a6b4:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
    a6b8:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    nrf_spi_txd_set(p_spi,
    a6bc:	686a      	ldr	r2, [r5, #4]
    a6be:	b192      	cbz	r2, a6e6 <nrfx_spi_xfer+0xb2>
    a6c0:	682b      	ldr	r3, [r5, #0]
    a6c2:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
    a6c4:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
    a6c8:	686b      	ldr	r3, [r5, #4]
    a6ca:	2b01      	cmp	r3, #1
    a6cc:	d90d      	bls.n	a6ea <nrfx_spi_xfer+0xb6>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
    a6ce:	682b      	ldr	r3, [r5, #0]
    a6d0:	785b      	ldrb	r3, [r3, #1]
    a6d2:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_cb->handler)
    a6d6:	f1b8 0f00 	cmp.w	r8, #0
    a6da:	d00e      	beq.n	a6fa <nrfx_spi_xfer+0xc6>
    p_reg->INTENSET = mask;
    a6dc:	2304      	movs	r3, #4
    a6de:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
    a6e2:	4819      	ldr	r0, [pc, #100]	; (a748 <nrfx_spi_xfer+0x114>)
    a6e4:	e7db      	b.n	a69e <nrfx_spi_xfer+0x6a>
    nrf_spi_txd_set(p_spi,
    a6e6:	7fdb      	ldrb	r3, [r3, #31]
    a6e8:	e7ec      	b.n	a6c4 <nrfx_spi_xfer+0x90>
    else if (p_xfer_desc->rx_length > 1)
    a6ea:	68eb      	ldr	r3, [r5, #12]
    a6ec:	2b01      	cmp	r3, #1
    a6ee:	d9f2      	bls.n	a6d6 <nrfx_spi_xfer+0xa2>
        nrf_spi_txd_set(p_spi, p_cb->orc);
    a6f0:	2328      	movs	r3, #40	; 0x28
    a6f2:	fb03 6307 	mla	r3, r3, r7, r6
    p_reg->TXD = data;
    a6f6:	7fdb      	ldrb	r3, [r3, #31]
    a6f8:	e7eb      	b.n	a6d2 <nrfx_spi_xfer+0x9e>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    a6fa:	eb07 0187 	add.w	r1, r7, r7, lsl #2
    a6fe:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a702:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
    a706:	2b00      	cmp	r3, #0
    a708:	d0fb      	beq.n	a702 <nrfx_spi_xfer+0xce>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a70a:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
    a70e:	4620      	mov	r0, r4
    a710:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    a714:	f004 ff61 	bl	f5da <transfer_byte>
    a718:	2800      	cmp	r0, #0
    a71a:	d1f2      	bne.n	a702 <nrfx_spi_xfer+0xce>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    a71c:	2328      	movs	r3, #40	; 0x28
    a71e:	fb03 6607 	mla	r6, r3, r7, r6
    a722:	7fb3      	ldrb	r3, [r6, #30]
    a724:	2bff      	cmp	r3, #255	; 0xff
    a726:	d0dc      	beq.n	a6e2 <nrfx_spi_xfer+0xae>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    a728:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
    a72a:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    a72e:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
    a732:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    a736:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
    a73a:	e7d2      	b.n	a6e2 <nrfx_spi_xfer+0xae>
        return err_code;
    a73c:	4803      	ldr	r0, [pc, #12]	; (a74c <nrfx_spi_xfer+0x118>)
    a73e:	e7ae      	b.n	a69e <nrfx_spi_xfer+0x6a>
    a740:	20003388 	.word	0x20003388
    a744:	0bad0003 	.word	0x0bad0003
    a748:	0bad0000 	.word	0x0bad0000
    a74c:	0bad000b 	.word	0x0bad000b

0000a750 <nrfx_spi_1_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
    a750:	4902      	ldr	r1, [pc, #8]	; (a75c <nrfx_spi_1_irq_handler+0xc>)
    a752:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    a756:	f004 bf73 	b.w	f640 <irq_handler>
    a75a:	bf00      	nop
    a75c:	20003388 	.word	0x20003388

0000a760 <nrfx_spi_2_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_SPI2_ENABLED)
void nrfx_spi_2_irq_handler(void)
{
    irq_handler(NRF_SPI2, &m_cb[NRFX_SPI2_INST_IDX]);
    a760:	4901      	ldr	r1, [pc, #4]	; (a768 <nrfx_spi_2_irq_handler+0x8>)
    a762:	4802      	ldr	r0, [pc, #8]	; (a76c <nrfx_spi_2_irq_handler+0xc>)
    a764:	f004 bf6c 	b.w	f640 <irq_handler>
    a768:	200033b0 	.word	0x200033b0
    a76c:	40023000 	.word	0x40023000

0000a770 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    a770:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    a772:	4c11      	ldr	r4, [pc, #68]	; (a7b8 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    a774:	4a11      	ldr	r2, [pc, #68]	; (a7bc <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    a776:	4912      	ldr	r1, [pc, #72]	; (a7c0 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    a778:	2303      	movs	r3, #3
    a77a:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    a77c:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    a77e:	4b11      	ldr	r3, [pc, #68]	; (a7c4 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    a780:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    a782:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    a784:	f44f 6380 	mov.w	r3, #1024	; 0x400
    a788:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    a78a:	2300      	movs	r3, #0
    a78c:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    a78e:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    a790:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    a792:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    a794:	4a0c      	ldr	r2, [pc, #48]	; (a7c8 <_DoInit+0x58>)
    a796:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    a798:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    a79a:	2210      	movs	r2, #16
    a79c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    a79e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    a7a0:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    a7a2:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    a7a4:	f004 f9f8 	bl	eb98 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    a7a8:	4908      	ldr	r1, [pc, #32]	; (a7cc <_DoInit+0x5c>)
    a7aa:	4620      	mov	r0, r4
    a7ac:	f004 f9f4 	bl	eb98 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    a7b0:	2320      	movs	r3, #32
    a7b2:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    a7b4:	bd10      	pop	{r4, pc}
    a7b6:	bf00      	nop
    a7b8:	200033d8 	.word	0x200033d8
    a7bc:	00013506 	.word	0x00013506
    a7c0:	0001350f 	.word	0x0001350f
    a7c4:	2000380c 	.word	0x2000380c
    a7c8:	200037fc 	.word	0x200037fc
    a7cc:	00013513 	.word	0x00013513

0000a7d0 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    a7d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    a7d4:	4f21      	ldr	r7, [pc, #132]	; (a85c <SEGGER_RTT_WriteSkipNoLock+0x8c>)
    a7d6:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    a7da:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    a7dc:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    a7e0:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    a7e2:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    a7e4:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    a7e6:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    a7e8:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    a7ea:	d831      	bhi.n	a850 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    a7ec:	f8d2 a020 	ldr.w	sl, [r2, #32]
    a7f0:	ebaa 0905 	sub.w	r9, sl, r5
    a7f4:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    a7f8:	4294      	cmp	r4, r2
    a7fa:	d811      	bhi.n	a820 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    a7fc:	2318      	movs	r3, #24
    a7fe:	fb06 3303 	mla	r3, r6, r3, r3
    a802:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
    a804:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    a806:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    a808:	4641      	mov	r1, r8
    a80a:	4428      	add	r0, r5
    a80c:	f004 fa47 	bl	ec9e <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    a810:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    a812:	2318      	movs	r3, #24
    a814:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
    a818:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
    a81a:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    a81c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    a820:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    a822:	429c      	cmp	r4, r3
    a824:	d818      	bhi.n	a858 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    a826:	fb00 bb0b 	mla	fp, r0, fp, fp
    a82a:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    a82c:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    a82e:	f8db 0004 	ldr.w	r0, [fp, #4]
    a832:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    a834:	4428      	add	r0, r5
    a836:	f004 fa32 	bl	ec9e <memcpy>
      if (NumBytes) {
    a83a:	ebb4 040a 	subs.w	r4, r4, sl
    a83e:	d0e8      	beq.n	a812 <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    a840:	f8db 0004 	ldr.w	r0, [fp, #4]
    a844:	4622      	mov	r2, r4
    a846:	eb08 0109 	add.w	r1, r8, r9
    a84a:	f004 fa28 	bl	ec9e <memcpy>
      return 1;
    a84e:	e7e0      	b.n	a812 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
    a850:	3b01      	subs	r3, #1
    a852:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    a854:	42a3      	cmp	r3, r4
    a856:	d2d1      	bcs.n	a7fc <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    a858:	2000      	movs	r0, #0
    a85a:	e7df      	b.n	a81c <SEGGER_RTT_WriteSkipNoLock+0x4c>
    a85c:	200033d8 	.word	0x200033d8

0000a860 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    a860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    a862:	4b14      	ldr	r3, [pc, #80]	; (a8b4 <SEGGER_RTT_WriteNoLock+0x54>)
    a864:	2718      	movs	r7, #24
    a866:	fb00 7507 	mla	r5, r0, r7, r7
    a86a:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    a86c:	fb07 3300 	mla	r3, r7, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    a870:	460e      	mov	r6, r1
  switch (pRing->Flags) {
    a872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a874:	2b01      	cmp	r3, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    a876:	4614      	mov	r4, r2
  switch (pRing->Flags) {
    a878:	d00a      	beq.n	a890 <SEGGER_RTT_WriteNoLock+0x30>
    a87a:	2b02      	cmp	r3, #2
    a87c:	d014      	beq.n	a8a8 <SEGGER_RTT_WriteNoLock+0x48>
    a87e:	b923      	cbnz	r3, a88a <SEGGER_RTT_WriteNoLock+0x2a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    a880:	4628      	mov	r0, r5
    a882:	f004 feff 	bl	f684 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    a886:	4284      	cmp	r4, r0
    a888:	d908      	bls.n	a89c <SEGGER_RTT_WriteNoLock+0x3c>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
    a88a:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
    a88c:	4620      	mov	r0, r4
    a88e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    a890:	4628      	mov	r0, r5
    a892:	f004 fef7 	bl	f684 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    a896:	4284      	cmp	r4, r0
    a898:	bf28      	it	cs
    a89a:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    a89c:	4622      	mov	r2, r4
    a89e:	4631      	mov	r1, r6
    a8a0:	4628      	mov	r0, r5
    a8a2:	f004 fef8 	bl	f696 <_WriteNoCheck>
    break;
    a8a6:	e7f1      	b.n	a88c <SEGGER_RTT_WriteNoLock+0x2c>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    a8a8:	4628      	mov	r0, r5
}
    a8aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    a8ae:	f004 bf0d 	b.w	f6cc <_WriteBlocking>
    a8b2:	bf00      	nop
    a8b4:	200033d8 	.word	0x200033d8

0000a8b8 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    a8b8:	4b03      	ldr	r3, [pc, #12]	; (a8c8 <SEGGER_RTT_HasDataUp+0x10>)
    a8ba:	2218      	movs	r2, #24
    a8bc:	fb02 3300 	mla	r3, r2, r0, r3
    a8c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    a8c2:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    a8c4:	1a80      	subs	r0, r0, r2
    a8c6:	4770      	bx	lr
    a8c8:	200033d8 	.word	0x200033d8

0000a8cc <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
    a8cc:	4803      	ldr	r0, [pc, #12]	; (a8dc <zephyr_rtt_mutex_lock+0x10>)
    a8ce:	f04f 32ff 	mov.w	r2, #4294967295
    a8d2:	f04f 33ff 	mov.w	r3, #4294967295
    a8d6:	f000 bb97 	b.w	b008 <z_impl_k_mutex_lock>
    a8da:	bf00      	nop
    a8dc:	2000031c 	.word	0x2000031c

0000a8e0 <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
    a8e0:	4801      	ldr	r0, [pc, #4]	; (a8e8 <zephyr_rtt_mutex_unlock+0x8>)
    a8e2:	f000 bc0b 	b.w	b0fc <z_impl_k_mutex_unlock>
    a8e6:	bf00      	nop
    a8e8:	2000031c 	.word	0x2000031c

0000a8ec <device_visitor>:

static int device_visitor(const device_handle_t *handles,
			   size_t handle_count,
			   device_visitor_callback_t visitor_cb,
			   void *context)
{
    a8ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t numdev = __device_end - __device_start;
    a8f0:	f8df b048 	ldr.w	fp, [pc, #72]	; a93c <device_visitor+0x50>
    a8f4:	4d12      	ldr	r5, [pc, #72]	; (a940 <device_visitor+0x54>)
    a8f6:	469a      	mov	sl, r3
    a8f8:	eba5 050b 	sub.w	r5, r5, fp
    a8fc:	4b11      	ldr	r3, [pc, #68]	; (a944 <device_visitor+0x58>)
    a8fe:	10ad      	asrs	r5, r5, #2
    a900:	4680      	mov	r8, r0
    a902:	460f      	mov	r7, r1
    a904:	4691      	mov	r9, r2
    a906:	435d      	muls	r5, r3
	/* Iterate over fixed devices */
	for (size_t i = 0; i < handle_count; ++i) {
    a908:	2600      	movs	r6, #0
    a90a:	42be      	cmp	r6, r7
    a90c:	d102      	bne.n	a914 <device_visitor+0x28>
		if (rc < 0) {
			return rc;
		}
	}

	return handle_count;
    a90e:	4630      	mov	r0, r6
}
    a910:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		device_handle_t dh = handles[i];
    a914:	f938 4016 	ldrsh.w	r4, [r8, r6, lsl #1]
	if ((dev_handle > 0) && ((size_t)dev_handle <= numdev)) {
    a918:	2c00      	cmp	r4, #0
    a91a:	dd0d      	ble.n	a938 <device_visitor+0x4c>
    a91c:	42a5      	cmp	r5, r4
    a91e:	d30b      	bcc.n	a938 <device_visitor+0x4c>
		dev = &__device_start[dev_handle - 1];
    a920:	3c01      	subs	r4, #1
    a922:	b224      	sxth	r4, r4
    a924:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    a928:	eb0b 0084 	add.w	r0, fp, r4, lsl #2
		int rc = visitor_cb(rdev, context);
    a92c:	4651      	mov	r1, sl
    a92e:	47c8      	blx	r9
		if (rc < 0) {
    a930:	2800      	cmp	r0, #0
    a932:	dbed      	blt.n	a910 <device_visitor+0x24>
	for (size_t i = 0; i < handle_count; ++i) {
    a934:	3601      	adds	r6, #1
    a936:	e7e8      	b.n	a90a <device_visitor+0x1e>
	const struct device *dev = NULL;
    a938:	2000      	movs	r0, #0
    a93a:	e7f7      	b.n	a92c <device_visitor+0x40>
    a93c:	0000fe50 	.word	0x0000fe50
    a940:	0000fef8 	.word	0x0000fef8
    a944:	b6db6db7 	.word	0xb6db6db7

0000a948 <z_device_get_all_static>:
	*devices = __device_start;
    a948:	4a03      	ldr	r2, [pc, #12]	; (a958 <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
    a94a:	4b04      	ldr	r3, [pc, #16]	; (a95c <z_device_get_all_static+0x14>)
	*devices = __device_start;
    a94c:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
    a94e:	1a9b      	subs	r3, r3, r2
}
    a950:	4803      	ldr	r0, [pc, #12]	; (a960 <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
    a952:	109b      	asrs	r3, r3, #2
}
    a954:	4358      	muls	r0, r3
    a956:	4770      	bx	lr
    a958:	0000fe50 	.word	0x0000fe50
    a95c:	0000fef8 	.word	0x0000fef8
    a960:	b6db6db7 	.word	0xb6db6db7

0000a964 <z_impl_device_get_binding>:
{
    a964:	b570      	push	{r4, r5, r6, lr}
	if ((name == NULL) || (name[0] == '\0')) {
    a966:	4605      	mov	r5, r0
    a968:	b910      	cbnz	r0, a970 <z_impl_device_get_binding+0xc>
		return NULL;
    a96a:	2400      	movs	r4, #0
}
    a96c:	4620      	mov	r0, r4
    a96e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    a970:	7803      	ldrb	r3, [r0, #0]
    a972:	2b00      	cmp	r3, #0
    a974:	d0f9      	beq.n	a96a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    a976:	4c0e      	ldr	r4, [pc, #56]	; (a9b0 <z_impl_device_get_binding+0x4c>)
    a978:	4e0e      	ldr	r6, [pc, #56]	; (a9b4 <z_impl_device_get_binding+0x50>)
    a97a:	42b4      	cmp	r4, r6
    a97c:	d108      	bne.n	a990 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    a97e:	4c0c      	ldr	r4, [pc, #48]	; (a9b0 <z_impl_device_get_binding+0x4c>)
    a980:	42b4      	cmp	r4, r6
    a982:	d0f2      	beq.n	a96a <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    a984:	4620      	mov	r0, r4
    a986:	f004 fed3 	bl	f730 <z_device_is_ready>
    a98a:	b950      	cbnz	r0, a9a2 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    a98c:	341c      	adds	r4, #28
    a98e:	e7f7      	b.n	a980 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    a990:	4620      	mov	r0, r4
    a992:	f004 fecd 	bl	f730 <z_device_is_ready>
    a996:	b110      	cbz	r0, a99e <z_impl_device_get_binding+0x3a>
    a998:	6823      	ldr	r3, [r4, #0]
    a99a:	42ab      	cmp	r3, r5
    a99c:	d0e6      	beq.n	a96c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    a99e:	341c      	adds	r4, #28
    a9a0:	e7eb      	b.n	a97a <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    a9a2:	6821      	ldr	r1, [r4, #0]
    a9a4:	4628      	mov	r0, r5
    a9a6:	f004 f933 	bl	ec10 <strcmp>
    a9aa:	2800      	cmp	r0, #0
    a9ac:	d1ee      	bne.n	a98c <z_impl_device_get_binding+0x28>
    a9ae:	e7dd      	b.n	a96c <z_impl_device_get_binding+0x8>
    a9b0:	0000fe50 	.word	0x0000fe50
    a9b4:	0000fef8 	.word	0x0000fef8

0000a9b8 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    a9b8:	4b01      	ldr	r3, [pc, #4]	; (a9c0 <z_impl_z_errno+0x8>)
    a9ba:	6898      	ldr	r0, [r3, #8]
}
    a9bc:	3098      	adds	r0, #152	; 0x98
    a9be:	4770      	bx	lr
    a9c0:	20003480 	.word	0x20003480

0000a9c4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    a9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a9c8:	b086      	sub	sp, #24
    a9ca:	4605      	mov	r5, r0
    a9cc:	af00      	add	r7, sp, #0
    a9ce:	460e      	mov	r6, r1
	__asm__ volatile(
    a9d0:	f04f 0320 	mov.w	r3, #32
    a9d4:	f3ef 8911 	mrs	r9, BASEPRI
    a9d8:	f383 8812 	msr	BASEPRI_MAX, r3
    a9dc:	f3bf 8f6f 	isb	sy
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    a9e0:	f8df 80d8 	ldr.w	r8, [pc, #216]	; aabc <z_fatal_error+0xf8>
	return z_impl_z_current_get();
    a9e4:	f000 ff16 	bl	b814 <z_impl_z_current_get>
    a9e8:	f8d8 3000 	ldr.w	r3, [r8]
    a9ec:	0759      	lsls	r1, r3, #29
    a9ee:	4604      	mov	r4, r0
    a9f0:	d061      	beq.n	aab6 <z_fatal_error+0xf2>
	switch (reason) {
    a9f2:	2d04      	cmp	r5, #4
    a9f4:	bf96      	itet	ls
    a9f6:	4b32      	ldrls	r3, [pc, #200]	; (aac0 <z_fatal_error+0xfc>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    a9f8:	4b32      	ldrhi	r3, [pc, #200]	; (aac4 <z_fatal_error+0x100>)
    a9fa:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
    a9fe:	46ea      	mov	sl, sp
    aa00:	b08a      	sub	sp, #40	; 0x28
    aa02:	466a      	mov	r2, sp
    aa04:	4930      	ldr	r1, [pc, #192]	; (aac8 <z_fatal_error+0x104>)
    aa06:	61d3      	str	r3, [r2, #28]
    aa08:	e9c2 1505 	strd	r1, r5, [r2, #20]
    aa0c:	f240 3101 	movw	r1, #769	; 0x301
    aa10:	8491      	strh	r1, [r2, #36]	; 0x24
    aa12:	2300      	movs	r3, #0
    aa14:	492d      	ldr	r1, [pc, #180]	; (aacc <z_fatal_error+0x108>)
    aa16:	6213      	str	r3, [r2, #32]
    aa18:	f842 1f10 	str.w	r1, [r2, #16]!
    aa1c:	4827      	ldr	r0, [pc, #156]	; (aabc <z_fatal_error+0xf8>)
    aa1e:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
    aa22:	f7f8 fe95 	bl	3750 <z_impl_z_log_msg_static_create>
    aa26:	46d5      	mov	sp, sl
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    aa28:	b19e      	cbz	r6, aa52 <z_fatal_error+0x8e>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    aa2a:	69f3      	ldr	r3, [r6, #28]
		LOG_ERR("Fault during interrupt handling\n");
    aa2c:	f8d8 2000 	ldr.w	r2, [r8]
    aa30:	f3c3 0308 	ubfx	r3, r3, #0, #9
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    aa34:	b16b      	cbz	r3, aa52 <z_fatal_error+0x8e>
		LOG_ERR("Fault during interrupt handling\n");
    aa36:	0752      	lsls	r2, r2, #29
    aa38:	d025      	beq.n	aa86 <z_fatal_error+0xc2>
    aa3a:	4b25      	ldr	r3, [pc, #148]	; (aad0 <z_fatal_error+0x10c>)
    aa3c:	617b      	str	r3, [r7, #20]
    aa3e:	2302      	movs	r3, #2
    aa40:	613b      	str	r3, [r7, #16]
    aa42:	481e      	ldr	r0, [pc, #120]	; (aabc <z_fatal_error+0xf8>)
    aa44:	2300      	movs	r3, #0
    aa46:	f107 0210 	add.w	r2, r7, #16
    aa4a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    aa4e:	f7f8 fe7f 	bl	3750 <z_impl_z_log_msg_static_create>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    aa52:	f8d8 3000 	ldr.w	r3, [r8]
    aa56:	075b      	lsls	r3, r3, #29
    aa58:	d015      	beq.n	aa86 <z_fatal_error+0xc2>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    aa5a:	bb1c      	cbnz	r4, aaa4 <z_fatal_error+0xe0>
		thread_name = "unknown";
    aa5c:	481d      	ldr	r0, [pc, #116]	; (aad4 <z_fatal_error+0x110>)
	LOG_ERR("Current thread: %p (%s)", thread,
    aa5e:	46e8      	mov	r8, sp
    aa60:	b08a      	sub	sp, #40	; 0x28
    aa62:	466a      	mov	r2, sp
    aa64:	4b1c      	ldr	r3, [pc, #112]	; (aad8 <z_fatal_error+0x114>)
    aa66:	61d0      	str	r0, [r2, #28]
    aa68:	e9c2 3405 	strd	r3, r4, [r2, #20]
    aa6c:	f240 3301 	movw	r3, #769	; 0x301
    aa70:	8413      	strh	r3, [r2, #32]
    aa72:	4b1a      	ldr	r3, [pc, #104]	; (aadc <z_fatal_error+0x118>)
    aa74:	f842 3f10 	str.w	r3, [r2, #16]!
    aa78:	4810      	ldr	r0, [pc, #64]	; (aabc <z_fatal_error+0xf8>)
    aa7a:	2300      	movs	r3, #0
    aa7c:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    aa80:	f7f8 fe66 	bl	3750 <z_impl_z_log_msg_static_create>
    aa84:	46c5      	mov	sp, r8

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    aa86:	4631      	mov	r1, r6
    aa88:	4628      	mov	r0, r5
    aa8a:	f7fe febd 	bl	9808 <k_sys_fatal_error_handler>
	__asm__ volatile(
    aa8e:	f389 8811 	msr	BASEPRI, r9
    aa92:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    aa96:	4620      	mov	r0, r4
    aa98:	f7fc fc5c 	bl	7354 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    aa9c:	3718      	adds	r7, #24
    aa9e:	46bd      	mov	sp, r7
    aaa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    aaa4:	4620      	mov	r0, r4
    aaa6:	f004 fe70 	bl	f78a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    aaaa:	2800      	cmp	r0, #0
    aaac:	d0d6      	beq.n	aa5c <z_fatal_error+0x98>
    aaae:	7803      	ldrb	r3, [r0, #0]
    aab0:	2b00      	cmp	r3, #0
    aab2:	d0d3      	beq.n	aa5c <z_fatal_error+0x98>
    aab4:	e7d3      	b.n	aa5e <z_fatal_error+0x9a>
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    aab6:	2e00      	cmp	r6, #0
    aab8:	d1b7      	bne.n	aa2a <z_fatal_error+0x66>
    aaba:	e7e4      	b.n	aa86 <z_fatal_error+0xc2>
    aabc:	200002f8 	.word	0x200002f8
    aac0:	00010d64 	.word	0x00010d64
    aac4:	0001351a 	.word	0x0001351a
    aac8:	00013528 	.word	0x00013528
    aacc:	01000005 	.word	0x01000005
    aad0:	00013550 	.word	0x00013550
    aad4:	000130e5 	.word	0x000130e5
    aad8:	00013571 	.word	0x00013571
    aadc:	01000004 	.word	0x01000004

0000aae0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    aae0:	4b10      	ldr	r3, [pc, #64]	; (ab24 <z_sys_init_run_level+0x44>)
{
    aae2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    aae4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    aae8:	3001      	adds	r0, #1
    aaea:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    aaee:	42a6      	cmp	r6, r4
    aaf0:	d800      	bhi.n	aaf4 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    aaf2:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    aaf4:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    aaf8:	b18d      	cbz	r5, ab1e <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    aafa:	4628      	mov	r0, r5
    aafc:	4798      	blx	r3
			if (rc != 0) {
    aafe:	b138      	cbz	r0, ab10 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    ab00:	2800      	cmp	r0, #0
    ab02:	bfb8      	it	lt
    ab04:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    ab06:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    ab08:	28ff      	cmp	r0, #255	; 0xff
    ab0a:	bfa8      	it	ge
    ab0c:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    ab0e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    ab10:	68ea      	ldr	r2, [r5, #12]
    ab12:	7853      	ldrb	r3, [r2, #1]
    ab14:	f043 0301 	orr.w	r3, r3, #1
    ab18:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    ab1a:	3408      	adds	r4, #8
    ab1c:	e7e7      	b.n	aaee <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    ab1e:	4798      	blx	r3
    ab20:	e7fb      	b.n	ab1a <z_sys_init_run_level+0x3a>
    ab22:	bf00      	nop
    ab24:	00010d78 	.word	0x00010d78

0000ab28 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    ab28:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    ab2a:	4b0a      	ldr	r3, [pc, #40]	; (ab54 <bg_thread_main+0x2c>)
    ab2c:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    ab2e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    ab30:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    ab32:	f7ff ffd5 	bl	aae0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    ab36:	f001 f969 	bl	be0c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    ab3a:	2004      	movs	r0, #4
    ab3c:	f7ff ffd0 	bl	aae0 <z_sys_init_run_level>

	z_init_static_threads();
    ab40:	f000 f9e6 	bl	af10 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    ab44:	f7f5 fc34 	bl	3b0 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    ab48:	4a03      	ldr	r2, [pc, #12]	; (ab58 <bg_thread_main+0x30>)
    ab4a:	7b13      	ldrb	r3, [r2, #12]
    ab4c:	f023 0301 	bic.w	r3, r3, #1
    ab50:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    ab52:	bd08      	pop	{r3, pc}
    ab54:	20003c0c 	.word	0x20003c0c
    ab58:	20000c30 	.word	0x20000c30

0000ab5c <z_bss_zero>:
{
    ab5c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    ab5e:	4803      	ldr	r0, [pc, #12]	; (ab6c <z_bss_zero+0x10>)
    ab60:	4a03      	ldr	r2, [pc, #12]	; (ab70 <z_bss_zero+0x14>)
    ab62:	2100      	movs	r1, #0
    ab64:	1a12      	subs	r2, r2, r0
    ab66:	f004 fe06 	bl	f776 <z_early_memset>
}
    ab6a:	bd08      	pop	{r3, pc}
    ab6c:	20000360 	.word	0x20000360
    ab70:	20003c10 	.word	0x20003c10

0000ab74 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    ab74:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
    ab76:	4e15      	ldr	r6, [pc, #84]	; (abcc <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    ab78:	4d15      	ldr	r5, [pc, #84]	; (abd0 <z_init_cpu+0x5c>)
	z_setup_new_thread(thread, stack,
    ab7a:	4916      	ldr	r1, [pc, #88]	; (abd4 <z_init_cpu+0x60>)
{
    ab7c:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    ab7e:	23b8      	movs	r3, #184	; 0xb8
    ab80:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
    ab84:	4b14      	ldr	r3, [pc, #80]	; (abd8 <z_init_cpu+0x64>)
    ab86:	9305      	str	r3, [sp, #20]
    ab88:	2201      	movs	r2, #1
    ab8a:	230f      	movs	r3, #15
    ab8c:	e9cd 3203 	strd	r3, r2, [sp, #12]
    ab90:	2300      	movs	r3, #0
    ab92:	e9cd 3301 	strd	r3, r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    ab96:	2314      	movs	r3, #20
    ab98:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
    ab9c:	f44f 72a0 	mov.w	r2, #320	; 0x140
{
    aba0:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    aba2:	fb02 1100 	mla	r1, r2, r0, r1
    aba6:	4b0d      	ldr	r3, [pc, #52]	; (abdc <z_init_cpu+0x68>)
    aba8:	9500      	str	r5, [sp, #0]
    abaa:	4630      	mov	r0, r6
    abac:	f000 f920 	bl	adf0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    abb0:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
    abb2:	742c      	strb	r4, [r5, #16]
    abb4:	f023 0304 	bic.w	r3, r3, #4
    abb8:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    abba:	4b09      	ldr	r3, [pc, #36]	; (abe0 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    abbc:	60ee      	str	r6, [r5, #12]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    abbe:	3401      	adds	r4, #1
    abc0:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].irq_stack =
    abc4:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    abc6:	b006      	add	sp, #24
    abc8:	bd70      	pop	{r4, r5, r6, pc}
    abca:	bf00      	nop
    abcc:	20000b78 	.word	0x20000b78
    abd0:	20003480 	.word	0x20003480
    abd4:	20005108 	.word	0x20005108
    abd8:	000135d3 	.word	0x000135d3
    abdc:	0000afd1 	.word	0x0000afd1
    abe0:	20004908 	.word	0x20004908

0000abe4 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    abe4:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    abe6:	2000      	movs	r0, #0
{
    abe8:	b0b4      	sub	sp, #208	; 0xd0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    abea:	f7ff ff79 	bl	aae0 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    abee:	4b2e      	ldr	r3, [pc, #184]	; (aca8 <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    abf0:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    abf4:	4d2d      	ldr	r5, [pc, #180]	; (acac <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    abf6:	4e2e      	ldr	r6, [pc, #184]	; (acb0 <z_cstart+0xcc>)
    abf8:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    abfa:	4f2e      	ldr	r7, [pc, #184]	; (acb4 <z_cstart+0xd0>)
    abfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    ac00:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ac02:	2400      	movs	r4, #0
    ac04:	23e0      	movs	r3, #224	; 0xe0
    ac06:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    ac0a:	77ec      	strb	r4, [r5, #31]
    ac0c:	762c      	strb	r4, [r5, #24]
    ac0e:	766c      	strb	r4, [r5, #25]
    ac10:	76ac      	strb	r4, [r5, #26]
    ac12:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    ac16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ac18:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    ac1c:	626b      	str	r3, [r5, #36]	; 0x24
    ac1e:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    ac22:	f7fc fb03 	bl	722c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    ac26:	f7fb fe0d 	bl	6844 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    ac2a:	f04f 33ff 	mov.w	r3, #4294967295
    ac2e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    ac30:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    ac32:	f7fc fc3f 	bl	74b4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    ac36:	f7fc fba3 	bl	7380 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    ac3a:	f7f8 fb0d 	bl	3258 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    ac3e:	f240 1301 	movw	r3, #257	; 0x101
    ac42:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    ac46:	ab06      	add	r3, sp, #24
    ac48:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    ac4a:	e9cd 442d 	strd	r4, r4, [sp, #180]	; 0xb4
	dummy_thread->resource_pool = NULL;
    ac4e:	9430      	str	r4, [sp, #192]	; 0xc0
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    ac50:	f004 fd6d 	bl	f72e <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    ac54:	2001      	movs	r0, #1
    ac56:	f7ff ff43 	bl	aae0 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    ac5a:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    ac5c:	4d16      	ldr	r5, [pc, #88]	; (acb8 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    ac5e:	f7ff ff3f 	bl	aae0 <z_sys_init_run_level>
	z_sched_init();
    ac62:	f000 fd33 	bl	b6cc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    ac66:	4b15      	ldr	r3, [pc, #84]	; (acbc <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
    ac68:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    ac6a:	9305      	str	r3, [sp, #20]
    ac6c:	2301      	movs	r3, #1
    ac6e:	4914      	ldr	r1, [pc, #80]	; (acc0 <z_cstart+0xdc>)
    ac70:	9400      	str	r4, [sp, #0]
    ac72:	e9cd 4303 	strd	r4, r3, [sp, #12]
    ac76:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ac7a:	463b      	mov	r3, r7
    ac7c:	e9cd 4401 	strd	r4, r4, [sp, #4]
    ac80:	4628      	mov	r0, r5
    ac82:	f000 f8b5 	bl	adf0 <z_setup_new_thread>
    ac86:	7b6a      	ldrb	r2, [r5, #13]
    ac88:	4606      	mov	r6, r0
    ac8a:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    ac8e:	4628      	mov	r0, r5
    ac90:	736a      	strb	r2, [r5, #13]
    ac92:	f004 fdf8 	bl	f886 <z_ready_thread>
	z_init_cpu(0);
    ac96:	4620      	mov	r0, r4
    ac98:	f7ff ff6c 	bl	ab74 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    ac9c:	463a      	mov	r2, r7
    ac9e:	4631      	mov	r1, r6
    aca0:	4628      	mov	r0, r5
    aca2:	f7fb ff3b 	bl	6b1c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    aca6:	bf00      	nop
    aca8:	20005108 	.word	0x20005108
    acac:	e000ed00 	.word	0xe000ed00
    acb0:	20003480 	.word	0x20003480
    acb4:	0000ab29 	.word	0x0000ab29
    acb8:	20000c30 	.word	0x20000c30
    acbc:	00010f04 	.word	0x00010f04
    acc0:	20005248 	.word	0x20005248

0000acc4 <k_thread_foreach>:

#define _FOREACH_STATIC_THREAD(thread_data)              \
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data)

void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data)
{
    acc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    acc6:	4605      	mov	r5, r0
    acc8:	460e      	mov	r6, r1
	__asm__ volatile(
    acca:	f04f 0320 	mov.w	r3, #32
    acce:	f3ef 8711 	mrs	r7, BASEPRI
    acd2:	f383 8812 	msr	BASEPRI_MAX, r3
    acd6:	f3bf 8f6f 	isb	sy
	 */
	key = k_spin_lock(&z_thread_monitor_lock);

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, foreach);

	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
    acda:	4b06      	ldr	r3, [pc, #24]	; (acf4 <k_thread_foreach+0x30>)
    acdc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    acde:	b924      	cbnz	r4, acea <k_thread_foreach+0x26>
	__asm__ volatile(
    ace0:	f387 8811 	msr	BASEPRI, r7
    ace4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, foreach);

	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
}
    ace8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		user_cb(thread, user_data);
    acea:	4620      	mov	r0, r4
    acec:	4631      	mov	r1, r6
    acee:	47a8      	blx	r5
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
    acf0:	6f64      	ldr	r4, [r4, #116]	; 0x74
    acf2:	e7f4      	b.n	acde <k_thread_foreach+0x1a>
    acf4:	20003480 	.word	0x20003480

0000acf8 <z_thread_monitor_exit>:
	__asm__ volatile(
    acf8:	f04f 0320 	mov.w	r3, #32
    acfc:	f3ef 8111 	mrs	r1, BASEPRI
    ad00:	f383 8812 	msr	BASEPRI_MAX, r3
    ad04:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    ad08:	4a09      	ldr	r2, [pc, #36]	; (ad30 <z_thread_monitor_exit+0x38>)
    ad0a:	6a53      	ldr	r3, [r2, #36]	; 0x24
    ad0c:	4283      	cmp	r3, r0
    ad0e:	d107      	bne.n	ad20 <z_thread_monitor_exit+0x28>
		_kernel.threads = _kernel.threads->next_thread;
    ad10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    ad12:	6253      	str	r3, [r2, #36]	; 0x24
	__asm__ volatile(
    ad14:	f381 8811 	msr	BASEPRI, r1
    ad18:	f3bf 8f6f 	isb	sy
			prev_thread->next_thread = thread->next_thread;
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    ad1c:	4770      	bx	lr
    ad1e:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    ad20:	2b00      	cmp	r3, #0
    ad22:	d0f7      	beq.n	ad14 <z_thread_monitor_exit+0x1c>
			(thread != prev_thread->next_thread)) {
    ad24:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
    ad26:	4282      	cmp	r2, r0
    ad28:	d1f9      	bne.n	ad1e <z_thread_monitor_exit+0x26>
			prev_thread->next_thread = thread->next_thread;
    ad2a:	6f42      	ldr	r2, [r0, #116]	; 0x74
    ad2c:	675a      	str	r2, [r3, #116]	; 0x74
    ad2e:	e7f1      	b.n	ad14 <z_thread_monitor_exit+0x1c>
    ad30:	20003480 	.word	0x20003480

0000ad34 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    ad34:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    ad36:	4604      	mov	r4, r0
    ad38:	b908      	cbnz	r0, ad3e <z_impl_k_thread_name_set+0xa>
		thread = _current;
    ad3a:	4b05      	ldr	r3, [pc, #20]	; (ad50 <z_impl_k_thread_name_set+0x1c>)
    ad3c:	689c      	ldr	r4, [r3, #8]
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
    ad3e:	221f      	movs	r2, #31
    ad40:	f104 0078 	add.w	r0, r4, #120	; 0x78
    ad44:	f003 ff32 	bl	ebac <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    ad48:	2000      	movs	r0, #0
    ad4a:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    ad4e:	bd10      	pop	{r4, pc}
    ad50:	20003480 	.word	0x20003480

0000ad54 <k_thread_state_str>:

	return bytes_to_copy;
}

const char *k_thread_state_str(k_tid_t thread_id, char *buf, size_t buf_size)
{
    ad54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	static const char  *states_str[8] = {"dummy", "pending", "prestart",
					     "dead", "suspended", "aborting",
					     "", "queued"};
	static const size_t states_sz[8] = {5, 7, 8, 4, 9, 8, 0, 6};

	if ((buf == NULL) || (buf_size == 0)) {
    ad58:	460c      	mov	r4, r1
    ad5a:	2900      	cmp	r1, #0
    ad5c:	d03d      	beq.n	adda <k_thread_state_str+0x86>
    ad5e:	2a00      	cmp	r2, #0
    ad60:	d03b      	beq.n	adda <k_thread_state_str+0x86>
	uint8_t     thread_state = thread_id->base.thread_state;
    ad62:	7b47      	ldrb	r7, [r0, #13]
		return "";
	}

	buf_size--;   /* Reserve 1 byte for end-of-string character */
    ad64:	1e56      	subs	r6, r2, #1
		bit = BIT(index);
		if ((thread_state & bit) == 0) {
			continue;
		}

		off += copy_bytes(buf + off, buf_size - off,
    ad66:	4608      	mov	r0, r1
	for (uint8_t index = 0; thread_state != 0; index++) {
    ad68:	b38f      	cbz	r7, adce <k_thread_state_str+0x7a>
    ad6a:	f04f 0b00 	mov.w	fp, #0
				  states_str[index], states_sz[index]);
    ad6e:	f8df 9070 	ldr.w	r9, [pc, #112]	; ade0 <k_thread_state_str+0x8c>
		off += copy_bytes(buf + off, buf_size - off,
    ad72:	f8df a070 	ldr.w	sl, [pc, #112]	; ade4 <k_thread_state_str+0x90>
	size_t      off = 0;
    ad76:	465d      	mov	r5, fp
		bit = BIT(index);
    ad78:	fa5f f18b 	uxtb.w	r1, fp
    ad7c:	f04f 0801 	mov.w	r8, #1
    ad80:	fa08 f801 	lsl.w	r8, r8, r1
		if ((thread_state & bit) == 0) {
    ad84:	ea17 0f08 	tst.w	r7, r8
    ad88:	d01d      	beq.n	adc6 <k_thread_state_str+0x72>
	bytes_to_copy = MIN(dest_size, src_size);
    ad8a:	f859 3021 	ldr.w	r3, [r9, r1, lsl #2]
	memcpy(dest, src, bytes_to_copy);
    ad8e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
		off += copy_bytes(buf + off, buf_size - off,
    ad92:	1b72      	subs	r2, r6, r5
	bytes_to_copy = MIN(dest_size, src_size);
    ad94:	429a      	cmp	r2, r3
    ad96:	bf28      	it	cs
    ad98:	461a      	movcs	r2, r3
	memcpy(dest, src, bytes_to_copy);
    ad9a:	9201      	str	r2, [sp, #4]
    ad9c:	f003 ff7f 	bl	ec9e <memcpy>
		off += copy_bytes(buf + off, buf_size - off,
    ada0:	9a01      	ldr	r2, [sp, #4]

		thread_state &= ~bit;

		if (thread_state != 0) {
    ada2:	ea37 0708 	bics.w	r7, r7, r8
		off += copy_bytes(buf + off, buf_size - off,
    ada6:	4415      	add	r5, r2
		if (thread_state != 0) {
    ada8:	eb04 0005 	add.w	r0, r4, r5
    adac:	d00f      	beq.n	adce <k_thread_state_str+0x7a>
			off += copy_bytes(buf + off, buf_size - off, "+", 1);
    adae:	eba6 0805 	sub.w	r8, r6, r5
	bytes_to_copy = MIN(dest_size, src_size);
    adb2:	f1b8 0f01 	cmp.w	r8, #1
    adb6:	bf28      	it	cs
    adb8:	f04f 0801 	movcs.w	r8, #1
	memcpy(dest, src, bytes_to_copy);
    adbc:	490a      	ldr	r1, [pc, #40]	; (ade8 <k_thread_state_str+0x94>)
    adbe:	4642      	mov	r2, r8
    adc0:	f003 ff6d 	bl	ec9e <memcpy>
			off += copy_bytes(buf + off, buf_size - off, "+", 1);
    adc4:	4445      	add	r5, r8
	for (uint8_t index = 0; thread_state != 0; index++) {
    adc6:	f10b 0b01 	add.w	fp, fp, #1
		off += copy_bytes(buf + off, buf_size - off,
    adca:	1960      	adds	r0, r4, r5
    adcc:	e7d4      	b.n	ad78 <k_thread_state_str+0x24>
		}
	}

	buf[off] = '\0';
    adce:	2300      	movs	r3, #0
    add0:	7003      	strb	r3, [r0, #0]

	return (const char *)buf;
    add2:	4620      	mov	r0, r4
}
    add4:	b003      	add	sp, #12
    add6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return "";
    adda:	4804      	ldr	r0, [pc, #16]	; (adec <k_thread_state_str+0x98>)
    addc:	e7fa      	b.n	add4 <k_thread_state_str+0x80>
    adde:	bf00      	nop
    ade0:	00010d90 	.word	0x00010d90
    ade4:	00010db0 	.word	0x00010db0
    ade8:	000135db 	.word	0x000135db
    adec:	0001188f 	.word	0x0001188f

0000adf0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    adf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    adf4:	b085      	sub	sp, #20
    adf6:	461f      	mov	r7, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    adf8:	f100 0358 	add.w	r3, r0, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    adfc:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    ae00:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ae02:	7303      	strb	r3, [r0, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    ae04:	3207      	adds	r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
    ae06:	2304      	movs	r3, #4
	thread_base->pended_on = NULL;
    ae08:	2500      	movs	r5, #0
{
    ae0a:	460e      	mov	r6, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    ae0c:	f022 0a07 	bic.w	sl, r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
    ae10:	7343      	strb	r3, [r0, #13]

	thread_base->prio = priority;
    ae12:	9b11      	ldr	r3, [sp, #68]	; 0x44
	thread_base->pended_on = NULL;
    ae14:	6085      	str	r5, [r0, #8]
{
    ae16:	4604      	mov	r4, r0
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    ae18:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->prio = priority;
    ae1c:	7383      	strb	r3, [r0, #14]

	thread_base->sched_locked = 0U;
    ae1e:	73c5      	strb	r5, [r0, #15]
	stack_ptr = (char *)stack + stack_obj_size;
    ae20:	eb01 090a 	add.w	r9, r1, sl
	memset(stack_buf_start, 0xaa, stack_buf_size);
    ae24:	4652      	mov	r2, sl
    ae26:	21aa      	movs	r1, #170	; 0xaa
    ae28:	4630      	mov	r0, r6
{
    ae2a:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    ae2e:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
	memset(stack_buf_start, 0xaa, stack_buf_size);
    ae32:	f003 ff3f 	bl	ecb4 <memset>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    ae36:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->stack_info.delta = delta;
    ae38:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
	new_thread->stack_info.size = stack_buf_size;
    ae3c:	e9c4 6a27 	strd	r6, sl, [r4, #156]	; 0x9c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    ae40:	9302      	str	r3, [sp, #8]
    ae42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ae44:	464a      	mov	r2, r9
    ae46:	e9cd b300 	strd	fp, r3, [sp]
    ae4a:	4631      	mov	r1, r6
    ae4c:	463b      	mov	r3, r7
    ae4e:	4620      	mov	r0, r4
    ae50:	f7fb fe48 	bl	6ae4 <arch_new_thread>
	new_thread->entry.parameter2 = p2;
    ae54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ae56:	66e3      	str	r3, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
    ae58:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->init_data = NULL;
    ae5a:	6565      	str	r5, [r4, #84]	; 0x54
	new_thread->entry.parameter1 = p1;
    ae5c:	e9c4 7b19 	strd	r7, fp, [r4, #100]	; 0x64
	new_thread->entry.parameter3 = p3;
    ae60:	6723      	str	r3, [r4, #112]	; 0x70
	__asm__ volatile(
    ae62:	f04f 0220 	mov.w	r2, #32
    ae66:	f3ef 8311 	mrs	r3, BASEPRI
    ae6a:	f382 8812 	msr	BASEPRI_MAX, r2
    ae6e:	f3bf 8f6f 	isb	sy
	new_thread->next_thread = _kernel.threads;
    ae72:	4e10      	ldr	r6, [pc, #64]	; (aeb4 <z_setup_new_thread+0xc4>)
    ae74:	6a72      	ldr	r2, [r6, #36]	; 0x24
    ae76:	6762      	str	r2, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
    ae78:	6274      	str	r4, [r6, #36]	; 0x24
	__asm__ volatile(
    ae7a:	f383 8811 	msr	BASEPRI, r3
    ae7e:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    ae82:	f1b8 0f00 	cmp.w	r8, #0
    ae86:	d011      	beq.n	aeac <z_setup_new_thread+0xbc>
		strncpy(new_thread->name, name,
    ae88:	221f      	movs	r2, #31
    ae8a:	4641      	mov	r1, r8
    ae8c:	f104 0078 	add.w	r0, r4, #120	; 0x78
    ae90:	f003 fe8c 	bl	ebac <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    ae94:	f884 5097 	strb.w	r5, [r4, #151]	; 0x97
	if (!_current) {
    ae98:	68b3      	ldr	r3, [r6, #8]
    ae9a:	b10b      	cbz	r3, aea0 <z_setup_new_thread+0xb0>
	new_thread->resource_pool = _current->resource_pool;
    ae9c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	return stack_ptr;
    aea0:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
    aea4:	4648      	mov	r0, r9
    aea6:	b005      	add	sp, #20
    aea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    aeac:	f884 8078 	strb.w	r8, [r4, #120]	; 0x78
    aeb0:	e7f2      	b.n	ae98 <z_setup_new_thread+0xa8>
    aeb2:	bf00      	nop
    aeb4:	20003480 	.word	0x20003480

0000aeb8 <z_impl_k_thread_create>:
{
    aeb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    aeba:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    aebc:	2500      	movs	r5, #0
    aebe:	9505      	str	r5, [sp, #20]
    aec0:	9d10      	ldr	r5, [sp, #64]	; 0x40
    aec2:	9504      	str	r5, [sp, #16]
    aec4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    aec6:	9503      	str	r5, [sp, #12]
    aec8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    aeca:	9502      	str	r5, [sp, #8]
{
    aecc:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    aed0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    aed2:	9501      	str	r5, [sp, #4]
    aed4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    aed6:	9500      	str	r5, [sp, #0]
{
    aed8:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    aeda:	f7ff ff89 	bl	adf0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    aede:	f1b6 3fff 	cmp.w	r6, #4294967295
    aee2:	bf08      	it	eq
    aee4:	f1b7 3fff 	cmpeq.w	r7, #4294967295
    aee8:	d005      	beq.n	aef6 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    aeea:	ea56 0307 	orrs.w	r3, r6, r7
    aeee:	d105      	bne.n	aefc <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    aef0:	4620      	mov	r0, r4
    aef2:	f000 fb6b 	bl	b5cc <z_sched_start>
}
    aef6:	4620      	mov	r0, r4
    aef8:	b007      	add	sp, #28
    aefa:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    aefc:	4903      	ldr	r1, [pc, #12]	; (af0c <z_impl_k_thread_create+0x54>)
    aefe:	463a      	mov	r2, r7
    af00:	4633      	mov	r3, r6
    af02:	f104 0018 	add.w	r0, r4, #24
    af06:	f000 fd61 	bl	b9cc <z_add_timeout>
    af0a:	e7f4      	b.n	aef6 <z_impl_k_thread_create+0x3e>
    af0c:	0000f90f 	.word	0x0000f90f

0000af10 <z_init_static_threads>:
{
    af10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    af14:	4c29      	ldr	r4, [pc, #164]	; (afbc <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    af16:	4d2a      	ldr	r5, [pc, #168]	; (afc0 <z_init_static_threads+0xb0>)
{
    af18:	b087      	sub	sp, #28
    af1a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    af1c:	42ae      	cmp	r6, r5
    af1e:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    af22:	d30f      	bcc.n	af44 <z_init_static_threads+0x34>
	k_sched_lock();
    af24:	f000 fba2 	bl	b66c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    af28:	4c24      	ldr	r4, [pc, #144]	; (afbc <z_init_static_threads+0xac>)
    af2a:	f8df 9098 	ldr.w	r9, [pc, #152]	; afc4 <z_init_static_threads+0xb4>
    af2e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    af32:	f240 37e7 	movw	r7, #999	; 0x3e7
    af36:	42ac      	cmp	r4, r5
    af38:	d320      	bcc.n	af7c <z_init_static_threads+0x6c>
}
    af3a:	b007      	add	sp, #28
    af3c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    af40:	f000 bba8 	b.w	b694 <k_sched_unlock>
		z_setup_new_thread(
    af44:	f854 3c04 	ldr.w	r3, [r4, #-4]
    af48:	9305      	str	r3, [sp, #20]
    af4a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    af4e:	9304      	str	r3, [sp, #16]
    af50:	f854 3c10 	ldr.w	r3, [r4, #-16]
    af54:	9303      	str	r3, [sp, #12]
    af56:	f854 3c14 	ldr.w	r3, [r4, #-20]
    af5a:	9302      	str	r3, [sp, #8]
    af5c:	f854 3c18 	ldr.w	r3, [r4, #-24]
    af60:	9301      	str	r3, [sp, #4]
    af62:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    af66:	9300      	str	r3, [sp, #0]
    af68:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    af6c:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    af70:	f7ff ff3e 	bl	adf0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    af74:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    af78:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    af7a:	e7ce      	b.n	af1a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    af7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    af7e:	1c5a      	adds	r2, r3, #1
    af80:	d00d      	beq.n	af9e <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    af82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    af86:	2100      	movs	r1, #0
    af88:	4638      	mov	r0, r7
    af8a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    af8e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    af92:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    af96:	d104      	bne.n	afa2 <z_init_static_threads+0x92>
	z_sched_start(thread);
    af98:	4640      	mov	r0, r8
    af9a:	f000 fb17 	bl	b5cc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    af9e:	342c      	adds	r4, #44	; 0x2c
    afa0:	e7c9      	b.n	af36 <z_init_static_threads+0x26>
    afa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    afa6:	2300      	movs	r3, #0
    afa8:	f7f5 f898 	bl	dc <__aeabi_uldivmod>
    afac:	4602      	mov	r2, r0
    afae:	460b      	mov	r3, r1
    afb0:	f108 0018 	add.w	r0, r8, #24
    afb4:	4649      	mov	r1, r9
    afb6:	f000 fd09 	bl	b9cc <z_add_timeout>
    afba:	e7f0      	b.n	af9e <z_init_static_threads+0x8e>
    afbc:	00010030 	.word	0x00010030
    afc0:	00010030 	.word	0x00010030
    afc4:	0000f90f 	.word	0x0000f90f

0000afc8 <sys_kernel_version_get>:
 * @return kernel version
 */
uint32_t sys_kernel_version_get(void)
{
	return KERNELVERSION;
}
    afc8:	4800      	ldr	r0, [pc, #0]	; (afcc <sys_kernel_version_get+0x4>)
    afca:	4770      	bx	lr
    afcc:	03036300 	.word	0x03036300

0000afd0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    afd0:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    afd2:	4c0b      	ldr	r4, [pc, #44]	; (b000 <idle+0x30>)
	return !z_sys_post_kernel;
    afd4:	4d0b      	ldr	r5, [pc, #44]	; (b004 <idle+0x34>)
	__asm__ volatile(
    afd6:	f04f 0220 	mov.w	r2, #32
    afda:	f3ef 8311 	mrs	r3, BASEPRI
    afde:	f382 8812 	msr	BASEPRI_MAX, r2
    afe2:	f3bf 8f6f 	isb	sy
    afe6:	f004 fd31 	bl	fa4c <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    afea:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    afec:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    afee:	b913      	cbnz	r3, aff6 <idle+0x26>
	arch_cpu_idle();
    aff0:	f7fb fc2e 	bl	6850 <arch_cpu_idle>
}
    aff4:	e7ef      	b.n	afd6 <idle+0x6>
    aff6:	f7f9 f961 	bl	42bc <pm_system_suspend>
    affa:	2800      	cmp	r0, #0
    affc:	d1eb      	bne.n	afd6 <idle+0x6>
    affe:	e7f7      	b.n	aff0 <idle+0x20>
    b000:	20003480 	.word	0x20003480
    b004:	20003c0c 	.word	0x20003c0c

0000b008 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    b008:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b00c:	4604      	mov	r4, r0
    b00e:	4617      	mov	r7, r2
    b010:	461e      	mov	r6, r3
    b012:	f04f 0320 	mov.w	r3, #32
    b016:	f3ef 8811 	mrs	r8, BASEPRI
    b01a:	f383 8812 	msr	BASEPRI_MAX, r3
    b01e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    b022:	68c3      	ldr	r3, [r0, #12]
    b024:	4a33      	ldr	r2, [pc, #204]	; (b0f4 <z_impl_k_mutex_lock+0xec>)
    b026:	b17b      	cbz	r3, b048 <z_impl_k_mutex_lock+0x40>
    b028:	6880      	ldr	r0, [r0, #8]
    b02a:	6891      	ldr	r1, [r2, #8]
    b02c:	4288      	cmp	r0, r1
    b02e:	d019      	beq.n	b064 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    b030:	ea57 0306 	orrs.w	r3, r7, r6
    b034:	d118      	bne.n	b068 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    b036:	f388 8811 	msr	BASEPRI, r8
    b03a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    b03e:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    b042:	b002      	add	sp, #8
    b044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    b048:	6891      	ldr	r1, [r2, #8]
    b04a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    b04e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    b050:	3301      	adds	r3, #1
    b052:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    b054:	6893      	ldr	r3, [r2, #8]
    b056:	60a3      	str	r3, [r4, #8]
    b058:	f388 8811 	msr	BASEPRI, r8
    b05c:	f3bf 8f6f 	isb	sy
		return 0;
    b060:	2000      	movs	r0, #0
    b062:	e7ee      	b.n	b042 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    b064:	6921      	ldr	r1, [r4, #16]
    b066:	e7f2      	b.n	b04e <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    b068:	f991 100e 	ldrsb.w	r1, [r1, #14]
    b06c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    b070:	4299      	cmp	r1, r3
    b072:	bfa8      	it	ge
    b074:	4619      	movge	r1, r3
    b076:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    b07a:	4291      	cmp	r1, r2
    b07c:	bfb8      	it	lt
    b07e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    b080:	428b      	cmp	r3, r1
    b082:	dd2e      	ble.n	b0e2 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    b084:	f004 fb9d 	bl	f7c2 <adjust_owner_prio.isra.0>
    b088:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    b08a:	e9cd 7600 	strd	r7, r6, [sp]
    b08e:	481a      	ldr	r0, [pc, #104]	; (b0f8 <z_impl_k_mutex_lock+0xf0>)
    b090:	4622      	mov	r2, r4
    b092:	4641      	mov	r1, r8
    b094:	f000 fa24 	bl	b4e0 <z_pend_curr>
	if (got_mutex == 0) {
    b098:	2800      	cmp	r0, #0
    b09a:	d0e1      	beq.n	b060 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    b09c:	f04f 0320 	mov.w	r3, #32
    b0a0:	f3ef 8611 	mrs	r6, BASEPRI
    b0a4:	f383 8812 	msr	BASEPRI_MAX, r3
    b0a8:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    b0ac:	68a0      	ldr	r0, [r4, #8]
    b0ae:	b1d0      	cbz	r0, b0e6 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    b0b0:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    b0b2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b0b4:	429c      	cmp	r4, r3
    b0b6:	d00a      	beq.n	b0ce <z_impl_k_mutex_lock+0xc6>
    b0b8:	b14b      	cbz	r3, b0ce <z_impl_k_mutex_lock+0xc6>
    b0ba:	f993 300e 	ldrsb.w	r3, [r3, #14]
    b0be:	4299      	cmp	r1, r3
    b0c0:	bfa8      	it	ge
    b0c2:	4619      	movge	r1, r3
    b0c4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    b0c8:	4299      	cmp	r1, r3
    b0ca:	bfb8      	it	lt
    b0cc:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    b0ce:	f004 fb78 	bl	f7c2 <adjust_owner_prio.isra.0>
    b0d2:	b140      	cbz	r0, b0e6 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    b0d4:	4808      	ldr	r0, [pc, #32]	; (b0f8 <z_impl_k_mutex_lock+0xf0>)
    b0d6:	4631      	mov	r1, r6
    b0d8:	f000 fa66 	bl	b5a8 <z_reschedule>
	return -EAGAIN;
    b0dc:	f06f 000a 	mvn.w	r0, #10
    b0e0:	e7af      	b.n	b042 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    b0e2:	2500      	movs	r5, #0
    b0e4:	e7d1      	b.n	b08a <z_impl_k_mutex_lock+0x82>
	if (resched) {
    b0e6:	2d00      	cmp	r5, #0
    b0e8:	d1f4      	bne.n	b0d4 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    b0ea:	f386 8811 	msr	BASEPRI, r6
    b0ee:	f3bf 8f6f 	isb	sy
    b0f2:	e7f3      	b.n	b0dc <z_impl_k_mutex_lock+0xd4>
    b0f4:	20003480 	.word	0x20003480
    b0f8:	20003c0d 	.word	0x20003c0d

0000b0fc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    b0fc:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    b0fe:	6883      	ldr	r3, [r0, #8]
{
    b100:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    b102:	b373      	cbz	r3, b162 <z_impl_k_mutex_unlock+0x66>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    b104:	4a1a      	ldr	r2, [pc, #104]	; (b170 <z_impl_k_mutex_unlock+0x74>)
    b106:	6892      	ldr	r2, [r2, #8]
    b108:	4293      	cmp	r3, r2
    b10a:	d12d      	bne.n	b168 <z_impl_k_mutex_unlock+0x6c>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    b10c:	68c3      	ldr	r3, [r0, #12]
    b10e:	2b01      	cmp	r3, #1
    b110:	d903      	bls.n	b11a <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    b112:	3b01      	subs	r3, #1
    b114:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    b116:	2000      	movs	r0, #0
}
    b118:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    b11a:	f04f 0320 	mov.w	r3, #32
    b11e:	f3ef 8511 	mrs	r5, BASEPRI
    b122:	f383 8812 	msr	BASEPRI_MAX, r3
    b126:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    b12a:	6901      	ldr	r1, [r0, #16]
    b12c:	6880      	ldr	r0, [r0, #8]
    b12e:	f004 fb48 	bl	f7c2 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    b132:	4620      	mov	r0, r4
    b134:	f004 fc06 	bl	f944 <z_unpend_first_thread>
	mutex->owner = new_owner;
    b138:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    b13a:	b160      	cbz	r0, b156 <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
    b13c:	f990 200e 	ldrsb.w	r2, [r0, #14]
    b140:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    b142:	2200      	movs	r2, #0
    b144:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
    b148:	f004 fb9d 	bl	f886 <z_ready_thread>
		z_reschedule(&lock, key);
    b14c:	4809      	ldr	r0, [pc, #36]	; (b174 <z_impl_k_mutex_unlock+0x78>)
    b14e:	4629      	mov	r1, r5
    b150:	f000 fa2a 	bl	b5a8 <z_reschedule>
    b154:	e7df      	b.n	b116 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    b156:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    b158:	f385 8811 	msr	BASEPRI, r5
    b15c:	f3bf 8f6f 	isb	sy
    b160:	e7d9      	b.n	b116 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    b162:	f06f 0015 	mvn.w	r0, #21
    b166:	e7d7      	b.n	b118 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    b168:	f04f 30ff 	mov.w	r0, #4294967295
    b16c:	e7d4      	b.n	b118 <z_impl_k_mutex_unlock+0x1c>
    b16e:	bf00      	nop
    b170:	20003480 	.word	0x20003480
    b174:	20003c0d 	.word	0x20003c0d

0000b178 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    b178:	b538      	push	{r3, r4, r5, lr}
    b17a:	4604      	mov	r4, r0
	__asm__ volatile(
    b17c:	f04f 0320 	mov.w	r3, #32
    b180:	f3ef 8511 	mrs	r5, BASEPRI
    b184:	f383 8812 	msr	BASEPRI_MAX, r3
    b188:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    b18c:	f004 fbda 	bl	f944 <z_unpend_first_thread>

	if (thread != NULL) {
    b190:	b150      	cbz	r0, b1a8 <z_impl_k_sem_give+0x30>
    b192:	2200      	movs	r2, #0
    b194:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    b198:	f004 fb75 	bl	f886 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    b19c:	4629      	mov	r1, r5
    b19e:	4808      	ldr	r0, [pc, #32]	; (b1c0 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    b1a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    b1a4:	f000 ba00 	b.w	b5a8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    b1a8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    b1ac:	429a      	cmp	r2, r3
    b1ae:	bf18      	it	ne
    b1b0:	3301      	addne	r3, #1
    b1b2:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    b1b4:	2102      	movs	r1, #2
    b1b6:	f104 0010 	add.w	r0, r4, #16
    b1ba:	f004 fdca 	bl	fd52 <z_handle_obj_poll_events>
}
    b1be:	e7ed      	b.n	b19c <z_impl_k_sem_give+0x24>
    b1c0:	20003c0d 	.word	0x20003c0d

0000b1c4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    b1c4:	b513      	push	{r0, r1, r4, lr}
    b1c6:	f04f 0420 	mov.w	r4, #32
    b1ca:	f3ef 8111 	mrs	r1, BASEPRI
    b1ce:	f384 8812 	msr	BASEPRI_MAX, r4
    b1d2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    b1d6:	6884      	ldr	r4, [r0, #8]
    b1d8:	b144      	cbz	r4, b1ec <z_impl_k_sem_take+0x28>
		sem->count--;
    b1da:	3c01      	subs	r4, #1
    b1dc:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    b1de:	f381 8811 	msr	BASEPRI, r1
    b1e2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    b1e6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    b1e8:	b002      	add	sp, #8
    b1ea:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    b1ec:	ea52 0403 	orrs.w	r4, r2, r3
    b1f0:	d106      	bne.n	b200 <z_impl_k_sem_take+0x3c>
    b1f2:	f381 8811 	msr	BASEPRI, r1
    b1f6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    b1fa:	f06f 000f 	mvn.w	r0, #15
    b1fe:	e7f3      	b.n	b1e8 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    b200:	e9cd 2300 	strd	r2, r3, [sp]
    b204:	4602      	mov	r2, r0
    b206:	4802      	ldr	r0, [pc, #8]	; (b210 <z_impl_k_sem_take+0x4c>)
    b208:	f000 f96a 	bl	b4e0 <z_pend_curr>
	return ret;
    b20c:	e7ec      	b.n	b1e8 <z_impl_k_sem_take+0x24>
    b20e:	bf00      	nop
    b210:	20003c0d 	.word	0x20003c0d

0000b214 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
    b214:	b570      	push	{r4, r5, r6, lr}
    b216:	4604      	mov	r4, r0
	__asm__ volatile(
    b218:	f04f 0320 	mov.w	r3, #32
    b21c:	f3ef 8511 	mrs	r5, BASEPRI
    b220:	f383 8812 	msr	BASEPRI_MAX, r3
    b224:	f3bf 8f6f 	isb	sy
    b228:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
    b22c:	4620      	mov	r0, r4
    b22e:	f004 fb89 	bl	f944 <z_unpend_first_thread>
		if (thread == NULL) {
    b232:	b120      	cbz	r0, b23e <z_impl_k_sem_reset+0x2a>
    b234:	f8c0 60b0 	str.w	r6, [r0, #176]	; 0xb0
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
    b238:	f004 fb25 	bl	f886 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
    b23c:	e7f6      	b.n	b22c <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
    b23e:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    b240:	2102      	movs	r1, #2
    b242:	f104 0010 	add.w	r0, r4, #16
    b246:	f004 fd84 	bl	fd52 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
    b24a:	4629      	mov	r1, r5
    b24c:	4802      	ldr	r0, [pc, #8]	; (b258 <z_impl_k_sem_reset+0x44>)
}
    b24e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
    b252:	f000 b9a9 	b.w	b5a8 <z_reschedule>
    b256:	bf00      	nop
    b258:	20003c0d 	.word	0x20003c0d

0000b25c <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    b25c:	89c3      	ldrh	r3, [r0, #14]
    b25e:	2b7f      	cmp	r3, #127	; 0x7f
    b260:	d812      	bhi.n	b288 <sliceable+0x2c>
	int ret = slice_ticks;
    b262:	4b0a      	ldr	r3, [pc, #40]	; (b28c <sliceable+0x30>)
    b264:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    b266:	b163      	cbz	r3, b282 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    b268:	4b09      	ldr	r3, [pc, #36]	; (b290 <sliceable+0x34>)
    b26a:	f990 200e 	ldrsb.w	r2, [r0, #14]
    b26e:	681b      	ldr	r3, [r3, #0]
    b270:	429a      	cmp	r2, r3
    b272:	db09      	blt.n	b288 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    b274:	7b43      	ldrb	r3, [r0, #13]
    b276:	06db      	lsls	r3, r3, #27
    b278:	d106      	bne.n	b288 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    b27a:	4b06      	ldr	r3, [pc, #24]	; (b294 <sliceable+0x38>)
    b27c:	1ac3      	subs	r3, r0, r3
    b27e:	bf18      	it	ne
    b280:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    b282:	f003 0001 	and.w	r0, r3, #1
    b286:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    b288:	2300      	movs	r3, #0
    b28a:	e7fa      	b.n	b282 <sliceable+0x26>
    b28c:	200034b0 	.word	0x200034b0
    b290:	200034ac 	.word	0x200034ac
    b294:	20000b78 	.word	0x20000b78

0000b298 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    b298:	4b04      	ldr	r3, [pc, #16]	; (b2ac <slice_timeout+0x14>)
    b29a:	1ac0      	subs	r0, r0, r3
    b29c:	4b04      	ldr	r3, [pc, #16]	; (b2b0 <slice_timeout+0x18>)
    b29e:	10c0      	asrs	r0, r0, #3
    b2a0:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
    b2a2:	4b04      	ldr	r3, [pc, #16]	; (b2b4 <slice_timeout+0x1c>)
    b2a4:	2201      	movs	r2, #1
    b2a6:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    b2a8:	4770      	bx	lr
    b2aa:	bf00      	nop
    b2ac:	20000ce8 	.word	0x20000ce8
    b2b0:	aaaaaaab 	.word	0xaaaaaaab
    b2b4:	20003c0d 	.word	0x20003c0d

0000b2b8 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    b2b8:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    b2ba:	4b0e      	ldr	r3, [pc, #56]	; (b2f4 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    b2bc:	4c0e      	ldr	r4, [pc, #56]	; (b2f8 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    b2be:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
    b2c0:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    b2c4:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
    b2c8:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    b2ca:	4620      	mov	r0, r4
    b2cc:	f004 fba8 	bl	fa20 <z_abort_timeout>
	slice_expired[cpu] = false;
    b2d0:	4b0a      	ldr	r3, [pc, #40]	; (b2fc <z_reset_time_slice+0x44>)
    b2d2:	2200      	movs	r2, #0
	if (sliceable(curr)) {
    b2d4:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    b2d6:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    b2d8:	f7ff ffc0 	bl	b25c <sliceable>
    b2dc:	b148      	cbz	r0, b2f2 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    b2de:	4b08      	ldr	r3, [pc, #32]	; (b300 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    b2e0:	4908      	ldr	r1, [pc, #32]	; (b304 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    b2e2:	681a      	ldr	r2, [r3, #0]
    b2e4:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    b2e6:	4620      	mov	r0, r4
    b2e8:	17d3      	asrs	r3, r2, #31
	}
}
    b2ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    b2ee:	f000 bb6d 	b.w	b9cc <z_add_timeout>
}
    b2f2:	bd70      	pop	{r4, r5, r6, pc}
    b2f4:	20003480 	.word	0x20003480
    b2f8:	20000ce8 	.word	0x20000ce8
    b2fc:	20003c0d 	.word	0x20003c0d
    b300:	200034b0 	.word	0x200034b0
    b304:	0000b299 	.word	0x0000b299

0000b308 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    b308:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    b30a:	4d0d      	ldr	r5, [pc, #52]	; (b340 <update_cache+0x38>)
    b30c:	462b      	mov	r3, r5
    b30e:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b312:	429c      	cmp	r4, r3
    b314:	d000      	beq.n	b318 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    b316:	b904      	cbnz	r4, b31a <update_cache+0x12>
    b318:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    b31a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    b31c:	b938      	cbnz	r0, b32e <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    b31e:	7b5a      	ldrb	r2, [r3, #13]
    b320:	06d2      	lsls	r2, r2, #27
    b322:	d104      	bne.n	b32e <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    b324:	69a2      	ldr	r2, [r4, #24]
    b326:	b912      	cbnz	r2, b32e <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    b328:	89da      	ldrh	r2, [r3, #14]
    b32a:	2a7f      	cmp	r2, #127	; 0x7f
    b32c:	d805      	bhi.n	b33a <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    b32e:	429c      	cmp	r4, r3
    b330:	d002      	beq.n	b338 <update_cache+0x30>
			z_reset_time_slice(thread);
    b332:	4620      	mov	r0, r4
    b334:	f7ff ffc0 	bl	b2b8 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    b338:	4623      	mov	r3, r4
    b33a:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    b33c:	bd38      	pop	{r3, r4, r5, pc}
    b33e:	bf00      	nop
    b340:	20003480 	.word	0x20003480

0000b344 <move_thread_to_end_of_prio_q>:
{
    b344:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    b346:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    b34a:	7b43      	ldrb	r3, [r0, #13]
    b34c:	2a00      	cmp	r2, #0
{
    b34e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    b350:	da04      	bge.n	b35c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b356:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    b358:	f004 fa52 	bl	f800 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    b35c:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    b35e:	4a15      	ldr	r2, [pc, #84]	; (b3b4 <move_thread_to_end_of_prio_q+0x70>)
    b360:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b364:	4610      	mov	r0, r2
    b366:	734b      	strb	r3, [r1, #13]
    b368:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    b36c:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b36e:	4283      	cmp	r3, r0
    b370:	bf08      	it	eq
    b372:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b374:	b923      	cbnz	r3, b380 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    b376:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    b37a:	6021      	str	r1, [r4, #0]
	list->tail = node;
    b37c:	6211      	str	r1, [r2, #32]
}
    b37e:	e00c      	b.n	b39a <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    b380:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    b384:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    b388:	42b5      	cmp	r5, r6
    b38a:	d00e      	beq.n	b3aa <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b38c:	42ae      	cmp	r6, r5
    b38e:	dd0c      	ble.n	b3aa <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    b390:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    b392:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    b396:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    b398:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    b39a:	6890      	ldr	r0, [r2, #8]
    b39c:	1a43      	subs	r3, r0, r1
    b39e:	4258      	negs	r0, r3
}
    b3a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    b3a4:	4158      	adcs	r0, r3
    b3a6:	f7ff bfaf 	b.w	b308 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    b3aa:	429c      	cmp	r4, r3
    b3ac:	d0e3      	beq.n	b376 <move_thread_to_end_of_prio_q+0x32>
    b3ae:	681b      	ldr	r3, [r3, #0]
    b3b0:	e7e0      	b.n	b374 <move_thread_to_end_of_prio_q+0x30>
    b3b2:	bf00      	nop
    b3b4:	20003480 	.word	0x20003480

0000b3b8 <ready_thread>:
{
    b3b8:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    b3ba:	f990 300d 	ldrsb.w	r3, [r0, #13]
    b3be:	7b42      	ldrb	r2, [r0, #13]
    b3c0:	2b00      	cmp	r3, #0
    b3c2:	db29      	blt.n	b418 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    b3c4:	06d3      	lsls	r3, r2, #27
    b3c6:	d127      	bne.n	b418 <ready_thread+0x60>
	return node->next != NULL;
    b3c8:	6983      	ldr	r3, [r0, #24]
    b3ca:	bb2b      	cbnz	r3, b418 <ready_thread+0x60>
	return list->head == list;
    b3cc:	4913      	ldr	r1, [pc, #76]	; (b41c <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    b3ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
    b3d2:	7342      	strb	r2, [r0, #13]
    b3d4:	460a      	mov	r2, r1
    b3d6:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b3da:	4294      	cmp	r4, r2
    b3dc:	bf18      	it	ne
    b3de:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    b3e0:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b3e2:	b923      	cbnz	r3, b3ee <ready_thread+0x36>
	node->prev = tail;
    b3e4:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    b3e8:	6020      	str	r0, [r4, #0]
	list->tail = node;
    b3ea:	6208      	str	r0, [r1, #32]
}
    b3ec:	e00c      	b.n	b408 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    b3ee:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    b3f2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    b3f6:	42b5      	cmp	r5, r6
    b3f8:	d00a      	beq.n	b410 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b3fa:	42ae      	cmp	r6, r5
    b3fc:	dd08      	ble.n	b410 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    b3fe:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    b400:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    b404:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    b406:	6058      	str	r0, [r3, #4]
}
    b408:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    b40a:	2000      	movs	r0, #0
    b40c:	f7ff bf7c 	b.w	b308 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    b410:	42a3      	cmp	r3, r4
    b412:	d0e7      	beq.n	b3e4 <ready_thread+0x2c>
    b414:	681b      	ldr	r3, [r3, #0]
    b416:	e7e4      	b.n	b3e2 <ready_thread+0x2a>
}
    b418:	bc70      	pop	{r4, r5, r6}
    b41a:	4770      	bx	lr
    b41c:	20003480 	.word	0x20003480

0000b420 <unready_thread>:
{
    b420:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    b422:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    b426:	7b43      	ldrb	r3, [r0, #13]
    b428:	2a00      	cmp	r2, #0
{
    b42a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    b42c:	da04      	bge.n	b438 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b42e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b432:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b434:	f004 f9e4 	bl	f800 <sys_dlist_remove>
	update_cache(thread == _current);
    b438:	4b04      	ldr	r3, [pc, #16]	; (b44c <unready_thread+0x2c>)
    b43a:	6898      	ldr	r0, [r3, #8]
    b43c:	1a43      	subs	r3, r0, r1
    b43e:	4258      	negs	r0, r3
    b440:	4158      	adcs	r0, r3
}
    b442:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    b446:	f7ff bf5f 	b.w	b308 <update_cache>
    b44a:	bf00      	nop
    b44c:	20003480 	.word	0x20003480

0000b450 <pend_locked>:
{
    b450:	b570      	push	{r4, r5, r6, lr}
    b452:	4615      	mov	r5, r2
    b454:	461c      	mov	r4, r3
    b456:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    b458:	f004 f9ed 	bl	f836 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b45c:	f1b4 3fff 	cmp.w	r4, #4294967295
    b460:	bf08      	it	eq
    b462:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    b466:	d008      	beq.n	b47a <pend_locked+0x2a>
    b468:	462a      	mov	r2, r5
    b46a:	4623      	mov	r3, r4
    b46c:	f106 0018 	add.w	r0, r6, #24
    b470:	4902      	ldr	r1, [pc, #8]	; (b47c <pend_locked+0x2c>)
}
    b472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b476:	f000 baa9 	b.w	b9cc <z_add_timeout>
    b47a:	bd70      	pop	{r4, r5, r6, pc}
    b47c:	0000f90f 	.word	0x0000f90f

0000b480 <z_time_slice>:
{
    b480:	b538      	push	{r3, r4, r5, lr}
    b482:	f04f 0320 	mov.w	r3, #32
    b486:	f3ef 8511 	mrs	r5, BASEPRI
    b48a:	f383 8812 	msr	BASEPRI_MAX, r3
    b48e:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    b492:	4b10      	ldr	r3, [pc, #64]	; (b4d4 <z_time_slice+0x54>)
	if (pending_current == curr) {
    b494:	4a10      	ldr	r2, [pc, #64]	; (b4d8 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    b496:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    b498:	6810      	ldr	r0, [r2, #0]
    b49a:	42a0      	cmp	r0, r4
    b49c:	d106      	bne.n	b4ac <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    b49e:	f7ff ff0b 	bl	b2b8 <z_reset_time_slice>
	__asm__ volatile(
    b4a2:	f385 8811 	msr	BASEPRI, r5
    b4a6:	f3bf 8f6f 	isb	sy
}
    b4aa:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    b4ac:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    b4ae:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    b4b0:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    b4b2:	4a0a      	ldr	r2, [pc, #40]	; (b4dc <z_time_slice+0x5c>)
    b4b4:	5cd3      	ldrb	r3, [r2, r3]
    b4b6:	2b00      	cmp	r3, #0
    b4b8:	d0f3      	beq.n	b4a2 <z_time_slice+0x22>
    b4ba:	4620      	mov	r0, r4
    b4bc:	f7ff fece 	bl	b25c <sliceable>
    b4c0:	2800      	cmp	r0, #0
    b4c2:	d0ee      	beq.n	b4a2 <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    b4c4:	7b63      	ldrb	r3, [r4, #13]
    b4c6:	06db      	lsls	r3, r3, #27
    b4c8:	d102      	bne.n	b4d0 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    b4ca:	4620      	mov	r0, r4
    b4cc:	f7ff ff3a 	bl	b344 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    b4d0:	4620      	mov	r0, r4
    b4d2:	e7e4      	b.n	b49e <z_time_slice+0x1e>
    b4d4:	20003480 	.word	0x20003480
    b4d8:	200034a8 	.word	0x200034a8
    b4dc:	20003c0d 	.word	0x20003c0d

0000b4e0 <z_pend_curr>:
{
    b4e0:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    b4e2:	480c      	ldr	r0, [pc, #48]	; (b514 <z_pend_curr+0x34>)
    b4e4:	4d0c      	ldr	r5, [pc, #48]	; (b518 <z_pend_curr+0x38>)
    b4e6:	6886      	ldr	r6, [r0, #8]
    b4e8:	602e      	str	r6, [r5, #0]
{
    b4ea:	460c      	mov	r4, r1
    b4ec:	4611      	mov	r1, r2
    b4ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    b4f2:	f04f 0620 	mov.w	r6, #32
    b4f6:	f3ef 8511 	mrs	r5, BASEPRI
    b4fa:	f386 8812 	msr	BASEPRI_MAX, r6
    b4fe:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    b502:	6880      	ldr	r0, [r0, #8]
    b504:	f7ff ffa4 	bl	b450 <pend_locked>
	ret = arch_swap(key);
    b508:	4620      	mov	r0, r4
}
    b50a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b50e:	f7fb ba97 	b.w	6a40 <arch_swap>
    b512:	bf00      	nop
    b514:	20003480 	.word	0x20003480
    b518:	200034a8 	.word	0x200034a8

0000b51c <z_set_prio>:
{
    b51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b51e:	4604      	mov	r4, r0
    b520:	f04f 0320 	mov.w	r3, #32
    b524:	f3ef 8611 	mrs	r6, BASEPRI
    b528:	f383 8812 	msr	BASEPRI_MAX, r3
    b52c:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    b530:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    b532:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    b534:	b249      	sxtb	r1, r1
    b536:	d119      	bne.n	b56c <z_set_prio+0x50>
	return node->next != NULL;
    b538:	6985      	ldr	r5, [r0, #24]
    b53a:	b9bd      	cbnz	r5, b56c <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b53c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b540:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b542:	f004 f95d 	bl	f800 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    b546:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    b548:	4a16      	ldr	r2, [pc, #88]	; (b5a4 <z_set_prio+0x88>)
				thread->base.prio = prio;
    b54a:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    b54c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b550:	7343      	strb	r3, [r0, #13]
    b552:	4613      	mov	r3, r2
    b554:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b558:	4298      	cmp	r0, r3
    b55a:	bf18      	it	ne
    b55c:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    b55e:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b560:	b95d      	cbnz	r5, b57a <z_set_prio+0x5e>
	node->prev = tail;
    b562:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    b566:	6004      	str	r4, [r0, #0]
	list->tail = node;
    b568:	6214      	str	r4, [r2, #32]
}
    b56a:	e011      	b.n	b590 <z_set_prio+0x74>
			thread->base.prio = prio;
    b56c:	73a1      	strb	r1, [r4, #14]
    b56e:	2000      	movs	r0, #0
	__asm__ volatile(
    b570:	f386 8811 	msr	BASEPRI, r6
    b574:	f3bf 8f6f 	isb	sy
}
    b578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    b57a:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    b57e:	42b9      	cmp	r1, r7
    b580:	d00b      	beq.n	b59a <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b582:	428f      	cmp	r7, r1
    b584:	dd09      	ble.n	b59a <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    b586:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    b588:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    b58c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    b58e:	606c      	str	r4, [r5, #4]
			update_cache(1);
    b590:	2001      	movs	r0, #1
    b592:	f7ff feb9 	bl	b308 <update_cache>
    b596:	2001      	movs	r0, #1
    b598:	e7ea      	b.n	b570 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    b59a:	42a8      	cmp	r0, r5
    b59c:	d0e1      	beq.n	b562 <z_set_prio+0x46>
    b59e:	682d      	ldr	r5, [r5, #0]
    b5a0:	e7de      	b.n	b560 <z_set_prio+0x44>
    b5a2:	bf00      	nop
    b5a4:	20003480 	.word	0x20003480

0000b5a8 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    b5a8:	b949      	cbnz	r1, b5be <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    b5aa:	f3ef 8005 	mrs	r0, IPSR
    b5ae:	b930      	cbnz	r0, b5be <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    b5b0:	4b05      	ldr	r3, [pc, #20]	; (b5c8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    b5b2:	699a      	ldr	r2, [r3, #24]
    b5b4:	689b      	ldr	r3, [r3, #8]
    b5b6:	429a      	cmp	r2, r3
    b5b8:	d001      	beq.n	b5be <z_reschedule+0x16>
    b5ba:	f7fb ba41 	b.w	6a40 <arch_swap>
    b5be:	f381 8811 	msr	BASEPRI, r1
    b5c2:	f3bf 8f6f 	isb	sy
}
    b5c6:	4770      	bx	lr
    b5c8:	20003480 	.word	0x20003480

0000b5cc <z_sched_start>:
{
    b5cc:	b510      	push	{r4, lr}
	__asm__ volatile(
    b5ce:	f04f 0220 	mov.w	r2, #32
    b5d2:	f3ef 8411 	mrs	r4, BASEPRI
    b5d6:	f382 8812 	msr	BASEPRI_MAX, r2
    b5da:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    b5de:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    b5e0:	0751      	lsls	r1, r2, #29
    b5e2:	d404      	bmi.n	b5ee <z_sched_start+0x22>
	__asm__ volatile(
    b5e4:	f384 8811 	msr	BASEPRI, r4
    b5e8:	f3bf 8f6f 	isb	sy
}
    b5ec:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b5ee:	f022 0204 	bic.w	r2, r2, #4
    b5f2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    b5f4:	f7ff fee0 	bl	b3b8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    b5f8:	4621      	mov	r1, r4
    b5fa:	4802      	ldr	r0, [pc, #8]	; (b604 <z_sched_start+0x38>)
}
    b5fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    b600:	f7ff bfd2 	b.w	b5a8 <z_reschedule>
    b604:	20003c0e 	.word	0x20003c0e

0000b608 <z_impl_k_thread_suspend>:
{
    b608:	b570      	push	{r4, r5, r6, lr}
    b60a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    b60c:	3018      	adds	r0, #24
    b60e:	f004 fa07 	bl	fa20 <z_abort_timeout>
	__asm__ volatile(
    b612:	f04f 0320 	mov.w	r3, #32
    b616:	f3ef 8611 	mrs	r6, BASEPRI
    b61a:	f383 8812 	msr	BASEPRI_MAX, r3
    b61e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    b622:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    b626:	7b63      	ldrb	r3, [r4, #13]
    b628:	2a00      	cmp	r2, #0
    b62a:	da05      	bge.n	b638 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b62c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b630:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b632:	4620      	mov	r0, r4
    b634:	f004 f8e4 	bl	f800 <sys_dlist_remove>
		update_cache(thread == _current);
    b638:	4d0b      	ldr	r5, [pc, #44]	; (b668 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    b63a:	7b63      	ldrb	r3, [r4, #13]
    b63c:	68a8      	ldr	r0, [r5, #8]
    b63e:	f043 0310 	orr.w	r3, r3, #16
    b642:	7363      	strb	r3, [r4, #13]
    b644:	1b03      	subs	r3, r0, r4
    b646:	4258      	negs	r0, r3
    b648:	4158      	adcs	r0, r3
    b64a:	f7ff fe5d 	bl	b308 <update_cache>
	__asm__ volatile(
    b64e:	f386 8811 	msr	BASEPRI, r6
    b652:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    b656:	68ab      	ldr	r3, [r5, #8]
    b658:	42a3      	cmp	r3, r4
    b65a:	d103      	bne.n	b664 <z_impl_k_thread_suspend+0x5c>
}
    b65c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    b660:	f004 b9b0 	b.w	f9c4 <z_reschedule_unlocked>
}
    b664:	bd70      	pop	{r4, r5, r6, pc}
    b666:	bf00      	nop
    b668:	20003480 	.word	0x20003480

0000b66c <k_sched_lock>:
	__asm__ volatile(
    b66c:	f04f 0320 	mov.w	r3, #32
    b670:	f3ef 8111 	mrs	r1, BASEPRI
    b674:	f383 8812 	msr	BASEPRI_MAX, r3
    b678:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    b67c:	4b04      	ldr	r3, [pc, #16]	; (b690 <k_sched_lock+0x24>)
    b67e:	689a      	ldr	r2, [r3, #8]
    b680:	7bd3      	ldrb	r3, [r2, #15]
    b682:	3b01      	subs	r3, #1
    b684:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    b686:	f381 8811 	msr	BASEPRI, r1
    b68a:	f3bf 8f6f 	isb	sy
}
    b68e:	4770      	bx	lr
    b690:	20003480 	.word	0x20003480

0000b694 <k_sched_unlock>:
{
    b694:	b510      	push	{r4, lr}
	__asm__ volatile(
    b696:	f04f 0320 	mov.w	r3, #32
    b69a:	f3ef 8411 	mrs	r4, BASEPRI
    b69e:	f383 8812 	msr	BASEPRI_MAX, r3
    b6a2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    b6a6:	4b08      	ldr	r3, [pc, #32]	; (b6c8 <k_sched_unlock+0x34>)
    b6a8:	689a      	ldr	r2, [r3, #8]
    b6aa:	7bd3      	ldrb	r3, [r2, #15]
    b6ac:	3301      	adds	r3, #1
    b6ae:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    b6b0:	2000      	movs	r0, #0
    b6b2:	f7ff fe29 	bl	b308 <update_cache>
	__asm__ volatile(
    b6b6:	f384 8811 	msr	BASEPRI, r4
    b6ba:	f3bf 8f6f 	isb	sy
}
    b6be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    b6c2:	f004 b97f 	b.w	f9c4 <z_reschedule_unlocked>
    b6c6:	bf00      	nop
    b6c8:	20003480 	.word	0x20003480

0000b6cc <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    b6cc:	4b02      	ldr	r3, [pc, #8]	; (b6d8 <z_sched_init+0xc>)
    b6ce:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    b6d2:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    b6d6:	4770      	bx	lr
    b6d8:	20003480 	.word	0x20003480

0000b6dc <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    b6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    b6de:	f04f 0320 	mov.w	r3, #32
    b6e2:	f3ef 8511 	mrs	r5, BASEPRI
    b6e6:	f383 8812 	msr	BASEPRI_MAX, r3
    b6ea:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    b6ee:	4919      	ldr	r1, [pc, #100]	; (b754 <z_impl_k_yield+0x78>)
    b6f0:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b6f2:	7b43      	ldrb	r3, [r0, #13]
    b6f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b6f8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b6fa:	f004 f881 	bl	f800 <sys_dlist_remove>
	}
	queue_thread(_current);
    b6fe:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    b700:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    b702:	4608      	mov	r0, r1
    b704:	f062 027f 	orn	r2, r2, #127	; 0x7f
    b708:	735a      	strb	r2, [r3, #13]
    b70a:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    b70e:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b710:	4282      	cmp	r2, r0
    b712:	bf08      	it	eq
    b714:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b716:	b922      	cbnz	r2, b722 <z_impl_k_yield+0x46>
	node->prev = tail;
    b718:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    b71c:	6023      	str	r3, [r4, #0]
	list->tail = node;
    b71e:	620b      	str	r3, [r1, #32]
}
    b720:	e00c      	b.n	b73c <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    b722:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    b726:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    b72a:	42be      	cmp	r6, r7
    b72c:	d00e      	beq.n	b74c <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b72e:	42b7      	cmp	r7, r6
    b730:	dd0c      	ble.n	b74c <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    b732:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    b734:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    b738:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    b73a:	6053      	str	r3, [r2, #4]
	update_cache(1);
    b73c:	2001      	movs	r0, #1
    b73e:	f7ff fde3 	bl	b308 <update_cache>
    b742:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    b744:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b748:	f7fb b97a 	b.w	6a40 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    b74c:	42a2      	cmp	r2, r4
    b74e:	d0e3      	beq.n	b718 <z_impl_k_yield+0x3c>
    b750:	6812      	ldr	r2, [r2, #0]
    b752:	e7e0      	b.n	b716 <z_impl_k_yield+0x3a>
    b754:	20003480 	.word	0x20003480

0000b758 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    b758:	ea50 0301 	orrs.w	r3, r0, r1
{
    b75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b760:	4605      	mov	r5, r0
    b762:	460e      	mov	r6, r1
	if (ticks == 0) {
    b764:	d103      	bne.n	b76e <z_tick_sleep+0x16>
	z_impl_k_yield();
    b766:	f7ff ffb9 	bl	b6dc <z_impl_k_yield>
		k_yield();
		return 0;
    b76a:	2000      	movs	r0, #0
    b76c:	e02c      	b.n	b7c8 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    b76e:	1c83      	adds	r3, r0, #2
    b770:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    b774:	db2a      	blt.n	b7cc <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    b776:	f004 f979 	bl	fa6c <sys_clock_tick_get_32>
    b77a:	182c      	adds	r4, r5, r0
    b77c:	f04f 0320 	mov.w	r3, #32
    b780:	f3ef 8811 	mrs	r8, BASEPRI
    b784:	f383 8812 	msr	BASEPRI_MAX, r3
    b788:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    b78c:	4f11      	ldr	r7, [pc, #68]	; (b7d4 <z_tick_sleep+0x7c>)
    b78e:	4b12      	ldr	r3, [pc, #72]	; (b7d8 <z_tick_sleep+0x80>)
    b790:	68b8      	ldr	r0, [r7, #8]
    b792:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    b794:	f7ff fe44 	bl	b420 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    b798:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    b79a:	4910      	ldr	r1, [pc, #64]	; (b7dc <z_tick_sleep+0x84>)
    b79c:	462a      	mov	r2, r5
    b79e:	4633      	mov	r3, r6
    b7a0:	3018      	adds	r0, #24
    b7a2:	f000 f913 	bl	b9cc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    b7a6:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    b7a8:	7b53      	ldrb	r3, [r2, #13]
    b7aa:	f043 0310 	orr.w	r3, r3, #16
    b7ae:	7353      	strb	r3, [r2, #13]
    b7b0:	4640      	mov	r0, r8
    b7b2:	f7fb f945 	bl	6a40 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    b7b6:	f004 f959 	bl	fa6c <sys_clock_tick_get_32>
    b7ba:	1a20      	subs	r0, r4, r0
    b7bc:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    b7c0:	2801      	cmp	r0, #1
    b7c2:	f173 0300 	sbcs.w	r3, r3, #0
    b7c6:	dbd0      	blt.n	b76a <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    b7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    b7cc:	f06f 0401 	mvn.w	r4, #1
    b7d0:	1a24      	subs	r4, r4, r0
    b7d2:	e7d3      	b.n	b77c <z_tick_sleep+0x24>
    b7d4:	20003480 	.word	0x20003480
    b7d8:	200034a8 	.word	0x200034a8
    b7dc:	0000f90f 	.word	0x0000f90f

0000b7e0 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b7e0:	f1b1 3fff 	cmp.w	r1, #4294967295
    b7e4:	bf08      	it	eq
    b7e6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    b7ea:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b7ec:	d106      	bne.n	b7fc <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    b7ee:	4b08      	ldr	r3, [pc, #32]	; (b810 <z_impl_k_sleep+0x30>)
    b7f0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    b7f2:	f7ff ff09 	bl	b608 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    b7f6:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    b7fa:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    b7fc:	f7ff ffac 	bl	b758 <z_tick_sleep>
    b800:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    b804:	fb80 0303 	smull	r0, r3, r0, r3
    b808:	0bc0      	lsrs	r0, r0, #15
    b80a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    b80e:	e7f4      	b.n	b7fa <z_impl_k_sleep+0x1a>
    b810:	20003480 	.word	0x20003480

0000b814 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    b814:	4b01      	ldr	r3, [pc, #4]	; (b81c <z_impl_z_current_get+0x8>)
    b816:	6898      	ldr	r0, [r3, #8]
    b818:	4770      	bx	lr
    b81a:	bf00      	nop
    b81c:	20003480 	.word	0x20003480

0000b820 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    b820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b824:	4604      	mov	r4, r0
    b826:	f04f 0320 	mov.w	r3, #32
    b82a:	f3ef 8611 	mrs	r6, BASEPRI
    b82e:	f383 8812 	msr	BASEPRI_MAX, r3
    b832:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    b836:	7b03      	ldrb	r3, [r0, #12]
    b838:	07d9      	lsls	r1, r3, #31
    b83a:	d50b      	bpl.n	b854 <z_thread_abort+0x34>
	__asm__ volatile(
    b83c:	f386 8811 	msr	BASEPRI, r6
    b840:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    b844:	4040      	eors	r0, r0
    b846:	f380 8811 	msr	BASEPRI, r0
    b84a:	f04f 0004 	mov.w	r0, #4
    b84e:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    b850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    b854:	7b43      	ldrb	r3, [r0, #13]
    b856:	071a      	lsls	r2, r3, #28
    b858:	d504      	bpl.n	b864 <z_thread_abort+0x44>
    b85a:	f386 8811 	msr	BASEPRI, r6
    b85e:	f3bf 8f6f 	isb	sy
    b862:	e7f5      	b.n	b850 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    b864:	f023 0220 	bic.w	r2, r3, #32
    b868:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    b86c:	09d2      	lsrs	r2, r2, #7
    b86e:	d123      	bne.n	b8b8 <z_thread_abort+0x98>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    b870:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    b872:	68a3      	ldr	r3, [r4, #8]
    b874:	b113      	cbz	r3, b87c <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    b876:	4620      	mov	r0, r4
    b878:	f003 ffca 	bl	f810 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    b87c:	f104 0018 	add.w	r0, r4, #24
    b880:	f004 f8ce 	bl	fa20 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    b884:	f104 0758 	add.w	r7, r4, #88	; 0x58
    b888:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    b88c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b88e:	42bd      	cmp	r5, r7
    b890:	d000      	beq.n	b894 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    b892:	b9cd      	cbnz	r5, b8c8 <z_thread_abort+0xa8>
		update_cache(1);
    b894:	2001      	movs	r0, #1
    b896:	f7ff fd37 	bl	b308 <update_cache>
		z_thread_monitor_exit(thread);
    b89a:	4620      	mov	r0, r4
    b89c:	f7ff fa2c 	bl	acf8 <z_thread_monitor_exit>
	if (thread == _current && !arch_is_in_isr()) {
    b8a0:	4b10      	ldr	r3, [pc, #64]	; (b8e4 <z_thread_abort+0xc4>)
    b8a2:	689b      	ldr	r3, [r3, #8]
    b8a4:	42a3      	cmp	r3, r4
    b8a6:	d1d8      	bne.n	b85a <z_thread_abort+0x3a>
    b8a8:	f3ef 8305 	mrs	r3, IPSR
    b8ac:	2b00      	cmp	r3, #0
    b8ae:	d1d4      	bne.n	b85a <z_thread_abort+0x3a>
    b8b0:	4630      	mov	r0, r6
    b8b2:	f7fb f8c5 	bl	6a40 <arch_swap>
	return ret;
    b8b6:	e7d0      	b.n	b85a <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b8b8:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    b8bc:	f043 0308 	orr.w	r3, r3, #8
    b8c0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b8c2:	f003 ff9d 	bl	f800 <sys_dlist_remove>
}
    b8c6:	e7d4      	b.n	b872 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    b8c8:	4628      	mov	r0, r5
    b8ca:	f003 ffa1 	bl	f810 <unpend_thread_no_timeout>
    b8ce:	f105 0018 	add.w	r0, r5, #24
    b8d2:	f004 f8a5 	bl	fa20 <z_abort_timeout>
    b8d6:	f8c5 80b0 	str.w	r8, [r5, #176]	; 0xb0
		ready_thread(thread);
    b8da:	4628      	mov	r0, r5
    b8dc:	f7ff fd6c 	bl	b3b8 <ready_thread>
    b8e0:	e7d4      	b.n	b88c <z_thread_abort+0x6c>
    b8e2:	bf00      	nop
    b8e4:	20003480 	.word	0x20003480

0000b8e8 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    b8e8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    b8ea:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    b8ee:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    b8f0:	e9cd 6700 	strd	r6, r7, [sp]
    b8f4:	f7ff fdf4 	bl	b4e0 <z_pend_curr>

	if (data != NULL) {
    b8f8:	b11c      	cbz	r4, b902 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    b8fa:	4b03      	ldr	r3, [pc, #12]	; (b908 <z_sched_wait+0x20>)
    b8fc:	689b      	ldr	r3, [r3, #8]
    b8fe:	695b      	ldr	r3, [r3, #20]
    b900:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    b902:	b002      	add	sp, #8
    b904:	bdd0      	pop	{r4, r6, r7, pc}
    b906:	bf00      	nop
    b908:	20003480 	.word	0x20003480

0000b90c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    b90c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    b90e:	4806      	ldr	r0, [pc, #24]	; (b928 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    b910:	4a06      	ldr	r2, [pc, #24]	; (b92c <z_data_copy+0x20>)
    b912:	4907      	ldr	r1, [pc, #28]	; (b930 <z_data_copy+0x24>)
    b914:	1a12      	subs	r2, r2, r0
    b916:	f003 ff30 	bl	f77a <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    b91a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    b91e:	4a05      	ldr	r2, [pc, #20]	; (b934 <z_data_copy+0x28>)
    b920:	4905      	ldr	r1, [pc, #20]	; (b938 <z_data_copy+0x2c>)
    b922:	4806      	ldr	r0, [pc, #24]	; (b93c <z_data_copy+0x30>)
    b924:	f003 bf29 	b.w	f77a <z_early_memcpy>
    b928:	20000000 	.word	0x20000000
    b92c:	20000360 	.word	0x20000360
    b930:	00013644 	.word	0x00013644
    b934:	00000000 	.word	0x00000000
    b938:	00013644 	.word	0x00013644
    b93c:	20000000 	.word	0x20000000

0000b940 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    b940:	4b03      	ldr	r3, [pc, #12]	; (b950 <elapsed+0x10>)
    b942:	681b      	ldr	r3, [r3, #0]
    b944:	b90b      	cbnz	r3, b94a <elapsed+0xa>
    b946:	f7fd bf3d 	b.w	97c4 <sys_clock_elapsed>
}
    b94a:	2000      	movs	r0, #0
    b94c:	4770      	bx	lr
    b94e:	bf00      	nop
    b950:	200034b4 	.word	0x200034b4

0000b954 <next_timeout>:

static int32_t next_timeout(void)
{
    b954:	b510      	push	{r4, lr}
	return list->head == list;
    b956:	4b0e      	ldr	r3, [pc, #56]	; (b990 <next_timeout+0x3c>)
    b958:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b95a:	429c      	cmp	r4, r3
    b95c:	d104      	bne.n	b968 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    b95e:	f7ff ffef 	bl	b940 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    b962:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    b966:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    b968:	f7ff ffea 	bl	b940 <elapsed>
	if ((to == NULL) ||
    b96c:	2c00      	cmp	r4, #0
    b96e:	d0f8      	beq.n	b962 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    b970:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    b974:	1a1b      	subs	r3, r3, r0
    b976:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    b97a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    b97e:	f172 0100 	sbcs.w	r1, r2, #0
    b982:	daee      	bge.n	b962 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    b984:	2a00      	cmp	r2, #0
    b986:	bfac      	ite	ge
    b988:	4618      	movge	r0, r3
    b98a:	2000      	movlt	r0, #0
	return ret;
    b98c:	e7eb      	b.n	b966 <next_timeout+0x12>
    b98e:	bf00      	nop
    b990:	20000238 	.word	0x20000238

0000b994 <remove_timeout>:
{
    b994:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b996:	b170      	cbz	r0, b9b6 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    b998:	4b0b      	ldr	r3, [pc, #44]	; (b9c8 <remove_timeout+0x34>)
    b99a:	685b      	ldr	r3, [r3, #4]
    b99c:	4298      	cmp	r0, r3
    b99e:	d00a      	beq.n	b9b6 <remove_timeout+0x22>
    b9a0:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    b9a2:	b143      	cbz	r3, b9b6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    b9a4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    b9a8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    b9ac:	1912      	adds	r2, r2, r4
    b9ae:	eb41 0105 	adc.w	r1, r1, r5
    b9b2:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    b9b6:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    b9ba:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    b9bc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    b9be:	2300      	movs	r3, #0
	node->prev = NULL;
    b9c0:	e9c0 3300 	strd	r3, r3, [r0]
}
    b9c4:	bd30      	pop	{r4, r5, pc}
    b9c6:	bf00      	nop
    b9c8:	20000238 	.word	0x20000238

0000b9cc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b9cc:	f1b3 3fff 	cmp.w	r3, #4294967295
    b9d0:	bf08      	it	eq
    b9d2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    b9d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b9d8:	4604      	mov	r4, r0
    b9da:	461d      	mov	r5, r3
    b9dc:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b9de:	d05c      	beq.n	ba9a <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    b9e0:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    b9e2:	f04f 0320 	mov.w	r3, #32
    b9e6:	f3ef 8711 	mrs	r7, BASEPRI
    b9ea:	f383 8812 	msr	BASEPRI_MAX, r3
    b9ee:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    b9f2:	3201      	adds	r2, #1
    b9f4:	f175 33ff 	sbcs.w	r3, r5, #4294967295
    b9f8:	da24      	bge.n	ba44 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    b9fa:	492d      	ldr	r1, [pc, #180]	; (bab0 <z_add_timeout+0xe4>)
    b9fc:	e9d1 2000 	ldrd	r2, r0, [r1]
    ba00:	f06f 0301 	mvn.w	r3, #1
    ba04:	1a9b      	subs	r3, r3, r2
    ba06:	f04f 32ff 	mov.w	r2, #4294967295
    ba0a:	eb62 0000 	sbc.w	r0, r2, r0
    ba0e:	1b9e      	subs	r6, r3, r6
    ba10:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    ba14:	2e01      	cmp	r6, #1
    ba16:	f170 0300 	sbcs.w	r3, r0, #0
    ba1a:	da01      	bge.n	ba20 <z_add_timeout+0x54>
    ba1c:	2601      	movs	r6, #1
    ba1e:	2000      	movs	r0, #0
    ba20:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    ba24:	4e23      	ldr	r6, [pc, #140]	; (bab4 <z_add_timeout+0xe8>)
    ba26:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    ba2a:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ba2c:	45b4      	cmp	ip, r6
    ba2e:	bf08      	it	eq
    ba30:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    ba34:	f1bc 0f00 	cmp.w	ip, #0
    ba38:	d10d      	bne.n	ba56 <z_add_timeout+0x8a>
	node->prev = tail;
    ba3a:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    ba3e:	602c      	str	r4, [r5, #0]
	list->tail = node;
    ba40:	6074      	str	r4, [r6, #4]
}
    ba42:	e01c      	b.n	ba7e <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    ba44:	f7ff ff7c 	bl	b940 <elapsed>
    ba48:	3601      	adds	r6, #1
    ba4a:	f145 0500 	adc.w	r5, r5, #0
    ba4e:	1836      	adds	r6, r6, r0
    ba50:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    ba54:	e7e4      	b.n	ba20 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    ba56:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    ba5a:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    ba5e:	4293      	cmp	r3, r2
    ba60:	eb71 0e00 	sbcs.w	lr, r1, r0
    ba64:	da1a      	bge.n	ba9c <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    ba66:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    ba68:	f8dc 3004 	ldr.w	r3, [ip, #4]
    ba6c:	eb60 0001 	sbc.w	r0, r0, r1
    ba70:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    ba74:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    ba78:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    ba7a:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    ba7e:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ba80:	42b3      	cmp	r3, r6
    ba82:	d006      	beq.n	ba92 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    ba84:	429c      	cmp	r4, r3
    ba86:	d104      	bne.n	ba92 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    ba88:	f7ff ff64 	bl	b954 <next_timeout>
    ba8c:	2100      	movs	r1, #0
    ba8e:	f7fd fe67 	bl	9760 <sys_clock_set_timeout>
	__asm__ volatile(
    ba92:	f387 8811 	msr	BASEPRI, r7
    ba96:	f3bf 8f6f 	isb	sy
		}
	}
}
    ba9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    ba9c:	1a9b      	subs	r3, r3, r2
    ba9e:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    baa2:	45ac      	cmp	ip, r5
    baa4:	e9c4 3104 	strd	r3, r1, [r4, #16]
    baa8:	d0c7      	beq.n	ba3a <z_add_timeout+0x6e>
    baaa:	f8dc c000 	ldr.w	ip, [ip]
    baae:	e7c1      	b.n	ba34 <z_add_timeout+0x68>
    bab0:	20000d00 	.word	0x20000d00
    bab4:	20000238 	.word	0x20000238

0000bab8 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    bab8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    babc:	f04f 0320 	mov.w	r3, #32
    bac0:	f3ef 8c11 	mrs	ip, BASEPRI
    bac4:	f383 8812 	msr	BASEPRI_MAX, r3
    bac8:	f3bf 8f6f 	isb	sy
	return list->head == list;
    bacc:	f8df a0b0 	ldr.w	sl, [pc, #176]	; bb80 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    bad0:	f8df 90b0 	ldr.w	r9, [pc, #176]	; bb84 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
    bad4:	4f2c      	ldr	r7, [pc, #176]	; (bb88 <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
    bad6:	f8c9 0000 	str.w	r0, [r9]
    bada:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    bade:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bae0:	4550      	cmp	r0, sl
    bae2:	bf08      	it	eq
    bae4:	2000      	moveq	r0, #0
    bae6:	2500      	movs	r5, #0
		curr_tick += dt;
    bae8:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    baec:	f8d9 3000 	ldr.w	r3, [r9]
    baf0:	46e0      	mov	r8, ip
    baf2:	b380      	cbz	r0, bb56 <sys_clock_announce+0x9e>
    baf4:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    baf8:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    bafc:	42b3      	cmp	r3, r6
    bafe:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    bb02:	da05      	bge.n	bb10 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    bb04:	1af6      	subs	r6, r6, r3
    bb06:	eb6c 040e 	sbc.w	r4, ip, lr
    bb0a:	e9c0 6404 	strd	r6, r4, [r0, #16]
    bb0e:	e022      	b.n	bb56 <sys_clock_announce+0x9e>
		curr_tick += dt;
    bb10:	18b2      	adds	r2, r6, r2
    bb12:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    bb16:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    bb1a:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    bb1e:	f7ff ff39 	bl	b994 <remove_timeout>
	__asm__ volatile(
    bb22:	f388 8811 	msr	BASEPRI, r8
    bb26:	f3bf 8f6f 	isb	sy
		t->fn(t);
    bb2a:	6883      	ldr	r3, [r0, #8]
    bb2c:	4798      	blx	r3
	__asm__ volatile(
    bb2e:	f04f 0320 	mov.w	r3, #32
    bb32:	f3ef 8811 	mrs	r8, BASEPRI
    bb36:	f383 8812 	msr	BASEPRI_MAX, r3
    bb3a:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    bb3e:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    bb42:	f8da 0000 	ldr.w	r0, [sl]
    bb46:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bb48:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    bb4a:	46c4      	mov	ip, r8
    bb4c:	f8c9 3000 	str.w	r3, [r9]
    bb50:	d1ca      	bne.n	bae8 <sys_clock_announce+0x30>
		curr_tick += dt;
    bb52:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
    bb56:	189a      	adds	r2, r3, r2
    bb58:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
    bb5c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    bb5e:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    bb62:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    bb66:	f7ff fef5 	bl	b954 <next_timeout>
    bb6a:	4621      	mov	r1, r4
    bb6c:	f7fd fdf8 	bl	9760 <sys_clock_set_timeout>
	__asm__ volatile(
    bb70:	f388 8811 	msr	BASEPRI, r8
    bb74:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    bb78:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    bb7c:	f7ff bc80 	b.w	b480 <z_time_slice>
    bb80:	20000238 	.word	0x20000238
    bb84:	200034b4 	.word	0x200034b4
    bb88:	20000d00 	.word	0x20000d00

0000bb8c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    bb8c:	b510      	push	{r4, lr}
	__asm__ volatile(
    bb8e:	f04f 0320 	mov.w	r3, #32
    bb92:	f3ef 8411 	mrs	r4, BASEPRI
    bb96:	f383 8812 	msr	BASEPRI_MAX, r3
    bb9a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    bb9e:	f7ff fecf 	bl	b940 <elapsed>
    bba2:	4a06      	ldr	r2, [pc, #24]	; (bbbc <sys_clock_tick_get+0x30>)
    bba4:	4603      	mov	r3, r0
    bba6:	e9d2 0100 	ldrd	r0, r1, [r2]
    bbaa:	1818      	adds	r0, r3, r0
    bbac:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    bbb0:	f384 8811 	msr	BASEPRI, r4
    bbb4:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    bbb8:	bd10      	pop	{r4, pc}
    bbba:	bf00      	nop
    bbbc:	20000d00 	.word	0x20000d00

0000bbc0 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    bbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bbc2:	4604      	mov	r4, r0
	__asm__ volatile(
    bbc4:	f04f 0320 	mov.w	r3, #32
    bbc8:	f3ef 8711 	mrs	r7, BASEPRI
    bbcc:	f383 8812 	msr	BASEPRI_MAX, r3
    bbd0:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
    bbd4:	6802      	ldr	r2, [r0, #0]
    bbd6:	b122      	cbz	r2, bbe2 <z_timer_expiration_handler+0x22>
	__asm__ volatile(
    bbd8:	f387 8811 	msr	BASEPRI, r7
    bbdc:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    bbe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    bbe2:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
    bbe6:	1c58      	adds	r0, r3, #1
    bbe8:	f146 0100 	adc.w	r1, r6, #0
    bbec:	2802      	cmp	r0, #2
    bbee:	f171 0100 	sbcs.w	r1, r1, #0
    bbf2:	d327      	bcc.n	bc44 <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
    bbf4:	2b01      	cmp	r3, #1
    bbf6:	f176 0100 	sbcs.w	r1, r6, #0
    bbfa:	bfbc      	itt	lt
    bbfc:	2301      	movlt	r3, #1
    bbfe:	4616      	movlt	r6, r2
    bc00:	1e5d      	subs	r5, r3, #1
    bc02:	f146 36ff 	adc.w	r6, r6, #4294967295
	return z_impl_k_uptime_ticks();
    bc06:	f003 ff35 	bl	fa74 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    bc0a:	3001      	adds	r0, #1
    bc0c:	f141 0100 	adc.w	r1, r1, #0
    bc10:	1940      	adds	r0, r0, r5
    bc12:	eb46 0101 	adc.w	r1, r6, r1
    bc16:	2801      	cmp	r0, #1
    bc18:	f171 0100 	sbcs.w	r1, r1, #0
    bc1c:	db3b      	blt.n	bc96 <z_timer_expiration_handler+0xd6>
    bc1e:	f003 ff29 	bl	fa74 <z_impl_k_uptime_ticks>
    bc22:	3001      	adds	r0, #1
    bc24:	f141 0100 	adc.w	r1, r1, #0
    bc28:	f06f 0201 	mvn.w	r2, #1
    bc2c:	1940      	adds	r0, r0, r5
    bc2e:	eb46 0301 	adc.w	r3, r6, r1
    bc32:	1a12      	subs	r2, r2, r0
    bc34:	f04f 31ff 	mov.w	r1, #4294967295
    bc38:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    bc3c:	4918      	ldr	r1, [pc, #96]	; (bca0 <z_timer_expiration_handler+0xe0>)
    bc3e:	4620      	mov	r0, r4
    bc40:	f7ff fec4 	bl	b9cc <z_add_timeout>
	timer->status += 1U;
    bc44:	6b23      	ldr	r3, [r4, #48]	; 0x30
    bc46:	3301      	adds	r3, #1
    bc48:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
    bc4a:	6a23      	ldr	r3, [r4, #32]
    bc4c:	b173      	cbz	r3, bc6c <z_timer_expiration_handler+0xac>
    bc4e:	f387 8811 	msr	BASEPRI, r7
    bc52:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
    bc56:	6a23      	ldr	r3, [r4, #32]
    bc58:	4620      	mov	r0, r4
    bc5a:	4798      	blx	r3
	__asm__ volatile(
    bc5c:	f04f 0320 	mov.w	r3, #32
    bc60:	f3ef 8711 	mrs	r7, BASEPRI
    bc64:	f383 8812 	msr	BASEPRI_MAX, r3
    bc68:	f3bf 8f6f 	isb	sy
	return list->head == list;
    bc6c:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bc70:	42a5      	cmp	r5, r4
    bc72:	d0b1      	beq.n	bbd8 <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
    bc74:	2d00      	cmp	r5, #0
    bc76:	d0af      	beq.n	bbd8 <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
    bc78:	4628      	mov	r0, r5
    bc7a:	f003 fe14 	bl	f8a6 <z_unpend_thread_no_timeout>
    bc7e:	2300      	movs	r3, #0
    bc80:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
	__asm__ volatile(
    bc84:	f387 8811 	msr	BASEPRI, r7
    bc88:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    bc8c:	4628      	mov	r0, r5
}
    bc8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    bc92:	f003 bdf8 	b.w	f886 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    bc96:	f06f 0201 	mvn.w	r2, #1
    bc9a:	f04f 33ff 	mov.w	r3, #4294967295
    bc9e:	e7cd      	b.n	bc3c <z_timer_expiration_handler+0x7c>
    bca0:	0000bbc1 	.word	0x0000bbc1

0000bca4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    bca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    bca8:	f1b3 3fff 	cmp.w	r3, #4294967295
    bcac:	bf08      	it	eq
    bcae:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    bcb2:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    bcb6:	4605      	mov	r5, r0
    bcb8:	461c      	mov	r4, r3
    bcba:	4691      	mov	r9, r2
    bcbc:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    bcbe:	d01c      	beq.n	bcfa <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
    bcc0:	1c53      	adds	r3, r2, #1
    bcc2:	f174 33ff 	sbcs.w	r3, r4, #4294967295
    bcc6:	db09      	blt.n	bcdc <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
    bcc8:	2a01      	cmp	r2, #1
    bcca:	f174 0300 	sbcs.w	r3, r4, #0
    bcce:	bfbc      	itt	lt
    bcd0:	2201      	movlt	r2, #1
    bcd2:	2400      	movlt	r4, #0
    bcd4:	f112 39ff 	adds.w	r9, r2, #4294967295
    bcd8:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
    bcdc:	4628      	mov	r0, r5
    bcde:	f003 fe9f 	bl	fa20 <z_abort_timeout>
	timer->period = period;
    bce2:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
    bce6:	2300      	movs	r3, #0
    bce8:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    bcea:	464a      	mov	r2, r9
    bcec:	4643      	mov	r3, r8
    bcee:	4628      	mov	r0, r5
    bcf0:	4903      	ldr	r1, [pc, #12]	; (bd00 <z_impl_k_timer_start+0x5c>)
		     duration);
}
    bcf2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    bcf6:	f7ff be69 	b.w	b9cc <z_add_timeout>
}
    bcfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bcfe:	bf00      	nop
    bd00:	0000bbc1 	.word	0x0000bbc1

0000bd04 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
    bd04:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    bd08:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
    bd0a:	4b29      	ldr	r3, [pc, #164]	; (bdb0 <z_impl_k_poll+0xac>)
    bd0c:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
    bd0e:	2301      	movs	r3, #1
    bd10:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
    bd14:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
    bd18:	ea52 0305 	orrs.w	r3, r2, r5
{
    bd1c:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
    bd1e:	bf0c      	ite	eq
    bd20:	2301      	moveq	r3, #1
    bd22:	2300      	movne	r3, #0
    bd24:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
    bd28:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
    bd2a:	f003 ff03 	bl	fb34 <register_events>
    bd2e:	4681      	mov	r9, r0
	__asm__ volatile(
    bd30:	f04f 0320 	mov.w	r3, #32
    bd34:	f3ef 8a11 	mrs	sl, BASEPRI
    bd38:	f383 8812 	msr	BASEPRI_MAX, r3
    bd3c:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
    bd40:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
    bd44:	b964      	cbnz	r4, bd60 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
    bd46:	4601      	mov	r1, r0
    bd48:	4652      	mov	r2, sl
    bd4a:	4640      	mov	r0, r8
    bd4c:	f003 ffc3 	bl	fcd6 <clear_event_registrations>
	__asm__ volatile(
    bd50:	f38a 8811 	msr	BASEPRI, sl
    bd54:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
    bd58:	4620      	mov	r0, r4
    bd5a:	b002      	add	sp, #8
    bd5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
    bd60:	2300      	movs	r3, #0
    bd62:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    bd66:	ea56 0305 	orrs.w	r3, r6, r5
    bd6a:	d106      	bne.n	bd7a <z_impl_k_poll+0x76>
    bd6c:	f38a 8811 	msr	BASEPRI, sl
    bd70:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    bd74:	f06f 040a 	mvn.w	r4, #10
    bd78:	e7ee      	b.n	bd58 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
    bd7a:	e9cd 6500 	strd	r6, r5, [sp]
    bd7e:	4a0d      	ldr	r2, [pc, #52]	; (bdb4 <z_impl_k_poll+0xb0>)
    bd80:	480d      	ldr	r0, [pc, #52]	; (bdb8 <z_impl_k_poll+0xb4>)
    bd82:	4651      	mov	r1, sl
    bd84:	f7ff fbac 	bl	b4e0 <z_pend_curr>
    bd88:	4604      	mov	r4, r0
	__asm__ volatile(
    bd8a:	f04f 0320 	mov.w	r3, #32
    bd8e:	f3ef 8511 	mrs	r5, BASEPRI
    bd92:	f383 8812 	msr	BASEPRI_MAX, r3
    bd96:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
    bd9a:	462a      	mov	r2, r5
    bd9c:	4649      	mov	r1, r9
    bd9e:	4640      	mov	r0, r8
    bda0:	f003 ff99 	bl	fcd6 <clear_event_registrations>
	__asm__ volatile(
    bda4:	f385 8811 	msr	BASEPRI, r5
    bda8:	f3bf 8f6f 	isb	sy
	return swap_rc;
    bdac:	e7d4      	b.n	bd58 <z_impl_k_poll+0x54>
    bdae:	bf00      	nop
    bdb0:	20003480 	.word	0x20003480
    bdb4:	20000240 	.word	0x20000240
    bdb8:	20003c0e 	.word	0x20003c0e

0000bdbc <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
    bdbc:	b538      	push	{r3, r4, r5, lr}
    bdbe:	4603      	mov	r3, r0
	__asm__ volatile(
    bdc0:	f04f 0220 	mov.w	r2, #32
    bdc4:	f3ef 8511 	mrs	r5, BASEPRI
    bdc8:	f382 8812 	msr	BASEPRI_MAX, r2
    bdcc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
    bdd0:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
    bdd2:	2101      	movs	r1, #1
    bdd4:	6081      	str	r1, [r0, #8]
	return list->head == list;
    bdd6:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    bdd8:	4283      	cmp	r3, r0
    bdda:	d106      	bne.n	bdea <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
    bddc:	f385 8811 	msr	BASEPRI, r5
    bde0:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
    bde4:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
    bde6:	4620      	mov	r0, r4
    bde8:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
    bdea:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    bdee:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    bdf0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    bdf2:	2300      	movs	r3, #0
	node->prev = NULL;
    bdf4:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    bdf8:	f003 ff13 	bl	fc22 <signal_poll_event>
	z_reschedule(&lock, key);
    bdfc:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    bdfe:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    be00:	4801      	ldr	r0, [pc, #4]	; (be08 <z_impl_k_poll_signal_raise+0x4c>)
    be02:	f7ff fbd1 	bl	b5a8 <z_reschedule>
	return rc;
    be06:	e7ee      	b.n	bde6 <z_impl_k_poll_signal_raise+0x2a>
    be08:	20003c0e 	.word	0x20003c0e

0000be0c <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    be0c:	4801      	ldr	r0, [pc, #4]	; (be14 <boot_banner+0x8>)
    be0e:	f000 bbb8 	b.w	c582 <printk>
    be12:	bf00      	nop
    be14:	00013609 	.word	0x00013609

0000be18 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
    be18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
    be1a:	4b09      	ldr	r3, [pc, #36]	; (be40 <k_sys_work_q_init+0x28>)
    be1c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    be1e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    be20:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    be22:	9300      	str	r3, [sp, #0]
    be24:	4907      	ldr	r1, [pc, #28]	; (be44 <k_sys_work_q_init+0x2c>)
    be26:	4808      	ldr	r0, [pc, #32]	; (be48 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    be28:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    be2c:	f04f 33ff 	mov.w	r3, #4294967295
    be30:	f44f 6280 	mov.w	r2, #1024	; 0x400
    be34:	f000 f900 	bl	c038 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    be38:	4620      	mov	r0, r4
    be3a:	b004      	add	sp, #16
    be3c:	bd10      	pop	{r4, pc}
    be3e:	bf00      	nop
    be40:	00013639 	.word	0x00013639
    be44:	20005648 	.word	0x20005648
    be48:	20000d08 	.word	0x20000d08

0000be4c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    be4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    be50:	4e4a      	ldr	r6, [pc, #296]	; (bf7c <work_queue_main+0x130>)
    be52:	b085      	sub	sp, #20
    be54:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    be56:	f04f 38ff 	mov.w	r8, #4294967295
    be5a:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
    be5e:	f04f 0320 	mov.w	r3, #32
    be62:	f3ef 8711 	mrs	r7, BASEPRI
    be66:	f383 8812 	msr	BASEPRI_MAX, r3
    be6a:	f3bf 8f6f 	isb	sy
    be6e:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    be72:	b98d      	cbnz	r5, be98 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    be74:	2102      	movs	r1, #2
    be76:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    be7a:	f003 ff85 	bl	fd88 <flag_test_and_clear>
    be7e:	2800      	cmp	r0, #0
    be80:	d143      	bne.n	bf0a <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    be82:	2300      	movs	r3, #0
    be84:	e9cd 8900 	strd	r8, r9, [sp]
    be88:	9302      	str	r3, [sp, #8]
    be8a:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
    be8e:	4639      	mov	r1, r7
    be90:	483b      	ldr	r0, [pc, #236]	; (bf80 <work_queue_main+0x134>)
    be92:	f7ff fd29 	bl	b8e8 <z_sched_wait>
			continue;
    be96:	e7e2      	b.n	be5e <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    be98:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
	return node->next;
    be9c:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    be9e:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    bea2:	4295      	cmp	r5, r2
	list->tail = node;
    bea4:	bf08      	it	eq
    bea6:	f8c4 30bc 	streq.w	r3, [r4, #188]	; 0xbc
	*flagp |= BIT(bit);
    beaa:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    beae:	f043 0302 	orr.w	r3, r3, #2
    beb2:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	*flagp &= ~BIT(bit);
    beb6:	68eb      	ldr	r3, [r5, #12]
    beb8:	f023 0304 	bic.w	r3, r3, #4
    bebc:	f043 0301 	orr.w	r3, r3, #1
    bec0:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    bec2:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    bec4:	f387 8811 	msr	BASEPRI, r7
    bec8:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    becc:	4628      	mov	r0, r5
    bece:	4798      	blx	r3
	__asm__ volatile(
    bed0:	f04f 0320 	mov.w	r3, #32
    bed4:	f3ef 8b11 	mrs	fp, BASEPRI
    bed8:	f383 8812 	msr	BASEPRI_MAX, r3
    bedc:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    bee0:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    bee2:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    bee4:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    bee8:	d419      	bmi.n	bf1e <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
    beea:	60ea      	str	r2, [r5, #12]
    beec:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    bef0:	f023 0302 	bic.w	r3, r3, #2
    bef4:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	__asm__ volatile(
    bef8:	f38b 8811 	msr	BASEPRI, fp
    befc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    bf00:	05db      	lsls	r3, r3, #23
    bf02:	d4ac      	bmi.n	be5e <work_queue_main+0x12>
	z_impl_k_yield();
    bf04:	f7ff fbea 	bl	b6dc <z_impl_k_yield>
}
    bf08:	e7a9      	b.n	be5e <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    bf0a:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    bf0e:	2200      	movs	r2, #0
    bf10:	2101      	movs	r1, #1
    bf12:	4628      	mov	r0, r5
    bf14:	f003 fd60 	bl	f9d8 <z_sched_wake>
    bf18:	2800      	cmp	r0, #0
    bf1a:	d1f8      	bne.n	bf0e <work_queue_main+0xc2>
    bf1c:	e7b1      	b.n	be82 <work_queue_main+0x36>
	return list->head;
    bf1e:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    bf20:	f023 0303 	bic.w	r3, r3, #3
    bf24:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    bf26:	2800      	cmp	r0, #0
    bf28:	d0e0      	beq.n	beec <work_queue_main+0xa0>
	return node->next;
    bf2a:	2700      	movs	r7, #0
    bf2c:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    bf30:	463b      	mov	r3, r7
    bf32:	2800      	cmp	r0, #0
    bf34:	d0da      	beq.n	beec <work_queue_main+0xa0>
		if (wc->work == work) {
    bf36:	6842      	ldr	r2, [r0, #4]
    bf38:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    bf3a:	4601      	mov	r1, r0
		if (wc->work == work) {
    bf3c:	d10c      	bne.n	bf58 <work_queue_main+0x10c>
	return node->next;
    bf3e:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    bf40:	b99f      	cbnz	r7, bf6a <work_queue_main+0x11e>
    bf42:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    bf44:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    bf46:	4282      	cmp	r2, r0
    bf48:	d100      	bne.n	bf4c <work_queue_main+0x100>
	list->tail = node;
    bf4a:	6071      	str	r1, [r6, #4]
	parent->next = child;
    bf4c:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    bf50:	f7ff f912 	bl	b178 <z_impl_k_sem_give>
}
    bf54:	4639      	mov	r1, r7
    bf56:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    bf58:	f1ba 0f00 	cmp.w	sl, #0
    bf5c:	d00b      	beq.n	bf76 <work_queue_main+0x12a>
	return node->next;
    bf5e:	f8da 2000 	ldr.w	r2, [sl]
    bf62:	4650      	mov	r0, sl
    bf64:	460f      	mov	r7, r1
    bf66:	4692      	mov	sl, r2
    bf68:	e7e3      	b.n	bf32 <work_queue_main+0xe6>
	parent->next = child;
    bf6a:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    bf6c:	6872      	ldr	r2, [r6, #4]
    bf6e:	4282      	cmp	r2, r0
	list->tail = node;
    bf70:	bf08      	it	eq
    bf72:	6077      	streq	r7, [r6, #4]
}
    bf74:	e7ea      	b.n	bf4c <work_queue_main+0x100>
    bf76:	4652      	mov	r2, sl
    bf78:	e7f3      	b.n	bf62 <work_queue_main+0x116>
    bf7a:	bf00      	nop
    bf7c:	200034b8 	.word	0x200034b8
    bf80:	20003c0e 	.word	0x20003c0e

0000bf84 <submit_to_queue_locked>:
{
    bf84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    bf86:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    bf88:	079a      	lsls	r2, r3, #30
{
    bf8a:	4604      	mov	r4, r0
    bf8c:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    bf8e:	f3c3 0640 	ubfx	r6, r3, #1, #1
    bf92:	d42c      	bmi.n	bfee <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    bf94:	075b      	lsls	r3, r3, #29
    bf96:	d41a      	bmi.n	bfce <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
    bf98:	680b      	ldr	r3, [r1, #0]
    bf9a:	b90b      	cbnz	r3, bfa0 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    bf9c:	6883      	ldr	r3, [r0, #8]
    bf9e:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
    bfa0:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    bfa2:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
    bfa4:	bf44      	itt	mi
    bfa6:	68a3      	ldrmi	r3, [r4, #8]
    bfa8:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
    bfaa:	683d      	ldr	r5, [r7, #0]
			ret = 2;
    bfac:	bf4c      	ite	mi
    bfae:	2602      	movmi	r6, #2
		ret = 1;
    bfb0:	2601      	movpl	r6, #1
	if (queue == NULL) {
    bfb2:	2d00      	cmp	r5, #0
    bfb4:	d03a      	beq.n	c02c <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    bfb6:	4b1f      	ldr	r3, [pc, #124]	; (c034 <submit_to_queue_locked+0xb0>)
    bfb8:	689b      	ldr	r3, [r3, #8]
    bfba:	42ab      	cmp	r3, r5
    bfbc:	d00a      	beq.n	bfd4 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
    bfbe:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    bfc2:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    bfc4:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    bfc8:	d414      	bmi.n	bff4 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
    bfca:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
    bfce:	2300      	movs	r3, #0
    bfd0:	603b      	str	r3, [r7, #0]
	return ret;
    bfd2:	e025      	b.n	c020 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    bfd4:	f003 fbd3 	bl	f77e <k_is_in_isr>
    bfd8:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
    bfdc:	2800      	cmp	r0, #0
    bfde:	d1f0      	bne.n	bfc2 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    bfe0:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    bfe2:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    bfe6:	d5f0      	bpl.n	bfca <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
    bfe8:	b152      	cbz	r2, c000 <submit_to_queue_locked+0x7c>
    bfea:	075b      	lsls	r3, r3, #29
    bfec:	d408      	bmi.n	c000 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
    bfee:	f06f 060f 	mvn.w	r6, #15
    bff2:	e7ec      	b.n	bfce <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
    bff4:	2a00      	cmp	r2, #0
    bff6:	d1fa      	bne.n	bfee <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
    bff8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
    bffc:	2b00      	cmp	r3, #0
    bffe:	d1f6      	bne.n	bfee <submit_to_queue_locked+0x6a>
	parent->next = child;
    c000:	2300      	movs	r3, #0
    c002:	6023      	str	r3, [r4, #0]
	return list->tail;
    c004:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
    c008:	b963      	cbnz	r3, c024 <submit_to_queue_locked+0xa0>
	list->head = node;
    c00a:	e9c5 442e 	strd	r4, r4, [r5, #184]	; 0xb8
		(void)notify_queue_locked(queue);
    c00e:	4628      	mov	r0, r5
    c010:	f003 fec5 	bl	fd9e <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    c014:	68e3      	ldr	r3, [r4, #12]
    c016:	f043 0304 	orr.w	r3, r3, #4
    c01a:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    c01c:	683b      	ldr	r3, [r7, #0]
    c01e:	60a3      	str	r3, [r4, #8]
}
    c020:	4630      	mov	r0, r6
    c022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    c024:	601c      	str	r4, [r3, #0]
	list->tail = node;
    c026:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
}
    c02a:	e7f0      	b.n	c00e <submit_to_queue_locked+0x8a>
		return -EINVAL;
    c02c:	f06f 0615 	mvn.w	r6, #21
    c030:	e7cd      	b.n	bfce <submit_to_queue_locked+0x4a>
    c032:	bf00      	nop
    c034:	20003480 	.word	0x20003480

0000c038 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    c038:	b5f0      	push	{r4, r5, r6, r7, lr}
    c03a:	b089      	sub	sp, #36	; 0x24
    c03c:	4604      	mov	r4, r0
	list->head = NULL;
    c03e:	2000      	movs	r0, #0
	list->tail = NULL;
    c040:	e9c4 002e 	strd	r0, r0, [r4, #184]	; 0xb8
    c044:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	sys_dlist_init(&w->waitq);
    c046:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->tail = (sys_dnode_t *)list;
    c04a:	e9c4 0030 	strd	r0, r0, [r4, #192]	; 0xc0
    c04e:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    c052:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    c056:	b31d      	cbz	r5, c0a0 <k_work_queue_start+0x68>
    c058:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    c05a:	2800      	cmp	r0, #0
    c05c:	f240 1001 	movw	r0, #257	; 0x101
    c060:	bf08      	it	eq
    c062:	2001      	moveq	r0, #1
	*flagp = flags;
    c064:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    c068:	2000      	movs	r0, #0
    c06a:	f04f 36ff 	mov.w	r6, #4294967295
    c06e:	f04f 37ff 	mov.w	r7, #4294967295
    c072:	e9cd 3003 	strd	r3, r0, [sp, #12]
    c076:	e9cd 0001 	strd	r0, r0, [sp, #4]
    c07a:	e9cd 6706 	strd	r6, r7, [sp, #24]
    c07e:	4b09      	ldr	r3, [pc, #36]	; (c0a4 <k_work_queue_start+0x6c>)
    c080:	9400      	str	r4, [sp, #0]
    c082:	4620      	mov	r0, r4
    c084:	f7fe ff18 	bl	aeb8 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    c088:	b125      	cbz	r5, c094 <k_work_queue_start+0x5c>
    c08a:	6829      	ldr	r1, [r5, #0]
    c08c:	b111      	cbz	r1, c094 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    c08e:	4620      	mov	r0, r4
    c090:	f7fe fe50 	bl	ad34 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    c094:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    c096:	b009      	add	sp, #36	; 0x24
    c098:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    c09c:	f003 bb77 	b.w	f78e <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    c0a0:	2001      	movs	r0, #1
    c0a2:	e7df      	b.n	c064 <k_work_queue_start+0x2c>
    c0a4:	0000be4d 	.word	0x0000be4d

0000c0a8 <cmd_dict_algorithm_cmd_handler_tag>:
SHELL_SUBCMD_DICT_SET_CREATE(sub_algorithm,
    c0a8:	2000      	movs	r0, #0
    c0aa:	4770      	bx	lr

0000c0ac <cmd_dict_algorithm_cmd_handler_anchor>:
    c0ac:	2000      	movs	r0, #0
    c0ae:	4770      	bx	lr

0000c0b0 <rx_timeout_callback>:
static void rx_timeout_callback(const dwt_cb_data_t *cb_data)
    c0b0:	f7f4 ba28 	b.w	504 <rx_ok_callback>

0000c0b4 <rx_error_callback>:
static void rx_error_callback(const dwt_cb_data_t *cb_data)
    c0b4:	f7f4 ba26 	b.w	504 <rx_ok_callback>

0000c0b8 <tx_done_callback>:
static void tx_done_callback(const dwt_cb_data_t *cb_data)
    c0b8:	f7f4 ba24 	b.w	504 <rx_ok_callback>

0000c0bc <dwt_writetodevice>:
{
    c0bc:	b507      	push	{r0, r1, r2, lr}
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
    c0be:	b2c0      	uxtb	r0, r0
    if (index == 0) // For index of 0, no sub-index is required
    c0c0:	b951      	cbnz	r1, c0d8 <dwt_writetodevice+0x1c>
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
    c0c2:	f060 007f 	orn	r0, r0, #127	; 0x7f
    c0c6:	f88d 0004 	strb.w	r0, [sp, #4]
    c0ca:	2001      	movs	r0, #1
    writetospi(cnt,header,length,buffer);
    c0cc:	a901      	add	r1, sp, #4
    c0ce:	f7f4 ff11 	bl	ef4 <writetospi>
} // end dwt_writetodevice()
    c0d2:	b003      	add	sp, #12
    c0d4:	f85d fb04 	ldr.w	pc, [sp], #4
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
    c0d8:	f060 003f 	orn	r0, r0, #63	; 0x3f
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
    c0dc:	297f      	cmp	r1, #127	; 0x7f
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
    c0de:	f88d 0004 	strb.w	r0, [sp, #4]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
    c0e2:	b2c8      	uxtb	r0, r1
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
    c0e4:	bf85      	ittet	hi
    c0e6:	f060 007f 	ornhi	r0, r0, #127	; 0x7f
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
    c0ea:	09c9      	lsrhi	r1, r1, #7
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
    c0ec:	f88d 0005 	strbls.w	r0, [sp, #5]
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
    c0f0:	f88d 0005 	strbhi.w	r0, [sp, #5]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
    c0f4:	bf92      	itee	ls
    c0f6:	2002      	movls	r0, #2
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
    c0f8:	f88d 1006 	strbhi.w	r1, [sp, #6]
    c0fc:	2003      	movhi	r0, #3
    c0fe:	e7e5      	b.n	c0cc <dwt_writetodevice+0x10>

0000c100 <dwt_readfromdevice>:
{
    c100:	b507      	push	{r0, r1, r2, lr}
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
    c102:	b2c0      	uxtb	r0, r0
    if (index == 0) // For index of 0, no sub-index is required
    c104:	b941      	cbnz	r1, c118 <dwt_readfromdevice+0x18>
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
    c106:	f88d 0004 	strb.w	r0, [sp, #4]
    c10a:	2001      	movs	r0, #1
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
    c10c:	a901      	add	r1, sp, #4
    c10e:	f7f4 ff27 	bl	f60 <readfromspi>
} // end dwt_readfromdevice()
    c112:	b003      	add	sp, #12
    c114:	f85d fb04 	ldr.w	pc, [sp], #4
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
    c118:	f040 0040 	orr.w	r0, r0, #64	; 0x40
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
    c11c:	297f      	cmp	r1, #127	; 0x7f
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
    c11e:	f88d 0004 	strb.w	r0, [sp, #4]
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
    c122:	b2c8      	uxtb	r0, r1
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
    c124:	bf85      	ittet	hi
    c126:	f060 007f 	ornhi	r0, r0, #127	; 0x7f
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
    c12a:	09c9      	lsrhi	r1, r1, #7
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
    c12c:	f88d 0005 	strbls.w	r0, [sp, #5]
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
    c130:	f88d 0005 	strbhi.w	r0, [sp, #5]
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
    c134:	bf92      	itee	ls
    c136:	2002      	movls	r0, #2
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
    c138:	f88d 1006 	strbhi.w	r1, [sp, #6]
    c13c:	2003      	movhi	r0, #3
    c13e:	e7e5      	b.n	c10c <dwt_readfromdevice+0xc>

0000c140 <dwt_read32bitoffsetreg>:
{
    c140:	b513      	push	{r0, r1, r4, lr}
    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
    c142:	ac01      	add	r4, sp, #4
    c144:	2204      	movs	r2, #4
    c146:	b280      	uxth	r0, r0
    c148:	4623      	mov	r3, r4
    c14a:	b289      	uxth	r1, r1
    c14c:	f7ff ffd8 	bl	c100 <dwt_readfromdevice>
    for (j = 3 ; j >= 0 ; j --)
    c150:	2203      	movs	r2, #3
    uint32  regval = 0 ;
    c152:	2000      	movs	r0, #0
        regval = (regval << 8) + buffer[j] ;
    c154:	5ca3      	ldrb	r3, [r4, r2]
    for (j = 3 ; j >= 0 ; j --)
    c156:	3a01      	subs	r2, #1
        regval = (regval << 8) + buffer[j] ;
    c158:	eb03 2000 	add.w	r0, r3, r0, lsl #8
    for (j = 3 ; j >= 0 ; j --)
    c15c:	d2fa      	bcs.n	c154 <dwt_read32bitoffsetreg+0x14>
} // end dwt_read32bitoffsetreg()
    c15e:	b002      	add	sp, #8
    c160:	bd10      	pop	{r4, pc}

0000c162 <dwt_readdevid>:
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
    c162:	2100      	movs	r1, #0
    c164:	4608      	mov	r0, r1
    c166:	f7ff bfeb 	b.w	c140 <dwt_read32bitoffsetreg>

0000c16a <dwt_read16bitoffsetreg>:
{
    c16a:	b507      	push	{r0, r1, r2, lr}
    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
    c16c:	2202      	movs	r2, #2
    c16e:	ab01      	add	r3, sp, #4
    c170:	b289      	uxth	r1, r1
    c172:	b280      	uxth	r0, r0
    c174:	f7ff ffc4 	bl	c100 <dwt_readfromdevice>
} // end dwt_read16bitoffsetreg()
    c178:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    c17c:	b003      	add	sp, #12
    c17e:	f85d fb04 	ldr.w	pc, [sp], #4

0000c182 <dwt_read8bitoffsetreg>:
{
    c182:	b507      	push	{r0, r1, r2, lr}
    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
    c184:	2201      	movs	r2, #1
    c186:	f10d 0307 	add.w	r3, sp, #7
    c18a:	b289      	uxth	r1, r1
    c18c:	b280      	uxth	r0, r0
    c18e:	f7ff ffb7 	bl	c100 <dwt_readfromdevice>
}
    c192:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c196:	b003      	add	sp, #12
    c198:	f85d fb04 	ldr.w	pc, [sp], #4

0000c19c <dwt_write8bitoffsetreg>:
{
    c19c:	b507      	push	{r0, r1, r2, lr}
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
    c19e:	b289      	uxth	r1, r1
{
    c1a0:	f88d 2007 	strb.w	r2, [sp, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
    c1a4:	f10d 0307 	add.w	r3, sp, #7
    c1a8:	2201      	movs	r2, #1
    c1aa:	b280      	uxth	r0, r0
    c1ac:	f7ff ff86 	bl	c0bc <dwt_writetodevice>
}
    c1b0:	b003      	add	sp, #12
    c1b2:	f85d fb04 	ldr.w	pc, [sp], #4

0000c1b6 <dwt_write16bitoffsetreg>:
{
    c1b6:	b507      	push	{r0, r1, r2, lr}
    dwt_writetodevice(regFileID,regOffset,2,buffer);
    c1b8:	b289      	uxth	r1, r1
    buffer[0] = regval & 0xFF;
    c1ba:	f8ad 2004 	strh.w	r2, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
    c1be:	ab01      	add	r3, sp, #4
    c1c0:	2202      	movs	r2, #2
    c1c2:	b280      	uxth	r0, r0
    c1c4:	f7ff ff7a 	bl	c0bc <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
    c1c8:	b003      	add	sp, #12
    c1ca:	f85d fb04 	ldr.w	pc, [sp], #4

0000c1ce <dwt_setrxantennadelay>:
{
    c1ce:	4602      	mov	r2, r0
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
    c1d0:	f641 0104 	movw	r1, #6148	; 0x1804
    c1d4:	202e      	movs	r0, #46	; 0x2e
    c1d6:	f7ff bfee 	b.w	c1b6 <dwt_write16bitoffsetreg>

0000c1da <dwt_settxantennadelay>:
{
    c1da:	4602      	mov	r2, r0
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
    c1dc:	2100      	movs	r1, #0
    c1de:	2018      	movs	r0, #24
    c1e0:	f7ff bfe9 	b.w	c1b6 <dwt_write16bitoffsetreg>

0000c1e4 <dwt_write32bitoffsetreg>:
{
    c1e4:	b507      	push	{r0, r1, r2, lr}
    dwt_writetodevice(regFileID,regOffset,4,buffer);
    c1e6:	b289      	uxth	r1, r1
        buffer[j] = regval & 0xff ;
    c1e8:	9201      	str	r2, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
    c1ea:	ab01      	add	r3, sp, #4
    c1ec:	2204      	movs	r2, #4
    c1ee:	b280      	uxth	r0, r0
    c1f0:	f7ff ff64 	bl	c0bc <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
    c1f4:	b003      	add	sp, #12
    c1f6:	f85d fb04 	ldr.w	pc, [sp], #4

0000c1fa <_dwt_otpread>:
{
    c1fa:	b508      	push	{r3, lr}
    c1fc:	4602      	mov	r2, r0
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
    c1fe:	2104      	movs	r1, #4
    c200:	202d      	movs	r0, #45	; 0x2d
    c202:	f7ff ffd8 	bl	c1b6 <dwt_write16bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
    c206:	2203      	movs	r2, #3
    c208:	2106      	movs	r1, #6
    c20a:	202d      	movs	r0, #45	; 0x2d
    c20c:	f7ff ffc6 	bl	c19c <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
    c210:	2106      	movs	r1, #6
    c212:	202d      	movs	r0, #45	; 0x2d
    c214:	2200      	movs	r2, #0
    c216:	f7ff ffc1 	bl	c19c <dwt_write8bitoffsetreg>
}
    c21a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
    c21e:	210a      	movs	r1, #10
    c220:	202d      	movs	r0, #45	; 0x2d
    c222:	f7ff bf8d 	b.w	c140 <dwt_read32bitoffsetreg>

0000c226 <_dwt_aonarrayupload>:
{
    c226:	b508      	push	{r3, lr}
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
    c228:	2200      	movs	r2, #0
    c22a:	2102      	movs	r1, #2
    c22c:	202c      	movs	r0, #44	; 0x2c
    c22e:	f7ff ffb5 	bl	c19c <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
    c232:	2202      	movs	r2, #2
}
    c234:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
    c238:	4611      	mov	r1, r2
    c23a:	202c      	movs	r0, #44	; 0x2c
    c23c:	f7ff bfae 	b.w	c19c <dwt_write8bitoffsetreg>

0000c240 <_dwt_configlde>:
{
    c240:	b510      	push	{r4, lr}
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
    c242:	226d      	movs	r2, #109	; 0x6d
{
    c244:	4604      	mov	r4, r0
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
    c246:	f640 0106 	movw	r1, #2054	; 0x806
    c24a:	202e      	movs	r0, #46	; 0x2e
    c24c:	f7ff ffa6 	bl	c19c <dwt_write8bitoffsetreg>
    if(prfIndex)
    c250:	b144      	cbz	r4, c264 <_dwt_configlde+0x24>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
    c252:	f240 6207 	movw	r2, #1543	; 0x607
}
    c256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    c25a:	f641 0106 	movw	r1, #6150	; 0x1806
    c25e:	202e      	movs	r0, #46	; 0x2e
    c260:	f7ff bfa9 	b.w	c1b6 <dwt_write16bitoffsetreg>
    c264:	f241 6207 	movw	r2, #5639	; 0x1607
    c268:	e7f5      	b.n	c256 <_dwt_configlde+0x16>

0000c26a <_dwt_enableclocks>:
{
    c26a:	b513      	push	{r0, r1, r4, lr}
    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
    c26c:	2202      	movs	r2, #2
{
    c26e:	4604      	mov	r4, r0
    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
    c270:	ab01      	add	r3, sp, #4
    c272:	2100      	movs	r1, #0
    c274:	2036      	movs	r0, #54	; 0x36
    c276:	f7ff ff43 	bl	c100 <dwt_readfromdevice>
    switch(clocks)
    c27a:	2c0e      	cmp	r4, #14
    c27c:	d81b      	bhi.n	c2b6 <_dwt_enableclocks+0x4c>
    c27e:	e8df f004 	tbb	[pc, r4]
    c282:	0812      	.short	0x0812
    c284:	1a1a1a29 	.word	0x1a1a1a29
    c288:	1a3d301a 	.word	0x1a3d301a
    c28c:	504b461a 	.word	0x504b461a
    c290:	57          	.byte	0x57
    c291:	00          	.byte	0x00
            reg[0] = 0x00 ;
    c292:	2300      	movs	r3, #0
    c294:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = reg[1] & 0xfe;
    c298:	f89d 3005 	ldrb.w	r3, [sp, #5]
    c29c:	f023 0301 	bic.w	r3, r3, #1
            reg[1] = 0x80 | reg[1];
    c2a0:	f88d 3005 	strb.w	r3, [sp, #5]
        break;
    c2a4:	e007      	b.n	c2b6 <_dwt_enableclocks+0x4c>
            reg[0] = 0x01 | (reg[0] & 0xfc);
    c2a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c2aa:	f023 0303 	bic.w	r3, r3, #3
    c2ae:	f043 0301 	orr.w	r3, r3, #1
            reg[0] = 0x02 | (reg[0] & 0xfc);
    c2b2:	f88d 3004 	strb.w	r3, [sp, #4]
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
    c2b6:	ab01      	add	r3, sp, #4
    c2b8:	2201      	movs	r2, #1
    c2ba:	2100      	movs	r1, #0
    c2bc:	2036      	movs	r0, #54	; 0x36
    c2be:	f7ff fefd 	bl	c0bc <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
    c2c2:	2201      	movs	r2, #1
    c2c4:	f10d 0305 	add.w	r3, sp, #5
    c2c8:	4611      	mov	r1, r2
    c2ca:	2036      	movs	r0, #54	; 0x36
    c2cc:	f7ff fef6 	bl	c0bc <dwt_writetodevice>
} // end _dwt_enableclocks()
    c2d0:	b002      	add	sp, #8
    c2d2:	bd10      	pop	{r4, pc}
            reg[0] = 0x02 | (reg[0] & 0xfc);
    c2d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c2d8:	f023 0303 	bic.w	r3, r3, #3
    c2dc:	f043 0302 	orr.w	r3, r3, #2
    c2e0:	e7e7      	b.n	c2b2 <_dwt_enableclocks+0x48>
            reg[0] = 0x48 | (reg[0] & 0xb3);
    c2e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c2e6:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
    c2ea:	f043 0348 	orr.w	r3, r3, #72	; 0x48
    c2ee:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = 0x80 | reg[1];
    c2f2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    c2f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    c2fa:	e7d1      	b.n	c2a0 <_dwt_enableclocks+0x36>
            reg[0] = reg[0] & 0xb3;
    c2fc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    c300:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    c304:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
            reg[0] = 0x01;
    c308:	f8ad 3004 	strh.w	r3, [sp, #4]
        break;
    c30c:	e7d3      	b.n	c2b6 <_dwt_enableclocks+0x4c>
            reg[1] = 0x02 | reg[1];
    c30e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    c312:	f043 0302 	orr.w	r3, r3, #2
    c316:	e7c3      	b.n	c2a0 <_dwt_enableclocks+0x36>
            reg[1] = reg[1] & 0xfd;
    c318:	f89d 3005 	ldrb.w	r3, [sp, #5]
    c31c:	f023 0302 	bic.w	r3, r3, #2
    c320:	e7be      	b.n	c2a0 <_dwt_enableclocks+0x36>
            reg[0] = 0x20 | (reg[0] & 0xcf);
    c322:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c326:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    c32a:	f043 0320 	orr.w	r3, r3, #32
    c32e:	e7c0      	b.n	c2b2 <_dwt_enableclocks+0x48>
            reg[0] = 0x01;
    c330:	f240 3301 	movw	r3, #769	; 0x301
    c334:	e7e8      	b.n	c308 <_dwt_enableclocks+0x9e>

0000c336 <_dwt_loaducodefromrom>:
{
    c336:	b508      	push	{r3, lr}
    _dwt_enableclocks(FORCE_LDE);
    c338:	200e      	movs	r0, #14
    c33a:	f7ff ff96 	bl	c26a <_dwt_enableclocks>
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
    c33e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    c342:	2106      	movs	r1, #6
    c344:	202d      	movs	r0, #45	; 0x2d
    c346:	f7ff ff36 	bl	c1b6 <dwt_write16bitoffsetreg>
    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
    c34a:	2001      	movs	r0, #1
    c34c:	f000 f856 	bl	c3fc <deca_sleep>
}
    c350:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
    c354:	2001      	movs	r0, #1
    c356:	f7ff bf88 	b.w	c26a <_dwt_enableclocks>

0000c35a <_dwt_disablesequencing>:
{
    c35a:	b508      	push	{r3, lr}
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
    c35c:	2000      	movs	r0, #0
    c35e:	f7ff ff84 	bl	c26a <_dwt_enableclocks>
}
    c362:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
    c366:	2200      	movs	r2, #0
    c368:	2104      	movs	r1, #4
    c36a:	2036      	movs	r0, #54	; 0x36
    c36c:	f7ff bf23 	b.w	c1b6 <dwt_write16bitoffsetreg>

0000c370 <dwt_syncrxbufptrs>:
{
    c370:	b508      	push	{r3, lr}
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
    c372:	2103      	movs	r1, #3
    c374:	200f      	movs	r0, #15
    c376:	f7ff ff04 	bl	c182 <dwt_read8bitoffsetreg>
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
    c37a:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
    c37e:	0603      	lsls	r3, r0, #24
    c380:	d506      	bpl.n	c390 <dwt_syncrxbufptrs+0x20>
}
    c382:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
    c386:	2201      	movs	r2, #1
    c388:	2103      	movs	r1, #3
    c38a:	200d      	movs	r0, #13
    c38c:	f7ff bf06 	b.w	c19c <dwt_write8bitoffsetreg>
}
    c390:	bd08      	pop	{r3, pc}

0000c392 <dwt_setinterrupt>:
{
    c392:	b570      	push	{r4, r5, r6, lr}
    c394:	460d      	mov	r5, r1
    c396:	4604      	mov	r4, r0
    stat = decamutexon() ;
    c398:	f000 f82d 	bl	c3f6 <decamutexon>
    if(operation == 2)
    c39c:	2d02      	cmp	r5, #2
    stat = decamutexon() ;
    c39e:	4606      	mov	r6, r0
    if(operation == 2)
    c3a0:	d109      	bne.n	c3b6 <dwt_setinterrupt+0x24>
        dwt_write32bitreg(SYS_MASK_ID, bitmask) ; // New value
    c3a2:	4622      	mov	r2, r4
        dwt_write32bitreg(SYS_MASK_ID, mask) ; // New value
    c3a4:	200e      	movs	r0, #14
    c3a6:	2100      	movs	r1, #0
    c3a8:	f7ff ff1c 	bl	c1e4 <dwt_write32bitoffsetreg>
    decamutexoff(stat) ;
    c3ac:	4630      	mov	r0, r6
}
    c3ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    decamutexoff(stat) ;
    c3b2:	f000 b822 	b.w	c3fa <decamutexoff>
        mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read register
    c3b6:	2100      	movs	r1, #0
    c3b8:	200e      	movs	r0, #14
    c3ba:	f7ff fec1 	bl	c140 <dwt_read32bitoffsetreg>
        if(operation == 1)
    c3be:	2d01      	cmp	r5, #1
            mask |= bitmask ;
    c3c0:	bf0c      	ite	eq
    c3c2:	ea40 0204 	orreq.w	r2, r0, r4
            mask &= ~bitmask ; // Clear the bit
    c3c6:	ea20 0204 	bicne.w	r2, r0, r4
    c3ca:	e7eb      	b.n	c3a4 <dwt_setinterrupt+0x12>

0000c3cc <dwt_rxreset>:
{
    c3cc:	b508      	push	{r3, lr}
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
    c3ce:	22e0      	movs	r2, #224	; 0xe0
    c3d0:	2103      	movs	r1, #3
    c3d2:	2036      	movs	r0, #54	; 0x36
    c3d4:	f7ff fee2 	bl	c19c <dwt_write8bitoffsetreg>
}
    c3d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
    c3dc:	22f0      	movs	r2, #240	; 0xf0
    c3de:	2103      	movs	r1, #3
    c3e0:	2036      	movs	r0, #54	; 0x36
    c3e2:	f7ff bedb 	b.w	c19c <dwt_write8bitoffsetreg>

0000c3e6 <dwt_setxtaltrim>:
 */
void dwt_setxtaltrim(uint8 value)
{
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
    c3e6:	f000 021f 	and.w	r2, r0, #31
    c3ea:	f042 0260 	orr.w	r2, r2, #96	; 0x60
    c3ee:	210e      	movs	r1, #14
    c3f0:	202b      	movs	r0, #43	; 0x2b
    c3f2:	f7ff bed3 	b.w	c19c <dwt_write8bitoffsetreg>

0000c3f6 <decamutexon>:
 */
decaIrqStatus_t decamutexon(void)           
{
	//TODO
	return 0 ;   // return state before disable, value is used to re-enable in decamutexoff call
}
    c3f6:	2000      	movs	r0, #0
    c3f8:	4770      	bx	lr

0000c3fa <decamutexoff>:
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
	//TODO
}
    c3fa:	4770      	bx	lr

0000c3fc <deca_sleep>:
#include "deca_device_api.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_sleep(unsigned int time_ms)
{
    c3fc:	b538      	push	{r3, r4, r5, lr}
    c3fe:	2100      	movs	r1, #0
	return k_sleep(Z_TIMEOUT_MS(ms));
    c400:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
    c404:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    c408:	f240 30e7 	movw	r0, #999	; 0x3e7
    c40c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c410:	2300      	movs	r3, #0
    c412:	fbc4 0105 	smlal	r0, r1, r4, r5
    c416:	f7f3 fe61 	bl	dc <__aeabi_uldivmod>
	k_msleep(time_ms);
}
    c41a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
    c41e:	f7ff b9df 	b.w	b7e0 <z_impl_k_sleep>

0000c422 <port_set_dw1000_slowrate>:
{
    c422:	b580      	push	{r7, lr}
    c424:	af00      	add	r7, sp, #0
    set_spi_speed_slow();
    c426:	f7f4 fd25 	bl	e74 <set_spi_speed_slow>
}
    c42a:	bf00      	nop
    c42c:	bd80      	pop	{r7, pc}

0000c42e <port_set_dw1000_fastrate>:
{
    c42e:	b580      	push	{r7, lr}
    c430:	af00      	add	r7, sp, #0
    set_spi_speed_fast();
    c432:	f7f4 fd3f 	bl	eb4 <set_spi_speed_fast>
}
    c436:	bf00      	nop
    c438:	bd80      	pop	{r7, pc}

0000c43a <gpio_init_callback>:
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
	callback->pin_mask = pin_mask;
    c43a:	e9c0 1201 	strd	r1, r2, [r0, #4]
}
    c43e:	4770      	bx	lr

0000c440 <gpio_add_callback.isra.0>:
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    c440:	6883      	ldr	r3, [r0, #8]
    c442:	69db      	ldr	r3, [r3, #28]
    c444:	b10b      	cbz	r3, c44a <gpio_add_callback.isra.0+0xa>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    c446:	2201      	movs	r2, #1
    c448:	4718      	bx	r3
}
    c44a:	4770      	bx	lr

0000c44c <gpio_pin_configure.isra.0>:


extern int z_impl_gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);

__pinned_func
static inline int gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
    c44c:	b470      	push	{r4, r5, r6}
    c44e:	4613      	mov	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    c450:	02d4      	lsls	r4, r2, #11
	const struct gpio_driver_api *api =
    c452:	f8d0 c008 	ldr.w	ip, [r0, #8]
	struct gpio_driver_data *data =
    c456:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    c458:	d506      	bpl.n	c468 <gpio_pin_configure.isra.0+0x1c>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    c45a:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
    c45e:	d003      	beq.n	c468 <gpio_pin_configure.isra.0+0x1c>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    c460:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    c462:	bf48      	it	mi
    c464:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    c468:	6834      	ldr	r4, [r6, #0]
    c46a:	2501      	movs	r5, #1
    c46c:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    c46e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    c472:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    c474:	bf4c      	ite	mi
    c476:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    c478:	43ac      	bicpl	r4, r5
    c47a:	6034      	str	r4, [r6, #0]
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
}
    c47c:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
    c47e:	f8dc 3000 	ldr.w	r3, [ip]
    c482:	4718      	bx	r3

0000c484 <gpio_pin_interrupt_configure.isra.0>:
static inline int gpio_pin_interrupt_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
    c484:	b430      	push	{r4, r5}
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    c486:	0213      	lsls	r3, r2, #8
	const struct gpio_driver_api *api =
    c488:	6884      	ldr	r4, [r0, #8]
	const struct gpio_driver_data *const data =
    c48a:	6905      	ldr	r5, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    c48c:	d506      	bpl.n	c49c <gpio_pin_interrupt_configure.isra.0+0x18>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    c48e:	682d      	ldr	r5, [r5, #0]
    c490:	2301      	movs	r3, #1
    c492:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    c494:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    c496:	bf18      	it	ne
    c498:	f082 62c0 	eorne.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
    c49c:	69a4      	ldr	r4, [r4, #24]
    c49e:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
    c4a2:	46a4      	mov	ip, r4
    c4a4:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
}
    c4a8:	bc30      	pop	{r4, r5}
    c4aa:	4760      	bx	ip

0000c4ac <cbpprintf_external>:
{
    c4ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c4b0:	4606      	mov	r6, r0
    c4b2:	460d      	mov	r5, r1
    c4b4:	4617      	mov	r7, r2
	if (buf == NULL) {
    c4b6:	4698      	mov	r8, r3
    c4b8:	b32b      	cbz	r3, c506 <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
    c4ba:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
    c4be:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    c4c2:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
    c4c4:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    c4c6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
    c4ca:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    c4ce:	441c      	add	r4, r3
    c4d0:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
    c4d2:	f04f 0a00 	mov.w	sl, #0
    c4d6:	45ca      	cmp	sl, r9
    c4d8:	d309      	bcc.n	c4ee <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
    c4da:	f8d8 2004 	ldr.w	r2, [r8, #4]
    c4de:	f108 0308 	add.w	r3, r8, #8
    c4e2:	4639      	mov	r1, r7
    c4e4:	4630      	mov	r0, r6
    c4e6:	46ac      	mov	ip, r5
}
    c4e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    c4ec:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    c4ee:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    c4f2:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
    c4f6:	4620      	mov	r0, r4
    c4f8:	f002 fb7a 	bl	ebf0 <strlen>
    c4fc:	3001      	adds	r0, #1
    c4fe:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    c500:	f10a 0a01 	add.w	sl, sl, #1
    c504:	e7e7      	b.n	c4d6 <cbpprintf_external+0x2a>
}
    c506:	f06f 0015 	mvn.w	r0, #21
    c50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000c50e <is_ptr>:
{
    c50e:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
    c510:	2500      	movs	r5, #0
{
    c512:	4602      	mov	r2, r0
	bool mod = false;
    c514:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
    c516:	4614      	mov	r4, r2
    c518:	f814 3b01 	ldrb.w	r3, [r4], #1
    c51c:	b90b      	cbnz	r3, c522 <is_ptr+0x14>
					return false;
    c51e:	4618      	mov	r0, r3
    c520:	e009      	b.n	c536 <is_ptr+0x28>
		if (mod) {
    c522:	b198      	cbz	r0, c54c <is_ptr+0x3e>
			if (cnt == n) {
    c524:	428d      	cmp	r5, r1
    c526:	d107      	bne.n	c538 <is_ptr+0x2a>
				if (c == 'p') {
    c528:	2b70      	cmp	r3, #112	; 0x70
    c52a:	d004      	beq.n	c536 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
    c52c:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
    c530:	2a3a      	cmp	r2, #58	; 0x3a
    c532:	d80b      	bhi.n	c54c <is_ptr+0x3e>
					return false;
    c534:	2000      	movs	r0, #0
}
    c536:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
    c538:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
    c53c:	2e3a      	cmp	r6, #58	; 0x3a
    c53e:	d805      	bhi.n	c54c <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
    c540:	7853      	ldrb	r3, [r2, #1]
				cnt++;
    c542:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
    c544:	1c94      	adds	r4, r2, #2
    c546:	2b00      	cmp	r3, #0
    c548:	d0e9      	beq.n	c51e <is_ptr+0x10>
    c54a:	2000      	movs	r0, #0
		if (c == '%') {
    c54c:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
    c54e:	bf08      	it	eq
    c550:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
    c554:	4622      	mov	r2, r4
    c556:	e7de      	b.n	c516 <is_ptr+0x8>

0000c558 <arch_printk_char_out>:
}
    c558:	2000      	movs	r0, #0
    c55a:	4770      	bx	lr

0000c55c <str_out>:
{
    c55c:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    c55e:	688a      	ldr	r2, [r1, #8]
    c560:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    c562:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    c564:	b114      	cbz	r4, c56c <str_out+0x10>
    c566:	684b      	ldr	r3, [r1, #4]
    c568:	4293      	cmp	r3, r2
    c56a:	dc01      	bgt.n	c570 <str_out+0x14>
		ctx->count++;
    c56c:	608d      	str	r5, [r1, #8]
}
    c56e:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    c570:	3b01      	subs	r3, #1
    c572:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    c574:	bf08      	it	eq
    c576:	2200      	moveq	r2, #0
    c578:	608d      	str	r5, [r1, #8]
    c57a:	bf0c      	ite	eq
    c57c:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    c57e:	54a0      	strbne	r0, [r4, r2]
    c580:	e7f5      	b.n	c56e <str_out+0x12>

0000c582 <printk>:
{
    c582:	b40f      	push	{r0, r1, r2, r3}
    c584:	b507      	push	{r0, r1, r2, lr}
    c586:	a904      	add	r1, sp, #16
    c588:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    c58c:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    c58e:	f000 ff14 	bl	d3ba <z_log_vprintk>
}
    c592:	b003      	add	sp, #12
    c594:	f85d eb04 	ldr.w	lr, [sp], #4
    c598:	b004      	add	sp, #16
    c59a:	4770      	bx	lr

0000c59c <snprintk>:
{
    c59c:	b40c      	push	{r2, r3}
    c59e:	b507      	push	{r0, r1, r2, lr}
    c5a0:	ab04      	add	r3, sp, #16
    c5a2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    c5a6:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    c5a8:	f7f5 f9e6 	bl	1978 <vsnprintk>
}
    c5ac:	b003      	add	sp, #12
    c5ae:	f85d eb04 	ldr.w	lr, [sp], #4
    c5b2:	b002      	add	sp, #8
    c5b4:	4770      	bx	lr

0000c5b6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    c5b6:	4604      	mov	r4, r0
    c5b8:	b508      	push	{r3, lr}
    c5ba:	4608      	mov	r0, r1
    c5bc:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    c5be:	461a      	mov	r2, r3
    c5c0:	47a0      	blx	r4
	return z_impl_z_current_get();
    c5c2:	f7ff f927 	bl	b814 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    c5c6:	f7fa fec5 	bl	7354 <z_impl_k_thread_abort>

0000c5ca <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c5ca:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    c5cc:	f013 0307 	ands.w	r3, r3, #7
    c5d0:	d105      	bne.n	c5de <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    c5d2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    c5d4:	2b00      	cmp	r3, #0
    c5d6:	bf0c      	ite	eq
    c5d8:	2000      	moveq	r0, #0
    c5da:	2003      	movne	r0, #3
    c5dc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    c5de:	2b02      	cmp	r3, #2
    c5e0:	d105      	bne.n	c5ee <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    c5e2:	8b40      	ldrh	r0, [r0, #26]
    c5e4:	fab0 f080 	clz	r0, r0
    c5e8:	0940      	lsrs	r0, r0, #5
    c5ea:	0080      	lsls	r0, r0, #2
    c5ec:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    c5ee:	2b01      	cmp	r3, #1
    c5f0:	d105      	bne.n	c5fe <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    c5f2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    c5f4:	2b00      	cmp	r3, #0
    c5f6:	bf0c      	ite	eq
    c5f8:	2000      	moveq	r0, #0
    c5fa:	2005      	movne	r0, #5
    c5fc:	4770      	bx	lr
	int evt = EVT_NOP;
    c5fe:	2000      	movs	r0, #0
}
    c600:	4770      	bx	lr

0000c602 <validate_args>:
{
    c602:	b510      	push	{r4, lr}
    c604:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    c606:	b100      	cbz	r0, c60a <validate_args+0x8>
    c608:	b911      	cbnz	r1, c610 <validate_args+0xe>
		return -EINVAL;
    c60a:	f06f 0015 	mvn.w	r0, #21
}
    c60e:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    c610:	1d08      	adds	r0, r1, #4
    c612:	f000 f895 	bl	c740 <sys_notify_validate>
	if ((rv == 0)
    c616:	2800      	cmp	r0, #0
    c618:	d1f9      	bne.n	c60e <validate_args+0xc>
	    && ((cli->notify.flags
    c61a:	68a3      	ldr	r3, [r4, #8]
    c61c:	2b03      	cmp	r3, #3
    c61e:	d9f6      	bls.n	c60e <validate_args+0xc>
    c620:	e7f3      	b.n	c60a <validate_args+0x8>

0000c622 <notify_one>:
{
    c622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c626:	460d      	mov	r5, r1
    c628:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    c62a:	4619      	mov	r1, r3
    c62c:	1d28      	adds	r0, r5, #4
{
    c62e:	4690      	mov	r8, r2
    c630:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    c632:	f000 f899 	bl	c768 <sys_notify_finalize>
	if (cb) {
    c636:	4604      	mov	r4, r0
    c638:	b138      	cbz	r0, c64a <notify_one+0x28>
		cb(mgr, cli, state, res);
    c63a:	4633      	mov	r3, r6
    c63c:	4642      	mov	r2, r8
    c63e:	4629      	mov	r1, r5
    c640:	4638      	mov	r0, r7
    c642:	46a4      	mov	ip, r4
}
    c644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    c648:	4760      	bx	ip
}
    c64a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c64e <transition_complete>:
{
    c64e:	b410      	push	{r4}
	__asm__ volatile(
    c650:	f04f 0420 	mov.w	r4, #32
    c654:	f3ef 8211 	mrs	r2, BASEPRI
    c658:	f384 8812 	msr	BASEPRI_MAX, r4
    c65c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    c660:	6141      	str	r1, [r0, #20]
}
    c662:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    c664:	2101      	movs	r1, #1
    c666:	f7f5 b99d 	b.w	19a4 <process_event>

0000c66a <onoff_manager_init>:
{
    c66a:	b538      	push	{r3, r4, r5, lr}
    c66c:	460c      	mov	r4, r1
	if ((mgr == NULL)
    c66e:	4605      	mov	r5, r0
    c670:	b158      	cbz	r0, c68a <onoff_manager_init+0x20>
	    || (transitions == NULL)
    c672:	b151      	cbz	r1, c68a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    c674:	680b      	ldr	r3, [r1, #0]
    c676:	b143      	cbz	r3, c68a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    c678:	684b      	ldr	r3, [r1, #4]
    c67a:	b133      	cbz	r3, c68a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    c67c:	221c      	movs	r2, #28
    c67e:	2100      	movs	r1, #0
    c680:	f002 fb18 	bl	ecb4 <memset>
    c684:	612c      	str	r4, [r5, #16]
	return 0;
    c686:	2000      	movs	r0, #0
}
    c688:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    c68a:	f06f 0015 	mvn.w	r0, #21
    c68e:	e7fb      	b.n	c688 <onoff_manager_init+0x1e>

0000c690 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    c690:	b570      	push	{r4, r5, r6, lr}
    c692:	4605      	mov	r5, r0
    c694:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    c696:	f7ff ffb4 	bl	c602 <validate_args>

	if (rv < 0) {
    c69a:	1e04      	subs	r4, r0, #0
    c69c:	db15      	blt.n	c6ca <onoff_request+0x3a>
    c69e:	f04f 0320 	mov.w	r3, #32
    c6a2:	f3ef 8211 	mrs	r2, BASEPRI
    c6a6:	f383 8812 	msr	BASEPRI_MAX, r3
    c6aa:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    c6ae:	8b6b      	ldrh	r3, [r5, #26]
    c6b0:	8b2c      	ldrh	r4, [r5, #24]
    c6b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c6b6:	428b      	cmp	r3, r1
    c6b8:	f004 0407 	and.w	r4, r4, #7
    c6bc:	d107      	bne.n	c6ce <onoff_request+0x3e>
	__asm__ volatile(
    c6be:	f382 8811 	msr	BASEPRI, r2
    c6c2:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    c6c6:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    c6ca:	4620      	mov	r0, r4
    c6cc:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    c6ce:	2c02      	cmp	r4, #2
    c6d0:	d10c      	bne.n	c6ec <onoff_request+0x5c>
		mgr->refs += 1U;
    c6d2:	3301      	adds	r3, #1
    c6d4:	836b      	strh	r3, [r5, #26]
    c6d6:	f382 8811 	msr	BASEPRI, r2
    c6da:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    c6de:	2300      	movs	r3, #0
    c6e0:	4622      	mov	r2, r4
    c6e2:	4631      	mov	r1, r6
    c6e4:	4628      	mov	r0, r5
    c6e6:	f7ff ff9c 	bl	c622 <notify_one>
    c6ea:	e7ee      	b.n	c6ca <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    c6ec:	2c06      	cmp	r4, #6
    c6ee:	d814      	bhi.n	c71a <onoff_request+0x8a>
    c6f0:	e8df f004 	tbb	[pc, r4]
    c6f4:	13131304 	.word	0x13131304
    c6f8:	1a04      	.short	0x1a04
    c6fa:	04          	.byte	0x04
    c6fb:	00          	.byte	0x00
	parent->next = child;
    c6fc:	2300      	movs	r3, #0
    c6fe:	6033      	str	r3, [r6, #0]
	return list->tail;
    c700:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    c702:	b93b      	cbnz	r3, c714 <onoff_request+0x84>
	list->head = node;
    c704:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    c708:	b9ac      	cbnz	r4, c736 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    c70a:	2102      	movs	r1, #2
    c70c:	4628      	mov	r0, r5
    c70e:	f7f5 f949 	bl	19a4 <process_event>
    c712:	e7da      	b.n	c6ca <onoff_request+0x3a>
	parent->next = child;
    c714:	601e      	str	r6, [r3, #0]
	list->tail = node;
    c716:	606e      	str	r6, [r5, #4]
}
    c718:	e7f6      	b.n	c708 <onoff_request+0x78>
    c71a:	f382 8811 	msr	BASEPRI, r2
    c71e:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    c722:	f06f 0404 	mvn.w	r4, #4
    c726:	e7d0      	b.n	c6ca <onoff_request+0x3a>
    c728:	f382 8811 	msr	BASEPRI, r2
    c72c:	f3bf 8f6f 	isb	sy
    c730:	f06f 0485 	mvn.w	r4, #133	; 0x85
    c734:	e7c9      	b.n	c6ca <onoff_request+0x3a>
    c736:	f382 8811 	msr	BASEPRI, r2
    c73a:	f3bf 8f6f 	isb	sy
		if (notify) {
    c73e:	e7c4      	b.n	c6ca <onoff_request+0x3a>

0000c740 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    c740:	4603      	mov	r3, r0
    c742:	b140      	cbz	r0, c756 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    c744:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    c746:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    c74a:	2a02      	cmp	r2, #2
    c74c:	d006      	beq.n	c75c <sys_notify_validate+0x1c>
    c74e:	2a03      	cmp	r2, #3
    c750:	d004      	beq.n	c75c <sys_notify_validate+0x1c>
    c752:	2a01      	cmp	r2, #1
    c754:	d005      	beq.n	c762 <sys_notify_validate+0x22>
    c756:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
    c75a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
    c75c:	681a      	ldr	r2, [r3, #0]
    c75e:	2a00      	cmp	r2, #0
    c760:	d0f9      	beq.n	c756 <sys_notify_validate+0x16>
		notify->result = 0;
    c762:	2000      	movs	r0, #0
    c764:	6098      	str	r0, [r3, #8]
    c766:	4770      	bx	lr

0000c768 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    c768:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    c76a:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    c76c:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    c76e:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    c772:	2a02      	cmp	r2, #2
{
    c774:	4603      	mov	r3, r0
	switch (method) {
    c776:	f04f 0400 	mov.w	r4, #0
    c77a:	d007      	beq.n	c78c <sys_notify_finalize+0x24>
    c77c:	2a03      	cmp	r2, #3
    c77e:	d002      	beq.n	c786 <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    c780:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
    c782:	2000      	movs	r0, #0
    c784:	e001      	b.n	c78a <sys_notify_finalize+0x22>
		rv = notify->method.callback;
    c786:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    c788:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    c78a:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
    c78c:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    c78e:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    c790:	2800      	cmp	r0, #0
    c792:	d0f6      	beq.n	c782 <sys_notify_finalize+0x1a>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    c794:	f7ff fb12 	bl	bdbc <z_impl_k_poll_signal_raise>
    c798:	e7f3      	b.n	c782 <sys_notify_finalize+0x1a>

0000c79a <_ldiv5>:
	uint32_t v_lo = *v;
    c79a:	e9d0 2100 	ldrd	r2, r1, [r0]
{
    c79e:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
    c7a0:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
    c7a4:	fba2 2403 	umull	r2, r4, r2, r3
    c7a8:	18d5      	adds	r5, r2, r3
    c7aa:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
    c7ae:	fba1 1303 	umull	r1, r3, r1, r3
    c7b2:	1852      	adds	r2, r2, r1
    c7b4:	eb44 0403 	adc.w	r4, r4, r3
    c7b8:	1952      	adds	r2, r2, r5
    c7ba:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
    c7be:	1889      	adds	r1, r1, r2
    c7c0:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
    c7c4:	e9c0 1300 	strd	r1, r3, [r0]
}
    c7c8:	bd30      	pop	{r4, r5, pc}

0000c7ca <_get_digit>:
{
    c7ca:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
    c7cc:	680a      	ldr	r2, [r1, #0]
    c7ce:	2a00      	cmp	r2, #0
{
    c7d0:	4603      	mov	r3, r0
	if (*digit_count > 0) {
    c7d2:	dd0f      	ble.n	c7f4 <_get_digit+0x2a>
		--*digit_count;
    c7d4:	3a01      	subs	r2, #1
    c7d6:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
    c7d8:	681a      	ldr	r2, [r3, #0]
    c7da:	6844      	ldr	r4, [r0, #4]
    c7dc:	200a      	movs	r0, #10
    c7de:	fba2 1200 	umull	r1, r2, r2, r0
    c7e2:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
    c7e6:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
    c7e8:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
    c7ec:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
    c7f0:	3030      	adds	r0, #48	; 0x30
}
    c7f2:	bd10      	pop	{r4, pc}
		rval = '0';
    c7f4:	2030      	movs	r0, #48	; 0x30
    c7f6:	e7fc      	b.n	c7f2 <_get_digit+0x28>

0000c7f8 <encode_uint>:
{
    c7f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c7fc:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    c7fe:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    c800:	2b6f      	cmp	r3, #111	; 0x6f
{
    c802:	4680      	mov	r8, r0
    c804:	460f      	mov	r7, r1
    c806:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    c808:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    c80c:	d029      	beq.n	c862 <encode_uint+0x6a>
    c80e:	d824      	bhi.n	c85a <encode_uint+0x62>
		return 10;
    c810:	2b58      	cmp	r3, #88	; 0x58
    c812:	bf0c      	ite	eq
    c814:	2610      	moveq	r6, #16
    c816:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    c818:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    c81c:	4632      	mov	r2, r6
    c81e:	2300      	movs	r3, #0
    c820:	4640      	mov	r0, r8
    c822:	4639      	mov	r1, r7
    c824:	f7f3 fc5a 	bl	dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c828:	2a09      	cmp	r2, #9
    c82a:	b2d4      	uxtb	r4, r2
    c82c:	d81e      	bhi.n	c86c <encode_uint+0x74>
    c82e:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    c830:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c832:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    c834:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c838:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    c83c:	d301      	bcc.n	c842 <encode_uint+0x4a>
    c83e:	45d1      	cmp	r9, sl
    c840:	d811      	bhi.n	c866 <encode_uint+0x6e>
	if (conv->flag_hash) {
    c842:	782b      	ldrb	r3, [r5, #0]
    c844:	069b      	lsls	r3, r3, #26
    c846:	d505      	bpl.n	c854 <encode_uint+0x5c>
		if (radix == 8) {
    c848:	2e08      	cmp	r6, #8
    c84a:	d115      	bne.n	c878 <encode_uint+0x80>
			conv->altform_0 = true;
    c84c:	78ab      	ldrb	r3, [r5, #2]
    c84e:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    c852:	70ab      	strb	r3, [r5, #2]
}
    c854:	4648      	mov	r0, r9
    c856:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    c85a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    c85e:	2b70      	cmp	r3, #112	; 0x70
    c860:	e7d7      	b.n	c812 <encode_uint+0x1a>
	switch (specifier) {
    c862:	2608      	movs	r6, #8
    c864:	e7d8      	b.n	c818 <encode_uint+0x20>
		value /= radix;
    c866:	4680      	mov	r8, r0
    c868:	460f      	mov	r7, r1
    c86a:	e7d7      	b.n	c81c <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c86c:	f1bb 0f19 	cmp.w	fp, #25
    c870:	bf94      	ite	ls
    c872:	3437      	addls	r4, #55	; 0x37
    c874:	3457      	addhi	r4, #87	; 0x57
    c876:	e7db      	b.n	c830 <encode_uint+0x38>
		} else if (radix == 16) {
    c878:	2e10      	cmp	r6, #16
    c87a:	d1eb      	bne.n	c854 <encode_uint+0x5c>
			conv->altform_0c = true;
    c87c:	78ab      	ldrb	r3, [r5, #2]
    c87e:	f043 0310 	orr.w	r3, r3, #16
    c882:	e7e6      	b.n	c852 <encode_uint+0x5a>

0000c884 <outs>:
{
    c884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c888:	4607      	mov	r7, r0
    c88a:	4688      	mov	r8, r1
    c88c:	4615      	mov	r5, r2
    c88e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    c890:	4614      	mov	r4, r2
    c892:	42b4      	cmp	r4, r6
    c894:	d305      	bcc.n	c8a2 <outs+0x1e>
    c896:	b10e      	cbz	r6, c89c <outs+0x18>
	return (int)count;
    c898:	1b60      	subs	r0, r4, r5
    c89a:	e008      	b.n	c8ae <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    c89c:	7823      	ldrb	r3, [r4, #0]
    c89e:	2b00      	cmp	r3, #0
    c8a0:	d0fa      	beq.n	c898 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    c8a2:	f814 0b01 	ldrb.w	r0, [r4], #1
    c8a6:	4641      	mov	r1, r8
    c8a8:	47b8      	blx	r7
		if (rc < 0) {
    c8aa:	2800      	cmp	r0, #0
    c8ac:	daf1      	bge.n	c892 <outs+0xe>
}
    c8ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c8b2 <ring_buf_put_claim>:

#include <zephyr/sys/ring_buffer.h>
#include <string.h>

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    c8b2:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t free_space, wrap_size;
	int32_t base;

	base = buf->put_base;
    c8b4:	68c6      	ldr	r6, [r0, #12]
	wrap_size = buf->put_head - base;
    c8b6:	6845      	ldr	r5, [r0, #4]
	if (unlikely(wrap_size >= buf->size)) {
    c8b8:	69c3      	ldr	r3, [r0, #28]
	wrap_size = buf->put_head - base;
    c8ba:	1baf      	subs	r7, r5, r6
{
    c8bc:	4604      	mov	r4, r0
 *
 * @return Ring buffer free space (in bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->put_head - buf->get_tail);
    c8be:	6940      	ldr	r0, [r0, #20]
	if (unlikely(wrap_size >= buf->size)) {
    c8c0:	42bb      	cmp	r3, r7
		/* put_base is not yet adjusted */
		wrap_size -= buf->size;
    c8c2:	bf98      	it	ls
    c8c4:	1aff      	subls	r7, r7, r3
    c8c6:	eba5 0000 	sub.w	r0, r5, r0
{
    c8ca:	4694      	mov	ip, r2
		base += buf->size;
    c8cc:	bf98      	it	ls
    c8ce:	18f6      	addls	r6, r6, r3
    c8d0:	1a1a      	subs	r2, r3, r0
	}
	wrap_size = buf->size - wrap_size;
    c8d2:	1bd8      	subs	r0, r3, r7

	free_space = ring_buf_space_get(buf);
	size = MIN(size, free_space);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->put_head - base];
    c8d4:	6823      	ldr	r3, [r4, #0]
    c8d6:	1bad      	subs	r5, r5, r6
	size = MIN(size, free_space);
    c8d8:	4562      	cmp	r2, ip
	*data = &buf->buffer[buf->put_head - base];
    c8da:	442b      	add	r3, r5
	size = MIN(size, free_space);
    c8dc:	bf28      	it	cs
    c8de:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->put_head - base];
    c8e0:	600b      	str	r3, [r1, #0]
	buf->put_head += size;
    c8e2:	6863      	ldr	r3, [r4, #4]
	size = MIN(size, wrap_size);
    c8e4:	4290      	cmp	r0, r2
    c8e6:	bf28      	it	cs
    c8e8:	4610      	movcs	r0, r2
	buf->put_head += size;
    c8ea:	4403      	add	r3, r0
    c8ec:	6063      	str	r3, [r4, #4]

	return size;
}
    c8ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c8f0 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->put_head - buf->put_tail;
    c8f0:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    c8f4:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
    c8f6:	428a      	cmp	r2, r1
    c8f8:	d30c      	bcc.n	c914 <ring_buf_put_finish+0x24>
		return -EINVAL;
	}

	buf->put_tail += size;
    c8fa:	4419      	add	r1, r3
	buf->put_head = buf->put_tail;

	wrap_size = buf->put_tail - buf->put_base;
    c8fc:	68c3      	ldr	r3, [r0, #12]
	if (unlikely(wrap_size >= buf->size)) {
    c8fe:	69c2      	ldr	r2, [r0, #28]
	buf->put_head = buf->put_tail;
    c900:	e9c0 1101 	strd	r1, r1, [r0, #4]
	wrap_size = buf->put_tail - buf->put_base;
    c904:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
    c906:	428a      	cmp	r2, r1
    c908:	d901      	bls.n	c90e <ring_buf_put_finish+0x1e>
		/* we wrapped: adjust put_base */
		buf->put_base += buf->size;
	}

	return 0;
    c90a:	2000      	movs	r0, #0
    c90c:	4770      	bx	lr
		buf->put_base += buf->size;
    c90e:	4413      	add	r3, r2
    c910:	60c3      	str	r3, [r0, #12]
    c912:	e7fa      	b.n	c90a <ring_buf_put_finish+0x1a>
		return -EINVAL;
    c914:	f06f 0015 	mvn.w	r0, #21
}
    c918:	4770      	bx	lr

0000c91a <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
    c91a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c91e:	4680      	mov	r8, r0
    c920:	460e      	mov	r6, r1
    c922:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    c924:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    c926:	462a      	mov	r2, r5
    c928:	a901      	add	r1, sp, #4
    c92a:	4640      	mov	r0, r8
    c92c:	f7ff ffc1 	bl	c8b2 <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
    c930:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
    c932:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    c934:	4602      	mov	r2, r0
    c936:	9801      	ldr	r0, [sp, #4]
    c938:	f002 f9b1 	bl	ec9e <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
    c93c:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
    c93e:	4427      	add	r7, r4
		data += partial_size;
    c940:	4426      	add	r6, r4
	} while (size && partial_size);
    c942:	d001      	beq.n	c948 <ring_buf_put+0x2e>
    c944:	2c00      	cmp	r4, #0
    c946:	d1ee      	bne.n	c926 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
    c948:	4639      	mov	r1, r7
    c94a:	4640      	mov	r0, r8
    c94c:	f7ff ffd0 	bl	c8f0 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
    c950:	4638      	mov	r0, r7
    c952:	b002      	add	sp, #8
    c954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c958 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    c958:	b5f0      	push	{r4, r5, r6, r7, lr}
    c95a:	4604      	mov	r4, r0
	uint32_t available_size, wrap_size;
	int32_t base;

	base = buf->get_base;
    c95c:	6986      	ldr	r6, [r0, #24]
	wrap_size = buf->get_head - base;
    c95e:	6905      	ldr	r5, [r0, #16]
	if (unlikely(wrap_size >= buf->size)) {
    c960:	69c0      	ldr	r0, [r0, #28]
 *
 * @return Ring buffer space used (in bytes).
 */
static inline uint32_t ring_buf_size_get(struct ring_buf *buf)
{
	return buf->put_tail - buf->get_head;
    c962:	68a3      	ldr	r3, [r4, #8]
	wrap_size = buf->get_head - base;
    c964:	1baf      	subs	r7, r5, r6
	if (unlikely(wrap_size >= buf->size)) {
    c966:	42b8      	cmp	r0, r7
{
    c968:	4694      	mov	ip, r2
		/* get_base is not yet adjusted */
		wrap_size -= buf->size;
		base += buf->size;
    c96a:	bf98      	it	ls
    c96c:	1836      	addls	r6, r6, r0
    c96e:	eba3 0205 	sub.w	r2, r3, r5

	available_size = ring_buf_size_get(buf);
	size = MIN(size, available_size);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->get_head - base];
    c972:	6823      	ldr	r3, [r4, #0]
    c974:	eba5 0506 	sub.w	r5, r5, r6
		wrap_size -= buf->size;
    c978:	bf98      	it	ls
    c97a:	1a3f      	subls	r7, r7, r0
	*data = &buf->buffer[buf->get_head - base];
    c97c:	442b      	add	r3, r5
	size = MIN(size, available_size);
    c97e:	4562      	cmp	r2, ip
	wrap_size = buf->size - wrap_size;
    c980:	eba0 0007 	sub.w	r0, r0, r7
	size = MIN(size, available_size);
    c984:	bf28      	it	cs
    c986:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->get_head - base];
    c988:	600b      	str	r3, [r1, #0]
	buf->get_head += size;
    c98a:	6923      	ldr	r3, [r4, #16]
	size = MIN(size, wrap_size);
    c98c:	4290      	cmp	r0, r2
    c98e:	bf28      	it	cs
    c990:	4610      	movcs	r0, r2
	buf->get_head += size;
    c992:	4403      	add	r3, r0
    c994:	6123      	str	r3, [r4, #16]

	return size;
}
    c996:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c998 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->get_head - buf->get_tail;
    c998:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    c99c:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
    c99e:	428a      	cmp	r2, r1
    c9a0:	d30c      	bcc.n	c9bc <ring_buf_get_finish+0x24>
		return -EINVAL;
	}

	buf->get_tail += size;
    c9a2:	4419      	add	r1, r3
	buf->get_head = buf->get_tail;

	wrap_size = buf->get_tail - buf->get_base;
	if (unlikely(wrap_size >= buf->size)) {
    c9a4:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
	buf->get_head = buf->get_tail;
    c9a8:	e9c0 1104 	strd	r1, r1, [r0, #16]
	wrap_size = buf->get_tail - buf->get_base;
    c9ac:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
    c9ae:	428a      	cmp	r2, r1
    c9b0:	d901      	bls.n	c9b6 <ring_buf_get_finish+0x1e>
		/* we wrapped: adjust get_base */
		buf->get_base += buf->size;
	}

	return 0;
    c9b2:	2000      	movs	r0, #0
    c9b4:	4770      	bx	lr
		buf->get_base += buf->size;
    c9b6:	4413      	add	r3, r2
    c9b8:	6183      	str	r3, [r0, #24]
    c9ba:	e7fa      	b.n	c9b2 <ring_buf_get_finish+0x1a>
		return -EINVAL;
    c9bc:	f06f 0015 	mvn.w	r0, #21
}
    c9c0:	4770      	bx	lr

0000c9c2 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
    c9c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c9c6:	4680      	mov	r8, r0
    c9c8:	460d      	mov	r5, r1
    c9ca:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    c9cc:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
    c9ce:	4632      	mov	r2, r6
    c9d0:	a901      	add	r1, sp, #4
    c9d2:	4640      	mov	r0, r8
    c9d4:	f7ff ffc0 	bl	c958 <ring_buf_get_claim>
    c9d8:	4604      	mov	r4, r0
		if (data) {
    c9da:	b12d      	cbz	r5, c9e8 <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
    c9dc:	4602      	mov	r2, r0
    c9de:	9901      	ldr	r1, [sp, #4]
    c9e0:	4628      	mov	r0, r5
    c9e2:	f002 f95c 	bl	ec9e <memcpy>
			data += partial_size;
    c9e6:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
    c9e8:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
    c9ea:	4427      	add	r7, r4
	} while (size && partial_size);
    c9ec:	d001      	beq.n	c9f2 <ring_buf_get+0x30>
    c9ee:	2c00      	cmp	r4, #0
    c9f0:	d1ed      	bne.n	c9ce <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
    c9f2:	4639      	mov	r1, r7
    c9f4:	4640      	mov	r0, r8
    c9f6:	f7ff ffcf 	bl	c998 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
    c9fa:	4638      	mov	r0, r7
    c9fc:	b002      	add	sp, #8
    c9fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ca02 <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
    ca02:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
    ca04:	6903      	ldr	r3, [r0, #16]
{
    ca06:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
    ca08:	f013 0008 	ands.w	r0, r3, #8
    ca0c:	d109      	bne.n	ca22 <free_space+0x20>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    ca0e:	6813      	ldr	r3, [r2, #0]
    ca10:	68d4      	ldr	r4, [r2, #12]
    ca12:	429c      	cmp	r4, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
    ca14:	bf97      	itett	ls
    ca16:	6a12      	ldrls	r2, [r2, #32]
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
    ca18:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
    ca1a:	1ad3      	subls	r3, r2, r3

	return true;
    ca1c:	2001      	movls	r0, #1
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
    ca1e:	600b      	str	r3, [r1, #0]
}
    ca20:	bd10      	pop	{r4, pc}
    ca22:	2300      	movs	r3, #0
		return false;
    ca24:	4618      	mov	r0, r3
    ca26:	e7fa      	b.n	ca1e <free_space+0x1c>

0000ca28 <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    ca28:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
    ca2a:	a901      	add	r1, sp, #4
{
    ca2c:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
    ca2e:	f7ff ffe8 	bl	ca02 <free_space>
    ca32:	b120      	cbz	r0, ca3e <get_usage+0x16>
		f += (buffer->rd_idx - 1);
    ca34:	9b01      	ldr	r3, [sp, #4]
    ca36:	68e2      	ldr	r2, [r4, #12]
    ca38:	3b01      	subs	r3, #1
    ca3a:	4413      	add	r3, r2
    ca3c:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    ca3e:	6a20      	ldr	r0, [r4, #32]
    ca40:	9b01      	ldr	r3, [sp, #4]
    ca42:	1ac0      	subs	r0, r0, r3
}
    ca44:	3801      	subs	r0, #1
    ca46:	b002      	add	sp, #8
    ca48:	bd10      	pop	{r4, pc}

0000ca4a <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
    ca4a:	b510      	push	{r4, lr}
    ca4c:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    ca4e:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    ca50:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    ca52:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    ca54:	07d2      	lsls	r2, r2, #31
    ca56:	d502      	bpl.n	ca5e <idx_inc+0x14>
		return i & (buffer->size - 1);
    ca58:	3b01      	subs	r3, #1
    ca5a:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    ca5c:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    ca5e:	4298      	cmp	r0, r3
    ca60:	bf28      	it	cs
    ca62:	1ac0      	subcs	r0, r0, r3
    ca64:	e7fa      	b.n	ca5c <idx_inc+0x12>

0000ca66 <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
    ca66:	b510      	push	{r4, lr}
    ca68:	4604      	mov	r4, r0
    ca6a:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    ca6c:	68c1      	ldr	r1, [r0, #12]
    ca6e:	f7ff ffec 	bl	ca4a <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
    ca72:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    ca74:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
    ca76:	f023 0308 	bic.w	r3, r3, #8
    ca7a:	6123      	str	r3, [r4, #16]
}
    ca7c:	bd10      	pop	{r4, pc}

0000ca7e <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    ca7e:	b538      	push	{r3, r4, r5, lr}
    ca80:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    ca82:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
    ca84:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    ca86:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    ca88:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    ca8c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
{
    ca90:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    ca92:	6801      	ldr	r1, [r0, #0]
    ca94:	462a      	mov	r2, r5
    ca96:	f7ff ffd8 	bl	ca4a <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    ca9a:	68e3      	ldr	r3, [r4, #12]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    ca9c:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    ca9e:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    caa0:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
    caa2:	bf02      	ittt	eq
    caa4:	6923      	ldreq	r3, [r4, #16]
    caa6:	f043 0308 	orreq.w	r3, r3, #8
    caaa:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    caac:	462a      	mov	r2, r5
    caae:	4620      	mov	r0, r4
    cab0:	f7ff ffcb 	bl	ca4a <idx_inc>
    cab4:	6060      	str	r0, [r4, #4]
}
    cab6:	bd38      	pop	{r3, r4, r5, pc}

0000cab8 <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
    cab8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    cabc:	68c7      	ldr	r7, [r0, #12]
    cabe:	69c6      	ldr	r6, [r0, #28]
{
    cac0:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
    cac2:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
    cac6:	f003 0303 	and.w	r3, r3, #3
    caca:	2b02      	cmp	r3, #2
{
    cacc:	4604      	mov	r4, r0
    cace:	4688      	mov	r8, r1
    cad0:	4691      	mov	r9, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    cad2:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    cad6:	f04f 0300 	mov.w	r3, #0
    cada:	d009      	beq.n	caf0 <drop_item_locked+0x38>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
    cadc:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
    cade:	f8cb 3000 	str.w	r3, [fp]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
    cae2:	6923      	ldr	r3, [r4, #16]
    cae4:	0799      	lsls	r1, r3, #30
    cae6:	d410      	bmi.n	cb0a <drop_item_locked+0x52>
		return false;
    cae8:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
    caea:	b003      	add	sp, #12
    caec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
    caf0:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
    caf4:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
    caf6:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
    caf8:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
    cafc:	d0f1      	beq.n	cae2 <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
    cafe:	f7ff ffb2 	bl	ca66 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    cb02:	68e3      	ldr	r3, [r4, #12]
    cb04:	60a3      	str	r3, [r4, #8]
		return true;
    cb06:	2001      	movs	r0, #1
    cb08:	e7ef      	b.n	caea <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
    cb0a:	69a3      	ldr	r3, [r4, #24]
    cb0c:	4650      	mov	r0, sl
    cb0e:	4798      	blx	r3
	return item->hdr.valid;
    cb10:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	if (!is_valid(item)) {
    cb14:	07da      	lsls	r2, r3, #31
	uint32_t rd_wlen = buffer->get_wlen(item);
    cb16:	4605      	mov	r5, r0
	if (!is_valid(item)) {
    cb18:	d5e6      	bpl.n	cae8 <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
    cb1a:	f013 0302 	ands.w	r3, r3, #2
    cb1e:	d01d      	beq.n	cb5c <drop_item_locked+0xa4>
		if (free_wlen) {
    cb20:	f1b8 0f00 	cmp.w	r8, #0
    cb24:	d003      	beq.n	cb2e <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
    cb26:	4641      	mov	r1, r8
    cb28:	4620      	mov	r0, r4
    cb2a:	f7ff ffa8 	bl	ca7e <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    cb2e:	6861      	ldr	r1, [r4, #4]
    cb30:	462a      	mov	r2, r5
    cb32:	4620      	mov	r0, r4
    cb34:	f7ff ff89 	bl	ca4a <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    cb38:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    cb3c:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    cb3e:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    cb40:	d104      	bne.n	cb4c <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
    cb42:	462a      	mov	r2, r5
    cb44:	4620      	mov	r0, r4
    cb46:	f7ff ff80 	bl	ca4a <idx_inc>
    cb4a:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
    cb4c:	68a3      	ldr	r3, [r4, #8]
    cb4e:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
    cb50:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
    cb52:	6923      	ldr	r3, [r4, #16]
    cb54:	f043 0308 	orr.w	r3, r3, #8
    cb58:	6123      	str	r3, [r4, #16]
    cb5a:	e7d4      	b.n	cb06 <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
    cb5c:	4601      	mov	r1, r0
    cb5e:	4620      	mov	r0, r4
    cb60:	9301      	str	r3, [sp, #4]
    cb62:	f7ff ff80 	bl	ca66 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    cb66:	68e2      	ldr	r2, [r4, #12]
    cb68:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
    cb6a:	f1b8 0f00 	cmp.w	r8, #0
    cb6e:	d004      	beq.n	cb7a <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
    cb70:	6821      	ldr	r1, [r4, #0]
    cb72:	69e2      	ldr	r2, [r4, #28]
    cb74:	9b01      	ldr	r3, [sp, #4]
    cb76:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
    cb7a:	eb05 0208 	add.w	r2, r5, r8
    cb7e:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    cb82:	6821      	ldr	r1, [r4, #0]
    cb84:	4620      	mov	r0, r4
    cb86:	f7ff ff60 	bl	ca4a <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
    cb8a:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    cb8c:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
    cb8e:	f043 0308 	orr.w	r3, r3, #8
    cb92:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
    cb94:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
    cb98:	f36f 0300 	bfc	r3, #0, #1
    cb9c:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
    cba0:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
    cba4:	e7af      	b.n	cb06 <drop_item_locked+0x4e>

0000cba6 <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
    cba6:	b570      	push	{r4, r5, r6, lr}
    cba8:	4604      	mov	r4, r0
    cbaa:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
    cbac:	f7ff ff4d 	bl	ca4a <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
    cbb0:	6823      	ldr	r3, [r4, #0]
    cbb2:	4283      	cmp	r3, r0
    cbb4:	d105      	bne.n	cbc2 <post_drop_action+0x1c>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
    cbb6:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
    cbb8:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
    cbba:	f023 0308 	bic.w	r3, r3, #8
    cbbe:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
    cbc0:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
    cbc2:	69e2      	ldr	r2, [r4, #28]
	union mpsc_pbuf_generic skip = {
    cbc4:	00ab      	lsls	r3, r5, #2
    cbc6:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
    cbca:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
    cbce:	4620      	mov	r0, r4
    cbd0:	6861      	ldr	r1, [r4, #4]
    cbd2:	462a      	mov	r2, r5
    cbd4:	f7ff ff39 	bl	ca4a <idx_inc>
    cbd8:	6060      	str	r0, [r4, #4]
    cbda:	e7f1      	b.n	cbc0 <post_drop_action+0x1a>

0000cbdc <max_utilization_update>:
{
    cbdc:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    cbde:	6903      	ldr	r3, [r0, #16]
    cbe0:	075b      	lsls	r3, r3, #29
{
    cbe2:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    cbe4:	d506      	bpl.n	cbf4 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    cbe6:	6a45      	ldr	r5, [r0, #36]	; 0x24
    cbe8:	f7ff ff1e 	bl	ca28 <get_usage>
    cbec:	4285      	cmp	r5, r0
    cbee:	bf2c      	ite	cs
    cbf0:	6265      	strcs	r5, [r4, #36]	; 0x24
    cbf2:	6260      	strcc	r0, [r4, #36]	; 0x24
}
    cbf4:	bd38      	pop	{r3, r4, r5, pc}

0000cbf6 <mpsc_pbuf_init>:
{
    cbf6:	b538      	push	{r3, r4, r5, lr}
    cbf8:	460d      	mov	r5, r1
    cbfa:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    cbfc:	221c      	movs	r2, #28
    cbfe:	2100      	movs	r1, #0
    cc00:	f002 f858 	bl	ecb4 <memset>
	buffer->get_wlen = cfg->get_wlen;
    cc04:	68eb      	ldr	r3, [r5, #12]
    cc06:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    cc08:	68ab      	ldr	r3, [r5, #8]
    cc0a:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    cc0c:	682b      	ldr	r3, [r5, #0]
    cc0e:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
    cc10:	686b      	ldr	r3, [r5, #4]
    cc12:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
    cc14:	2200      	movs	r2, #0
    cc16:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    cc18:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
    cc1a:	b123      	cbz	r3, cc26 <mpsc_pbuf_init+0x30>
    cc1c:	1e59      	subs	r1, r3, #1
    cc1e:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    cc20:	bf08      	it	eq
    cc22:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
    cc26:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    cc28:	2201      	movs	r2, #1
    cc2a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    cc2e:	2100      	movs	r1, #0
}
    cc30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cc34:	f002 bdd4 	b.w	f7e0 <z_impl_k_sem_init>

0000cc38 <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    cc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cc3c:	b087      	sub	sp, #28
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
    cc3e:	2500      	movs	r5, #0
{
    cc40:	9300      	str	r3, [sp, #0]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
    cc42:	6a03      	ldr	r3, [r0, #32]
	union mpsc_pbuf_generic *dropped_item = NULL;
    cc44:	9503      	str	r5, [sp, #12]
	if (wlen > (buffer->size)) {
    cc46:	428b      	cmp	r3, r1
{
    cc48:	4604      	mov	r4, r0
    cc4a:	460e      	mov	r6, r1
    cc4c:	4692      	mov	sl, r2
	uint32_t tmp_wr_idx_shift = 0;
    cc4e:	9505      	str	r5, [sp, #20]
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
    cc50:	46a9      	mov	r9, r5
	if (wlen > (buffer->size)) {
    cc52:	d33a      	bcc.n	ccca <mpsc_pbuf_alloc+0x92>
	__asm__ volatile(
    cc54:	f04f 0320 	mov.w	r3, #32
    cc58:	f3ef 8b11 	mrs	fp, BASEPRI
    cc5c:	f383 8812 	msr	BASEPRI_MAX, r3
    cc60:	f3bf 8f6f 	isb	sy
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
    cc64:	9a05      	ldr	r2, [sp, #20]
    cc66:	46d8      	mov	r8, fp
    cc68:	b12a      	cbz	r2, cc76 <mpsc_pbuf_alloc+0x3e>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
    cc6a:	4629      	mov	r1, r5
    cc6c:	4620      	mov	r0, r4
    cc6e:	f7ff ff9a 	bl	cba6 <post_drop_action>
			tmp_wr_idx_shift = 0;
    cc72:	2300      	movs	r3, #0
    cc74:	9305      	str	r3, [sp, #20]
		}

		wrap = free_space(buffer, &free_wlen);
    cc76:	a904      	add	r1, sp, #16
    cc78:	4620      	mov	r0, r4
    cc7a:	f7ff fec2 	bl	ca02 <free_space>

		if (free_wlen >= wlen) {
    cc7e:	9904      	ldr	r1, [sp, #16]
    cc80:	42b1      	cmp	r1, r6
		wrap = free_space(buffer, &free_wlen);
    cc82:	4607      	mov	r7, r0
		if (free_wlen >= wlen) {
    cc84:	d32a      	bcc.n	ccdc <mpsc_pbuf_alloc+0xa4>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    cc86:	6822      	ldr	r2, [r4, #0]
			item =
    cc88:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
    cc8a:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    cc8e:	f021 0103 	bic.w	r1, r1, #3
    cc92:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
    cc96:	eb03 0982 	add.w	r9, r3, r2, lsl #2
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    cc9a:	6821      	ldr	r1, [r4, #0]
    cc9c:	4632      	mov	r2, r6
    cc9e:	4620      	mov	r0, r4
    cca0:	f7ff fed3 	bl	ca4a <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    cca4:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    cca6:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    cca8:	4298      	cmp	r0, r3
    ccaa:	d012      	beq.n	ccd2 <mpsc_pbuf_alloc+0x9a>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
    ccac:	2700      	movs	r7, #0
	__asm__ volatile(
    ccae:	f388 8811 	msr	BASEPRI, r8
    ccb2:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
    ccb6:	9903      	ldr	r1, [sp, #12]
    ccb8:	b129      	cbz	r1, ccc6 <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    ccba:	6962      	ldr	r2, [r4, #20]
    ccbc:	b10a      	cbz	r2, ccc2 <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
    ccbe:	4620      	mov	r0, r4
    ccc0:	4790      	blx	r2
			}
			dropped_item = NULL;
    ccc2:	2300      	movs	r3, #0
    ccc4:	9303      	str	r3, [sp, #12]
		}
	} while (cont);
    ccc6:	2f00      	cmp	r7, #0
    ccc8:	d1c4      	bne.n	cc54 <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    ccca:	4648      	mov	r0, r9
    cccc:	b007      	add	sp, #28
    ccce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
    ccd2:	6923      	ldr	r3, [r4, #16]
    ccd4:	f043 0308 	orr.w	r3, r3, #8
    ccd8:	6123      	str	r3, [r4, #16]
    ccda:	e7e7      	b.n	ccac <mpsc_pbuf_alloc+0x74>
		} else if (wrap) {
    ccdc:	b118      	cbz	r0, cce6 <mpsc_pbuf_alloc+0xae>
			add_skip_item(buffer, free_wlen);
    ccde:	4620      	mov	r0, r4
    cce0:	f7ff fecd 	bl	ca7e <add_skip_item>
			cont = true;
    cce4:	e7e3      	b.n	ccae <mpsc_pbuf_alloc+0x76>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    cce6:	9b00      	ldr	r3, [sp, #0]
    cce8:	ea5a 0303 	orrs.w	r3, sl, r3
    ccec:	d01a      	beq.n	cd24 <mpsc_pbuf_alloc+0xec>
    ccee:	9101      	str	r1, [sp, #4]
    ccf0:	f002 fd45 	bl	f77e <k_is_in_isr>
    ccf4:	9901      	ldr	r1, [sp, #4]
    ccf6:	b9a8      	cbnz	r0, cd24 <mpsc_pbuf_alloc+0xec>
    ccf8:	f38b 8811 	msr	BASEPRI, fp
    ccfc:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    cd00:	9b00      	ldr	r3, [sp, #0]
    cd02:	4652      	mov	r2, sl
    cd04:	f104 0028 	add.w	r0, r4, #40	; 0x28
    cd08:	f7fe fa5c 	bl	b1c4 <z_impl_k_sem_take>
	__asm__ volatile(
    cd0c:	f04f 0320 	mov.w	r3, #32
    cd10:	f3ef 8811 	mrs	r8, BASEPRI
    cd14:	f383 8812 	msr	BASEPRI_MAX, r3
    cd18:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
    cd1c:	fab0 f780 	clz	r7, r0
    cd20:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    cd22:	e7c4      	b.n	ccae <mpsc_pbuf_alloc+0x76>
			cont = drop_item_locked(buffer, free_wlen,
    cd24:	ab05      	add	r3, sp, #20
    cd26:	aa03      	add	r2, sp, #12
    cd28:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
    cd2a:	6825      	ldr	r5, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
    cd2c:	f7ff fec4 	bl	cab8 <drop_item_locked>
    cd30:	4607      	mov	r7, r0
    cd32:	e7bc      	b.n	ccae <mpsc_pbuf_alloc+0x76>

0000cd34 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    cd34:	b570      	push	{r4, r5, r6, lr}
    cd36:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    cd38:	6983      	ldr	r3, [r0, #24]
    cd3a:	4608      	mov	r0, r1
{
    cd3c:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    cd3e:	4798      	blx	r3
    cd40:	4602      	mov	r2, r0
    cd42:	f04f 0320 	mov.w	r3, #32
    cd46:	f3ef 8611 	mrs	r6, BASEPRI
    cd4a:	f383 8812 	msr	BASEPRI_MAX, r3
    cd4e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    cd52:	782b      	ldrb	r3, [r5, #0]
    cd54:	f043 0301 	orr.w	r3, r3, #1
    cd58:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    cd5a:	6861      	ldr	r1, [r4, #4]
    cd5c:	4620      	mov	r0, r4
    cd5e:	f7ff fe74 	bl	ca4a <idx_inc>
    cd62:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    cd64:	4620      	mov	r0, r4
    cd66:	f7ff ff39 	bl	cbdc <max_utilization_update>
	__asm__ volatile(
    cd6a:	f386 8811 	msr	BASEPRI, r6
    cd6e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
    cd72:	bd70      	pop	{r4, r5, r6, pc}

0000cd74 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    cd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cd76:	4604      	mov	r4, r0
	__asm__ volatile(
    cd78:	f04f 0320 	mov.w	r3, #32
    cd7c:	f3ef 8611 	mrs	r6, BASEPRI
    cd80:	f383 8812 	msr	BASEPRI_MAX, r3
    cd84:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    cd88:	6923      	ldr	r3, [r4, #16]
    cd8a:	f013 0f08 	tst.w	r3, #8
    cd8e:	68a3      	ldr	r3, [r4, #8]
    cd90:	d102      	bne.n	cd98 <mpsc_pbuf_claim+0x24>
    cd92:	6862      	ldr	r2, [r4, #4]
    cd94:	4293      	cmp	r3, r2
    cd96:	d900      	bls.n	cd9a <mpsc_pbuf_claim+0x26>
		*res = buffer->size - buffer->tmp_rd_idx;
    cd98:	6a22      	ldr	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
    cd9a:	69e1      	ldr	r1, [r4, #28]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    cd9c:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
    cd9e:	b92a      	cbnz	r2, cdac <mpsc_pbuf_claim+0x38>
	__asm__ volatile(
    cda0:	f386 8811 	msr	BASEPRI, r6
    cda4:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
    cda8:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
    cdaa:	e033      	b.n	ce14 <mpsc_pbuf_claim+0xa0>
	return !item->hdr.valid && !item->hdr.busy;
    cdac:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		if (!a || is_invalid(item)) {
    cdb0:	f012 0003 	ands.w	r0, r2, #3
		item = (union mpsc_pbuf_generic *)
    cdb4:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
    cdb8:	d0f2      	beq.n	cda0 <mpsc_pbuf_claim+0x2c>
	if (item->hdr.busy && !item->hdr.valid) {
    cdba:	2802      	cmp	r0, #2
    cdbc:	d103      	bne.n	cdc6 <mpsc_pbuf_claim+0x52>
		return item->skip.len;
    cdbe:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
    cdc2:	08ad      	lsrs	r5, r5, #2
    cdc4:	d105      	bne.n	cdd2 <mpsc_pbuf_claim+0x5e>
    cdc6:	07d0      	lsls	r0, r2, #31
    cdc8:	d412      	bmi.n	cdf0 <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
    cdca:	69a3      	ldr	r3, [r4, #24]
    cdcc:	4638      	mov	r0, r7
    cdce:	4798      	blx	r3
    cdd0:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    cdd2:	68a1      	ldr	r1, [r4, #8]
    cdd4:	462a      	mov	r2, r5
    cdd6:	4620      	mov	r0, r4
    cdd8:	f7ff fe37 	bl	ca4a <idx_inc>
				rd_idx_inc(buffer, inc);
    cddc:	4629      	mov	r1, r5
				buffer->tmp_rd_idx =
    cdde:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
    cde0:	4620      	mov	r0, r4
    cde2:	f7ff fe40 	bl	ca66 <rd_idx_inc>
    cde6:	f386 8811 	msr	BASEPRI, r6
    cdea:	f3bf 8f6f 	isb	sy
	} while (cont);
    cdee:	e7c3      	b.n	cd78 <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
    cdf0:	f042 0202 	orr.w	r2, r2, #2
    cdf4:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
						buffer->get_wlen(item));
    cdf8:	4638      	mov	r0, r7
    cdfa:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
    cdfc:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
    cdfe:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
    ce00:	4629      	mov	r1, r5
						buffer->get_wlen(item));
    ce02:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
    ce04:	4620      	mov	r0, r4
    ce06:	f7ff fe20 	bl	ca4a <idx_inc>
				buffer->tmp_rd_idx =
    ce0a:	60a0      	str	r0, [r4, #8]
    ce0c:	f386 8811 	msr	BASEPRI, r6
    ce10:	f3bf 8f6f 	isb	sy
}
    ce14:	4638      	mov	r0, r7
    ce16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000ce18 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    ce18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ce1a:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    ce1c:	6983      	ldr	r3, [r0, #24]
    ce1e:	4608      	mov	r0, r1
{
    ce20:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    ce22:	4798      	blx	r3
    ce24:	4606      	mov	r6, r0
	__asm__ volatile(
    ce26:	f04f 0320 	mov.w	r3, #32
    ce2a:	f3ef 8711 	mrs	r7, BASEPRI
    ce2e:	f383 8812 	msr	BASEPRI_MAX, r3
    ce32:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    ce36:	782b      	ldrb	r3, [r5, #0]
    ce38:	f36f 0300 	bfc	r3, #0, #1
    ce3c:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    ce3e:	6923      	ldr	r3, [r4, #16]
    ce40:	079b      	lsls	r3, r3, #30
    ce42:	d505      	bpl.n	ce50 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    ce44:	68e2      	ldr	r2, [r4, #12]
    ce46:	69e3      	ldr	r3, [r4, #28]
    ce48:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    ce4c:	429d      	cmp	r5, r3
    ce4e:	d11a      	bne.n	ce86 <mpsc_pbuf_free+0x6e>
		witem->hdr.busy = 0;
    ce50:	782b      	ldrb	r3, [r5, #0]
    ce52:	f36f 0341 	bfc	r3, #1, #1
    ce56:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    ce58:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    ce5c:	4299      	cmp	r1, r3
    ce5e:	d104      	bne.n	ce6a <mpsc_pbuf_free+0x52>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
    ce60:	4632      	mov	r2, r6
    ce62:	4620      	mov	r0, r4
    ce64:	f7ff fdf1 	bl	ca4a <idx_inc>
    ce68:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
    ce6a:	4631      	mov	r1, r6
    ce6c:	4620      	mov	r0, r4
    ce6e:	f7ff fdfa 	bl	ca66 <rd_idx_inc>
	__asm__ volatile(
    ce72:	f387 8811 	msr	BASEPRI, r7
    ce76:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    ce7a:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    ce7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ce82:	f7fe b979 	b.w	b178 <z_impl_k_sem_give>
		witem->skip.len = wlen;
    ce86:	682b      	ldr	r3, [r5, #0]
    ce88:	f360 039f 	bfi	r3, r0, #2, #30
    ce8c:	602b      	str	r3, [r5, #0]
    ce8e:	e7f0      	b.n	ce72 <mpsc_pbuf_free+0x5a>

0000ce90 <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    ce90:	6902      	ldr	r2, [r0, #16]
    ce92:	6883      	ldr	r3, [r0, #8]
    ce94:	0712      	lsls	r2, r2, #28
    ce96:	d402      	bmi.n	ce9e <mpsc_pbuf_is_pending+0xe>
    ce98:	6842      	ldr	r2, [r0, #4]
    ce9a:	429a      	cmp	r2, r3
    ce9c:	d200      	bcs.n	cea0 <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
    ce9e:	6a02      	ldr	r2, [r0, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    cea0:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    cea2:	1e18      	subs	r0, r3, #0
    cea4:	bf18      	it	ne
    cea6:	2001      	movne	r0, #1
    cea8:	4770      	bx	lr

0000ceaa <mpsc_pbuf_get_utilization>:

void mpsc_pbuf_get_utilization(struct mpsc_pbuf_buffer *buffer,
			       uint32_t *size, uint32_t *now)
{
    ceaa:	b510      	push	{r4, lr}
	/* One byte is left for full/empty distinction. */
	*size = (buffer->size - 1) * sizeof(int);
    ceac:	6a03      	ldr	r3, [r0, #32]
    ceae:	3b01      	subs	r3, #1
    ceb0:	009b      	lsls	r3, r3, #2
    ceb2:	600b      	str	r3, [r1, #0]
{
    ceb4:	4614      	mov	r4, r2
	*now = get_usage(buffer) * sizeof(int);
    ceb6:	f7ff fdb7 	bl	ca28 <get_usage>
    ceba:	0080      	lsls	r0, r0, #2
    cebc:	6020      	str	r0, [r4, #0]
}
    cebe:	bd10      	pop	{r4, pc}

0000cec0 <mpsc_pbuf_get_max_utilization>:

int mpsc_pbuf_get_max_utilization(struct mpsc_pbuf_buffer *buffer, uint32_t *max)
{

	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    cec0:	6903      	ldr	r3, [r0, #16]
    cec2:	075b      	lsls	r3, r3, #29
		return -ENOTSUP;
	}

	*max = buffer->max_usage * sizeof(int);
    cec4:	bf41      	itttt	mi
    cec6:	6a43      	ldrmi	r3, [r0, #36]	; 0x24
    cec8:	009b      	lslmi	r3, r3, #2
	return 0;
    ceca:	2000      	movmi	r0, #0
	*max = buffer->max_usage * sizeof(int);
    cecc:	600b      	strmi	r3, [r1, #0]
		return -ENOTSUP;
    cece:	bf58      	it	pl
    ced0:	f06f 0085 	mvnpl.w	r0, #133	; 0x85
}
    ced4:	4770      	bx	lr

0000ced6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    ced6:	4770      	bx	lr

0000ced8 <nvs_flash_rd>:
{
    ced8:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
    ceda:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
    cedc:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
    cede:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
    cee0:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
    cee2:	fa16 f181 	uxtah	r1, r6, r1
    cee6:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
    ceea:	6884      	ldr	r4, [r0, #8]
    ceec:	6824      	ldr	r4, [r4, #0]
    ceee:	46a4      	mov	ip, r4
}
    cef0:	bc70      	pop	{r4, r5, r6}
    cef2:	4760      	bx	ip

0000cef4 <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
    cef4:	680b      	ldr	r3, [r1, #0]
    cef6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    cefa:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
    cefc:	89c0      	ldrh	r0, [r0, #14]
    cefe:	0c1a      	lsrs	r2, r3, #16
    cf00:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
    cf04:	bf04      	itt	eq
    cf06:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
    cf0a:	600b      	streq	r3, [r1, #0]
}
    cf0c:	4770      	bx	lr

0000cf0e <nvs_flash_block_cmp>:
{
    cf0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cf12:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    cf14:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    cf16:	681d      	ldr	r5, [r3, #0]
    cf18:	426d      	negs	r5, r5
{
    cf1a:	b089      	sub	sp, #36	; 0x24
    cf1c:	4681      	mov	r9, r0
    cf1e:	460e      	mov	r6, r1
    cf20:	4617      	mov	r7, r2
	block_size =
    cf22:	f005 0520 	and.w	r5, r5, #32
	while (len) {
    cf26:	b91c      	cbnz	r4, cf30 <nvs_flash_block_cmp+0x22>
	return 0;
    cf28:	4620      	mov	r0, r4
}
    cf2a:	b009      	add	sp, #36	; 0x24
    cf2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
    cf30:	42ac      	cmp	r4, r5
    cf32:	46a0      	mov	r8, r4
    cf34:	bf28      	it	cs
    cf36:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
    cf38:	4643      	mov	r3, r8
    cf3a:	466a      	mov	r2, sp
    cf3c:	4631      	mov	r1, r6
    cf3e:	4648      	mov	r0, r9
    cf40:	f7ff ffca 	bl	ced8 <nvs_flash_rd>
		if (rc) {
    cf44:	2800      	cmp	r0, #0
    cf46:	d1f0      	bne.n	cf2a <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
    cf48:	4642      	mov	r2, r8
    cf4a:	4669      	mov	r1, sp
    cf4c:	4638      	mov	r0, r7
    cf4e:	f001 fe7f 	bl	ec50 <memcmp>
		if (rc) {
    cf52:	b920      	cbnz	r0, cf5e <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
    cf54:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
    cf58:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
    cf5a:	4447      	add	r7, r8
    cf5c:	e7e3      	b.n	cf26 <nvs_flash_block_cmp+0x18>
			return 1;
    cf5e:	2001      	movs	r0, #1
    cf60:	e7e3      	b.n	cf2a <nvs_flash_block_cmp+0x1c>

0000cf62 <nvs_flash_cmp_const>:
{
    cf62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf66:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    cf68:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    cf6a:	681d      	ldr	r5, [r3, #0]
    cf6c:	426d      	negs	r5, r5
{
    cf6e:	b088      	sub	sp, #32
	block_size =
    cf70:	f005 0520 	and.w	r5, r5, #32
{
    cf74:	4607      	mov	r7, r0
    cf76:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
    cf78:	4668      	mov	r0, sp
{
    cf7a:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
    cf7c:	462a      	mov	r2, r5
    cf7e:	f001 fe99 	bl	ecb4 <memset>
	while (len) {
    cf82:	b91c      	cbnz	r4, cf8c <nvs_flash_cmp_const+0x2a>
	return 0;
    cf84:	4620      	mov	r0, r4
}
    cf86:	b008      	add	sp, #32
    cf88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
    cf8c:	42ac      	cmp	r4, r5
    cf8e:	46a0      	mov	r8, r4
    cf90:	bf28      	it	cs
    cf92:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
    cf94:	4643      	mov	r3, r8
    cf96:	466a      	mov	r2, sp
    cf98:	4631      	mov	r1, r6
    cf9a:	4638      	mov	r0, r7
    cf9c:	f7ff ffb7 	bl	cf0e <nvs_flash_block_cmp>
		if (rc) {
    cfa0:	2800      	cmp	r0, #0
    cfa2:	d1f0      	bne.n	cf86 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
    cfa4:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
    cfa8:	4446      	add	r6, r8
    cfaa:	e7ea      	b.n	cf82 <nvs_flash_cmp_const+0x20>

0000cfac <nvs_flash_erase_sector>:
{
    cfac:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
    cfae:	8982      	ldrh	r2, [r0, #12]
    cfb0:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
    cfb2:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
    cfb4:	0c09      	lsrs	r1, r1, #16
{
    cfb6:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
    cfb8:	042d      	lsls	r5, r5, #16
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
    cfba:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
    cfbc:	fb02 3101 	mla	r1, r2, r1, r3
	rc = api->erase(dev, offset, size);
    cfc0:	6883      	ldr	r3, [r0, #8]
    cfc2:	689b      	ldr	r3, [r3, #8]
    cfc4:	4798      	blx	r3
	if (rc) {
    cfc6:	b950      	cbnz	r0, cfde <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
    cfc8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    cfca:	89a3      	ldrh	r3, [r4, #12]
    cfcc:	7912      	ldrb	r2, [r2, #4]
    cfce:	4629      	mov	r1, r5
    cfd0:	4620      	mov	r0, r4
    cfd2:	f7ff ffc6 	bl	cf62 <nvs_flash_cmp_const>
		rc = -ENXIO;
    cfd6:	2800      	cmp	r0, #0
    cfd8:	bf18      	it	ne
    cfda:	f06f 0005 	mvnne.w	r0, #5
}
    cfde:	bd38      	pop	{r3, r4, r5, pc}

0000cfe0 <nvs_ate_crc8_update>:
{
    cfe0:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
    cfe2:	4601      	mov	r1, r0
{
    cfe4:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
    cfe6:	2207      	movs	r2, #7
    cfe8:	20ff      	movs	r0, #255	; 0xff
    cfea:	f7f4 fde9 	bl	1bc0 <crc8_ccitt>
	entry->crc8 = crc8;
    cfee:	71e0      	strb	r0, [r4, #7]
}
    cff0:	bd10      	pop	{r4, pc}

0000cff2 <z_log_msg_static_create.constprop.0>:
    cff2:	2300      	movs	r3, #0
    cff4:	f7f6 bbac 	b.w	3750 <z_impl_z_log_msg_static_create>

0000cff8 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
    cff8:	7803      	ldrb	r3, [r0, #0]
    cffa:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
    cffc:	bf81      	itttt	hi
    cffe:	f101 31ff 	addhi.w	r1, r1, #4294967295
    d002:	18c9      	addhi	r1, r1, r3
    d004:	425b      	neghi	r3, r3
    d006:	4019      	andhi	r1, r3
}
    d008:	4608      	mov	r0, r1
    d00a:	4770      	bx	lr

0000d00c <nvs_ate_valid>:
{
    d00c:	b570      	push	{r4, r5, r6, lr}
    d00e:	460c      	mov	r4, r1
    d010:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    d012:	2108      	movs	r1, #8
    d014:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    d016:	f7ff ffef 	bl	cff8 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
    d01a:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    d01c:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
    d01e:	4621      	mov	r1, r4
    d020:	20ff      	movs	r0, #255	; 0xff
    d022:	f7f4 fdcd 	bl	1bc0 <crc8_ccitt>
	if (crc8 == entry->crc8) {
    d026:	79e3      	ldrb	r3, [r4, #7]
    d028:	4283      	cmp	r3, r0
    d02a:	d107      	bne.n	d03c <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
    d02c:	89aa      	ldrh	r2, [r5, #12]
    d02e:	8863      	ldrh	r3, [r4, #2]
    d030:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
    d032:	4283      	cmp	r3, r0
    d034:	bf2c      	ite	cs
    d036:	2000      	movcs	r0, #0
    d038:	2001      	movcc	r0, #1
}
    d03a:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
    d03c:	2000      	movs	r0, #0
    d03e:	e7fc      	b.n	d03a <nvs_ate_valid+0x2e>

0000d040 <nvs_close_ate_valid>:
{
    d040:	b538      	push	{r3, r4, r5, lr}
    d042:	4605      	mov	r5, r0
    d044:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
    d046:	f7ff ffe1 	bl	d00c <nvs_ate_valid>
    d04a:	b1a0      	cbz	r0, d076 <nvs_close_ate_valid+0x36>
    d04c:	88a0      	ldrh	r0, [r4, #4]
    d04e:	b998      	cbnz	r0, d078 <nvs_close_ate_valid+0x38>
    d050:	8822      	ldrh	r2, [r4, #0]
    d052:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d056:	429a      	cmp	r2, r3
    d058:	d10d      	bne.n	d076 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    d05a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    d05c:	2108      	movs	r1, #8
    d05e:	f7ff ffcb 	bl	cff8 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
    d062:	8862      	ldrh	r2, [r4, #2]
    d064:	89ab      	ldrh	r3, [r5, #12]
    d066:	1a9b      	subs	r3, r3, r2
    d068:	fbb3 f2f0 	udiv	r2, r3, r0
    d06c:	fb02 3010 	mls	r0, r2, r0, r3
    d070:	fab0 f080 	clz	r0, r0
    d074:	0940      	lsrs	r0, r0, #5
}
    d076:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    d078:	2000      	movs	r0, #0
    d07a:	e7fc      	b.n	d076 <nvs_close_ate_valid+0x36>

0000d07c <nvs_prev_ate>:
{
    d07c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d07e:	4604      	mov	r4, r0
    d080:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    d082:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    d084:	2108      	movs	r1, #8
    d086:	f7ff ffb7 	bl	cff8 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    d08a:	6829      	ldr	r1, [r5, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    d08c:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    d08e:	2308      	movs	r3, #8
    d090:	4620      	mov	r0, r4
    d092:	f7ff ff21 	bl	ced8 <nvs_flash_rd>
	if (rc) {
    d096:	4606      	mov	r6, r0
    d098:	2800      	cmp	r0, #0
    d09a:	d136      	bne.n	d10a <nvs_prev_ate+0x8e>
	*addr += ate_size;
    d09c:	682b      	ldr	r3, [r5, #0]
    d09e:	443b      	add	r3, r7
    d0a0:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
    d0a2:	89a2      	ldrh	r2, [r4, #12]
    d0a4:	b299      	uxth	r1, r3
    d0a6:	1bd2      	subs	r2, r2, r7
    d0a8:	4291      	cmp	r1, r2
    d0aa:	d12e      	bne.n	d10a <nvs_prev_ate+0x8e>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
    d0ac:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
    d0ae:	bf03      	ittte	eq
    d0b0:	89e2      	ldrheq	r2, [r4, #14]
    d0b2:	f102 32ff 	addeq.w	r2, r2, #4294967295
    d0b6:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
    d0ba:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
    d0be:	6029      	str	r1, [r5, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    d0c0:	2308      	movs	r3, #8
    d0c2:	466a      	mov	r2, sp
    d0c4:	4620      	mov	r0, r4
    d0c6:	f7ff ff07 	bl	ced8 <nvs_flash_rd>
	if (rc) {
    d0ca:	b9e8      	cbnz	r0, d108 <nvs_prev_ate+0x8c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
    d0cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    d0ce:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    d0d0:	466b      	mov	r3, sp
		if (data8[i] != value) {
    d0d2:	f813 1b01 	ldrb.w	r1, [r3], #1
    d0d6:	428a      	cmp	r2, r1
    d0d8:	d10c      	bne.n	d0f4 <nvs_prev_ate+0x78>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    d0da:	3001      	adds	r0, #1
    d0dc:	2808      	cmp	r0, #8
    d0de:	d1f8      	bne.n	d0d2 <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
    d0e0:	6863      	ldr	r3, [r4, #4]
    d0e2:	e005      	b.n	d0f0 <nvs_prev_ate+0x74>
		(*addr) &= ADDR_SECT_MASK;
    d0e4:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
    d0e6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
    d0ea:	0c1b      	lsrs	r3, r3, #16
    d0ec:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
    d0ee:	4413      	add	r3, r2
		*addr = fs->ate_wra;
    d0f0:	602b      	str	r3, [r5, #0]
		return 0;
    d0f2:	e00a      	b.n	d10a <nvs_prev_ate+0x8e>
	if (nvs_close_ate_valid(fs, &close_ate)) {
    d0f4:	4669      	mov	r1, sp
    d0f6:	4620      	mov	r0, r4
    d0f8:	f7ff ffa2 	bl	d040 <nvs_close_ate_valid>
    d0fc:	2800      	cmp	r0, #0
    d0fe:	d1f1      	bne.n	d0e4 <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
    d100:	4629      	mov	r1, r5
    d102:	4620      	mov	r0, r4
    d104:	f7f5 fbf8 	bl	28f8 <nvs_recover_last_ate>
    d108:	4606      	mov	r6, r0
}
    d10a:	4630      	mov	r0, r6
    d10c:	b003      	add	sp, #12
    d10e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d110 <nvs_flash_al_wrt>:
{
    d110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d114:	4607      	mov	r7, r0
    d116:	b089      	sub	sp, #36	; 0x24
    d118:	4690      	mov	r8, r2
	if (!len) {
    d11a:	461e      	mov	r6, r3
    d11c:	b91b      	cbnz	r3, d126 <nvs_flash_al_wrt+0x16>
		return 0;
    d11e:	2000      	movs	r0, #0
}
    d120:	b009      	add	sp, #36	; 0x24
    d122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	offset += addr & ADDR_OFFS_MASK;
    d126:	683c      	ldr	r4, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
    d128:	8983      	ldrh	r3, [r0, #12]
    d12a:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
    d12c:	fa14 f181 	uxtah	r1, r4, r1
    d130:	fb00 1403 	mla	r4, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
    d134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d136:	681d      	ldr	r5, [r3, #0]
    d138:	426d      	negs	r5, r5
	if (blen > 0) {
    d13a:	4035      	ands	r5, r6
    d13c:	d00c      	beq.n	d158 <nvs_flash_al_wrt+0x48>
		rc = flash_write(fs->flash_device, offset, data8, blen);
    d13e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
    d140:	6883      	ldr	r3, [r0, #8]
    d142:	4621      	mov	r1, r4
    d144:	f8d3 9004 	ldr.w	r9, [r3, #4]
    d148:	462b      	mov	r3, r5
    d14a:	47c8      	blx	r9
		if (rc) {
    d14c:	2800      	cmp	r0, #0
    d14e:	d1e7      	bne.n	d120 <nvs_flash_al_wrt+0x10>
	if (len) {
    d150:	1b76      	subs	r6, r6, r5
    d152:	d0e4      	beq.n	d11e <nvs_flash_al_wrt+0xe>
		offset += blen;
    d154:	442c      	add	r4, r5
		data8 += blen;
    d156:	44a8      	add	r8, r5
		memcpy(buf, data8, len);
    d158:	4632      	mov	r2, r6
    d15a:	4641      	mov	r1, r8
    d15c:	4668      	mov	r0, sp
    d15e:	f001 fd9e 	bl	ec9e <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
    d162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d164:	681a      	ldr	r2, [r3, #0]
    d166:	7919      	ldrb	r1, [r3, #4]
    d168:	1b92      	subs	r2, r2, r6
    d16a:	eb0d 0006 	add.w	r0, sp, r6
    d16e:	f001 fda1 	bl	ecb4 <memset>
				 fs->flash_parameters->write_block_size);
    d172:	e9d7 030a 	ldrd	r0, r3, [r7, #40]	; 0x28
    d176:	681b      	ldr	r3, [r3, #0]
    d178:	6882      	ldr	r2, [r0, #8]
    d17a:	4621      	mov	r1, r4
    d17c:	6855      	ldr	r5, [r2, #4]
    d17e:	466a      	mov	r2, sp
    d180:	47a8      	blx	r5
	return rc;
    d182:	e7cd      	b.n	d120 <nvs_flash_al_wrt+0x10>

0000d184 <nvs_flash_ate_wrt>:
{
    d184:	b510      	push	{r4, lr}
    d186:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
    d188:	2308      	movs	r3, #8
    d18a:	6841      	ldr	r1, [r0, #4]
{
    d18c:	4604      	mov	r4, r0
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
    d18e:	f7ff ffbf 	bl	d110 <nvs_flash_al_wrt>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
    d192:	2108      	movs	r1, #8
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
    d194:	4602      	mov	r2, r0
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
    d196:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    d198:	f7ff ff2e 	bl	cff8 <nvs_al_size.isra.0>
    d19c:	6863      	ldr	r3, [r4, #4]
    d19e:	1a1b      	subs	r3, r3, r0
    d1a0:	6063      	str	r3, [r4, #4]
}
    d1a2:	4610      	mov	r0, r2
    d1a4:	bd10      	pop	{r4, pc}

0000d1a6 <nvs_add_gc_done_ate>:
{
    d1a6:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
    d1a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d1ac:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
    d1b0:	2300      	movs	r3, #0
{
    d1b2:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
    d1b4:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    d1b8:	6883      	ldr	r3, [r0, #8]
    d1ba:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
    d1be:	4668      	mov	r0, sp
    d1c0:	f7ff ff0e 	bl	cfe0 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
    d1c4:	4669      	mov	r1, sp
    d1c6:	4620      	mov	r0, r4
    d1c8:	f7ff ffdc 	bl	d184 <nvs_flash_ate_wrt>
}
    d1cc:	b002      	add	sp, #8
    d1ce:	bd10      	pop	{r4, pc}

0000d1d0 <nvs_gc>:
{
    d1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d1d4:	4604      	mov	r4, r0
    d1d6:	b095      	sub	sp, #84	; 0x54
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    d1d8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    d1da:	2108      	movs	r1, #8
    d1dc:	f7ff ff0c 	bl	cff8 <nvs_al_size.isra.0>
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    d1e0:	6863      	ldr	r3, [r4, #4]
    d1e2:	0c1b      	lsrs	r3, r3, #16
    d1e4:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    d1e6:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
    d1e8:	a903      	add	r1, sp, #12
    d1ea:	4620      	mov	r0, r4
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    d1ec:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
    d1ee:	f7ff fe81 	bl	cef4 <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
    d1f2:	f8dd b00c 	ldr.w	fp, [sp, #12]
    d1f6:	89a6      	ldrh	r6, [r4, #12]
    d1f8:	445e      	add	r6, fp
    d1fa:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    d1fc:	aa06      	add	r2, sp, #24
    d1fe:	2308      	movs	r3, #8
    d200:	4631      	mov	r1, r6
    d202:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
    d204:	9604      	str	r6, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    d206:	f7ff fe67 	bl	ced8 <nvs_flash_rd>
	if (rc < 0) {
    d20a:	1e02      	subs	r2, r0, #0
    d20c:	f2c0 80a9 	blt.w	d362 <nvs_gc+0x192>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
    d210:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    d212:	aa06      	add	r2, sp, #24
    d214:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    d216:	2300      	movs	r3, #0
		if (data8[i] != value) {
    d218:	f812 0b01 	ldrb.w	r0, [r2], #1
    d21c:	4281      	cmp	r1, r0
    d21e:	f040 808f 	bne.w	d340 <nvs_gc+0x170>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    d222:	3301      	adds	r3, #1
    d224:	2b08      	cmp	r3, #8
    d226:	d1f7      	bne.n	d218 <nvs_gc+0x48>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
    d228:	68a3      	ldr	r3, [r4, #8]
    d22a:	6862      	ldr	r2, [r4, #4]
    d22c:	442b      	add	r3, r5
    d22e:	429a      	cmp	r2, r3
    d230:	d27e      	bcs.n	d330 <nvs_gc+0x160>
	rc = nvs_flash_erase_sector(fs, sec_addr);
    d232:	4659      	mov	r1, fp
    d234:	4620      	mov	r0, r4
    d236:	f7ff feb9 	bl	cfac <nvs_flash_erase_sector>
    d23a:	4602      	mov	r2, r0
	if (rc) {
    d23c:	e091      	b.n	d362 <nvs_gc+0x192>
		gc_addr += close_ate.offset;
    d23e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
    d242:	0c36      	lsrs	r6, r6, #16
    d244:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
    d246:	441e      	add	r6, r3
    d248:	9604      	str	r6, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    d24a:	aa08      	add	r2, sp, #32
    d24c:	a904      	add	r1, sp, #16
    d24e:	4620      	mov	r0, r4
		gc_prev_addr = gc_addr;
    d250:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    d254:	f7ff ff12 	bl	d07c <nvs_prev_ate>
		if (rc) {
    d258:	4602      	mov	r2, r0
    d25a:	2800      	cmp	r0, #0
    d25c:	f040 8081 	bne.w	d362 <nvs_gc+0x192>
		if (!nvs_ate_valid(fs, &gc_ate)) {
    d260:	a908      	add	r1, sp, #32
    d262:	4620      	mov	r0, r4
    d264:	f7ff fed2 	bl	d00c <nvs_ate_valid>
    d268:	b918      	cbnz	r0, d272 <nvs_gc+0xa2>
	} while (gc_prev_addr != stop_addr);
    d26a:	9b01      	ldr	r3, [sp, #4]
    d26c:	459a      	cmp	sl, r3
    d26e:	d1ec      	bne.n	d24a <nvs_gc+0x7a>
    d270:	e7da      	b.n	d228 <nvs_gc+0x58>
		wlk_addr = fs->ate_wra;
    d272:	6863      	ldr	r3, [r4, #4]
    d274:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    d276:	aa0a      	add	r2, sp, #40	; 0x28
    d278:	a905      	add	r1, sp, #20
    d27a:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
    d27c:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    d27e:	f7ff fefd 	bl	d07c <nvs_prev_ate>
			if (rc) {
    d282:	4602      	mov	r2, r0
    d284:	2800      	cmp	r0, #0
    d286:	d16c      	bne.n	d362 <nvs_gc+0x192>
			if ((wlk_ate.id == gc_ate.id) &&
    d288:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    d28c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    d290:	429a      	cmp	r2, r3
    d292:	d027      	beq.n	d2e4 <nvs_gc+0x114>
		} while (wlk_addr != fs->ate_wra);
    d294:	6862      	ldr	r2, [r4, #4]
    d296:	9b05      	ldr	r3, [sp, #20]
    d298:	429a      	cmp	r2, r3
    d29a:	d1ec      	bne.n	d276 <nvs_gc+0xa6>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
    d29c:	4556      	cmp	r6, sl
    d29e:	d1e4      	bne.n	d26a <nvs_gc+0x9a>
    d2a0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    d2a4:	2b00      	cmp	r3, #0
    d2a6:	d0e0      	beq.n	d26a <nvs_gc+0x9a>
			data_addr += gc_ate.offset;
    d2a8:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    d2ac:	ea4f 431a 	mov.w	r3, sl, lsr #16
    d2b0:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
    d2b2:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
    d2b4:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    d2b6:	68a3      	ldr	r3, [r4, #8]
    d2b8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
    d2bc:	f7ff fe90 	bl	cfe0 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    d2c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
    d2c2:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    d2c6:	681e      	ldr	r6, [r3, #0]
    d2c8:	4276      	negs	r6, r6
	block_size =
    d2ca:	f006 0620 	and.w	r6, r6, #32
	while (len) {
    d2ce:	f1b9 0f00 	cmp.w	r9, #0
    d2d2:	d10e      	bne.n	d2f2 <nvs_gc+0x122>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
    d2d4:	a908      	add	r1, sp, #32
    d2d6:	4620      	mov	r0, r4
    d2d8:	f7ff ff54 	bl	d184 <nvs_flash_ate_wrt>
			if (rc) {
    d2dc:	4602      	mov	r2, r0
    d2de:	2800      	cmp	r0, #0
    d2e0:	d0c3      	beq.n	d26a <nvs_gc+0x9a>
    d2e2:	e03e      	b.n	d362 <nvs_gc+0x192>
			    (nvs_ate_valid(fs, &wlk_ate))) {
    d2e4:	a90a      	add	r1, sp, #40	; 0x28
    d2e6:	4620      	mov	r0, r4
    d2e8:	f7ff fe90 	bl	d00c <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
    d2ec:	2800      	cmp	r0, #0
    d2ee:	d0d1      	beq.n	d294 <nvs_gc+0xc4>
    d2f0:	e7d4      	b.n	d29c <nvs_gc+0xcc>
		bytes_to_copy = MIN(block_size, len);
    d2f2:	454e      	cmp	r6, r9
    d2f4:	46b0      	mov	r8, r6
    d2f6:	bf28      	it	cs
    d2f8:	46c8      	movcs	r8, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    d2fa:	aa0c      	add	r2, sp, #48	; 0x30
    d2fc:	4643      	mov	r3, r8
    d2fe:	4639      	mov	r1, r7
    d300:	4620      	mov	r0, r4
    d302:	f7ff fde9 	bl	ced8 <nvs_flash_rd>
		if (rc) {
    d306:	4602      	mov	r2, r0
    d308:	bb58      	cbnz	r0, d362 <nvs_gc+0x192>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    d30a:	4643      	mov	r3, r8
    d30c:	68a1      	ldr	r1, [r4, #8]
    d30e:	aa0c      	add	r2, sp, #48	; 0x30
    d310:	4620      	mov	r0, r4
    d312:	f7ff fefd 	bl	d110 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
    d316:	4641      	mov	r1, r8
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    d318:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
    d31a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    d31c:	f7ff fe6c 	bl	cff8 <nvs_al_size.isra.0>
    d320:	68a3      	ldr	r3, [r4, #8]
    d322:	4403      	add	r3, r0
    d324:	60a3      	str	r3, [r4, #8]
		if (rc) {
    d326:	b9e2      	cbnz	r2, d362 <nvs_gc+0x192>
		len -= bytes_to_copy;
    d328:	eba9 0908 	sub.w	r9, r9, r8
		addr += bytes_to_copy;
    d32c:	4447      	add	r7, r8
    d32e:	e7ce      	b.n	d2ce <nvs_gc+0xfe>
		rc = nvs_add_gc_done_ate(fs);
    d330:	4620      	mov	r0, r4
    d332:	f7ff ff38 	bl	d1a6 <nvs_add_gc_done_ate>
		if (rc) {
    d336:	4602      	mov	r2, r0
    d338:	2800      	cmp	r0, #0
    d33a:	f43f af7a 	beq.w	d232 <nvs_gc+0x62>
    d33e:	e010      	b.n	d362 <nvs_gc+0x192>
	stop_addr = gc_addr - ate_size;
    d340:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
    d342:	a906      	add	r1, sp, #24
    d344:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
    d346:	9301      	str	r3, [sp, #4]
	if (nvs_close_ate_valid(fs, &close_ate)) {
    d348:	f7ff fe7a 	bl	d040 <nvs_close_ate_valid>
    d34c:	2800      	cmp	r0, #0
    d34e:	f47f af76 	bne.w	d23e <nvs_gc+0x6e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
    d352:	a904      	add	r1, sp, #16
    d354:	4620      	mov	r0, r4
    d356:	f7f5 facf 	bl	28f8 <nvs_recover_last_ate>
		if (rc) {
    d35a:	4602      	mov	r2, r0
    d35c:	2800      	cmp	r0, #0
    d35e:	f43f af74 	beq.w	d24a <nvs_gc+0x7a>
}
    d362:	4610      	mov	r0, r2
    d364:	b015      	add	sp, #84	; 0x54
    d366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d36a <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
    d36a:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
    d36c:	2400      	movs	r4, #0
    d36e:	9400      	str	r4, [sp, #0]
    d370:	f7f5 fdde 	bl	2f30 <nvs_read_hist>
	return rc;
}
    d374:	b002      	add	sp, #8
    d376:	bd10      	pop	{r4, pc}

0000d378 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
    d378:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    d37a:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    d37c:	bf5f      	itttt	pl
    d37e:	6803      	ldrpl	r3, [r0, #0]
    d380:	8842      	ldrhpl	r2, [r0, #2]
    d382:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
    d386:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
    d38a:	bf5d      	ittte	pl
    d38c:	3017      	addpl	r0, #23
    d38e:	f020 0007 	bicpl.w	r0, r0, #7
    d392:	0880      	lsrpl	r0, r0, #2
	return 0;
    d394:	2000      	movmi	r0, #0
}
    d396:	4770      	bx	lr

0000d398 <dummy_timestamp>:
}
    d398:	2000      	movs	r0, #0
    d39a:	4770      	bx	lr

0000d39c <default_get_timestamp>:
    d39c:	f002 b8dd 	b.w	f55a <sys_clock_cycle_get_32>

0000d3a0 <atomic_inc>:
{
    d3a0:	4603      	mov	r3, r0
}
    d3a2:	f3bf 8f5b 	dmb	ish
    d3a6:	e853 0f00 	ldrex	r0, [r3]
    d3aa:	1c42      	adds	r2, r0, #1
    d3ac:	e843 2100 	strex	r1, r2, [r3]
    d3b0:	2900      	cmp	r1, #0
    d3b2:	d1f8      	bne.n	d3a6 <atomic_inc+0x6>
    d3b4:	f3bf 8f5b 	dmb	ish
    d3b8:	4770      	bx	lr

0000d3ba <z_log_vprintk>:
{
    d3ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    d3bc:	2300      	movs	r3, #0
    d3be:	e9cd 0102 	strd	r0, r1, [sp, #8]
    d3c2:	e9cd 3300 	strd	r3, r3, [sp]
    d3c6:	461a      	mov	r2, r3
    d3c8:	4619      	mov	r1, r3
    d3ca:	4618      	mov	r0, r3
    d3cc:	f7f6 fa48 	bl	3860 <z_impl_z_log_msg_runtime_vcreate>
}
    d3d0:	b005      	add	sp, #20
    d3d2:	f85d fb04 	ldr.w	pc, [sp], #4

0000d3d6 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
    d3d6:	2001      	movs	r0, #1
    d3d8:	f7f5 beee 	b.w	31b8 <z_log_dropped>

0000d3dc <z_log_get_tag>:
}
    d3dc:	2000      	movs	r0, #0
    d3de:	4770      	bx	lr

0000d3e0 <log_backend_disable>:
{
    d3e0:	b510      	push	{r4, lr}
    d3e2:	6843      	ldr	r3, [r0, #4]
	if (log_backend_is_active(backend)) {
    d3e4:	795b      	ldrb	r3, [r3, #5]
{
    d3e6:	4604      	mov	r4, r0
	if (log_backend_is_active(backend)) {
    d3e8:	b113      	cbz	r3, d3f0 <log_backend_disable+0x10>
		backend_filter_set(backend, LOG_LEVEL_NONE);
    d3ea:	2100      	movs	r1, #0
    d3ec:	f7f6 f95c 	bl	36a8 <backend_filter_set>
	backend->cb->active = false;
    d3f0:	6863      	ldr	r3, [r4, #4]
    d3f2:	2200      	movs	r2, #0
    d3f4:	715a      	strb	r2, [r3, #5]
}
    d3f6:	bd10      	pop	{r4, pc}

0000d3f8 <z_cbprintf_cpy>:
{
    d3f8:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
    d3fa:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
    d3fe:	1b9b      	subs	r3, r3, r6
    d400:	428b      	cmp	r3, r1
{
    d402:	460c      	mov	r4, r1
    d404:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
    d406:	d30a      	bcc.n	d41e <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
    d408:	6813      	ldr	r3, [r2, #0]
    d40a:	460a      	mov	r2, r1
    d40c:	4601      	mov	r1, r0
    d40e:	1998      	adds	r0, r3, r6
    d410:	f001 fc45 	bl	ec9e <memcpy>
	desc->off += len;
    d414:	68ab      	ldr	r3, [r5, #8]
    d416:	4423      	add	r3, r4
    d418:	60ab      	str	r3, [r5, #8]
	return len;
    d41a:	4620      	mov	r0, r4
}
    d41c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
    d41e:	f06f 001b 	mvn.w	r0, #27
    d422:	e7fb      	b.n	d41c <z_cbprintf_cpy+0x24>

0000d424 <z_log_msg_finalize>:
{
    d424:	b570      	push	{r4, r5, r6, lr}
    d426:	460e      	mov	r6, r1
    d428:	4615      	mov	r5, r2
    d42a:	4619      	mov	r1, r3
	if (!msg) {
    d42c:	4604      	mov	r4, r0
    d42e:	b918      	cbnz	r0, d438 <z_log_msg_finalize+0x14>
}
    d430:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    d434:	f7f5 bec0 	b.w	31b8 <z_log_dropped>
	if (data) {
    d438:	b133      	cbz	r3, d448 <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
    d43a:	f3c2 234a 	ubfx	r3, r2, #9, #11
    d43e:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
    d440:	0d12      	lsrs	r2, r2, #20
    d442:	4418      	add	r0, r3
    d444:	f001 fc2b 	bl	ec9e <memcpy>
	msg->hdr.source = source;
    d448:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
    d44c:	4620      	mov	r0, r4
}
    d44e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
    d452:	f7f6 b85f 	b.w	3514 <z_log_msg_commit>

0000d456 <buffer_write>:
{
    d456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d458:	4606      	mov	r6, r0
    d45a:	460d      	mov	r5, r1
    d45c:	4614      	mov	r4, r2
    d45e:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    d460:	4621      	mov	r1, r4
    d462:	4628      	mov	r0, r5
    d464:	463a      	mov	r2, r7
    d466:	47b0      	blx	r6
	} while (len != 0);
    d468:	1a24      	subs	r4, r4, r0
		buf += processed;
    d46a:	4405      	add	r5, r0
	} while (len != 0);
    d46c:	d1f8      	bne.n	d460 <buffer_write+0xa>
}
    d46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d470 <cbvprintf>:
{
    d470:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    d472:	2400      	movs	r4, #0
    d474:	9400      	str	r4, [sp, #0]
    d476:	f7f4 fbb9 	bl	1bec <z_cbvprintf_impl>
}
    d47a:	b002      	add	sp, #8
    d47c:	bd10      	pop	{r4, pc}

0000d47e <log_output_flush>:
{
    d47e:	b510      	push	{r4, lr}
		     output->control_block->offset,
    d480:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    d482:	6881      	ldr	r1, [r0, #8]
{
    d484:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    d486:	e9d2 2300 	ldrd	r2, r3, [r2]
    d48a:	6800      	ldr	r0, [r0, #0]
    d48c:	f7ff ffe3 	bl	d456 <buffer_write>
	output->control_block->offset = 0;
    d490:	6863      	ldr	r3, [r4, #4]
    d492:	2200      	movs	r2, #0
    d494:	601a      	str	r2, [r3, #0]
}
    d496:	bd10      	pop	{r4, pc}

0000d498 <out_func>:
{
    d498:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    d49a:	684b      	ldr	r3, [r1, #4]
    d49c:	681a      	ldr	r2, [r3, #0]
    d49e:	68cb      	ldr	r3, [r1, #12]
    d4a0:	429a      	cmp	r2, r3
{
    d4a2:	4605      	mov	r5, r0
    d4a4:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    d4a6:	d102      	bne.n	d4ae <out_func+0x16>
		log_output_flush(out_ctx);
    d4a8:	4608      	mov	r0, r1
    d4aa:	f7ff ffe8 	bl	d47e <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    d4ae:	6863      	ldr	r3, [r4, #4]
    d4b0:	f3bf 8f5b 	dmb	ish
    d4b4:	e853 2f00 	ldrex	r2, [r3]
    d4b8:	1c51      	adds	r1, r2, #1
    d4ba:	e843 1000 	strex	r0, r1, [r3]
    d4be:	2800      	cmp	r0, #0
    d4c0:	d1f8      	bne.n	d4b4 <out_func+0x1c>
    d4c2:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    d4c6:	68a3      	ldr	r3, [r4, #8]
    d4c8:	549d      	strb	r5, [r3, r2]
}
    d4ca:	2000      	movs	r0, #0
    d4cc:	bd38      	pop	{r3, r4, r5, pc}

0000d4ce <cr_out_func>:
	if (c == '\n') {
    d4ce:	280a      	cmp	r0, #10
{
    d4d0:	b538      	push	{r3, r4, r5, lr}
    d4d2:	4604      	mov	r4, r0
    d4d4:	460d      	mov	r5, r1
	if (c == '\n') {
    d4d6:	d102      	bne.n	d4de <cr_out_func+0x10>
		out_func((int)'\r', ctx);
    d4d8:	200d      	movs	r0, #13
    d4da:	f7ff ffdd 	bl	d498 <out_func>
	out_func(c, ctx);
    d4de:	4629      	mov	r1, r5
    d4e0:	4620      	mov	r0, r4
    d4e2:	f7ff ffd9 	bl	d498 <out_func>
}
    d4e6:	2000      	movs	r0, #0
    d4e8:	bd38      	pop	{r3, r4, r5, pc}

0000d4ea <log_halt>:
    d4ea:	684b      	ldr	r3, [r1, #4]
    d4ec:	2000      	movs	r0, #0
    d4ee:	7158      	strb	r0, [r3, #5]
}
    d4f0:	4770      	bx	lr

0000d4f2 <log_go>:
	log_backend_activate(backend, backend->cb->ctx);
    d4f2:	684b      	ldr	r3, [r1, #4]
	backend->cb->active = true;
    d4f4:	2201      	movs	r2, #1
    d4f6:	715a      	strb	r2, [r3, #5]
}
    d4f8:	2000      	movs	r0, #0
    d4fa:	4770      	bx	lr

0000d4fc <cmd_log_self_status>:
{
    d4fc:	b570      	push	{r4, r5, r6, lr}
    d4fe:	4604      	mov	r4, r0
    d500:	460d      	mov	r5, r1
    d502:	4616      	mov	r6, r2
	if (!shell_state_precheck(sh)) {
    d504:	f7f6 fd28 	bl	3f58 <shell_state_precheck>
    d508:	b130      	cbz	r0, d518 <cmd_log_self_status+0x1c>
	log_status(sh, sh->log_backend->backend, argc, argv);
    d50a:	69e1      	ldr	r1, [r4, #28]
    d50c:	4633      	mov	r3, r6
    d50e:	6809      	ldr	r1, [r1, #0]
    d510:	462a      	mov	r2, r5
    d512:	4620      	mov	r0, r4
    d514:	f7f6 fc38 	bl	3d88 <log_status>
}
    d518:	2000      	movs	r0, #0
    d51a:	bd70      	pop	{r4, r5, r6, pc}

0000d51c <cmd_log_self_enable>:
{
    d51c:	b570      	push	{r4, r5, r6, lr}
    d51e:	4604      	mov	r4, r0
    d520:	460d      	mov	r5, r1
    d522:	4616      	mov	r6, r2
	if (!shell_state_precheck(sh)) {
    d524:	f7f6 fd18 	bl	3f58 <shell_state_precheck>
    d528:	b140      	cbz	r0, d53c <cmd_log_self_enable+0x20>
	return log_enable(sh, sh->log_backend->backend, argc, argv);
    d52a:	69e1      	ldr	r1, [r4, #28]
    d52c:	4633      	mov	r3, r6
    d52e:	462a      	mov	r2, r5
    d530:	4620      	mov	r0, r4
    d532:	6809      	ldr	r1, [r1, #0]
}
    d534:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_enable(sh, sh->log_backend->backend, argc, argv);
    d538:	f7f6 bd8c 	b.w	4054 <log_enable>
}
    d53c:	bd70      	pop	{r4, r5, r6, pc}

0000d53e <log_disable>:
{
    d53e:	b513      	push	{r0, r1, r4, lr}
	filters_set(sh, backend, argc - 1, &argv[1], LOG_LEVEL_NONE);
    d540:	2400      	movs	r4, #0
    d542:	9400      	str	r4, [sp, #0]
    d544:	3304      	adds	r3, #4
    d546:	3a01      	subs	r2, #1
    d548:	f7f6 fd16 	bl	3f78 <filters_set>
}
    d54c:	4620      	mov	r0, r4
    d54e:	b002      	add	sp, #8
    d550:	bd10      	pop	{r4, pc}

0000d552 <cmd_log_self_disable>:
{
    d552:	b570      	push	{r4, r5, r6, lr}
    d554:	4604      	mov	r4, r0
    d556:	460d      	mov	r5, r1
    d558:	4616      	mov	r6, r2
	if (!shell_state_precheck(sh)) {
    d55a:	f7f6 fcfd 	bl	3f58 <shell_state_precheck>
    d55e:	b140      	cbz	r0, d572 <cmd_log_self_disable+0x20>
	return log_disable(sh, sh->log_backend->backend, argc, argv);
    d560:	69e1      	ldr	r1, [r4, #28]
    d562:	4633      	mov	r3, r6
    d564:	462a      	mov	r2, r5
    d566:	4620      	mov	r0, r4
    d568:	6809      	ldr	r1, [r1, #0]
}
    d56a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_disable(sh, sh->log_backend->backend, argc, argv);
    d56e:	f7ff bfe6 	b.w	d53e <log_disable>
}
    d572:	bd70      	pop	{r4, r5, r6, pc}

0000d574 <cmd_log_self_go>:
{
    d574:	b510      	push	{r4, lr}
    d576:	4604      	mov	r4, r0
	if (!shell_state_precheck(sh)) {
    d578:	f7f6 fcee 	bl	3f58 <shell_state_precheck>
    d57c:	b120      	cbz	r0, d588 <cmd_log_self_go+0x14>
	return log_go(sh, sh->log_backend->backend, argc, argv);
    d57e:	69e3      	ldr	r3, [r4, #28]
	log_backend_activate(backend, backend->cb->ctx);
    d580:	681b      	ldr	r3, [r3, #0]
    d582:	685b      	ldr	r3, [r3, #4]
    d584:	2201      	movs	r2, #1
    d586:	715a      	strb	r2, [r3, #5]
}
    d588:	2000      	movs	r0, #0
    d58a:	bd10      	pop	{r4, pc}

0000d58c <cmd_log_self_halt>:
{
    d58c:	b510      	push	{r4, lr}
    d58e:	4604      	mov	r4, r0
	if (!shell_state_precheck(sh)) {
    d590:	f7f6 fce2 	bl	3f58 <shell_state_precheck>
    d594:	b120      	cbz	r0, d5a0 <cmd_log_self_halt+0x14>
	return log_halt(sh, sh->log_backend->backend, argc, argv);
    d596:	69e3      	ldr	r3, [r4, #28]
	backend->cb->active = false;
    d598:	681b      	ldr	r3, [r3, #0]
    d59a:	685b      	ldr	r3, [r3, #4]
    d59c:	2200      	movs	r2, #0
    d59e:	715a      	strb	r2, [r3, #5]
}
    d5a0:	2000      	movs	r0, #0
    d5a2:	bd10      	pop	{r4, pc}

0000d5a4 <pm_device_state_get>:
}

int pm_device_state_get(const struct device *dev,
			enum pm_device_state *state)
{
	struct pm_device *pm = dev->pm;
    d5a4:	6983      	ldr	r3, [r0, #24]

	if (pm == NULL) {
    d5a6:	b11b      	cbz	r3, d5b0 <pm_device_state_get+0xc>
		return -ENOSYS;
	}

	*state = pm->state;
    d5a8:	7a1b      	ldrb	r3, [r3, #8]
    d5aa:	700b      	strb	r3, [r1, #0]

	return 0;
    d5ac:	2000      	movs	r0, #0
    d5ae:	4770      	bx	lr
		return -ENOSYS;
    d5b0:	f06f 0057 	mvn.w	r0, #87	; 0x57
}
    d5b4:	4770      	bx	lr

0000d5b6 <pm_device_is_busy>:
	return false;
}

bool pm_device_is_busy(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
    d5b6:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
    d5b8:	b130      	cbz	r0, d5c8 <pm_device_is_busy+0x12>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d5ba:	f3bf 8f5b 	dmb	ish
    d5be:	6840      	ldr	r0, [r0, #4]
    d5c0:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    d5c4:	f000 0001 	and.w	r0, r0, #1
		return false;
	}

	return atomic_test_bit(&pm->flags, PM_DEVICE_FLAG_BUSY);
}
    d5c8:	4770      	bx	lr

0000d5ca <pm_device_busy_set>:

void pm_device_busy_set(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
    d5ca:	6983      	ldr	r3, [r0, #24]

	if (pm == NULL) {
    d5cc:	b163      	cbz	r3, d5e8 <pm_device_busy_set+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d5ce:	f3bf 8f5b 	dmb	ish
    d5d2:	3304      	adds	r3, #4
    d5d4:	e853 1f00 	ldrex	r1, [r3]
    d5d8:	f041 0101 	orr.w	r1, r1, #1
    d5dc:	e843 1200 	strex	r2, r1, [r3]
    d5e0:	2a00      	cmp	r2, #0
    d5e2:	d1f7      	bne.n	d5d4 <pm_device_busy_set+0xa>
    d5e4:	f3bf 8f5b 	dmb	ish
		return;
	}

	atomic_set_bit(&pm->flags, PM_DEVICE_FLAG_BUSY);
}
    d5e8:	4770      	bx	lr

0000d5ea <pm_device_busy_clear>:

void pm_device_busy_clear(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
    d5ea:	6983      	ldr	r3, [r0, #24]

	if (pm == NULL) {
    d5ec:	b163      	cbz	r3, d608 <pm_device_busy_clear+0x1e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d5ee:	f3bf 8f5b 	dmb	ish
    d5f2:	3304      	adds	r3, #4
    d5f4:	e853 1f00 	ldrex	r1, [r3]
    d5f8:	f021 0101 	bic.w	r1, r1, #1
    d5fc:	e843 1200 	strex	r2, r1, [r3]
    d600:	2a00      	cmp	r2, #0
    d602:	d1f7      	bne.n	d5f4 <pm_device_busy_clear+0xa>
    d604:	f3bf 8f5b 	dmb	ish
		return;
	}

	atomic_clear_bit(&pm->flags, PM_DEVICE_FLAG_BUSY);
}
    d608:	4770      	bx	lr

0000d60a <pm_device_wakeup_is_enabled>:
	return atomic_cas(&pm->flags, flags, new_flags);
}

bool pm_device_wakeup_is_enabled(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
    d60a:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
    d60c:	b130      	cbz	r0, d61c <pm_device_wakeup_is_enabled+0x12>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d60e:	f3bf 8f5b 	dmb	ish
    d612:	6840      	ldr	r0, [r0, #4]
    d614:	f3bf 8f5b 	dmb	ish
    d618:	f3c0 1000 	ubfx	r0, r0, #4, #1
		return false;
	}

	return atomic_test_bit(&pm->flags,
			       PM_DEVICE_FLAG_WS_ENABLED);
}
    d61c:	4770      	bx	lr

0000d61e <pm_device_state_is_locked>:
	}
}

bool pm_device_state_is_locked(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
    d61e:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
    d620:	b130      	cbz	r0, d630 <pm_device_state_is_locked+0x12>
    d622:	f3bf 8f5b 	dmb	ish
    d626:	6840      	ldr	r0, [r0, #4]
    d628:	f3bf 8f5b 	dmb	ish
    d62c:	f3c0 1080 	ubfx	r0, r0, #6, #1
		return false;
	}

	return atomic_test_bit(&pm->flags,
			       PM_DEVICE_FLAG_STATE_LOCKED);
}
    d630:	4770      	bx	lr

0000d632 <cmd_kernel_reboot_warm>:
#endif

#if defined(CONFIG_REBOOT)
static int cmd_kernel_reboot_warm(const struct shell *sh,
				  size_t argc, char **argv)
{
    d632:	b508      	push	{r3, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
#if (CONFIG_KERNEL_SHELL_REBOOT_DELAY > 0)
	k_sleep(K_MSEC(CONFIG_KERNEL_SHELL_REBOOT_DELAY));
#endif
	sys_reboot(SYS_REBOOT_WARM);
    d634:	2000      	movs	r0, #0
    d636:	f7f5 f945 	bl	28c4 <sys_reboot>

0000d63a <cmd_kernel_reboot_cold>:
	return 0;
}

static int cmd_kernel_reboot_cold(const struct shell *sh,
				  size_t argc, char **argv)
{
    d63a:	b508      	push	{r3, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
#if (CONFIG_KERNEL_SHELL_REBOOT_DELAY > 0)
	k_sleep(K_MSEC(CONFIG_KERNEL_SHELL_REBOOT_DELAY));
#endif
	sys_reboot(SYS_REBOOT_COLD);
    d63c:	2001      	movs	r0, #1
    d63e:	f7f5 f941 	bl	28c4 <sys_reboot>

0000d642 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
    d642:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    d644:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    d646:	bf5f      	itttt	pl
    d648:	6803      	ldrpl	r3, [r0, #0]
    d64a:	8842      	ldrhpl	r2, [r0, #2]
    d64c:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
    d650:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
    d654:	bf5d      	ittte	pl
    d656:	3017      	addpl	r0, #23
    d658:	f020 0007 	bicpl.w	r0, r0, #7
    d65c:	0880      	lsrpl	r0, r0, #2
	return 0;
    d65e:	2000      	movmi	r0, #0
}
    d660:	4770      	bx	lr

0000d662 <uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
    d662:	6883      	ldr	r3, [r0, #8]
    d664:	6a1b      	ldr	r3, [r3, #32]
    d666:	b103      	cbz	r3, d66a <uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
    d668:	4718      	bx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
}
    d66a:	4770      	bx	lr

0000d66c <enable>:
{
    d66c:	b508      	push	{r3, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    d66e:	6843      	ldr	r3, [r0, #4]
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
    d670:	681a      	ldr	r2, [r3, #0]
    d672:	7411      	strb	r1, [r2, #16]
	if (blocking_tx) {
    d674:	b119      	cbz	r1, d67e <enable+0x12>
		uart_irq_tx_disable(sh_uart->ctrl_blk->dev);
    d676:	681b      	ldr	r3, [r3, #0]
    d678:	6818      	ldr	r0, [r3, #0]
    d67a:	f7ff fff2 	bl	d662 <uart_irq_tx_disable>
}
    d67e:	2000      	movs	r0, #0
    d680:	bd08      	pop	{r3, pc}

0000d682 <read>:
{
    d682:	b510      	push	{r4, lr}
    d684:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
    d686:	6843      	ldr	r3, [r0, #4]
    d688:	6918      	ldr	r0, [r3, #16]
    d68a:	f7ff f99a 	bl	c9c2 <ring_buf_get>
    d68e:	6020      	str	r0, [r4, #0]
}
    d690:	2000      	movs	r0, #0
    d692:	bd10      	pop	{r4, pc}

0000d694 <uninit>:
{
    d694:	b510      	push	{r4, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    d696:	6843      	ldr	r3, [r0, #4]
		const struct device *dev = sh_uart->ctrl_blk->dev;
    d698:	681a      	ldr	r2, [r3, #0]
		k_timer_stop(sh_uart->dtr_timer);
    d69a:	6898      	ldr	r0, [r3, #8]
		const struct device *dev = sh_uart->ctrl_blk->dev;
    d69c:	6814      	ldr	r4, [r2, #0]
	z_impl_k_timer_stop(timer);
    d69e:	f002 f9fb 	bl	fa98 <z_impl_k_timer_stop>
		uart_irq_tx_disable(dev);
    d6a2:	4620      	mov	r0, r4
    d6a4:	f7ff ffdd 	bl	d662 <uart_irq_tx_disable>
	if (api->irq_rx_disable != NULL) {
    d6a8:	68a3      	ldr	r3, [r4, #8]
    d6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d6ac:	b10b      	cbz	r3, d6b2 <uninit+0x1e>
		api->irq_rx_disable(dev);
    d6ae:	4620      	mov	r0, r4
    d6b0:	4798      	blx	r3
}
    d6b2:	2000      	movs	r0, #0
    d6b4:	bd10      	pop	{r4, pc}

0000d6b6 <write>:
{
    d6b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    d6ba:	6845      	ldr	r5, [r0, #4]
{
    d6bc:	461e      	mov	r6, r3
		!sh_uart->ctrl_blk->blocking_tx) {
    d6be:	682b      	ldr	r3, [r5, #0]
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
    d6c0:	7c1b      	ldrb	r3, [r3, #16]
{
    d6c2:	460c      	mov	r4, r1
    d6c4:	4617      	mov	r7, r2
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
    d6c6:	b153      	cbz	r3, d6de <write+0x28>
    d6c8:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
    d6cc:	45a0      	cmp	r8, r4
    d6ce:	d121      	bne.n	d714 <write+0x5e>
		*cnt = length;
    d6d0:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    d6d2:	682b      	ldr	r3, [r5, #0]
    d6d4:	2001      	movs	r0, #1
    d6d6:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    d6da:	4790      	blx	r2
    d6dc:	e017      	b.n	d70e <write+0x58>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
    d6de:	68e8      	ldr	r0, [r5, #12]
    d6e0:	f7ff f91b 	bl	c91a <ring_buf_put>
    d6e4:	6030      	str	r0, [r6, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d6e6:	682b      	ldr	r3, [r5, #0]
    d6e8:	f3bf 8f5b 	dmb	ish
    d6ec:	330c      	adds	r3, #12
    d6ee:	2101      	movs	r1, #1
    d6f0:	e853 2f00 	ldrex	r2, [r3]
    d6f4:	e843 1000 	strex	r0, r1, [r3]
    d6f8:	2800      	cmp	r0, #0
    d6fa:	d1f9      	bne.n	d6f0 <write+0x3a>
    d6fc:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
    d700:	b92a      	cbnz	r2, d70e <write+0x58>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
    d702:	682b      	ldr	r3, [r5, #0]
    d704:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable != NULL) {
    d706:	6883      	ldr	r3, [r0, #8]
    d708:	69db      	ldr	r3, [r3, #28]
    d70a:	b103      	cbz	r3, d70e <write+0x58>
		api->irq_tx_enable(dev);
    d70c:	4798      	blx	r3
}
    d70e:	2000      	movs	r0, #0
    d710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
    d714:	682b      	ldr	r3, [r5, #0]
    d716:	f814 1b01 	ldrb.w	r1, [r4], #1
    d71a:	6818      	ldr	r0, [r3, #0]
	api->poll_out(dev, out_char);
    d71c:	6883      	ldr	r3, [r0, #8]
    d71e:	685b      	ldr	r3, [r3, #4]
    d720:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    d722:	e7d3      	b.n	d6cc <write+0x16>

0000d724 <cmd_buffer_clear>:
	sh->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    d724:	6882      	ldr	r2, [r0, #8]
    d726:	2300      	movs	r3, #0
    d728:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
	sh->ctx->cmd_buff_pos = 0;
    d72c:	6882      	ldr	r2, [r0, #8]
    d72e:	87d3      	strh	r3, [r2, #62]	; 0x3e
	sh->ctx->cmd_buff_len = 0;
    d730:	6882      	ldr	r2, [r0, #8]
    d732:	8793      	strh	r3, [r2, #60]	; 0x3c
}
    d734:	4770      	bx	lr

0000d736 <atomic_or>:
{
    d736:	b510      	push	{r4, lr}
    d738:	4603      	mov	r3, r0
}
    d73a:	f3bf 8f5b 	dmb	ish
    d73e:	e853 0f00 	ldrex	r0, [r3]
    d742:	ea40 0201 	orr.w	r2, r0, r1
    d746:	e843 2400 	strex	r4, r2, [r3]
    d74a:	2c00      	cmp	r4, #0
    d74c:	d1f7      	bne.n	d73e <atomic_or+0x8>
    d74e:	f3bf 8f5b 	dmb	ish
    d752:	bd10      	pop	{r4, pc}

0000d754 <atomic_and>:
{
    d754:	b510      	push	{r4, lr}
    d756:	4603      	mov	r3, r0
}
    d758:	f3bf 8f5b 	dmb	ish
    d75c:	e853 0f00 	ldrex	r0, [r3]
    d760:	ea00 0201 	and.w	r2, r0, r1
    d764:	e843 2400 	strex	r4, r2, [r3]
    d768:	2c00      	cmp	r4, #0
    d76a:	d1f7      	bne.n	d75c <atomic_and+0x8>
    d76c:	f3bf 8f5b 	dmb	ish
    d770:	bd10      	pop	{r4, pc}

0000d772 <shell_signal_handle>:
{
    d772:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct k_poll_signal *sig = &sh->ctx->signals[sig_idx];
    d774:	0109      	lsls	r1, r1, #4
    d776:	6885      	ldr	r5, [r0, #8]
    d778:	f501 711a 	add.w	r1, r1, #616	; 0x268
{
    d77c:	4604      	mov	r4, r0
    d77e:	4616      	mov	r6, r2
	struct k_poll_signal *sig = &sh->ctx->signals[sig_idx];
    d780:	440d      	add	r5, r1
	z_impl_k_poll_signal_check(sig, signaled, result);
    d782:	aa01      	add	r2, sp, #4
    d784:	4669      	mov	r1, sp
    d786:	4628      	mov	r0, r5
    d788:	f002 faf9 	bl	fd7e <z_impl_k_poll_signal_check>
	if (set) {
    d78c:	9b00      	ldr	r3, [sp, #0]
    d78e:	b123      	cbz	r3, d79a <shell_signal_handle+0x28>
	z_impl_k_poll_signal_reset(sig);
    d790:	4628      	mov	r0, r5
    d792:	f002 faf1 	bl	fd78 <z_impl_k_poll_signal_reset>
		handler(sh);
    d796:	4620      	mov	r0, r4
    d798:	47b0      	blx	r6
}
    d79a:	b002      	add	sp, #8
    d79c:	bd70      	pop	{r4, r5, r6, pc}

0000d79e <z_shell_strlen>:
{
    d79e:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
    d7a0:	b110      	cbz	r0, d7a8 <z_shell_strlen+0xa>
    d7a2:	f001 fa25 	bl	ebf0 <strlen>
    d7a6:	b280      	uxth	r0, r0
}
    d7a8:	bd08      	pop	{r3, pc}

0000d7aa <z_shell_raw_fprintf>:
{
    d7aa:	b40e      	push	{r1, r2, r3}
    d7ac:	b503      	push	{r0, r1, lr}
    d7ae:	aa03      	add	r2, sp, #12
    d7b0:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    d7b4:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    d7b6:	f7f8 fbf1 	bl	5f9c <z_shell_fprintf_fmt>
}
    d7ba:	b002      	add	sp, #8
    d7bc:	f85d eb04 	ldr.w	lr, [sp], #4
    d7c0:	b003      	add	sp, #12
    d7c2:	4770      	bx	lr

0000d7c4 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    d7c4:	f7fd bc20 	b.w	b008 <z_impl_k_mutex_lock>

0000d7c8 <transport_evt_handler>:
			&sh->ctx->signals[SHELL_SIGNAL_RXRDY] :
    d7c8:	688b      	ldr	r3, [r1, #8]
    d7ca:	b920      	cbnz	r0, d7d6 <transport_evt_handler+0xe>
    d7cc:	f503 701a 	add.w	r0, r3, #616	; 0x268
	return z_impl_k_poll_signal_raise(sig, result);
    d7d0:	2100      	movs	r1, #0
    d7d2:	f7fe baf3 	b.w	bdbc <z_impl_k_poll_signal_raise>
    d7d6:	f503 7026 	add.w	r0, r3, #664	; 0x298
    d7da:	e7f9      	b.n	d7d0 <transport_evt_handler+0x8>

0000d7dc <kill_handler>:
{
    d7dc:	b538      	push	{r3, r4, r5, lr}
	return sh->ctx->ctx.flags.processing == 1;
    d7de:	6883      	ldr	r3, [r0, #8]
    d7e0:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
	if (z_flag_processing_get(sh)) {
    d7e4:	07db      	lsls	r3, r3, #31
{
    d7e6:	4604      	mov	r4, r0
	if (z_flag_processing_get(sh)) {
    d7e8:	d41d      	bmi.n	d826 <kill_handler+0x4a>
		z_shell_log_backend_disable(sh->log_backend);
    d7ea:	69c0      	ldr	r0, [r0, #28]
    d7ec:	f000 fe2c 	bl	e448 <z_shell_log_backend_disable>
	err = sh->iface->api->uninit(sh->iface);
    d7f0:	6860      	ldr	r0, [r4, #4]
    d7f2:	6803      	ldr	r3, [r0, #0]
    d7f4:	685b      	ldr	r3, [r3, #4]
    d7f6:	4798      	blx	r3
	if (err != 0) {
    d7f8:	4605      	mov	r5, r0
    d7fa:	b920      	cbnz	r0, d806 <kill_handler+0x2a>
	z_shell_history_purge(sh->history);
    d7fc:	68e0      	ldr	r0, [r4, #12]
    d7fe:	f000 ffef 	bl	e7e0 <z_shell_history_purge>
	sh->ctx->state = state;
    d802:	68a3      	ldr	r3, [r4, #8]
    d804:	711d      	strb	r5, [r3, #4]
	if (sh->ctx->uninit_cb) {
    d806:	68a3      	ldr	r3, [r4, #8]
    d808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d80a:	b113      	cbz	r3, d812 <kill_handler+0x36>
		sh->ctx->uninit_cb(sh, err);
    d80c:	4629      	mov	r1, r5
    d80e:	4620      	mov	r0, r4
    d810:	4798      	blx	r3
	sh->ctx->tid = NULL;
    d812:	68a3      	ldr	r3, [r4, #8]
    d814:	2200      	movs	r2, #0
    d816:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
	return z_impl_z_current_get();
    d81a:	f7fd fffb 	bl	b814 <z_impl_z_current_get>
}
    d81e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_abort(thread);
    d822:	f7f9 bd97 	b.w	7354 <z_impl_k_thread_abort>
		return -EBUSY;
    d826:	f06f 050f 	mvn.w	r5, #15
    d82a:	e7ec      	b.n	d806 <kill_handler+0x2a>

0000d82c <z_flag_cmd_ctx_set.isra.0>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, cmd_ctx, val, ret);
    d82c:	f500 7019 	add.w	r0, r0, #612	; 0x264
    d830:	b119      	cbz	r1, d83a <z_flag_cmd_ctx_set.isra.0+0xe>
    d832:	f44f 6100 	mov.w	r1, #2048	; 0x800
    d836:	f7ff bf7e 	b.w	d736 <atomic_or>
    d83a:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    d83e:	f7ff bf89 	b.w	d754 <atomic_and>

0000d842 <z_flag_history_exit_set.isra.0>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, history_exit, val, ret);
    d842:	f500 7019 	add.w	r0, r0, #612	; 0x264
    d846:	b111      	cbz	r1, d84e <z_flag_history_exit_set.isra.0+0xc>
    d848:	2104      	movs	r1, #4
    d84a:	f7ff bf74 	b.w	d736 <atomic_or>
    d84e:	f06f 0104 	mvn.w	r1, #4
    d852:	f7ff bf7f 	b.w	d754 <atomic_and>

0000d856 <z_flag_insert_mode_set.isra.0>:
static inline bool z_flag_insert_mode_set(const struct shell *sh, bool val)
    d856:	b508      	push	{r3, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
    d858:	f500 7018 	add.w	r0, r0, #608	; 0x260
    d85c:	b129      	cbz	r1, d86a <z_flag_insert_mode_set.isra.0+0x14>
    d85e:	2101      	movs	r1, #1
    d860:	f7ff ff69 	bl	d736 <atomic_or>
}
    d864:	f000 0001 	and.w	r0, r0, #1
    d868:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
    d86a:	f06f 0101 	mvn.w	r1, #1
    d86e:	f7ff ff71 	bl	d754 <atomic_and>
    d872:	e7f7      	b.n	d864 <z_flag_insert_mode_set.isra.0+0xe>

0000d874 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    d874:	f7fd bc42 	b.w	b0fc <z_impl_k_mutex_unlock>

0000d878 <shell_log_process>:
{
    d878:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int signaled = 0;
    d87a:	2300      	movs	r3, #0
{
    d87c:	4604      	mov	r4, r0
	int signaled = 0;
    d87e:	9300      	str	r3, [sp, #0]
			z_shell_cmd_line_erase(sh);
    d880:	4620      	mov	r0, r4
    d882:	f000 fbee 	bl	e062 <z_shell_cmd_line_erase>
			processed = z_shell_log_backend_process(
    d886:	69e0      	ldr	r0, [r4, #28]
    d888:	f000 fe1f 	bl	e4ca <z_shell_log_backend_process>
    d88c:	4605      	mov	r5, r0
		z_shell_print_prompt_and_cmd(sh);
    d88e:	4620      	mov	r0, r4
		struct k_poll_signal *signal =
    d890:	68a6      	ldr	r6, [r4, #8]
		z_shell_print_prompt_and_cmd(sh);
    d892:	f7f8 fd29 	bl	62e8 <z_shell_print_prompt_and_cmd>
		if (sh->ctx->cmd_buff_len) {
    d896:	68a3      	ldr	r3, [r4, #8]
    d898:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
		struct k_poll_signal *signal =
    d89a:	f506 761a 	add.w	r6, r6, #616	; 0x268
		if (sh->ctx->cmd_buff_len) {
    d89e:	b123      	cbz	r3, d8aa <shell_log_process+0x32>
	return z_impl_k_sleep(timeout);
    d8a0:	f44f 70f6 	mov.w	r0, #492	; 0x1ec
    d8a4:	2100      	movs	r1, #0
    d8a6:	f7fd ff9b 	bl	b7e0 <z_impl_k_sleep>
	z_impl_k_poll_signal_check(sig, signaled, result);
    d8aa:	aa01      	add	r2, sp, #4
    d8ac:	4669      	mov	r1, sp
    d8ae:	4630      	mov	r0, r6
    d8b0:	f002 fa65 	bl	fd7e <z_impl_k_poll_signal_check>
	} while (processed && !signaled);
    d8b4:	b115      	cbz	r5, d8bc <shell_log_process+0x44>
    d8b6:	9b00      	ldr	r3, [sp, #0]
    d8b8:	2b00      	cmp	r3, #0
    d8ba:	d0e1      	beq.n	d880 <shell_log_process+0x8>
}
    d8bc:	b002      	add	sp, #8
    d8be:	bd70      	pop	{r4, r5, r6, pc}

0000d8c0 <shell_vfprintf>:
{
    d8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d8c2:	4604      	mov	r4, r0
	return sh->ctx->state;
    d8c4:	6880      	ldr	r0, [r0, #8]
{
    d8c6:	461f      	mov	r7, r3
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
    d8c8:	7903      	ldrb	r3, [r0, #4]
    d8ca:	2b02      	cmp	r3, #2
{
    d8cc:	460d      	mov	r5, r1
    d8ce:	4616      	mov	r6, r2
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
    d8d0:	d007      	beq.n	d8e2 <shell_vfprintf+0x22>
}
    d8d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
    d8d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    d8da:	f500 7019 	add.w	r0, r0, #612	; 0x264
    d8de:	f7ff bf2a 	b.w	d736 <atomic_or>
	k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
    d8e2:	f04f 32ff 	mov.w	r2, #4294967295
    d8e6:	f04f 33ff 	mov.w	r3, #4294967295
    d8ea:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    d8ee:	f7ff ff69 	bl	d7c4 <k_mutex_lock.constprop.0.isra.0>
	return sh->ctx->ctx.flags.cmd_ctx == 1;
    d8f2:	68a3      	ldr	r3, [r4, #8]
    d8f4:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
    d8f8:	0511      	lsls	r1, r2, #20
    d8fa:	d404      	bmi.n	d906 <shell_vfprintf+0x46>
    d8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    d8fe:	b913      	cbnz	r3, d906 <shell_vfprintf+0x46>
		z_shell_cmd_line_erase(sh);
    d900:	4620      	mov	r0, r4
    d902:	f000 fbae 	bl	e062 <z_shell_cmd_line_erase>
	z_shell_vfprintf(sh, color, fmt, args);
    d906:	463b      	mov	r3, r7
    d908:	4632      	mov	r2, r6
    d90a:	4629      	mov	r1, r5
    d90c:	4620      	mov	r0, r4
    d90e:	f000 fc08 	bl	e122 <z_shell_vfprintf>
    d912:	68a3      	ldr	r3, [r4, #8]
    d914:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
    d918:	0512      	lsls	r2, r2, #20
    d91a:	d404      	bmi.n	d926 <shell_vfprintf+0x66>
    d91c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    d91e:	b913      	cbnz	r3, d926 <shell_vfprintf+0x66>
		z_shell_print_prompt_and_cmd(sh);
    d920:	4620      	mov	r0, r4
    d922:	f7f8 fce1 	bl	62e8 <z_shell_print_prompt_and_cmd>
	z_shell_fprintf_buffer_flush(sh->fprintf_ctx);
    d926:	6960      	ldr	r0, [r4, #20]
    d928:	f000 f82f 	bl	d98a <z_shell_fprintf_buffer_flush>
	k_mutex_unlock(&sh->ctx->wr_mtx);
    d92c:	68a0      	ldr	r0, [r4, #8]
}
    d92e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&sh->ctx->wr_mtx);
    d932:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    d936:	f7ff bf9d 	b.w	d874 <k_mutex_unlock.isra.0>

0000d93a <shell_fprintf>:
{
    d93a:	b40c      	push	{r2, r3}
    d93c:	b507      	push	{r0, r1, r2, lr}
    d93e:	ab04      	add	r3, sp, #16
    d940:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
    d944:	9301      	str	r3, [sp, #4]
	shell_vfprintf(sh, color, fmt, args);
    d946:	f7ff ffbb 	bl	d8c0 <shell_vfprintf>
}
    d94a:	b003      	add	sp, #12
    d94c:	f85d eb04 	ldr.w	lr, [sp], #4
    d950:	b002      	add	sp, #8
    d952:	4770      	bx	lr

0000d954 <shell_help>:
{
    d954:	b510      	push	{r4, lr}
    d956:	4604      	mov	r4, r0
	k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
    d958:	6880      	ldr	r0, [r0, #8]
    d95a:	f04f 32ff 	mov.w	r2, #4294967295
    d95e:	f04f 33ff 	mov.w	r3, #4294967295
    d962:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    d966:	f7ff ff2d 	bl	d7c4 <k_mutex_lock.constprop.0.isra.0>
	shell_internal_help_print(sh);
    d96a:	4620      	mov	r0, r4
    d96c:	f7f7 fc32 	bl	51d4 <shell_internal_help_print>
	k_mutex_unlock(&sh->ctx->wr_mtx);
    d970:	68a0      	ldr	r0, [r4, #8]
}
    d972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_mutex_unlock(&sh->ctx->wr_mtx);
    d976:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    d97a:	f7ff bf7b 	b.w	d874 <k_mutex_unlock.isra.0>

0000d97e <shell_set_bypass>:
	sh->ctx->bypass = bypass;
    d97e:	6883      	ldr	r3, [r0, #8]
    d980:	6399      	str	r1, [r3, #56]	; 0x38
	if (bypass == NULL) {
    d982:	b909      	cbnz	r1, d988 <shell_set_bypass+0xa>
		cmd_buffer_clear(sh);
    d984:	f7ff bece 	b.w	d724 <cmd_buffer_clear>
}
    d988:	4770      	bx	lr

0000d98a <z_shell_fprintf_buffer_flush>:


void z_shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
    d98a:	b510      	push	{r4, lr}
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
    d98c:	6902      	ldr	r2, [r0, #16]
    d98e:	6883      	ldr	r3, [r0, #8]
    d990:	6812      	ldr	r2, [r2, #0]
    d992:	6801      	ldr	r1, [r0, #0]
{
    d994:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
    d996:	68c0      	ldr	r0, [r0, #12]
    d998:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
    d99a:	6923      	ldr	r3, [r4, #16]
    d99c:	2200      	movs	r2, #0
    d99e:	601a      	str	r2, [r3, #0]
}
    d9a0:	bd10      	pop	{r4, pc}

0000d9a2 <out_func>:
{
    d9a2:	b538      	push	{r3, r4, r5, lr}
	if ((sh->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
    d9a4:	68cb      	ldr	r3, [r1, #12]
    d9a6:	7c1b      	ldrb	r3, [r3, #16]
    d9a8:	2b02      	cmp	r3, #2
{
    d9aa:	4605      	mov	r5, r0
    d9ac:	460c      	mov	r4, r1
	if ((sh->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
    d9ae:	d104      	bne.n	d9ba <out_func+0x18>
    d9b0:	280a      	cmp	r0, #10
    d9b2:	d102      	bne.n	d9ba <out_func+0x18>
		(void)out_func('\r', ctx);
    d9b4:	200d      	movs	r0, #13
    d9b6:	f7ff fff4 	bl	d9a2 <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (uint8_t)c;
    d9ba:	6923      	ldr	r3, [r4, #16]
    d9bc:	6822      	ldr	r2, [r4, #0]
    d9be:	681b      	ldr	r3, [r3, #0]
    d9c0:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
    d9c2:	6922      	ldr	r2, [r4, #16]
    d9c4:	6813      	ldr	r3, [r2, #0]
    d9c6:	3301      	adds	r3, #1
    d9c8:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
    d9ca:	6923      	ldr	r3, [r4, #16]
    d9cc:	681a      	ldr	r2, [r3, #0]
    d9ce:	6863      	ldr	r3, [r4, #4]
    d9d0:	429a      	cmp	r2, r3
    d9d2:	d102      	bne.n	d9da <out_func+0x38>
		z_shell_fprintf_buffer_flush(sh_fprintf);
    d9d4:	4620      	mov	r0, r4
    d9d6:	f7ff ffd8 	bl	d98a <z_shell_fprintf_buffer_flush>
}
    d9da:	2000      	movs	r0, #0
    d9dc:	bd38      	pop	{r3, r4, r5, pc}

0000d9de <isspace>:
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    d9de:	2820      	cmp	r0, #32
    d9e0:	d005      	beq.n	d9ee <isspace+0x10>
    d9e2:	3809      	subs	r0, #9
    d9e4:	2804      	cmp	r0, #4
    d9e6:	bf8c      	ite	hi
    d9e8:	2000      	movhi	r0, #0
    d9ea:	2001      	movls	r0, #1
    d9ec:	4770      	bx	lr
    d9ee:	2001      	movs	r0, #1
}
    d9f0:	4770      	bx	lr

0000d9f2 <z_shell_strlen>:
{
    d9f2:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
    d9f4:	b110      	cbz	r0, d9fc <z_shell_strlen+0xa>
    d9f6:	f001 f8fb 	bl	ebf0 <strlen>
    d9fa:	b280      	uxth	r0, r0
}
    d9fc:	bd08      	pop	{r3, pc}

0000d9fe <z_column_span_with_buffer_offsets_get>:
{
    d9fe:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
    da00:	7b04      	ldrb	r4, [r0, #12]
    da02:	8943      	ldrh	r3, [r0, #10]
    da04:	4422      	add	r2, r4
    da06:	4421      	add	r1, r4
    da08:	fbb2 f0f3 	udiv	r0, r2, r3
    da0c:	fb03 2210 	mls	r2, r3, r0, r2
    da10:	fbb1 f0f3 	udiv	r0, r1, r3
    da14:	fb03 1010 	mls	r0, r3, r0, r1
}
    da18:	1a10      	subs	r0, r2, r0
    da1a:	bd10      	pop	{r4, pc}

0000da1c <z_row_span_with_buffer_offsets_get>:
{
    da1c:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
    da1e:	7b04      	ldrb	r4, [r0, #12]
    da20:	8943      	ldrh	r3, [r0, #10]
    da22:	4421      	add	r1, r4
    da24:	1910      	adds	r0, r2, r4
    da26:	fbb1 f1f3 	udiv	r1, r1, r3
    da2a:	fbb0 f0f3 	udiv	r0, r0, r3
}
    da2e:	1a40      	subs	r0, r0, r1
    da30:	bd10      	pop	{r4, pc}

0000da32 <z_shell_multiline_data_calc>:
{
    da32:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
    da34:	7b05      	ldrb	r5, [r0, #12]
    da36:	8943      	ldrh	r3, [r0, #10]
    da38:	4429      	add	r1, r5
    da3a:	fbb1 f4f3 	udiv	r4, r1, r3
    da3e:	fb03 1114 	mls	r1, r3, r4, r1
    da42:	3101      	adds	r1, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    da44:	442a      	add	r2, r5
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
    da46:	3401      	adds	r4, #1
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
    da48:	8001      	strh	r1, [r0, #0]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    da4a:	fbb2 f1f3 	udiv	r1, r2, r3
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    da4e:	fb03 2211 	mls	r2, r3, r1, r2
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
    da52:	8084      	strh	r4, [r0, #4]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    da54:	3201      	adds	r2, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    da56:	1c4c      	adds	r4, r1, #1
    da58:	80c4      	strh	r4, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    da5a:	8042      	strh	r2, [r0, #2]
}
    da5c:	bd30      	pop	{r4, r5, pc}

0000da5e <z_shell_make_argv>:
{
    da5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*argc = 0;
    da62:	2600      	movs	r6, #0
{
    da64:	4607      	mov	r7, r0
    da66:	4688      	mov	r8, r1
    da68:	4614      	mov	r4, r2
    da6a:	4699      	mov	r9, r3
	*argc = 0;
    da6c:	6006      	str	r6, [r0, #0]
	char quote = 0;
    da6e:	46b2      	mov	sl, r6
		c = *cmd;
    da70:	7820      	ldrb	r0, [r4, #0]
		if (c == '\0') {
    da72:	2800      	cmp	r0, #0
    da74:	f000 80be 	beq.w	dbf4 <z_shell_make_argv+0x196>
		if (isspace((int) c) != 0) {
    da78:	f7ff ffb1 	bl	d9de <isspace>
    da7c:	b120      	cbz	r0, da88 <z_shell_make_argv+0x2a>
			*cmd++ = '\0';
    da7e:	f804 ab01 	strb.w	sl, [r4], #1
			continue;
    da82:	e7f5      	b.n	da70 <z_shell_make_argv+0x12>
    da84:	2600      	movs	r6, #0
    da86:	e7f3      	b.n	da70 <z_shell_make_argv+0x12>
		argv[(*argc)++] = cmd;
    da88:	683b      	ldr	r3, [r7, #0]
    da8a:	1c5a      	adds	r2, r3, #1
    da8c:	603a      	str	r2, [r7, #0]
    da8e:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		if (*argc == max_argc) {
    da92:	683b      	ldr	r3, [r7, #0]
    da94:	454b      	cmp	r3, r9
    da96:	f000 80ad 	beq.w	dbf4 <z_shell_make_argv+0x196>
	char quote = 0;
    da9a:	4606      	mov	r6, r0
		c = *cmd;
    da9c:	7822      	ldrb	r2, [r4, #0]
		if (c == '\0') {
    da9e:	2a00      	cmp	r2, #0
    daa0:	d0e6      	beq.n	da70 <z_shell_make_argv+0x12>
		if (!quote) {
    daa2:	b9a6      	cbnz	r6, dace <z_shell_make_argv+0x70>
		c = *cmd;
    daa4:	4616      	mov	r6, r2
		if (c == '\0') {
    daa6:	4623      	mov	r3, r4
    daa8:	461c      	mov	r4, r3
			switch (c) {
    daaa:	2e27      	cmp	r6, #39	; 0x27
    daac:	d004      	beq.n	dab8 <z_shell_make_argv+0x5a>
    daae:	2e5c      	cmp	r6, #92	; 0x5c
    dab0:	d020      	beq.n	daf4 <z_shell_make_argv+0x96>
    dab2:	2e22      	cmp	r6, #34	; 0x22
    dab4:	f040 8091 	bne.w	dbda <z_shell_make_argv+0x17c>
						z_shell_strlen(cmd));
    dab8:	4620      	mov	r0, r4
    daba:	f7ff ff9a 	bl	d9f2 <z_shell_strlen>
				memmove(cmd, cmd + 1,
    dabe:	1c61      	adds	r1, r4, #1
						z_shell_strlen(cmd));
    dac0:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
    dac2:	4620      	mov	r0, r4
    dac4:	f001 f8d4 	bl	ec70 <memmove>
		c = *cmd;
    dac8:	7822      	ldrb	r2, [r4, #0]
		if (c == '\0') {
    daca:	2a00      	cmp	r2, #0
    dacc:	d0d0      	beq.n	da70 <z_shell_make_argv+0x12>
		if (quote == c) {
    dace:	42b2      	cmp	r2, r6
				cmd += 1;
    dad0:	46a3      	mov	fp, r4
				memmove(cmd, cmd + 1,
    dad2:	f104 0401 	add.w	r4, r4, #1
		if (quote == c) {
    dad6:	d11b      	bne.n	db10 <z_shell_make_argv+0xb2>
			memmove(cmd, cmd + 1, z_shell_strlen(cmd));
    dad8:	4658      	mov	r0, fp
    dada:	f7ff ff8a 	bl	d9f2 <z_shell_strlen>
    dade:	4621      	mov	r1, r4
    dae0:	4602      	mov	r2, r0
    dae2:	4658      	mov	r0, fp
    dae4:	f001 f8c4 	bl	ec70 <memmove>
		c = *cmd;
    dae8:	f89b 6000 	ldrb.w	r6, [fp]
		if (c == '\0') {
    daec:	465c      	mov	r4, fp
    daee:	2e00      	cmp	r6, #0
    daf0:	d1d9      	bne.n	daa6 <z_shell_make_argv+0x48>
    daf2:	e7bd      	b.n	da70 <z_shell_make_argv+0x12>
						z_shell_strlen(cmd));
    daf4:	4620      	mov	r0, r4
    daf6:	f7ff ff7c 	bl	d9f2 <z_shell_strlen>
				memmove(cmd, cmd + 1,
    dafa:	1c65      	adds	r5, r4, #1
						z_shell_strlen(cmd));
    dafc:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
    dafe:	4629      	mov	r1, r5
    db00:	4620      	mov	r0, r4
    db02:	f001 f8b5 	bl	ec70 <memmove>
		c = *cmd;
    db06:	7866      	ldrb	r6, [r4, #1]
				cmd += 1;
    db08:	462c      	mov	r4, r5
		if (c == '\0') {
    db0a:	2e00      	cmp	r6, #0
    db0c:	d1cd      	bne.n	daaa <z_shell_make_argv+0x4c>
    db0e:	e7af      	b.n	da70 <z_shell_make_argv+0x12>
		if (quote && c == '\\') {
    db10:	2a5c      	cmp	r2, #92	; 0x5c
    db12:	f89b 2001 	ldrb.w	r2, [fp, #1]
    db16:	d1d8      	bne.n	daca <z_shell_make_argv+0x6c>
			if (t == quote) {
    db18:	42b2      	cmp	r2, r6
			char t = *(cmd + 1);
    db1a:	4610      	mov	r0, r2
			if (t == quote) {
    db1c:	d108      	bne.n	db30 <z_shell_make_argv+0xd2>
						z_shell_strlen(cmd));
    db1e:	4658      	mov	r0, fp
    db20:	f7ff ff67 	bl	d9f2 <z_shell_strlen>
				memmove(cmd, cmd + 1,
    db24:	4621      	mov	r1, r4
						z_shell_strlen(cmd));
    db26:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
    db28:	4658      	mov	r0, fp
    db2a:	f001 f8a1 	bl	ec70 <memmove>
				continue;
    db2e:	e7b5      	b.n	da9c <z_shell_make_argv+0x3e>
			if (t == '0') {
    db30:	2a30      	cmp	r2, #48	; 0x30
    db32:	d125      	bne.n	db80 <z_shell_make_argv+0x122>
    db34:	2302      	movs	r3, #2
				uint8_t v = 0U;
    db36:	2500      	movs	r5, #0
					t = *(cmd + i);
    db38:	f81b 0003 	ldrb.w	r0, [fp, r3]
					if (t >= '0' && t <= '7') {
    db3c:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
    db40:	b2c9      	uxtb	r1, r1
    db42:	2907      	cmp	r1, #7
    db44:	d819      	bhi.n	db7a <z_shell_make_argv+0x11c>
						v = (v << 3) | (t - '0');
    db46:	00ed      	lsls	r5, r5, #3
				for (i = 2U; i < (2 + 3); i++) {
    db48:	3301      	adds	r3, #1
    db4a:	b2ed      	uxtb	r5, r5
    db4c:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
    db4e:	ea45 0501 	orr.w	r5, r5, r1
				for (i = 2U; i < (2 + 3); i++) {
    db52:	d1f1      	bne.n	db38 <z_shell_make_argv+0xda>
					memmove(cmd, cmd + (i - 1),
    db54:	1e59      	subs	r1, r3, #1
    db56:	4459      	add	r1, fp
						z_shell_strlen(cmd) - (i - 2));
    db58:	4658      	mov	r0, fp
					memmove(cmd, cmd + (i - 1),
    db5a:	9301      	str	r3, [sp, #4]
    db5c:	9100      	str	r1, [sp, #0]
						z_shell_strlen(cmd) - (i - 2));
    db5e:	f7ff ff48 	bl	d9f2 <z_shell_strlen>
    db62:	9b01      	ldr	r3, [sp, #4]
					memmove(cmd, cmd + (i - 1),
    db64:	9900      	ldr	r1, [sp, #0]
						z_shell_strlen(cmd) - (i - 2));
    db66:	3b02      	subs	r3, #2
					memmove(cmd, cmd + (i - 1),
    db68:	1ac2      	subs	r2, r0, r3
    db6a:	4658      	mov	r0, fp
    db6c:	f001 f880 	bl	ec70 <memmove>
		c = *cmd;
    db70:	f89b 2001 	ldrb.w	r2, [fp, #1]
					*cmd++ = v;
    db74:	f88b 5000 	strb.w	r5, [fp]
		if (c == '\0') {
    db78:	e7a7      	b.n	daca <z_shell_make_argv+0x6c>
    db7a:	b2db      	uxtb	r3, r3
				if (i > 2) {
    db7c:	2b02      	cmp	r3, #2
    db7e:	d1e9      	bne.n	db54 <z_shell_make_argv+0xf6>
			if (t == 'x') {
    db80:	2878      	cmp	r0, #120	; 0x78
    db82:	d125      	bne.n	dbd0 <z_shell_make_argv+0x172>
    db84:	2102      	movs	r1, #2
				uint8_t v = 0U;
    db86:	2500      	movs	r5, #0
					t = *(cmd + i);
    db88:	f81b 3001 	ldrb.w	r3, [fp, r1]
					if (t >= '0' && t <= '9') {
    db8c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    db90:	b2c0      	uxtb	r0, r0
    db92:	2809      	cmp	r0, #9
    db94:	d808      	bhi.n	dba8 <z_shell_make_argv+0x14a>
						v = (v << 4) | (t - '0');
    db96:	012d      	lsls	r5, r5, #4
    db98:	b2ed      	uxtb	r5, r5
    db9a:	4305      	orrs	r5, r0
				for (i = 2U; i < (2 + 2); i++) {
    db9c:	2902      	cmp	r1, #2
    db9e:	d001      	beq.n	dba4 <z_shell_make_argv+0x146>
    dba0:	2304      	movs	r3, #4
    dba2:	e7d7      	b.n	db54 <z_shell_make_argv+0xf6>
    dba4:	2103      	movs	r1, #3
    dba6:	e7ef      	b.n	db88 <z_shell_make_argv+0x12a>
					} else if ((t >= 'a') &&
    dba8:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
    dbac:	2805      	cmp	r0, #5
    dbae:	d805      	bhi.n	dbbc <z_shell_make_argv+0x15e>
						v = (v << 4) | (t - 'a' + 10);
    dbb0:	012d      	lsls	r5, r5, #4
    dbb2:	b2ed      	uxtb	r5, r5
    dbb4:	3b57      	subs	r3, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
    dbb6:	431d      	orrs	r5, r3
    dbb8:	b2ed      	uxtb	r5, r5
    dbba:	e7ef      	b.n	db9c <z_shell_make_argv+0x13e>
					} else if ((t >= 'A') && (t <= 'F')) {
    dbbc:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
    dbc0:	2805      	cmp	r0, #5
    dbc2:	d803      	bhi.n	dbcc <z_shell_make_argv+0x16e>
						v = (v << 4) | (t - 'A' + 10);
    dbc4:	012d      	lsls	r5, r5, #4
    dbc6:	b2ed      	uxtb	r5, r5
    dbc8:	3b37      	subs	r3, #55	; 0x37
    dbca:	e7f4      	b.n	dbb6 <z_shell_make_argv+0x158>
				if (i > 2) {
    dbcc:	2902      	cmp	r1, #2
    dbce:	d102      	bne.n	dbd6 <z_shell_make_argv+0x178>
		cmd += 1;
    dbd0:	f10b 0401 	add.w	r4, fp, #1
		c = *cmd;
    dbd4:	e779      	b.n	daca <z_shell_make_argv+0x6c>
    dbd6:	2303      	movs	r3, #3
    dbd8:	e7bc      	b.n	db54 <z_shell_make_argv+0xf6>
		if (!quote && isspace((int) c) != 0) {
    dbda:	4630      	mov	r0, r6
    dbdc:	f7ff feff 	bl	d9de <isspace>
    dbe0:	2800      	cmp	r0, #0
    dbe2:	f47f af4f 	bne.w	da84 <z_shell_make_argv+0x26>
		c = *cmd;
    dbe6:	7866      	ldrb	r6, [r4, #1]
		cmd += 1;
    dbe8:	1c63      	adds	r3, r4, #1
		if (c == '\0') {
    dbea:	2e00      	cmp	r6, #0
    dbec:	f47f af5c 	bne.w	daa8 <z_shell_make_argv+0x4a>
		cmd += 1;
    dbf0:	461c      	mov	r4, r3
    dbf2:	e73d      	b.n	da70 <z_shell_make_argv+0x12>
}
    dbf4:	4630      	mov	r0, r6
    dbf6:	b003      	add	sp, #12
    dbf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000dbfc <z_shell_pattern_remove>:
{
    dbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dbfe:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
    dc00:	4611      	mov	r1, r2
{
    dc02:	4615      	mov	r5, r2
    dc04:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
    dc06:	f000 ffa7 	bl	eb58 <strstr>
    dc0a:	4604      	mov	r4, r0
	uint16_t pattern_len = z_shell_strlen(pattern);
    dc0c:	4628      	mov	r0, r5
    dc0e:	f7ff fef0 	bl	d9f2 <z_shell_strlen>
    dc12:	4605      	mov	r5, r0
	if (!pattern_addr) {
    dc14:	b1c4      	cbz	r4, dc48 <z_shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
    dc16:	42a7      	cmp	r7, r4
    dc18:	d207      	bcs.n	dc2a <z_shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
    dc1a:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    dc1e:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
    dc20:	bf02      	ittt	eq
    dc22:	3501      	addeq	r5, #1
    dc24:	b2ad      	uxtheq	r5, r5
			pattern_addr--; /* set pointer to space */
    dc26:	f104 34ff 	addeq.w	r4, r4, #4294967295
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    dc2a:	4620      	mov	r0, r4
    dc2c:	f7ff fee1 	bl	d9f2 <z_shell_strlen>
	*buff_len -= pattern_len;
    dc30:	8833      	ldrh	r3, [r6, #0]
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    dc32:	1c42      	adds	r2, r0, #1
	*buff_len -= pattern_len;
    dc34:	1b5b      	subs	r3, r3, r5
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    dc36:	1b52      	subs	r2, r2, r5
	*buff_len -= pattern_len;
    dc38:	8033      	strh	r3, [r6, #0]
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
    dc3a:	1961      	adds	r1, r4, r5
    dc3c:	4620      	mov	r0, r4
    dc3e:	b292      	uxth	r2, r2
}
    dc40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
    dc44:	f001 b814 	b.w	ec70 <memmove>
}
    dc48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000dc4a <z_shell_find_cmd>:
 */
const struct shell_static_entry *z_shell_find_cmd(
					const struct shell_static_entry *parent,
					const char *cmd_str,
					struct shell_static_entry *dloc)
{
    dc4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc4e:	4688      	mov	r8, r1
    dc50:	b086      	sub	sp, #24
    dc52:	4617      	mov	r7, r2
	 * dynamic commands at the same time (current and subcommand) they
	 * will operate on the same memory region what can cause undefined
	 * behaviour.
	 * Hence we need a separate memory for each of them.
	 */
	if (parent) {
    dc54:	4604      	mov	r4, r0
    dc56:	b128      	cbz	r0, dc64 <z_shell_find_cmd+0x1a>
		memcpy(&parent_cpy, parent, sizeof(struct shell_static_entry));
    dc58:	4601      	mov	r1, r0
    dc5a:	2214      	movs	r2, #20
    dc5c:	a801      	add	r0, sp, #4
    dc5e:	f001 f81e 	bl	ec9e <memcpy>
		parent = &parent_cpy;
    dc62:	ac01      	add	r4, sp, #4
    dc64:	2600      	movs	r6, #0
	}

	while ((entry = z_shell_cmd_get(parent, idx++, dloc)) != NULL) {
    dc66:	4631      	mov	r1, r6
    dc68:	463a      	mov	r2, r7
    dc6a:	4620      	mov	r0, r4
    dc6c:	f7f8 f9ae 	bl	5fcc <z_shell_cmd_get>
    dc70:	3601      	adds	r6, #1
    dc72:	4605      	mov	r5, r0
    dc74:	b128      	cbz	r0, dc82 <z_shell_find_cmd+0x38>
		if (strcmp(cmd_str, entry->syntax) == 0) {
    dc76:	6829      	ldr	r1, [r5, #0]
    dc78:	4640      	mov	r0, r8
    dc7a:	f000 ffc9 	bl	ec10 <strcmp>
    dc7e:	2800      	cmp	r0, #0
    dc80:	d1f1      	bne.n	dc66 <z_shell_find_cmd+0x1c>
			return entry;
		}
	}

	return NULL;
}
    dc82:	4628      	mov	r0, r5
    dc84:	b006      	add	sp, #24
    dc86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000dc8a <z_shell_get_last_command>:
					size_t argc,
					const char *argv[],
					size_t *match_arg,
					struct shell_static_entry *dloc,
					bool only_static)
{
    dc8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dc8e:	461c      	mov	r4, r3
    dc90:	f8dd 8020 	ldr.w	r8, [sp, #32]
    dc94:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	const struct shell_static_entry *prev_entry = NULL;

	*match_arg = Z_SHELL_CMD_ROOT_LVL;
    dc98:	2300      	movs	r3, #0
{
    dc9a:	460f      	mov	r7, r1
    dc9c:	4616      	mov	r6, r2
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
    dc9e:	6023      	str	r3, [r4, #0]

	while (*match_arg < argc) {
    dca0:	6823      	ldr	r3, [r4, #0]
    dca2:	42bb      	cmp	r3, r7

		if (IS_ENABLED(CONFIG_SHELL_WILDCARD)) {
			/* ignore wildcard argument */
			if (z_shell_has_wildcard(argv[*match_arg])) {
				(*match_arg)++;
				continue;
    dca4:	4605      	mov	r5, r0
	while (*match_arg < argc) {
    dca6:	d21b      	bcs.n	dce0 <z_shell_get_last_command+0x56>
			if (z_shell_has_wildcard(argv[*match_arg])) {
    dca8:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
    dcac:	f000 fe12 	bl	e8d4 <z_shell_has_wildcard>
    dcb0:	6823      	ldr	r3, [r4, #0]
    dcb2:	4682      	mov	sl, r0
    dcb4:	b118      	cbz	r0, dcbe <z_shell_get_last_command+0x34>
				(*match_arg)++;
    dcb6:	3301      	adds	r3, #1
    dcb8:	6023      	str	r3, [r4, #0]
				continue;
    dcba:	4628      	mov	r0, r5
    dcbc:	e7f0      	b.n	dca0 <z_shell_get_last_command+0x16>
			}
		}

		prev_entry = entry;
		entry = z_shell_find_cmd(entry, argv[*match_arg], dloc);
    dcbe:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    dcc2:	4642      	mov	r2, r8
    dcc4:	4628      	mov	r0, r5
    dcc6:	f7ff ffc0 	bl	dc4a <z_shell_find_cmd>
		if (entry) {
    dcca:	b148      	cbz	r0, dce0 <z_shell_get_last_command+0x56>
			(*match_arg)++;
    dccc:	6823      	ldr	r3, [r4, #0]
    dcce:	1c5a      	adds	r2, r3, #1
    dcd0:	6022      	str	r2, [r4, #0]
		} else {
			entry = prev_entry;
			break;
		}

		if (only_static && (entry == dloc)) {
    dcd2:	f1b9 0f00 	cmp.w	r9, #0
    dcd6:	d0e3      	beq.n	dca0 <z_shell_get_last_command+0x16>
    dcd8:	4580      	cmp	r8, r0
    dcda:	d1e1      	bne.n	dca0 <z_shell_get_last_command+0x16>
			(*match_arg)--;
    dcdc:	6023      	str	r3, [r4, #0]
			return NULL;
    dcde:	4655      	mov	r5, sl
		}
	}

	return entry;
}
    dce0:	4628      	mov	r0, r5
    dce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000dce6 <z_shell_spaces_trim>:




void z_shell_spaces_trim(char *str)
{
    dce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dcea:	4607      	mov	r7, r0
	uint16_t len = z_shell_strlen(str);
    dcec:	f7ff fe81 	bl	d9f2 <z_shell_strlen>
    dcf0:	4606      	mov	r6, r0
	uint16_t shift = 0U;

	if (!str) {
    dcf2:	bb37      	cbnz	r7, dd42 <z_shell_spaces_trim+0x5c>

				break;
			}
		}
	}
}
    dcf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (shift > 0) {
    dcf8:	b154      	cbz	r4, dd10 <z_shell_spaces_trim+0x2a>
						len - j + 1);
    dcfa:	b28a      	uxth	r2, r1
    dcfc:	1ab2      	subs	r2, r6, r2
					memmove(&str[i + 1],
    dcfe:	3301      	adds	r3, #1
    dd00:	3201      	adds	r2, #1
    dd02:	4439      	add	r1, r7
    dd04:	18f8      	adds	r0, r7, r3
    dd06:	f000 ffb3 	bl	ec70 <memmove>
					len -= shift;
    dd0a:	1b34      	subs	r4, r6, r4
    dd0c:	b2a6      	uxth	r6, r4
					shift = 0U;
    dd0e:	4644      	mov	r4, r8
	for (uint16_t i = 0; i < len - 1; i++) {
    dd10:	1e73      	subs	r3, r6, #1
    dd12:	429d      	cmp	r5, r3
    dd14:	daee      	bge.n	dcf4 <z_shell_spaces_trim+0xe>
		if (isspace((int)str[i]) != 0) {
    dd16:	5d78      	ldrb	r0, [r7, r5]
    dd18:	f7ff fe61 	bl	d9de <isspace>
    dd1c:	462b      	mov	r3, r5
			for (uint16_t j = i + 1; j < len; j++) {
    dd1e:	3501      	adds	r5, #1
    dd20:	b2ad      	uxth	r5, r5
		if (isspace((int)str[i]) != 0) {
    dd22:	2800      	cmp	r0, #0
    dd24:	d0f4      	beq.n	dd10 <z_shell_spaces_trim+0x2a>
    dd26:	4629      	mov	r1, r5
			for (uint16_t j = i + 1; j < len; j++) {
    dd28:	b28a      	uxth	r2, r1
    dd2a:	4296      	cmp	r6, r2
    dd2c:	d9f0      	bls.n	dd10 <z_shell_spaces_trim+0x2a>
				if (isspace((int)str[j]) != 0) {
    dd2e:	5c78      	ldrb	r0, [r7, r1]
    dd30:	f7ff fe55 	bl	d9de <isspace>
    dd34:	4680      	mov	r8, r0
    dd36:	2800      	cmp	r0, #0
    dd38:	d0de      	beq.n	dcf8 <z_shell_spaces_trim+0x12>
					shift++;
    dd3a:	3401      	adds	r4, #1
				if (isspace((int)str[j]) != 0) {
    dd3c:	3101      	adds	r1, #1
					shift++;
    dd3e:	b2a4      	uxth	r4, r4
			for (uint16_t j = i + 1; j < len; j++) {
    dd40:	e7f2      	b.n	dd28 <z_shell_spaces_trim+0x42>
	for (uint16_t i = 0; i < len - 1; i++) {
    dd42:	2500      	movs	r5, #0
	uint16_t shift = 0U;
    dd44:	462c      	mov	r4, r5
    dd46:	e7e3      	b.n	dd10 <z_shell_spaces_trim+0x2a>

0000dd48 <z_shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void z_shell_cmd_trim(const struct shell *sh)
{
    dd48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer_trim(sh->ctx->cmd_buff, &sh->ctx->cmd_buff_len);
    dd4a:	6884      	ldr	r4, [r0, #8]
	if (buff[0] == '\0') {
    dd4c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
{
    dd50:	4605      	mov	r5, r0
	if (buff[0] == '\0') {
    dd52:	b953      	cbnz	r3, dd6a <z_shell_cmd_trim+0x22>
	sh->ctx->cmd_buff_pos = sh->ctx->cmd_buff_len;
    dd54:	68ab      	ldr	r3, [r5, #8]
    dd56:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    dd58:	87da      	strh	r2, [r3, #62]	; 0x3e
}
    dd5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*buff_len -= 1U;
    dd5c:	3a01      	subs	r2, #1
    dd5e:	b292      	uxth	r2, r2
    dd60:	87a2      	strh	r2, [r4, #60]	; 0x3c
		if (*buff_len == 0U) {
    dd62:	b922      	cbnz	r2, dd6e <z_shell_cmd_trim+0x26>
			buff[0] = '\0';
    dd64:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
			return;
    dd68:	e7f4      	b.n	dd54 <z_shell_cmd_trim+0xc>
	buffer_trim(sh->ctx->cmd_buff, &sh->ctx->cmd_buff_len);
    dd6a:	f104 0642 	add.w	r6, r4, #66	; 0x42
	while (isspace((int) buff[*buff_len - 1U]) != 0) {
    dd6e:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    dd70:	18b3      	adds	r3, r6, r2
    dd72:	f813 0c01 	ldrb.w	r0, [r3, #-1]
    dd76:	f7ff fe32 	bl	d9de <isspace>
    dd7a:	4603      	mov	r3, r0
    dd7c:	2800      	cmp	r0, #0
    dd7e:	d1ed      	bne.n	dd5c <z_shell_cmd_trim+0x14>
	buff[*buff_len] = '\0';
    dd80:	54b0      	strb	r0, [r6, r2]
	while (isspace((int) buff[i++]) != 0) {
    dd82:	b29a      	uxth	r2, r3
    dd84:	fa16 f183 	uxtah	r1, r6, r3
    dd88:	5cb0      	ldrb	r0, [r6, r2]
    dd8a:	f7ff fe28 	bl	d9de <isspace>
    dd8e:	461f      	mov	r7, r3
    dd90:	3301      	adds	r3, #1
    dd92:	2800      	cmp	r0, #0
    dd94:	d1f5      	bne.n	dd82 <z_shell_cmd_trim+0x3a>
    dd96:	b2bf      	uxth	r7, r7
	if (--i > 0) {
    dd98:	2f00      	cmp	r7, #0
    dd9a:	d0db      	beq.n	dd54 <z_shell_cmd_trim+0xc>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
    dd9c:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    dd9e:	3301      	adds	r3, #1
    dda0:	1a9a      	subs	r2, r3, r2
    dda2:	4630      	mov	r0, r6
    dda4:	f000 ff64 	bl	ec70 <memmove>
		*buff_len = *buff_len - i;
    dda8:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    ddaa:	1bdb      	subs	r3, r3, r7
    ddac:	87a3      	strh	r3, [r4, #60]	; 0x3c
    ddae:	e7d1      	b.n	dd54 <z_shell_cmd_trim+0xc>

0000ddb0 <shell_device_lookup>:

const struct device *shell_device_lookup(size_t idx,
				   const char *prefix)
{
    ddb0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    ddb4:	4607      	mov	r7, r0
	size_t match_idx = 0;
	const struct device *dev;
	size_t len = z_device_get_all_static(&dev);
    ddb6:	a801      	add	r0, sp, #4
{
    ddb8:	460c      	mov	r4, r1
	size_t len = z_device_get_all_static(&dev);
    ddba:	f7fc fdc5 	bl	a948 <z_device_get_all_static>
	const struct device *dev_end = dev + len;
    ddbe:	9d01      	ldr	r5, [sp, #4]
    ddc0:	231c      	movs	r3, #28
    ddc2:	fb03 5500 	mla	r5, r3, r0, r5
	size_t match_idx = 0;
    ddc6:	2600      	movs	r6, #0

	while (dev < dev_end) {
    ddc8:	9801      	ldr	r0, [sp, #4]
    ddca:	42a8      	cmp	r0, r5
    ddcc:	d301      	bcc.n	ddd2 <shell_device_lookup+0x22>
			++match_idx;
		}
		++dev;
	}

	return NULL;
    ddce:	2000      	movs	r0, #0
    ddd0:	e00d      	b.n	ddee <shell_device_lookup+0x3e>
	return z_device_is_ready(dev);
    ddd2:	f001 fcad 	bl	f730 <z_device_is_ready>
		if (device_is_ready(dev)
    ddd6:	b1c8      	cbz	r0, de0c <shell_device_lookup+0x5c>
		    && (dev->name != NULL)
    ddd8:	9b01      	ldr	r3, [sp, #4]
    ddda:	6818      	ldr	r0, [r3, #0]
    dddc:	b1b0      	cbz	r0, de0c <shell_device_lookup+0x5c>
		    && (strlen(dev->name) != 0)
    ddde:	f000 ff07 	bl	ebf0 <strlen>
    dde2:	b198      	cbz	r0, de0c <shell_device_lookup+0x5c>
			|| (strncmp(prefix, dev->name,
    dde4:	9b01      	ldr	r3, [sp, #4]
		    && ((prefix == NULL)
    dde6:	b92c      	cbnz	r4, ddf4 <shell_device_lookup+0x44>
			if (match_idx == idx) {
    dde8:	42be      	cmp	r6, r7
    ddea:	d113      	bne.n	de14 <shell_device_lookup+0x64>
				return dev;
    ddec:	9801      	ldr	r0, [sp, #4]
}
    ddee:	b002      	add	sp, #8
    ddf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			|| (strncmp(prefix, dev->name,
    ddf4:	4620      	mov	r0, r4
    ddf6:	f8d3 8000 	ldr.w	r8, [r3]
    ddfa:	f000 fef9 	bl	ebf0 <strlen>
    ddfe:	4641      	mov	r1, r8
    de00:	4602      	mov	r2, r0
    de02:	4620      	mov	r0, r4
    de04:	f000 ff10 	bl	ec28 <strncmp>
    de08:	2800      	cmp	r0, #0
    de0a:	d0ed      	beq.n	dde8 <shell_device_lookup+0x38>
		++dev;
    de0c:	9b01      	ldr	r3, [sp, #4]
    de0e:	331c      	adds	r3, #28
    de10:	9301      	str	r3, [sp, #4]
    de12:	e7d9      	b.n	ddc8 <shell_device_lookup+0x18>
			++match_idx;
    de14:	3601      	adds	r6, #1
    de16:	e7f9      	b.n	de0c <shell_device_lookup+0x5c>

0000de18 <shell_strtoul>:

	return val;
}

unsigned long shell_strtoul(const char *str, int base, int *err)
{
    de18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	unsigned long val;
	char *endptr = NULL;

	if (*str == '-') {
    de1a:	7803      	ldrb	r3, [r0, #0]
	char *endptr = NULL;
    de1c:	2700      	movs	r7, #0
	if (*str == '-') {
    de1e:	2b2d      	cmp	r3, #45	; 0x2d
{
    de20:	4604      	mov	r4, r0
    de22:	460d      	mov	r5, r1
    de24:	4616      	mov	r6, r2
	char *endptr = NULL;
    de26:	9701      	str	r7, [sp, #4]
	if (*str == '-') {
    de28:	d106      	bne.n	de38 <shell_strtoul+0x20>
		*err = -EINVAL;
		return 0;
    de2a:	f06f 0315 	mvn.w	r3, #21
	}

	errno = 0;
	val = strtoul(str, &endptr, base);
	if (errno == ERANGE) {
		*err = -ERANGE;
    de2e:	6033      	str	r3, [r6, #0]
		return 0;
    de30:	2500      	movs	r5, #0
		*err = -EINVAL;
		return 0;
	}

	return val;
}
    de32:	4628      	mov	r0, r5
    de34:	b003      	add	sp, #12
    de36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    de38:	f7fc fdbe 	bl	a9b8 <z_impl_z_errno>
	val = strtoul(str, &endptr, base);
    de3c:	462a      	mov	r2, r5
	errno = 0;
    de3e:	6007      	str	r7, [r0, #0]
	val = strtoul(str, &endptr, base);
    de40:	a901      	add	r1, sp, #4
    de42:	4620      	mov	r0, r4
    de44:	f000 fe11 	bl	ea6a <strtoul>
    de48:	4605      	mov	r5, r0
    de4a:	f7fc fdb5 	bl	a9b8 <z_impl_z_errno>
	if (errno == ERANGE) {
    de4e:	6803      	ldr	r3, [r0, #0]
    de50:	2b22      	cmp	r3, #34	; 0x22
    de52:	d102      	bne.n	de5a <shell_strtoul+0x42>
    de54:	f06f 0321 	mvn.w	r3, #33	; 0x21
    de58:	e7e9      	b.n	de2e <shell_strtoul+0x16>
    de5a:	f7fc fdad 	bl	a9b8 <z_impl_z_errno>
	} else if (errno || endptr == str || *endptr) {
    de5e:	6803      	ldr	r3, [r0, #0]
    de60:	2b00      	cmp	r3, #0
    de62:	d1e2      	bne.n	de2a <shell_strtoul+0x12>
    de64:	9b01      	ldr	r3, [sp, #4]
    de66:	42a3      	cmp	r3, r4
    de68:	d0df      	beq.n	de2a <shell_strtoul+0x12>
    de6a:	781b      	ldrb	r3, [r3, #0]
    de6c:	2b00      	cmp	r3, #0
    de6e:	d0e0      	beq.n	de32 <shell_strtoul+0x1a>
    de70:	e7db      	b.n	de2a <shell_strtoul+0x12>

0000de72 <z_shell_raw_fprintf>:
{
    de72:	b40e      	push	{r1, r2, r3}
    de74:	b503      	push	{r0, r1, lr}
    de76:	aa03      	add	r2, sp, #12
    de78:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    de7c:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    de7e:	f7f8 f88d 	bl	5f9c <z_shell_fprintf_fmt>
}
    de82:	b002      	add	sp, #8
    de84:	f85d eb04 	ldr.w	lr, [sp], #4
    de88:	b003      	add	sp, #12
    de8a:	4770      	bx	lr

0000de8c <full_line_cmd>:
{
    de8c:	b538      	push	{r3, r4, r5, lr}
	return ((sh->ctx->cmd_buff_len + z_shell_strlen(sh->ctx->prompt))
    de8e:	6883      	ldr	r3, [r0, #8]
{
    de90:	4604      	mov	r4, r0
	return ((sh->ctx->cmd_buff_len + z_shell_strlen(sh->ctx->prompt))
    de92:	6818      	ldr	r0, [r3, #0]
    de94:	8f9d      	ldrh	r5, [r3, #60]	; 0x3c
	return str == NULL ? 0U : (uint16_t)strlen(str);
    de96:	b110      	cbz	r0, de9e <full_line_cmd+0x12>
    de98:	f000 feaa 	bl	ebf0 <strlen>
    de9c:	b280      	uxth	r0, r0
			% sh->ctx->vt100_ctx.cons.terminal_wid == 0U);
    de9e:	68a2      	ldr	r2, [r4, #8]
    dea0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
	return ((sh->ctx->cmd_buff_len + z_shell_strlen(sh->ctx->prompt))
    dea2:	1943      	adds	r3, r0, r5
			% sh->ctx->vt100_ctx.cons.terminal_wid == 0U);
    dea4:	fbb3 f1f2 	udiv	r1, r3, r2
    dea8:	fb02 3011 	mls	r0, r2, r1, r3
}
    deac:	fab0 f080 	clz	r0, r0
    deb0:	0940      	lsrs	r0, r0, #5
    deb2:	bd38      	pop	{r3, r4, r5, pc}

0000deb4 <z_shell_cursor_in_empty_line>:
{
    deb4:	b538      	push	{r3, r4, r5, lr}
	return (((sh->ctx->cmd_buff_pos * sh->ctx->cfg.flags.echo) +
    deb6:	6883      	ldr	r3, [r0, #8]
    deb8:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
    debc:	8fdd      	ldrh	r5, [r3, #62]	; 0x3e
{
    debe:	4604      	mov	r4, r0
		 z_shell_strlen(sh->ctx->prompt)) %
    dec0:	6818      	ldr	r0, [r3, #0]
	return (((sh->ctx->cmd_buff_pos * sh->ctx->cfg.flags.echo) +
    dec2:	f3c2 0240 	ubfx	r2, r2, #1, #1
    dec6:	4355      	muls	r5, r2
    dec8:	b110      	cbz	r0, ded0 <z_shell_cursor_in_empty_line+0x1c>
    deca:	f000 fe91 	bl	ebf0 <strlen>
    dece:	b280      	uxth	r0, r0
			sh->ctx->vt100_ctx.cons.terminal_wid ==
    ded0:	68a2      	ldr	r2, [r4, #8]
    ded2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
	return (((sh->ctx->cmd_buff_pos * sh->ctx->cfg.flags.echo) +
    ded4:	1943      	adds	r3, r0, r5
		 z_shell_strlen(sh->ctx->prompt)) %
    ded6:	fbb3 f1f2 	udiv	r1, r3, r2
    deda:	fb02 3011 	mls	r0, r2, r1, r3
}
    dede:	fab0 f080 	clz	r0, r0
    dee2:	0940      	lsrs	r0, r0, #5
    dee4:	bd38      	pop	{r3, r4, r5, pc}

0000dee6 <z_shell_op_cond_next_line>:
{
    dee6:	b510      	push	{r4, lr}
    dee8:	4604      	mov	r4, r0
	if (z_shell_cursor_in_empty_line(sh) || full_line_cmd(sh)) {
    deea:	f7ff ffe3 	bl	deb4 <z_shell_cursor_in_empty_line>
    deee:	b120      	cbz	r0, defa <z_shell_op_cond_next_line+0x14>
		z_cursor_next_line_move(sh);
    def0:	6960      	ldr	r0, [r4, #20]
}
    def2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_cursor_next_line_move(sh);
    def6:	f7f8 b8af 	b.w	6058 <z_cursor_next_line_move.isra.0>
	if (z_shell_cursor_in_empty_line(sh) || full_line_cmd(sh)) {
    defa:	4620      	mov	r0, r4
    defc:	f7ff ffc6 	bl	de8c <full_line_cmd>
    df00:	2800      	cmp	r0, #0
    df02:	d1f5      	bne.n	def0 <z_shell_op_cond_next_line+0xa>
}
    df04:	bd10      	pop	{r4, pc}

0000df06 <z_shell_op_cursor_position_synchronize>:
{
    df06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct shell_multiline_cons *cons = &sh->ctx->vt100_ctx.cons;
    df08:	6884      	ldr	r4, [r0, #8]
{
    df0a:	4605      	mov	r5, r0
	z_shell_multiline_data_calc(cons, sh->ctx->cmd_buff_pos,
    df0c:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    df0e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
    df10:	f104 0020 	add.w	r0, r4, #32
    df14:	f7ff fd8d 	bl	da32 <z_shell_multiline_data_calc>
	if (full_line_cmd(sh)) {
    df18:	4628      	mov	r0, r5
	last_line = (cons->cur_y == cons->cur_y_end);
    df1a:	8ca7      	ldrh	r7, [r4, #36]	; 0x24
    df1c:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
	if (full_line_cmd(sh)) {
    df1e:	f7ff ffb5 	bl	de8c <full_line_cmd>
    df22:	b110      	cbz	r0, df2a <z_shell_op_cursor_position_synchronize+0x24>
		z_cursor_next_line_move(sh);
    df24:	6968      	ldr	r0, [r5, #20]
    df26:	f7f8 f897 	bl	6058 <z_cursor_next_line_move.isra.0>
	if (last_line) {
    df2a:	42b7      	cmp	r7, r6
    df2c:	d107      	bne.n	df3e <z_shell_op_cursor_position_synchronize+0x38>
		z_shell_op_cursor_horiz_move(sh, cons->cur_x -
    df2e:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
    df30:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		z_shell_op_cursor_horiz_move(sh, cons->cur_x -
    df32:	4628      	mov	r0, r5
    df34:	1ac9      	subs	r1, r1, r3
}
    df36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_shell_op_cursor_horiz_move(sh, cons->cur_x -
    df3a:	f7f8 b8a9 	b.w	6090 <z_shell_op_cursor_horiz_move>
		z_shell_op_cursor_vert_move(sh, cons->cur_y_end - cons->cur_y);
    df3e:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
    df40:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    df42:	4628      	mov	r0, r5
    df44:	1ac9      	subs	r1, r1, r3
    df46:	f7f8 f88d 	bl	6064 <z_shell_op_cursor_vert_move>
    df4a:	e7f0      	b.n	df2e <z_shell_op_cursor_position_synchronize+0x28>

0000df4c <z_shell_op_cursor_move>:
{
    df4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    df4e:	4604      	mov	r4, r0
	struct shell_multiline_cons *cons = &sh->ctx->vt100_ctx.cons;
    df50:	6880      	ldr	r0, [r0, #8]
{
    df52:	460d      	mov	r5, r1
	uint16_t new_pos = sh->ctx->cmd_buff_pos + val;
    df54:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
	z_shell_multiline_data_calc(cons, sh->ctx->cmd_buff_pos,
    df56:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    df58:	3020      	adds	r0, #32
	uint16_t new_pos = sh->ctx->cmd_buff_pos + val;
    df5a:	440d      	add	r5, r1
	z_shell_multiline_data_calc(cons, sh->ctx->cmd_buff_pos,
    df5c:	f7ff fd69 	bl	da32 <z_shell_multiline_data_calc>
						&sh->ctx->vt100_ctx.cons,
    df60:	68a0      	ldr	r0, [r4, #8]
	uint16_t new_pos = sh->ctx->cmd_buff_pos + val;
    df62:	b2ad      	uxth	r5, r5
	row_span = z_row_span_with_buffer_offsets_get(
    df64:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    df66:	462a      	mov	r2, r5
    df68:	3020      	adds	r0, #32
    df6a:	f7ff fd57 	bl	da1c <z_row_span_with_buffer_offsets_get>
    df6e:	4607      	mov	r7, r0
						&sh->ctx->vt100_ctx.cons,
    df70:	68a0      	ldr	r0, [r4, #8]
	col_span = z_column_span_with_buffer_offsets_get(
    df72:	462a      	mov	r2, r5
    df74:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    df76:	3020      	adds	r0, #32
    df78:	f7ff fd41 	bl	d9fe <z_column_span_with_buffer_offsets_get>
	z_shell_op_cursor_vert_move(sh, -row_span);
    df7c:	4279      	negs	r1, r7
	col_span = z_column_span_with_buffer_offsets_get(
    df7e:	4606      	mov	r6, r0
	z_shell_op_cursor_vert_move(sh, -row_span);
    df80:	4620      	mov	r0, r4
    df82:	f7f8 f86f 	bl	6064 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(sh, col_span);
    df86:	4631      	mov	r1, r6
    df88:	4620      	mov	r0, r4
    df8a:	f7f8 f881 	bl	6090 <z_shell_op_cursor_horiz_move>
	sh->ctx->cmd_buff_pos = new_pos;
    df8e:	68a3      	ldr	r3, [r4, #8]
    df90:	87dd      	strh	r5, [r3, #62]	; 0x3e
}
    df92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000df94 <z_shell_op_cursor_word_move>:
{
    df94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (val < 0) {
    df98:	1e0c      	subs	r4, r1, #0
{
    df9a:	4606      	mov	r6, r0
	if (val < 0) {
    df9c:	da36      	bge.n	e00c <z_shell_op_cursor_word_move+0x78>
		val = -val;
    df9e:	4264      	negs	r4, r4
    dfa0:	b224      	sxth	r4, r4
		sign = -1;
    dfa2:	f04f 35ff 	mov.w	r5, #4294967295
    dfa6:	b2a4      	uxth	r4, r4
    dfa8:	b2af      	uxth	r7, r5
    dfaa:	e016      	b.n	dfda <z_shell_op_cursor_word_move+0x46>
		shift = shift_calc(sh->ctx->cmd_buff,
    dfac:	68b3      	ldr	r3, [r6, #8]
    dfae:	f8b3 c03e 	ldrh.w	ip, [r3, #62]	; 0x3e
    dfb2:	f8b3 803c 	ldrh.w	r8, [r3, #60]	; 0x3c
    dfb6:	f103 0e42 	add.w	lr, r3, #66	; 0x42
    dfba:	4661      	mov	r1, ip
	bool found = false;
    dfbc:	2200      	movs	r2, #0
		if (((idx == 0U) && (sign < 0)) ||
    dfbe:	b981      	cbnz	r1, dfe2 <z_shell_op_cursor_word_move+0x4e>
    dfc0:	1c6b      	adds	r3, r5, #1
    dfc2:	d002      	beq.n	dfca <z_shell_op_cursor_word_move+0x36>
    dfc4:	f1b8 0f00 	cmp.w	r8, #0
    dfc8:	d10f      	bne.n	dfea <z_shell_op_cursor_word_move+0x56>
		idx = pos + ret * sign;
    dfca:	eba1 010c 	sub.w	r1, r1, ip
		z_shell_op_cursor_move(sh, sign * shift);
    dfce:	b209      	sxth	r1, r1
    dfd0:	4630      	mov	r0, r6
    dfd2:	f7ff ffbb 	bl	df4c <z_shell_op_cursor_move>
    dfd6:	3c01      	subs	r4, #1
    dfd8:	b2a4      	uxth	r4, r4
	while (val--) {
    dfda:	2c00      	cmp	r4, #0
    dfdc:	d1e6      	bne.n	dfac <z_shell_op_cursor_word_move+0x18>
}
    dfde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (((idx == 0U) && (sign < 0)) ||
    dfe2:	4588      	cmp	r8, r1
    dfe4:	d101      	bne.n	dfea <z_shell_op_cursor_word_move+0x56>
		    ((idx == len) && (sign > 0))) {
    dfe6:	2d01      	cmp	r5, #1
    dfe8:	d0ef      	beq.n	dfca <z_shell_op_cursor_word_move+0x36>
		if (isalnum((int)str[idx]) != 0) {
    dfea:	f81e 3001 	ldrb.w	r3, [lr, r1]
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    dfee:	f043 0020 	orr.w	r0, r3, #32
    dff2:	3861      	subs	r0, #97	; 0x61
				(int)'z') ? (chr - 32) : (chr));
}

static inline int isalnum(int chr)
{
	return (int)(isalpha(chr) || isdigit(chr));
    dff4:	2819      	cmp	r0, #25
    dff6:	d907      	bls.n	e008 <z_shell_op_cursor_word_move+0x74>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    dff8:	3b30      	subs	r3, #48	; 0x30
	return (int)(isalpha(chr) || isdigit(chr));
    dffa:	2b09      	cmp	r3, #9
    dffc:	d904      	bls.n	e008 <z_shell_op_cursor_word_move+0x74>
			if (found) {
    dffe:	2a00      	cmp	r2, #0
    e000:	d1e3      	bne.n	dfca <z_shell_op_cursor_word_move+0x36>
	while (1) {
    e002:	4439      	add	r1, r7
    e004:	b289      	uxth	r1, r1
		idx = pos + ret * sign;
    e006:	e7da      	b.n	dfbe <z_shell_op_cursor_word_move+0x2a>
			found = true;
    e008:	2201      	movs	r2, #1
    e00a:	e7fa      	b.n	e002 <z_shell_op_cursor_word_move+0x6e>
		sign = 1;
    e00c:	2501      	movs	r5, #1
    e00e:	e7ca      	b.n	dfa6 <z_shell_op_cursor_word_move+0x12>

0000e010 <z_shell_op_cursor_home_move>:
	z_shell_op_cursor_move(sh, -sh->ctx->cmd_buff_pos);
    e010:	6883      	ldr	r3, [r0, #8]
    e012:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
    e014:	4249      	negs	r1, r1
    e016:	b209      	sxth	r1, r1
    e018:	f7ff bf98 	b.w	df4c <z_shell_op_cursor_move>

0000e01c <z_shell_op_cursor_end_move>:
	z_shell_op_cursor_move(sh, sh->ctx->cmd_buff_len -
    e01c:	6883      	ldr	r3, [r0, #8]
    e01e:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
    e020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    e022:	1ac9      	subs	r1, r1, r3
    e024:	b209      	sxth	r1, r1
    e026:	f7ff bf91 	b.w	df4c <z_shell_op_cursor_move>

0000e02a <z_shell_op_left_arrow>:
	if (sh->ctx->cmd_buff_pos > 0) {
    e02a:	6883      	ldr	r3, [r0, #8]
    e02c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    e02e:	b11b      	cbz	r3, e038 <z_shell_op_left_arrow+0xe>
		z_shell_op_cursor_move(sh, -1);
    e030:	f04f 31ff 	mov.w	r1, #4294967295
    e034:	f7ff bf8a 	b.w	df4c <z_shell_op_cursor_move>
}
    e038:	4770      	bx	lr

0000e03a <z_shell_op_right_arrow>:
	if (sh->ctx->cmd_buff_pos < sh->ctx->cmd_buff_len) {
    e03a:	6883      	ldr	r3, [r0, #8]
    e03c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    e03e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    e040:	429a      	cmp	r2, r3
    e042:	d202      	bcs.n	e04a <z_shell_op_right_arrow+0x10>
		z_shell_op_cursor_move(sh, 1);
    e044:	2101      	movs	r1, #1
    e046:	f7ff bf81 	b.w	df4c <z_shell_op_cursor_move>
}
    e04a:	4770      	bx	lr

0000e04c <z_shell_op_delete_from_cursor>:
	sh->ctx->cmd_buff_len = sh->ctx->cmd_buff_pos;
    e04c:	6882      	ldr	r2, [r0, #8]
    e04e:	8fd1      	ldrh	r1, [r2, #62]	; 0x3e
    e050:	8791      	strh	r1, [r2, #60]	; 0x3c
	sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos] = '\0';
    e052:	6883      	ldr	r3, [r0, #8]
    e054:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    e056:	4413      	add	r3, r2
    e058:	2200      	movs	r2, #0
    e05a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	z_clear_eos(sh);
    e05e:	f7f7 bfef 	b.w	6040 <z_clear_eos>

0000e062 <z_shell_cmd_line_erase>:
{
    e062:	b510      	push	{r4, lr}
    e064:	4604      	mov	r4, r0
	z_shell_multiline_data_calc(&sh->ctx->vt100_ctx.cons,
    e066:	6880      	ldr	r0, [r0, #8]
    e068:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    e06a:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    e06c:	3020      	adds	r0, #32
    e06e:	f7ff fce0 	bl	da32 <z_shell_multiline_data_calc>
				   -(sh->ctx->vt100_ctx.cons.cur_x - 1));
    e072:	68a3      	ldr	r3, [r4, #8]
    e074:	8c19      	ldrh	r1, [r3, #32]
	z_shell_op_cursor_horiz_move(sh,
    e076:	4620      	mov	r0, r4
    e078:	f1c1 0101 	rsb	r1, r1, #1
    e07c:	f7f8 f808 	bl	6090 <z_shell_op_cursor_horiz_move>
	z_shell_op_cursor_vert_move(sh, sh->ctx->vt100_ctx.cons.cur_y - 1);
    e080:	68a3      	ldr	r3, [r4, #8]
    e082:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    e084:	4620      	mov	r0, r4
    e086:	3901      	subs	r1, #1
    e088:	f7f7 ffec 	bl	6064 <z_shell_op_cursor_vert_move>
	z_clear_eos(sh);
    e08c:	4620      	mov	r0, r4
}
    e08e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_clear_eos(sh);
    e092:	f7f7 bfd5 	b.w	6040 <z_clear_eos>

0000e096 <z_shell_write>:
{
    e096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e09a:	4605      	mov	r5, r0
    e09c:	b086      	sub	sp, #24
    e09e:	460f      	mov	r7, r1
    e0a0:	4614      	mov	r4, r2
	size_t offset = 0;
    e0a2:	2600      	movs	r6, #0
	while (length) {
    e0a4:	b9a4      	cbnz	r4, e0d0 <z_shell_write+0x3a>
}
    e0a6:	b006      	add	sp, #24
    e0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return sh->ctx->ctx.flags.tx_rdy == 1;
    e0ac:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
		while (!z_flag_tx_rdy_get(sh)) {
    e0b0:	0792      	lsls	r2, r2, #30
    e0b2:	d5fb      	bpl.n	e0ac <z_shell_write+0x16>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e0b4:	f3bf 8f5b 	dmb	ish
    e0b8:	f503 7319 	add.w	r3, r3, #612	; 0x264
    e0bc:	e853 1f00 	ldrex	r1, [r3]
    e0c0:	f021 0102 	bic.w	r1, r1, #2
    e0c4:	e843 1200 	strex	r2, r1, [r3]
    e0c8:	2a00      	cmp	r2, #0
    e0ca:	d1f7      	bne.n	e0bc <z_shell_write+0x26>
    e0cc:	f3bf 8f5b 	dmb	ish
		int err = sh->iface->api->write(sh->iface,
    e0d0:	6868      	ldr	r0, [r5, #4]
    e0d2:	6803      	ldr	r3, [r0, #0]
    e0d4:	4622      	mov	r2, r4
    e0d6:	f8d3 800c 	ldr.w	r8, [r3, #12]
    e0da:	19b9      	adds	r1, r7, r6
    e0dc:	466b      	mov	r3, sp
    e0de:	47c0      	blx	r8
		offset += tmp_cnt;
    e0e0:	9a00      	ldr	r2, [sp, #0]
    e0e2:	4416      	add	r6, r2
		length -= tmp_cnt;
    e0e4:	1aa4      	subs	r4, r4, r2
		if (tmp_cnt == 0 &&
    e0e6:	2a00      	cmp	r2, #0
    e0e8:	d1dc      	bne.n	e0a4 <z_shell_write+0xe>
		    (sh->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
    e0ea:	68ab      	ldr	r3, [r5, #8]
    e0ec:	7919      	ldrb	r1, [r3, #4]
		if (tmp_cnt == 0 &&
    e0ee:	2903      	cmp	r1, #3
    e0f0:	d0ee      	beq.n	e0d0 <z_shell_write+0x3a>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
    e0f2:	2902      	cmp	r1, #2
    e0f4:	d8da      	bhi.n	e0ac <z_shell_write+0x16>
		k_poll_event_init(&event,
    e0f6:	f503 7326 	add.w	r3, r3, #664	; 0x298
    e0fa:	2101      	movs	r1, #1
    e0fc:	a801      	add	r0, sp, #4
    e0fe:	f001 fe19 	bl	fd34 <k_poll_event_init>
	return z_impl_k_poll(events, num_events, timeout);
    e102:	f04f 32ff 	mov.w	r2, #4294967295
    e106:	f04f 33ff 	mov.w	r3, #4294967295
    e10a:	2101      	movs	r1, #1
    e10c:	a801      	add	r0, sp, #4
    e10e:	f7fd fdf9 	bl	bd04 <z_impl_k_poll>
		k_poll_signal_reset(&sh->ctx->signals[SHELL_SIGNAL_TXDONE]);
    e112:	68a8      	ldr	r0, [r5, #8]
    e114:	f500 7026 	add.w	r0, r0, #664	; 0x298
	z_impl_k_poll_signal_reset(sig);
    e118:	f001 fe2e 	bl	fd78 <z_impl_k_poll_signal_reset>
	while (length) {
    e11c:	e7d8      	b.n	e0d0 <z_shell_write+0x3a>

0000e11e <z_shell_print_stream>:
	z_shell_write((const struct shell *) user_ctx, data, len);
    e11e:	f7ff bfba 	b.w	e096 <z_shell_write>

0000e122 <z_shell_vfprintf>:

void z_shell_vfprintf(const struct shell *sh, enum shell_vt100_color color,
		      const char *fmt, va_list args)
{
    e122:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e124:	460f      	mov	r7, r1
	return sh->ctx->cfg.flags.use_colors == 1;
    e126:	6881      	ldr	r1, [r0, #8]
    e128:	461e      	mov	r6, r3
    e12a:	f8d1 3260 	ldr.w	r3, [r1, #608]	; 0x260
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
    e12e:	06db      	lsls	r3, r3, #27
{
    e130:	4604      	mov	r4, r0
    e132:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
    e134:	d517      	bpl.n	e166 <z_shell_vfprintf+0x44>
	    z_flag_use_colors_get(sh)	  &&
    e136:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    e13a:	42bb      	cmp	r3, r7
    e13c:	d013      	beq.n	e166 <z_shell_vfprintf+0x44>
			     enum shell_vt100_color color);

static inline void z_shell_vt100_colors_store(const struct shell *sh,
					      struct shell_vt100_colors *color)
{
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
    e13e:	2202      	movs	r2, #2
    e140:	312e      	adds	r1, #46	; 0x2e
    e142:	a801      	add	r0, sp, #4
    e144:	f000 fdab 	bl	ec9e <memcpy>
	    (color != sh->ctx->vt100_ctx.col.col)) {
		struct shell_vt100_colors col;

		z_shell_vt100_colors_store(sh, &col);
		z_shell_vt100_color_set(sh, color);
    e148:	4639      	mov	r1, r7
    e14a:	4620      	mov	r0, r4
    e14c:	f7f7 ffbe 	bl	60cc <z_shell_vt100_color_set>

		z_shell_fprintf_fmt(sh->fprintf_ctx, fmt, args);
    e150:	6960      	ldr	r0, [r4, #20]
    e152:	4632      	mov	r2, r6
    e154:	4629      	mov	r1, r5
    e156:	f7f7 ff21 	bl	5f9c <z_shell_fprintf_fmt>

		z_shell_vt100_colors_restore(sh, &col);
    e15a:	a901      	add	r1, sp, #4
    e15c:	4620      	mov	r0, r4
    e15e:	f7f7 ffd5 	bl	610c <z_shell_vt100_colors_restore>
	} else {
		z_shell_fprintf_fmt(sh->fprintf_ctx, fmt, args);
	}
}
    e162:	b003      	add	sp, #12
    e164:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_shell_fprintf_fmt(sh->fprintf_ctx, fmt, args);
    e166:	6960      	ldr	r0, [r4, #20]
    e168:	4632      	mov	r2, r6
    e16a:	4629      	mov	r1, r5
}
    e16c:	b003      	add	sp, #12
    e16e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		z_shell_fprintf_fmt(sh->fprintf_ctx, fmt, args);
    e172:	f7f7 bf13 	b.w	5f9c <z_shell_fprintf_fmt>

0000e176 <z_shell_fprintf>:

void z_shell_fprintf(const struct shell *sh,
		     enum shell_vt100_color color,
		     const char *fmt, ...)
{
    e176:	b40c      	push	{r2, r3}
    e178:	b507      	push	{r0, r1, r2, lr}
    e17a:	ab04      	add	r3, sp, #16
    e17c:	f853 2b04 	ldr.w	r2, [r3], #4
	__ASSERT(z_flag_sync_mode_get(sh) || !k_is_in_isr(),
		 "Thread context required.");

	va_list args;

	va_start(args, fmt);
    e180:	9301      	str	r3, [sp, #4]
	z_shell_vfprintf(sh, color, fmt, args);
    e182:	f7ff ffce 	bl	e122 <z_shell_vfprintf>
	va_end(args);
}
    e186:	b003      	add	sp, #12
    e188:	f85d eb04 	ldr.w	lr, [sp], #4
    e18c:	b002      	add	sp, #8
    e18e:	4770      	bx	lr

0000e190 <data_insert>:
{
    e190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t after = sh->ctx->cmd_buff_len - sh->ctx->cmd_buff_pos;
    e194:	6887      	ldr	r7, [r0, #8]
    e196:	8fbe      	ldrh	r6, [r7, #60]	; 0x3c
	if ((sh->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    e198:	18b3      	adds	r3, r6, r2
    e19a:	2bff      	cmp	r3, #255	; 0xff
{
    e19c:	4605      	mov	r5, r0
    e19e:	4688      	mov	r8, r1
    e1a0:	4614      	mov	r4, r2
	if ((sh->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    e1a2:	dc20      	bgt.n	e1e6 <data_insert+0x56>
	uint16_t after = sh->ctx->cmd_buff_len - sh->ctx->cmd_buff_pos;
    e1a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    e1a6:	1af6      	subs	r6, r6, r3
	char *curr_pos = &sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos];
    e1a8:	3342      	adds	r3, #66	; 0x42
    e1aa:	441f      	add	r7, r3
	uint16_t after = sh->ctx->cmd_buff_len - sh->ctx->cmd_buff_pos;
    e1ac:	b2b6      	uxth	r6, r6
	memmove(curr_pos + len, curr_pos, after);
    e1ae:	4632      	mov	r2, r6
    e1b0:	4639      	mov	r1, r7
    e1b2:	1938      	adds	r0, r7, r4
    e1b4:	f000 fd5c 	bl	ec70 <memmove>
	memcpy(curr_pos, data, len);
    e1b8:	4622      	mov	r2, r4
    e1ba:	4641      	mov	r1, r8
    e1bc:	4638      	mov	r0, r7
    e1be:	f000 fd6e 	bl	ec9e <memcpy>
	sh->ctx->cmd_buff_len += len;
    e1c2:	68aa      	ldr	r2, [r5, #8]
    e1c4:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
    e1c6:	4423      	add	r3, r4
    e1c8:	8793      	strh	r3, [r2, #60]	; 0x3c
	sh->ctx->cmd_buff[sh->ctx->cmd_buff_len] = '\0';
    e1ca:	68ab      	ldr	r3, [r5, #8]
    e1cc:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    e1ce:	4413      	add	r3, r2
    e1d0:	2200      	movs	r2, #0
    e1d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	return sh->ctx->cfg.flags.echo == 1;
    e1d6:	68ab      	ldr	r3, [r5, #8]
    e1d8:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
	if (!z_flag_echo_get(sh)) {
    e1dc:	0789      	lsls	r1, r1, #30
    e1de:	d404      	bmi.n	e1ea <data_insert+0x5a>
		sh->ctx->cmd_buff_pos += len;
    e1e0:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    e1e2:	4414      	add	r4, r2
    e1e4:	87dc      	strh	r4, [r3, #62]	; 0x3e
}
    e1e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(sh, after, false);
    e1ea:	4631      	mov	r1, r6
    e1ec:	4628      	mov	r0, r5
}
    e1ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(sh, after, false);
    e1f2:	f7f8 b809 	b.w	6208 <reprint_from_cursor>

0000e1f6 <z_shell_op_completion_insert>:
	data_insert(sh, compl, compl_len);
    e1f6:	f7ff bfcb 	b.w	e190 <data_insert>

0000e1fa <z_shell_op_char_delete>:
{
    e1fa:	b538      	push	{r3, r4, r5, lr}
    e1fc:	4605      	mov	r5, r0
	uint16_t diff = sh->ctx->cmd_buff_len - sh->ctx->cmd_buff_pos;
    e1fe:	6880      	ldr	r0, [r0, #8]
    e200:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
    e202:	8f84      	ldrh	r4, [r0, #60]	; 0x3c
    e204:	1aa4      	subs	r4, r4, r2
    e206:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
    e208:	b18c      	cbz	r4, e22e <z_shell_op_char_delete+0x34>
	char *str = &sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos];
    e20a:	3242      	adds	r2, #66	; 0x42
    e20c:	4410      	add	r0, r2
	memmove(str, str + 1, diff);
    e20e:	1c41      	adds	r1, r0, #1
    e210:	4622      	mov	r2, r4
    e212:	f000 fd2d 	bl	ec70 <memmove>
	--sh->ctx->cmd_buff_len;
    e216:	68aa      	ldr	r2, [r5, #8]
    e218:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
    e21a:	3b01      	subs	r3, #1
    e21c:	8793      	strh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(sh, --diff, true);
    e21e:	1e61      	subs	r1, r4, #1
    e220:	4628      	mov	r0, r5
    e222:	2201      	movs	r2, #1
}
    e224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(sh, --diff, true);
    e228:	b289      	uxth	r1, r1
    e22a:	f7f7 bfed 	b.w	6208 <reprint_from_cursor>
}
    e22e:	bd38      	pop	{r3, r4, r5, pc}

0000e230 <z_shell_op_char_backspace>:
{
    e230:	b510      	push	{r4, lr}
	if ((sh->ctx->cmd_buff_len == 0) ||
    e232:	6883      	ldr	r3, [r0, #8]
    e234:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
    e236:	4604      	mov	r4, r0
	if ((sh->ctx->cmd_buff_len == 0) ||
    e238:	b152      	cbz	r2, e250 <z_shell_op_char_backspace+0x20>
    e23a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    e23c:	b143      	cbz	r3, e250 <z_shell_op_char_backspace+0x20>
	z_shell_op_cursor_move(sh, -1);
    e23e:	f04f 31ff 	mov.w	r1, #4294967295
    e242:	f7ff fe83 	bl	df4c <z_shell_op_cursor_move>
	z_shell_op_char_delete(sh);
    e246:	4620      	mov	r0, r4
}
    e248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_op_char_delete(sh);
    e24c:	f7ff bfd5 	b.w	e1fa <z_shell_op_char_delete>
}
    e250:	bd10      	pop	{r4, pc}

0000e252 <process_msg_from_buffer>:
		}
	}
}

static bool process_msg_from_buffer(const struct shell *sh)
{
    e252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct shell_log_backend *log_backend = sh->log_backend;
    e254:	69c3      	ldr	r3, [r0, #28]
	struct mpsc_pbuf_buffer *mpsc_buffer = log_backend->mpsc_buffer;
    e256:	695e      	ldr	r6, [r3, #20]
	const struct log_output *log_output = log_backend->log_output;
    e258:	685f      	ldr	r7, [r3, #4]
	return sh->ctx->cfg.flags.use_colors == 1;
    e25a:	6883      	ldr	r3, [r0, #8]
	union log_msg_generic *msg;
	bool colors = IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
			z_flag_use_colors_get(sh);

	msg = (union log_msg_generic *)mpsc_pbuf_claim(mpsc_buffer);
    e25c:	4630      	mov	r0, r6
    e25e:	f8d3 5260 	ldr.w	r5, [r3, #608]	; 0x260
    e262:	f7fe fd87 	bl	cd74 <mpsc_pbuf_claim>
    e266:	f3c5 1500 	ubfx	r5, r5, #4, #1
	if (!msg) {
    e26a:	4604      	mov	r4, r0
    e26c:	b150      	cbz	r0, e284 <process_msg_from_buffer+0x32>
	log_output_msg_process(log_output, &msg->log, flags);
    e26e:	4601      	mov	r1, r0
    e270:	f105 020e 	add.w	r2, r5, #14
    e274:	4638      	mov	r0, r7
    e276:	f7f5 fcab 	bl	3bd0 <log_output_msg_process>
		return false;
	}

	process_log_msg(sh, log_output, msg, false, colors);

	mpsc_pbuf_free(mpsc_buffer, &msg->buf);
    e27a:	4630      	mov	r0, r6
    e27c:	4621      	mov	r1, r4
    e27e:	f7fe fdcb 	bl	ce18 <mpsc_pbuf_free>

	return true;
    e282:	2001      	movs	r0, #1
}
    e284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e286 <dropped>:
	const struct shell *sh = (const struct shell *)backend->cb->ctx;
    e286:	6843      	ldr	r3, [r0, #4]
    e288:	681b      	ldr	r3, [r3, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    e28a:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
    e28e:	f3bf 8f5b 	dmb	ish
    e292:	e853 cf00 	ldrex	ip, [r3]
    e296:	448c      	add	ip, r1
    e298:	e843 c000 	strex	r0, ip, [r3]
    e29c:	2800      	cmp	r0, #0
    e29e:	d1f8      	bne.n	e292 <dropped+0xc>
    e2a0:	f3bf 8f5b 	dmb	ish
    e2a4:	6893      	ldr	r3, [r2, #8]
    e2a6:	f3bf 8f5b 	dmb	ish
    e2aa:	e853 0f00 	ldrex	r0, [r3]
    e2ae:	4408      	add	r0, r1
    e2b0:	e843 0200 	strex	r2, r0, [r3]
    e2b4:	2a00      	cmp	r2, #0
    e2b6:	d1f8      	bne.n	e2aa <dropped+0x24>
    e2b8:	f3bf 8f5b 	dmb	ish
}
    e2bc:	4770      	bx	lr

0000e2be <process>:

static void process(const struct log_backend *const backend,
		    union log_msg_generic *msg)
{
    e2be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct shell *sh = (const struct shell *)backend->cb->ctx;
    e2c2:	6843      	ldr	r3, [r0, #4]
    e2c4:	681e      	ldr	r6, [r3, #0]
	const struct shell_log_backend *log_backend = sh->log_backend;
    e2c6:	69f3      	ldr	r3, [r6, #28]
    e2c8:	68b2      	ldr	r2, [r6, #8]
	struct mpsc_pbuf_buffer *mpsc_buffer = log_backend->mpsc_buffer;
    e2ca:	f8d3 8014 	ldr.w	r8, [r3, #20]
    e2ce:	f8d2 4260 	ldr.w	r4, [r2, #608]	; 0x260
	const struct log_output *log_output = log_backend->log_output;
	bool colors = IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
			z_flag_use_colors_get(sh);
	struct k_poll_signal *signal;

	switch (sh->log_backend->control_block->state) {
    e2d2:	689a      	ldr	r2, [r3, #8]
	const struct log_output *log_output = log_backend->log_output;
    e2d4:	f8d3 9004 	ldr.w	r9, [r3, #4]
	switch (sh->log_backend->control_block->state) {
    e2d8:	7912      	ldrb	r2, [r2, #4]
    e2da:	2a01      	cmp	r2, #1
{
    e2dc:	4607      	mov	r7, r0
    e2de:	460d      	mov	r5, r1
    e2e0:	f3c4 1400 	ubfx	r4, r4, #4, #1
	switch (sh->log_backend->control_block->state) {
    e2e4:	d003      	beq.n	e2ee <process+0x30>
    e2e6:	2a03      	cmp	r2, #3
    e2e8:	d04d      	beq.n	e386 <process+0xc8>
	case SHELL_LOG_BACKEND_DISABLED:
		__fallthrough;
	default:
		break;
	}
}
    e2ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (copy_to_pbuffer(mpsc_buffer, msg, log_backend->timeout)) {
    e2ee:	68d8      	ldr	r0, [r3, #12]
	return msg->generic.type == Z_LOG_MSG_LOG;
    e2f0:	780b      	ldrb	r3, [r1, #0]
	if (z_log_item_is_msg(generic_msg)) {
    e2f2:	0759      	lsls	r1, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    e2f4:	bf5e      	ittt	pl
    e2f6:	682b      	ldrpl	r3, [r5, #0]
    e2f8:	f3c3 244a 	ubfxpl	r4, r3, #9, #11
    e2fc:	886b      	ldrhpl	r3, [r5, #2]
    e2fe:	f240 31e7 	movw	r1, #999	; 0x3e7
    e302:	f04f 0a00 	mov.w	sl, #0
    e306:	bf58      	it	pl
    e308:	eb04 1413 	addpl.w	r4, r4, r3, lsr #4
    e30c:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    e310:	468e      	mov	lr, r1
    e312:	4651      	mov	r1, sl
    e314:	bf58      	it	pl
    e316:	3417      	addpl	r4, #23
    e318:	fbe0 e10c 	umlal	lr, r1, r0, ip
    e31c:	bf58      	it	pl
    e31e:	f024 0407 	bicpl.w	r4, r4, #7
    e322:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e326:	f04f 0300 	mov.w	r3, #0
    e32a:	4670      	mov	r0, lr
    e32c:	bf54      	ite	pl
    e32e:	08a4      	lsrpl	r4, r4, #2
	return 0;
    e330:	2400      	movmi	r4, #0
    e332:	f7f1 fed3 	bl	dc <__aeabi_uldivmod>
    e336:	4602      	mov	r2, r0
    e338:	460b      	mov	r3, r1
	dst = mpsc_pbuf_alloc(mpsc_buffer, wlen, K_MSEC(timeout));
    e33a:	4640      	mov	r0, r8
    e33c:	4621      	mov	r1, r4
    e33e:	f7fe fc7b 	bl	cc38 <mpsc_pbuf_alloc>
	if (!dst) {
    e342:	4681      	mov	r9, r0
    e344:	b928      	cbnz	r0, e352 <process+0x94>
				dropped(backend, 1);
    e346:	4638      	mov	r0, r7
    e348:	2101      	movs	r1, #1
}
    e34a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				dropped(backend, 1);
    e34e:	f7ff bf9a 	b.w	e286 <dropped>
	dst->hdr.data = msg->buf.hdr.data;
    e352:	4629      	mov	r1, r5
    e354:	6802      	ldr	r2, [r0, #0]
    e356:	f851 3b04 	ldr.w	r3, [r1], #4
    e35a:	f3c3 039d 	ubfx	r3, r3, #2, #30
    e35e:	f363 029f 	bfi	r2, r3, #2, #30
    e362:	f840 2b04 	str.w	r2, [r0], #4
	memcpy(dst_data, src_data, (wlen - hdr_wlen) * sizeof(uint32_t));
    e366:	1e62      	subs	r2, r4, #1
    e368:	0092      	lsls	r2, r2, #2
    e36a:	f000 fc98 	bl	ec9e <memcpy>
	mpsc_pbuf_commit(mpsc_buffer, dst);
    e36e:	4640      	mov	r0, r8
    e370:	4649      	mov	r1, r9
    e372:	f7fe fcdf 	bl	cd34 <mpsc_pbuf_commit>
					signal = &sh->ctx->signals[SHELL_SIGNAL_LOG_MSG];
    e376:	68b0      	ldr	r0, [r6, #8]
    e378:	f500 701e 	add.w	r0, r0, #632	; 0x278
	return z_impl_k_poll_signal_raise(sig, result);
    e37c:	4651      	mov	r1, sl
}
    e37e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e382:	f7fd bd1b 	b.w	bdbc <z_impl_k_poll_signal_raise>
		z_shell_cmd_line_erase(sh);
    e386:	4630      	mov	r0, r6
    e388:	f7ff fe6b 	bl	e062 <z_shell_cmd_line_erase>
		if (k_is_in_isr()) {
    e38c:	f001 f9f7 	bl	f77e <k_is_in_isr>
    e390:	f104 070e 	add.w	r7, r4, #14
    e394:	4604      	mov	r4, r0
    e396:	b308      	cbz	r0, e3dc <process+0x11e>
	__asm__ volatile(
    e398:	f04f 0320 	mov.w	r3, #32
    e39c:	f3ef 8411 	mrs	r4, BASEPRI
    e3a0:	f383 8812 	msr	BASEPRI_MAX, r3
    e3a4:	f3bf 8f6f 	isb	sy
	return sh->ctx->ctx.flags.cmd_ctx == 1;
    e3a8:	68b3      	ldr	r3, [r6, #8]
    e3aa:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (!z_flag_cmd_ctx_get(sh)) {
    e3ae:	051a      	lsls	r2, r3, #20
    e3b0:	d51e      	bpl.n	e3f0 <process+0x132>
	log_output_msg_process(log_output, &msg->log, flags);
    e3b2:	463a      	mov	r2, r7
    e3b4:	4629      	mov	r1, r5
    e3b6:	4648      	mov	r0, r9
    e3b8:	f7f5 fc0a 	bl	3bd0 <log_output_msg_process>
    e3bc:	68b3      	ldr	r3, [r6, #8]
    e3be:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (!z_flag_cmd_ctx_get(sh)) {
    e3c2:	051b      	lsls	r3, r3, #20
    e3c4:	d402      	bmi.n	e3cc <process+0x10e>
			z_shell_print_prompt_and_cmd(sh);
    e3c6:	4630      	mov	r0, r6
    e3c8:	f7f7 ff8e 	bl	62e8 <z_shell_print_prompt_and_cmd>
		if (k_is_in_isr()) {
    e3cc:	f001 f9d7 	bl	f77e <k_is_in_isr>
    e3d0:	b190      	cbz	r0, e3f8 <process+0x13a>
	__asm__ volatile(
    e3d2:	f384 8811 	msr	BASEPRI, r4
    e3d6:	f3bf 8f6f 	isb	sy
}
    e3da:	e786      	b.n	e2ea <process+0x2c>
			k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
    e3dc:	68b0      	ldr	r0, [r6, #8]
    e3de:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_lock(mutex, timeout);
    e3e2:	f04f 32ff 	mov.w	r2, #4294967295
    e3e6:	f04f 33ff 	mov.w	r3, #4294967295
    e3ea:	f7fc fe0d 	bl	b008 <z_impl_k_mutex_lock>
    e3ee:	e7db      	b.n	e3a8 <process+0xea>
			z_shell_cmd_line_erase(sh);
    e3f0:	4630      	mov	r0, r6
    e3f2:	f7ff fe36 	bl	e062 <z_shell_cmd_line_erase>
    e3f6:	e7dc      	b.n	e3b2 <process+0xf4>
			k_mutex_unlock(&sh->ctx->wr_mtx);
    e3f8:	68b0      	ldr	r0, [r6, #8]
    e3fa:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
}
    e3fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return z_impl_k_mutex_unlock(mutex);
    e402:	f7fc be7b 	b.w	b0fc <z_impl_k_mutex_unlock>

0000e406 <z_shell_log_backend_output_func>:
{
    e406:	b510      	push	{r4, lr}
    e408:	4613      	mov	r3, r2
    e40a:	460c      	mov	r4, r1
	z_shell_print_stream(ctx, data, length);
    e40c:	460a      	mov	r2, r1
    e40e:	4601      	mov	r1, r0
    e410:	4618      	mov	r0, r3
    e412:	f7ff fe84 	bl	e11e <z_shell_print_stream>
}
    e416:	4620      	mov	r0, r4
    e418:	bd10      	pop	{r4, pc}

0000e41a <z_shell_log_backend_enable>:
{
    e41a:	b570      	push	{r4, r5, r6, lr}
    e41c:	4604      	mov	r4, r0
    e41e:	460d      	mov	r5, r1
    e420:	4616      	mov	r6, r2
	mpsc_pbuf_init(backend->mpsc_buffer, backend->mpsc_buffer_config);
    e422:	e9d0 1004 	ldrd	r1, r0, [r0, #16]
    e426:	f7fe fbe6 	bl	cbf6 <mpsc_pbuf_init>
		log_backend_enable(backend->backend, ctx, init_log_level);
    e42a:	4632      	mov	r2, r6
    e42c:	6820      	ldr	r0, [r4, #0]
    e42e:	4629      	mov	r1, r5
    e430:	f7f5 f952 	bl	36d8 <log_backend_enable>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *output,
				      void *ctx)
{
	output->control_block->ctx = ctx;
    e434:	6863      	ldr	r3, [r4, #4]
    e436:	685b      	ldr	r3, [r3, #4]
    e438:	605d      	str	r5, [r3, #4]
		backend->control_block->dropped_cnt = 0;
    e43a:	68a3      	ldr	r3, [r4, #8]
    e43c:	2200      	movs	r2, #0
    e43e:	601a      	str	r2, [r3, #0]
		backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
    e440:	68a3      	ldr	r3, [r4, #8]
    e442:	2201      	movs	r2, #1
    e444:	711a      	strb	r2, [r3, #4]
}
    e446:	bd70      	pop	{r4, r5, r6, pc}

0000e448 <z_shell_log_backend_disable>:
{
    e448:	b510      	push	{r4, lr}
    e44a:	4604      	mov	r4, r0
	log_backend_disable(backend->backend);
    e44c:	6800      	ldr	r0, [r0, #0]
    e44e:	f7fe ffc7 	bl	d3e0 <log_backend_disable>
	backend->control_block->state = SHELL_LOG_BACKEND_DISABLED;
    e452:	68a3      	ldr	r3, [r4, #8]
    e454:	2202      	movs	r2, #2
    e456:	711a      	strb	r2, [r3, #4]
}
    e458:	bd10      	pop	{r4, pc}

0000e45a <panic>:
{
    e45a:	b510      	push	{r4, lr}
	const struct shell *sh = (const struct shell *)backend->cb->ctx;
    e45c:	6843      	ldr	r3, [r0, #4]
    e45e:	681c      	ldr	r4, [r3, #0]
	err = sh->iface->api->enable(sh->iface, true);
    e460:	6860      	ldr	r0, [r4, #4]
    e462:	6803      	ldr	r3, [r0, #0]
    e464:	2101      	movs	r1, #1
    e466:	689b      	ldr	r3, [r3, #8]
    e468:	4798      	blx	r3
	if (err == 0) {
    e46a:	bb48      	cbnz	r0, e4c0 <panic+0x66>
		sh->log_backend->control_block->state =
    e46c:	69e3      	ldr	r3, [r4, #28]
    e46e:	689b      	ldr	r3, [r3, #8]
    e470:	2203      	movs	r2, #3
    e472:	711a      	strb	r2, [r3, #4]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e474:	68a3      	ldr	r3, [r4, #8]
    e476:	f3bf 8f5b 	dmb	ish
    e47a:	f503 7319 	add.w	r3, r3, #612	; 0x264
    e47e:	e853 1f00 	ldrex	r1, [r3]
    e482:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    e486:	e843 1200 	strex	r2, r1, [r3]
    e48a:	2a00      	cmp	r2, #0
    e48c:	d1f7      	bne.n	e47e <panic+0x24>
    e48e:	f3bf 8f5b 	dmb	ish
		z_shell_multiline_data_calc(&sh->ctx->vt100_ctx.cons,
    e492:	68a0      	ldr	r0, [r4, #8]
    e494:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    e496:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    e498:	3020      	adds	r0, #32
    e49a:	f7ff faca 	bl	da32 <z_shell_multiline_data_calc>
		z_shell_op_cursor_vert_move(sh, -1);
    e49e:	f04f 31ff 	mov.w	r1, #4294967295
    e4a2:	4620      	mov	r0, r4
    e4a4:	f7f7 fdde 	bl	6064 <z_shell_op_cursor_vert_move>
					   -sh->ctx->vt100_ctx.cons.cur_x);
    e4a8:	68a3      	ldr	r3, [r4, #8]
    e4aa:	8c19      	ldrh	r1, [r3, #32]
		z_shell_op_cursor_horiz_move(sh,
    e4ac:	4620      	mov	r0, r4
    e4ae:	4249      	negs	r1, r1
    e4b0:	f7f7 fdee 	bl	6090 <z_shell_op_cursor_horiz_move>
		while (process_msg_from_buffer(sh)) {
    e4b4:	4620      	mov	r0, r4
    e4b6:	f7ff fecc 	bl	e252 <process_msg_from_buffer>
    e4ba:	2800      	cmp	r0, #0
    e4bc:	d1fa      	bne.n	e4b4 <panic+0x5a>
}
    e4be:	bd10      	pop	{r4, pc}
		z_shell_log_backend_disable(sh->log_backend);
    e4c0:	69e0      	ldr	r0, [r4, #28]
}
    e4c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_log_backend_disable(sh->log_backend);
    e4c6:	f7ff bfbf 	b.w	e448 <z_shell_log_backend_disable>

0000e4ca <z_shell_log_backend_process>:
{
    e4ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
			(const struct shell *)backend->backend->cb->ctx;
    e4cc:	6803      	ldr	r3, [r0, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e4ce:	6882      	ldr	r2, [r0, #8]
	const struct shell *sh =
    e4d0:	685b      	ldr	r3, [r3, #4]
    e4d2:	681d      	ldr	r5, [r3, #0]
	return sh->ctx->cfg.flags.use_colors == 1;
    e4d4:	68ab      	ldr	r3, [r5, #8]
    e4d6:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
    e4da:	f3bf 8f5b 	dmb	ish
{
    e4de:	4604      	mov	r4, r0
    e4e0:	f3c3 1300 	ubfx	r3, r3, #4, #1
    e4e4:	2100      	movs	r1, #0
    e4e6:	e852 6f00 	ldrex	r6, [r2]
    e4ea:	e842 1000 	strex	r0, r1, [r2]
    e4ee:	2800      	cmp	r0, #0
    e4f0:	d1f9      	bne.n	e4e6 <z_shell_log_backend_process+0x1c>
    e4f2:	f3bf 8f5b 	dmb	ish
	if (dropped) {
    e4f6:	b126      	cbz	r6, e502 <z_shell_log_backend_process+0x38>
		if (colors) {
    e4f8:	b94b      	cbnz	r3, e50e <z_shell_log_backend_process+0x44>
		log_output_dropped_process(backend->log_output, dropped);
    e4fa:	6860      	ldr	r0, [r4, #4]
    e4fc:	4631      	mov	r1, r6
    e4fe:	f7f5 fb9d 	bl	3c3c <log_output_dropped_process>
	return process_msg_from_buffer(sh);
    e502:	4628      	mov	r0, r5
}
    e504:	b002      	add	sp, #8
    e506:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return process_msg_from_buffer(sh);
    e50a:	f7ff bea2 	b.w	e252 <process_msg_from_buffer>
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
    e50e:	68a9      	ldr	r1, [r5, #8]
    e510:	2202      	movs	r2, #2
    e512:	312e      	adds	r1, #46	; 0x2e
    e514:	a801      	add	r0, sp, #4
    e516:	f000 fbc2 	bl	ec9e <memcpy>
			z_shell_vt100_color_set(sh, SHELL_VT100_COLOR_RED);
    e51a:	4628      	mov	r0, r5
    e51c:	2101      	movs	r1, #1
    e51e:	f7f7 fdd5 	bl	60cc <z_shell_vt100_color_set>
		log_output_dropped_process(backend->log_output, dropped);
    e522:	6860      	ldr	r0, [r4, #4]
    e524:	4631      	mov	r1, r6
    e526:	f7f5 fb89 	bl	3c3c <log_output_dropped_process>
			z_shell_vt100_colors_restore(sh, &col);
    e52a:	a901      	add	r1, sp, #4
    e52c:	4628      	mov	r0, r5
    e52e:	f7f7 fded 	bl	610c <z_shell_vt100_colors_restore>
    e532:	e7e6      	b.n	e502 <z_shell_log_backend_process+0x38>

0000e534 <z_shell_raw_fprintf>:
{
    e534:	b40e      	push	{r1, r2, r3}
    e536:	b503      	push	{r0, r1, lr}
    e538:	aa03      	add	r2, sp, #12
    e53a:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    e53e:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    e540:	f7f7 fd2c 	bl	5f9c <z_shell_fprintf_fmt>
}
    e544:	b002      	add	sp, #8
    e546:	f85d eb04 	ldr.w	lr, [sp], #4
    e54a:	b003      	add	sp, #12
    e54c:	4770      	bx	lr

0000e54e <formatted_text_print.constprop.0>:
static void formatted_text_print(const struct shell *sh, const char *str,
    e54e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e552:	4605      	mov	r5, r0
    e554:	4690      	mov	r8, r2
	if (str == NULL) {
    e556:	460e      	mov	r6, r1
    e558:	2900      	cmp	r1, #0
    e55a:	d066      	beq.n	e62a <formatted_text_print.constprop.0+0xdc>
    e55c:	2400      	movs	r4, #0
	while (isspace((int) *(str + offset)) != 0) {
    e55e:	5d33      	ldrb	r3, [r6, r4]
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    e560:	2b20      	cmp	r3, #32
    e562:	d002      	beq.n	e56a <formatted_text_print.constprop.0+0x1c>
    e564:	3b09      	subs	r3, #9
    e566:	2b04      	cmp	r3, #4
    e568:	d83e      	bhi.n	e5e8 <formatted_text_print.constprop.0+0x9a>
		++offset;
    e56a:	3401      	adds	r4, #1
    e56c:	e7f7      	b.n	e55e <formatted_text_print.constprop.0+0x10>
    e56e:	464b      	mov	r3, r9
			for (idx = 0; idx < length; idx++) {
    e570:	2700      	movs	r7, #0
    e572:	42b8      	cmp	r0, r7
    e574:	d014      	beq.n	e5a0 <formatted_text_print.constprop.0+0x52>
				if (*(str + offset + idx) == '\n') {
    e576:	f813 2b01 	ldrb.w	r2, [r3], #1
    e57a:	2a0a      	cmp	r2, #10
    e57c:	d119      	bne.n	e5b2 <formatted_text_print.constprop.0+0x64>
	z_shell_fprintf_buffer_flush(sh->fprintf_ctx);
    e57e:	6968      	ldr	r0, [r5, #20]
    e580:	f7ff fa03 	bl	d98a <z_shell_fprintf_buffer_flush>
					z_shell_write(sh, str + offset, idx);
    e584:	4649      	mov	r1, r9
    e586:	463a      	mov	r2, r7
    e588:	4628      	mov	r0, r5
    e58a:	f7ff fd84 	bl	e096 <z_shell_write>
					z_cursor_next_line_move(sh);
    e58e:	6968      	ldr	r0, [r5, #20]
    e590:	f7f7 fec2 	bl	6318 <z_cursor_next_line_move.isra.0>
    e594:	3401      	adds	r4, #1
					z_shell_op_cursor_horiz_move(sh,
    e596:	4641      	mov	r1, r8
    e598:	4628      	mov	r0, r5
					offset += idx + 1;
    e59a:	443c      	add	r4, r7
					z_shell_op_cursor_horiz_move(sh,
    e59c:	f7f7 fd78 	bl	6090 <z_shell_op_cursor_horiz_move>
			z_shell_raw_fprintf(sh->fprintf_ctx, str + offset);
    e5a0:	6968      	ldr	r0, [r5, #20]
    e5a2:	1931      	adds	r1, r6, r4
    e5a4:	f7ff ffc6 	bl	e534 <z_shell_raw_fprintf>
	z_cursor_next_line_move(sh);
    e5a8:	6968      	ldr	r0, [r5, #20]
}
    e5aa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	z_cursor_next_line_move(sh);
    e5ae:	f7f7 beb3 	b.w	6318 <z_cursor_next_line_move.isra.0>
			for (idx = 0; idx < length; idx++) {
    e5b2:	3701      	adds	r7, #1
    e5b4:	e7dd      	b.n	e572 <formatted_text_print.constprop.0+0x24>
    e5b6:	461f      	mov	r7, r3
    e5b8:	6968      	ldr	r0, [r5, #20]
    e5ba:	f7ff f9e6 	bl	d98a <z_shell_fprintf_buffer_flush>
		z_shell_write(sh, str + offset, length);
    e5be:	463a      	mov	r2, r7
    e5c0:	4649      	mov	r1, r9
    e5c2:	4628      	mov	r0, r5
    e5c4:	f7ff fd67 	bl	e096 <z_shell_write>
		offset += length;
    e5c8:	443c      	add	r4, r7
		while (isspace((int) (*(str + offset))) != 0) {
    e5ca:	5d33      	ldrb	r3, [r6, r4]
    e5cc:	2b20      	cmp	r3, #32
    e5ce:	d002      	beq.n	e5d6 <formatted_text_print.constprop.0+0x88>
    e5d0:	3b09      	subs	r3, #9
    e5d2:	2b04      	cmp	r3, #4
    e5d4:	d801      	bhi.n	e5da <formatted_text_print.constprop.0+0x8c>
			++offset;
    e5d6:	3401      	adds	r4, #1
    e5d8:	e7f7      	b.n	e5ca <formatted_text_print.constprop.0+0x7c>
		z_cursor_next_line_move(sh);
    e5da:	6968      	ldr	r0, [r5, #20]
    e5dc:	f7f7 fe9c 	bl	6318 <z_cursor_next_line_move.isra.0>
		z_shell_op_cursor_horiz_move(sh, terminal_offset);
    e5e0:	4641      	mov	r1, r8
    e5e2:	4628      	mov	r0, r5
    e5e4:	f7f7 fd54 	bl	6090 <z_shell_op_cursor_horiz_move>
	return str == NULL ? 0U : (uint16_t)strlen(str);
    e5e8:	4630      	mov	r0, r6
    e5ea:	f000 fb01 	bl	ebf0 <strlen>
		    sh->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
    e5ee:	68ab      	ldr	r3, [r5, #8]
    e5f0:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
		length = z_shell_strlen(str) - offset;
    e5f2:	b280      	uxth	r0, r0
    e5f4:	1b00      	subs	r0, r0, r4
		    sh->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
    e5f6:	eba1 0308 	sub.w	r3, r1, r8
		if (length <=
    e5fa:	4298      	cmp	r0, r3
    e5fc:	eb06 0904 	add.w	r9, r6, r4
    e600:	d9b5      	bls.n	e56e <formatted_text_print.constprop.0+0x20>
    e602:	4648      	mov	r0, r9
		size_t idx = 0;
    e604:	2700      	movs	r7, #0
			if (isspace((int) (*(str + offset + idx))) != 0) {
    e606:	f810 2b01 	ldrb.w	r2, [r0], #1
    e60a:	2a20      	cmp	r2, #32
    e60c:	d006      	beq.n	e61c <formatted_text_print.constprop.0+0xce>
    e60e:	f1a2 0c09 	sub.w	ip, r2, #9
    e612:	f1bc 0f04 	cmp.w	ip, #4
    e616:	d802      	bhi.n	e61e <formatted_text_print.constprop.0+0xd0>
				if (*(str + offset + idx) == '\n') {
    e618:	2a0a      	cmp	r2, #10
    e61a:	d0cd      	beq.n	e5b8 <formatted_text_print.constprop.0+0x6a>
    e61c:	463b      	mov	r3, r7
			if ((idx + terminal_offset) >=
    e61e:	eb08 0207 	add.w	r2, r8, r7
    e622:	4291      	cmp	r1, r2
    e624:	d9c7      	bls.n	e5b6 <formatted_text_print.constprop.0+0x68>
			++idx;
    e626:	3701      	adds	r7, #1
			if (isspace((int) (*(str + offset + idx))) != 0) {
    e628:	e7ed      	b.n	e606 <formatted_text_print.constprop.0+0xb8>
}
    e62a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000e62e <cmd_shell_stats_reset>:
	sh->stats->log_lost_cnt = 0;
    e62e:	6983      	ldr	r3, [r0, #24]
    e630:	2000      	movs	r0, #0
    e632:	6018      	str	r0, [r3, #0]
}
    e634:	4770      	bx	lr

0000e636 <z_shell_raw_fprintf>:
{
    e636:	b40e      	push	{r1, r2, r3}
    e638:	b503      	push	{r0, r1, lr}
    e63a:	aa03      	add	r2, sp, #12
    e63c:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    e640:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    e642:	f7f7 fcab 	bl	5f9c <z_shell_fprintf_fmt>
}
    e646:	b002      	add	sp, #8
    e648:	f85d eb04 	ldr.w	lr, [sp], #4
    e64c:	b003      	add	sp, #12
    e64e:	4770      	bx	lr

0000e650 <cmd_vt100_off>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e650:	6883      	ldr	r3, [r0, #8]
    e652:	f3bf 8f5b 	dmb	ish
    e656:	f503 7318 	add.w	r3, r3, #608	; 0x260
    e65a:	e853 1f00 	ldrex	r1, [r3]
    e65e:	f021 0120 	bic.w	r1, r1, #32
    e662:	e843 1200 	strex	r2, r1, [r3]
    e666:	2a00      	cmp	r2, #0
    e668:	d1f7      	bne.n	e65a <cmd_vt100_off+0xa>
    e66a:	f3bf 8f5b 	dmb	ish
}
    e66e:	2000      	movs	r0, #0
    e670:	4770      	bx	lr

0000e672 <cmd_bacskpace_mode_delete>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e672:	6883      	ldr	r3, [r0, #8]
    e674:	f3bf 8f5b 	dmb	ish
    e678:	f503 7318 	add.w	r3, r3, #608	; 0x260
    e67c:	e853 1f00 	ldrex	r1, [r3]
    e680:	f041 0108 	orr.w	r1, r1, #8
    e684:	e843 1200 	strex	r2, r1, [r3]
    e688:	2a00      	cmp	r2, #0
    e68a:	d1f7      	bne.n	e67c <cmd_bacskpace_mode_delete+0xa>
    e68c:	f3bf 8f5b 	dmb	ish
}
    e690:	2000      	movs	r0, #0
    e692:	4770      	bx	lr

0000e694 <cmd_colors_off>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e694:	6883      	ldr	r3, [r0, #8]
    e696:	f3bf 8f5b 	dmb	ish
    e69a:	f503 7318 	add.w	r3, r3, #608	; 0x260
    e69e:	e853 1f00 	ldrex	r1, [r3]
    e6a2:	f021 0110 	bic.w	r1, r1, #16
    e6a6:	e843 1200 	strex	r2, r1, [r3]
    e6aa:	2a00      	cmp	r2, #0
    e6ac:	d1f7      	bne.n	e69e <cmd_colors_off+0xa>
    e6ae:	f3bf 8f5b 	dmb	ish
}
    e6b2:	2000      	movs	r0, #0
    e6b4:	4770      	bx	lr

0000e6b6 <cmd_bacskpace_mode_backspace>:
    e6b6:	6883      	ldr	r3, [r0, #8]
    e6b8:	f3bf 8f5b 	dmb	ish
    e6bc:	f503 7318 	add.w	r3, r3, #608	; 0x260
    e6c0:	e853 1f00 	ldrex	r1, [r3]
    e6c4:	f021 0108 	bic.w	r1, r1, #8
    e6c8:	e843 1200 	strex	r2, r1, [r3]
    e6cc:	2a00      	cmp	r2, #0
    e6ce:	d1f7      	bne.n	e6c0 <cmd_bacskpace_mode_backspace+0xa>
    e6d0:	f3bf 8f5b 	dmb	ish
}
    e6d4:	2000      	movs	r0, #0
    e6d6:	4770      	bx	lr

0000e6d8 <cmd_echo_off>:
    e6d8:	6883      	ldr	r3, [r0, #8]
    e6da:	f3bf 8f5b 	dmb	ish
    e6de:	f503 7318 	add.w	r3, r3, #608	; 0x260
    e6e2:	e853 1f00 	ldrex	r1, [r3]
    e6e6:	f021 0102 	bic.w	r1, r1, #2
    e6ea:	e843 1200 	strex	r2, r1, [r3]
    e6ee:	2a00      	cmp	r2, #0
    e6f0:	d1f7      	bne.n	e6e2 <cmd_echo_off+0xa>
    e6f2:	f3bf 8f5b 	dmb	ish
}
    e6f6:	2000      	movs	r0, #0
    e6f8:	4770      	bx	lr

0000e6fa <cmd_colors_on>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e6fa:	6883      	ldr	r3, [r0, #8]
    e6fc:	f3bf 8f5b 	dmb	ish
    e700:	f503 7318 	add.w	r3, r3, #608	; 0x260
    e704:	e853 1f00 	ldrex	r1, [r3]
    e708:	f041 0110 	orr.w	r1, r1, #16
    e70c:	e843 1200 	strex	r2, r1, [r3]
    e710:	2a00      	cmp	r2, #0
    e712:	d1f7      	bne.n	e704 <cmd_colors_on+0xa>
    e714:	f3bf 8f5b 	dmb	ish
}
    e718:	2000      	movs	r0, #0
    e71a:	4770      	bx	lr

0000e71c <cmd_vt100_on>:
    e71c:	6883      	ldr	r3, [r0, #8]
    e71e:	f3bf 8f5b 	dmb	ish
    e722:	f503 7318 	add.w	r3, r3, #608	; 0x260
    e726:	e853 1f00 	ldrex	r1, [r3]
    e72a:	f041 0120 	orr.w	r1, r1, #32
    e72e:	e843 1200 	strex	r2, r1, [r3]
    e732:	2a00      	cmp	r2, #0
    e734:	d1f7      	bne.n	e726 <cmd_vt100_on+0xa>
    e736:	f3bf 8f5b 	dmb	ish
}
    e73a:	2000      	movs	r0, #0
    e73c:	4770      	bx	lr

0000e73e <cmd_echo_on>:
    e73e:	6883      	ldr	r3, [r0, #8]
    e740:	f3bf 8f5b 	dmb	ish
    e744:	f503 7318 	add.w	r3, r3, #608	; 0x260
    e748:	e853 1f00 	ldrex	r1, [r3]
    e74c:	f041 0102 	orr.w	r1, r1, #2
    e750:	e843 1200 	strex	r2, r1, [r3]
    e754:	2a00      	cmp	r2, #0
    e756:	d1f7      	bne.n	e748 <cmd_echo_on+0xa>
    e758:	f3bf 8f5b 	dmb	ish
}
    e75c:	2000      	movs	r0, #0
    e75e:	4770      	bx	lr

0000e760 <remove_from_tail.part.0>:
	memcpy(item->data, src, len);
	sys_dlist_prepend(&history->list, &item->dnode);
}

/* Returns true if element was removed. */
static bool remove_from_tail(struct shell_history *history)
    e760:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    e762:	6883      	ldr	r3, [r0, #8]
	sys_dnode_t *const next = node->next;
    e764:	e9d3 2100 	ldrd	r2, r1, [r3]
	prev->next = next;
    e768:	600a      	str	r2, [r1, #0]
	next->prev = prev;
    e76a:	6051      	str	r1, [r2, #4]
	node->next = NULL;
    e76c:	2100      	movs	r1, #0
	node->prev = NULL;
    e76e:	e9c3 1100 	strd	r1, r1, [r3]
	sys_dlist_remove(l_item);

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	total_len = offsetof(struct shell_history_item, data) +
			h_item->len + h_item->padding;
    e772:	891a      	ldrh	r2, [r3, #8]
    e774:	895b      	ldrh	r3, [r3, #10]
	ring_buf_get(history->ring_buf, NULL, total_len);
    e776:	6800      	ldr	r0, [r0, #0]
			h_item->len + h_item->padding;
    e778:	441a      	add	r2, r3
	ring_buf_get(history->ring_buf, NULL, total_len);
    e77a:	320c      	adds	r2, #12
    e77c:	f7fe f921 	bl	c9c2 <ring_buf_get>

	return true;
}
    e780:	2001      	movs	r0, #1
    e782:	bd08      	pop	{r3, pc}

0000e784 <z_shell_history_mode_exit>:
	history->current = NULL;
    e784:	2300      	movs	r3, #0
    e786:	60c3      	str	r3, [r0, #12]
}
    e788:	4770      	bx	lr

0000e78a <z_shell_history_get>:
{
    e78a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e78c:	461f      	mov	r7, r3
	return list->head == list;
    e78e:	4603      	mov	r3, r0
    e790:	4616      	mov	r6, r2
    e792:	f853 4f04 	ldr.w	r4, [r3, #4]!
	if (sys_dlist_is_empty(&history->list)) {
    e796:	429c      	cmp	r4, r3
    e798:	d102      	bne.n	e7a0 <z_shell_history_get+0x16>
		*len = 0U;
    e79a:	2000      	movs	r0, #0
    e79c:	8038      	strh	r0, [r7, #0]
}
    e79e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (history->current == NULL) {
    e7a0:	68c5      	ldr	r5, [r0, #12]
	if (!up) { /* button down */
    e7a2:	b9b1      	cbnz	r1, e7d2 <z_shell_history_get+0x48>
		if (history->current == NULL) {
    e7a4:	2d00      	cmp	r5, #0
    e7a6:	d0f8      	beq.n	e79a <z_shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
    e7a8:	42ac      	cmp	r4, r5
    e7aa:	d102      	bne.n	e7b2 <z_shell_history_get+0x28>
	history->current = l_item;
    e7ac:	2300      	movs	r3, #0
    e7ae:	60c3      	str	r3, [r0, #12]
	if (l_item) {
    e7b0:	e7f3      	b.n	e79a <z_shell_history_get+0x10>
    e7b2:	686c      	ldr	r4, [r5, #4]
	history->current = l_item;
    e7b4:	60c4      	str	r4, [r0, #12]
	if (l_item) {
    e7b6:	2c00      	cmp	r4, #0
    e7b8:	d0ef      	beq.n	e79a <z_shell_history_get+0x10>
		memcpy(dst, h_item->data, h_item->len);
    e7ba:	8922      	ldrh	r2, [r4, #8]
    e7bc:	f104 010c 	add.w	r1, r4, #12
    e7c0:	4630      	mov	r0, r6
    e7c2:	f000 fa6c 	bl	ec9e <memcpy>
		*len = h_item->len;
    e7c6:	8923      	ldrh	r3, [r4, #8]
    e7c8:	803b      	strh	r3, [r7, #0]
		dst[*len] = '\0';
    e7ca:	2200      	movs	r2, #0
    e7cc:	54f2      	strb	r2, [r6, r3]
		return true;
    e7ce:	2001      	movs	r0, #1
    e7d0:	e7e5      	b.n	e79e <z_shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
    e7d2:	2d00      	cmp	r5, #0
    e7d4:	d0ee      	beq.n	e7b4 <z_shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
    e7d6:	6883      	ldr	r3, [r0, #8]
    e7d8:	42ab      	cmp	r3, r5
    e7da:	d0e7      	beq.n	e7ac <z_shell_history_get+0x22>
    e7dc:	682c      	ldr	r4, [r5, #0]
    e7de:	e7e9      	b.n	e7b4 <z_shell_history_get+0x2a>

0000e7e0 <z_shell_history_purge>:

void z_shell_history_purge(struct shell_history *history)
{
    e7e0:	b538      	push	{r3, r4, r5, lr}
    e7e2:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
    e7e4:	1d05      	adds	r5, r0, #4
    e7e6:	6863      	ldr	r3, [r4, #4]
    e7e8:	42ab      	cmp	r3, r5
    e7ea:	d004      	beq.n	e7f6 <z_shell_history_purge+0x16>
    e7ec:	4620      	mov	r0, r4
    e7ee:	f7ff ffb7 	bl	e760 <remove_from_tail.part.0>
	while (remove_from_tail(history)) {
    e7f2:	2800      	cmp	r0, #0
    e7f4:	d1f7      	bne.n	e7e6 <z_shell_history_purge+0x6>
	}
}
    e7f6:	bd38      	pop	{r3, r4, r5, pc}

0000e7f8 <z_shell_history_put>:

void z_shell_history_put(struct shell_history *history, uint8_t *line,
			 size_t len)
{
    e7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_dnode_t *l_item; /* list item */
	struct shell_history_item *h_item, *h_prev_item;
	uint32_t total_len = len + offsetof(struct shell_history_item, data);
    e7fc:	f102 050c 	add.w	r5, r2, #12
	return buf->size;
    e800:	6803      	ldr	r3, [r0, #0]
	uint32_t claim_len;
	uint32_t claim2_len;
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
    e802:	f1c5 0900 	rsb	r9, r5, #0

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    e806:	69db      	ldr	r3, [r3, #28]
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
    e808:	f009 0903 	and.w	r9, r9, #3
{
    e80c:	b085      	sub	sp, #20
	total_len += padding;
    e80e:	444d      	add	r5, r9
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    e810:	429d      	cmp	r5, r3
{
    e812:	4604      	mov	r4, r0
    e814:	9101      	str	r1, [sp, #4]
    e816:	4617      	mov	r7, r2
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    e818:	d810      	bhi.n	e83c <z_shell_history_put+0x44>
	history->current = NULL;
    e81a:	2300      	movs	r3, #0
    e81c:	60c3      	str	r3, [r0, #12]
		return;
	}

	z_shell_history_mode_exit(history);

	if (len == 0) {
    e81e:	b16a      	cbz	r2, e83c <z_shell_history_put+0x44>
	return list->head == list;
    e820:	6846      	ldr	r6, [r0, #4]
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
    e822:	f100 0a04 	add.w	sl, r0, #4
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e826:	45b2      	cmp	sl, r6
    e828:	d00b      	beq.n	e842 <z_shell_history_put+0x4a>
	h_prev_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	if (l_item &&
    e82a:	b15e      	cbz	r6, e844 <z_shell_history_put+0x4c>
	   (h_prev_item->len == len) &&
    e82c:	8933      	ldrh	r3, [r6, #8]
	if (l_item &&
    e82e:	4293      	cmp	r3, r2
    e830:	d108      	bne.n	e844 <z_shell_history_put+0x4c>
	   (memcmp(h_prev_item->data, line, len) == 0)) {
    e832:	f106 000c 	add.w	r0, r6, #12
    e836:	f000 fa0b 	bl	ec50 <memcmp>
	   (h_prev_item->len == len) &&
    e83a:	b918      	cbnz	r0, e844 <z_shell_history_put+0x4c>
		}

		ring_buf_put_finish(history->ring_buf, 0);
		remove_from_tail(history);
	} while (1);
}
    e83c:	b005      	add	sp, #20
    e83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e842:	461e      	mov	r6, r3
		ring_buf_put_finish(history->ring_buf, 0);
    e844:	f04f 0800 	mov.w	r8, #0
		if (ring_buf_is_empty(history->ring_buf)) {
    e848:	6823      	ldr	r3, [r4, #0]
    e84a:	6919      	ldr	r1, [r3, #16]
    e84c:	689a      	ldr	r2, [r3, #8]
    e84e:	4291      	cmp	r1, r2
	buf->put_head = buf->put_tail = buf->put_base = value;
    e850:	bf01      	itttt	eq
    e852:	e9c3 8802 	strdeq	r8, r8, [r3, #8]
	buf->get_head = buf->get_tail = buf->get_base = value;
    e856:	e9c3 8805 	strdeq	r8, r8, [r3, #20]
	buf->put_head = buf->put_tail = buf->put_base = value;
    e85a:	f8c3 8004 	streq.w	r8, [r3, #4]
	buf->get_head = buf->get_tail = buf->get_base = value;
    e85e:	f8c3 8010 	streq.w	r8, [r3, #16]
		claim_len = ring_buf_put_claim(history->ring_buf,
    e862:	6820      	ldr	r0, [r4, #0]
    e864:	462a      	mov	r2, r5
    e866:	a903      	add	r1, sp, #12
    e868:	f7fe f823 	bl	c8b2 <ring_buf_put_claim>
		if (claim_len < total_len) {
    e86c:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
    e86e:	4683      	mov	fp, r0
		if (claim_len < total_len) {
    e870:	d91e      	bls.n	e8b0 <z_shell_history_put+0xb8>
				ring_buf_put_claim(history->ring_buf,
    e872:	6820      	ldr	r0, [r4, #0]
    e874:	462a      	mov	r2, r5
    e876:	a903      	add	r1, sp, #12
    e878:	f7fe f81b 	bl	c8b2 <ring_buf_put_claim>
			if (claim2_len == total_len) {
    e87c:	4285      	cmp	r5, r0
    e87e:	d118      	bne.n	e8b2 <z_shell_history_put+0xba>
				h_prev_item->padding += claim_len;
    e880:	8972      	ldrh	r2, [r6, #10]
    e882:	445a      	add	r2, fp
    e884:	8172      	strh	r2, [r6, #10]
				total_len += claim_len;
    e886:	44ab      	add	fp, r5
			add_to_head(history, h_item, line, len, padding);
    e888:	9d03      	ldr	r5, [sp, #12]
	memcpy(item->data, src, len);
    e88a:	9901      	ldr	r1, [sp, #4]
	item->len = len;
    e88c:	812f      	strh	r7, [r5, #8]
	memcpy(item->data, src, len);
    e88e:	463a      	mov	r2, r7
	item->padding = padding;
    e890:	f8a5 900a 	strh.w	r9, [r5, #10]
	memcpy(item->data, src, len);
    e894:	f105 000c 	add.w	r0, r5, #12
    e898:	f000 fa01 	bl	ec9e <memcpy>
	sys_dnode_t *const head = list->head;
    e89c:	6862      	ldr	r2, [r4, #4]
	node->prev = list;
    e89e:	e9c5 2a00 	strd	r2, sl, [r5]
	head->prev = node;
    e8a2:	6055      	str	r5, [r2, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
    e8a4:	6820      	ldr	r0, [r4, #0]
	list->head = node;
    e8a6:	6065      	str	r5, [r4, #4]
    e8a8:	4659      	mov	r1, fp
    e8aa:	f7fe f821 	bl	c8f0 <ring_buf_put_finish>
			break;
    e8ae:	e7c5      	b.n	e83c <z_shell_history_put+0x44>
		if (claim_len == total_len) {
    e8b0:	d0ea      	beq.n	e888 <z_shell_history_put+0x90>
		ring_buf_put_finish(history->ring_buf, 0);
    e8b2:	6820      	ldr	r0, [r4, #0]
    e8b4:	2100      	movs	r1, #0
    e8b6:	f7fe f81b 	bl	c8f0 <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
    e8ba:	6863      	ldr	r3, [r4, #4]
    e8bc:	459a      	cmp	sl, r3
    e8be:	d0c3      	beq.n	e848 <z_shell_history_put+0x50>
    e8c0:	4620      	mov	r0, r4
    e8c2:	f7ff ff4d 	bl	e760 <remove_from_tail.part.0>
    e8c6:	e7bf      	b.n	e848 <z_shell_history_put+0x50>

0000e8c8 <z_shell_history_init>:

void z_shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
    e8c8:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
    e8ca:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
    e8ce:	2300      	movs	r3, #0
    e8d0:	60c3      	str	r3, [r0, #12]
}
    e8d2:	4770      	bx	lr

0000e8d4 <z_shell_has_wildcard>:
{
    e8d4:	b510      	push	{r4, lr}
    e8d6:	4604      	mov	r4, r0
    e8d8:	b128      	cbz	r0, e8e6 <z_shell_has_wildcard+0x12>
    e8da:	f000 f989 	bl	ebf0 <strlen>
	for (size_t i = 0; i < str_len; i++) {
    e8de:	2300      	movs	r3, #0
    e8e0:	b280      	uxth	r0, r0
    e8e2:	4298      	cmp	r0, r3
    e8e4:	d801      	bhi.n	e8ea <z_shell_has_wildcard+0x16>
	return false;
    e8e6:	2000      	movs	r0, #0
}
    e8e8:	bd10      	pop	{r4, pc}
		if ((str[i] == '?') || (str[i] == '*')) {
    e8ea:	5ce2      	ldrb	r2, [r4, r3]
    e8ec:	2a3f      	cmp	r2, #63	; 0x3f
    e8ee:	d003      	beq.n	e8f8 <z_shell_has_wildcard+0x24>
    e8f0:	2a2a      	cmp	r2, #42	; 0x2a
    e8f2:	d001      	beq.n	e8f8 <z_shell_has_wildcard+0x24>
	for (size_t i = 0; i < str_len; i++) {
    e8f4:	3301      	adds	r3, #1
    e8f6:	e7f4      	b.n	e8e2 <z_shell_has_wildcard+0xe>
			return true;
    e8f8:	2001      	movs	r0, #1
    e8fa:	e7f5      	b.n	e8e8 <z_shell_has_wildcard+0x14>

0000e8fc <z_shell_wildcard_prepare>:
{
    e8fc:	b510      	push	{r4, lr}
    e8fe:	4604      	mov	r4, r0
	memset(sh->ctx->temp_buff, 0, sizeof(sh->ctx->temp_buff));
    e900:	6880      	ldr	r0, [r0, #8]
    e902:	f44f 7280 	mov.w	r2, #256	; 0x100
    e906:	2100      	movs	r1, #0
    e908:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    e90c:	f000 f9d2 	bl	ecb4 <memset>
	memcpy(sh->ctx->temp_buff,
    e910:	68a0      	ldr	r0, [r4, #8]
    e912:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    e914:	f100 0142 	add.w	r1, r0, #66	; 0x42
    e918:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    e91c:	f000 f9bf 	bl	ec9e <memcpy>
	z_shell_spaces_trim(sh->ctx->temp_buff);
    e920:	68a0      	ldr	r0, [r4, #8]
    e922:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    e926:	f7ff f9de 	bl	dce6 <z_shell_spaces_trim>
	sh->ctx->cmd_tmp_buff_len = z_shell_strlen(sh->ctx->temp_buff) + 1;
    e92a:	68a0      	ldr	r0, [r4, #8]
    e92c:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    e930:	f000 f95e 	bl	ebf0 <strlen>
    e934:	68a3      	ldr	r3, [r4, #8]
    e936:	3001      	adds	r0, #1
    e938:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
}
    e93c:	bd10      	pop	{r4, pc}

0000e93e <z_shell_wildcard_finalize>:

void z_shell_wildcard_finalize(const struct shell *sh)
{
    e93e:	b510      	push	{r4, lr}
    e940:	4604      	mov	r4, r0
	memcpy(sh->ctx->cmd_buff,
    e942:	6880      	ldr	r0, [r0, #8]
    e944:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
    e948:	f500 71a1 	add.w	r1, r0, #322	; 0x142
    e94c:	3042      	adds	r0, #66	; 0x42
    e94e:	f000 f9a6 	bl	ec9e <memcpy>
	       sh->ctx->temp_buff,
	       sh->ctx->cmd_tmp_buff_len);
	sh->ctx->cmd_buff_len = sh->ctx->cmd_tmp_buff_len;
    e952:	68a3      	ldr	r3, [r4, #8]
    e954:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    e958:	879a      	strh	r2, [r3, #60]	; 0x3c
}
    e95a:	bd10      	pop	{r4, pc}

0000e95c <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    e95c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    e95e:	6800      	ldr	r0, [r0, #0]
    e960:	f7f7 bf90 	b.w	6884 <z_arm_fatal_error>

0000e964 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    e964:	2100      	movs	r1, #0
    e966:	2001      	movs	r0, #1
    e968:	f7f7 bf8c 	b.w	6884 <z_arm_fatal_error>

0000e96c <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    e96c:	b508      	push	{r3, lr}
	handler();
    e96e:	f7f8 f847 	bl	6a00 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    e972:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    e976:	f7f8 b903 	b.w	6b80 <z_arm_exc_exit>

0000e97a <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
    e97a:	2300      	movs	r3, #0
    e97c:	f7f4 bee8 	b.w	3750 <z_impl_z_log_msg_static_create>

0000e980 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
    e980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e984:	4684      	mov	ip, r0
    e986:	4688      	mov	r8, r1
	register const char *s = nptr;
    e988:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
    e98a:	4621      	mov	r1, r4
    e98c:	f814 3b01 	ldrb.w	r3, [r4], #1
    e990:	2b20      	cmp	r3, #32
    e992:	d0fa      	beq.n	e98a <strtol+0xa>
    e994:	f1a3 0009 	sub.w	r0, r3, #9
    e998:	2804      	cmp	r0, #4
    e99a:	d9f6      	bls.n	e98a <strtol+0xa>
	} while (isspace((unsigned char)c) != 0);
	if (c == '-') {
    e99c:	2b2d      	cmp	r3, #45	; 0x2d
    e99e:	d123      	bne.n	e9e8 <strtol+0x68>
		neg = 1;
		c = *s++;
    e9a0:	784b      	ldrb	r3, [r1, #1]
    e9a2:	1c8c      	adds	r4, r1, #2
		neg = 1;
    e9a4:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
    e9a6:	bb2a      	cbnz	r2, e9f4 <strtol+0x74>
    e9a8:	2b30      	cmp	r3, #48	; 0x30
    e9aa:	d030      	beq.n	ea0e <strtol+0x8e>
		s += 2;
		base = 16;
	}

	if (base == 0) {
		base = c == '0' ? 8 : 10;
    e9ac:	220a      	movs	r2, #10
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
    e9ae:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
    e9b2:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
    e9b4:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
    e9b6:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
    e9ba:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
    e9bc:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    e9c0:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit((unsigned char)c) != 0) {
    e9c4:	2d09      	cmp	r5, #9
    e9c6:	d829      	bhi.n	ea1c <strtol+0x9c>
			c -= '0';
    e9c8:	462b      	mov	r3, r5
		} else if (isalpha((unsigned char)c) != 0) {
			c -= isupper((unsigned char)c) != 0 ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
    e9ca:	429a      	cmp	r2, r3
    e9cc:	dd36      	ble.n	ea3c <strtol+0xbc>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
    e9ce:	1c75      	adds	r5, r6, #1
    e9d0:	d007      	beq.n	e9e2 <strtol+0x62>
    e9d2:	4570      	cmp	r0, lr
    e9d4:	d82f      	bhi.n	ea36 <strtol+0xb6>
    e9d6:	d101      	bne.n	e9dc <strtol+0x5c>
    e9d8:	454b      	cmp	r3, r9
    e9da:	dc2c      	bgt.n	ea36 <strtol+0xb6>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
    e9dc:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
    e9e0:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
    e9e2:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit((unsigned char)c) != 0) {
    e9e6:	e7eb      	b.n	e9c0 <strtol+0x40>
	} else if (c == '+') {
    e9e8:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
    e9ea:	bf04      	itt	eq
    e9ec:	784b      	ldrbeq	r3, [r1, #1]
    e9ee:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
    e9f0:	2100      	movs	r1, #0
    e9f2:	e7d8      	b.n	e9a6 <strtol+0x26>
	if ((base == 0 || base == 16) &&
    e9f4:	2a10      	cmp	r2, #16
    e9f6:	d1da      	bne.n	e9ae <strtol+0x2e>
    e9f8:	2b30      	cmp	r3, #48	; 0x30
    e9fa:	d1d8      	bne.n	e9ae <strtol+0x2e>
	    c == '0' && (*s == 'x' || *s == 'X')) {
    e9fc:	7820      	ldrb	r0, [r4, #0]
    e9fe:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    ea02:	2858      	cmp	r0, #88	; 0x58
    ea04:	d1d3      	bne.n	e9ae <strtol+0x2e>
		c = s[1];
    ea06:	7863      	ldrb	r3, [r4, #1]
		base = 16;
    ea08:	2210      	movs	r2, #16
		s += 2;
    ea0a:	3402      	adds	r4, #2
	if (base == 0) {
    ea0c:	e7cf      	b.n	e9ae <strtol+0x2e>
	    c == '0' && (*s == 'x' || *s == 'X')) {
    ea0e:	7822      	ldrb	r2, [r4, #0]
    ea10:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    ea14:	2a58      	cmp	r2, #88	; 0x58
    ea16:	d0f6      	beq.n	ea06 <strtol+0x86>
		base = c == '0' ? 8 : 10;
    ea18:	2208      	movs	r2, #8
    ea1a:	e7c8      	b.n	e9ae <strtol+0x2e>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    ea1c:	f043 0520 	orr.w	r5, r3, #32
    ea20:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha((unsigned char)c) != 0) {
    ea22:	2d19      	cmp	r5, #25
    ea24:	d80a      	bhi.n	ea3c <strtol+0xbc>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    ea26:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper((unsigned char)c) != 0 ? 'A' - 10 : 'a' - 10;
    ea2a:	2d1a      	cmp	r5, #26
    ea2c:	bf34      	ite	cc
    ea2e:	2537      	movcc	r5, #55	; 0x37
    ea30:	2557      	movcs	r5, #87	; 0x57
    ea32:	1b5b      	subs	r3, r3, r5
    ea34:	e7c9      	b.n	e9ca <strtol+0x4a>
			any = -1;
    ea36:	f04f 36ff 	mov.w	r6, #4294967295
    ea3a:	e7d2      	b.n	e9e2 <strtol+0x62>
		}
	}

	if (any < 0) {
    ea3c:	1c73      	adds	r3, r6, #1
    ea3e:	d109      	bne.n	ea54 <strtol+0xd4>
    ea40:	f7fb ffba 	bl	a9b8 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
    ea44:	2322      	movs	r3, #34	; 0x22
    ea46:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
    ea48:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
    ea4a:	f1b8 0f00 	cmp.w	r8, #0
    ea4e:	d107      	bne.n	ea60 <strtol+0xe0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
    ea50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
    ea54:	b101      	cbz	r1, ea58 <strtol+0xd8>
		acc = -acc;
    ea56:	4240      	negs	r0, r0
	if (endptr != NULL) {
    ea58:	f1b8 0f00 	cmp.w	r8, #0
    ea5c:	d0f8      	beq.n	ea50 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
    ea5e:	b10e      	cbz	r6, ea64 <strtol+0xe4>
    ea60:	f104 3cff 	add.w	ip, r4, #4294967295
    ea64:	f8c8 c000 	str.w	ip, [r8]
    ea68:	e7f2      	b.n	ea50 <strtol+0xd0>

0000ea6a <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
    ea6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea6e:	4684      	mov	ip, r0
    ea70:	460f      	mov	r7, r1
	register const char *s = nptr;
    ea72:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
    ea74:	4621      	mov	r1, r4
    ea76:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    ea7a:	2b20      	cmp	r3, #32
    ea7c:	d0fa      	beq.n	ea74 <strtoul+0xa>
    ea7e:	f1a3 0009 	sub.w	r0, r3, #9
    ea82:	2804      	cmp	r0, #4
    ea84:	d9f6      	bls.n	ea74 <strtoul+0xa>
	} while (isspace((unsigned char)c) != 0);
	if (c == '-') {
    ea86:	2b2d      	cmp	r3, #45	; 0x2d
    ea88:	d125      	bne.n	ead6 <strtoul+0x6c>
		neg = 1;
		c = *s++;
    ea8a:	784b      	ldrb	r3, [r1, #1]
    ea8c:	1c8c      	adds	r4, r1, #2
		neg = 1;
    ea8e:	f04f 0e01 	mov.w	lr, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
    ea92:	bb3a      	cbnz	r2, eae4 <strtoul+0x7a>
    ea94:	2b30      	cmp	r3, #48	; 0x30
    ea96:	d032      	beq.n	eafe <strtoul+0x94>
		s += 2;
		base = 16;
	}

	if (base == 0) {
		base = c == '0' ? 8 : 10;
    ea98:	220a      	movs	r2, #10
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
    ea9a:	f04f 31ff 	mov.w	r1, #4294967295
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
    ea9e:	2500      	movs	r5, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
    eaa0:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
    eaa4:	fb02 f801 	mul.w	r8, r2, r1
    eaa8:	ea6f 0808 	mvn.w	r8, r8
	for (acc = 0, any = 0;; c = *s++) {
    eaac:	4628      	mov	r0, r5
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    eaae:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
		if (isdigit((unsigned char)c) != 0) {
    eab2:	2e09      	cmp	r6, #9
    eab4:	d82a      	bhi.n	eb0c <strtoul+0xa2>
			c -= '0';
    eab6:	4633      	mov	r3, r6
		} else if (isalpha((unsigned char)c) != 0) {
			c -= isupper((unsigned char)c) != 0 ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
    eab8:	429a      	cmp	r2, r3
    eaba:	dd37      	ble.n	eb2c <strtoul+0xc2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
    eabc:	1c6e      	adds	r6, r5, #1
    eabe:	d007      	beq.n	ead0 <strtoul+0x66>
    eac0:	4288      	cmp	r0, r1
    eac2:	d830      	bhi.n	eb26 <strtoul+0xbc>
    eac4:	d101      	bne.n	eaca <strtoul+0x60>
    eac6:	4543      	cmp	r3, r8
    eac8:	dc2d      	bgt.n	eb26 <strtoul+0xbc>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
    eaca:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
    eace:	2501      	movs	r5, #1
	for (acc = 0, any = 0;; c = *s++) {
    ead0:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit((unsigned char)c) != 0) {
    ead4:	e7eb      	b.n	eaae <strtoul+0x44>
	} else if (c == '+') {
    ead6:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
    ead8:	bf04      	itt	eq
    eada:	784b      	ldrbeq	r3, [r1, #1]
    eadc:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
    eade:	f04f 0e00 	mov.w	lr, #0
    eae2:	e7d6      	b.n	ea92 <strtoul+0x28>
	if ((base == 0 || base == 16) &&
    eae4:	2a10      	cmp	r2, #16
    eae6:	d1d8      	bne.n	ea9a <strtoul+0x30>
    eae8:	2b30      	cmp	r3, #48	; 0x30
    eaea:	d1d6      	bne.n	ea9a <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
    eaec:	7821      	ldrb	r1, [r4, #0]
    eaee:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    eaf2:	2958      	cmp	r1, #88	; 0x58
    eaf4:	d1d1      	bne.n	ea9a <strtoul+0x30>
		c = s[1];
    eaf6:	7863      	ldrb	r3, [r4, #1]
		base = 16;
    eaf8:	2210      	movs	r2, #16
		s += 2;
    eafa:	3402      	adds	r4, #2
	if (base == 0) {
    eafc:	e7cd      	b.n	ea9a <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
    eafe:	7822      	ldrb	r2, [r4, #0]
    eb00:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    eb04:	2a58      	cmp	r2, #88	; 0x58
    eb06:	d0f6      	beq.n	eaf6 <strtoul+0x8c>
		base = c == '0' ? 8 : 10;
    eb08:	2208      	movs	r2, #8
    eb0a:	e7c6      	b.n	ea9a <strtoul+0x30>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    eb0c:	f043 0620 	orr.w	r6, r3, #32
    eb10:	3e61      	subs	r6, #97	; 0x61
		} else if (isalpha((unsigned char)c) != 0) {
    eb12:	2e19      	cmp	r6, #25
    eb14:	d80a      	bhi.n	eb2c <strtoul+0xc2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    eb16:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
			c -= isupper((unsigned char)c) != 0 ? 'A' - 10 : 'a' - 10;
    eb1a:	2e1a      	cmp	r6, #26
    eb1c:	bf34      	ite	cc
    eb1e:	2637      	movcc	r6, #55	; 0x37
    eb20:	2657      	movcs	r6, #87	; 0x57
    eb22:	1b9b      	subs	r3, r3, r6
    eb24:	e7c8      	b.n	eab8 <strtoul+0x4e>
			any = -1;
    eb26:	f04f 35ff 	mov.w	r5, #4294967295
    eb2a:	e7d1      	b.n	ead0 <strtoul+0x66>
		}
	}
	if (any < 0) {
    eb2c:	1c6b      	adds	r3, r5, #1
    eb2e:	d107      	bne.n	eb40 <strtoul+0xd6>
    eb30:	f7fb ff42 	bl	a9b8 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
    eb34:	2322      	movs	r3, #34	; 0x22
    eb36:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
    eb38:	4628      	mov	r0, r5
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
    eb3a:	b947      	cbnz	r7, eb4e <strtoul+0xe4>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
    eb3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
    eb40:	f1be 0f00 	cmp.w	lr, #0
    eb44:	d000      	beq.n	eb48 <strtoul+0xde>
		acc = -acc;
    eb46:	4240      	negs	r0, r0
	if (endptr != NULL) {
    eb48:	2f00      	cmp	r7, #0
    eb4a:	d0f7      	beq.n	eb3c <strtoul+0xd2>
		*endptr = (char *)(any ? s - 1 : nptr);
    eb4c:	b10d      	cbz	r5, eb52 <strtoul+0xe8>
    eb4e:	f104 3cff 	add.w	ip, r4, #4294967295
    eb52:	f8c7 c000 	str.w	ip, [r7]
	return acc;
    eb56:	e7f1      	b.n	eb3c <strtoul+0xd2>

0000eb58 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
    eb58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
    eb5c:	f891 8000 	ldrb.w	r8, [r1]
{
    eb60:	4605      	mov	r5, r0
	if (c != 0) {
    eb62:	f1b8 0f00 	cmp.w	r8, #0
    eb66:	d010      	beq.n	eb8a <strstr+0x32>
	c = *find++;
    eb68:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
    eb6a:	4620      	mov	r0, r4
    eb6c:	f000 f840 	bl	ebf0 <strlen>
    eb70:	4607      	mov	r7, r0
		do {
			do {
				sc = *s++;
    eb72:	462e      	mov	r6, r5
    eb74:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
    eb78:	b163      	cbz	r3, eb94 <strstr+0x3c>
					return NULL;
				}
			} while (sc != c);
    eb7a:	4598      	cmp	r8, r3
    eb7c:	d108      	bne.n	eb90 <strstr+0x38>
		} while (strncmp(s, find, len) != 0);
    eb7e:	463a      	mov	r2, r7
    eb80:	4621      	mov	r1, r4
    eb82:	4630      	mov	r0, r6
    eb84:	f000 f850 	bl	ec28 <strncmp>
    eb88:	b910      	cbnz	r0, eb90 <strstr+0x38>
		s--;
	}
	return (char *)s;
}
    eb8a:	4628      	mov	r0, r5
    eb8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    eb90:	4635      	mov	r5, r6
    eb92:	e7ee      	b.n	eb72 <strstr+0x1a>
					return NULL;
    eb94:	461d      	mov	r5, r3
    eb96:	e7f8      	b.n	eb8a <strstr+0x32>

0000eb98 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    eb98:	3901      	subs	r1, #1
    eb9a:	4603      	mov	r3, r0
    eb9c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    eba0:	b90a      	cbnz	r2, eba6 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    eba2:	701a      	strb	r2, [r3, #0]

	return dest;
}
    eba4:	4770      	bx	lr
		*d = *s;
    eba6:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    ebaa:	e7f7      	b.n	eb9c <strcpy+0x4>

0000ebac <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
    ebac:	b510      	push	{r4, lr}
    ebae:	3901      	subs	r1, #1
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    ebb0:	4603      	mov	r3, r0
    ebb2:	b922      	cbnz	r2, ebbe <strncpy+0x12>
    ebb4:	441a      	add	r2, r3
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
    ebb6:	2100      	movs	r1, #0
	while (n > 0) {
    ebb8:	4293      	cmp	r3, r2
    ebba:	d108      	bne.n	ebce <strncpy+0x22>
		d++;
		n--;
	}

	return dest;
}
    ebbc:	bd10      	pop	{r4, pc}
	while ((n > 0) && *s != '\0') {
    ebbe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    ebc2:	2c00      	cmp	r4, #0
    ebc4:	d0f6      	beq.n	ebb4 <strncpy+0x8>
		*d = *s;
    ebc6:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    ebca:	3a01      	subs	r2, #1
    ebcc:	e7f1      	b.n	ebb2 <strncpy+0x6>
		*d = '\0';
    ebce:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    ebd2:	e7f1      	b.n	ebb8 <strncpy+0xc>

0000ebd4 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
    ebd4:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
    ebd6:	4603      	mov	r3, r0
    ebd8:	781a      	ldrb	r2, [r3, #0]
    ebda:	428a      	cmp	r2, r1
    ebdc:	4618      	mov	r0, r3
    ebde:	f103 0301 	add.w	r3, r3, #1
    ebe2:	d004      	beq.n	ebee <strchr+0x1a>
    ebe4:	2a00      	cmp	r2, #0
    ebe6:	d1f7      	bne.n	ebd8 <strchr+0x4>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
    ebe8:	2900      	cmp	r1, #0
    ebea:	bf18      	it	ne
    ebec:	2000      	movne	r0, #0
}
    ebee:	4770      	bx	lr

0000ebf0 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    ebf0:	4603      	mov	r3, r0
	size_t n = 0;
    ebf2:	2000      	movs	r0, #0

	while (*s != '\0') {
    ebf4:	5c1a      	ldrb	r2, [r3, r0]
    ebf6:	b902      	cbnz	r2, ebfa <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    ebf8:	4770      	bx	lr
		n++;
    ebfa:	3001      	adds	r0, #1
    ebfc:	e7fa      	b.n	ebf4 <strlen+0x4>

0000ebfe <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    ebfe:	4603      	mov	r3, r0
	size_t n = 0;
    ec00:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    ec02:	5c1a      	ldrb	r2, [r3, r0]
    ec04:	b10a      	cbz	r2, ec0a <strnlen+0xc>
    ec06:	4288      	cmp	r0, r1
    ec08:	d100      	bne.n	ec0c <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    ec0a:	4770      	bx	lr
		n++;
    ec0c:	3001      	adds	r0, #1
    ec0e:	e7f8      	b.n	ec02 <strnlen+0x4>

0000ec10 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    ec10:	1e43      	subs	r3, r0, #1
    ec12:	3901      	subs	r1, #1
    ec14:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    ec18:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    ec1c:	4282      	cmp	r2, r0
    ec1e:	d101      	bne.n	ec24 <strcmp+0x14>
    ec20:	2a00      	cmp	r2, #0
    ec22:	d1f7      	bne.n	ec14 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    ec24:	1a10      	subs	r0, r2, r0
    ec26:	4770      	bx	lr

0000ec28 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
    ec28:	b570      	push	{r4, r5, r6, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    ec2a:	460b      	mov	r3, r1
    ec2c:	4605      	mov	r5, r0
    ec2e:	b16a      	cbz	r2, ec4c <strncmp+0x24>
    ec30:	f810 6b01 	ldrb.w	r6, [r0], #1
    ec34:	781c      	ldrb	r4, [r3, #0]
    ec36:	42b4      	cmp	r4, r6
    ec38:	f101 0101 	add.w	r1, r1, #1
    ec3c:	d100      	bne.n	ec40 <strncmp+0x18>
    ec3e:	b91c      	cbnz	r4, ec48 <strncmp+0x20>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
    ec40:	782a      	ldrb	r2, [r5, #0]
    ec42:	781b      	ldrb	r3, [r3, #0]
    ec44:	1ad0      	subs	r0, r2, r3
    ec46:	e002      	b.n	ec4e <strncmp+0x26>
		n--;
    ec48:	3a01      	subs	r2, #1
    ec4a:	e7ee      	b.n	ec2a <strncmp+0x2>
	return (n == 0) ? 0 : (*s1 - *s2);
    ec4c:	4610      	mov	r0, r2
}
    ec4e:	bd70      	pop	{r4, r5, r6, pc}

0000ec50 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    ec50:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    ec52:	b15a      	cbz	r2, ec6c <memcmp+0x1c>
    ec54:	3901      	subs	r1, #1
    ec56:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    ec58:	f810 2b01 	ldrb.w	r2, [r0], #1
    ec5c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    ec60:	42a0      	cmp	r0, r4
    ec62:	d001      	beq.n	ec68 <memcmp+0x18>
    ec64:	429a      	cmp	r2, r3
    ec66:	d0f7      	beq.n	ec58 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    ec68:	1ad0      	subs	r0, r2, r3
}
    ec6a:	bd10      	pop	{r4, pc}
		return 0;
    ec6c:	4610      	mov	r0, r2
    ec6e:	e7fc      	b.n	ec6a <memcmp+0x1a>

0000ec70 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    ec70:	1a43      	subs	r3, r0, r1
    ec72:	4293      	cmp	r3, r2
{
    ec74:	b510      	push	{r4, lr}
    ec76:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    ec7a:	d308      	bcc.n	ec8e <memmove+0x1e>
    ec7c:	3901      	subs	r1, #1
	char *dest = d;
    ec7e:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    ec80:	429a      	cmp	r2, r3
    ec82:	d00b      	beq.n	ec9c <memmove+0x2c>
			*dest = *src;
    ec84:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    ec88:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    ec8c:	e7f8      	b.n	ec80 <memmove+0x10>
    ec8e:	440a      	add	r2, r1
			dest[n] = src[n];
    ec90:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
    ec94:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    ec98:	428a      	cmp	r2, r1
    ec9a:	d1f9      	bne.n	ec90 <memmove+0x20>
		}
	}

	return d;
}
    ec9c:	bd10      	pop	{r4, pc}

0000ec9e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    ec9e:	b510      	push	{r4, lr}
    eca0:	1e43      	subs	r3, r0, #1
    eca2:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    eca4:	4291      	cmp	r1, r2
    eca6:	d100      	bne.n	ecaa <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    eca8:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    ecaa:	f811 4b01 	ldrb.w	r4, [r1], #1
    ecae:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    ecb2:	e7f7      	b.n	eca4 <memcpy+0x6>

0000ecb4 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    ecb4:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    ecb6:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    ecb8:	4603      	mov	r3, r0
	while (n > 0) {
    ecba:	4293      	cmp	r3, r2
    ecbc:	d100      	bne.n	ecc0 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    ecbe:	4770      	bx	lr
		*(d_byte++) = c_byte;
    ecc0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    ecc4:	e7f9      	b.n	ecba <memset+0x6>

0000ecc6 <_stdout_hook_default>:
}
    ecc6:	f04f 30ff 	mov.w	r0, #4294967295
    ecca:	4770      	bx	lr

0000eccc <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
    eccc:	684b      	ldr	r3, [r1, #4]
    ecce:	2b01      	cmp	r3, #1
    ecd0:	dd07      	ble.n	ece2 <sprintf_out+0x16>
		*(p->ptr) = c;
    ecd2:	680b      	ldr	r3, [r1, #0]
    ecd4:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
    ecd6:	680b      	ldr	r3, [r1, #0]
    ecd8:	3301      	adds	r3, #1
    ecda:	600b      	str	r3, [r1, #0]
		p->len -= 1;
    ecdc:	684b      	ldr	r3, [r1, #4]
    ecde:	3b01      	subs	r3, #1
    ece0:	604b      	str	r3, [r1, #4]
}
    ece2:	2000      	movs	r0, #0
    ece4:	4770      	bx	lr

0000ece6 <foldcase>:
#define EOS '\0'

static inline int foldcase(int ch, int flags)
{

	if ((flags & FNM_CASEFOLD) != 0 && isupper(ch)) {
    ece6:	070b      	lsls	r3, r1, #28
    ece8:	d504      	bpl.n	ecf4 <foldcase+0xe>
    ecea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
    ecee:	2b19      	cmp	r3, #25
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
    ecf0:	bf98      	it	ls
    ecf2:	3020      	addls	r0, #32
		return tolower(ch);
	}

	return ch;
}
    ecf4:	4770      	bx	lr

0000ecf6 <fnmatchx>:

	return ok == negate ? NULL : pattern;
}

static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
    ecf6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ecfa:	b085      	sub	sp, #20
    ecfc:	468a      	mov	sl, r1
    ecfe:	4615      	mov	r5, r2
    ed00:	9302      	str	r3, [sp, #8]
	const char *stringstart, *r;
	char c, test;

	if (pattern == NULL || string == NULL) {
    ed02:	4604      	mov	r4, r0
    ed04:	b918      	cbnz	r0, ed0e <fnmatchx+0x18>
		return FNM_NOMATCH;
    ed06:	2001      	movs	r0, #1

			break;
		}
	}
	/* NOTREACHED */
}
    ed08:	b005      	add	sp, #20
    ed0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (pattern == NULL || string == NULL) {
    ed0e:	2900      	cmp	r1, #0
    ed10:	d0f9      	beq.n	ed06 <fnmatchx+0x10>
	if (recursion-- == 0) {
    ed12:	9b02      	ldr	r3, [sp, #8]
    ed14:	2b00      	cmp	r3, #0
    ed16:	f000 810e 	beq.w	ef36 <fnmatchx+0x240>
    ed1a:	460a      	mov	r2, r1
		c = FOLDCASE(*pattern++, flags);
    ed1c:	46a0      	mov	r8, r4
    ed1e:	4629      	mov	r1, r5
    ed20:	f818 0b01 	ldrb.w	r0, [r8], #1
    ed24:	f7ff ffdf 	bl	ece6 <foldcase>
    ed28:	4603      	mov	r3, r0
    ed2a:	b2c0      	uxtb	r0, r0
		switch (c) {
    ed2c:	283f      	cmp	r0, #63	; 0x3f
			if ((flags & FNM_LEADING_DIR) && *string == '/') {
    ed2e:	7817      	ldrb	r7, [r2, #0]
    ed30:	4606      	mov	r6, r0
		switch (c) {
    ed32:	d025      	beq.n	ed80 <fnmatchx+0x8a>
    ed34:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    ed38:	d10b      	bne.n	ed52 <fnmatchx+0x5c>
    ed3a:	b1c8      	cbz	r0, ed70 <fnmatchx+0x7a>
    ed3c:	282a      	cmp	r0, #42	; 0x2a
    ed3e:	d035      	beq.n	edac <fnmatchx+0xb6>
			if (c != FOLDCASE(*string++, flags)) {
    ed40:	4629      	mov	r1, r5
    ed42:	4638      	mov	r0, r7
    ed44:	f7ff ffcf 	bl	ece6 <foldcase>
    ed48:	4286      	cmp	r6, r0
    ed4a:	f102 0201 	add.w	r2, r2, #1
    ed4e:	d01e      	beq.n	ed8e <fnmatchx+0x98>
    ed50:	e7d9      	b.n	ed06 <fnmatchx+0x10>
		switch (c) {
    ed52:	285b      	cmp	r0, #91	; 0x5b
    ed54:	d07a      	beq.n	ee4c <fnmatchx+0x156>
    ed56:	285c      	cmp	r0, #92	; 0x5c
    ed58:	d1f2      	bne.n	ed40 <fnmatchx+0x4a>
			if (!(flags & FNM_NOESCAPE)) {
    ed5a:	07eb      	lsls	r3, r5, #31
    ed5c:	d4f0      	bmi.n	ed40 <fnmatchx+0x4a>
				c = FOLDCASE(*pattern++, flags);
    ed5e:	7860      	ldrb	r0, [r4, #1]
    ed60:	f7ff ffc1 	bl	ece6 <foldcase>
				if (c == EOS) {
    ed64:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
				c = FOLDCASE(*pattern++, flags);
    ed68:	bf18      	it	ne
    ed6a:	f104 0802 	addne.w	r8, r4, #2
    ed6e:	e7e7      	b.n	ed40 <fnmatchx+0x4a>
			if ((flags & FNM_LEADING_DIR) && *string == '/') {
    ed70:	06ec      	lsls	r4, r5, #27
    ed72:	d501      	bpl.n	ed78 <fnmatchx+0x82>
    ed74:	2f2f      	cmp	r7, #47	; 0x2f
    ed76:	d0c7      	beq.n	ed08 <fnmatchx+0x12>
			return *string == EOS ? 0 : FNM_NOMATCH;
    ed78:	1e38      	subs	r0, r7, #0
						       : FNM_NOMATCH;
    ed7a:	bf18      	it	ne
    ed7c:	2001      	movne	r0, #1
    ed7e:	e7c3      	b.n	ed08 <fnmatchx+0x12>
			if (*string == EOS) {
    ed80:	2f00      	cmp	r7, #0
    ed82:	d0c0      	beq.n	ed06 <fnmatchx+0x10>
			if (*string == '/' && (flags & FNM_PATHNAME)) {
    ed84:	2f2f      	cmp	r7, #47	; 0x2f
    ed86:	d104      	bne.n	ed92 <fnmatchx+0x9c>
    ed88:	07a8      	lsls	r0, r5, #30
    ed8a:	d4bc      	bmi.n	ed06 <fnmatchx+0x10>
			++string;
    ed8c:	3201      	adds	r2, #1
			break;
    ed8e:	4644      	mov	r4, r8
    ed90:	e7c4      	b.n	ed1c <fnmatchx+0x26>
			if (*string == '.' && (flags & FNM_PERIOD) &&
    ed92:	2f2e      	cmp	r7, #46	; 0x2e
    ed94:	d1fa      	bne.n	ed8c <fnmatchx+0x96>
    ed96:	0769      	lsls	r1, r5, #29
    ed98:	d5f8      	bpl.n	ed8c <fnmatchx+0x96>
    ed9a:	4552      	cmp	r2, sl
    ed9c:	d0b3      	beq.n	ed06 <fnmatchx+0x10>
			    (string == stringstart ||
    ed9e:	07ab      	lsls	r3, r5, #30
    eda0:	d5f4      	bpl.n	ed8c <fnmatchx+0x96>
			     ((flags & FNM_PATHNAME) && *(string - 1) == '/'))) {
    eda2:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    eda6:	2b2f      	cmp	r3, #47	; 0x2f
    eda8:	d1f0      	bne.n	ed8c <fnmatchx+0x96>
    edaa:	e7ac      	b.n	ed06 <fnmatchx+0x10>
			c = FOLDCASE(*pattern, flags);
    edac:	7860      	ldrb	r0, [r4, #1]
				c = FOLDCASE(*++pattern, flags);
    edae:	f7ff ff9a 	bl	ece6 <foldcase>
    edb2:	b2c1      	uxtb	r1, r0
			while (c == '*') {
    edb4:	292a      	cmp	r1, #42	; 0x2a
    edb6:	d018      	beq.n	edea <fnmatchx+0xf4>
			if (*string == '.' && (flags & FNM_PERIOD) &&
    edb8:	2f2e      	cmp	r7, #46	; 0x2e
    edba:	d109      	bne.n	edd0 <fnmatchx+0xda>
    edbc:	076f      	lsls	r7, r5, #29
    edbe:	d507      	bpl.n	edd0 <fnmatchx+0xda>
    edc0:	4552      	cmp	r2, sl
    edc2:	d0a0      	beq.n	ed06 <fnmatchx+0x10>
			    (string == stringstart ||
    edc4:	07ae      	lsls	r6, r5, #30
    edc6:	d503      	bpl.n	edd0 <fnmatchx+0xda>
			     ((flags & FNM_PATHNAME) && *(string - 1) == '/'))) {
    edc8:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    edcc:	2b2f      	cmp	r3, #47	; 0x2f
    edce:	d09a      	beq.n	ed06 <fnmatchx+0x10>
			if (c == EOS) {
    edd0:	b979      	cbnz	r1, edf2 <fnmatchx+0xfc>
				if (flags & FNM_PATHNAME) {
    edd2:	f015 0002 	ands.w	r0, r5, #2
    edd6:	d097      	beq.n	ed08 <fnmatchx+0x12>
						       : FNM_NOMATCH;
    edd8:	06ed      	lsls	r5, r5, #27
    edda:	f100 80ae 	bmi.w	ef3a <fnmatchx+0x244>
							       strchr(string, '/') == NULL
    edde:	212f      	movs	r1, #47	; 0x2f
    ede0:	4610      	mov	r0, r2
    ede2:	f7ff fef7 	bl	ebd4 <strchr>
						       : FNM_NOMATCH;
    ede6:	3800      	subs	r0, #0
    ede8:	e7c7      	b.n	ed7a <fnmatchx+0x84>
				c = FOLDCASE(*++pattern, flags);
    edea:	f818 0f01 	ldrb.w	r0, [r8, #1]!
    edee:	4629      	mov	r1, r5
    edf0:	e7dd      	b.n	edae <fnmatchx+0xb8>
			} else if (c == '/' && flags & FNM_PATHNAME) {
    edf2:	292f      	cmp	r1, #47	; 0x2f
    edf4:	d108      	bne.n	ee08 <fnmatchx+0x112>
    edf6:	07ac      	lsls	r4, r5, #30
    edf8:	d506      	bpl.n	ee08 <fnmatchx+0x112>
				string = strchr(string, '/');
    edfa:	4610      	mov	r0, r2
    edfc:	f7ff feea 	bl	ebd4 <strchr>
				if (string == NULL) {
    ee00:	4602      	mov	r2, r0
    ee02:	2800      	cmp	r0, #0
    ee04:	d1c3      	bne.n	ed8e <fnmatchx+0x98>
    ee06:	e77e      	b.n	ed06 <fnmatchx+0x10>
	if (recursion-- == 0) {
    ee08:	9b02      	ldr	r3, [sp, #8]
    ee0a:	4616      	mov	r6, r2
    ee0c:	f103 39ff 	add.w	r9, r3, #4294967295
				int e = fnmatchx(pattern, string, flags & ~FNM_PERIOD, recursion);
    ee10:	f025 0a04 	bic.w	sl, r5, #4
				if (test == '/' && flags & FNM_PATHNAME) {
    ee14:	f005 0702 	and.w	r7, r5, #2
    ee18:	46b3      	mov	fp, r6
				test = FOLDCASE(*string, flags);
    ee1a:	4629      	mov	r1, r5
    ee1c:	f89b 0000 	ldrb.w	r0, [fp]
    ee20:	f7ff ff61 	bl	ece6 <foldcase>
				if (test == EOS) {
    ee24:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
    ee28:	f106 0601 	add.w	r6, r6, #1
    ee2c:	f43f af6b 	beq.w	ed06 <fnmatchx+0x10>
				int e = fnmatchx(pattern, string, flags & ~FNM_PERIOD, recursion);
    ee30:	464b      	mov	r3, r9
    ee32:	4652      	mov	r2, sl
    ee34:	4659      	mov	r1, fp
    ee36:	4640      	mov	r0, r8
    ee38:	f7ff ff5d 	bl	ecf6 <fnmatchx>
				if (e != FNM_NOMATCH) {
    ee3c:	2801      	cmp	r0, #1
    ee3e:	f47f af63 	bne.w	ed08 <fnmatchx+0x12>
				if (test == '/' && flags & FNM_PATHNAME) {
    ee42:	2c2f      	cmp	r4, #47	; 0x2f
    ee44:	d1e8      	bne.n	ee18 <fnmatchx+0x122>
    ee46:	2f00      	cmp	r7, #0
    ee48:	d0e6      	beq.n	ee18 <fnmatchx+0x122>
    ee4a:	e75c      	b.n	ed06 <fnmatchx+0x10>
			if (*string == EOS) {
    ee4c:	2f00      	cmp	r7, #0
    ee4e:	f43f af5a 	beq.w	ed06 <fnmatchx+0x10>
			if (*string == '/' && flags & FNM_PATHNAME) {
    ee52:	2f2f      	cmp	r7, #47	; 0x2f
    ee54:	d102      	bne.n	ee5c <fnmatchx+0x166>
    ee56:	07a8      	lsls	r0, r5, #30
    ee58:	f53f af55 	bmi.w	ed06 <fnmatchx+0x10>
			r = rangematch(pattern, FOLDCASE(*string, flags), flags);
    ee5c:	4638      	mov	r0, r7
    ee5e:	f7ff ff42 	bl	ece6 <foldcase>
	negate = *pattern == '!' || *pattern == '^';
    ee62:	7863      	ldrb	r3, [r4, #1]
    ee64:	2b21      	cmp	r3, #33	; 0x21
			r = rangematch(pattern, FOLDCASE(*string, flags), flags);
    ee66:	4681      	mov	r9, r0
	negate = *pattern == '!' || *pattern == '^';
    ee68:	d001      	beq.n	ee6e <fnmatchx+0x178>
    ee6a:	2b5e      	cmp	r3, #94	; 0x5e
    ee6c:	d11d      	bne.n	eeaa <fnmatchx+0x1b4>
		++pattern;
    ee6e:	3402      	adds	r4, #2
    ee70:	2301      	movs	r3, #1
	for (need = true, ok = false, c = FOLDCASE(*pattern++, flags); c != ']' || need;
    ee72:	f814 0b01 	ldrb.w	r0, [r4], #1
	negate = *pattern == '!' || *pattern == '^';
    ee76:	9301      	str	r3, [sp, #4]
	for (need = true, ok = false, c = FOLDCASE(*pattern++, flags); c != ']' || need;
    ee78:	4629      	mov	r1, r5
    ee7a:	f7ff ff34 	bl	ece6 <foldcase>
    ee7e:	b2c6      	uxtb	r6, r0
    ee80:	2e5d      	cmp	r6, #93	; 0x5d
    ee82:	d015      	beq.n	eeb0 <fnmatchx+0x1ba>
    ee84:	f04f 0b00 	mov.w	fp, #0
		if (c == '/') {
    ee88:	2e2f      	cmp	r6, #47	; 0x2f
    ee8a:	d048      	beq.n	ef1e <fnmatchx+0x228>
		if (c == '\\' && !(flags & FNM_NOESCAPE)) {
    ee8c:	2e5c      	cmp	r6, #92	; 0x5c
    ee8e:	d107      	bne.n	eea0 <fnmatchx+0x1aa>
    ee90:	07eb      	lsls	r3, r5, #31
    ee92:	d408      	bmi.n	eea6 <fnmatchx+0x1b0>
			c = FOLDCASE(*pattern++, flags);
    ee94:	f814 0b01 	ldrb.w	r0, [r4], #1
    ee98:	4629      	mov	r1, r5
    ee9a:	f7ff ff24 	bl	ece6 <foldcase>
    ee9e:	b2c6      	uxtb	r6, r0
		if (c == EOS) {
    eea0:	2e00      	cmp	r6, #0
    eea2:	f43f af30 	beq.w	ed06 <fnmatchx+0x10>
    eea6:	4623      	mov	r3, r4
    eea8:	e005      	b.n	eeb6 <fnmatchx+0x1c0>
    eeaa:	4644      	mov	r4, r8
	negate = *pattern == '!' || *pattern == '^';
    eeac:	2300      	movs	r3, #0
    eeae:	e7e0      	b.n	ee72 <fnmatchx+0x17c>
	for (need = true, ok = false, c = FOLDCASE(*pattern++, flags); c != ']' || need;
    eeb0:	4623      	mov	r3, r4
    eeb2:	f04f 0b00 	mov.w	fp, #0
		if (*pattern == '-') {
    eeb6:	7821      	ldrb	r1, [r4, #0]
    eeb8:	292d      	cmp	r1, #45	; 0x2d
    eeba:	d137      	bne.n	ef2c <fnmatchx+0x236>
			c2 = FOLDCASE(*(pattern + 1), flags);
    eebc:	7860      	ldrb	r0, [r4, #1]
    eebe:	9303      	str	r3, [sp, #12]
    eec0:	4629      	mov	r1, r5
    eec2:	f7ff ff10 	bl	ece6 <foldcase>
			if (c2 != EOS && c2 != ']') {
    eec6:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    eeca:	9b03      	ldr	r3, [sp, #12]
    eecc:	d018      	beq.n	ef00 <fnmatchx+0x20a>
    eece:	285d      	cmp	r0, #93	; 0x5d
    eed0:	d016      	beq.n	ef00 <fnmatchx+0x20a>
				if (c2 == '\\' && !(flags & FNM_NOESCAPE)) {
    eed2:	285c      	cmp	r0, #92	; 0x5c
				pattern += 2;
    eed4:	f104 0302 	add.w	r3, r4, #2
				if (c2 == '\\' && !(flags & FNM_NOESCAPE)) {
    eed8:	d10c      	bne.n	eef4 <fnmatchx+0x1fe>
    eeda:	f015 0f01 	tst.w	r5, #1
    eede:	d109      	bne.n	eef4 <fnmatchx+0x1fe>
					c2 = FOLDCASE(*pattern++, flags);
    eee0:	1ce3      	adds	r3, r4, #3
    eee2:	78a0      	ldrb	r0, [r4, #2]
    eee4:	9303      	str	r3, [sp, #12]
    eee6:	f7ff fefe 	bl	ece6 <foldcase>
				if (c2 == EOS) {
    eeea:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    eeee:	f43f af0a 	beq.w	ed06 <fnmatchx+0x10>
					c2 = FOLDCASE(*pattern++, flags);
    eef2:	9b03      	ldr	r3, [sp, #12]
				if (c <= test && test <= c2) {
    eef4:	454e      	cmp	r6, r9
    eef6:	dc03      	bgt.n	ef00 <fnmatchx+0x20a>
					ok = true;
    eef8:	4548      	cmp	r0, r9
    eefa:	bfa8      	it	ge
    eefc:	f04f 0b01 	movge.w	fp, #1
	     c = FOLDCASE(*pattern++, flags)) {
    ef00:	461c      	mov	r4, r3
    ef02:	4629      	mov	r1, r5
    ef04:	f814 0b01 	ldrb.w	r0, [r4], #1
    ef08:	f7ff feed 	bl	ece6 <foldcase>
    ef0c:	b2c6      	uxtb	r6, r0
	for (need = true, ok = false, c = FOLDCASE(*pattern++, flags); c != ']' || need;
    ef0e:	2e5d      	cmp	r6, #93	; 0x5d
    ef10:	d1ba      	bne.n	ee88 <fnmatchx+0x192>
	return ok == negate ? NULL : pattern;
    ef12:	9b01      	ldr	r3, [sp, #4]
    ef14:	455b      	cmp	r3, fp
    ef16:	f43f aef6 	beq.w	ed06 <fnmatchx+0x10>
			if (r == (void *)-1) {
    ef1a:	1c61      	adds	r1, r4, #1
    ef1c:	d103      	bne.n	ef26 <fnmatchx+0x230>
				if (*string != '[') {
    ef1e:	2f5b      	cmp	r7, #91	; 0x5b
    ef20:	f47f aef1 	bne.w	ed06 <fnmatchx+0x10>
		c = FOLDCASE(*pattern++, flags);
    ef24:	4644      	mov	r4, r8
			++string;
    ef26:	3201      	adds	r2, #1
			break;
    ef28:	46a0      	mov	r8, r4
    ef2a:	e730      	b.n	ed8e <fnmatchx+0x98>
			ok = true;
    ef2c:	454e      	cmp	r6, r9
    ef2e:	bf08      	it	eq
    ef30:	f04f 0b01 	moveq.w	fp, #1
    ef34:	e7e4      	b.n	ef00 <fnmatchx+0x20a>
		return FNM_NORES;
    ef36:	2003      	movs	r0, #3
    ef38:	e6e6      	b.n	ed08 <fnmatchx+0x12>
				return 0;
    ef3a:	4608      	mov	r0, r1
    ef3c:	e6e4      	b.n	ed08 <fnmatchx+0x12>

0000ef3e <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
	return fnmatchx(pattern, string, flags, 64);
    ef3e:	2340      	movs	r3, #64	; 0x40
    ef40:	f7ff bed9 	b.w	ecf6 <fnmatchx>

0000ef44 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    ef44:	2806      	cmp	r0, #6
    ef46:	d108      	bne.n	ef5a <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    ef48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ef4c:	2201      	movs	r2, #1
    ef4e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    ef52:	f3bf 8f4f 	dsb	sy
        __WFE();
    ef56:	bf20      	wfe
    while (true)
    ef58:	e7fd      	b.n	ef56 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    ef5a:	4770      	bx	lr

0000ef5c <pm_state_exit_post_ops>:
	__asm__ volatile(
    ef5c:	2300      	movs	r3, #0
    ef5e:	f383 8811 	msr	BASEPRI, r3
    ef62:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    ef66:	4770      	bx	lr

0000ef68 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    ef68:	6903      	ldr	r3, [r0, #16]
    ef6a:	b2c9      	uxtb	r1, r1
    ef6c:	220c      	movs	r2, #12
    ef6e:	fb01 3302 	mla	r3, r1, r2, r3
    ef72:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    ef74:	f000 0007 	and.w	r0, r0, #7
    ef78:	4770      	bx	lr

0000ef7a <set_on_state>:
	__asm__ volatile(
    ef7a:	f04f 0320 	mov.w	r3, #32
    ef7e:	f3ef 8211 	mrs	r2, BASEPRI
    ef82:	f383 8812 	msr	BASEPRI_MAX, r3
    ef86:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    ef8a:	6803      	ldr	r3, [r0, #0]
    ef8c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ef90:	f043 0302 	orr.w	r3, r3, #2
    ef94:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    ef96:	f382 8811 	msr	BASEPRI, r2
    ef9a:	f3bf 8f6f 	isb	sy
}
    ef9e:	4770      	bx	lr

0000efa0 <stop>:
{
    efa0:	b570      	push	{r4, r5, r6, lr}
    efa2:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    efa4:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    efa6:	f04f 0420 	mov.w	r4, #32
    efaa:	f3ef 8511 	mrs	r5, BASEPRI
    efae:	f384 8812 	msr	BASEPRI_MAX, r4
    efb2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    efb6:	260c      	movs	r6, #12
    efb8:	fb06 3401 	mla	r4, r6, r1, r3
    efbc:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    efbe:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    efc2:	d008      	beq.n	efd6 <stop+0x36>
    efc4:	42a2      	cmp	r2, r4
    efc6:	d006      	beq.n	efd6 <stop+0x36>
	__asm__ volatile(
    efc8:	f385 8811 	msr	BASEPRI, r5
    efcc:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    efd0:	f04f 30ff 	mov.w	r0, #4294967295
}
    efd4:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    efd6:	4371      	muls	r1, r6
    efd8:	440b      	add	r3, r1
    efda:	2201      	movs	r2, #1
    efdc:	641a      	str	r2, [r3, #64]	; 0x40
    efde:	f385 8811 	msr	BASEPRI, r5
    efe2:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    efe6:	6843      	ldr	r3, [r0, #4]
    efe8:	440b      	add	r3, r1
    efea:	685b      	ldr	r3, [r3, #4]
    efec:	4798      	blx	r3
	return 0;
    efee:	2000      	movs	r0, #0
    eff0:	e7f0      	b.n	efd4 <stop+0x34>

0000eff2 <api_stop>:
	return stop(dev, subsys, CTX_API);
    eff2:	2280      	movs	r2, #128	; 0x80
    eff4:	f7ff bfd4 	b.w	efa0 <stop>

0000eff8 <async_start>:
{
    eff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    effa:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    effc:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    effe:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    f000:	f04f 0520 	mov.w	r5, #32
    f004:	f3ef 8611 	mrs	r6, BASEPRI
    f008:	f385 8812 	msr	BASEPRI_MAX, r5
    f00c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    f010:	250c      	movs	r5, #12
    f012:	4369      	muls	r1, r5
    f014:	440c      	add	r4, r1
    f016:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    f018:	f005 0c07 	and.w	ip, r5, #7
    f01c:	f1bc 0f01 	cmp.w	ip, #1
    f020:	d10b      	bne.n	f03a <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    f022:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    f024:	f386 8811 	msr	BASEPRI, r6
    f028:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    f02c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    f030:	6843      	ldr	r3, [r0, #4]
    f032:	585b      	ldr	r3, [r3, r1]
    f034:	4798      	blx	r3
	return 0;
    f036:	2000      	movs	r0, #0
}
    f038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    f03a:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    f03e:	42af      	cmp	r7, r5
    f040:	f386 8811 	msr	BASEPRI, r6
    f044:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    f048:	bf0c      	ite	eq
    f04a:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    f04e:	f04f 30ff 	movne.w	r0, #4294967295
    f052:	e7f1      	b.n	f038 <async_start+0x40>

0000f054 <api_start>:
{
    f054:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    f056:	2480      	movs	r4, #128	; 0x80
    f058:	9400      	str	r4, [sp, #0]
    f05a:	f7ff ffcd 	bl	eff8 <async_start>
}
    f05e:	b002      	add	sp, #8
    f060:	bd10      	pop	{r4, pc}

0000f062 <onoff_started_callback>:
{
    f062:	b410      	push	{r4}
	return &data->mgr[type];
    f064:	6900      	ldr	r0, [r0, #16]
    f066:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    f068:	241c      	movs	r4, #28
    f06a:	fb03 0004 	mla	r0, r3, r4, r0
    f06e:	2100      	movs	r1, #0
}
    f070:	bc10      	pop	{r4}
	notify(mgr, 0);
    f072:	4710      	bx	r2

0000f074 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    f074:	2000      	movs	r0, #0
    f076:	f000 ba92 	b.w	f59e <nrfx_clock_stop>

0000f07a <blocking_start_callback>:
{
    f07a:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    f07c:	f7fc b87c 	b.w	b178 <z_impl_k_sem_give>

0000f080 <is_regular_addr_valid>:
{
    f080:	b538      	push	{r3, r4, r5, lr}
    f082:	4605      	mov	r5, r0
    f084:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
    f086:	f000 fa9a 	bl	f5be <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
    f08a:	2d00      	cmp	r5, #0
    f08c:	db07      	blt.n	f09e <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
    f08e:	42a8      	cmp	r0, r5
    f090:	d905      	bls.n	f09e <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
    f092:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
    f094:	4284      	cmp	r4, r0
    f096:	bf8c      	ite	hi
    f098:	2000      	movhi	r0, #0
    f09a:	2001      	movls	r0, #1
}
    f09c:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
    f09e:	2000      	movs	r0, #0
    f0a0:	e7fc      	b.n	f09c <is_regular_addr_valid+0x1c>

0000f0a2 <flash_nrf_read>:
{
    f0a2:	b570      	push	{r4, r5, r6, lr}
    f0a4:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
    f0a6:	4628      	mov	r0, r5
    f0a8:	4619      	mov	r1, r3
{
    f0aa:	4616      	mov	r6, r2
    f0ac:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    f0ae:	f7ff ffe7 	bl	f080 <is_regular_addr_valid>
    f0b2:	b928      	cbnz	r0, f0c0 <flash_nrf_read+0x1e>
    f0b4:	4621      	mov	r1, r4
    f0b6:	4628      	mov	r0, r5
}
    f0b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f0bc:	f7f8 bd1e 	b.w	7afc <flash_nrf_read.part.0>
	if (!len) {
    f0c0:	b124      	cbz	r4, f0cc <flash_nrf_read+0x2a>
	memcpy(data, (void *)addr, len);
    f0c2:	4622      	mov	r2, r4
    f0c4:	4629      	mov	r1, r5
    f0c6:	4630      	mov	r0, r6
    f0c8:	f7ff fde9 	bl	ec9e <memcpy>
}
    f0cc:	2000      	movs	r0, #0
    f0ce:	bd70      	pop	{r4, r5, r6, pc}

0000f0d0 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
    f0d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f0d2:	461c      	mov	r4, r3
    f0d4:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
    f0d6:	2300      	movs	r3, #0
	const struct flash_driver_api *api = dev->api;
    f0d8:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
    f0da:	6023      	str	r3, [r4, #0]
	info->index = 0U;
    f0dc:	60a3      	str	r3, [r4, #8]

	api->page_layout(dev, &layout, &layout_size);
    f0de:	6913      	ldr	r3, [r2, #16]
{
    f0e0:	460d      	mov	r5, r1
	api->page_layout(dev, &layout, &layout_size);
    f0e2:	aa01      	add	r2, sp, #4
    f0e4:	4669      	mov	r1, sp
    f0e6:	4798      	blx	r3

	while (layout_size--) {
    f0e8:	9b01      	ldr	r3, [sp, #4]
    f0ea:	1e5a      	subs	r2, r3, #1
    f0ec:	9201      	str	r2, [sp, #4]
    f0ee:	b91b      	cbnz	r3, f0f8 <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
    f0f0:	f06f 0015 	mvn.w	r0, #21
}
    f0f4:	b003      	add	sp, #12
    f0f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
    f0f8:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
    f0fa:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
    f0fc:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
    f0fe:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
    f100:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
    f102:	b985      	cbnz	r5, f126 <flash_get_page_info+0x56>
			index_jmp = index - info->index;
    f104:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
    f106:	f8d0 c000 	ldr.w	ip, [r0]
    f10a:	4563      	cmp	r3, ip
    f10c:	bf28      	it	cs
    f10e:	4663      	movcs	r3, ip
		info->index += index_jmp;
    f110:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
    f112:	fb03 1107 	mla	r1, r3, r7, r1
    f116:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
    f118:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
    f11a:	6802      	ldr	r2, [r0, #0]
    f11c:	429a      	cmp	r2, r3
    f11e:	d806      	bhi.n	f12e <flash_get_page_info+0x5e>
		layout++;
    f120:	3008      	adds	r0, #8
    f122:	9000      	str	r0, [sp, #0]
    f124:	e7e0      	b.n	f0e8 <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
    f126:	1a6b      	subs	r3, r5, r1
    f128:	fbb3 f3f7 	udiv	r3, r3, r7
    f12c:	e7eb      	b.n	f106 <flash_get_page_info+0x36>
			return 0;
    f12e:	2000      	movs	r0, #0
    f130:	e7e0      	b.n	f0f4 <flash_get_page_info+0x24>

0000f132 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
    f132:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
    f134:	2200      	movs	r2, #0
    f136:	f7ff bfcb 	b.w	f0d0 <flash_get_page_info>

0000f13a <flash_read>:
{
    f13a:	b410      	push	{r4}
	return api->read(dev, offset, data, len);
    f13c:	6884      	ldr	r4, [r0, #8]
    f13e:	6824      	ldr	r4, [r4, #0]
    f140:	46a4      	mov	ip, r4
}
    f142:	bc10      	pop	{r4}
    f144:	4760      	bx	ip

0000f146 <flash_write>:
{
    f146:	b410      	push	{r4}
	rc = api->write(dev, offset, data, len);
    f148:	6884      	ldr	r4, [r0, #8]
    f14a:	6864      	ldr	r4, [r4, #4]
    f14c:	46a4      	mov	ip, r4
}
    f14e:	bc10      	pop	{r4}
    f150:	4760      	bx	ip

0000f152 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f152:	6843      	ldr	r3, [r0, #4]
    f154:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    f156:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    f15a:	600b      	str	r3, [r1, #0]
}
    f15c:	2000      	movs	r0, #0
    f15e:	4770      	bx	lr

0000f160 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f160:	6843      	ldr	r3, [r0, #4]
    f162:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    f164:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    f168:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    f16c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    f170:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    f174:	2000      	movs	r0, #0
    f176:	4770      	bx	lr

0000f178 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f178:	6843      	ldr	r3, [r0, #4]
    f17a:	685b      	ldr	r3, [r3, #4]
}
    f17c:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    f17e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    f182:	4770      	bx	lr

0000f184 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f184:	6843      	ldr	r3, [r0, #4]
    f186:	685b      	ldr	r3, [r3, #4]
}
    f188:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    f18a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    f18e:	4770      	bx	lr

0000f190 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f190:	6843      	ldr	r3, [r0, #4]
    f192:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    f194:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    f198:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    f19c:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    f19e:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    f1a2:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    f1a6:	2000      	movs	r0, #0
    f1a8:	4770      	bx	lr

0000f1aa <gpio_nrfx_manage_callback>:
{
    f1aa:	b510      	push	{r4, lr}
	return port->data;
    f1ac:	6903      	ldr	r3, [r0, #16]
	return list->head;
    f1ae:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    f1b0:	b1f8      	cbz	r0, f1f2 <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f1b2:	4288      	cmp	r0, r1
    f1b4:	d119      	bne.n	f1ea <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    f1b6:	689c      	ldr	r4, [r3, #8]
	return node->next;
    f1b8:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    f1ba:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    f1bc:	42a1      	cmp	r1, r4
    f1be:	d100      	bne.n	f1c2 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    f1c0:	6098      	str	r0, [r3, #8]
	parent->next = child;
    f1c2:	2000      	movs	r0, #0
    f1c4:	6008      	str	r0, [r1, #0]
	if (set) {
    f1c6:	b12a      	cbz	r2, f1d4 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    f1c8:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    f1ca:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    f1cc:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    f1ce:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    f1d0:	b902      	cbnz	r2, f1d4 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    f1d2:	6099      	str	r1, [r3, #8]
	return 0;
    f1d4:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    f1d6:	e010      	b.n	f1fa <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f1d8:	4281      	cmp	r1, r0
    f1da:	d106      	bne.n	f1ea <gpio_nrfx_manage_callback+0x40>
	return node->next;
    f1dc:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    f1de:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    f1e0:	6898      	ldr	r0, [r3, #8]
    f1e2:	4281      	cmp	r1, r0
    f1e4:	d1ed      	bne.n	f1c2 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    f1e6:	609c      	str	r4, [r3, #8]
}
    f1e8:	e7eb      	b.n	f1c2 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    f1ea:	4604      	mov	r4, r0
    f1ec:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f1ee:	2800      	cmp	r0, #0
    f1f0:	d1f2      	bne.n	f1d8 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    f1f2:	2a00      	cmp	r2, #0
    f1f4:	d1e8      	bne.n	f1c8 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    f1f6:	f06f 0015 	mvn.w	r0, #21
}
    f1fa:	bd10      	pop	{r4, pc}

0000f1fc <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    f1fc:	b513      	push	{r0, r1, r4, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
    f1fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);

	if (length > sizeof(dev_id.id)) {
    f202:	2908      	cmp	r1, #8
    f204:	6e13      	ldr	r3, [r2, #96]	; 0x60
    f206:	6e52      	ldr	r2, [r2, #100]	; 0x64
    f208:	bf28      	it	cs
    f20a:	2108      	movcs	r1, #8
    f20c:	ba12      	rev	r2, r2
	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
    f20e:	9200      	str	r2, [sp, #0]
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    f210:	ba1b      	rev	r3, r3
	if (length > sizeof(dev_id.id)) {
    f212:	460c      	mov	r4, r1
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
    f214:	460a      	mov	r2, r1
    f216:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    f218:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
    f21a:	f7ff fd40 	bl	ec9e <memcpy>

	return length;
}
    f21e:	4620      	mov	r0, r4
    f220:	b002      	add	sp, #8
    f222:	bd10      	pop	{r4, pc}

0000f224 <z_impl_hwinfo_get_reset_cause>:
    return p_reg->RESETREAS;
    f224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f228:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
{
	uint32_t flags = 0;

	uint32_t reason = nrfx_reset_reason_get();

	if (reason & NRFX_RESET_REASON_RESETPIN_MASK) {
    f22c:	f002 0301 	and.w	r3, r2, #1
		flags |= RESET_PIN;
	}
	if (reason & NRFX_RESET_REASON_DOG_MASK) {
    f230:	0791      	lsls	r1, r2, #30
		flags |= RESET_WATCHDOG;
    f232:	bf48      	it	mi
    f234:	f043 0310 	orrmi.w	r3, r3, #16
	}
	if (reason & NRFX_RESET_REASON_LOCKUP_MASK) {
    f238:	0711      	lsls	r1, r2, #28
		flags |= RESET_CPU_LOCKUP;
    f23a:	bf48      	it	mi
    f23c:	f443 7380 	orrmi.w	r3, r3, #256	; 0x100
	}
	if (reason & NRFX_RESET_REASON_OFF_MASK) {
    f240:	03d1      	lsls	r1, r2, #15
		flags |= RESET_LOW_POWER_WAKE;
    f242:	bf48      	it	mi
    f244:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
	}
	if (reason & NRFX_RESET_REASON_DIF_MASK) {
    f248:	0351      	lsls	r1, r2, #13
		flags |= RESET_DEBUG;
    f24a:	bf48      	it	mi
    f24c:	f043 0320 	orrmi.w	r3, r3, #32
		flags |= RESET_DEBUG;
	}
#endif

#else
	if (reason & NRFX_RESET_REASON_SREQ_MASK) {
    f250:	0752      	lsls	r2, r2, #29
		flags |= RESET_SOFTWARE;
    f252:	bf48      	it	mi
    f254:	f043 0302 	orrmi.w	r3, r3, #2
	}
#endif

	*cause = flags;
    f258:	6003      	str	r3, [r0, #0]

	return 0;
}
    f25a:	2000      	movs	r0, #0
    f25c:	4770      	bx	lr

0000f25e <z_impl_hwinfo_clear_reset_cause>:
    p_reg->RESETREAS = mask;
    f25e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f262:	f04f 32ff 	mov.w	r2, #4294967295
    f266:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	uint32_t reason = -1;

	nrfx_reset_reason_clear(reason);

	return 0;
}
    f26a:	2000      	movs	r0, #0
    f26c:	4770      	bx	lr

0000f26e <z_impl_hwinfo_get_supported_reset_cause>:

int z_impl_hwinfo_get_supported_reset_cause(uint32_t *supported)
{
	*supported = (RESET_PIN
    f26e:	f240 13b3 	movw	r3, #435	; 0x1b3
    f272:	6003      	str	r3, [r0, #0]
		      | RESET_CPU_LOCKUP
		      | RESET_LOW_POWER_WAKE
		      | RESET_DEBUG);

	return 0;
}
    f274:	2000      	movs	r0, #0
    f276:	4770      	bx	lr

0000f278 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    f278:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    f27a:	6843      	ldr	r3, [r0, #4]
    f27c:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    f27e:	7a05      	ldrb	r5, [r0, #8]
    f280:	6844      	ldr	r4, [r0, #4]
    f282:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    f286:	42a3      	cmp	r3, r4
    f288:	d302      	bcc.n	f290 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    f28a:	f06f 0001 	mvn.w	r0, #1
}
    f28e:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    f290:	795c      	ldrb	r4, [r3, #5]
    f292:	428c      	cmp	r4, r1
    f294:	d001      	beq.n	f29a <pinctrl_lookup_state+0x22>
		(*state)++;
    f296:	3308      	adds	r3, #8
    f298:	e7f0      	b.n	f27c <pinctrl_lookup_state+0x4>
			return 0;
    f29a:	2000      	movs	r0, #0
    f29c:	e7f7      	b.n	f28e <pinctrl_lookup_state+0x16>

0000f29e <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    f29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f2a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    f2a6:	2701      	movs	r7, #1
    p_reg->OUTSET = set_mask;
    f2a8:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    f2ac:	4281      	cmp	r1, r0
    f2ae:	d102      	bne.n	f2b6 <pinctrl_configure_pins+0x18>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    f2b0:	2000      	movs	r0, #0
}
    f2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    f2b6:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    f2b8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    f2bc:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
    f2c0:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    f2c2:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
    f2c6:	bf08      	it	eq
    f2c8:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    f2cc:	2d19      	cmp	r5, #25
    f2ce:	d86a      	bhi.n	f3a6 <pinctrl_configure_pins+0x108>
    f2d0:	e8df f005 	tbb	[pc, r5]
    f2d4:	1f1c170d 	.word	0x1f1c170d
    f2d8:	691f2e22 	.word	0x691f2e22
    f2dc:	32696969 	.word	0x32696969
    f2e0:	69696955 	.word	0x69696955
    f2e4:	69696969 	.word	0x69696969
    f2e8:	60586969 	.word	0x60586969
    f2ec:	6663      	.short	0x6663
			NRF_PSEL_UART(reg, TXD) = pin;
    f2ee:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    f2f2:	f003 051f 	and.w	r5, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    f2f6:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
    f2fa:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
}
    f2fe:	2501      	movs	r5, #1
    f300:	e002      	b.n	f308 <pinctrl_configure_pins+0x6a>
			NRF_PSEL_UART(reg, RXD) = pin;
    f302:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    f306:	2500      	movs	r5, #0
    f308:	46ac      	mov	ip, r5
    f30a:	e01c      	b.n	f346 <pinctrl_configure_pins+0xa8>
			NRF_PSEL_UART(reg, RTS) = pin;
    f30c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    f310:	e7ef      	b.n	f2f2 <pinctrl_configure_pins+0x54>
			NRF_PSEL_UART(reg, CTS) = pin;
    f312:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    f316:	e7f6      	b.n	f306 <pinctrl_configure_pins+0x68>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    f318:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    f31c:	2500      	movs	r5, #0
    *p_pin = pin_number & 0x1F;
    f31e:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    f322:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
    f326:	f8c6 c50c 	str.w	ip, [r6, #1292]	; 0x50c
}
    f32a:	f04f 0c01 	mov.w	ip, #1
    f32e:	e00a      	b.n	f346 <pinctrl_configure_pins+0xa8>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    f330:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    f334:	2501      	movs	r5, #1
    f336:	e7f2      	b.n	f31e <pinctrl_configure_pins+0x80>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    f338:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    f33c:	2c00      	cmp	r4, #0
    f33e:	d1e2      	bne.n	f306 <pinctrl_configure_pins+0x68>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    f340:	2500      	movs	r5, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    f342:	46ac      	mov	ip, r5
				drive = NRF_DRIVE_S0D1;
    f344:	2406      	movs	r4, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    f346:	f850 eb04 	ldr.w	lr, [r0], #4
    f34a:	f40e 5800 	and.w	r8, lr, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    f34e:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    f352:	f3ce 1ec1 	ubfx	lr, lr, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    f356:	ea4f 2404 	mov.w	r4, r4, lsl #8
    f35a:	bf18      	it	ne
    f35c:	f04f 0c00 	movne.w	ip, #0
    *p_pin = pin_number & 0x1F;
    f360:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    f364:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
    f368:	bf18      	it	ne
    f36a:	2501      	movne	r5, #1
    f36c:	ea44 040c 	orr.w	r4, r4, ip
    reg->PIN_CNF[pin_number] = cnf;
    f370:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    f374:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    f378:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    f37c:	e796      	b.n	f2ac <pinctrl_configure_pins+0xe>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    f37e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    f382:	e7db      	b.n	f33c <pinctrl_configure_pins+0x9e>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    f384:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    f388:	6805      	ldr	r5, [r0, #0]
    f38a:	f3c5 3580 	ubfx	r5, r5, #14, #1
    if (value == 0)
    f38e:	2d00      	cmp	r5, #0
    f390:	d0d0      	beq.n	f334 <pinctrl_configure_pins+0x96>
    f392:	e7ae      	b.n	f2f2 <pinctrl_configure_pins+0x54>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    f394:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    f398:	e7f6      	b.n	f388 <pinctrl_configure_pins+0xea>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    f39a:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    f39e:	e7f3      	b.n	f388 <pinctrl_configure_pins+0xea>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    f3a0:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    f3a4:	e7f0      	b.n	f388 <pinctrl_configure_pins+0xea>
		switch (NRF_GET_FUN(pins[i])) {
    f3a6:	f06f 0085 	mvn.w	r0, #133	; 0x85
    f3aa:	e782      	b.n	f2b2 <pinctrl_configure_pins+0x14>

0000f3ac <uart_nrfx_config_get>:
	struct uart_nrfx_data *data = dev->data;
    f3ac:	6902      	ldr	r2, [r0, #16]
{
    f3ae:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    f3b0:	e892 0003 	ldmia.w	r2, {r0, r1}
    f3b4:	e883 0003 	stmia.w	r3, {r0, r1}
}
    f3b8:	2000      	movs	r0, #0
    f3ba:	4770      	bx	lr

0000f3bc <uart_nrfx_irq_update>:
}
    f3bc:	2001      	movs	r0, #1
    f3be:	4770      	bx	lr

0000f3c0 <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
    f3c0:	b513      	push	{r0, r1, r4, lr}
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    f3c2:	aa01      	add	r2, sp, #4
{
    f3c4:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
    f3c6:	f7ff ff57 	bl	f278 <pinctrl_lookup_state>
	if (ret < 0) {
    f3ca:	2800      	cmp	r0, #0
    f3cc:	db05      	blt.n	f3da <pinctrl_apply_state+0x1a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    f3ce:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    f3d0:	6822      	ldr	r2, [r4, #0]
    f3d2:	7919      	ldrb	r1, [r3, #4]
    f3d4:	6818      	ldr	r0, [r3, #0]
    f3d6:	f7ff ff62 	bl	f29e <pinctrl_configure_pins>
}
    f3da:	b002      	add	sp, #8
    f3dc:	bd10      	pop	{r4, pc}

0000f3de <irq_connect1>:
#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEFINE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEFINE(1);
    f3de:	2200      	movs	r2, #0
    f3e0:	2101      	movs	r1, #1
    f3e2:	2004      	movs	r0, #4
    f3e4:	f7f7 baf4 	b.w	69d0 <z_arm_irq_priority_set>

0000f3e8 <irq_connect2>:
#endif

#ifdef CONFIG_SPI_2_NRF_SPI
SPI_NRFX_SPI_DEFINE(2);
    f3e8:	2200      	movs	r2, #0
    f3ea:	2101      	movs	r1, #1
    f3ec:	2023      	movs	r0, #35	; 0x23
    f3ee:	f7f7 baef 	b.w	69d0 <z_arm_irq_priority_set>

0000f3f2 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
    f3f2:	b510      	push	{r4, lr}
	while (*count) {
    f3f4:	680b      	ldr	r3, [r1, #0]
    f3f6:	b913      	cbnz	r3, f3fe <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
    f3f8:	6013      	str	r3, [r2, #0]
	return NULL;
    f3fa:	4618      	mov	r0, r3
    f3fc:	e005      	b.n	f40a <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
    f3fe:	6803      	ldr	r3, [r0, #0]
    f400:	685c      	ldr	r4, [r3, #4]
    f402:	b11c      	cbz	r4, f40c <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
    f404:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
    f406:	6803      	ldr	r3, [r0, #0]
    f408:	6818      	ldr	r0, [r3, #0]
}
    f40a:	bd10      	pop	{r4, pc}
		++(*current);
    f40c:	3308      	adds	r3, #8
    f40e:	6003      	str	r3, [r0, #0]
		--(*count);
    f410:	680b      	ldr	r3, [r1, #0]
    f412:	3b01      	subs	r3, #1
    f414:	600b      	str	r3, [r1, #0]
    f416:	e7ed      	b.n	f3f4 <spi_context_get_next_buf.constprop.0+0x2>

0000f418 <z_log_msg_static_create.constprop.0>:
    f418:	2300      	movs	r3, #0
    f41a:	f7f4 b999 	b.w	3750 <z_impl_z_log_msg_static_create>

0000f41e <pinctrl_apply_state>:
{
    f41e:	b513      	push	{r0, r1, r4, lr}
	ret = pinctrl_lookup_state(config, id, &state);
    f420:	aa01      	add	r2, sp, #4
{
    f422:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
    f424:	f7ff ff28 	bl	f278 <pinctrl_lookup_state>
	if (ret < 0) {
    f428:	2800      	cmp	r0, #0
    f42a:	db05      	blt.n	f438 <pinctrl_apply_state+0x1a>
	return pinctrl_apply_state_direct(config, state);
    f42c:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    f42e:	6822      	ldr	r2, [r4, #0]
    f430:	7919      	ldrb	r1, [r3, #4]
    f432:	6818      	ldr	r0, [r3, #0]
    f434:	f7ff ff33 	bl	f29e <pinctrl_configure_pins>
}
    f438:	b002      	add	sp, #8
    f43a:	bd10      	pop	{r4, pc}

0000f43c <spi_nrfx_pm_action>:
{
    f43c:	b570      	push	{r4, r5, r6, lr}
	switch (action) {
    f43e:	460c      	mov	r4, r1
	struct spi_nrfx_data *dev_data = dev->data;
    f440:	6906      	ldr	r6, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    f442:	6845      	ldr	r5, [r0, #4]
	switch (action) {
    f444:	b139      	cbz	r1, f456 <spi_nrfx_pm_action+0x1a>
    f446:	2901      	cmp	r1, #1
    f448:	d10f      	bne.n	f46a <spi_nrfx_pm_action+0x2e>
		ret = pinctrl_apply_state(dev_config->pcfg,
    f44a:	2100      	movs	r1, #0
		ret = pinctrl_apply_state(dev_config->pcfg,
    f44c:	6a28      	ldr	r0, [r5, #32]
}
    f44e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ret = pinctrl_apply_state(dev_config->pcfg,
    f452:	f7ff bfe4 	b.w	f41e <pinctrl_apply_state>
		if (dev_data->initialized) {
    f456:	f896 306d 	ldrb.w	r3, [r6, #109]	; 0x6d
    f45a:	b123      	cbz	r3, f466 <spi_nrfx_pm_action+0x2a>
			nrfx_spi_uninit(&dev_config->spi);
    f45c:	4628      	mov	r0, r5
    f45e:	f7fb f897 	bl	a590 <nrfx_spi_uninit>
			dev_data->initialized = false;
    f462:	f886 406d 	strb.w	r4, [r6, #109]	; 0x6d
		ret = pinctrl_apply_state(dev_config->pcfg,
    f466:	2101      	movs	r1, #1
    f468:	e7f0      	b.n	f44c <spi_nrfx_pm_action+0x10>
}
    f46a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    f46e:	bd70      	pop	{r4, r5, r6, pc}

0000f470 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    f470:	4603      	mov	r3, r0
    f472:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
    f474:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    f476:	7919      	ldrb	r1, [r3, #4]
    f478:	2301      	movs	r3, #1
    f47a:	fa03 f101 	lsl.w	r1, r3, r1
    f47e:	6903      	ldr	r3, [r0, #16]
    f480:	681b      	ldr	r3, [r3, #0]
    f482:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    f484:	bf18      	it	ne
    f486:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    f48a:	b112      	cbz	r2, f492 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
    f48c:	6883      	ldr	r3, [r0, #8]
    f48e:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    f490:	4718      	bx	r3
    f492:	6883      	ldr	r3, [r0, #8]
    f494:	691b      	ldr	r3, [r3, #16]
    f496:	e7fb      	b.n	f490 <gpio_pin_set_dt.isra.0+0x20>

0000f498 <_spi_context_cs_control>:
{
    f498:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    f49a:	6803      	ldr	r3, [r0, #0]
{
    f49c:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    f49e:	b1e3      	cbz	r3, f4da <_spi_context_cs_control+0x42>
    f4a0:	6898      	ldr	r0, [r3, #8]
    f4a2:	b1d0      	cbz	r0, f4da <_spi_context_cs_control+0x42>
    f4a4:	6805      	ldr	r5, [r0, #0]
    f4a6:	b1c5      	cbz	r5, f4da <_spi_context_cs_control+0x42>
		if (on) {
    f4a8:	b149      	cbz	r1, f4be <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
    f4aa:	2101      	movs	r1, #1
    f4ac:	f7ff ffe0 	bl	f470 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
    f4b0:	6823      	ldr	r3, [r4, #0]
    f4b2:	689b      	ldr	r3, [r3, #8]
    f4b4:	6898      	ldr	r0, [r3, #8]
}
    f4b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    f4ba:	f000 badd 	b.w	fa78 <z_impl_k_busy_wait>
			if (!force_off &&
    f4be:	b912      	cbnz	r2, f4c6 <_spi_context_cs_control+0x2e>
    f4c0:	889b      	ldrh	r3, [r3, #4]
    f4c2:	04db      	lsls	r3, r3, #19
    f4c4:	d409      	bmi.n	f4da <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
    f4c6:	6880      	ldr	r0, [r0, #8]
    f4c8:	f000 fad6 	bl	fa78 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    f4cc:	6823      	ldr	r3, [r4, #0]
    f4ce:	2100      	movs	r1, #0
    f4d0:	6898      	ldr	r0, [r3, #8]
}
    f4d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    f4d6:	f7ff bfcb 	b.w	f470 <gpio_pin_set_dt.isra.0>
}
    f4da:	bd38      	pop	{r3, r4, r5, pc}

0000f4dc <spi_context_unlock_unconditionally>:
{
    f4dc:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
    f4de:	2201      	movs	r2, #1
    f4e0:	2100      	movs	r1, #0
{
    f4e2:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    f4e4:	f7ff ffd8 	bl	f498 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
    f4e8:	69a3      	ldr	r3, [r4, #24]
    f4ea:	b933      	cbnz	r3, f4fa <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
    f4ec:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    f4ee:	f104 0010 	add.w	r0, r4, #16
}
    f4f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f4f6:	f7fb be3f 	b.w	b178 <z_impl_k_sem_give>
    f4fa:	bd10      	pop	{r4, pc}

0000f4fc <spi_nrfx_release>:
{
    f4fc:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    f4fe:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    f500:	6803      	ldr	r3, [r0, #0]
    f502:	428b      	cmp	r3, r1
    f504:	d106      	bne.n	f514 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    f506:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
    f50a:	b934      	cbnz	r4, f51a <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    f50c:	f7ff ffe6 	bl	f4dc <spi_context_unlock_unconditionally>
	return 0;
    f510:	4620      	mov	r0, r4
}
    f512:	bd10      	pop	{r4, pc}
		return -EINVAL;
    f514:	f06f 0015 	mvn.w	r0, #21
    f518:	e7fb      	b.n	f512 <spi_nrfx_release+0x16>
		return -EBUSY;
    f51a:	f06f 000f 	mvn.w	r0, #15
    f51e:	e7f8      	b.n	f512 <spi_nrfx_release+0x16>

0000f520 <finish_transaction.isra.0>:
static void finish_transaction(const struct device *dev, int error)
    f520:	b538      	push	{r3, r4, r5, lr}
	_spi_context_cs_control(ctx, on, false);
    f522:	2200      	movs	r2, #0
    f524:	4604      	mov	r4, r0
    f526:	460d      	mov	r5, r1
    f528:	4611      	mov	r1, r2
    f52a:	f7ff ffb5 	bl	f498 <_spi_context_cs_control>
	ctx->sync_status = status;
    f52e:	6425      	str	r5, [r4, #64]	; 0x40
    f530:	f104 0028 	add.w	r0, r4, #40	; 0x28
    f534:	f7fb fe20 	bl	b178 <z_impl_k_sem_give>
	dev_data->busy = false;
    f538:	2300      	movs	r3, #0
    f53a:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
    f53e:	bd38      	pop	{r3, r4, r5, pc}

0000f540 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    f540:	4770      	bx	lr

0000f542 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    f542:	f100 0350 	add.w	r3, r0, #80	; 0x50
    f546:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f548:	b29b      	uxth	r3, r3
    f54a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    f54e:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    f552:	2200      	movs	r2, #0
    f554:	601a      	str	r2, [r3, #0]
    f556:	681b      	ldr	r3, [r3, #0]
}
    f558:	4770      	bx	lr

0000f55a <sys_clock_cycle_get_32>:
{
    f55a:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    f55c:	f7f9 ffa0 	bl	94a0 <z_nrf_rtc_timer_read>
}
    f560:	bd08      	pop	{r3, pc}

0000f562 <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    f562:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f566:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
    f56a:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    f56c:	bf04      	itt	eq
    f56e:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
    f572:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
    f576:	1f83      	subs	r3, r0, #6
    f578:	4258      	negs	r0, r3
    f57a:	4158      	adcs	r0, r3
    f57c:	4770      	bx	lr

0000f57e <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    f57e:	4700      	bx	r0

0000f580 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    f580:	f000 ba7a 	b.w	fa78 <z_impl_k_busy_wait>

0000f584 <nrfx_clock_enable>:
{
    f584:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    f586:	2000      	movs	r0, #0
    f588:	f7f7 fa14 	bl	69b4 <arch_irq_is_enabled>
    f58c:	b908      	cbnz	r0, f592 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    f58e:	f7f7 f9ef 	bl	6970 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    f592:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f596:	2200      	movs	r2, #0
    f598:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    f59c:	bd08      	pop	{r3, pc}

0000f59e <nrfx_clock_stop>:
    clock_stop(domain);
    f59e:	f7fa bae3 	b.w	9b68 <clock_stop>

0000f5a2 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    f5a2:	f000 001f 	and.w	r0, r0, #31
    f5a6:	0080      	lsls	r0, r0, #2
    f5a8:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    f5ac:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    f5b0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    f5b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    f5b8:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    f5bc:	4770      	bx	lr

0000f5be <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
    f5be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f5c2:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
    f5c4:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    f5c6:	4350      	muls	r0, r2
    f5c8:	4770      	bx	lr

0000f5ca <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
    f5ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f5ce:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    f5d0:	4770      	bx	lr

0000f5d2 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
    f5d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f5d6:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    f5d8:	4770      	bx	lr

0000f5da <transfer_byte>:
{
    f5da:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
    f5dc:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    f5e0:	698a      	ldr	r2, [r1, #24]
    f5e2:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
    f5e4:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    f5e8:	6a0b      	ldr	r3, [r1, #32]
    f5ea:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
    f5ec:	bf3e      	ittt	cc
    f5ee:	694a      	ldrcc	r2, [r1, #20]
    f5f0:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
    f5f4:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
    f5f6:	6a0b      	ldr	r3, [r1, #32]
    if (p_cb->abort)
    f5f8:	f891 5024 	ldrb.w	r5, [r1, #36]	; 0x24
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    f5fc:	690c      	ldr	r4, [r1, #16]
    ++p_cb->bytes_transferred;
    f5fe:	1c5a      	adds	r2, r3, #1
    f600:	620a      	str	r2, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
    f602:	3302      	adds	r3, #2
    if (p_cb->abort)
    f604:	b135      	cbz	r5, f614 <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    f606:	42a3      	cmp	r3, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    f608:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
    f60a:	bf38      	it	cc
    f60c:	610b      	strcc	r3, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    f60e:	429c      	cmp	r4, r3
            p_cb->evt.xfer_desc.rx_length = bytes_used;
    f610:	bf88      	it	hi
    f612:	618b      	strhi	r3, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    f614:	690d      	ldr	r5, [r1, #16]
    f616:	429d      	cmp	r5, r3
    f618:	d905      	bls.n	f626 <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
    f61a:	68ca      	ldr	r2, [r1, #12]
    p_reg->TXD = data;
    f61c:	5cd3      	ldrb	r3, [r2, r3]
    f61e:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    f622:	2001      	movs	r0, #1
    f624:	e00a      	b.n	f63c <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    f626:	698c      	ldr	r4, [r1, #24]
    f628:	429c      	cmp	r4, r3
    f62a:	d901      	bls.n	f630 <transfer_byte+0x56>
    f62c:	7fcb      	ldrb	r3, [r1, #31]
    f62e:	e7f6      	b.n	f61e <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    f630:	42aa      	cmp	r2, r5
    f632:	d3f6      	bcc.n	f622 <transfer_byte+0x48>
    f634:	42a2      	cmp	r2, r4
    f636:	bf2c      	ite	cs
    f638:	2000      	movcs	r0, #0
    f63a:	2001      	movcc	r0, #1
}
    f63c:	b003      	add	sp, #12
    f63e:	bd30      	pop	{r4, r5, pc}

0000f640 <irq_handler>:
{
    f640:	b510      	push	{r4, lr}
    f642:	4603      	mov	r3, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f644:	2200      	movs	r2, #0
    f646:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
    f64a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    f64e:	460c      	mov	r4, r1
    if (!transfer_byte(p_spi, p_cb))
    f650:	f7ff ffc3 	bl	f5da <transfer_byte>
    f654:	b9a8      	cbnz	r0, f682 <irq_handler+0x42>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    f656:	7f8b      	ldrb	r3, [r1, #30]
    f658:	2bff      	cmp	r3, #255	; 0xff
    f65a:	d008      	beq.n	f66e <irq_handler+0x2e>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    f65c:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
    f65e:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    f662:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
    f666:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    f66a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_cb->transfer_in_progress = false;
    f66e:	2300      	movs	r3, #0
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    f670:	4620      	mov	r0, r4
    p_cb->transfer_in_progress = false;
    f672:	7763      	strb	r3, [r4, #29]
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
    f674:	7223      	strb	r3, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    f676:	6861      	ldr	r1, [r4, #4]
    f678:	f850 3b08 	ldr.w	r3, [r0], #8
}
    f67c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    f680:	4718      	bx	r3
}
    f682:	bd10      	pop	{r4, pc}

0000f684 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    f684:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    f686:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    f688:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    f68a:	bf9c      	itt	ls
    f68c:	6881      	ldrls	r1, [r0, #8]
    f68e:	185b      	addls	r3, r3, r1
    r = RdOff - WrOff - 1u;
    f690:	3b01      	subs	r3, #1
    f692:	1a98      	subs	r0, r3, r2
}
    f694:	4770      	bx	lr

0000f696 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    f696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
    f69a:	e9d0 8402 	ldrd	r8, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    f69e:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    f6a0:	eba8 0604 	sub.w	r6, r8, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    f6a4:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
    f6a6:	4296      	cmp	r6, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    f6a8:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    f6aa:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
    f6ac:	4414      	add	r4, r2
  if (Rem > NumBytes) {
    f6ae:	d904      	bls.n	f6ba <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    f6b0:	f7ff faf5 	bl	ec9e <memcpy>
    pRing->WrOff = WrOff + NumBytes;
    f6b4:	60ec      	str	r4, [r5, #12]
}
    f6b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    f6ba:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
    f6bc:	eba4 0408 	sub.w	r4, r4, r8
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    f6c0:	f7ff faed 	bl	ec9e <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    f6c4:	6868      	ldr	r0, [r5, #4]
    f6c6:	4622      	mov	r2, r4
    f6c8:	19b9      	adds	r1, r7, r6
    f6ca:	e7f1      	b.n	f6b0 <_WriteNoCheck+0x1a>

0000f6cc <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    f6cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    f6d0:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    f6d2:	4606      	mov	r6, r0
    f6d4:	4689      	mov	r9, r1
    f6d6:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    f6d8:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    f6dc:	6933      	ldr	r3, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    f6de:	68b4      	ldr	r4, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    f6e0:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    f6e2:	429d      	cmp	r5, r3
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    f6e4:	bf28      	it	cs
    f6e6:	191b      	addcs	r3, r3, r4
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    f6e8:	1b64      	subs	r4, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    f6ea:	42bc      	cmp	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    f6ec:	f103 33ff 	add.w	r3, r3, #4294967295
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    f6f0:	bf28      	it	cs
    f6f2:	463c      	movcs	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    f6f4:	1b5b      	subs	r3, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    f6f6:	429c      	cmp	r4, r3
    f6f8:	bf28      	it	cs
    f6fa:	461c      	movcs	r4, r3
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    f6fc:	4649      	mov	r1, r9
    f6fe:	4428      	add	r0, r5
    f700:	4622      	mov	r2, r4
    f702:	f7ff facc 	bl	ec9e <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    f706:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    f708:	4425      	add	r5, r4
      WrOff = 0u;
    f70a:	42ab      	cmp	r3, r5
    f70c:	bf08      	it	eq
    f70e:	2500      	moveq	r5, #0
  } while (NumBytes);
    f710:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
    f712:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    f714:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
    f716:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    f718:	d1e0      	bne.n	f6dc <_WriteBlocking+0x10>
}
    f71a:	4640      	mov	r0, r8
    f71c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000f720 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    f720:	f7fb b826 	b.w	a770 <_DoInit>

0000f724 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
    f724:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
    f726:	f7ff fffb 	bl	f720 <SEGGER_RTT_Init>

	return 0;
}
    f72a:	2000      	movs	r0, #0
    f72c:	bd08      	pop	{r3, pc}

0000f72e <z_device_state_init>:
}
    f72e:	4770      	bx	lr

0000f730 <z_device_is_ready>:
	if (dev == NULL) {
    f730:	b140      	cbz	r0, f744 <z_device_is_ready+0x14>
	return dev->state->initialized && (dev->state->init_res == 0U);
    f732:	68c3      	ldr	r3, [r0, #12]
    f734:	7858      	ldrb	r0, [r3, #1]
    f736:	f010 0001 	ands.w	r0, r0, #1
    f73a:	bf1e      	ittt	ne
    f73c:	7818      	ldrbne	r0, [r3, #0]
    f73e:	fab0 f080 	clzne	r0, r0
    f742:	0940      	lsrne	r0, r0, #5
}
    f744:	4770      	bx	lr

0000f746 <device_required_foreach>:

int device_required_foreach(const struct device *dev,
			    device_visitor_callback_t visitor_cb,
			    void *context)
{
    f746:	b470      	push	{r4, r5, r6}
    f748:	6940      	ldr	r0, [r0, #20]
    f74a:	460d      	mov	r5, r1
    f74c:	4613      	mov	r3, r2
	if (rv != NULL) {
    f74e:	b960      	cbnz	r0, f76a <device_required_foreach+0x24>
	size_t handle_count = 0;
    f750:	4601      	mov	r1, r0
	const device_handle_t *handles = device_required_handles_get(dev, &handle_count);

	return device_visitor(handles, handle_count, visitor_cb, context);
    f752:	462a      	mov	r2, r5
}
    f754:	bc70      	pop	{r4, r5, r6}
	return device_visitor(handles, handle_count, visitor_cb, context);
    f756:	f7fb b8c9 	b.w	a8ec <device_visitor>
			++i;
    f75a:	3101      	adds	r1, #1
		while ((rv[i] != DEVICE_HANDLE_ENDS) &&
    f75c:	f830 4011 	ldrh.w	r4, [r0, r1, lsl #1]
    f760:	4434      	add	r4, r6
    f762:	b2a4      	uxth	r4, r4
    f764:	4294      	cmp	r4, r2
    f766:	d9f8      	bls.n	f75a <device_required_foreach+0x14>
    f768:	e7f3      	b.n	f752 <device_required_foreach+0xc>
		size_t i = 0;
    f76a:	2100      	movs	r1, #0
		while ((rv[i] != DEVICE_HANDLE_ENDS) &&
    f76c:	f647 76ff 	movw	r6, #32767	; 0x7fff
    f770:	f64f 72fd 	movw	r2, #65533	; 0xfffd
    f774:	e7f2      	b.n	f75c <device_required_foreach+0x16>

0000f776 <z_early_memset>:
	(void) memset(dst, c, n);
    f776:	f7ff ba9d 	b.w	ecb4 <memset>

0000f77a <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    f77a:	f7ff ba90 	b.w	ec9e <memcpy>

0000f77e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    f77e:	f3ef 8005 	mrs	r0, IPSR
}
    f782:	3800      	subs	r0, #0
    f784:	bf18      	it	ne
    f786:	2001      	movne	r0, #1
    f788:	4770      	bx	lr

0000f78a <k_thread_name_get>:
}
    f78a:	3078      	adds	r0, #120	; 0x78
    f78c:	4770      	bx	lr

0000f78e <z_impl_k_thread_start>:
	z_sched_start(thread);
    f78e:	f7fb bf1d 	b.w	b5cc <z_sched_start>

0000f792 <z_stack_space_get>:
#ifdef CONFIG_STACK_GROWS_UP
#error "Unsupported configuration for stack analysis"
#endif

int z_stack_space_get(const uint8_t *stack_start, size_t size, size_t *unused_ptr)
{
    f792:	b510      	push	{r4, lr}
	size_t unused = 0;
    f794:	2300      	movs	r3, #0
		 */
		checked_stack += 4;
		size -= 4;
	}

	for (size_t i = 0; i < size; i++) {
    f796:	428b      	cmp	r3, r1
    f798:	d102      	bne.n	f7a0 <z_stack_space_get+0xe>
		} else {
			break;
		}
	}

	*unused_ptr = unused;
    f79a:	6013      	str	r3, [r2, #0]

	return 0;
}
    f79c:	2000      	movs	r0, #0
    f79e:	bd10      	pop	{r4, pc}
		if ((checked_stack[i]) == 0xaaU) {
    f7a0:	5cc4      	ldrb	r4, [r0, r3]
    f7a2:	2caa      	cmp	r4, #170	; 0xaa
    f7a4:	d1f9      	bne.n	f79a <z_stack_space_get+0x8>
			unused++;
    f7a6:	3301      	adds	r3, #1
	for (size_t i = 0; i < size; i++) {
    f7a8:	e7f5      	b.n	f796 <z_stack_space_get+0x4>

0000f7aa <z_impl_k_thread_stack_space_get>:

int z_impl_k_thread_stack_space_get(const struct k_thread *thread,
				    size_t *unused_ptr)
{
    f7aa:	460a      	mov	r2, r1
	return z_stack_space_get((const uint8_t *)thread->stack_info.start,
    f7ac:	e9d0 0127 	ldrd	r0, r1, [r0, #156]	; 0x9c
    f7b0:	f7ff bfef 	b.w	f792 <z_stack_space_get>

0000f7b4 <z_pm_save_idle_exit>:
{
    f7b4:	b508      	push	{r3, lr}
	pm_system_resume();
    f7b6:	f7f4 fd45 	bl	4244 <pm_system_resume>
}
    f7ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    f7be:	f7ff bebf 	b.w	f540 <sys_clock_idle_exit>

0000f7c2 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    f7c2:	f990 300e 	ldrsb.w	r3, [r0, #14]
    f7c6:	428b      	cmp	r3, r1
    f7c8:	d001      	beq.n	f7ce <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    f7ca:	f7fb bea7 	b.w	b51c <z_set_prio>
}
    f7ce:	2000      	movs	r0, #0
    f7d0:	4770      	bx	lr

0000f7d2 <z_impl_k_mutex_init>:
{
    f7d2:	4603      	mov	r3, r0
	mutex->owner = NULL;
    f7d4:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    f7d6:	e9c3 0002 	strd	r0, r0, [r3, #8]
    f7da:	e9c3 3300 	strd	r3, r3, [r3]
}
    f7de:	4770      	bx	lr

0000f7e0 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    f7e0:	b15a      	cbz	r2, f7fa <z_impl_k_sem_init+0x1a>
    f7e2:	428a      	cmp	r2, r1
    f7e4:	d309      	bcc.n	f7fa <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
    f7e6:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
    f7ea:	e9c0 1202 	strd	r1, r2, [r0, #8]
    f7ee:	e9c0 0000 	strd	r0, r0, [r0]
    f7f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
    f7f6:	2000      	movs	r0, #0
    f7f8:	4770      	bx	lr
		return -EINVAL;
    f7fa:	f06f 0015 	mvn.w	r0, #21
}
    f7fe:	4770      	bx	lr

0000f800 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    f800:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    f804:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    f806:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    f808:	2300      	movs	r3, #0
	node->prev = NULL;
    f80a:	e9c0 3300 	strd	r3, r3, [r0]
}
    f80e:	4770      	bx	lr

0000f810 <unpend_thread_no_timeout>:
{
    f810:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    f812:	f7ff fff5 	bl	f800 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    f816:	7b43      	ldrb	r3, [r0, #13]
    f818:	f023 0302 	bic.w	r3, r3, #2
    f81c:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    f81e:	2300      	movs	r3, #0
    f820:	6083      	str	r3, [r0, #8]
}
    f822:	bd08      	pop	{r3, pc}

0000f824 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    f824:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    f828:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    f82c:	4283      	cmp	r3, r0
		return b2 - b1;
    f82e:	bf14      	ite	ne
    f830:	1ac0      	subne	r0, r0, r3
	return 0;
    f832:	2000      	moveq	r0, #0
}
    f834:	4770      	bx	lr

0000f836 <add_to_waitq_locked>:
{
    f836:	b538      	push	{r3, r4, r5, lr}
    f838:	4604      	mov	r4, r0
    f83a:	460d      	mov	r5, r1
	unready_thread(thread);
    f83c:	f7fb fdf0 	bl	b420 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    f840:	7b63      	ldrb	r3, [r4, #13]
    f842:	f043 0302 	orr.w	r3, r3, #2
    f846:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    f848:	b1e5      	cbz	r5, f884 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    f84a:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    f84c:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f84e:	429d      	cmp	r5, r3
    f850:	d109      	bne.n	f866 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    f852:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    f854:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    f858:	601c      	str	r4, [r3, #0]
	list->tail = node;
    f85a:	606c      	str	r4, [r5, #4]
}
    f85c:	e012      	b.n	f884 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    f85e:	686a      	ldr	r2, [r5, #4]
    f860:	4293      	cmp	r3, r2
    f862:	d0f6      	beq.n	f852 <add_to_waitq_locked+0x1c>
    f864:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f866:	2b00      	cmp	r3, #0
    f868:	d0f3      	beq.n	f852 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    f86a:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    f86e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    f872:	428a      	cmp	r2, r1
    f874:	d0f3      	beq.n	f85e <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    f876:	4291      	cmp	r1, r2
    f878:	ddf1      	ble.n	f85e <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    f87a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    f87c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    f880:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    f882:	605c      	str	r4, [r3, #4]
}
    f884:	bd38      	pop	{r3, r4, r5, pc}

0000f886 <z_ready_thread>:
{
    f886:	b510      	push	{r4, lr}
	__asm__ volatile(
    f888:	f04f 0320 	mov.w	r3, #32
    f88c:	f3ef 8411 	mrs	r4, BASEPRI
    f890:	f383 8812 	msr	BASEPRI_MAX, r3
    f894:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    f898:	f7fb fd8e 	bl	b3b8 <ready_thread>
	__asm__ volatile(
    f89c:	f384 8811 	msr	BASEPRI, r4
    f8a0:	f3bf 8f6f 	isb	sy
}
    f8a4:	bd10      	pop	{r4, pc}

0000f8a6 <z_unpend_thread_no_timeout>:
{
    f8a6:	b508      	push	{r3, lr}
	__asm__ volatile(
    f8a8:	f04f 0220 	mov.w	r2, #32
    f8ac:	f3ef 8111 	mrs	r1, BASEPRI
    f8b0:	f382 8812 	msr	BASEPRI_MAX, r2
    f8b4:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    f8b8:	6883      	ldr	r3, [r0, #8]
    f8ba:	b10b      	cbz	r3, f8c0 <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
    f8bc:	f7ff ffa8 	bl	f810 <unpend_thread_no_timeout>
	__asm__ volatile(
    f8c0:	f381 8811 	msr	BASEPRI, r1
    f8c4:	f3bf 8f6f 	isb	sy
}
    f8c8:	bd08      	pop	{r3, pc}

0000f8ca <z_sched_wake_thread>:
{
    f8ca:	b538      	push	{r3, r4, r5, lr}
    f8cc:	4604      	mov	r4, r0
	__asm__ volatile(
    f8ce:	f04f 0320 	mov.w	r3, #32
    f8d2:	f3ef 8511 	mrs	r5, BASEPRI
    f8d6:	f383 8812 	msr	BASEPRI_MAX, r3
    f8da:	f3bf 8f6f 	isb	sy
		if (!killed) {
    f8de:	7b43      	ldrb	r3, [r0, #13]
    f8e0:	f013 0f28 	tst.w	r3, #40	; 0x28
    f8e4:	d10b      	bne.n	f8fe <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    f8e6:	6883      	ldr	r3, [r0, #8]
    f8e8:	b10b      	cbz	r3, f8ee <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    f8ea:	f7ff ff91 	bl	f810 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    f8ee:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    f8f0:	b951      	cbnz	r1, f908 <z_sched_wake_thread+0x3e>
    f8f2:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    f8f6:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
    f8f8:	4620      	mov	r0, r4
    f8fa:	f7fb fd5d 	bl	b3b8 <ready_thread>
	__asm__ volatile(
    f8fe:	f385 8811 	msr	BASEPRI, r5
    f902:	f3bf 8f6f 	isb	sy
}
    f906:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    f908:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    f90c:	e7f3      	b.n	f8f6 <z_sched_wake_thread+0x2c>

0000f90e <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    f90e:	2101      	movs	r1, #1
    f910:	3818      	subs	r0, #24
    f912:	f7ff bfda 	b.w	f8ca <z_sched_wake_thread>

0000f916 <z_unpend1_no_timeout>:
{
    f916:	b508      	push	{r3, lr}
    f918:	4603      	mov	r3, r0
	__asm__ volatile(
    f91a:	f04f 0220 	mov.w	r2, #32
    f91e:	f3ef 8111 	mrs	r1, BASEPRI
    f922:	f382 8812 	msr	BASEPRI_MAX, r2
    f926:	f3bf 8f6f 	isb	sy
	return list->head == list;
    f92a:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f92c:	4283      	cmp	r3, r0
    f92e:	d007      	beq.n	f940 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
    f930:	b108      	cbz	r0, f936 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
    f932:	f7ff ff6d 	bl	f810 <unpend_thread_no_timeout>
	__asm__ volatile(
    f936:	f381 8811 	msr	BASEPRI, r1
    f93a:	f3bf 8f6f 	isb	sy
}
    f93e:	bd08      	pop	{r3, pc}
    f940:	2000      	movs	r0, #0
    f942:	e7f8      	b.n	f936 <z_unpend1_no_timeout+0x20>

0000f944 <z_unpend_first_thread>:
{
    f944:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    f946:	f04f 0320 	mov.w	r3, #32
    f94a:	f3ef 8511 	mrs	r5, BASEPRI
    f94e:	f383 8812 	msr	BASEPRI_MAX, r3
    f952:	f3bf 8f6f 	isb	sy
	return list->head == list;
    f956:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f958:	42a0      	cmp	r0, r4
    f95a:	d00d      	beq.n	f978 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    f95c:	b134      	cbz	r4, f96c <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    f95e:	4620      	mov	r0, r4
    f960:	f7ff ff56 	bl	f810 <unpend_thread_no_timeout>
    f964:	f104 0018 	add.w	r0, r4, #24
    f968:	f000 f85a 	bl	fa20 <z_abort_timeout>
	__asm__ volatile(
    f96c:	f385 8811 	msr	BASEPRI, r5
    f970:	f3bf 8f6f 	isb	sy
}
    f974:	4620      	mov	r0, r4
    f976:	bd38      	pop	{r3, r4, r5, pc}
    f978:	2400      	movs	r4, #0
    f97a:	e7f7      	b.n	f96c <z_unpend_first_thread+0x28>

0000f97c <z_unpend_thread>:
{
    f97c:	b510      	push	{r4, lr}
    f97e:	4601      	mov	r1, r0
	__asm__ volatile(
    f980:	f04f 0320 	mov.w	r3, #32
    f984:	f3ef 8411 	mrs	r4, BASEPRI
    f988:	f383 8812 	msr	BASEPRI_MAX, r3
    f98c:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    f990:	6883      	ldr	r3, [r0, #8]
    f992:	b10b      	cbz	r3, f998 <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
    f994:	f7ff ff3c 	bl	f810 <unpend_thread_no_timeout>
	__asm__ volatile(
    f998:	f384 8811 	msr	BASEPRI, r4
    f99c:	f3bf 8f6f 	isb	sy
}
    f9a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f9a4:	f101 0018 	add.w	r0, r1, #24
    f9a8:	f000 b83a 	b.w	fa20 <z_abort_timeout>

0000f9ac <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    f9ac:	4603      	mov	r3, r0
    f9ae:	b920      	cbnz	r0, f9ba <z_reschedule_irqlock+0xe>
    f9b0:	f3ef 8205 	mrs	r2, IPSR
    f9b4:	b90a      	cbnz	r2, f9ba <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    f9b6:	f7f7 b843 	b.w	6a40 <arch_swap>
    f9ba:	f383 8811 	msr	BASEPRI, r3
    f9be:	f3bf 8f6f 	isb	sy
}
    f9c2:	4770      	bx	lr

0000f9c4 <z_reschedule_unlocked>:
	__asm__ volatile(
    f9c4:	f04f 0320 	mov.w	r3, #32
    f9c8:	f3ef 8011 	mrs	r0, BASEPRI
    f9cc:	f383 8812 	msr	BASEPRI_MAX, r3
    f9d0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    f9d4:	f7ff bfea 	b.w	f9ac <z_reschedule_irqlock>

0000f9d8 <z_sched_wake>:
{
    f9d8:	b538      	push	{r3, r4, r5, lr}
    f9da:	f04f 0320 	mov.w	r3, #32
    f9de:	f3ef 8511 	mrs	r5, BASEPRI
    f9e2:	f383 8812 	msr	BASEPRI_MAX, r3
    f9e6:	f3bf 8f6f 	isb	sy
	return list->head == list;
    f9ea:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f9ec:	42a0      	cmp	r0, r4
    f9ee:	d013      	beq.n	fa18 <z_sched_wake+0x40>
		if (thread != NULL) {
    f9f0:	b1a4      	cbz	r4, fa1c <z_sched_wake+0x44>
    f9f2:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    f9f6:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
    f9f8:	4620      	mov	r0, r4
    f9fa:	f7ff ff09 	bl	f810 <unpend_thread_no_timeout>
    f9fe:	f104 0018 	add.w	r0, r4, #24
    fa02:	f000 f80d 	bl	fa20 <z_abort_timeout>
			ready_thread(thread);
    fa06:	4620      	mov	r0, r4
    fa08:	f7fb fcd6 	bl	b3b8 <ready_thread>
			ret = true;
    fa0c:	2001      	movs	r0, #1
	__asm__ volatile(
    fa0e:	f385 8811 	msr	BASEPRI, r5
    fa12:	f3bf 8f6f 	isb	sy
}
    fa16:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
    fa18:	2000      	movs	r0, #0
    fa1a:	e7f8      	b.n	fa0e <z_sched_wake+0x36>
    fa1c:	4620      	mov	r0, r4
    fa1e:	e7f6      	b.n	fa0e <z_sched_wake+0x36>

0000fa20 <z_abort_timeout>:
{
    fa20:	b510      	push	{r4, lr}
	__asm__ volatile(
    fa22:	f04f 0220 	mov.w	r2, #32
    fa26:	f3ef 8411 	mrs	r4, BASEPRI
    fa2a:	f382 8812 	msr	BASEPRI_MAX, r2
    fa2e:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    fa32:	6803      	ldr	r3, [r0, #0]
    fa34:	b13b      	cbz	r3, fa46 <z_abort_timeout+0x26>
			remove_timeout(to);
    fa36:	f7fb ffad 	bl	b994 <remove_timeout>
			ret = 0;
    fa3a:	2000      	movs	r0, #0
	__asm__ volatile(
    fa3c:	f384 8811 	msr	BASEPRI, r4
    fa40:	f3bf 8f6f 	isb	sy
}
    fa44:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    fa46:	f06f 0015 	mvn.w	r0, #21
    fa4a:	e7f7      	b.n	fa3c <z_abort_timeout+0x1c>

0000fa4c <z_get_next_timeout_expiry>:
{
    fa4c:	b510      	push	{r4, lr}
	__asm__ volatile(
    fa4e:	f04f 0320 	mov.w	r3, #32
    fa52:	f3ef 8411 	mrs	r4, BASEPRI
    fa56:	f383 8812 	msr	BASEPRI_MAX, r3
    fa5a:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    fa5e:	f7fb ff79 	bl	b954 <next_timeout>
	__asm__ volatile(
    fa62:	f384 8811 	msr	BASEPRI, r4
    fa66:	f3bf 8f6f 	isb	sy
}
    fa6a:	bd10      	pop	{r4, pc}

0000fa6c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    fa6c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    fa6e:	f7fc f88d 	bl	bb8c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    fa72:	bd08      	pop	{r3, pc}

0000fa74 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    fa74:	f7fc b88a 	b.w	bb8c <sys_clock_tick_get>

0000fa78 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    fa78:	b108      	cbz	r0, fa7e <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    fa7a:	f7f7 bd99 	b.w	75b0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    fa7e:	4770      	bx	lr

0000fa80 <k_timer_init>:
	timer->status = 0U;
    fa80:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    fa82:	e9c0 1208 	strd	r1, r2, [r0, #32]
    fa86:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    fa8a:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    fa8e:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    fa92:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    fa94:	6343      	str	r3, [r0, #52]	; 0x34
}
    fa96:	4770      	bx	lr

0000fa98 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    fa98:	b510      	push	{r4, lr}
    fa9a:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    fa9c:	f7ff ffc0 	bl	fa20 <z_abort_timeout>

	if (inactive) {
    faa0:	b9b0      	cbnz	r0, fad0 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    faa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    faa4:	b10b      	cbz	r3, faaa <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    faa6:	4620      	mov	r0, r4
    faa8:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    faaa:	f104 0018 	add.w	r0, r4, #24
    faae:	f7ff ff32 	bl	f916 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    fab2:	b168      	cbz	r0, fad0 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    fab4:	f7ff fee7 	bl	f886 <z_ready_thread>
	__asm__ volatile(
    fab8:	f04f 0320 	mov.w	r3, #32
    fabc:	f3ef 8011 	mrs	r0, BASEPRI
    fac0:	f383 8812 	msr	BASEPRI_MAX, r3
    fac4:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    fac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    facc:	f7ff bf6e 	b.w	f9ac <z_reschedule_irqlock>
    fad0:	bd10      	pop	{r4, pc}

0000fad2 <add_event>:
{
    fad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fad4:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    fad6:	e9d0 1300 	ldrd	r1, r3, [r0]
    fada:	4288      	cmp	r0, r1
    fadc:	4604      	mov	r4, r0
    fade:	d105      	bne.n	faec <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
    fae0:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
    fae2:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
    fae6:	601d      	str	r5, [r3, #0]
	list->tail = node;
    fae8:	6065      	str	r5, [r4, #4]
    faea:	e01d      	b.n	fb28 <add_event+0x56>
	if ((pending == NULL) ||
    faec:	2b00      	cmp	r3, #0
    faee:	d0f7      	beq.n	fae0 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
    faf0:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    faf2:	b100      	cbz	r0, faf6 <add_event+0x24>
    faf4:	3860      	subs	r0, #96	; 0x60
    faf6:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
    fafa:	4639      	mov	r1, r7
    fafc:	f7ff fe92 	bl	f824 <z_sched_prio_cmp>
	if ((pending == NULL) ||
    fb00:	2800      	cmp	r0, #0
    fb02:	dced      	bgt.n	fae0 <add_event+0xe>
	return list->head == list;
    fb04:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fb06:	42b4      	cmp	r4, r6
    fb08:	d0ea      	beq.n	fae0 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    fb0a:	2e00      	cmp	r6, #0
    fb0c:	d0e8      	beq.n	fae0 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
    fb0e:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    fb10:	b101      	cbz	r1, fb14 <add_event+0x42>
    fb12:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
    fb14:	4638      	mov	r0, r7
    fb16:	f7ff fe85 	bl	f824 <z_sched_prio_cmp>
    fb1a:	2800      	cmp	r0, #0
    fb1c:	dd05      	ble.n	fb2a <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
    fb1e:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
    fb20:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
    fb24:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    fb26:	6075      	str	r5, [r6, #4]
}
    fb28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    fb2a:	6863      	ldr	r3, [r4, #4]
    fb2c:	429e      	cmp	r6, r3
    fb2e:	d0d7      	beq.n	fae0 <add_event+0xe>
    fb30:	6836      	ldr	r6, [r6, #0]
    fb32:	e7ea      	b.n	fb0a <add_event+0x38>

0000fb34 <register_events>:
{
    fb34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
    fb38:	2500      	movs	r5, #0
{
    fb3a:	468b      	mov	fp, r1
    fb3c:	4614      	mov	r4, r2
    fb3e:	461f      	mov	r7, r3
    fb40:	4682      	mov	sl, r0
	int events_registered = 0;
    fb42:	462e      	mov	r6, r5
	event->poller = NULL;
    fb44:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
    fb46:	455d      	cmp	r5, fp
    fb48:	db02      	blt.n	fb50 <register_events+0x1c>
}
    fb4a:	4630      	mov	r0, r6
    fb4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fb50:	f04f 0320 	mov.w	r3, #32
    fb54:	f3ef 8911 	mrs	r9, BASEPRI
    fb58:	f383 8812 	msr	BASEPRI_MAX, r3
    fb5c:	f3bf 8f6f 	isb	sy
	switch (event->type) {
    fb60:	f89a 300d 	ldrb.w	r3, [sl, #13]
    fb64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    fb68:	3b01      	subs	r3, #1
    fb6a:	2b07      	cmp	r3, #7
    fb6c:	d80f      	bhi.n	fb8e <register_events+0x5a>
    fb6e:	e8df f003 	tbb	[pc, r3]
    fb72:	041e      	.short	0x041e
    fb74:	0e0e0a0e 	.word	0x0e0e0a0e
    fb78:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
    fb7a:	f8da 3010 	ldr.w	r3, [sl, #16]
    fb7e:	689b      	ldr	r3, [r3, #8]
    fb80:	b12b      	cbz	r3, fb8e <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
    fb82:	2302      	movs	r3, #2
    fb84:	e020      	b.n	fbc8 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
    fb86:	f8da 3010 	ldr.w	r3, [sl, #16]
    fb8a:	681b      	ldr	r3, [r3, #0]
    fb8c:	bb8b      	cbnz	r3, fbf2 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
    fb8e:	bb47      	cbnz	r7, fbe2 <register_events+0xae>
    fb90:	7823      	ldrb	r3, [r4, #0]
    fb92:	b333      	cbz	r3, fbe2 <register_events+0xae>
	switch (event->type) {
    fb94:	f89a 300d 	ldrb.w	r3, [sl, #13]
    fb98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    fb9c:	3b01      	subs	r3, #1
    fb9e:	2b07      	cmp	r3, #7
    fba0:	d830      	bhi.n	fc04 <register_events+0xd0>
    fba2:	e8df f003 	tbb	[pc, r3]
    fba6:	2833      	.short	0x2833
    fba8:	2f2f282f 	.word	0x2f2f282f
    fbac:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
    fbae:	f8da 3010 	ldr.w	r3, [sl, #16]
    fbb2:	689b      	ldr	r3, [r3, #8]
    fbb4:	2b00      	cmp	r3, #0
    fbb6:	d0ea      	beq.n	fb8e <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
    fbb8:	2301      	movs	r3, #1
    fbba:	e005      	b.n	fbc8 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
    fbbc:	f8da 3010 	ldr.w	r3, [sl, #16]
    fbc0:	6a1b      	ldr	r3, [r3, #32]
    fbc2:	2b00      	cmp	r3, #0
    fbc4:	d0e3      	beq.n	fb8e <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
    fbc6:	2310      	movs	r3, #16
	event->state |= state;
    fbc8:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
    fbcc:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
    fbd0:	f3c2 3186 	ubfx	r1, r2, #14, #7
    fbd4:	430b      	orrs	r3, r1
    fbd6:	f363 3294 	bfi	r2, r3, #14, #7
    fbda:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
    fbde:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
    fbe2:	f389 8811 	msr	BASEPRI, r9
    fbe6:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
    fbea:	3501      	adds	r5, #1
    fbec:	f10a 0a14 	add.w	sl, sl, #20
    fbf0:	e7a9      	b.n	fb46 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
    fbf2:	2304      	movs	r3, #4
    fbf4:	e7e8      	b.n	fbc8 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
    fbf6:	f8da 0010 	ldr.w	r0, [sl, #16]
    fbfa:	4622      	mov	r2, r4
    fbfc:	4651      	mov	r1, sl
    fbfe:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
    fc00:	f7ff ff67 	bl	fad2 <add_event>
	event->poller = poller;
    fc04:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
    fc08:	3601      	adds	r6, #1
    fc0a:	e7ea      	b.n	fbe2 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
    fc0c:	f8da 0010 	ldr.w	r0, [sl, #16]
    fc10:	4622      	mov	r2, r4
    fc12:	4651      	mov	r1, sl
    fc14:	e7f4      	b.n	fc00 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
    fc16:	f8da 0010 	ldr.w	r0, [sl, #16]
    fc1a:	4622      	mov	r2, r4
    fc1c:	4651      	mov	r1, sl
    fc1e:	3024      	adds	r0, #36	; 0x24
    fc20:	e7ee      	b.n	fc00 <register_events+0xcc>

0000fc22 <signal_poll_event>:
{
    fc22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
    fc26:	6884      	ldr	r4, [r0, #8]
{
    fc28:	4605      	mov	r5, r0
    fc2a:	460e      	mov	r6, r1
	if (poller != NULL) {
    fc2c:	b144      	cbz	r4, fc40 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
    fc2e:	7863      	ldrb	r3, [r4, #1]
    fc30:	2b01      	cmp	r3, #1
    fc32:	d12e      	bne.n	fc92 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
    fc34:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    fc38:	f013 0302 	ands.w	r3, r3, #2
    fc3c:	d10a      	bne.n	fc54 <signal_poll_event+0x32>
		poller->is_polling = false;
    fc3e:	7023      	strb	r3, [r4, #0]
	event->state |= state;
    fc40:	68eb      	ldr	r3, [r5, #12]
    fc42:	f3c3 3286 	ubfx	r2, r3, #14, #7
    fc46:	4316      	orrs	r6, r2
	event->poller = NULL;
    fc48:	2000      	movs	r0, #0
	event->state |= state;
    fc4a:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
    fc4e:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    fc50:	60eb      	str	r3, [r5, #12]
	return retcode;
    fc52:	e03e      	b.n	fcd2 <__kernel_ram_size+0x32>
	if (z_is_thread_timeout_expired(thread)) {
    fc54:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
    fc58:	f1b3 3fff 	cmp.w	r3, #4294967295
    fc5c:	bf08      	it	eq
    fc5e:	f112 0f02 	cmneq.w	r2, #2
    fc62:	d032      	beq.n	fcca <__kernel_ram_size+0x2a>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    fc64:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
    fc68:	4640      	mov	r0, r8
    fc6a:	f7ff fe87 	bl	f97c <z_unpend_thread>
	arch_thread_return_value_set(thread,
    fc6e:	2e08      	cmp	r6, #8
    fc70:	bf0c      	ite	eq
    fc72:	f06f 0303 	mvneq.w	r3, #3
    fc76:	2300      	movne	r3, #0
    fc78:	6523      	str	r3, [r4, #80]	; 0x50
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    fc7a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    fc7e:	06db      	lsls	r3, r3, #27
    fc80:	d109      	bne.n	fc96 <signal_poll_event+0x74>
    fc82:	f854 7c48 	ldr.w	r7, [r4, #-72]
    fc86:	b937      	cbnz	r7, fc96 <signal_poll_event+0x74>
	z_ready_thread(thread);
    fc88:	4640      	mov	r0, r8
    fc8a:	f7ff fdfc 	bl	f886 <z_ready_thread>
		poller->is_polling = false;
    fc8e:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
    fc90:	e7d6      	b.n	fc40 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
    fc92:	2b02      	cmp	r3, #2
    fc94:	d001      	beq.n	fc9a <signal_poll_event+0x78>
		poller->is_polling = false;
    fc96:	2300      	movs	r3, #0
    fc98:	e7d1      	b.n	fc3e <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
    fc9a:	7823      	ldrb	r3, [r4, #0]
    fc9c:	2b00      	cmp	r3, #0
    fc9e:	d0cf      	beq.n	fc40 <signal_poll_event+0x1e>
    fca0:	f854 7c04 	ldr.w	r7, [r4, #-4]
    fca4:	2f00      	cmp	r7, #0
    fca6:	d0f2      	beq.n	fc8e <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
    fca8:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
    fcac:	f1a4 0914 	sub.w	r9, r4, #20
    fcb0:	f104 0014 	add.w	r0, r4, #20
    fcb4:	f7ff feb4 	bl	fa20 <z_abort_timeout>
		twork->poll_result = 0;
    fcb8:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
    fcbc:	4649      	mov	r1, r9
    fcbe:	4638      	mov	r0, r7
    fcc0:	f000 f874 	bl	fdac <z_work_submit_to_queue>
		poller->is_polling = false;
    fcc4:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
    fcc8:	e7ba      	b.n	fc40 <signal_poll_event+0x1e>
		poller->is_polling = false;
    fcca:	2300      	movs	r3, #0
    fccc:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
    fcce:	f06f 000a 	mvn.w	r0, #10
}
    fcd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000fcd6 <clear_event_registrations>:
	while (num_events--) {
    fcd6:	2314      	movs	r3, #20
{
    fcd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    fcda:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
    fcde:	2400      	movs	r4, #0
	switch (event->type) {
    fce0:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
    fce4:	b901      	cbnz	r1, fce8 <clear_event_registrations+0x12>
}
    fce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
    fce8:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
    fcec:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
    fcf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    fcf4:	2b08      	cmp	r3, #8
    fcf6:	f1a0 0714 	sub.w	r7, r0, #20
    fcfa:	d80c      	bhi.n	fd16 <clear_event_registrations+0x40>
    fcfc:	fa26 f303 	lsr.w	r3, r6, r3
    fd00:	07db      	lsls	r3, r3, #31
    fd02:	d508      	bpl.n	fd16 <clear_event_registrations+0x40>
	return node->next != NULL;
    fd04:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
    fd08:	b12b      	cbz	r3, fd16 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
    fd0a:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
    fd0e:	602b      	str	r3, [r5, #0]
	next->prev = prev;
    fd10:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
    fd12:	e940 4405 	strd	r4, r4, [r0, #-20]
    fd16:	f382 8811 	msr	BASEPRI, r2
    fd1a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    fd1e:	f04f 0320 	mov.w	r3, #32
    fd22:	f3ef 8211 	mrs	r2, BASEPRI
    fd26:	f383 8812 	msr	BASEPRI_MAX, r3
    fd2a:	f3bf 8f6f 	isb	sy
	return k;
    fd2e:	3901      	subs	r1, #1
    fd30:	4638      	mov	r0, r7
    fd32:	e7d7      	b.n	fce4 <clear_event_registrations+0xe>

0000fd34 <k_poll_event_init>:
{
    fd34:	b510      	push	{r4, lr}
	event->type = type;
    fd36:	0552      	lsls	r2, r2, #21
    fd38:	0209      	lsls	r1, r1, #8
    fd3a:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
    fd3e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
    fd42:	430a      	orrs	r2, r1
    fd44:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
    fd46:	2400      	movs	r4, #0
	event->type = type;
    fd48:	430a      	orrs	r2, r1
	event->obj = obj;
    fd4a:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
    fd4e:	6084      	str	r4, [r0, #8]
}
    fd50:	bd10      	pop	{r4, pc}

0000fd52 <z_handle_obj_poll_events>:
{
    fd52:	4603      	mov	r3, r0
	return list->head == list;
    fd54:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    fd56:	4283      	cmp	r3, r0
    fd58:	d008      	beq.n	fd6c <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
    fd5a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    fd5e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    fd60:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    fd62:	2300      	movs	r3, #0
	node->prev = NULL;
    fd64:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
    fd68:	f7ff bf5b 	b.w	fc22 <signal_poll_event>
}
    fd6c:	4770      	bx	lr

0000fd6e <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
    fd6e:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
    fd70:	e9c0 0000 	strd	r0, r0, [r0]
    fd74:	6083      	str	r3, [r0, #8]
}
    fd76:	4770      	bx	lr

0000fd78 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
    fd78:	2300      	movs	r3, #0
    fd7a:	6083      	str	r3, [r0, #8]
}
    fd7c:	4770      	bx	lr

0000fd7e <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
    fd7e:	6883      	ldr	r3, [r0, #8]
    fd80:	600b      	str	r3, [r1, #0]
	*result = sig->result;
    fd82:	68c3      	ldr	r3, [r0, #12]
    fd84:	6013      	str	r3, [r2, #0]
}
    fd86:	4770      	bx	lr

0000fd88 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    fd88:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    fd8a:	2301      	movs	r3, #1
    fd8c:	408b      	lsls	r3, r1
    fd8e:	ea22 0303 	bic.w	r3, r2, r3
    fd92:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    fd94:	fa22 f001 	lsr.w	r0, r2, r1
}
    fd98:	f000 0001 	and.w	r0, r0, #1
    fd9c:	4770      	bx	lr

0000fd9e <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    fd9e:	b120      	cbz	r0, fdaa <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    fda0:	2200      	movs	r2, #0
    fda2:	4611      	mov	r1, r2
    fda4:	30c0      	adds	r0, #192	; 0xc0
    fda6:	f7ff be17 	b.w	f9d8 <z_sched_wake>
}
    fdaa:	4770      	bx	lr

0000fdac <z_work_submit_to_queue>:
{
    fdac:	b513      	push	{r0, r1, r4, lr}
    fdae:	9001      	str	r0, [sp, #4]
    fdb0:	4608      	mov	r0, r1
    fdb2:	f04f 0320 	mov.w	r3, #32
    fdb6:	f3ef 8411 	mrs	r4, BASEPRI
    fdba:	f383 8812 	msr	BASEPRI_MAX, r3
    fdbe:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    fdc2:	a901      	add	r1, sp, #4
    fdc4:	f7fc f8de 	bl	bf84 <submit_to_queue_locked>
	__asm__ volatile(
    fdc8:	f384 8811 	msr	BASEPRI, r4
    fdcc:	f3bf 8f6f 	isb	sy
}
    fdd0:	b002      	add	sp, #8
    fdd2:	bd10      	pop	{r4, pc}

0000fdd4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    fdd4:	4770      	bx	lr
	...
