
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20 19 00 20 71 34 00 00 bd 72 00 00 45 34 00 00      .. q4...r..E4..
  10:	45 34 00 00 45 34 00 00 45 34 00 00 00 00 00 00     E4..E4..E4......
	...
  2c:	e9 2d 00 00 45 34 00 00 00 00 00 00 a1 2d 00 00     .-..E4.......-..
  3c:	45 34 00 00                                         E4..

00000040 <_irq_vector_table>:
  40:	65 2e 00 00 65 2e 00 00 65 2e 00 00 65 2e 00 00     e...e...e...e...
  50:	65 2e 00 00 65 2e 00 00 65 2e 00 00 65 2e 00 00     e...e...e...e...
  60:	65 2e 00 00 65 2e 00 00 65 2e 00 00 65 2e 00 00     e...e...e...e...
  70:	65 2e 00 00 65 2e 00 00 65 2e 00 00 65 2e 00 00     e...e...e...e...
  80:	65 2e 00 00 65 2e 00 00 65 2e 00 00 65 2e 00 00     e...e...e...e...
  90:	65 2e 00 00 65 2e 00 00 65 2e 00 00 65 2e 00 00     e...e...e...e...
  a0:	65 2e 00 00 65 2e 00 00 65 2e 00 00 65 2e 00 00     e...e...e...e...
  b0:	65 2e 00 00 65 2e 00 00 65 2e 00 00 65 2e 00 00     e...e...e...e...
  c0:	65 2e 00 00 65 2e 00 00 65 2e 00 00 65 2e 00 00     e...e...e...e...
  d0:	65 2e 00 00 65 2e 00 00 65 2e 00 00                 e...e...e...

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295
      ec:	f04f 30ff 	movne.w	r0, #4294967295
      f0:	f000 b80c 	b.w	10c <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f808 	bl	110 <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__aeabi_idiv0>:
     10c:	4770      	bx	lr
     10e:	bf00      	nop

00000110 <__udivmoddi4>:
     110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     114:	4686      	mov	lr, r0
     116:	468c      	mov	ip, r1
     118:	4608      	mov	r0, r1
     11a:	9e08      	ldr	r6, [sp, #32]
     11c:	4615      	mov	r5, r2
     11e:	4674      	mov	r4, lr
     120:	4619      	mov	r1, r3
     122:	2b00      	cmp	r3, #0
     124:	f040 80c2 	bne.w	2ac <CONFIG_FLASH_SIZE+0xac>
     128:	4285      	cmp	r5, r0
     12a:	fab2 f282 	clz	r2, r2
     12e:	d945      	bls.n	1bc <__data_size+0x3c>
     130:	b14a      	cbz	r2, 146 <CONFIG_IDLE_STACK_SIZE+0x6>
     132:	f1c2 0320 	rsb	r3, r2, #32
     136:	fa00 fc02 	lsl.w	ip, r0, r2
     13a:	fa2e f303 	lsr.w	r3, lr, r3
     13e:	4095      	lsls	r5, r2
     140:	ea43 0c0c 	orr.w	ip, r3, ip
     144:	4094      	lsls	r4, r2
     146:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     14a:	b2a8      	uxth	r0, r5
     14c:	fbbc f8fe 	udiv	r8, ip, lr
     150:	0c23      	lsrs	r3, r4, #16
     152:	fb0e cc18 	mls	ip, lr, r8, ip
     156:	fb08 f900 	mul.w	r9, r8, r0
     15a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     15e:	4599      	cmp	r9, r3
     160:	d928      	bls.n	1b4 <__data_size+0x34>
     162:	18eb      	adds	r3, r5, r3
     164:	f108 37ff 	add.w	r7, r8, #4294967295
     168:	d204      	bcs.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     16a:	4599      	cmp	r9, r3
     16c:	d902      	bls.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     16e:	f1a8 0702 	sub.w	r7, r8, #2
     172:	442b      	add	r3, r5
     174:	eba3 0309 	sub.w	r3, r3, r9
     178:	b2a4      	uxth	r4, r4
     17a:	fbb3 fcfe 	udiv	ip, r3, lr
     17e:	fb0e 331c 	mls	r3, lr, ip, r3
     182:	fb0c f000 	mul.w	r0, ip, r0
     186:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     18a:	42a0      	cmp	r0, r4
     18c:	d914      	bls.n	1b8 <__data_size+0x38>
     18e:	192c      	adds	r4, r5, r4
     190:	f10c 33ff 	add.w	r3, ip, #4294967295
     194:	d204      	bcs.n	1a0 <__data_size+0x20>
     196:	42a0      	cmp	r0, r4
     198:	d902      	bls.n	1a0 <__data_size+0x20>
     19a:	f1ac 0302 	sub.w	r3, ip, #2
     19e:	442c      	add	r4, r5
     1a0:	1a24      	subs	r4, r4, r0
     1a2:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     1a6:	b11e      	cbz	r6, 1b0 <__data_size+0x30>
     1a8:	40d4      	lsrs	r4, r2
     1aa:	2300      	movs	r3, #0
     1ac:	6034      	str	r4, [r6, #0]
     1ae:	6073      	str	r3, [r6, #4]
     1b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b4:	4647      	mov	r7, r8
     1b6:	e7dd      	b.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     1b8:	4663      	mov	r3, ip
     1ba:	e7f1      	b.n	1a0 <__data_size+0x20>
     1bc:	bb92      	cbnz	r2, 224 <CONFIG_FLASH_SIZE+0x24>
     1be:	1b43      	subs	r3, r0, r5
     1c0:	2101      	movs	r1, #1
     1c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1c6:	b2af      	uxth	r7, r5
     1c8:	fbb3 fcfe 	udiv	ip, r3, lr
     1cc:	0c20      	lsrs	r0, r4, #16
     1ce:	fb0e 331c 	mls	r3, lr, ip, r3
     1d2:	fb0c f807 	mul.w	r8, ip, r7
     1d6:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1da:	4598      	cmp	r8, r3
     1dc:	d962      	bls.n	2a4 <CONFIG_FLASH_SIZE+0xa4>
     1de:	18eb      	adds	r3, r5, r3
     1e0:	f10c 30ff 	add.w	r0, ip, #4294967295
     1e4:	d204      	bcs.n	1f0 <__data_size+0x70>
     1e6:	4598      	cmp	r8, r3
     1e8:	d902      	bls.n	1f0 <__data_size+0x70>
     1ea:	f1ac 0002 	sub.w	r0, ip, #2
     1ee:	442b      	add	r3, r5
     1f0:	eba3 0308 	sub.w	r3, r3, r8
     1f4:	b2a4      	uxth	r4, r4
     1f6:	fbb3 fcfe 	udiv	ip, r3, lr
     1fa:	fb0e 331c 	mls	r3, lr, ip, r3
     1fe:	fb0c f707 	mul.w	r7, ip, r7
     202:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     206:	42a7      	cmp	r7, r4
     208:	d94e      	bls.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     20a:	192c      	adds	r4, r5, r4
     20c:	f10c 33ff 	add.w	r3, ip, #4294967295
     210:	d204      	bcs.n	21c <CONFIG_FLASH_SIZE+0x1c>
     212:	42a7      	cmp	r7, r4
     214:	d902      	bls.n	21c <CONFIG_FLASH_SIZE+0x1c>
     216:	f1ac 0302 	sub.w	r3, ip, #2
     21a:	442c      	add	r4, r5
     21c:	1be4      	subs	r4, r4, r7
     21e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     222:	e7c0      	b.n	1a6 <__data_size+0x26>
     224:	f1c2 0320 	rsb	r3, r2, #32
     228:	fa20 f103 	lsr.w	r1, r0, r3
     22c:	4095      	lsls	r5, r2
     22e:	4090      	lsls	r0, r2
     230:	fa2e f303 	lsr.w	r3, lr, r3
     234:	4303      	orrs	r3, r0
     236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23a:	b2af      	uxth	r7, r5
     23c:	fbb1 fcfe 	udiv	ip, r1, lr
     240:	fb0e 101c 	mls	r0, lr, ip, r1
     244:	0c19      	lsrs	r1, r3, #16
     246:	fb0c f807 	mul.w	r8, ip, r7
     24a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     24e:	4588      	cmp	r8, r1
     250:	fa04 f402 	lsl.w	r4, r4, r2
     254:	d922      	bls.n	29c <CONFIG_FLASH_SIZE+0x9c>
     256:	1869      	adds	r1, r5, r1
     258:	f10c 30ff 	add.w	r0, ip, #4294967295
     25c:	d204      	bcs.n	268 <CONFIG_FLASH_SIZE+0x68>
     25e:	4588      	cmp	r8, r1
     260:	d902      	bls.n	268 <CONFIG_FLASH_SIZE+0x68>
     262:	f1ac 0002 	sub.w	r0, ip, #2
     266:	4429      	add	r1, r5
     268:	eba1 0108 	sub.w	r1, r1, r8
     26c:	b29b      	uxth	r3, r3
     26e:	fbb1 fcfe 	udiv	ip, r1, lr
     272:	fb0e 111c 	mls	r1, lr, ip, r1
     276:	fb0c f707 	mul.w	r7, ip, r7
     27a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     27e:	429f      	cmp	r7, r3
     280:	d90e      	bls.n	2a0 <CONFIG_FLASH_SIZE+0xa0>
     282:	18eb      	adds	r3, r5, r3
     284:	f10c 31ff 	add.w	r1, ip, #4294967295
     288:	d204      	bcs.n	294 <CONFIG_FLASH_SIZE+0x94>
     28a:	429f      	cmp	r7, r3
     28c:	d902      	bls.n	294 <CONFIG_FLASH_SIZE+0x94>
     28e:	f1ac 0102 	sub.w	r1, ip, #2
     292:	442b      	add	r3, r5
     294:	1bdb      	subs	r3, r3, r7
     296:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     29a:	e792      	b.n	1c2 <__data_size+0x42>
     29c:	4660      	mov	r0, ip
     29e:	e7e3      	b.n	268 <CONFIG_FLASH_SIZE+0x68>
     2a0:	4661      	mov	r1, ip
     2a2:	e7f7      	b.n	294 <CONFIG_FLASH_SIZE+0x94>
     2a4:	4660      	mov	r0, ip
     2a6:	e7a3      	b.n	1f0 <__data_size+0x70>
     2a8:	4663      	mov	r3, ip
     2aa:	e7b7      	b.n	21c <CONFIG_FLASH_SIZE+0x1c>
     2ac:	4283      	cmp	r3, r0
     2ae:	d906      	bls.n	2be <CONFIG_FLASH_SIZE+0xbe>
     2b0:	b916      	cbnz	r6, 2b8 <CONFIG_FLASH_SIZE+0xb8>
     2b2:	2100      	movs	r1, #0
     2b4:	4608      	mov	r0, r1
     2b6:	e77b      	b.n	1b0 <__data_size+0x30>
     2b8:	e9c6 e000 	strd	lr, r0, [r6]
     2bc:	e7f9      	b.n	2b2 <CONFIG_FLASH_SIZE+0xb2>
     2be:	fab3 f783 	clz	r7, r3
     2c2:	b98f      	cbnz	r7, 2e8 <CONFIG_FLASH_SIZE+0xe8>
     2c4:	4283      	cmp	r3, r0
     2c6:	d301      	bcc.n	2cc <CONFIG_FLASH_SIZE+0xcc>
     2c8:	4572      	cmp	r2, lr
     2ca:	d808      	bhi.n	2de <CONFIG_FLASH_SIZE+0xde>
     2cc:	ebbe 0402 	subs.w	r4, lr, r2
     2d0:	eb60 0303 	sbc.w	r3, r0, r3
     2d4:	2001      	movs	r0, #1
     2d6:	469c      	mov	ip, r3
     2d8:	b91e      	cbnz	r6, 2e2 <CONFIG_FLASH_SIZE+0xe2>
     2da:	2100      	movs	r1, #0
     2dc:	e768      	b.n	1b0 <__data_size+0x30>
     2de:	4638      	mov	r0, r7
     2e0:	e7fa      	b.n	2d8 <CONFIG_FLASH_SIZE+0xd8>
     2e2:	e9c6 4c00 	strd	r4, ip, [r6]
     2e6:	e7f8      	b.n	2da <CONFIG_FLASH_SIZE+0xda>
     2e8:	f1c7 0c20 	rsb	ip, r7, #32
     2ec:	40bb      	lsls	r3, r7
     2ee:	fa22 f40c 	lsr.w	r4, r2, ip
     2f2:	431c      	orrs	r4, r3
     2f4:	fa2e f10c 	lsr.w	r1, lr, ip
     2f8:	fa20 f30c 	lsr.w	r3, r0, ip
     2fc:	40b8      	lsls	r0, r7
     2fe:	4301      	orrs	r1, r0
     300:	ea4f 4914 	mov.w	r9, r4, lsr #16
     304:	fa0e f507 	lsl.w	r5, lr, r7
     308:	fbb3 f8f9 	udiv	r8, r3, r9
     30c:	fa1f fe84 	uxth.w	lr, r4
     310:	fb09 3018 	mls	r0, r9, r8, r3
     314:	0c0b      	lsrs	r3, r1, #16
     316:	fb08 fa0e 	mul.w	sl, r8, lr
     31a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     31e:	459a      	cmp	sl, r3
     320:	fa02 f207 	lsl.w	r2, r2, r7
     324:	d940      	bls.n	3a8 <CONFIG_FLASH_SIZE+0x1a8>
     326:	18e3      	adds	r3, r4, r3
     328:	f108 30ff 	add.w	r0, r8, #4294967295
     32c:	d204      	bcs.n	338 <CONFIG_FLASH_SIZE+0x138>
     32e:	459a      	cmp	sl, r3
     330:	d902      	bls.n	338 <CONFIG_FLASH_SIZE+0x138>
     332:	f1a8 0002 	sub.w	r0, r8, #2
     336:	4423      	add	r3, r4
     338:	eba3 030a 	sub.w	r3, r3, sl
     33c:	b289      	uxth	r1, r1
     33e:	fbb3 f8f9 	udiv	r8, r3, r9
     342:	fb09 3318 	mls	r3, r9, r8, r3
     346:	fb08 fe0e 	mul.w	lr, r8, lr
     34a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     34e:	458e      	cmp	lr, r1
     350:	d92c      	bls.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
     352:	1861      	adds	r1, r4, r1
     354:	f108 33ff 	add.w	r3, r8, #4294967295
     358:	d204      	bcs.n	364 <CONFIG_FLASH_SIZE+0x164>
     35a:	458e      	cmp	lr, r1
     35c:	d902      	bls.n	364 <CONFIG_FLASH_SIZE+0x164>
     35e:	f1a8 0302 	sub.w	r3, r8, #2
     362:	4421      	add	r1, r4
     364:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     368:	fba0 9802 	umull	r9, r8, r0, r2
     36c:	eba1 010e 	sub.w	r1, r1, lr
     370:	4541      	cmp	r1, r8
     372:	46ce      	mov	lr, r9
     374:	4643      	mov	r3, r8
     376:	d302      	bcc.n	37e <CONFIG_FLASH_SIZE+0x17e>
     378:	d106      	bne.n	388 <CONFIG_FLASH_SIZE+0x188>
     37a:	454d      	cmp	r5, r9
     37c:	d204      	bcs.n	388 <CONFIG_FLASH_SIZE+0x188>
     37e:	ebb9 0e02 	subs.w	lr, r9, r2
     382:	eb68 0304 	sbc.w	r3, r8, r4
     386:	3801      	subs	r0, #1
     388:	2e00      	cmp	r6, #0
     38a:	d0a6      	beq.n	2da <CONFIG_FLASH_SIZE+0xda>
     38c:	ebb5 020e 	subs.w	r2, r5, lr
     390:	eb61 0103 	sbc.w	r1, r1, r3
     394:	fa01 fc0c 	lsl.w	ip, r1, ip
     398:	fa22 f307 	lsr.w	r3, r2, r7
     39c:	ea4c 0303 	orr.w	r3, ip, r3
     3a0:	40f9      	lsrs	r1, r7
     3a2:	e9c6 3100 	strd	r3, r1, [r6]
     3a6:	e798      	b.n	2da <CONFIG_FLASH_SIZE+0xda>
     3a8:	4640      	mov	r0, r8
     3aa:	e7c5      	b.n	338 <CONFIG_FLASH_SIZE+0x138>
     3ac:	4643      	mov	r3, r8
     3ae:	e7d9      	b.n	364 <CONFIG_FLASH_SIZE+0x164>

000003b0 <tag_loop>:
    
    return 0;
}

int tag_loop()
{   
     3b0:	b508      	push	{r3, lr}
    int ret;
    ret = uwb_listen();
     3b2:	f006 fd08 	bl	6dc6 <uwb_listen>
    if (ret != UWB_SUCCESS)
     3b6:	b950      	cbnz	r0, 3ce <tag_loop+0x1e>
    {
        printk("Failed to start uwb listen\n");
        return -1;
    }
    printk("Listening...\n");
     3b8:	4808      	ldr	r0, [pc, #32]	; (3dc <tag_loop+0x2c>)
     3ba:	f006 fd43 	bl	6e44 <printk>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     3be:	2100      	movs	r1, #0
     3c0:	f44f 70a4 	mov.w	r0, #328	; 0x148
     3c4:	f006 f8fe 	bl	65c4 <z_impl_k_sleep>
    while (1)
    {
        k_msleep(10);
        dwt_isr();
     3c8:	f000 f982 	bl	6d0 <dwt_isr>
    while (1)
     3cc:	e7f7      	b.n	3be <tag_loop+0xe>
        printk("Failed to start uwb listen\n");
     3ce:	4804      	ldr	r0, [pc, #16]	; (3e0 <tag_loop+0x30>)
     3d0:	f006 fd38 	bl	6e44 <printk>
    }

    return 0;
}
     3d4:	f04f 30ff 	mov.w	r0, #4294967295
     3d8:	bd08      	pop	{r3, pc}
     3da:	bf00      	nop
     3dc:	0000828a 	.word	0x0000828a
     3e0:	0000826e 	.word	0x0000826e

000003e4 <main>:
{
     3e4:	b508      	push	{r3, lr}
    int ret = uwb_init();
     3e6:	f000 fc59 	bl	c9c <uwb_init>
    if (ret != UWB_SUCCESS)
     3ea:	4601      	mov	r1, r0
     3ec:	b930      	cbnz	r0, 3fc <main+0x18>
    printk("Initialized uwb\n");
     3ee:	4806      	ldr	r0, [pc, #24]	; (408 <CONFIG_MAIN_STACK_SIZE+0x8>)
     3f0:	f006 fd28 	bl	6e44 <printk>
}
     3f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return tag_loop();
     3f8:	f7ff bfda 	b.w	3b0 <tag_loop>
        printk("Failed to initialize uwb: %d\n", ret);
     3fc:	4803      	ldr	r0, [pc, #12]	; (40c <CONFIG_MAIN_STACK_SIZE+0xc>)
     3fe:	f006 fd21 	bl	6e44 <printk>
}
     402:	f04f 30ff 	mov.w	r0, #4294967295
     406:	bd08      	pop	{r3, pc}
     408:	000082b6 	.word	0x000082b6
     40c:	00008298 	.word	0x00008298

00000410 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
     410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8 nsSfd_result  = 0;
    uint8 useDWnsSFD = 0;
    uint8 chan = config->chan ;
     414:	7806      	ldrb	r6, [r0, #0]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
    uint8 prfIndex = config->prf - DWT_PRF_16M;
     416:	7847      	ldrb	r7, [r0, #1]
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
     418:	7942      	ldrb	r2, [r0, #5]
     41a:	4b73      	ldr	r3, [pc, #460]	; (5e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x100>)
    uint8 prfIndex = config->prf - DWT_PRF_16M;
     41c:	3f01      	subs	r7, #1
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
     41e:	2e04      	cmp	r6, #4
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
     420:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
{
     424:	4604      	mov	r4, r0
    uint8 prfIndex = config->prf - DWT_PRF_16M;
     426:	b2ff      	uxtb	r7, r7
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
     428:	f000 80c0 	beq.w	5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>
     42c:	1ff3      	subs	r3, r6, #7
     42e:	f1d3 0900 	rsbs	r9, r3, #0
     432:	eb49 0903 	adc.w	r9, r9, r3
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
     436:	4d6d      	ldr	r5, [pc, #436]	; (5ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x104>)
    if(DWT_BR_110K == config->dataRate)
     438:	79e3      	ldrb	r3, [r4, #7]
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
     43a:	6829      	ldr	r1, [r5, #0]
     43c:	690a      	ldr	r2, [r1, #16]
    if(DWT_BR_110K == config->dataRate)
     43e:	2b00      	cmp	r3, #0
     440:	f040 80b7 	bne.w	5b2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xca>
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
     444:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
     448:	ea4f 08d8 	mov.w	r8, r8, lsr #3
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
     44c:	610a      	str	r2, [r1, #16]
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
    }

    pdw1000local->longFrames = config->phrMode ;
     44e:	7a23      	ldrb	r3, [r4, #8]
     450:	728b      	strb	r3, [r1, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
     452:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
     456:	610a      	str	r2, [r1, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
     458:	7a23      	ldrb	r3, [r4, #8]
     45a:	041b      	lsls	r3, r3, #16
     45c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
     460:	431a      	orrs	r2, r3
     462:	610a      	str	r2, [r1, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
     464:	2004      	movs	r0, #4
     466:	2100      	movs	r1, #0
     468:	f006 fb20 	bl	6aac <dwt_write32bitoffsetreg>

    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
     46c:	4642      	mov	r2, r8
     46e:	f642 0104 	movw	r1, #10244	; 0x2804
     472:	202e      	movs	r0, #46	; 0x2e
     474:	f006 fb03 	bl	6a7e <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
     478:	4638      	mov	r0, r7
     47a:	f006 fb45 	bl	6b08 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
     47e:	4b5c      	ldr	r3, [pc, #368]	; (5f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x108>)
     480:	f813 8006 	ldrb.w	r8, [r3, r6]
     484:	4b5b      	ldr	r3, [pc, #364]	; (5f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10c>)
     486:	2107      	movs	r1, #7
     488:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
     48c:	202b      	movs	r0, #43	; 0x2b
     48e:	f006 fb0d 	bl	6aac <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
     492:	4b59      	ldr	r3, [pc, #356]	; (5f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x110>)
     494:	210b      	movs	r1, #11
     496:	f813 2008 	ldrb.w	r2, [r3, r8]
     49a:	202b      	movs	r0, #43	; 0x2b
     49c:	f006 fae2 	bl	6a64 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
     4a0:	4b56      	ldr	r3, [pc, #344]	; (5fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x114>)
     4a2:	210b      	movs	r1, #11
     4a4:	f813 2009 	ldrb.w	r2, [r3, r9]
     4a8:	2028      	movs	r0, #40	; 0x28
     4aa:	f006 fadb 	bl	6a64 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
     4ae:	4b54      	ldr	r3, [pc, #336]	; (600 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x118>)
     4b0:	210c      	movs	r1, #12
     4b2:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
     4b6:	2028      	movs	r0, #40	; 0x28
     4b8:	f006 faf8 	bl	6aac <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
     4bc:	79e2      	ldrb	r2, [r4, #7]
     4be:	79a3      	ldrb	r3, [r4, #6]
     4c0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
     4c4:	4a4f      	ldr	r2, [pc, #316]	; (604 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11c>)
     4c6:	2102      	movs	r1, #2
     4c8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
     4cc:	2027      	movs	r0, #39	; 0x27
     4ce:	f006 fad6 	bl	6a7e <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
     4d2:	4b4d      	ldr	r3, [pc, #308]	; (608 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x120>)
     4d4:	2104      	movs	r1, #4
     4d6:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
     4da:	2027      	movs	r0, #39	; 0x27
     4dc:	f006 facf 	bl	6a7e <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
     4e0:	79e3      	ldrb	r3, [r4, #7]
     4e2:	2b00      	cmp	r3, #0
     4e4:	d168      	bne.n	5b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd0>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
     4e6:	2264      	movs	r2, #100	; 0x64
     4e8:	2106      	movs	r1, #6
     4ea:	2027      	movs	r0, #39	; 0x27
     4ec:	f006 fac7 	bl	6a7e <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
     4f0:	78e3      	ldrb	r3, [r4, #3]
     4f2:	4a46      	ldr	r2, [pc, #280]	; (60c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x124>)
     4f4:	eb03 0387 	add.w	r3, r3, r7, lsl #2
     4f8:	2108      	movs	r1, #8
     4fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     4fe:	2027      	movs	r0, #39	; 0x27
     500:	f006 fad4 	bl	6aac <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
     504:	8963      	ldrh	r3, [r4, #10]
     506:	b913      	cbnz	r3, 50e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
     508:	f241 0341 	movw	r3, #4161	; 0x1041
     50c:	8163      	strh	r3, [r4, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
     50e:	f8df 8100 	ldr.w	r8, [pc, #256]	; 610 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x128>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
     512:	8962      	ldrh	r2, [r4, #10]
     514:	2120      	movs	r1, #32
     516:	2027      	movs	r0, #39	; 0x27
     518:	f006 fab1 	bl	6a7e <dwt_write16bitoffsetreg>
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
     51c:	f8d8 2000 	ldr.w	r2, [r8]
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
     520:	eb08 0847 	add.w	r8, r8, r7, lsl #1
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
     524:	210c      	movs	r1, #12
     526:	2023      	movs	r0, #35	; 0x23
     528:	f006 fac0 	bl	6aac <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
     52c:	2023      	movs	r0, #35	; 0x23
     52e:	f8b8 2004 	ldrh.w	r2, [r8, #4]
     532:	2104      	movs	r1, #4
     534:	f006 faa3 	bl	6a7e <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
     538:	79a0      	ldrb	r0, [r4, #6]
     53a:	2800      	cmp	r0, #0
     53c:	d051      	beq.n	5e2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xfa>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
     53e:	79e3      	ldrb	r3, [r4, #7]
     540:	4a34      	ldr	r2, [pc, #208]	; (614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>)
     542:	2021      	movs	r0, #33	; 0x21
     544:	5cd2      	ldrb	r2, [r2, r3]
     546:	2100      	movs	r1, #0
     548:	f006 fa8c 	bl	6a64 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
        useDWnsSFD = 1 ;
     54c:	2201      	movs	r2, #1
        nsSfd_result = 3 ;
     54e:	2003      	movs	r0, #3
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
     550:	7961      	ldrb	r1, [r4, #5]
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
     552:	f006 030f 	and.w	r3, r6, #15
     556:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
     55a:	7861      	ldrb	r1, [r4, #1]
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
     55c:	0136      	lsls	r6, r6, #4
     55e:	b2f6      	uxtb	r6, r6
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
     560:	0489      	lsls	r1, r1, #18
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
     562:	4333      	orrs	r3, r6
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
     564:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
     568:	430b      	orrs	r3, r1
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
     56a:	7921      	ldrb	r1, [r4, #4]
     56c:	0589      	lsls	r1, r1, #22
     56e:	f001 61f8 	and.w	r1, r1, #130023424	; 0x7c00000
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
     572:	430b      	orrs	r3, r1
     574:	ea43 5300 	orr.w	r3, r3, r0, lsl #20

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
     578:	ea43 4242 	orr.w	r2, r3, r2, lsl #17
     57c:	2100      	movs	r1, #0
     57e:	201f      	movs	r0, #31
     580:	f006 fa94 	bl	6aac <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
     584:	7862      	ldrb	r2, [r4, #1]
     586:	78a3      	ldrb	r3, [r4, #2]
     588:	4313      	orrs	r3, r2
     58a:	79e2      	ldrb	r2, [r4, #7]
     58c:	0352      	lsls	r2, r2, #13
     58e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
     592:	682b      	ldr	r3, [r5, #0]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
     594:	2100      	movs	r1, #0
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
     596:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
     598:	2008      	movs	r0, #8
     59a:	f006 fa87 	bl	6aac <dwt_write32bitoffsetreg>
    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
} // end dwt_configure()
     59e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
     5a2:	2242      	movs	r2, #66	; 0x42
     5a4:	2100      	movs	r1, #0
     5a6:	200d      	movs	r0, #13
     5a8:	f006 ba5c 	b.w	6a64 <dwt_write8bitoffsetreg>
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
     5ac:	f04f 0901 	mov.w	r9, #1
     5b0:	e741      	b.n	436 <dwt_configure+0x26>
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
     5b2:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
     5b6:	e749      	b.n	44c <dwt_configure+0x3c>
        if(config->txPreambLength == DWT_PLEN_64)
     5b8:	78a3      	ldrb	r3, [r4, #2]
     5ba:	2b04      	cmp	r3, #4
     5bc:	d10a      	bne.n	5d4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xec>
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
     5be:	2210      	movs	r2, #16
     5c0:	2106      	movs	r1, #6
     5c2:	2027      	movs	r0, #39	; 0x27
     5c4:	f006 fa5b 	bl	6a7e <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
     5c8:	2210      	movs	r2, #16
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
     5ca:	2126      	movs	r1, #38	; 0x26
     5cc:	2027      	movs	r0, #39	; 0x27
     5ce:	f006 fa49 	bl	6a64 <dwt_write8bitoffsetreg>
     5d2:	e78d      	b.n	4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
     5d4:	2220      	movs	r2, #32
     5d6:	2106      	movs	r1, #6
     5d8:	2027      	movs	r0, #39	; 0x27
     5da:	f006 fa50 	bl	6a7e <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
     5de:	2228      	movs	r2, #40	; 0x28
     5e0:	e7f3      	b.n	5ca <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe2>
    uint8 useDWnsSFD = 0;
     5e2:	4602      	mov	r2, r0
     5e4:	e7b4      	b.n	550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>
     5e6:	bf00      	nop
     5e8:	0000822c 	.word	0x0000822c
     5ec:	20000000 	.word	0x20000000
     5f0:	000082ef 	.word	0x000082ef
     5f4:	00007f80 	.word	0x00007f80
     5f8:	000082e9 	.word	0x000082e9
     5fc:	000082e7 	.word	0x000082e7
     600:	00007f98 	.word	0x00007f98
     604:	00008262 	.word	0x00008262
     608:	0000825e 	.word	0x0000825e
     60c:	00007f58 	.word	0x00007f58
     610:	00007f78 	.word	0x00007f78
     614:	000082e4 	.word	0x000082e4

00000618 <dwt_setcallbacks>:
 * output parameters
 *
 * no return value
 */
void dwt_setcallbacks(dwt_cb_t cbTxDone, dwt_cb_t cbRxOk, dwt_cb_t cbRxTo, dwt_cb_t cbRxErr)
{
     618:	b510      	push	{r4, lr}
    pdw1000local->cbTxDone = cbTxDone;
     61a:	4c03      	ldr	r4, [pc, #12]	; (628 <dwt_setcallbacks+0x10>)
     61c:	6824      	ldr	r4, [r4, #0]
    pdw1000local->cbRxOk = cbRxOk;
     61e:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
    pdw1000local->cbRxTo = cbRxTo;
    pdw1000local->cbRxErr = cbRxErr;
     622:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
}
     626:	bd10      	pop	{r4, pc}
     628:	20000000 	.word	0x20000000

0000062c <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
     62c:	b538      	push	{r3, r4, r5, lr}
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
     62e:	2100      	movs	r1, #0
     630:	200e      	movs	r0, #14
     632:	f006 f9e9 	bl	6a08 <dwt_read32bitoffsetreg>
     636:	4605      	mov	r5, r0

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
     638:	f006 fb6a 	bl	6d10 <decamutexon>

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
     63c:	2200      	movs	r2, #0
     63e:	4611      	mov	r1, r2
    stat = decamutexon() ;
     640:	4604      	mov	r4, r0
    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
     642:	200e      	movs	r0, #14
     644:	f006 fa32 	bl	6aac <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
     648:	2240      	movs	r2, #64	; 0x40
     64a:	2100      	movs	r1, #0
     64c:	200d      	movs	r0, #13
     64e:	f006 fa09 	bl	6a64 <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
     652:	4a0a      	ldr	r2, [pc, #40]	; (67c <dwt_forcetrxoff+0x50>)
     654:	2100      	movs	r1, #0
     656:	200f      	movs	r0, #15
     658:	f006 fa28 	bl	6aac <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
     65c:	f006 faec 	bl	6c38 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
     660:	462a      	mov	r2, r5
     662:	2100      	movs	r1, #0
     664:	200e      	movs	r0, #14
     666:	f006 fa21 	bl	6aac <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
     66a:	4620      	mov	r0, r4
     66c:	f006 fb52 	bl	6d14 <decamutexoff>
    pdw1000local->wait4resp = 0;
     670:	4b03      	ldr	r3, [pc, #12]	; (680 <dwt_forcetrxoff+0x54>)
     672:	681b      	ldr	r3, [r3, #0]
     674:	2200      	movs	r2, #0
     676:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
     678:	bd38      	pop	{r3, r4, r5, pc}
     67a:	bf00      	nop
     67c:	2427fff8 	.word	0x2427fff8
     680:	20000000 	.word	0x20000000

00000684 <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
     684:	b570      	push	{r4, r5, r6, lr}
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
     686:	2103      	movs	r1, #3
{
     688:	4605      	mov	r5, r0
    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
     68a:	2004      	movs	r0, #4
     68c:	f006 f9dd 	bl	6a4a <dwt_read8bitoffsetreg>
     690:	4e0e      	ldr	r6, [pc, #56]	; (6cc <dwt_setrxtimeout+0x48>)
     692:	4604      	mov	r4, r0

    if(time > 0)
     694:	b195      	cbz	r5, 6bc <dwt_setrxtimeout+0x38>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
     696:	462a      	mov	r2, r5
     698:	2100      	movs	r1, #0
     69a:	200c      	movs	r0, #12
     69c:	f006 f9ef 	bl	6a7e <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
     6a0:	6832      	ldr	r2, [r6, #0]
     6a2:	6913      	ldr	r3, [r2, #16]
     6a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     6a8:	6113      	str	r3, [r2, #16]
        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
     6aa:	f044 0210 	orr.w	r2, r4, #16

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
     6ae:	b2d2      	uxtb	r2, r2
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
     6b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
     6b4:	2103      	movs	r1, #3
     6b6:	2004      	movs	r0, #4
     6b8:	f006 b9d4 	b.w	6a64 <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
     6bc:	6832      	ldr	r2, [r6, #0]
     6be:	6913      	ldr	r3, [r2, #16]
     6c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     6c4:	6113      	str	r3, [r2, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
     6c6:	f000 02ef 	and.w	r2, r0, #239	; 0xef
     6ca:	e7f1      	b.n	6b0 <dwt_setrxtimeout+0x2c>
     6cc:	20000000 	.word	0x20000000

000006d0 <dwt_isr>:
{
     6d0:	b570      	push	{r4, r5, r6, lr}
    uint32 status = pdw1000local->cbData.status = dwt_read32bitreg(SYS_STATUS_ID); // Read status register low 32bits
     6d2:	4c47      	ldr	r4, [pc, #284]	; (7f0 <dwt_isr+0x120>)
     6d4:	2100      	movs	r1, #0
     6d6:	200f      	movs	r0, #15
     6d8:	6826      	ldr	r6, [r4, #0]
     6da:	f006 f995 	bl	6a08 <dwt_read32bitoffsetreg>
     6de:	61f0      	str	r0, [r6, #28]
    if(status & SYS_STATUS_RXFCG)
     6e0:	0446      	lsls	r6, r0, #17
    uint32 status = pdw1000local->cbData.status = dwt_read32bitreg(SYS_STATUS_ID); // Read status register low 32bits
     6e2:	4605      	mov	r5, r0
    if(status & SYS_STATUS_RXFCG)
     6e4:	d541      	bpl.n	76a <dwt_isr+0x9a>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_GOOD); // Clear all receive status bits
     6e6:	f44f 42de 	mov.w	r2, #28416	; 0x6f00
     6ea:	2100      	movs	r1, #0
     6ec:	200f      	movs	r0, #15
     6ee:	f006 f9dd 	bl	6aac <dwt_write32bitoffsetreg>
        pdw1000local->cbData.rx_flags = 0;
     6f2:	6823      	ldr	r3, [r4, #0]
     6f4:	2100      	movs	r1, #0
     6f6:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
        finfo16 = dwt_read16bitoffsetreg(RX_FINFO_ID, RX_FINFO_OFFSET);
     6fa:	2010      	movs	r0, #16
     6fc:	f006 f999 	bl	6a32 <dwt_read16bitoffsetreg>
        if(pdw1000local->longFrames == 0)
     700:	6823      	ldr	r3, [r4, #0]
     702:	7a9a      	ldrb	r2, [r3, #10]
     704:	2a00      	cmp	r2, #0
     706:	d06f      	beq.n	7e8 <dwt_isr+0x118>
        len = finfo16 & RX_FINFO_RXFL_MASK_1023;
     708:	f3c0 0209 	ubfx	r2, r0, #0, #10
        if(finfo16 & RX_FINFO_RNG)
     70c:	0400      	lsls	r0, r0, #16
        pdw1000local->cbData.datalength = len;
     70e:	841a      	strh	r2, [r3, #32]
            pdw1000local->cbData.rx_flags |= DWT_CB_DATA_RX_FLAG_RNG;
     710:	bf42      	ittt	mi
     712:	f893 2024 	ldrbmi.w	r2, [r3, #36]	; 0x24
     716:	f042 0201 	orrmi.w	r2, r2, #1
     71a:	f883 2024 	strbmi.w	r2, [r3, #36]	; 0x24
        dwt_readfromdevice(RX_BUFFER_ID, 0, FCTRL_LEN_MAX, pdw1000local->cbData.fctrl);
     71e:	2100      	movs	r1, #0
     720:	3322      	adds	r3, #34	; 0x22
     722:	2202      	movs	r2, #2
     724:	2011      	movs	r0, #17
     726:	f006 f94f 	bl	69c8 <dwt_readfromdevice>
        if((status & SYS_STATUS_AAT) && ((pdw1000local->cbData.fctrl[0] & FCTRL_ACK_REQ_MASK) == 0))
     72a:	0729      	lsls	r1, r5, #28
     72c:	d510      	bpl.n	750 <dwt_isr+0x80>
     72e:	6823      	ldr	r3, [r4, #0]
     730:	f893 6022 	ldrb.w	r6, [r3, #34]	; 0x22
     734:	f016 0620 	ands.w	r6, r6, #32
     738:	d10a      	bne.n	750 <dwt_isr+0x80>
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_AAT); // Clear AAT status bit in register
     73a:	2208      	movs	r2, #8
     73c:	4631      	mov	r1, r6
     73e:	200f      	movs	r0, #15
     740:	f006 f9b4 	bl	6aac <dwt_write32bitoffsetreg>
            pdw1000local->cbData.status &= ~SYS_STATUS_AAT; // Clear AAT status bit in callback data register copy
     744:	6823      	ldr	r3, [r4, #0]
     746:	69da      	ldr	r2, [r3, #28]
            pdw1000local->wait4resp = 0;
     748:	755e      	strb	r6, [r3, #21]
            pdw1000local->cbData.status &= ~SYS_STATUS_AAT; // Clear AAT status bit in callback data register copy
     74a:	f022 0208 	bic.w	r2, r2, #8
     74e:	61da      	str	r2, [r3, #28]
        if(pdw1000local->cbRxOk != NULL)
     750:	6820      	ldr	r0, [r4, #0]
     752:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     754:	b10b      	cbz	r3, 75a <dwt_isr+0x8a>
            pdw1000local->cbRxOk(&pdw1000local->cbData);
     756:	301c      	adds	r0, #28
     758:	4798      	blx	r3
        if (pdw1000local->dblbuffon)
     75a:	6823      	ldr	r3, [r4, #0]
     75c:	7d1b      	ldrb	r3, [r3, #20]
     75e:	b123      	cbz	r3, 76a <dwt_isr+0x9a>
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 1);
     760:	2201      	movs	r2, #1
     762:	2103      	movs	r1, #3
     764:	200d      	movs	r0, #13
     766:	f006 f97d 	bl	6a64 <dwt_write8bitoffsetreg>
    if(status & SYS_STATUS_TXFRS)
     76a:	062a      	lsls	r2, r5, #24
     76c:	d512      	bpl.n	794 <dwt_isr+0xc4>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_TX); // Clear TX event bits
     76e:	22f8      	movs	r2, #248	; 0xf8
     770:	2100      	movs	r1, #0
     772:	200f      	movs	r0, #15
     774:	f006 f99a 	bl	6aac <dwt_write32bitoffsetreg>
        if((status & SYS_STATUS_AAT) && pdw1000local->wait4resp)
     778:	072b      	lsls	r3, r5, #28
     77a:	d506      	bpl.n	78a <dwt_isr+0xba>
     77c:	6823      	ldr	r3, [r4, #0]
     77e:	7d5b      	ldrb	r3, [r3, #21]
     780:	b11b      	cbz	r3, 78a <dwt_isr+0xba>
            dwt_forcetrxoff(); // Turn the RX off
     782:	f7ff ff53 	bl	62c <dwt_forcetrxoff>
            dwt_rxreset(); // Reset in case we were late and a frame was already being received
     786:	f006 faae 	bl	6ce6 <dwt_rxreset>
        if(pdw1000local->cbTxDone != NULL)
     78a:	6820      	ldr	r0, [r4, #0]
     78c:	6a83      	ldr	r3, [r0, #40]	; 0x28
     78e:	b10b      	cbz	r3, 794 <dwt_isr+0xc4>
            pdw1000local->cbTxDone(&pdw1000local->cbData);
     790:	301c      	adds	r0, #28
     792:	4798      	blx	r3
    if(status & SYS_STATUS_ALL_RX_TO)
     794:	f415 1f08 	tst.w	r5, #2228224	; 0x220000
     798:	d011      	beq.n	7be <dwt_isr+0xee>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXRFTO); // Clear RX timeout event bits
     79a:	200f      	movs	r0, #15
     79c:	2100      	movs	r1, #0
     79e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     7a2:	f006 f983 	bl	6aac <dwt_write32bitoffsetreg>
        pdw1000local->wait4resp = 0;
     7a6:	6823      	ldr	r3, [r4, #0]
     7a8:	2200      	movs	r2, #0
     7aa:	755a      	strb	r2, [r3, #21]
        dwt_forcetrxoff();
     7ac:	f7ff ff3e 	bl	62c <dwt_forcetrxoff>
        dwt_rxreset();
     7b0:	f006 fa99 	bl	6ce6 <dwt_rxreset>
        if(pdw1000local->cbRxTo != NULL)
     7b4:	6820      	ldr	r0, [r4, #0]
     7b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
     7b8:	b10b      	cbz	r3, 7be <dwt_isr+0xee>
            pdw1000local->cbRxTo(&pdw1000local->cbData);
     7ba:	301c      	adds	r0, #28
     7bc:	4798      	blx	r3
    if(status & SYS_STATUS_ALL_RX_ERR)
     7be:	4a0d      	ldr	r2, [pc, #52]	; (7f4 <dwt_isr+0x124>)
     7c0:	4215      	tst	r5, r2
     7c2:	d014      	beq.n	7ee <dwt_isr+0x11e>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR); // Clear RX error event bits
     7c4:	200f      	movs	r0, #15
     7c6:	2100      	movs	r1, #0
     7c8:	f006 f970 	bl	6aac <dwt_write32bitoffsetreg>
        pdw1000local->wait4resp = 0;
     7cc:	6823      	ldr	r3, [r4, #0]
     7ce:	2200      	movs	r2, #0
     7d0:	755a      	strb	r2, [r3, #21]
        dwt_forcetrxoff();
     7d2:	f7ff ff2b 	bl	62c <dwt_forcetrxoff>
        dwt_rxreset();
     7d6:	f006 fa86 	bl	6ce6 <dwt_rxreset>
        if(pdw1000local->cbRxErr != NULL)
     7da:	6820      	ldr	r0, [r4, #0]
     7dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
     7de:	b133      	cbz	r3, 7ee <dwt_isr+0x11e>
}
     7e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            pdw1000local->cbRxErr(&pdw1000local->cbData);
     7e4:	301c      	adds	r0, #28
     7e6:	4718      	bx	r3
            len &= RX_FINFO_RXFLEN_MASK;
     7e8:	f000 027f 	and.w	r2, r0, #127	; 0x7f
     7ec:	e78e      	b.n	70c <dwt_isr+0x3c>
}
     7ee:	bd70      	pop	{r4, r5, r6, pc}
     7f0:	20000000 	.word	0x20000000
     7f4:	24059000 	.word	0x24059000

000007f8 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
     7f8:	b508      	push	{r3, lr}
    _dwt_disablesequencing();
     7fa:	f006 fa12 	bl	6c22 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
     7fe:	2200      	movs	r2, #0
     800:	4611      	mov	r1, r2
     802:	202c      	movs	r0, #44	; 0x2c
     804:	f006 f93b 	bl	6a7e <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
     808:	2200      	movs	r2, #0
     80a:	2106      	movs	r1, #6
     80c:	202c      	movs	r0, #44	; 0x2c
     80e:	f006 f929 	bl	6a64 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
     812:	f006 f96c 	bl	6aee <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
     816:	2200      	movs	r2, #0
     818:	2103      	movs	r1, #3
     81a:	2036      	movs	r0, #54	; 0x36
     81c:	f006 f922 	bl	6a64 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
     820:	2001      	movs	r0, #1
     822:	f006 fa78 	bl	6d16 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
     826:	22f0      	movs	r2, #240	; 0xf0
     828:	2103      	movs	r1, #3
     82a:	2036      	movs	r0, #54	; 0x36
     82c:	f006 f91a 	bl	6a64 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
     830:	4b02      	ldr	r3, [pc, #8]	; (83c <CONFIG_ISR_STACK_SIZE+0x3c>)
     832:	681b      	ldr	r3, [r3, #0]
     834:	2200      	movs	r2, #0
     836:	755a      	strb	r2, [r3, #21]
}
     838:	bd08      	pop	{r3, pc}
     83a:	bf00      	nop
     83c:	20000000 	.word	0x20000000

00000840 <dwt_initialise>:
{
     840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
     844:	4d62      	ldr	r5, [pc, #392]	; (9d0 <dwt_initialise+0x190>)
     846:	682b      	ldr	r3, [r5, #0]
     848:	2700      	movs	r7, #0
    pdw1000local->cbRxOk = NULL;
     84a:	e9c3 770a 	strd	r7, r7, [r3, #40]	; 0x28
    pdw1000local->cbRxErr = NULL;
     84e:	e9c3 770c 	strd	r7, r7, [r3, #48]	; 0x30
    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
     852:	615f      	str	r7, [r3, #20]
{
     854:	4604      	mov	r4, r0
    uint32_t device_id = dwt_readdevid();
     856:	f006 f8e8 	bl	6a2a <dwt_readdevid>
    if (DWT_DEVICE_ID != device_id) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
     85a:	4b5e      	ldr	r3, [pc, #376]	; (9d4 <dwt_initialise+0x194>)
     85c:	4298      	cmp	r0, r3
    uint32_t device_id = dwt_readdevid();
     85e:	4601      	mov	r1, r0
    if (DWT_DEVICE_ID != device_id) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
     860:	f040 80b2 	bne.w	9c8 <dwt_initialise+0x188>
    printk("device_id: %08x\n", device_id);
     864:	485c      	ldr	r0, [pc, #368]	; (9d8 <dwt_initialise+0x198>)
     866:	f006 faed 	bl	6e44 <printk>
    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
     86a:	f014 0602 	ands.w	r6, r4, #2
     86e:	d04a      	beq.n	906 <dwt_initialise+0xc6>
    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
     870:	f014 08f8 	ands.w	r8, r4, #248	; 0xf8
     874:	d06f      	beq.n	956 <dwt_initialise+0x116>
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
     876:	2204      	movs	r2, #4
     878:	4639      	mov	r1, r7
     87a:	2024      	movs	r0, #36	; 0x24
     87c:	f006 f8f2 	bl	6a64 <dwt_write8bitoffsetreg>
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
     880:	2130      	movs	r1, #48	; 0x30
     882:	2028      	movs	r0, #40	; 0x28
     884:	f006 f8c0 	bl	6a08 <dwt_read32bitoffsetreg>
     888:	f1b0 3f88 	cmp.w	r0, #2290649224	; 0x88888888
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
     88c:	bf1f      	itttt	ne
     88e:	682a      	ldrne	r2, [r5, #0]
     890:	8ad3      	ldrhne	r3, [r2, #22]
     892:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
     896:	82d3      	strhne	r3, [r2, #22]
    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
     898:	f004 030a 	and.w	r3, r4, #10
     89c:	2b0a      	cmp	r3, #10
     89e:	d160      	bne.n	962 <dwt_initialise+0x122>
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
     8a0:	201e      	movs	r0, #30
     8a2:	f006 f90e 	bl	6ac2 <_dwt_otpread>
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
     8a6:	682b      	ldr	r3, [r5, #0]
     8a8:	f3c0 2007 	ubfx	r0, r0, #8, #8
     8ac:	72d8      	strb	r0, [r3, #11]
    if(DWT_READ_OTP_PID & config)
     8ae:	f014 0010 	ands.w	r0, r4, #16
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
     8b2:	682f      	ldr	r7, [r5, #0]
    if(DWT_READ_OTP_PID & config)
     8b4:	d002      	beq.n	8bc <dwt_initialise+0x7c>
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
     8b6:	2006      	movs	r0, #6
     8b8:	f006 f903 	bl	6ac2 <_dwt_otpread>
     8bc:	6038      	str	r0, [r7, #0]
    if(DWT_READ_OTP_LID & config)
     8be:	f014 0020 	ands.w	r0, r4, #32
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
     8c2:	682f      	ldr	r7, [r5, #0]
    if(DWT_READ_OTP_LID & config)
     8c4:	d002      	beq.n	8cc <dwt_initialise+0x8c>
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
     8c6:	2007      	movs	r0, #7
     8c8:	f006 f8fb 	bl	6ac2 <_dwt_otpread>
    if(DWT_READ_OTP_BAT & config)
     8cc:	f014 0240 	ands.w	r2, r4, #64	; 0x40
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
     8d0:	6078      	str	r0, [r7, #4]
    if(DWT_READ_OTP_BAT & config)
     8d2:	d04a      	beq.n	96a <dwt_initialise+0x12a>
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
     8d4:	2008      	movs	r0, #8
     8d6:	f006 f8f4 	bl	6ac2 <_dwt_otpread>
     8da:	682b      	ldr	r3, [r5, #0]
     8dc:	7218      	strb	r0, [r3, #8]
    if(DWT_READ_OTP_TMP & config)
     8de:	f014 0280 	ands.w	r2, r4, #128	; 0x80
     8e2:	d045      	beq.n	970 <dwt_initialise+0x130>
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
     8e4:	2009      	movs	r0, #9
     8e6:	f006 f8ec 	bl	6ac2 <_dwt_otpread>
     8ea:	682b      	ldr	r3, [r5, #0]
     8ec:	7258      	strb	r0, [r3, #9]
    if(!(DWT_DW_WAKE_UP & config))
     8ee:	2e00      	cmp	r6, #0
     8f0:	d167      	bne.n	9c2 <dwt_initialise+0x182>
        if(DWT_LOADUCODE & config)
     8f2:	07e2      	lsls	r2, r4, #31
     8f4:	d53f      	bpl.n	976 <dwt_initialise+0x136>
            _dwt_loaducodefromrom();
     8f6:	f006 f982 	bl	6bfe <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
     8fa:	682a      	ldr	r2, [r5, #0]
     8fc:	8ad3      	ldrh	r3, [r2, #22]
     8fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     902:	82d3      	strh	r3, [r2, #22]
     904:	e042      	b.n	98c <dwt_initialise+0x14c>
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
     906:	f7ff ff77 	bl	7f8 <dwt_softreset>
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
     90a:	4630      	mov	r0, r6
     90c:	f006 f911 	bl	6b32 <_dwt_enableclocks>
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
     910:	2204      	movs	r2, #4
     912:	4631      	mov	r1, r6
     914:	2024      	movs	r0, #36	; 0x24
     916:	f006 f8a5 	bl	6a64 <dwt_write8bitoffsetreg>
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
     91a:	2004      	movs	r0, #4
     91c:	f006 f8d1 	bl	6ac2 <_dwt_otpread>
        if((ldo_tune & 0xFF) != 0)
     920:	b2c0      	uxtb	r0, r0
     922:	b148      	cbz	r0, 938 <dwt_initialise+0xf8>
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
     924:	2202      	movs	r2, #2
     926:	2112      	movs	r1, #18
     928:	202d      	movs	r0, #45	; 0x2d
     92a:	f006 f89b 	bl	6a64 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
     92e:	682a      	ldr	r2, [r5, #0]
     930:	8ad3      	ldrh	r3, [r2, #22]
     932:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     936:	82d3      	strh	r3, [r2, #22]
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
     938:	201e      	movs	r0, #30
     93a:	f006 f8c2 	bl	6ac2 <_dwt_otpread>
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
     93e:	682b      	ldr	r3, [r5, #0]
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
     940:	f010 0f1f 	tst.w	r0, #31
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
     944:	f3c0 2207 	ubfx	r2, r0, #8, #8
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
     948:	bf08      	it	eq
     94a:	2010      	moveq	r0, #16
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
     94c:	72da      	strb	r2, [r3, #11]
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
     94e:	b2c0      	uxtb	r0, r0
     950:	f006 f9d6 	bl	6d00 <dwt_setxtaltrim>
     954:	e7ab      	b.n	8ae <dwt_initialise+0x6e>
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
     956:	4640      	mov	r0, r8
     958:	f006 f8eb 	bl	6b32 <_dwt_enableclocks>
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
     95c:	2204      	movs	r2, #4
     95e:	4641      	mov	r1, r8
     960:	e78b      	b.n	87a <dwt_initialise+0x3a>
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
     962:	682b      	ldr	r3, [r5, #0]
     964:	2200      	movs	r2, #0
     966:	72da      	strb	r2, [r3, #11]
    if(!(DWT_DW_WAKE_UP & config))
     968:	e7a1      	b.n	8ae <dwt_initialise+0x6e>
        pdw1000local->vBatP = 0;
     96a:	682b      	ldr	r3, [r5, #0]
     96c:	721a      	strb	r2, [r3, #8]
     96e:	e7b6      	b.n	8de <dwt_initialise+0x9e>
        pdw1000local->tempP = 0;
     970:	682b      	ldr	r3, [r5, #0]
     972:	725a      	strb	r2, [r3, #9]
     974:	e7bb      	b.n	8ee <dwt_initialise+0xae>
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
     976:	2105      	movs	r1, #5
     978:	2036      	movs	r0, #54	; 0x36
     97a:	f006 f85a 	bl	6a32 <dwt_read16bitoffsetreg>
            rega &= 0xFDFF ; // Clear LDERUN bit
     97e:	f420 7200 	bic.w	r2, r0, #512	; 0x200
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
     982:	b292      	uxth	r2, r2
     984:	2105      	movs	r1, #5
     986:	2036      	movs	r0, #54	; 0x36
     988:	f006 f879 	bl	6a7e <dwt_write16bitoffsetreg>
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
     98c:	2001      	movs	r0, #1
     98e:	f006 f8d0 	bl	6b32 <_dwt_enableclocks>
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
     992:	2200      	movs	r2, #0
     994:	210a      	movs	r1, #10
     996:	202c      	movs	r0, #44	; 0x2c
     998:	f006 f864 	bl	6a64 <dwt_write8bitoffsetreg>
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
     99c:	2100      	movs	r1, #0
     99e:	2004      	movs	r0, #4
     9a0:	682c      	ldr	r4, [r5, #0]
     9a2:	f006 f831 	bl	6a08 <dwt_read32bitoffsetreg>
     9a6:	6120      	str	r0, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
     9a8:	682c      	ldr	r4, [r5, #0]
     9aa:	8a63      	ldrh	r3, [r4, #18]
     9ac:	f003 0303 	and.w	r3, r3, #3
     9b0:	72a3      	strb	r3, [r4, #10]
    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
     9b2:	2100      	movs	r1, #0
     9b4:	2008      	movs	r0, #8
     9b6:	f006 f827 	bl	6a08 <dwt_read32bitoffsetreg>
     9ba:	60e0      	str	r0, [r4, #12]
    return DWT_SUCCESS ;
     9bc:	2000      	movs	r0, #0
} // end dwt_initialise()
     9be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
     9c2:	0763      	lsls	r3, r4, #29
     9c4:	d4e2      	bmi.n	98c <dwt_initialise+0x14c>
     9c6:	e798      	b.n	8fa <dwt_initialise+0xba>
        return DWT_ERROR ;
     9c8:	f04f 30ff 	mov.w	r0, #4294967295
     9cc:	e7f7      	b.n	9be <dwt_initialise+0x17e>
     9ce:	bf00      	nop
     9d0:	20000000 	.word	0x20000000
     9d4:	deca0130 	.word	0xdeca0130
     9d8:	000082c7 	.word	0x000082c7

000009dc <openspi>:

//     return 0;
// }

int openspi(void)
{
     9dc:	b530      	push	{r4, r5, lr}
    cs_ctrl = *SPI_CS_CONTROL_PTR_DT(DT_NODELABEL(ieee802154), 2);
     9de:	4a19      	ldr	r2, [pc, #100]	; (a44 <openspi+0x68>)
     9e0:	4c19      	ldr	r4, [pc, #100]	; (a48 <openspi+0x6c>)
    spi = DEVICE_DT_GET(DT_NODELABEL(spi2));

    spi_cfg->operation = SPI_WORD_SET(8);
    spi_cfg->frequency = 2000000;

    memset(&tx_buf[0], 0, 255);
     9e2:	4d1a      	ldr	r5, [pc, #104]	; (a4c <openspi+0x70>)
    cs_ctrl = *SPI_CS_CONTROL_PTR_DT(DT_NODELABEL(ieee802154), 2);
     9e4:	ca07      	ldmia	r2, {r0, r1, r2}
{
     9e6:	b085      	sub	sp, #20
    cs_ctrl = *SPI_CS_CONTROL_PTR_DT(DT_NODELABEL(ieee802154), 2);
     9e8:	ab01      	add	r3, sp, #4
     9ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
     9ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    spi_cfg = &spi_cfgs[0];
     9f2:	4a17      	ldr	r2, [pc, #92]	; (a50 <openspi+0x74>)
        spi_cfgs[i].cs = &cs_ctrl;
     9f4:	4b17      	ldr	r3, [pc, #92]	; (a54 <openspi+0x78>)
    spi_cfg = &spi_cfgs[0];
     9f6:	6013      	str	r3, [r2, #0]
    spi = DEVICE_DT_GET(DT_NODELABEL(spi2));
     9f8:	4a17      	ldr	r2, [pc, #92]	; (a58 <openspi+0x7c>)
     9fa:	4918      	ldr	r1, [pc, #96]	; (a5c <openspi+0x80>)
     9fc:	6011      	str	r1, [r2, #0]
    spi_cfg->operation = SPI_WORD_SET(8);
     9fe:	f44f 7280 	mov.w	r2, #256	; 0x100
        spi_cfgs[i].cs = &cs_ctrl;
     a02:	609c      	str	r4, [r3, #8]
     a04:	615c      	str	r4, [r3, #20]
     a06:	621c      	str	r4, [r3, #32]
     a08:	62dc      	str	r4, [r3, #44]	; 0x2c
    spi_cfg->operation = SPI_WORD_SET(8);
     a0a:	809a      	strh	r2, [r3, #4]
    memset(&rx_buf[0], 0, 255);
     a0c:	4c14      	ldr	r4, [pc, #80]	; (a60 <openspi+0x84>)
    spi_cfg->frequency = 2000000;
     a0e:	4a15      	ldr	r2, [pc, #84]	; (a64 <openspi+0x88>)
     a10:	601a      	str	r2, [r3, #0]
    memset(&tx_buf[0], 0, 255);
     a12:	2100      	movs	r1, #0
     a14:	22ff      	movs	r2, #255	; 0xff
     a16:	4628      	mov	r0, r5
     a18:	f006 fc9c 	bl	7354 <memset>
    memset(&rx_buf[0], 0, 255);
     a1c:	22ff      	movs	r2, #255	; 0xff
     a1e:	2100      	movs	r1, #0
     a20:	4620      	mov	r0, r4
     a22:	f006 fc97 	bl	7354 <memset>
    bufs[0].buf = &tx_buf[0];
     a26:	4b10      	ldr	r3, [pc, #64]	; (a68 <openspi+0x8c>)
    bufs[1].buf = &rx_buf[0];
    tx.buffers = &bufs[0];
     a28:	4910      	ldr	r1, [pc, #64]	; (a6c <openspi+0x90>)
    rx.buffers = &bufs[1];
     a2a:	4a11      	ldr	r2, [pc, #68]	; (a70 <openspi+0x94>)
    bufs[0].buf = &tx_buf[0];
     a2c:	601d      	str	r5, [r3, #0]
    bufs[1].buf = &rx_buf[0];
     a2e:	609c      	str	r4, [r3, #8]
    tx.buffers = &bufs[0];
     a30:	600b      	str	r3, [r1, #0]
    rx.buffers = &bufs[1];
     a32:	3308      	adds	r3, #8
     a34:	6013      	str	r3, [r2, #0]
    tx.count = 1;
    rx.count = 1;

    return 0;
}
     a36:	2000      	movs	r0, #0
    tx.count = 1;
     a38:	2301      	movs	r3, #1
     a3a:	604b      	str	r3, [r1, #4]
    rx.count = 1;
     a3c:	6053      	str	r3, [r2, #4]
}
     a3e:	b005      	add	sp, #20
     a40:	bd30      	pop	{r4, r5, pc}
     a42:	bf00      	nop
     a44:	00007f10 	.word	0x00007f10
     a48:	20000328 	.word	0x20000328
     a4c:	200006bf 	.word	0x200006bf
     a50:	20000384 	.word	0x20000384
     a54:	20000354 	.word	0x20000354
     a58:	20000388 	.word	0x20000388
     a5c:	00007cc8 	.word	0x00007cc8
     a60:	200005c0 	.word	0x200005c0
     a64:	001e8480 	.word	0x001e8480
     a68:	20000344 	.word	0x20000344
     a6c:	2000033c 	.word	0x2000033c
     a70:	20000334 	.word	0x20000334

00000a74 <set_spi_speed_slow>:

void set_spi_speed_slow(void)
{
     a74:	b508      	push	{r3, lr}
    spi_cfg = &spi_cfgs[0];
     a76:	4a0a      	ldr	r2, [pc, #40]	; (aa0 <set_spi_speed_slow+0x2c>)
     a78:	4b0a      	ldr	r3, [pc, #40]	; (aa4 <set_spi_speed_slow+0x30>)
     a7a:	6013      	str	r3, [r2, #0]
    spi_cfg->operation = SPI_WORD_SET(8);
     a7c:	f44f 7280 	mov.w	r2, #256	; 0x100
     a80:	809a      	strh	r2, [r3, #4]
    spi_cfg->frequency = 2000000;
     a82:	4a09      	ldr	r2, [pc, #36]	; (aa8 <set_spi_speed_slow+0x34>)
     a84:	601a      	str	r2, [r3, #0]

    memset(&tx_buf[0], 0, 255);
     a86:	2100      	movs	r1, #0
     a88:	22ff      	movs	r2, #255	; 0xff
     a8a:	4808      	ldr	r0, [pc, #32]	; (aac <set_spi_speed_slow+0x38>)
     a8c:	f006 fc62 	bl	7354 <memset>
    memset(&rx_buf[0], 0, 255);
}
     a90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    memset(&rx_buf[0], 0, 255);
     a94:	4806      	ldr	r0, [pc, #24]	; (ab0 <set_spi_speed_slow+0x3c>)
     a96:	22ff      	movs	r2, #255	; 0xff
     a98:	2100      	movs	r1, #0
     a9a:	f006 bc5b 	b.w	7354 <memset>
     a9e:	bf00      	nop
     aa0:	20000384 	.word	0x20000384
     aa4:	20000354 	.word	0x20000354
     aa8:	001e8480 	.word	0x001e8480
     aac:	200006bf 	.word	0x200006bf
     ab0:	200005c0 	.word	0x200005c0

00000ab4 <set_spi_speed_fast>:

void set_spi_speed_fast(void)
{
    spi_cfg = &spi_cfgs[1];
     ab4:	4a0a      	ldr	r2, [pc, #40]	; (ae0 <set_spi_speed_fast+0x2c>)
    spi_cfg->operation = SPI_WORD_SET(8);
    spi_cfg->frequency = 8000000;

    memset(&tx_buf[0], 0, 255);
     ab6:	480b      	ldr	r0, [pc, #44]	; (ae4 <set_spi_speed_fast+0x30>)
{
     ab8:	b508      	push	{r3, lr}
    spi_cfg = &spi_cfgs[1];
     aba:	4b0b      	ldr	r3, [pc, #44]	; (ae8 <set_spi_speed_fast+0x34>)
     abc:	6013      	str	r3, [r2, #0]
    spi_cfg->operation = SPI_WORD_SET(8);
     abe:	f44f 7280 	mov.w	r2, #256	; 0x100
     ac2:	809a      	strh	r2, [r3, #4]
     ac4:	3b0c      	subs	r3, #12
    spi_cfg->frequency = 8000000;
     ac6:	4a09      	ldr	r2, [pc, #36]	; (aec <set_spi_speed_fast+0x38>)
     ac8:	60da      	str	r2, [r3, #12]
    memset(&tx_buf[0], 0, 255);
     aca:	2100      	movs	r1, #0
     acc:	22ff      	movs	r2, #255	; 0xff
     ace:	f006 fc41 	bl	7354 <memset>
    memset(&rx_buf[0], 0, 255);
}
     ad2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    memset(&rx_buf[0], 0, 255);
     ad6:	4806      	ldr	r0, [pc, #24]	; (af0 <set_spi_speed_fast+0x3c>)
     ad8:	22ff      	movs	r2, #255	; 0xff
     ada:	2100      	movs	r1, #0
     adc:	f006 bc3a 	b.w	7354 <memset>
     ae0:	20000384 	.word	0x20000384
     ae4:	200006bf 	.word	0x200006bf
     ae8:	20000360 	.word	0x20000360
     aec:	007a1200 	.word	0x007a1200
     af0:	200005c0 	.word	0x200005c0

00000af4 <writetospi>:
 */
int writetospi(uint16           headerLength,
               const    uint8 * headerBuffer,
               uint32           bodyLength,
               const    uint8 * bodyBuffer)
{
     af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     af8:	461f      	mov	r7, r3
     afa:	4615      	mov	r5, r2
     afc:	4604      	mov	r4, r0
     afe:	4688      	mov	r8, r1
#if 0
    LOG_HEXDUMP_INF(headerBuffer, headerLength, "writetospi: Header");
    LOG_HEXDUMP_INF(bodyBuffer, bodyLength, "writetospi: Body");
#endif

    stat = decamutexon();
     b00:	f006 f906 	bl	6d10 <decamutexon>

    memcpy(&tx_buf[0], headerBuffer, headerLength);
     b04:	f8df 9040 	ldr.w	r9, [pc, #64]	; b48 <writetospi+0x54>
     b08:	4622      	mov	r2, r4
     b0a:	4641      	mov	r1, r8
    stat = decamutexon();
     b0c:	4606      	mov	r6, r0
    memcpy(&tx_buf[0], headerBuffer, headerLength);
     b0e:	4648      	mov	r0, r9
     b10:	f006 fc15 	bl	733e <memcpy>
    memcpy(&tx_buf[headerLength], bodyBuffer, bodyLength);
     b14:	4639      	mov	r1, r7
     b16:	eb09 0004 	add.w	r0, r9, r4
     b1a:	462a      	mov	r2, r5
     b1c:	f006 fc0f 	bl	733e <memcpy>

    bufs[0].len = headerLength + bodyLength;
     b20:	4b0a      	ldr	r3, [pc, #40]	; (b4c <writetospi+0x58>)
     b22:	442c      	add	r4, r5
     b24:	605c      	str	r4, [r3, #4]
    bufs[1].len = headerLength + bodyLength;
     b26:	60dc      	str	r4, [r3, #12]

    spi_transceive(spi, spi_cfg, &tx, &rx);
     b28:	4b09      	ldr	r3, [pc, #36]	; (b50 <writetospi+0x5c>)
     b2a:	6818      	ldr	r0, [r3, #0]
     b2c:	4b09      	ldr	r3, [pc, #36]	; (b54 <writetospi+0x60>)
     b2e:	6819      	ldr	r1, [r3, #0]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
     b30:	6883      	ldr	r3, [r0, #8]
     b32:	4a09      	ldr	r2, [pc, #36]	; (b58 <writetospi+0x64>)
     b34:	681c      	ldr	r4, [r3, #0]
     b36:	4b09      	ldr	r3, [pc, #36]	; (b5c <writetospi+0x68>)
     b38:	47a0      	blx	r4

    decamutexoff(stat);
     b3a:	4630      	mov	r0, r6
     b3c:	f006 f8ea 	bl	6d14 <decamutexoff>

    return 0;
}
     b40:	2000      	movs	r0, #0
     b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     b46:	bf00      	nop
     b48:	200006bf 	.word	0x200006bf
     b4c:	20000344 	.word	0x20000344
     b50:	20000388 	.word	0x20000388
     b54:	20000384 	.word	0x20000384
     b58:	2000033c 	.word	0x2000033c
     b5c:	20000334 	.word	0x20000334

00000b60 <readfromspi>:
 */
int readfromspi(uint16        headerLength,
                const uint8 * headerBuffer,
                uint32        readLength,
                uint8       * readBuffer)
{
     b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     b64:	461f      	mov	r7, r3
     b66:	4604      	mov	r4, r0
     b68:	4689      	mov	r9, r1
     b6a:	4615      	mov	r5, r2
    decaIrqStatus_t  stat;

    stat = decamutexon();
     b6c:	f006 f8d0 	bl	6d10 <decamutexon>

    memset(&tx_buf[0], 0, headerLength + readLength);
     b70:	f8df a050 	ldr.w	sl, [pc, #80]	; bc4 <readfromspi+0x64>
     b74:	eb04 0805 	add.w	r8, r4, r5
     b78:	4642      	mov	r2, r8
    stat = decamutexon();
     b7a:	4606      	mov	r6, r0
    memset(&tx_buf[0], 0, headerLength + readLength);
     b7c:	2100      	movs	r1, #0
     b7e:	4650      	mov	r0, sl
     b80:	f006 fbe8 	bl	7354 <memset>
    memcpy(&tx_buf[0], headerBuffer, headerLength);
     b84:	4649      	mov	r1, r9
     b86:	4622      	mov	r2, r4
     b88:	4650      	mov	r0, sl
     b8a:	f006 fbd8 	bl	733e <memcpy>

    bufs[0].len = headerLength + readLength;
     b8e:	4b0e      	ldr	r3, [pc, #56]	; (bc8 <readfromspi+0x68>)
     b90:	f8c3 8004 	str.w	r8, [r3, #4]
    bufs[1].len = headerLength + readLength;
     b94:	f8c3 800c 	str.w	r8, [r3, #12]

    spi_transceive(spi, spi_cfg, &tx, &rx);
     b98:	4b0c      	ldr	r3, [pc, #48]	; (bcc <readfromspi+0x6c>)
     b9a:	6818      	ldr	r0, [r3, #0]
     b9c:	4b0c      	ldr	r3, [pc, #48]	; (bd0 <readfromspi+0x70>)
     b9e:	6819      	ldr	r1, [r3, #0]
     ba0:	6883      	ldr	r3, [r0, #8]
     ba2:	4a0c      	ldr	r2, [pc, #48]	; (bd4 <readfromspi+0x74>)
     ba4:	f8d3 8000 	ldr.w	r8, [r3]
     ba8:	4b0b      	ldr	r3, [pc, #44]	; (bd8 <readfromspi+0x78>)
     baa:	47c0      	blx	r8

    memcpy(readBuffer, rx_buf + headerLength, readLength);
     bac:	490b      	ldr	r1, [pc, #44]	; (bdc <readfromspi+0x7c>)
     bae:	462a      	mov	r2, r5
     bb0:	4421      	add	r1, r4
     bb2:	4638      	mov	r0, r7
     bb4:	f006 fbc3 	bl	733e <memcpy>

    decamutexoff(stat);
     bb8:	4630      	mov	r0, r6
     bba:	f006 f8ab 	bl	6d14 <decamutexoff>
    LOG_HEXDUMP_INF(headerBuffer, headerLength, "readfromspi: Header");
    LOG_HEXDUMP_INF(readBuffer, readLength, "readfromspi: Body");
#endif

    return 0;
}
     bbe:	2000      	movs	r0, #0
     bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     bc4:	200006bf 	.word	0x200006bf
     bc8:	20000344 	.word	0x20000344
     bcc:	20000388 	.word	0x20000388
     bd0:	20000384 	.word	0x20000384
     bd4:	2000033c 	.word	0x2000033c
     bd8:	20000334 	.word	0x20000334
     bdc:	200005c0 	.word	0x200005c0

00000be0 <port_set_deca_isr>:
 * @param deca_isr function pointer to DW1000 interrupt handler to install
 *
 * @return none
 */
void port_set_deca_isr(port_deca_isr_t deca_isr)
{
     be0:	b580      	push	{r7, lr}
     be2:	b082      	sub	sp, #8
     be4:	af00      	add	r7, sp, #0
     be6:	6078      	str	r0, [r7, #4]
    printk("%s: Binding to GPIO0 and pin %d\n", __func__, GPIO_PIN);
     be8:	2213      	movs	r2, #19
     bea:	4916      	ldr	r1, [pc, #88]	; (c44 <port_set_deca_isr+0x64>)
     bec:	4816      	ldr	r0, [pc, #88]	; (c48 <port_set_deca_isr+0x68>)
     bee:	f006 f929 	bl	6e44 <printk>
    // gpio_dev = device_get_binding(DT_LABEL(DT_NODELABEL(gpio0))); // changed 10/23/23
    gpio_dev = DEVICE_DT_GET(DT_NODELABEL(gpio0));
     bf2:	4b16      	ldr	r3, [pc, #88]	; (c4c <port_set_deca_isr+0x6c>)
     bf4:	4a16      	ldr	r2, [pc, #88]	; (c50 <port_set_deca_isr+0x70>)
     bf6:	601a      	str	r2, [r3, #0]
    if (!gpio_dev) {
     bf8:	4b14      	ldr	r3, [pc, #80]	; (c4c <port_set_deca_isr+0x6c>)
     bfa:	681b      	ldr	r3, [r3, #0]
     bfc:	2b00      	cmp	r3, #0
     bfe:	d103      	bne.n	c08 <port_set_deca_isr+0x28>
        printk("error\n");
     c00:	4814      	ldr	r0, [pc, #80]	; (c54 <port_set_deca_isr+0x74>)
     c02:	f006 f91f 	bl	6e44 <printk>
        return;
     c06:	e01a      	b.n	c3e <port_set_deca_isr+0x5e>
    }

    /* Decawave interrupt */
    gpio_pin_configure(gpio_dev, GPIO_PIN, (GPIO_INPUT | GPIO_FLAGS));
     c08:	4b10      	ldr	r3, [pc, #64]	; (c4c <port_set_deca_isr+0x6c>)
     c0a:	681b      	ldr	r3, [r3, #0]
     c0c:	4a12      	ldr	r2, [pc, #72]	; (c58 <port_set_deca_isr+0x78>)
     c0e:	2113      	movs	r1, #19
     c10:	4618      	mov	r0, r3
     c12:	f006 f8a8 	bl	6d66 <gpio_pin_configure.isra.0>

    gpio_init_callback(&gpio_cb, (gpio_callback_handler_t)(deca_isr), BIT(GPIO_PIN));
     c16:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     c1a:	6879      	ldr	r1, [r7, #4]
     c1c:	480f      	ldr	r0, [pc, #60]	; (c5c <port_set_deca_isr+0x7c>)
     c1e:	f006 f899 	bl	6d54 <gpio_init_callback>

    gpio_add_callback(gpio_dev, &gpio_cb);
     c22:	4b0a      	ldr	r3, [pc, #40]	; (c4c <port_set_deca_isr+0x6c>)
     c24:	681b      	ldr	r3, [r3, #0]
     c26:	490d      	ldr	r1, [pc, #52]	; (c5c <port_set_deca_isr+0x7c>)
     c28:	4618      	mov	r0, r3
     c2a:	f006 f896 	bl	6d5a <gpio_add_callback.isra.0>

    gpio_pin_interrupt_configure(gpio_dev, GPIO_PIN, GPIO_INT_EDGE_RISING);
     c2e:	4b07      	ldr	r3, [pc, #28]	; (c4c <port_set_deca_isr+0x6c>)
     c30:	681b      	ldr	r3, [r3, #0]
     c32:	f04f 62a8 	mov.w	r2, #88080384	; 0x5400000
     c36:	2113      	movs	r1, #19
     c38:	4618      	mov	r0, r3
     c3a:	f006 f8b0 	bl	6d9e <gpio_pin_interrupt_configure.isra.0>
}
     c3e:	3708      	adds	r7, #8
     c40:	46bd      	mov	sp, r7
     c42:	bd80      	pop	{r7, pc}
     c44:	00008300 	.word	0x00008300
     c48:	00007f1c 	.word	0x00007f1c
     c4c:	20000398 	.word	0x20000398
     c50:	00007c90 	.word	0x00007c90
     c54:	00007f40 	.word	0x00007f40
     c58:	00010011 	.word	0x00010011
     c5c:	2000038c 	.word	0x2000038c

00000c60 <rx_error_callback>:
    printk("rx timeout callback\n");
}

static void rx_error_callback(const dwt_cb_data_t *cb_data)
{
    printk("rx error callback\n");
     c60:	4801      	ldr	r0, [pc, #4]	; (c68 <rx_error_callback+0x8>)
     c62:	f006 b8ef 	b.w	6e44 <printk>
     c66:	bf00      	nop
     c68:	00008312 	.word	0x00008312

00000c6c <rx_timeout_callback>:
    printk("rx timeout callback\n");
     c6c:	4801      	ldr	r0, [pc, #4]	; (c74 <rx_timeout_callback+0x8>)
     c6e:	f006 b8e9 	b.w	6e44 <printk>
     c72:	bf00      	nop
     c74:	00008325 	.word	0x00008325

00000c78 <rx_ok_callback>:
    printk("rx ok callback\n");
     c78:	4801      	ldr	r0, [pc, #4]	; (c80 <rx_ok_callback+0x8>)
     c7a:	f006 b8e3 	b.w	6e44 <printk>
     c7e:	bf00      	nop
     c80:	0000833a 	.word	0x0000833a

00000c84 <tx_done_callback>:
}

static void tx_done_callback(const dwt_cb_data_t *cb_data)
{
    printk("tx done callback\n");
     c84:	4801      	ldr	r0, [pc, #4]	; (c8c <tx_done_callback+0x8>)
     c86:	f006 b8dd 	b.w	6e44 <printk>
     c8a:	bf00      	nop
     c8c:	0000834a 	.word	0x0000834a

00000c90 <test_isr>:
    printk("test isr\n");
     c90:	4801      	ldr	r0, [pc, #4]	; (c98 <test_isr+0x8>)
     c92:	f006 b8d7 	b.w	6e44 <printk>
     c96:	bf00      	nop
     c98:	0000835c 	.word	0x0000835c

00000c9c <uwb_init>:
{
     c9c:	b510      	push	{r4, lr}
    if (openspi() != DWT_SUCCESS)
     c9e:	f7ff fe9d 	bl	9dc <openspi>
     ca2:	bb10      	cbnz	r0, cea <uwb_init+0x4e>
    port_set_dw1000_slowrate();
     ca4:	f006 f84a 	bl	6d3c <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADUCODE) != DWT_SUCCESS)
     ca8:	2001      	movs	r0, #1
     caa:	f7ff fdc9 	bl	840 <dwt_initialise>
     cae:	4604      	mov	r4, r0
     cb0:	b9f0      	cbnz	r0, cf0 <uwb_init+0x54>
    port_set_dw1000_fastrate();
     cb2:	f006 f849 	bl	6d48 <port_set_dw1000_fastrate>
    dwt_configure(&dwt_config);
     cb6:	4810      	ldr	r0, [pc, #64]	; (cf8 <uwb_init+0x5c>)
     cb8:	f7ff fbaa 	bl	410 <dwt_configure>
    dwt_settxantennadelay(TX_ANTENNA_DELAY);
     cbc:	f244 0034 	movw	r0, #16436	; 0x4034
     cc0:	f005 feef 	bl	6aa2 <dwt_settxantennadelay>
    dwt_setrxantennadelay(RX_ANTENNA_DELAY);
     cc4:	f244 0034 	movw	r0, #16436	; 0x4034
     cc8:	f005 fee5 	bl	6a96 <dwt_setrxantennadelay>
    port_set_deca_isr(test_isr);
     ccc:	480b      	ldr	r0, [pc, #44]	; (cfc <uwb_init+0x60>)
     cce:	f7ff ff87 	bl	be0 <port_set_deca_isr>
    dwt_setcallbacks(&tx_done_callback, &rx_ok_callback, &rx_timeout_callback, &rx_error_callback);
     cd2:	490b      	ldr	r1, [pc, #44]	; (d00 <uwb_init+0x64>)
     cd4:	480b      	ldr	r0, [pc, #44]	; (d04 <uwb_init+0x68>)
     cd6:	4b0c      	ldr	r3, [pc, #48]	; (d08 <uwb_init+0x6c>)
     cd8:	4a0c      	ldr	r2, [pc, #48]	; (d0c <uwb_init+0x70>)
     cda:	f7ff fc9d 	bl	618 <dwt_setcallbacks>
    dwt_setinterrupt(DWT_INT_TFRS
     cde:	480c      	ldr	r0, [pc, #48]	; (d10 <uwb_init+0x74>)
     ce0:	2102      	movs	r1, #2
     ce2:	f005 ffe3 	bl	6cac <dwt_setinterrupt>
}
     ce6:	4620      	mov	r0, r4
     ce8:	bd10      	pop	{r4, pc}
        return -1;
     cea:	f04f 34ff 	mov.w	r4, #4294967295
     cee:	e7fa      	b.n	ce6 <uwb_init+0x4a>
        return -2;
     cf0:	f06f 0401 	mvn.w	r4, #1
     cf4:	e7f7      	b.n	ce6 <uwb_init+0x4a>
     cf6:	bf00      	nop
     cf8:	20000174 	.word	0x20000174
     cfc:	00000c91 	.word	0x00000c91
     d00:	00000c79 	.word	0x00000c79
     d04:	00000c85 	.word	0x00000c85
     d08:	00000c61 	.word	0x00000c61
     d0c:	00000c6d 	.word	0x00000c6d
     d10:	0423d080 	.word	0x0423d080

00000d14 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d18:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     d1a:	0784      	lsls	r4, r0, #30
{
     d1c:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     d1e:	f002 0304 	and.w	r3, r2, #4
     d22:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     d24:	f3c2 03c2 	ubfx	r3, r2, #3, #3
     d28:	f103 0301 	add.w	r3, r3, #1
     d2c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
     d30:	9203      	str	r2, [sp, #12]
     d32:	4605      	mov	r5, r0
     d34:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     d36:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
     d38:	f040 81be 	bne.w	10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
     d3c:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     d3e:	b130      	cbz	r0, d4e <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     d40:	2907      	cmp	r1, #7
     d42:	d809      	bhi.n	d58 <cbvprintf_package+0x44>
		return -ENOSPC;
     d44:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     d48:	b011      	add	sp, #68	; 0x44
     d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     d4e:	f001 0607 	and.w	r6, r1, #7
     d52:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     d54:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
     d58:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     d5a:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
     d5e:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
     d60:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
     d64:	f04f 33ff 	mov.w	r3, #4294967295
     d68:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     d6a:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
     d6e:	464f      	mov	r7, r9
	bool parsing = false;
     d70:	46cb      	mov	fp, r9
	size = sizeof(char *);
     d72:	4653      	mov	r3, sl
			if (buf0 != NULL) {
     d74:	b10d      	cbz	r5, d7a <cbvprintf_package+0x66>
				*(const char **)buf = s;
     d76:	9a00      	ldr	r2, [sp, #0]
     d78:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     d7a:	9805      	ldr	r0, [sp, #20]
     d7c:	2800      	cmp	r0, #0
     d7e:	f300 80eb 	bgt.w	f58 <cbvprintf_package+0x244>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     d82:	489a      	ldr	r0, [pc, #616]	; (fec <cbvprintf_package+0x2d8>)
     d84:	9a00      	ldr	r2, [sp, #0]
     d86:	4282      	cmp	r2, r0
     d88:	d303      	bcc.n	d92 <cbvprintf_package+0x7e>
     d8a:	4899      	ldr	r0, [pc, #612]	; (ff0 <cbvprintf_package+0x2dc>)
     d8c:	4282      	cmp	r2, r0
     d8e:	f0c0 80e3 	bcc.w	f58 <cbvprintf_package+0x244>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     d92:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     d94:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     d98:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     d9a:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     d9e:	f100 8106 	bmi.w	fae <cbvprintf_package+0x29a>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     da2:	2f0f      	cmp	r7, #15
     da4:	f200 80b4 	bhi.w	f10 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
     da8:	2d00      	cmp	r5, #0
     daa:	f000 8108 	beq.w	fbe <cbvprintf_package+0x2aa>
					str_ptr_pos[s_idx] = s_ptr_idx;
     dae:	f107 0240 	add.w	r2, r7, #64	; 0x40
     db2:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
     db6:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
     db8:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
     dbc:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
     dc0:	9804      	ldr	r0, [sp, #16]
     dc2:	3001      	adds	r0, #1
     dc4:	9004      	str	r0, [sp, #16]
     dc6:	e0ea      	b.n	f9e <cbvprintf_package+0x28a>
			switch (*fmt) {
     dc8:	287a      	cmp	r0, #122	; 0x7a
     dca:	d860      	bhi.n	e8e <cbvprintf_package+0x17a>
     dcc:	284b      	cmp	r0, #75	; 0x4b
     dce:	d80e      	bhi.n	dee <cbvprintf_package+0xda>
     dd0:	2847      	cmp	r0, #71	; 0x47
     dd2:	d85c      	bhi.n	e8e <cbvprintf_package+0x17a>
     dd4:	2829      	cmp	r0, #41	; 0x29
     dd6:	d82f      	bhi.n	e38 <cbvprintf_package+0x124>
     dd8:	2825      	cmp	r0, #37	; 0x25
     dda:	d055      	beq.n	e88 <cbvprintf_package+0x174>
     ddc:	d857      	bhi.n	e8e <cbvprintf_package+0x17a>
     dde:	2820      	cmp	r0, #32
     de0:	d07d      	beq.n	ede <cbvprintf_package+0x1ca>
     de2:	3823      	subs	r0, #35	; 0x23
     de4:	f1d0 0b00 	rsbs	fp, r0, #0
     de8:	eb4b 0b00 	adc.w	fp, fp, r0
     dec:	e077      	b.n	ede <cbvprintf_package+0x1ca>
     dee:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
     df2:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
     df6:	d84a      	bhi.n	e8e <cbvprintf_package+0x17a>
     df8:	e8df f00c 	tbb	[pc, ip]
     dfc:	49494971 	.word	0x49494971
     e00:	49494949 	.word	0x49494949
     e04:	49494949 	.word	0x49494949
     e08:	4949494c 	.word	0x4949494c
     e0c:	49494949 	.word	0x49494949
     e10:	4c495a49 	.word	0x4c495a49
     e14:	5a5a5a4c 	.word	0x5a5a5a4c
     e18:	496e4c71 	.word	0x496e4c71
     e1c:	4c184971 	.word	0x4c184971
     e20:	83494918 	.word	0x83494918
     e24:	49494c80 	.word	0x49494c80
     e28:	494c      	.short	0x494c
     e2a:	80          	.byte	0x80
     e2b:	00          	.byte	0x00
     e2c:	2000      	movs	r0, #0
     e2e:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
     e32:	f04f 0a04 	mov.w	sl, #4
     e36:	e039      	b.n	eac <cbvprintf_package+0x198>
			switch (*fmt) {
     e38:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
     e3c:	fa5f fc8c 	uxtb.w	ip, ip
     e40:	2201      	movs	r2, #1
     e42:	fa02 fc0c 	lsl.w	ip, r2, ip
     e46:	ea1c 0f0e 	tst.w	ip, lr
     e4a:	d148      	bne.n	ede <cbvprintf_package+0x1ca>
     e4c:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
     e50:	d12e      	bne.n	eb0 <cbvprintf_package+0x19c>
     e52:	ea1c 0b02 	ands.w	fp, ip, r2
     e56:	d042      	beq.n	ede <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
     e58:	3c01      	subs	r4, #1
     e5a:	4454      	add	r4, sl
     e5c:	f1ca 0c00 	rsb	ip, sl, #0
     e60:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     e64:	2d00      	cmp	r5, #0
     e66:	d061      	beq.n	f2c <cbvprintf_package+0x218>
     e68:	eba3 0c05 	sub.w	ip, r3, r5
     e6c:	44a4      	add	ip, r4
     e6e:	45b4      	cmp	ip, r6
     e70:	f63f af68 	bhi.w	d44 <cbvprintf_package+0x30>
		if (is_str_arg) {
     e74:	2800      	cmp	r0, #0
     e76:	d168      	bne.n	f4a <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
     e78:	2b04      	cmp	r3, #4
     e7a:	d147      	bne.n	f0c <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
     e7c:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
     e80:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
     e82:	3404      	adds	r4, #4
     e84:	2304      	movs	r3, #4
     e86:	e02a      	b.n	ede <cbvprintf_package+0x1ca>
				arg_idx--;
     e88:	9a01      	ldr	r2, [sp, #4]
     e8a:	3a01      	subs	r2, #1
     e8c:	9201      	str	r2, [sp, #4]
				parsing = false;
     e8e:	f04f 0b00 	mov.w	fp, #0
				continue;
     e92:	e024      	b.n	ede <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
     e94:	f811 0c01 	ldrb.w	r0, [r1, #-1]
     e98:	286c      	cmp	r0, #108	; 0x6c
     e9a:	d134      	bne.n	f06 <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
     e9c:	f811 3c02 	ldrb.w	r3, [r1, #-2]
     ea0:	2000      	movs	r0, #0
     ea2:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
     ea4:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
     ea6:	d1c4      	bne.n	e32 <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
     ea8:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
     eac:	4653      	mov	r3, sl
     eae:	e7d3      	b.n	e58 <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
     eb0:	f108 0807 	add.w	r8, r8, #7
     eb4:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
     eb8:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
     eba:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
     ebe:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
     ec2:	b135      	cbz	r5, ed2 <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
     ec4:	9806      	ldr	r0, [sp, #24]
     ec6:	4420      	add	r0, r4
     ec8:	42b0      	cmp	r0, r6
     eca:	f63f af3b 	bhi.w	d44 <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
     ece:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
     ed2:	3408      	adds	r4, #8
				parsing = false;
     ed4:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
     ed8:	f04f 0a08 	mov.w	sl, #8
     edc:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
     ede:	f811 0f01 	ldrb.w	r0, [r1, #1]!
     ee2:	2800      	cmp	r0, #0
     ee4:	d078      	beq.n	fd8 <cbvprintf_package+0x2c4>
			if (!parsing) {
     ee6:	f1bb 0f00 	cmp.w	fp, #0
     eea:	f47f af6d 	bne.w	dc8 <cbvprintf_package+0xb4>
				if (*fmt == '%') {
     eee:	2825      	cmp	r0, #37	; 0x25
     ef0:	d1f5      	bne.n	ede <cbvprintf_package+0x1ca>
					arg_idx++;
     ef2:	9b01      	ldr	r3, [sp, #4]
     ef4:	3301      	adds	r3, #1
     ef6:	9301      	str	r3, [sp, #4]
					parsing = true;
     ef8:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
     efc:	f04f 0a04 	mov.w	sl, #4
     f00:	e7ec      	b.n	edc <cbvprintf_package+0x1c8>
			switch (*fmt) {
     f02:	4658      	mov	r0, fp
     f04:	e793      	b.n	e2e <cbvprintf_package+0x11a>
     f06:	2000      	movs	r0, #0
				parsing = false;
     f08:	4683      	mov	fp, r0
     f0a:	e7a5      	b.n	e58 <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
     f0c:	2b08      	cmp	r3, #8
     f0e:	d002      	beq.n	f16 <cbvprintf_package+0x202>
					return -EINVAL;
     f10:	f06f 0015 	mvn.w	r0, #21
     f14:	e718      	b.n	d48 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
     f16:	f108 0807 	add.w	r8, r8, #7
     f1a:	f028 0807 	bic.w	r8, r8, #7
     f1e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
     f22:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
     f26:	3408      	adds	r4, #8
     f28:	2308      	movs	r3, #8
     f2a:	e7d8      	b.n	ede <cbvprintf_package+0x1ca>
		if (is_str_arg) {
     f2c:	b968      	cbnz	r0, f4a <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
     f2e:	2b04      	cmp	r3, #4
     f30:	d102      	bne.n	f38 <cbvprintf_package+0x224>
			int v = va_arg(ap, int);
     f32:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
     f36:	e7a4      	b.n	e82 <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
     f38:	2b08      	cmp	r3, #8
     f3a:	d1e9      	bne.n	f10 <cbvprintf_package+0x1fc>
			long long v = va_arg(ap, long long);
     f3c:	f108 0807 	add.w	r8, r8, #7
     f40:	f028 0807 	bic.w	r8, r8, #7
     f44:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
     f48:	e7ed      	b.n	f26 <cbvprintf_package+0x212>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     f4a:	9a05      	ldr	r2, [sp, #20]
     f4c:	3a01      	subs	r2, #1
     f4e:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
     f50:	f858 2b04 	ldr.w	r2, [r8], #4
     f54:	9200      	str	r2, [sp, #0]
     f56:	e70d      	b.n	d74 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
     f58:	9a03      	ldr	r2, [sp, #12]
     f5a:	0790      	lsls	r0, r2, #30
     f5c:	d520      	bpl.n	fa0 <cbvprintf_package+0x28c>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     f5e:	eba4 0e05 	sub.w	lr, r4, r5
     f62:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     f66:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     f6a:	f5be 7f00 	cmp.w	lr, #512	; 0x200
     f6e:	d2cf      	bcs.n	f10 <cbvprintf_package+0x1fc>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     f70:	2f0f      	cmp	r7, #15
     f72:	d8cd      	bhi.n	f10 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
     f74:	b1f5      	cbz	r5, fb4 <cbvprintf_package+0x2a0>
					str_ptr_pos[s_idx] = s_ptr_idx;
     f76:	f107 0240 	add.w	r2, r7, #64	; 0x40
     f7a:	eb0d 0e02 	add.w	lr, sp, r2
     f7e:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
     f80:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
     f82:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
     f86:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
     f8a:	f1bc 0f00 	cmp.w	ip, #0
     f8e:	f43f af17 	beq.w	dc0 <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     f92:	f060 007f 	orn	r0, r0, #127	; 0x7f
     f96:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
     f9a:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
     f9e:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
     fa0:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
     fa4:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
     fa6:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
     fa8:	f64f 7eda 	movw	lr, #65498	; 0xffda
     fac:	e797      	b.n	ede <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     fae:	f04f 0c00 	mov.w	ip, #0
     fb2:	e7da      	b.n	f6a <cbvprintf_package+0x256>
				} else if (is_ro) {
     fb4:	f1bc 0f00 	cmp.w	ip, #0
     fb8:	d001      	beq.n	fbe <cbvprintf_package+0x2aa>
					len += 1;
     fba:	3601      	adds	r6, #1
     fbc:	e7ef      	b.n	f9e <cbvprintf_package+0x28a>
				} else if (rws_pos_en) {
     fbe:	9802      	ldr	r0, [sp, #8]
					len += 2;
     fc0:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
     fc2:	2800      	cmp	r0, #0
     fc4:	d1eb      	bne.n	f9e <cbvprintf_package+0x28a>
					len += strlen(s) + 1 + 1;
     fc6:	9800      	ldr	r0, [sp, #0]
     fc8:	e9cd 3106 	strd	r3, r1, [sp, #24]
     fcc:	f006 f9a7 	bl	731e <strlen>
     fd0:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
     fd4:	4406      	add	r6, r0
     fd6:	e7e2      	b.n	f9e <cbvprintf_package+0x28a>
	if (BUF_OFFSET / sizeof(int) > 255) {
     fd8:	1b63      	subs	r3, r4, r5
     fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
     fde:	d297      	bcs.n	f10 <cbvprintf_package+0x1fc>
	if (buf0 == NULL) {
     fe0:	b945      	cbnz	r5, ff4 <cbvprintf_package+0x2e0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     fe2:	f1a6 0408 	sub.w	r4, r6, #8
     fe6:	18e0      	adds	r0, r4, r3
     fe8:	e6ae      	b.n	d48 <cbvprintf_package+0x34>
     fea:	bf00      	nop
     fec:	00007c1c 	.word	0x00007c1c
     ff0:	00008bc0 	.word	0x00008bc0
	if (rws_pos_en) {
     ff4:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
     ff6:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     ff8:	089b      	lsrs	r3, r3, #2
     ffa:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     ffc:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
    1000:	b1c2      	cbz	r2, 1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    1002:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    1004:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
    1008:	f1b9 0f00 	cmp.w	r9, #0
    100c:	d005      	beq.n	101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
    100e:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
    1010:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
    1012:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    1016:	4297      	cmp	r7, r2
    1018:	d10e      	bne.n	1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
		if (BUF_OFFSET + 1 + size > len) {
    101a:	f1c5 0301 	rsb	r3, r5, #1
    101e:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
    1022:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    1026:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
    1028:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    102c:	4557      	cmp	r7, sl
    102e:	d112      	bne.n	1056 <CONFIG_FPROTECT_BLOCK_SIZE+0x56>
	return BUF_OFFSET;
    1030:	1b60      	subs	r0, r4, r5
    1032:	e689      	b.n	d48 <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    1034:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    1036:	e7e5      	b.n	1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    1038:	f810 3b01 	ldrb.w	r3, [r0], #1
    103c:	0619      	lsls	r1, r3, #24
    103e:	d508      	bpl.n	1052 <CONFIG_FPROTECT_BLOCK_SIZE+0x52>
			if (BUF_OFFSET + 1 > len) {
    1040:	eb04 0e0c 	add.w	lr, r4, ip
    1044:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    1046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    104a:	f63f ae7b 	bhi.w	d44 <cbvprintf_package+0x30>
			*buf++ = pos;
    104e:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    1052:	3201      	adds	r2, #1
    1054:	e7df      	b.n	1016 <CONFIG_FPROTECT_BLOCK_SIZE+0x16>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    1056:	f1b9 0f00 	cmp.w	r9, #0
    105a:	d003      	beq.n	1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>
    105c:	f998 2000 	ldrsb.w	r2, [r8]
    1060:	2a00      	cmp	r2, #0
    1062:	db17      	blt.n	1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
		if (rws_pos_en) {
    1064:	9b02      	ldr	r3, [sp, #8]
    1066:	b1d3      	cbz	r3, 109e <CONFIG_FPROTECT_BLOCK_SIZE+0x9e>
			*buf++ = str_ptr_arg[i];
    1068:	f81a 200b 	ldrb.w	r2, [sl, fp]
    106c:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    1070:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    1072:	9b01      	ldr	r3, [sp, #4]
    1074:	1898      	adds	r0, r3, r2
    1076:	4420      	add	r0, r4
    1078:	42b0      	cmp	r0, r6
    107a:	f63f ae63 	bhi.w	d44 <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
    107e:	f898 0000 	ldrb.w	r0, [r8]
    1082:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
    1086:	9900      	ldr	r1, [sp, #0]
    1088:	9203      	str	r2, [sp, #12]
    108a:	4620      	mov	r0, r4
    108c:	f006 f957 	bl	733e <memcpy>
		buf += size;
    1090:	9a03      	ldr	r2, [sp, #12]
    1092:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    1094:	f10a 0a01 	add.w	sl, sl, #1
    1098:	f108 0801 	add.w	r8, r8, #1
    109c:	e7c6      	b.n	102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    109e:	f898 2000 	ldrb.w	r2, [r8]
    10a2:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    10a6:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    10a8:	9b02      	ldr	r3, [sp, #8]
    10aa:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    10ae:	9800      	ldr	r0, [sp, #0]
    10b0:	f006 f935 	bl	731e <strlen>
    10b4:	1c42      	adds	r2, r0, #1
    10b6:	e7dc      	b.n	1072 <CONFIG_FPROTECT_BLOCK_SIZE+0x72>
		return -EFAULT;
    10b8:	f06f 000d 	mvn.w	r0, #13
    10bc:	e644      	b.n	d48 <cbvprintf_package+0x34>
    10be:	bf00      	nop

000010c0 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    10c0:	4b01      	ldr	r3, [pc, #4]	; (10c8 <__printk_hook_install+0x8>)
    10c2:	6018      	str	r0, [r3, #0]
}
    10c4:	4770      	bx	lr
    10c6:	bf00      	nop
    10c8:	20000004 	.word	0x20000004

000010cc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    10cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    10d0:	8b05      	ldrh	r5, [r0, #24]
{
    10d2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    10d4:	0728      	lsls	r0, r5, #28
{
    10d6:	4690      	mov	r8, r2
	if (processing) {
    10d8:	d411      	bmi.n	10fe <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    10da:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    10dc:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    10e0:	f040 80cd 	bne.w	127e <process_event+0x1b2>
			evt = process_recheck(mgr);
    10e4:	4620      	mov	r0, r4
    10e6:	f005 fec4 	bl	6e72 <process_recheck>
		}

		if (evt == EVT_NOP) {
    10ea:	b178      	cbz	r0, 110c <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    10ec:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    10ee:	8b21      	ldrh	r1, [r4, #24]
    10f0:	2804      	cmp	r0, #4
    10f2:	d811      	bhi.n	1118 <process_event+0x4c>
    10f4:	e8df f000 	tbb	[pc, r0]
    10f8:	856d10c3 	.word	0x856d10c3
    10fc:	95          	.byte	0x95
    10fd:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    10fe:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1100:	bf0c      	ite	eq
    1102:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1106:	f045 0520 	orrne.w	r5, r5, #32
    110a:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    110c:	f388 8811 	msr	BASEPRI, r8
    1110:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1118:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    111c:	45aa      	cmp	sl, r5
    111e:	f000 80a6 	beq.w	126e <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    1122:	2700      	movs	r7, #0
    1124:	46b9      	mov	r9, r7
    1126:	463e      	mov	r6, r7
    1128:	68a3      	ldr	r3, [r4, #8]
    112a:	2b00      	cmp	r3, #0
    112c:	f000 80bd 	beq.w	12aa <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1130:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1134:	8321      	strh	r1, [r4, #24]
    1136:	f388 8811 	msr	BASEPRI, r8
    113a:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    113e:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1140:	2900      	cmp	r1, #0
    1142:	f000 80bb 	beq.w	12bc <process_event+0x1f0>
	return node->next;
    1146:	680d      	ldr	r5, [r1, #0]
    1148:	2900      	cmp	r1, #0
    114a:	f000 80b7 	beq.w	12bc <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    114e:	f8d1 8004 	ldr.w	r8, [r1, #4]
    1152:	4633      	mov	r3, r6
    1154:	4652      	mov	r2, sl
    1156:	4620      	mov	r0, r4
    1158:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    115a:	2d00      	cmp	r5, #0
    115c:	d076      	beq.n	124c <process_event+0x180>
    115e:	682b      	ldr	r3, [r5, #0]
    1160:	4629      	mov	r1, r5
    1162:	461d      	mov	r5, r3
    1164:	e7f0      	b.n	1148 <process_event+0x7c>
    1166:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    116a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    116c:	2a01      	cmp	r2, #1
    116e:	d81b      	bhi.n	11a8 <process_event+0xdc>
	list->head = NULL;
    1170:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1172:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1176:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1178:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    117a:	b289      	uxth	r1, r1
	list->tail = NULL;
    117c:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1180:	d109      	bne.n	1196 <process_event+0xca>
    1182:	463b      	mov	r3, r7
    1184:	e003      	b.n	118e <process_event+0xc2>
				mgr->refs += 1U;
    1186:	8b62      	ldrh	r2, [r4, #26]
    1188:	3201      	adds	r2, #1
    118a:	8362      	strh	r2, [r4, #26]
	return node->next;
    118c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    118e:	2b00      	cmp	r3, #0
    1190:	d1f9      	bne.n	1186 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1192:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1196:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1198:	4620      	mov	r0, r4
    119a:	f005 fe6a 	bl	6e72 <process_recheck>
    119e:	2800      	cmp	r0, #0
    11a0:	d07b      	beq.n	129a <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    11a2:	f041 0120 	orr.w	r1, r1, #32
    11a6:	e077      	b.n	1298 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    11a8:	2b04      	cmp	r3, #4
    11aa:	d10a      	bne.n	11c2 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    11ac:	f021 0107 	bic.w	r1, r1, #7
    11b0:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    11b2:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    11b4:	4620      	mov	r0, r4
    11b6:	f005 fe5c 	bl	6e72 <process_recheck>
    11ba:	b110      	cbz	r0, 11c2 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    11bc:	f041 0120 	orr.w	r1, r1, #32
    11c0:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    11c2:	8b21      	ldrh	r1, [r4, #24]
    11c4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    11c8:	45aa      	cmp	sl, r5
    11ca:	d050      	beq.n	126e <process_event+0x1a2>
    11cc:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    11ce:	46b9      	mov	r9, r7
    11d0:	e7aa      	b.n	1128 <process_event+0x5c>
			transit = mgr->transitions->start;
    11d2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    11d4:	f021 0107 	bic.w	r1, r1, #7
    11d8:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    11dc:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    11de:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    11e2:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    11e4:	d12d      	bne.n	1242 <process_event+0x176>
		    || (transit != NULL)) {
    11e6:	f1b9 0f00 	cmp.w	r9, #0
    11ea:	d040      	beq.n	126e <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    11ec:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    11f0:	8321      	strh	r1, [r4, #24]
    11f2:	f388 8811 	msr	BASEPRI, r8
    11f6:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    11fa:	493a      	ldr	r1, [pc, #232]	; (12e4 <process_event+0x218>)
    11fc:	4620      	mov	r0, r4
    11fe:	47c8      	blx	r9
    1200:	e029      	b.n	1256 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1202:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    1206:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1208:	f041 0104 	orr.w	r1, r1, #4
    120c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    120e:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    1210:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1214:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1216:	d0e6      	beq.n	11e6 <process_event+0x11a>
    1218:	2700      	movs	r7, #0
		res = 0;
    121a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    121c:	f04f 0a04 	mov.w	sl, #4
    1220:	e782      	b.n	1128 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1222:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    1226:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1228:	f041 0105 	orr.w	r1, r1, #5
    122c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    122e:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    1230:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1234:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1236:	d0d6      	beq.n	11e6 <process_event+0x11a>
    1238:	2700      	movs	r7, #0
		res = 0;
    123a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    123c:	f04f 0a05 	mov.w	sl, #5
    1240:	e772      	b.n	1128 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    1242:	2700      	movs	r7, #0
		res = 0;
    1244:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1246:	f04f 0a06 	mov.w	sl, #6
    124a:	e76d      	b.n	1128 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    124c:	462b      	mov	r3, r5
    124e:	e787      	b.n	1160 <process_event+0x94>
			if (transit != NULL) {
    1250:	f1b9 0f00 	cmp.w	r9, #0
    1254:	d1d1      	bne.n	11fa <process_event+0x12e>
	__asm__ volatile(
    1256:	f04f 0320 	mov.w	r3, #32
    125a:	f3ef 8811 	mrs	r8, BASEPRI
    125e:	f383 8812 	msr	BASEPRI_MAX, r3
    1262:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1266:	8b23      	ldrh	r3, [r4, #24]
    1268:	f023 0308 	bic.w	r3, r3, #8
    126c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    126e:	8b25      	ldrh	r5, [r4, #24]
    1270:	06ea      	lsls	r2, r5, #27
    1272:	d52e      	bpl.n	12d2 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1274:	f025 0310 	bic.w	r3, r5, #16
    1278:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    127a:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    127e:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1280:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1282:	2e00      	cmp	r6, #0
    1284:	f6bf af6f 	bge.w	1166 <process_event+0x9a>
	list->head = NULL;
    1288:	2300      	movs	r3, #0
		*clients = mgr->clients;
    128a:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    128c:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1290:	f021 0107 	bic.w	r1, r1, #7
    1294:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1298:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    129a:	8b21      	ldrh	r1, [r4, #24]
    129c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    12a0:	45aa      	cmp	sl, r5
    12a2:	f04f 0900 	mov.w	r9, #0
    12a6:	f47f af3f 	bne.w	1128 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    12aa:	2f00      	cmp	r7, #0
    12ac:	d09b      	beq.n	11e6 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    12ae:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    12b2:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    12b4:	f388 8811 	msr	BASEPRI, r8
    12b8:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    12bc:	2f00      	cmp	r7, #0
    12be:	d0c7      	beq.n	1250 <process_event+0x184>
	return node->next;
    12c0:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    12c2:	4639      	mov	r1, r7
    12c4:	4633      	mov	r3, r6
    12c6:	4652      	mov	r2, sl
    12c8:	4620      	mov	r0, r4
    12ca:	f005 fdfe 	bl	6eca <notify_one>
	list->head = node;
    12ce:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    12d0:	e7f4      	b.n	12bc <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    12d2:	06ab      	lsls	r3, r5, #26
    12d4:	f57f af1a 	bpl.w	110c <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    12d8:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    12dc:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    12de:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    12e2:	e6ff      	b.n	10e4 <process_event+0x18>
    12e4:	00006ef7 	.word	0x00006ef7

000012e8 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    12e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12ec:	b09f      	sub	sp, #124	; 0x7c
    12ee:	4682      	mov	sl, r0
    12f0:	9103      	str	r1, [sp, #12]
    12f2:	4616      	mov	r6, r2
    12f4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    12f6:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    12f8:	7830      	ldrb	r0, [r6, #0]
    12fa:	b910      	cbnz	r0, 1302 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    12fc:	4628      	mov	r0, r5
    12fe:	f000 bd8b 	b.w	1e18 <z_cbvprintf_impl+0xb30>
			OUTC(*fp++);
    1302:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
    1304:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    1306:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
    1308:	d006      	beq.n	1318 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
    130a:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
    130c:	47d0      	blx	sl
    130e:	2800      	cmp	r0, #0
    1310:	f2c0 8582 	blt.w	1e18 <z_cbvprintf_impl+0xb30>
    1314:	3501      	adds	r5, #1
		if (bps == NULL) {
    1316:	e22b      	b.n	1770 <z_cbvprintf_impl+0x488>
		} state = {
    1318:	2218      	movs	r2, #24
    131a:	2100      	movs	r1, #0
    131c:	a810      	add	r0, sp, #64	; 0x40
    131e:	f006 f819 	bl	7354 <memset>
	if (*sp == '%') {
    1322:	7873      	ldrb	r3, [r6, #1]
    1324:	2b25      	cmp	r3, #37	; 0x25
    1326:	d07d      	beq.n	1424 <z_cbvprintf_impl+0x13c>
    1328:	2300      	movs	r3, #0
    132a:	1c70      	adds	r0, r6, #1
    132c:	4698      	mov	r8, r3
    132e:	469e      	mov	lr, r3
    1330:	469c      	mov	ip, r3
    1332:	461f      	mov	r7, r3
    1334:	4601      	mov	r1, r0
		switch (*sp) {
    1336:	f810 2b01 	ldrb.w	r2, [r0], #1
    133a:	2a2b      	cmp	r2, #43	; 0x2b
    133c:	f000 80a1 	beq.w	1482 <z_cbvprintf_impl+0x19a>
    1340:	f200 8098 	bhi.w	1474 <z_cbvprintf_impl+0x18c>
    1344:	2a20      	cmp	r2, #32
    1346:	f000 809f 	beq.w	1488 <z_cbvprintf_impl+0x1a0>
    134a:	2a23      	cmp	r2, #35	; 0x23
    134c:	f000 809f 	beq.w	148e <z_cbvprintf_impl+0x1a6>
    1350:	b12b      	cbz	r3, 135e <z_cbvprintf_impl+0x76>
    1352:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    135a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    135e:	f1b8 0f00 	cmp.w	r8, #0
    1362:	d005      	beq.n	1370 <z_cbvprintf_impl+0x88>
    1364:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1368:	f043 0320 	orr.w	r3, r3, #32
    136c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    1370:	f1be 0f00 	cmp.w	lr, #0
    1374:	d005      	beq.n	1382 <z_cbvprintf_impl+0x9a>
    1376:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    137a:	f043 0310 	orr.w	r3, r3, #16
    137e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    1382:	f1bc 0f00 	cmp.w	ip, #0
    1386:	d005      	beq.n	1394 <z_cbvprintf_impl+0xac>
    1388:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    138c:	f043 0308 	orr.w	r3, r3, #8
    1390:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    1394:	b12f      	cbz	r7, 13a2 <z_cbvprintf_impl+0xba>
    1396:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    139a:	f043 0304 	orr.w	r3, r3, #4
    139e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    13a2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    13a6:	f003 0044 	and.w	r0, r3, #68	; 0x44
    13aa:	2844      	cmp	r0, #68	; 0x44
    13ac:	d103      	bne.n	13b6 <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
    13ae:	f36f 1386 	bfc	r3, #6, #1
    13b2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    13b6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    13ba:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    13bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    13c0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    13c4:	d17f      	bne.n	14c6 <z_cbvprintf_impl+0x1de>
		conv->width_star = true;
    13c6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    13ca:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
    13ce:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    13d0:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	conv->prec_present = (*sp == '.');
    13d4:	781a      	ldrb	r2, [r3, #0]
    13d6:	2a2e      	cmp	r2, #46	; 0x2e
    13d8:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    13dc:	bf0c      	ite	eq
    13de:	2101      	moveq	r1, #1
    13e0:	2100      	movne	r1, #0
    13e2:	f361 0241 	bfi	r2, r1, #1, #1
    13e6:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    13ea:	d178      	bne.n	14de <z_cbvprintf_impl+0x1f6>
	if (*sp == '*') {
    13ec:	785a      	ldrb	r2, [r3, #1]
    13ee:	2a2a      	cmp	r2, #42	; 0x2a
    13f0:	d06e      	beq.n	14d0 <z_cbvprintf_impl+0x1e8>
	++sp;
    13f2:	3301      	adds	r3, #1
	size_t val = 0;
    13f4:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    13f6:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    13fa:	4619      	mov	r1, r3
    13fc:	f811 0b01 	ldrb.w	r0, [r1], #1
    1400:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    1404:	2f09      	cmp	r7, #9
    1406:	f240 80af 	bls.w	1568 <z_cbvprintf_impl+0x280>
	conv->unsupported |= ((conv->prec_value < 0)
    140a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
	conv->prec_value = prec;
    140e:	9214      	str	r2, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    1410:	f3c1 0040 	ubfx	r0, r1, #1, #1
    1414:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    1418:	460a      	mov	r2, r1
    141a:	f360 0241 	bfi	r2, r0, #1, #1
    141e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    1422:	e05c      	b.n	14de <z_cbvprintf_impl+0x1f6>
		conv->specifier = *sp++;
    1424:	1cb2      	adds	r2, r6, #2
    1426:	9206      	str	r2, [sp, #24]
    1428:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    142c:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    1430:	07df      	lsls	r7, r3, #31
    1432:	f140 8154 	bpl.w	16de <z_cbvprintf_impl+0x3f6>
			width = va_arg(ap, int);
    1436:	f854 2b04 	ldr.w	r2, [r4], #4
    143a:	9204      	str	r2, [sp, #16]
			if (width < 0) {
    143c:	2a00      	cmp	r2, #0
    143e:	da08      	bge.n	1452 <z_cbvprintf_impl+0x16a>
				conv->flag_dash = true;
    1440:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    1444:	f042 0204 	orr.w	r2, r2, #4
    1448:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
    144c:	9a04      	ldr	r2, [sp, #16]
    144e:	4252      	negs	r2, r2
		int width = -1;
    1450:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
    1452:	0758      	lsls	r0, r3, #29
    1454:	f140 814b 	bpl.w	16ee <z_cbvprintf_impl+0x406>
			int arg = va_arg(ap, int);
    1458:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    145c:	2f00      	cmp	r7, #0
    145e:	f280 814a 	bge.w	16f6 <z_cbvprintf_impl+0x40e>
				conv->prec_present = false;
    1462:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    1466:	f36f 0341 	bfc	r3, #1, #1
    146a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    146e:	f04f 37ff 	mov.w	r7, #4294967295
    1472:	e140      	b.n	16f6 <z_cbvprintf_impl+0x40e>
		switch (*sp) {
    1474:	2a2d      	cmp	r2, #45	; 0x2d
    1476:	d00d      	beq.n	1494 <z_cbvprintf_impl+0x1ac>
    1478:	2a30      	cmp	r2, #48	; 0x30
    147a:	f47f af69 	bne.w	1350 <z_cbvprintf_impl+0x68>
    147e:	2301      	movs	r3, #1
	} while (loop);
    1480:	e758      	b.n	1334 <z_cbvprintf_impl+0x4c>
		switch (*sp) {
    1482:	f04f 0c01 	mov.w	ip, #1
    1486:	e755      	b.n	1334 <z_cbvprintf_impl+0x4c>
    1488:	f04f 0e01 	mov.w	lr, #1
    148c:	e752      	b.n	1334 <z_cbvprintf_impl+0x4c>
    148e:	f04f 0801 	mov.w	r8, #1
    1492:	e74f      	b.n	1334 <z_cbvprintf_impl+0x4c>
    1494:	2701      	movs	r7, #1
    1496:	e74d      	b.n	1334 <z_cbvprintf_impl+0x4c>
		val = 10U * val + *sp++ - '0';
    1498:	fb0e 7202 	mla	r2, lr, r2, r7
    149c:	3a30      	subs	r2, #48	; 0x30
    149e:	4603      	mov	r3, r0
    14a0:	4618      	mov	r0, r3
    14a2:	f810 7b01 	ldrb.w	r7, [r0], #1
    14a6:	f1a7 0c30 	sub.w	ip, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    14aa:	f1bc 0f09 	cmp.w	ip, #9
    14ae:	d9f3      	bls.n	1498 <z_cbvprintf_impl+0x1b0>
	if (sp != wp) {
    14b0:	4299      	cmp	r1, r3
    14b2:	d08f      	beq.n	13d4 <z_cbvprintf_impl+0xec>
		conv->unsupported |= ((conv->width_value < 0)
    14b4:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
		conv->width_value = width;
    14b8:	9213      	str	r2, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    14ba:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    14bc:	f362 0141 	bfi	r1, r2, #1, #1
    14c0:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
    14c4:	e786      	b.n	13d4 <z_cbvprintf_impl+0xec>
    14c6:	460b      	mov	r3, r1
	size_t val = 0;
    14c8:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    14ca:	f04f 0e0a 	mov.w	lr, #10
    14ce:	e7e7      	b.n	14a0 <z_cbvprintf_impl+0x1b8>
		conv->prec_star = true;
    14d0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    14d4:	f042 0204 	orr.w	r2, r2, #4
    14d8:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    14dc:	3302      	adds	r3, #2
	switch (*sp) {
    14de:	781a      	ldrb	r2, [r3, #0]
    14e0:	2a6c      	cmp	r2, #108	; 0x6c
    14e2:	d061      	beq.n	15a8 <z_cbvprintf_impl+0x2c0>
    14e4:	d845      	bhi.n	1572 <z_cbvprintf_impl+0x28a>
    14e6:	2a68      	cmp	r2, #104	; 0x68
    14e8:	d04b      	beq.n	1582 <z_cbvprintf_impl+0x29a>
    14ea:	2a6a      	cmp	r2, #106	; 0x6a
    14ec:	d065      	beq.n	15ba <z_cbvprintf_impl+0x2d2>
    14ee:	2a4c      	cmp	r2, #76	; 0x4c
    14f0:	d06b      	beq.n	15ca <z_cbvprintf_impl+0x2e2>
	conv->specifier = *sp++;
    14f2:	f813 2b01 	ldrb.w	r2, [r3], #1
    14f6:	9306      	str	r3, [sp, #24]
	switch (conv->specifier) {
    14f8:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    14fa:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
    14fe:	f200 80ad 	bhi.w	165c <z_cbvprintf_impl+0x374>
    1502:	2a6d      	cmp	r2, #109	; 0x6d
    1504:	d86e      	bhi.n	15e4 <z_cbvprintf_impl+0x2fc>
    1506:	2a69      	cmp	r2, #105	; 0x69
    1508:	f200 80a8 	bhi.w	165c <z_cbvprintf_impl+0x374>
    150c:	2a57      	cmp	r2, #87	; 0x57
    150e:	f200 8088 	bhi.w	1622 <z_cbvprintf_impl+0x33a>
    1512:	2a41      	cmp	r2, #65	; 0x41
    1514:	d004      	beq.n	1520 <z_cbvprintf_impl+0x238>
    1516:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    151a:	2b02      	cmp	r3, #2
    151c:	f200 809e 	bhi.w	165c <z_cbvprintf_impl+0x374>
		conv->specifier_cat = SPECIFIER_FP;
    1520:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
    1524:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    1528:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    152a:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    152e:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    1532:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
    1536:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->specifier_cat = SPECIFIER_FP;
    153a:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
    153e:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
    1542:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    1546:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    1548:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
    154c:	b2cb      	uxtb	r3, r1
    154e:	f100 80c4 	bmi.w	16da <z_cbvprintf_impl+0x3f2>
		if (conv->length_mod == LENGTH_L) {
    1552:	f003 0278 	and.w	r2, r3, #120	; 0x78
    1556:	2a18      	cmp	r2, #24
    1558:	f040 80ae 	bne.w	16b8 <z_cbvprintf_impl+0x3d0>
			conv->length_mod = LENGTH_NONE;
    155c:	f36f 03c6 	bfc	r3, #3, #4
    1560:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
    1564:	2300      	movs	r3, #0
    1566:	e09d      	b.n	16a4 <z_cbvprintf_impl+0x3bc>
		val = 10U * val + *sp++ - '0';
    1568:	fb0c 0202 	mla	r2, ip, r2, r0
    156c:	3a30      	subs	r2, #48	; 0x30
    156e:	460b      	mov	r3, r1
    1570:	e743      	b.n	13fa <z_cbvprintf_impl+0x112>
	switch (*sp) {
    1572:	2a74      	cmp	r2, #116	; 0x74
    1574:	d025      	beq.n	15c2 <z_cbvprintf_impl+0x2da>
    1576:	2a7a      	cmp	r2, #122	; 0x7a
    1578:	d1bb      	bne.n	14f2 <z_cbvprintf_impl+0x20a>
		conv->length_mod = LENGTH_Z;
    157a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    157e:	2106      	movs	r1, #6
    1580:	e00c      	b.n	159c <z_cbvprintf_impl+0x2b4>
		if (*++sp == 'h') {
    1582:	785a      	ldrb	r2, [r3, #1]
    1584:	2a68      	cmp	r2, #104	; 0x68
    1586:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    158a:	d106      	bne.n	159a <z_cbvprintf_impl+0x2b2>
			conv->length_mod = LENGTH_HH;
    158c:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    158e:	f361 02c6 	bfi	r2, r1, #3, #4
    1592:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    1596:	3302      	adds	r3, #2
    1598:	e7ab      	b.n	14f2 <z_cbvprintf_impl+0x20a>
			conv->length_mod = LENGTH_H;
    159a:	2102      	movs	r1, #2
    159c:	f361 02c6 	bfi	r2, r1, #3, #4
    15a0:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    15a4:	3301      	adds	r3, #1
    15a6:	e7a4      	b.n	14f2 <z_cbvprintf_impl+0x20a>
		if (*++sp == 'l') {
    15a8:	785a      	ldrb	r2, [r3, #1]
    15aa:	2a6c      	cmp	r2, #108	; 0x6c
    15ac:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    15b0:	d101      	bne.n	15b6 <z_cbvprintf_impl+0x2ce>
			conv->length_mod = LENGTH_LL;
    15b2:	2104      	movs	r1, #4
    15b4:	e7eb      	b.n	158e <z_cbvprintf_impl+0x2a6>
			conv->length_mod = LENGTH_L;
    15b6:	2103      	movs	r1, #3
    15b8:	e7f0      	b.n	159c <z_cbvprintf_impl+0x2b4>
		conv->length_mod = LENGTH_J;
    15ba:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    15be:	2105      	movs	r1, #5
    15c0:	e7ec      	b.n	159c <z_cbvprintf_impl+0x2b4>
		conv->length_mod = LENGTH_T;
    15c2:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    15c6:	2107      	movs	r1, #7
    15c8:	e7e8      	b.n	159c <z_cbvprintf_impl+0x2b4>
		conv->unsupported = true;
    15ca:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    15ce:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    15d2:	f022 0202 	bic.w	r2, r2, #2
    15d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    15da:	f042 0202 	orr.w	r2, r2, #2
    15de:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    15e2:	e7df      	b.n	15a4 <z_cbvprintf_impl+0x2bc>
	switch (conv->specifier) {
    15e4:	3a6e      	subs	r2, #110	; 0x6e
    15e6:	b2d3      	uxtb	r3, r2
    15e8:	2201      	movs	r2, #1
    15ea:	409a      	lsls	r2, r3
    15ec:	f240 4382 	movw	r3, #1154	; 0x482
    15f0:	421a      	tst	r2, r3
    15f2:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    15f6:	d138      	bne.n	166a <z_cbvprintf_impl+0x382>
    15f8:	f012 0f24 	tst.w	r2, #36	; 0x24
    15fc:	d160      	bne.n	16c0 <z_cbvprintf_impl+0x3d8>
    15fe:	07d1      	lsls	r1, r2, #31
    1600:	d52c      	bpl.n	165c <z_cbvprintf_impl+0x374>
		conv->specifier_cat = SPECIFIER_PTR;
    1602:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    1606:	f003 0378 	and.w	r3, r3, #120	; 0x78
    160a:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    160e:	2103      	movs	r1, #3
    1610:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1614:	f1dc 0300 	rsbs	r3, ip, #0
		conv->specifier_cat = SPECIFIER_PTR;
    1618:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    161c:	eb43 030c 	adc.w	r3, r3, ip
    1620:	e040      	b.n	16a4 <z_cbvprintf_impl+0x3bc>
	switch (conv->specifier) {
    1622:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    1626:	b2c9      	uxtb	r1, r1
    1628:	2001      	movs	r0, #1
    162a:	fa00 f101 	lsl.w	r1, r0, r1
    162e:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    1632:	f47f af75 	bne.w	1520 <z_cbvprintf_impl+0x238>
    1636:	f640 0301 	movw	r3, #2049	; 0x801
    163a:	4219      	tst	r1, r3
    163c:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    1640:	d119      	bne.n	1676 <z_cbvprintf_impl+0x38e>
    1642:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    1646:	d009      	beq.n	165c <z_cbvprintf_impl+0x374>
		conv->specifier_cat = SPECIFIER_SINT;
    1648:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    164c:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1650:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1654:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1656:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    165a:	d183      	bne.n	1564 <z_cbvprintf_impl+0x27c>
		conv->invalid = true;
    165c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1660:	f043 0301 	orr.w	r3, r3, #1
    1664:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    1668:	e77c      	b.n	1564 <z_cbvprintf_impl+0x27c>
		conv->specifier_cat = SPECIFIER_UINT;
    166a:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    166e:	2102      	movs	r1, #2
    1670:	f361 0202 	bfi	r2, r1, #0, #3
    1674:	e7ec      	b.n	1650 <z_cbvprintf_impl+0x368>
    1676:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    167a:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    167c:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    1680:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1684:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1686:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    168a:	bf02      	ittt	eq
    168c:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    1690:	f041 0101 	orreq.w	r1, r1, #1
    1694:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    1698:	2a63      	cmp	r2, #99	; 0x63
    169a:	f47f af63 	bne.w	1564 <z_cbvprintf_impl+0x27c>
			unsupported = (conv->length_mod != LENGTH_NONE);
    169e:	3b00      	subs	r3, #0
    16a0:	bf18      	it	ne
    16a2:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    16a4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    16a8:	f3c2 0140 	ubfx	r1, r2, #1, #1
    16ac:	430b      	orrs	r3, r1
    16ae:	f363 0241 	bfi	r2, r3, #1, #1
    16b2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    16b6:	e6b9      	b.n	142c <z_cbvprintf_impl+0x144>
		} else if ((conv->length_mod != LENGTH_NONE)
    16b8:	f013 0f38 	tst.w	r3, #56	; 0x38
    16bc:	d1ce      	bne.n	165c <z_cbvprintf_impl+0x374>
    16be:	e751      	b.n	1564 <z_cbvprintf_impl+0x27c>
		conv->specifier_cat = SPECIFIER_PTR;
    16c0:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    16c4:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    16c6:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    16ca:	f361 0202 	bfi	r2, r1, #0, #3
    16ce:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    16d2:	bf14      	ite	ne
    16d4:	2301      	movne	r3, #1
    16d6:	2300      	moveq	r3, #0
    16d8:	e7e4      	b.n	16a4 <z_cbvprintf_impl+0x3bc>
			unsupported = true;
    16da:	2301      	movs	r3, #1
    16dc:	e7e2      	b.n	16a4 <z_cbvprintf_impl+0x3bc>
		} else if (conv->width_present) {
    16de:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    16e2:	2a00      	cmp	r2, #0
			width = conv->width_value;
    16e4:	bfb4      	ite	lt
    16e6:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
		int width = -1;
    16e8:	f04f 32ff 	movge.w	r2, #4294967295
    16ec:	e6b0      	b.n	1450 <z_cbvprintf_impl+0x168>
		} else if (conv->prec_present) {
    16ee:	0799      	lsls	r1, r3, #30
    16f0:	f57f aebd 	bpl.w	146e <z_cbvprintf_impl+0x186>
			precision = conv->prec_value;
    16f4:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    16f6:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    16fa:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    16fc:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
    1700:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    1704:	f003 0207 	and.w	r2, r3, #7
    1708:	2a04      	cmp	r2, #4
    170a:	d107      	bne.n	171c <z_cbvprintf_impl+0x434>
		    && !conv->prec_present) {
    170c:	078a      	lsls	r2, r1, #30
    170e:	d405      	bmi.n	171c <z_cbvprintf_impl+0x434>
			if (conv->specifier_a) {
    1710:	f99d 2049 	ldrsb.w	r2, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
    1714:	2a00      	cmp	r2, #0
    1716:	bfac      	ite	ge
    1718:	2706      	movge	r7, #6
    171a:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
    171c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1720:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1722:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1726:	d133      	bne.n	1790 <z_cbvprintf_impl+0x4a8>
			switch (length_mod) {
    1728:	1ecb      	subs	r3, r1, #3
    172a:	2b04      	cmp	r3, #4
    172c:	d804      	bhi.n	1738 <z_cbvprintf_impl+0x450>
    172e:	e8df f003 	tbb	[pc, r3]
    1732:	4621      	.short	0x4621
    1734:	2146      	.short	0x2146
    1736:	21          	.byte	0x21
    1737:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    1738:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    173a:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    173c:	ea4f 72e3 	mov.w	r2, r3, asr #31
    1740:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    1744:	d11c      	bne.n	1780 <z_cbvprintf_impl+0x498>
				value->sint = (signed char)value->sint;
    1746:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    174a:	17da      	asrs	r2, r3, #31
    174c:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    1750:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    1752:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1756:	9307      	str	r3, [sp, #28]
    1758:	079b      	lsls	r3, r3, #30
    175a:	d050      	beq.n	17fe <z_cbvprintf_impl+0x516>
			OUTS(sp, fp);
    175c:	9b06      	ldr	r3, [sp, #24]
    175e:	9903      	ldr	r1, [sp, #12]
    1760:	4632      	mov	r2, r6
    1762:	4650      	mov	r0, sl
    1764:	f005 fcd3 	bl	710e <outs>
    1768:	2800      	cmp	r0, #0
    176a:	f2c0 8355 	blt.w	1e18 <z_cbvprintf_impl+0xb30>
    176e:	4405      	add	r5, r0
			continue;
    1770:	9e06      	ldr	r6, [sp, #24]
    1772:	e5c1      	b.n	12f8 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1774:	f854 3b04 	ldr.w	r3, [r4], #4
    1778:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    177a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    177e:	e7e8      	b.n	1752 <z_cbvprintf_impl+0x46a>
			} else if (length_mod == LENGTH_H) {
    1780:	2902      	cmp	r1, #2
    1782:	d1e5      	bne.n	1750 <z_cbvprintf_impl+0x468>
				value->sint = (short)value->sint;
    1784:	b21a      	sxth	r2, r3
    1786:	f343 33c0 	sbfx	r3, r3, #15, #1
    178a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    178e:	e7df      	b.n	1750 <z_cbvprintf_impl+0x468>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1790:	2b02      	cmp	r3, #2
    1792:	d124      	bne.n	17de <z_cbvprintf_impl+0x4f6>
			switch (length_mod) {
    1794:	1ecb      	subs	r3, r1, #3
    1796:	2b04      	cmp	r3, #4
    1798:	d804      	bhi.n	17a4 <z_cbvprintf_impl+0x4bc>
    179a:	e8df f003 	tbb	[pc, r3]
    179e:	1018      	.short	0x1018
    17a0:	1810      	.short	0x1810
    17a2:	18          	.byte	0x18
    17a3:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    17a4:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    17a6:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    17aa:	f04f 0200 	mov.w	r2, #0
    17ae:	d014      	beq.n	17da <z_cbvprintf_impl+0x4f2>
			} else if (length_mod == LENGTH_H) {
    17b0:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    17b2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    17b6:	d1cc      	bne.n	1752 <z_cbvprintf_impl+0x46a>
				value->uint = (unsigned short)value->uint;
    17b8:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    17ba:	9310      	str	r3, [sp, #64]	; 0x40
    17bc:	e7c9      	b.n	1752 <z_cbvprintf_impl+0x46a>
					(uint_value_type)va_arg(ap,
    17be:	3407      	adds	r4, #7
    17c0:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    17c4:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    17c8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    17cc:	e7c1      	b.n	1752 <z_cbvprintf_impl+0x46a>
					(uint_value_type)va_arg(ap, size_t);
    17ce:	f854 3b04 	ldr.w	r3, [r4], #4
    17d2:	9310      	str	r3, [sp, #64]	; 0x40
    17d4:	2300      	movs	r3, #0
    17d6:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    17d8:	e7bb      	b.n	1752 <z_cbvprintf_impl+0x46a>
				value->uint = (unsigned char)value->uint;
    17da:	b2db      	uxtb	r3, r3
    17dc:	e7cd      	b.n	177a <z_cbvprintf_impl+0x492>
		} else if (specifier_cat == SPECIFIER_FP) {
    17de:	2b04      	cmp	r3, #4
    17e0:	d108      	bne.n	17f4 <z_cbvprintf_impl+0x50c>
					(sint_value_type)va_arg(ap, long long);
    17e2:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    17e4:	f024 0407 	bic.w	r4, r4, #7
    17e8:	e9d4 2300 	ldrd	r2, r3, [r4]
    17ec:	3408      	adds	r4, #8
    17ee:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    17f2:	e7ae      	b.n	1752 <z_cbvprintf_impl+0x46a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    17f4:	2b03      	cmp	r3, #3
    17f6:	d1ac      	bne.n	1752 <z_cbvprintf_impl+0x46a>
			value->ptr = va_arg(ap, void *);
    17f8:	f854 3b04 	ldr.w	r3, [r4], #4
    17fc:	e7dd      	b.n	17ba <z_cbvprintf_impl+0x4d2>
		switch (conv->specifier) {
    17fe:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
    1802:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
    1806:	d8b3      	bhi.n	1770 <z_cbvprintf_impl+0x488>
    1808:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
    180c:	d849      	bhi.n	18a2 <z_cbvprintf_impl+0x5ba>
    180e:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    1812:	f000 8091 	beq.w	1938 <z_cbvprintf_impl+0x650>
    1816:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
    181a:	d9a9      	bls.n	1770 <z_cbvprintf_impl+0x488>
    181c:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
    1820:	d003      	beq.n	182a <z_cbvprintf_impl+0x542>
    1822:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
    1826:	2a02      	cmp	r2, #2
    1828:	d8a2      	bhi.n	1770 <z_cbvprintf_impl+0x488>
	} u = {
    182a:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
    182e:	2a00      	cmp	r2, #0
    1830:	f2c0 8136 	blt.w	1aa0 <z_cbvprintf_impl+0x7b8>
	} else if (conv->flag_plus) {
    1834:	9b07      	ldr	r3, [sp, #28]
    1836:	0718      	lsls	r0, r3, #28
    1838:	f100 8135 	bmi.w	1aa6 <z_cbvprintf_impl+0x7be>
	} else if (conv->flag_space) {
    183c:	f3c3 1900 	ubfx	r9, r3, #4, #1
    1840:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    1844:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    1848:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
    184c:	2800      	cmp	r0, #0
    184e:	f040 812d 	bne.w	1aac <z_cbvprintf_impl+0x7c4>
    1852:	ea51 0602 	orrs.w	r6, r1, r2
    1856:	bf14      	ite	ne
    1858:	2601      	movne	r6, #1
    185a:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
    185c:	02d2      	lsls	r2, r2, #11
    185e:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
    1862:	02c9      	lsls	r1, r1, #11
		c = 'f';
    1864:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
    1868:	ea40 0e01 	orr.w	lr, r0, r1
    186c:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
		c = 'f';
    1870:	bf08      	it	eq
    1872:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
    1876:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    187a:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
    187e:	f000 8199 	beq.w	1bb4 <z_cbvprintf_impl+0x8cc>
		if (is_subnormal) {
    1882:	2e00      	cmp	r6, #0
    1884:	f040 8144 	bne.w	1b10 <z_cbvprintf_impl+0x828>
		fract |= BIT_63;
    1888:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    188a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    188e:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
    1892:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    1894:	2000      	movs	r0, #0
    1896:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
    189a:	4606      	mov	r6, r0
		fract *= 5U;
    189c:	f04f 0c05 	mov.w	ip, #5
    18a0:	e150      	b.n	1b44 <z_cbvprintf_impl+0x85c>
		switch (conv->specifier) {
    18a2:	f1ab 0258 	sub.w	r2, fp, #88	; 0x58
    18a6:	2a20      	cmp	r2, #32
    18a8:	f63f af62 	bhi.w	1770 <z_cbvprintf_impl+0x488>
    18ac:	a001      	add	r0, pc, #4	; (adr r0, 18b4 <z_cbvprintf_impl+0x5cc>)
    18ae:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    18b2:	bf00      	nop
    18b4:	00001a3f 	.word	0x00001a3f
    18b8:	00001771 	.word	0x00001771
    18bc:	00001771 	.word	0x00001771
    18c0:	00001771 	.word	0x00001771
    18c4:	00001771 	.word	0x00001771
    18c8:	00001771 	.word	0x00001771
    18cc:	00001771 	.word	0x00001771
    18d0:	00001771 	.word	0x00001771
    18d4:	00001771 	.word	0x00001771
    18d8:	0000182b 	.word	0x0000182b
    18dc:	00001771 	.word	0x00001771
    18e0:	000019c3 	.word	0x000019c3
    18e4:	000019d7 	.word	0x000019d7
    18e8:	0000182b 	.word	0x0000182b
    18ec:	0000182b 	.word	0x0000182b
    18f0:	0000182b 	.word	0x0000182b
    18f4:	00001771 	.word	0x00001771
    18f8:	000019d7 	.word	0x000019d7
    18fc:	00001771 	.word	0x00001771
    1900:	00001771 	.word	0x00001771
    1904:	00001771 	.word	0x00001771
    1908:	00001771 	.word	0x00001771
    190c:	00001a79 	.word	0x00001a79
    1910:	00001a3f 	.word	0x00001a3f
    1914:	00001a45 	.word	0x00001a45
    1918:	00001771 	.word	0x00001771
    191c:	00001771 	.word	0x00001771
    1920:	0000193f 	.word	0x0000193f
    1924:	00001771 	.word	0x00001771
    1928:	00001a3f 	.word	0x00001a3f
    192c:	00001771 	.word	0x00001771
    1930:	00001771 	.word	0x00001771
    1934:	00001a3f 	.word	0x00001a3f
			OUTC('%');
    1938:	9903      	ldr	r1, [sp, #12]
    193a:	4658      	mov	r0, fp
    193c:	e4e6      	b.n	130c <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
    193e:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    1940:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
    1942:	db3a      	blt.n	19ba <z_cbvprintf_impl+0x6d2>
				len = strnlen(bps, precision);
    1944:	4639      	mov	r1, r7
    1946:	4630      	mov	r0, r6
    1948:	f005 fcf0 	bl	732c <strnlen>
			bpe = bps + len;
    194c:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
    194e:	2e00      	cmp	r6, #0
    1950:	f43f af0e 	beq.w	1770 <z_cbvprintf_impl+0x488>
		char sign = 0;
    1954:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
    1958:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    195c:	f013 0210 	ands.w	r2, r3, #16
    1960:	9205      	str	r2, [sp, #20]
    1962:	f000 824e 	beq.w	1e02 <z_cbvprintf_impl+0xb1a>
			nj_len += 2U;
    1966:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    1968:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
    196c:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
    1970:	9308      	str	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
    1972:	bf18      	it	ne
    1974:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    1976:	f8cd 801c 	str.w	r8, [sp, #28]
    197a:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
    197c:	bf18      	it	ne
    197e:	18c0      	addne	r0, r0, r3
		if (width > 0) {
    1980:	9b04      	ldr	r3, [sp, #16]
    1982:	2b00      	cmp	r3, #0
    1984:	f340 8258 	ble.w	1e38 <z_cbvprintf_impl+0xb50>
			if (!conv->flag_dash) {
    1988:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    198c:	1a1b      	subs	r3, r3, r0
    198e:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
    1990:	0753      	lsls	r3, r2, #29
    1992:	f3c2 0b80 	ubfx	fp, r2, #2, #1
    1996:	f100 824f 	bmi.w	1e38 <z_cbvprintf_impl+0xb50>
				if (conv->flag_zero) {
    199a:	0650      	lsls	r0, r2, #25
    199c:	f140 823f 	bpl.w	1e1e <z_cbvprintf_impl+0xb36>
					if (sign != 0) {
    19a0:	f1b9 0f00 	cmp.w	r9, #0
    19a4:	d007      	beq.n	19b6 <z_cbvprintf_impl+0x6ce>
						OUTC(sign);
    19a6:	9903      	ldr	r1, [sp, #12]
    19a8:	4648      	mov	r0, r9
    19aa:	47d0      	blx	sl
    19ac:	2800      	cmp	r0, #0
    19ae:	f2c0 8233 	blt.w	1e18 <z_cbvprintf_impl+0xb30>
    19b2:	3501      	adds	r5, #1
						sign = 0;
    19b4:	46d9      	mov	r9, fp
					pad = '0';
    19b6:	2230      	movs	r2, #48	; 0x30
    19b8:	e232      	b.n	1e20 <z_cbvprintf_impl+0xb38>
				len = strlen(bps);
    19ba:	4630      	mov	r0, r6
    19bc:	f005 fcaf 	bl	731e <strlen>
    19c0:	e7c4      	b.n	194c <z_cbvprintf_impl+0x664>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    19c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    19c4:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		char sign = 0;
    19c8:	f04f 0900 	mov.w	r9, #0
			bpe = buf + 1;
    19cc:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
    19d0:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
    19d2:	2001      	movs	r0, #1
    19d4:	e7c0      	b.n	1958 <z_cbvprintf_impl+0x670>
			if (conv->flag_plus) {
    19d6:	9b07      	ldr	r3, [sp, #28]
    19d8:	071e      	lsls	r6, r3, #28
			} else if (conv->flag_space) {
    19da:	bf58      	it	pl
    19dc:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
			sint = value->sint;
    19e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
    19e4:	bf54      	ite	pl
    19e6:	ea4f 1949 	movpl.w	r9, r9, lsl #5
				sign = '+';
    19ea:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			if (sint < 0) {
    19ee:	2b00      	cmp	r3, #0
    19f0:	da06      	bge.n	1a00 <z_cbvprintf_impl+0x718>
				value->uint = (uint_value_type)-sint;
    19f2:	4252      	negs	r2, r2
    19f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    19f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
    19fc:	f04f 092d 	mov.w	r9, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    1a00:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    1a04:	9300      	str	r3, [sp, #0]
    1a06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1a0a:	ab17      	add	r3, sp, #92	; 0x5c
    1a0c:	aa12      	add	r2, sp, #72	; 0x48
    1a0e:	f005 fb38 	bl	7082 <encode_uint>
    1a12:	4606      	mov	r6, r0
			if (precision >= 0) {
    1a14:	2f00      	cmp	r7, #0
    1a16:	db0c      	blt.n	1a32 <z_cbvprintf_impl+0x74a>
				conv->flag_zero = false;
    1a18:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    1a1c:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    1a20:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
    1a22:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1a26:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    1a28:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    1a2c:	d901      	bls.n	1a32 <z_cbvprintf_impl+0x74a>
					conv->pad0_value = precision - (int)len;
    1a2e:	1afb      	subs	r3, r7, r3
    1a30:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
    1a32:	2e00      	cmp	r6, #0
    1a34:	f43f ae9c 	beq.w	1770 <z_cbvprintf_impl+0x488>
    1a38:	f10d 0775 	add.w	r7, sp, #117	; 0x75
    1a3c:	e056      	b.n	1aec <z_cbvprintf_impl+0x804>
		switch (conv->specifier) {
    1a3e:	f04f 0900 	mov.w	r9, #0
    1a42:	e7dd      	b.n	1a00 <z_cbvprintf_impl+0x718>
			if (value->ptr != NULL) {
    1a44:	9810      	ldr	r0, [sp, #64]	; 0x40
    1a46:	2800      	cmp	r0, #0
    1a48:	f000 81d6 	beq.w	1df8 <z_cbvprintf_impl+0xb10>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1a4c:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    1a50:	9300      	str	r3, [sp, #0]
    1a52:	aa12      	add	r2, sp, #72	; 0x48
    1a54:	ab17      	add	r3, sp, #92	; 0x5c
    1a56:	2100      	movs	r1, #0
    1a58:	f005 fb13 	bl	7082 <encode_uint>
				conv->altform_0c = true;
    1a5c:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
    1a60:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1a64:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1a68:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1a6c:	4606      	mov	r6, r0
				conv->altform_0c = true;
    1a6e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
		char sign = 0;
    1a72:	f04f 0900 	mov.w	r9, #0
				goto prec_int_pad0;
    1a76:	e7cd      	b.n	1a14 <z_cbvprintf_impl+0x72c>
				store_count(conv, value->ptr, count);
    1a78:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    1a7a:	2907      	cmp	r1, #7
    1a7c:	f63f ae78 	bhi.w	1770 <z_cbvprintf_impl+0x488>
    1a80:	e8df f001 	tbb	[pc, r1]
    1a84:	0c06040c 	.word	0x0c06040c
    1a88:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    1a8c:	701d      	strb	r5, [r3, #0]
		break;
    1a8e:	e66f      	b.n	1770 <z_cbvprintf_impl+0x488>
		*(short *)dp = (short)count;
    1a90:	801d      	strh	r5, [r3, #0]
		break;
    1a92:	e66d      	b.n	1770 <z_cbvprintf_impl+0x488>
		*(intmax_t *)dp = (intmax_t)count;
    1a94:	17ea      	asrs	r2, r5, #31
    1a96:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    1a9a:	e669      	b.n	1770 <z_cbvprintf_impl+0x488>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1a9c:	601d      	str	r5, [r3, #0]
		break;
    1a9e:	e667      	b.n	1770 <z_cbvprintf_impl+0x488>
		*sign = '-';
    1aa0:	f04f 092d 	mov.w	r9, #45	; 0x2d
    1aa4:	e6ce      	b.n	1844 <z_cbvprintf_impl+0x55c>
		*sign = '+';
    1aa6:	f04f 092b 	mov.w	r9, #43	; 0x2b
    1aaa:	e6cb      	b.n	1844 <z_cbvprintf_impl+0x55c>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    1aac:	f240 76ff 	movw	r6, #2047	; 0x7ff
    1ab0:	42b0      	cmp	r0, r6
    1ab2:	d12a      	bne.n	1b0a <z_cbvprintf_impl+0x822>
		if (fract == 0) {
    1ab4:	430a      	orrs	r2, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    1ab6:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
    1aba:	d11e      	bne.n	1afa <z_cbvprintf_impl+0x812>
			if (isupper((unsigned char)c) != 0) {
    1abc:	2b1a      	cmp	r3, #26
    1abe:	bf35      	itete	cc
    1ac0:	2349      	movcc	r3, #73	; 0x49
    1ac2:	2369      	movcs	r3, #105	; 0x69
    1ac4:	214e      	movcc	r1, #78	; 0x4e
    1ac6:	216e      	movcs	r1, #110	; 0x6e
    1ac8:	bf34      	ite	cc
    1aca:	2246      	movcc	r2, #70	; 0x46
    1acc:	2266      	movcs	r2, #102	; 0x66
				*buf++ = 'I';
    1ace:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
    1ad2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
    1ad6:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
    1ada:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
    1ade:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
    1ae2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
    1ae6:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
    1aea:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
    1aec:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
    1aee:	f1b9 0f00 	cmp.w	r9, #0
    1af2:	f43f af31 	beq.w	1958 <z_cbvprintf_impl+0x670>
			nj_len += 1U;
    1af6:	3001      	adds	r0, #1
    1af8:	e72e      	b.n	1958 <z_cbvprintf_impl+0x670>
			if (isupper((unsigned char)c) != 0) {
    1afa:	2b19      	cmp	r3, #25
    1afc:	bf8b      	itete	hi
    1afe:	236e      	movhi	r3, #110	; 0x6e
    1b00:	234e      	movls	r3, #78	; 0x4e
    1b02:	2161      	movhi	r1, #97	; 0x61
    1b04:	2141      	movls	r1, #65	; 0x41
    1b06:	461a      	mov	r2, r3
    1b08:	e7e1      	b.n	1ace <z_cbvprintf_impl+0x7e6>
	bool is_subnormal = (expo == 0) && (fract != 0);
    1b0a:	2600      	movs	r6, #0
    1b0c:	e6a6      	b.n	185c <z_cbvprintf_impl+0x574>
				expo--;
    1b0e:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    1b10:	1849      	adds	r1, r1, r1
    1b12:	4152      	adcs	r2, r2
    1b14:	2a00      	cmp	r2, #0
    1b16:	dafa      	bge.n	1b0e <z_cbvprintf_impl+0x826>
    1b18:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
    1b1c:	e6b4      	b.n	1888 <z_cbvprintf_impl+0x5a0>
			fract >>= 1;
    1b1e:	0849      	lsrs	r1, r1, #1
    1b20:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
    1b24:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    1b26:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
    1b2a:	4640      	mov	r0, r8
			expo++;
    1b2c:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    1b30:	d2f5      	bcs.n	1b1e <z_cbvprintf_impl+0x836>
		fract *= 5U;
    1b32:	fb0c fe02 	mul.w	lr, ip, r2
    1b36:	fba1 120c 	umull	r1, r2, r1, ip
		expo++;
    1b3a:	f100 0802 	add.w	r8, r0, #2
		fract *= 5U;
    1b3e:	4472      	add	r2, lr
		decexp--;
    1b40:	3e01      	subs	r6, #1
    1b42:	2001      	movs	r0, #1
	while (expo < -2) {
    1b44:	f118 0f02 	cmn.w	r8, #2
    1b48:	dbe9      	blt.n	1b1e <z_cbvprintf_impl+0x836>
    1b4a:	b108      	cbz	r0, 1b50 <z_cbvprintf_impl+0x868>
    1b4c:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	while (expo > 0) {
    1b50:	f1b8 0f00 	cmp.w	r8, #0
		fract += 2;
    1b54:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
    1b58:	dc2f      	bgt.n	1bba <z_cbvprintf_impl+0x8d2>
	fract >>= (4 - expo);
    1b5a:	f1c8 0004 	rsb	r0, r8, #4
    1b5e:	f108 081c 	add.w	r8, r8, #28
    1b62:	f1a0 0c20 	sub.w	ip, r0, #32
    1b66:	40c2      	lsrs	r2, r0
    1b68:	fa21 f300 	lsr.w	r3, r1, r0
    1b6c:	fa01 f808 	lsl.w	r8, r1, r8
	if ((c == 'g') || (c == 'G')) {
    1b70:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
    1b74:	ea42 0208 	orr.w	r2, r2, r8
    1b78:	fa21 fc0c 	lsr.w	ip, r1, ip
	if ((c == 'g') || (c == 'G')) {
    1b7c:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
    1b7e:	ea42 020c 	orr.w	r2, r2, ip
    1b82:	9308      	str	r3, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    1b84:	d13a      	bne.n	1bfc <z_cbvprintf_impl+0x914>
		if (decexp < (-4 + 1) || decexp > precision) {
    1b86:	1cf3      	adds	r3, r6, #3
    1b88:	db01      	blt.n	1b8e <z_cbvprintf_impl+0x8a6>
    1b8a:	42b7      	cmp	r7, r6
    1b8c:	da2b      	bge.n	1be6 <z_cbvprintf_impl+0x8fe>
			c += 'e' - 'g';  /* e or E */
    1b8e:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
    1b92:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
    1b94:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
    1b98:	dd7f      	ble.n	1c9a <z_cbvprintf_impl+0x9b2>
		if (!conv->flag_hash && (precision > 0)) {
    1b9a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    1b9e:	0680      	lsls	r0, r0, #26
				precision--;
    1ba0:	f107 37ff 	add.w	r7, r7, #4294967295
		if (!conv->flag_hash && (precision > 0)) {
    1ba4:	d479      	bmi.n	1c9a <z_cbvprintf_impl+0x9b2>
    1ba6:	1e3b      	subs	r3, r7, #0
    1ba8:	bf18      	it	ne
    1baa:	2301      	movne	r3, #1
	bool prune_zero = false;
    1bac:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
    1bae:	f107 0801 	add.w	r8, r7, #1
    1bb2:	e02d      	b.n	1c10 <z_cbvprintf_impl+0x928>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    1bb4:	f04f 0800 	mov.w	r8, #0
    1bb8:	e66c      	b.n	1894 <z_cbvprintf_impl+0x5ac>
		fract += 2;
    1bba:	3202      	adds	r2, #2
    1bbc:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
    1bc0:	a80c      	add	r0, sp, #48	; 0x30
		fract += 2;
    1bc2:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
    1bc6:	f005 fa2d 	bl	7024 <_ldiv5>
		expo--;
    1bca:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
    1bce:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
    1bd2:	3601      	adds	r6, #1
			fract <<= 1;
    1bd4:	1892      	adds	r2, r2, r2
    1bd6:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
    1bd8:	2900      	cmp	r1, #0
			expo--;
    1bda:	f108 38ff 	add.w	r8, r8, #4294967295
		} while (!(fract & BIT_63));
    1bde:	daf9      	bge.n	1bd4 <z_cbvprintf_impl+0x8ec>
    1be0:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
    1be4:	e7b4      	b.n	1b50 <z_cbvprintf_impl+0x868>
		if (!conv->flag_hash && (precision > 0)) {
    1be6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1bea:	0699      	lsls	r1, r3, #26
			precision -= decexp;
    1bec:	eba7 0706 	sub.w	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
    1bf0:	d451      	bmi.n	1c96 <z_cbvprintf_impl+0x9ae>
    1bf2:	1e3b      	subs	r3, r7, #0
    1bf4:	bf18      	it	ne
    1bf6:	2301      	movne	r3, #1
	bool prune_zero = false;
    1bf8:	9305      	str	r3, [sp, #20]
    1bfa:	e004      	b.n	1c06 <z_cbvprintf_impl+0x91e>
    1bfc:	2300      	movs	r3, #0
	if (c == 'f') {
    1bfe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
    1c02:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
    1c04:	d1d3      	bne.n	1bae <z_cbvprintf_impl+0x8c6>
		if (decimals < 0) {
    1c06:	eb17 0806 	adds.w	r8, r7, r6
    1c0a:	f04f 0b66 	mov.w	fp, #102	; 0x66
    1c0e:	d446      	bmi.n	1c9e <z_cbvprintf_impl+0x9b6>
	if (decimals > 16) {
    1c10:	f1b8 0f10 	cmp.w	r8, #16
    1c14:	bfa8      	it	ge
    1c16:	f04f 0810 	movge.w	r8, #16
    1c1a:	2010      	movs	r0, #16
    1c1c:	900b      	str	r0, [sp, #44]	; 0x2c
	uint64_t round = BIT64(59); /* 0.5 */
    1c1e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    1c22:	2000      	movs	r0, #0
    1c24:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
	*v >>= 1;
    1c28:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
    1c2c:	f1b8 0f00 	cmp.w	r8, #0
    1c30:	d138      	bne.n	1ca4 <z_cbvprintf_impl+0x9bc>
	fract += round;
    1c32:	9908      	ldr	r1, [sp, #32]
    1c34:	1812      	adds	r2, r2, r0
    1c36:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
    1c3a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    1c3e:	d23f      	bcs.n	1cc0 <z_cbvprintf_impl+0x9d8>
	fract += round;
    1c40:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
    1c44:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
    1c46:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
    1c4a:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
    1c4e:	f040 80b2 	bne.w	1db6 <z_cbvprintf_impl+0xace>
		if (decexp > 0) {
    1c52:	2e00      	cmp	r6, #0
    1c54:	dc3f      	bgt.n	1cd6 <z_cbvprintf_impl+0x9ee>
			*buf++ = '0';
    1c56:	2130      	movs	r1, #48	; 0x30
    1c58:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
    1c5c:	2a00      	cmp	r2, #0
    1c5e:	d163      	bne.n	1d28 <z_cbvprintf_impl+0xa40>
    1c60:	2f00      	cmp	r7, #0
    1c62:	f340 81a8 	ble.w	1fb6 <z_cbvprintf_impl+0xcce>
			*buf++ = '.';
    1c66:	222e      	movs	r2, #46	; 0x2e
    1c68:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
    1c6c:	b186      	cbz	r6, 1c90 <z_cbvprintf_impl+0x9a8>
			conv->pad0_value = -decexp;
    1c6e:	4272      	negs	r2, r6
    1c70:	42ba      	cmp	r2, r7
    1c72:	bfa8      	it	ge
    1c74:	463a      	movge	r2, r7
			conv->pad_postdp = (conv->pad0_value > 0);
    1c76:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    1c7a:	9213      	str	r2, [sp, #76]	; 0x4c
    1c7c:	2a00      	cmp	r2, #0
			precision -= conv->pad0_value;
    1c7e:	eba7 0702 	sub.w	r7, r7, r2
			conv->pad_postdp = (conv->pad0_value > 0);
    1c82:	bfd4      	ite	le
    1c84:	2200      	movle	r2, #0
    1c86:	2201      	movgt	r2, #1
    1c88:	f362 1145 	bfi	r1, r2, #5, #1
    1c8c:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
    1c90:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
    1c94:	e037      	b.n	1d06 <z_cbvprintf_impl+0xa1e>
	bool prune_zero = false;
    1c96:	2300      	movs	r3, #0
    1c98:	e7ae      	b.n	1bf8 <z_cbvprintf_impl+0x910>
    1c9a:	2300      	movs	r3, #0
    1c9c:	e786      	b.n	1bac <z_cbvprintf_impl+0x8c4>
			decimals = 0;
    1c9e:	f04f 0800 	mov.w	r8, #0
    1ca2:	e7ba      	b.n	1c1a <z_cbvprintf_impl+0x932>
	*v >>= 1;
    1ca4:	0840      	lsrs	r0, r0, #1
    1ca6:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
    1caa:	085b      	lsrs	r3, r3, #1
    1cac:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
    1cb0:	a80e      	add	r0, sp, #56	; 0x38
    1cb2:	9209      	str	r2, [sp, #36]	; 0x24
    1cb4:	f108 38ff 	add.w	r8, r8, #4294967295
    1cb8:	f005 f9b4 	bl	7024 <_ldiv5>
    1cbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
}
    1cbe:	e7b3      	b.n	1c28 <z_cbvprintf_impl+0x940>
	*v >>= 1;
    1cc0:	0852      	lsrs	r2, r2, #1
    1cc2:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
	_ldiv5(v);
    1cc6:	a80c      	add	r0, sp, #48	; 0x30
	*v >>= 1;
    1cc8:	0849      	lsrs	r1, r1, #1
    1cca:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		decexp++;
    1cce:	3601      	adds	r6, #1
	_ldiv5(v);
    1cd0:	f005 f9a8 	bl	7024 <_ldiv5>
		decexp++;
    1cd4:	e7b6      	b.n	1c44 <z_cbvprintf_impl+0x95c>
	char *buf = bps;
    1cd6:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
    1cda:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1cdc:	2900      	cmp	r1, #0
    1cde:	dd09      	ble.n	1cf4 <z_cbvprintf_impl+0xa0c>
				*buf++ = _get_digit(&fract, &digit_count);
    1ce0:	a90b      	add	r1, sp, #44	; 0x2c
    1ce2:	a80c      	add	r0, sp, #48	; 0x30
    1ce4:	9207      	str	r2, [sp, #28]
    1ce6:	f005 f9b5 	bl	7054 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    1cea:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    1cec:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
    1cf0:	9a07      	ldr	r2, [sp, #28]
    1cf2:	d1f2      	bne.n	1cda <z_cbvprintf_impl+0x9f2>
			conv->pad0_value = decexp;
    1cf4:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
    1cf6:	b99a      	cbnz	r2, 1d20 <z_cbvprintf_impl+0xa38>
    1cf8:	2f00      	cmp	r7, #0
    1cfa:	f340 815a 	ble.w	1fb2 <z_cbvprintf_impl+0xcca>
			*buf++ = '.';
    1cfe:	212e      	movs	r1, #46	; 0x2e
    1d00:	f808 1b01 	strb.w	r1, [r8], #1
    1d04:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
    1d06:	2f00      	cmp	r7, #0
    1d08:	dd17      	ble.n	1d3a <z_cbvprintf_impl+0xa52>
    1d0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1d0c:	2a00      	cmp	r2, #0
    1d0e:	dd14      	ble.n	1d3a <z_cbvprintf_impl+0xa52>
		*buf++ = _get_digit(&fract, &digit_count);
    1d10:	a90b      	add	r1, sp, #44	; 0x2c
    1d12:	a80c      	add	r0, sp, #48	; 0x30
    1d14:	f005 f99e 	bl	7054 <_get_digit>
		precision--;
    1d18:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
    1d1a:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
    1d1e:	e7f2      	b.n	1d06 <z_cbvprintf_impl+0xa1e>
			*buf++ = '.';
    1d20:	222e      	movs	r2, #46	; 0x2e
    1d22:	f808 2b01 	strb.w	r2, [r8], #1
    1d26:	e7ed      	b.n	1d04 <z_cbvprintf_impl+0xa1c>
    1d28:	222e      	movs	r2, #46	; 0x2e
    1d2a:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
    1d2e:	2e00      	cmp	r6, #0
    1d30:	d0ae      	beq.n	1c90 <z_cbvprintf_impl+0x9a8>
    1d32:	2f00      	cmp	r7, #0
    1d34:	dc9b      	bgt.n	1c6e <z_cbvprintf_impl+0x986>
			*buf++ = '.';
    1d36:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
    1d3a:	9b05      	ldr	r3, [sp, #20]
    1d3c:	2b00      	cmp	r3, #0
    1d3e:	d14e      	bne.n	1dde <z_cbvprintf_impl+0xaf6>
	conv->pad0_pre_exp = precision;
    1d40:	9714      	str	r7, [sp, #80]	; 0x50
    1d42:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
    1d44:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
    1d48:	2a45      	cmp	r2, #69	; 0x45
    1d4a:	d123      	bne.n	1d94 <z_cbvprintf_impl+0xaac>
		if (decexp < 0) {
    1d4c:	2e00      	cmp	r6, #0
			decexp = -decexp;
    1d4e:	bfba      	itte	lt
    1d50:	4276      	neglt	r6, r6
			*buf++ = '-';
    1d52:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    1d54:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
    1d56:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
    1d58:	bfc8      	it	gt
    1d5a:	2164      	movgt	r1, #100	; 0x64
    1d5c:	707b      	strb	r3, [r7, #1]
			*buf++ = '-';
    1d5e:	bfd1      	iteee	le
    1d60:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
    1d62:	fbb6 f3f1 	udivgt	r3, r6, r1
    1d66:	1cfa      	addgt	r2, r7, #3
    1d68:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
			decexp %= 100;
    1d6c:	bfc8      	it	gt
    1d6e:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    1d72:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
    1d76:	bfc8      	it	gt
    1d78:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
    1d7a:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
    1d7e:	fbb6 f3f1 	udiv	r3, r6, r1
    1d82:	4617      	mov	r7, r2
    1d84:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    1d88:	fb01 6313 	mls	r3, r1, r3, r6
    1d8c:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    1d8e:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
    1d92:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
    1d94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1d96:	2b00      	cmp	r3, #0
    1d98:	dc2c      	bgt.n	1df4 <z_cbvprintf_impl+0xb0c>
    1d9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1d9c:	2b00      	cmp	r3, #0
    1d9e:	bfd4      	ite	le
    1da0:	2300      	movle	r3, #0
    1da2:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    1da4:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    1da8:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    1dac:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    1dae:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
    1db2:	703b      	strb	r3, [r7, #0]
	return bps;
    1db4:	e699      	b.n	1aea <z_cbvprintf_impl+0x802>
		*buf = _get_digit(&fract, &digit_count);
    1db6:	a90b      	add	r1, sp, #44	; 0x2c
    1db8:	a80c      	add	r0, sp, #48	; 0x30
    1dba:	9207      	str	r2, [sp, #28]
    1dbc:	f005 f94a 	bl	7054 <_get_digit>
		if (*buf++ != '0') {
    1dc0:	9a07      	ldr	r2, [sp, #28]
		*buf = _get_digit(&fract, &digit_count);
    1dc2:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
		if (*buf++ != '0') {
    1dc6:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    1dc8:	bf18      	it	ne
    1dca:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (conv->flag_hash || (precision > 0)) {
    1dce:	b912      	cbnz	r2, 1dd6 <z_cbvprintf_impl+0xaee>
    1dd0:	2f00      	cmp	r7, #0
    1dd2:	f340 80f0 	ble.w	1fb6 <z_cbvprintf_impl+0xcce>
			*buf++ = '.';
    1dd6:	222e      	movs	r2, #46	; 0x2e
    1dd8:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
    1ddc:	e758      	b.n	1c90 <z_cbvprintf_impl+0x9a8>
		while (*--buf == '0') {
    1dde:	4647      	mov	r7, r8
    1de0:	f108 38ff 	add.w	r8, r8, #4294967295
    1de4:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    1de8:	2a30      	cmp	r2, #48	; 0x30
    1dea:	d0f8      	beq.n	1dde <z_cbvprintf_impl+0xaf6>
    1dec:	2a2e      	cmp	r2, #46	; 0x2e
    1dee:	bf08      	it	eq
    1df0:	4647      	moveq	r7, r8
    1df2:	e7a7      	b.n	1d44 <z_cbvprintf_impl+0xa5c>
		|| (conv->pad0_pre_exp > 0);
    1df4:	2301      	movs	r3, #1
    1df6:	e7d5      	b.n	1da4 <z_cbvprintf_impl+0xabc>
			bpe = bps + 5;
    1df8:	4f70      	ldr	r7, [pc, #448]	; (1fbc <z_cbvprintf_impl+0xcd4>)
		char sign = 0;
    1dfa:	4681      	mov	r9, r0
			bps = "(nil)";
    1dfc:	1f7e      	subs	r6, r7, #5
		size_t nj_len = (bpe - bps);
    1dfe:	2005      	movs	r0, #5
    1e00:	e5aa      	b.n	1958 <z_cbvprintf_impl+0x670>
		} else if (conv->altform_0) {
    1e02:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    1e04:	bf48      	it	mi
    1e06:	3001      	addmi	r0, #1
    1e08:	e5ae      	b.n	1968 <z_cbvprintf_impl+0x680>
					OUTC(pad);
    1e0a:	4610      	mov	r0, r2
    1e0c:	9209      	str	r2, [sp, #36]	; 0x24
    1e0e:	9903      	ldr	r1, [sp, #12]
    1e10:	47d0      	blx	sl
    1e12:	2800      	cmp	r0, #0
    1e14:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1e16:	da05      	bge.n	1e24 <z_cbvprintf_impl+0xb3c>
#undef OUTS
#undef OUTC
}
    1e18:	b01f      	add	sp, #124	; 0x7c
    1e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1e1e:	2220      	movs	r2, #32
					pad = '0';
    1e20:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
    1e24:	4659      	mov	r1, fp
    1e26:	2900      	cmp	r1, #0
    1e28:	f10b 3bff 	add.w	fp, fp, #4294967295
    1e2c:	dced      	bgt.n	1e0a <z_cbvprintf_impl+0xb22>
    1e2e:	9b04      	ldr	r3, [sp, #16]
    1e30:	f8cd b010 	str.w	fp, [sp, #16]
    1e34:	442b      	add	r3, r5
    1e36:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
    1e38:	f1b9 0f00 	cmp.w	r9, #0
    1e3c:	d005      	beq.n	1e4a <z_cbvprintf_impl+0xb62>
			OUTC(sign);
    1e3e:	9903      	ldr	r1, [sp, #12]
    1e40:	4648      	mov	r0, r9
    1e42:	47d0      	blx	sl
    1e44:	2800      	cmp	r0, #0
    1e46:	dbe7      	blt.n	1e18 <z_cbvprintf_impl+0xb30>
    1e48:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    1e4a:	9b08      	ldr	r3, [sp, #32]
    1e4c:	2b00      	cmp	r3, #0
    1e4e:	d075      	beq.n	1f3c <z_cbvprintf_impl+0xc54>
			if (conv->specifier_a) {
    1e50:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
    1e54:	2b00      	cmp	r3, #0
    1e56:	db28      	blt.n	1eaa <z_cbvprintf_impl+0xbc2>
    1e58:	46b3      	mov	fp, r6
				while (isdigit((unsigned char)*cp) != 0) {
    1e5a:	f89b 0000 	ldrb.w	r0, [fp]
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1e5e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    1e62:	2b09      	cmp	r3, #9
    1e64:	46d9      	mov	r9, fp
    1e66:	f10b 0b01 	add.w	fp, fp, #1
    1e6a:	d93f      	bls.n	1eec <z_cbvprintf_impl+0xc04>
				if (!conv->pad_postdp) {
    1e6c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    1e70:	1bae      	subs	r6, r5, r6
    1e72:	0699      	lsls	r1, r3, #26
    1e74:	444e      	add	r6, r9
    1e76:	d407      	bmi.n	1e88 <z_cbvprintf_impl+0xba0>
					while (pad_len-- > 0) {
    1e78:	4642      	mov	r2, r8
    1e7a:	2a00      	cmp	r2, #0
    1e7c:	f108 38ff 	add.w	r8, r8, #4294967295
    1e80:	dc39      	bgt.n	1ef6 <z_cbvprintf_impl+0xc0e>
    1e82:	9b07      	ldr	r3, [sp, #28]
    1e84:	4433      	add	r3, r6
    1e86:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
    1e88:	f899 0000 	ldrb.w	r0, [r9]
    1e8c:	282e      	cmp	r0, #46	; 0x2e
    1e8e:	d10a      	bne.n	1ea6 <z_cbvprintf_impl+0xbbe>
					OUTC(*cp++);
    1e90:	9903      	ldr	r1, [sp, #12]
    1e92:	47d0      	blx	sl
						OUTC('0');
    1e94:	2800      	cmp	r0, #0
    1e96:	dbbf      	blt.n	1e18 <z_cbvprintf_impl+0xb30>
					while (pad_len-- > 0) {
    1e98:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
    1e9c:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    1ea0:	dc2f      	bgt.n	1f02 <z_cbvprintf_impl+0xc1a>
					OUTC(*cp++);
    1ea2:	f109 0901 	add.w	r9, r9, #1
			if (conv->specifier_a) {
    1ea6:	464d      	mov	r5, r9
    1ea8:	e035      	b.n	1f16 <z_cbvprintf_impl+0xc2e>
    1eaa:	46b1      	mov	r9, r6
				while (*cp != 'p') {
    1eac:	f899 0000 	ldrb.w	r0, [r9]
    1eb0:	2870      	cmp	r0, #112	; 0x70
    1eb2:	46c8      	mov	r8, r9
    1eb4:	f109 0901 	add.w	r9, r9, #1
    1eb8:	d113      	bne.n	1ee2 <z_cbvprintf_impl+0xbfa>
    1eba:	1bae      	subs	r6, r5, r6
    1ebc:	9d14      	ldr	r5, [sp, #80]	; 0x50
    1ebe:	4446      	add	r6, r8
			while (pad_len-- > 0) {
    1ec0:	4435      	add	r5, r6
    1ec2:	1bab      	subs	r3, r5, r6
    1ec4:	2b00      	cmp	r3, #0
    1ec6:	dc31      	bgt.n	1f2c <z_cbvprintf_impl+0xc44>
			OUTS(cp, bpe);
    1ec8:	9903      	ldr	r1, [sp, #12]
    1eca:	463b      	mov	r3, r7
    1ecc:	4642      	mov	r2, r8
    1ece:	4650      	mov	r0, sl
    1ed0:	f005 f91d 	bl	710e <outs>
    1ed4:	2800      	cmp	r0, #0
    1ed6:	db9f      	blt.n	1e18 <z_cbvprintf_impl+0xb30>
    1ed8:	4430      	add	r0, r6
    1eda:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
    1edc:	4605      	mov	r5, r0
    1ede:	4406      	add	r6, r0
    1ee0:	e062      	b.n	1fa8 <z_cbvprintf_impl+0xcc0>
					OUTC(*cp++);
    1ee2:	9903      	ldr	r1, [sp, #12]
    1ee4:	47d0      	blx	sl
    1ee6:	2800      	cmp	r0, #0
    1ee8:	dae0      	bge.n	1eac <z_cbvprintf_impl+0xbc4>
    1eea:	e795      	b.n	1e18 <z_cbvprintf_impl+0xb30>
					OUTC(*cp++);
    1eec:	9903      	ldr	r1, [sp, #12]
    1eee:	47d0      	blx	sl
    1ef0:	2800      	cmp	r0, #0
    1ef2:	dab2      	bge.n	1e5a <z_cbvprintf_impl+0xb72>
    1ef4:	e790      	b.n	1e18 <z_cbvprintf_impl+0xb30>
						OUTC('0');
    1ef6:	9903      	ldr	r1, [sp, #12]
    1ef8:	2030      	movs	r0, #48	; 0x30
    1efa:	47d0      	blx	sl
    1efc:	2800      	cmp	r0, #0
    1efe:	dabb      	bge.n	1e78 <z_cbvprintf_impl+0xb90>
    1f00:	e78a      	b.n	1e18 <z_cbvprintf_impl+0xb30>
						OUTC('0');
    1f02:	9903      	ldr	r1, [sp, #12]
    1f04:	2030      	movs	r0, #48	; 0x30
    1f06:	47d0      	blx	sl
    1f08:	f108 38ff 	add.w	r8, r8, #4294967295
    1f0c:	e7c2      	b.n	1e94 <z_cbvprintf_impl+0xbac>
					OUTC(*cp++);
    1f0e:	9903      	ldr	r1, [sp, #12]
    1f10:	47d0      	blx	sl
    1f12:	2800      	cmp	r0, #0
    1f14:	db80      	blt.n	1e18 <z_cbvprintf_impl+0xb30>
				while (isdigit((unsigned char)*cp) != 0) {
    1f16:	7828      	ldrb	r0, [r5, #0]
    1f18:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    1f1c:	2b09      	cmp	r3, #9
    1f1e:	46a8      	mov	r8, r5
    1f20:	f105 0501 	add.w	r5, r5, #1
    1f24:	d9f3      	bls.n	1f0e <z_cbvprintf_impl+0xc26>
    1f26:	eba6 0609 	sub.w	r6, r6, r9
    1f2a:	e7c7      	b.n	1ebc <z_cbvprintf_impl+0xbd4>
				OUTC('0');
    1f2c:	9903      	ldr	r1, [sp, #12]
    1f2e:	2030      	movs	r0, #48	; 0x30
    1f30:	47d0      	blx	sl
    1f32:	2800      	cmp	r0, #0
    1f34:	f6ff af70 	blt.w	1e18 <z_cbvprintf_impl+0xb30>
    1f38:	3601      	adds	r6, #1
    1f3a:	e7c2      	b.n	1ec2 <z_cbvprintf_impl+0xbda>
			if (conv->altform_0c | conv->altform_0) {
    1f3c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    1f40:	06da      	lsls	r2, r3, #27
    1f42:	d401      	bmi.n	1f48 <z_cbvprintf_impl+0xc60>
    1f44:	071b      	lsls	r3, r3, #28
    1f46:	d506      	bpl.n	1f56 <z_cbvprintf_impl+0xc6e>
				OUTC('0');
    1f48:	9903      	ldr	r1, [sp, #12]
    1f4a:	2030      	movs	r0, #48	; 0x30
    1f4c:	47d0      	blx	sl
    1f4e:	2800      	cmp	r0, #0
    1f50:	f6ff af62 	blt.w	1e18 <z_cbvprintf_impl+0xb30>
    1f54:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1f56:	9b05      	ldr	r3, [sp, #20]
    1f58:	b13b      	cbz	r3, 1f6a <z_cbvprintf_impl+0xc82>
				OUTC(conv->specifier);
    1f5a:	9903      	ldr	r1, [sp, #12]
    1f5c:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    1f60:	47d0      	blx	sl
    1f62:	2800      	cmp	r0, #0
    1f64:	f6ff af58 	blt.w	1e18 <z_cbvprintf_impl+0xb30>
    1f68:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1f6a:	44a8      	add	r8, r5
    1f6c:	e006      	b.n	1f7c <z_cbvprintf_impl+0xc94>
				OUTC('0');
    1f6e:	9903      	ldr	r1, [sp, #12]
    1f70:	2030      	movs	r0, #48	; 0x30
    1f72:	47d0      	blx	sl
    1f74:	2800      	cmp	r0, #0
    1f76:	f6ff af4f 	blt.w	1e18 <z_cbvprintf_impl+0xb30>
    1f7a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1f7c:	eba8 0305 	sub.w	r3, r8, r5
    1f80:	2b00      	cmp	r3, #0
    1f82:	dcf4      	bgt.n	1f6e <z_cbvprintf_impl+0xc86>
			OUTS(bps, bpe);
    1f84:	9903      	ldr	r1, [sp, #12]
    1f86:	463b      	mov	r3, r7
    1f88:	4632      	mov	r2, r6
    1f8a:	4650      	mov	r0, sl
    1f8c:	f005 f8bf 	bl	710e <outs>
    1f90:	2800      	cmp	r0, #0
    1f92:	f6ff af41 	blt.w	1e18 <z_cbvprintf_impl+0xb30>
    1f96:	4428      	add	r0, r5
    1f98:	e79f      	b.n	1eda <z_cbvprintf_impl+0xbf2>
			OUTC(' ');
    1f9a:	9903      	ldr	r1, [sp, #12]
    1f9c:	2020      	movs	r0, #32
    1f9e:	47d0      	blx	sl
    1fa0:	2800      	cmp	r0, #0
    1fa2:	f6ff af39 	blt.w	1e18 <z_cbvprintf_impl+0xb30>
    1fa6:	3501      	adds	r5, #1
		while (width > 0) {
    1fa8:	1b73      	subs	r3, r6, r5
    1faa:	2b00      	cmp	r3, #0
    1fac:	dcf5      	bgt.n	1f9a <z_cbvprintf_impl+0xcb2>
    1fae:	f7ff bbdf 	b.w	1770 <z_cbvprintf_impl+0x488>
			decexp = 0;
    1fb2:	4616      	mov	r6, r2
    1fb4:	e6c1      	b.n	1d3a <z_cbvprintf_impl+0xa52>
		if (*buf++ != '0') {
    1fb6:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
    1fba:	e6be      	b.n	1d3a <z_cbvprintf_impl+0xa52>
    1fbc:	0000837c 	.word	0x0000837c

00001fc0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1fc0:	f002 bd16 	b.w	49f0 <SystemInit>

00001fc4 <z_log_init.isra.0>:
	}

	return mask;
}

static uint32_t z_log_init(bool blocking, bool can_sleep)
    1fc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fc8:	4681      	mov	r9, r0
		return 0;
	}

	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);

	if (atomic_inc(&initialized) != 0) {
    1fca:	482f      	ldr	r0, [pc, #188]	; (2088 <z_log_init.isra.0+0xc4>)
static uint32_t z_log_init(bool blocking, bool can_sleep)
    1fcc:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    1fce:	f005 f8ba 	bl	7146 <atomic_inc>
    1fd2:	4606      	mov	r6, r0
    1fd4:	b970      	cbnz	r0, 1ff4 <z_log_init.isra.0+0x30>
		z_log_links_initiate();
	}


	/* Assign ids to backends. */
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1fd6:	4c2d      	ldr	r4, [pc, #180]	; (208c <z_log_init.isra.0+0xc8>)
    1fd8:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 2090 <z_log_init.isra.0+0xcc>
	uint32_t mask = 0;
    1fdc:	4605      	mov	r5, r0
    1fde:	46a0      	mov	r8, r4
			if (log_backend_is_ready(backend) == 0) {
				log_backend_enable(backend,
						   backend->cb->ctx,
						   CONFIG_LOG_MAX_LEVEL);
			} else {
				mask |= BIT(i);
    1fe0:	f04f 0b01 	mov.w	fp, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1fe4:	4554      	cmp	r4, sl
    1fe6:	d307      	bcc.n	1ff8 <z_log_init.isra.0+0x34>
			i++;
		}
	}

	/* If blocking init, wait until all backends are activated. */
	if (blocking) {
    1fe8:	f1b9 0f00 	cmp.w	r9, #0
    1fec:	d002      	beq.n	1ff4 <z_log_init.isra.0+0x30>
		mask_cpy &= ~BIT(i);
    1fee:	f04f 0a01 	mov.w	sl, #1
		while (mask) {
    1ff2:	b9e5      	cbnz	r5, 202e <z_log_init.isra.0+0x6a>
			}
		}
	}

	return mask;
}
    1ff4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (backend->autostart) {
    1ff8:	7b23      	ldrb	r3, [r4, #12]
    1ffa:	b173      	cbz	r3, 201a <z_log_init.isra.0+0x56>
 * @param[in] backend  Pointer to the backend instance.
 */
static inline void log_backend_init(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->init) {
    1ffc:	6823      	ldr	r3, [r4, #0]
    1ffe:	68db      	ldr	r3, [r3, #12]
    2000:	b10b      	cbz	r3, 2006 <z_log_init.isra.0+0x42>
		backend->api->init(backend);
    2002:	4620      	mov	r0, r4
    2004:	4798      	blx	r3
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    2006:	6823      	ldr	r3, [r4, #0]
    2008:	691b      	ldr	r3, [r3, #16]
    200a:	b943      	cbnz	r3, 201e <z_log_init.isra.0+0x5a>
				log_backend_enable(backend,
    200c:	6863      	ldr	r3, [r4, #4]
    200e:	2204      	movs	r2, #4
    2010:	6819      	ldr	r1, [r3, #0]
    2012:	4620      	mov	r0, r4
    2014:	f000 f8c8 	bl	21a8 <log_backend_enable>
			i++;
    2018:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    201a:	3410      	adds	r4, #16
    201c:	e7e2      	b.n	1fe4 <z_log_init.isra.0+0x20>
		return backend->api->is_ready(backend);
    201e:	4620      	mov	r0, r4
    2020:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    2022:	2800      	cmp	r0, #0
    2024:	d0f2      	beq.n	200c <z_log_init.isra.0+0x48>
				mask |= BIT(i);
    2026:	fa0b f306 	lsl.w	r3, fp, r6
    202a:	431d      	orrs	r5, r3
    202c:	e7f4      	b.n	2018 <z_log_init.isra.0+0x54>
    202e:	46a9      	mov	r9, r5
		uint32_t i = __builtin_ctz(mask_cpy);
    2030:	fa95 f4a5 	rbit	r4, r5
    2034:	fab4 f484 	clz	r4, r4
		mask_cpy &= ~BIT(i);
    2038:	fa0a f304 	lsl.w	r3, sl, r4
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    203c:	0126      	lsls	r6, r4, #4
    203e:	eb08 1404 	add.w	r4, r8, r4, lsl #4
		mask_cpy &= ~BIT(i);
    2042:	ea6f 0b03 	mvn.w	fp, r3
    2046:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    204a:	7b23      	ldrb	r3, [r4, #12]
    204c:	b163      	cbz	r3, 2068 <z_log_init.isra.0+0xa4>
	if (backend->api->is_ready != NULL) {
    204e:	f858 3006 	ldr.w	r3, [r8, r6]
    2052:	691b      	ldr	r3, [r3, #16]
    2054:	b993      	cbnz	r3, 207c <z_log_init.isra.0+0xb8>
					   backend->cb->ctx,
    2056:	4446      	add	r6, r8
			log_backend_enable(backend,
    2058:	2204      	movs	r2, #4
    205a:	6873      	ldr	r3, [r6, #4]
    205c:	4620      	mov	r0, r4
    205e:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    2060:	ea09 090b 	and.w	r9, r9, fp
			log_backend_enable(backend,
    2064:	f000 f8a0 	bl	21a8 <log_backend_enable>
	while (mask_cpy) {
    2068:	2d00      	cmp	r5, #0
    206a:	d1e1      	bne.n	2030 <z_log_init.isra.0+0x6c>
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    206c:	b127      	cbz	r7, 2078 <z_log_init.isra.0+0xb4>
    206e:	f44f 70a4 	mov.w	r0, #328	; 0x148
    2072:	2100      	movs	r1, #0
    2074:	f004 faa6 	bl	65c4 <z_impl_k_sleep>
    2078:	464d      	mov	r5, r9
    207a:	e7ba      	b.n	1ff2 <z_log_init.isra.0+0x2e>
		return backend->api->is_ready(backend);
    207c:	4620      	mov	r0, r4
    207e:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    2080:	2800      	cmp	r0, #0
    2082:	d1f1      	bne.n	2068 <z_log_init.isra.0+0xa4>
    2084:	e7e7      	b.n	2056 <z_log_init.isra.0+0x92>
    2086:	bf00      	nop
    2088:	200003a4 	.word	0x200003a4
    208c:	00007ee8 	.word	0x00007ee8
    2090:	00007f08 	.word	0x00007f08

00002094 <log_format_func_t_get>:
}
    2094:	4b01      	ldr	r3, [pc, #4]	; (209c <log_format_func_t_get+0x8>)
    2096:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    209a:	4770      	bx	lr
    209c:	00007fb0 	.word	0x00007fb0

000020a0 <log_set_timestamp_func>:
		thread_set(process_tid);
	}
}

int log_set_timestamp_func(log_timestamp_get_t timestamp_getter, uint32_t freq)
{
    20a0:	b508      	push	{r3, lr}
    20a2:	4603      	mov	r3, r0
    20a4:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    20a6:	b12b      	cbz	r3, 20b4 <log_set_timestamp_func+0x14>
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
    20a8:	4a04      	ldr	r2, [pc, #16]	; (20bc <log_set_timestamp_func+0x1c>)
    20aa:	6013      	str	r3, [r2, #0]
	if (CONFIG_LOG_PROCESSING_LATENCY_US) {
		proc_latency = (freq * CONFIG_LOG_PROCESSING_LATENCY_US) / 1000000;
	}

	if (IS_ENABLED(CONFIG_LOG_OUTPUT)) {
		log_output_timestamp_freq_set(freq);
    20ac:	f000 fa7e 	bl	25ac <log_output_timestamp_freq_set>
	}

	return 0;
    20b0:	2000      	movs	r0, #0
}
    20b2:	bd08      	pop	{r3, pc}
		return -EINVAL;
    20b4:	f06f 0015 	mvn.w	r0, #21
    20b8:	e7fb      	b.n	20b2 <log_set_timestamp_func+0x12>
    20ba:	bf00      	nop
    20bc:	20000008 	.word	0x20000008

000020c0 <log_core_init>:
	panic_mode = false;
    20c0:	4a05      	ldr	r2, [pc, #20]	; (20d8 <log_core_init+0x18>)
		log_set_timestamp_func(default_get_timestamp,
    20c2:	4806      	ldr	r0, [pc, #24]	; (20dc <log_core_init+0x1c>)
	panic_mode = false;
    20c4:	2300      	movs	r3, #0
    20c6:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    20c8:	4a05      	ldr	r2, [pc, #20]	; (20e0 <log_core_init+0x20>)
    20ca:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    20cc:	4a05      	ldr	r2, [pc, #20]	; (20e4 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    20ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	buffered_cnt = 0;
    20d2:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    20d4:	f7ff bfe4 	b.w	20a0 <log_set_timestamp_func>
    20d8:	200007be 	.word	0x200007be
    20dc:	00007143 	.word	0x00007143
    20e0:	2000039c 	.word	0x2000039c
    20e4:	200003a0 	.word	0x200003a0

000020e8 <z_impl_log_panic>:

void z_impl_log_panic(void)
{
    20e8:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    20ea:	4d0b      	ldr	r5, [pc, #44]	; (2118 <z_impl_log_panic+0x30>)
    20ec:	7829      	ldrb	r1, [r5, #0]
    20ee:	b941      	cbnz	r1, 2102 <z_impl_log_panic+0x1a>
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	(void)z_log_init(true, false);
    20f0:	2001      	movs	r0, #1
    20f2:	f7ff ff67 	bl	1fc4 <z_log_init.isra.0>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
			goto out;
		}
	}

	STRUCT_SECTION_FOREACH(log_backend, backend) {
    20f6:	4c09      	ldr	r4, [pc, #36]	; (211c <z_impl_log_panic+0x34>)
    20f8:	4e09      	ldr	r6, [pc, #36]	; (2120 <z_impl_log_panic+0x38>)
    20fa:	42b4      	cmp	r4, r6
    20fc:	d302      	bcc.n	2104 <z_impl_log_panic+0x1c>
		while (log_process() == true) {
		}
	}

out:
	panic_mode = true;
    20fe:	2301      	movs	r3, #1
    2100:	702b      	strb	r3, [r5, #0]
}
    2102:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    2104:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    2106:	795b      	ldrb	r3, [r3, #5]
    2108:	b11b      	cbz	r3, 2112 <z_impl_log_panic+0x2a>
	backend->api->panic(backend);
    210a:	6823      	ldr	r3, [r4, #0]
    210c:	4620      	mov	r0, r4
    210e:	689b      	ldr	r3, [r3, #8]
    2110:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2112:	3410      	adds	r4, #16
    2114:	e7f1      	b.n	20fa <z_impl_log_panic+0x12>
    2116:	bf00      	nop
    2118:	200007be 	.word	0x200007be
    211c:	00007ee8 	.word	0x00007ee8
    2120:	00007f08 	.word	0x00007f08

00002124 <z_log_dropped>:
}
#include <syscalls/log_buffered_cnt_mrsh.c>
#endif

void z_log_dropped(bool buffered)
{
    2124:	b510      	push	{r4, lr}
    2126:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    2128:	4808      	ldr	r0, [pc, #32]	; (214c <z_log_dropped+0x28>)
    212a:	f005 f80c 	bl	7146 <atomic_inc>
	if (buffered) {
    212e:	b15c      	cbz	r4, 2148 <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2130:	f3bf 8f5b 	dmb	ish
    2134:	4b06      	ldr	r3, [pc, #24]	; (2150 <z_log_dropped+0x2c>)
    2136:	e853 1f00 	ldrex	r1, [r3]
    213a:	3901      	subs	r1, #1
    213c:	e843 1200 	strex	r2, r1, [r3]
    2140:	2a00      	cmp	r2, #0
    2142:	d1f8      	bne.n	2136 <z_log_dropped+0x12>
    2144:	f3bf 8f5b 	dmb	ish
		atomic_dec(&buffered_cnt);
	}
}
    2148:	bd10      	pop	{r4, pc}
    214a:	bf00      	nop
    214c:	2000039c 	.word	0x2000039c
    2150:	200003a0 	.word	0x200003a0

00002154 <z_log_msg_commit>:
#endif
	z_log_msg_post_finalize();
}

void z_log_msg_commit(struct log_msg *msg)
{
    2154:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    2156:	4b0a      	ldr	r3, [pc, #40]	; (2180 <z_log_msg_commit+0x2c>)
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2158:	4c0a      	ldr	r4, [pc, #40]	; (2184 <z_log_msg_commit+0x30>)
	msg->hdr.timestamp = timestamp_func();
    215a:	681b      	ldr	r3, [r3, #0]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    215c:	4e0a      	ldr	r6, [pc, #40]	; (2188 <z_log_msg_commit+0x34>)
{
    215e:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    2160:	4798      	blx	r3
    2162:	60a8      	str	r0, [r5, #8]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2164:	42b4      	cmp	r4, r6
    2166:	d300      	bcc.n	216a <z_log_msg_commit+0x16>
	msg_commit(&log_buffer, msg);
}
    2168:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    216a:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    216c:	795b      	ldrb	r3, [r3, #5]
    216e:	b123      	cbz	r3, 217a <z_log_msg_commit+0x26>
	backend->api->process(backend, msg);
    2170:	6823      	ldr	r3, [r4, #0]
    2172:	4629      	mov	r1, r5
    2174:	681b      	ldr	r3, [r3, #0]
    2176:	4620      	mov	r0, r4
    2178:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    217a:	3410      	adds	r4, #16
    217c:	e7f2      	b.n	2164 <z_log_msg_commit+0x10>
    217e:	bf00      	nop
    2180:	20000008 	.word	0x20000008
    2184:	00007ee8 	.word	0x00007ee8
    2188:	00007f08 	.word	0x00007f08

0000218c <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    218c:	4a04      	ldr	r2, [pc, #16]	; (21a0 <log_source_name_get+0x14>)
    218e:	4b05      	ldr	r3, [pc, #20]	; (21a4 <log_source_name_get+0x18>)
    2190:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    2192:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    2196:	bf34      	ite	cc
    2198:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    219c:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    219e:	4770      	bx	lr
    21a0:	00007e60 	.word	0x00007e60
    21a4:	00007ee8 	.word	0x00007ee8

000021a8 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    21a8:	4b08      	ldr	r3, [pc, #32]	; (21cc <log_backend_enable+0x24>)
    21aa:	1ac3      	subs	r3, r0, r3
{
    21ac:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    21ae:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
    21b0:	6844      	ldr	r4, [r0, #4]
    21b2:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    21b4:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    21b6:	6843      	ldr	r3, [r0, #4]
    21b8:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
    21ba:	6843      	ldr	r3, [r0, #4]
    21bc:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    21be:	6843      	ldr	r3, [r0, #4]
    21c0:	2201      	movs	r2, #1
    21c2:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    21c4:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
    21c6:	f004 bfe0 	b.w	718a <z_log_notify_backend_enabled>
    21ca:	bf00      	nop
    21cc:	00007ee8 	.word	0x00007ee8

000021d0 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    21d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21d4:	b085      	sub	sp, #20
    21d6:	af02      	add	r7, sp, #8
    21d8:	e9d7 a90e 	ldrd	sl, r9, [r7, #56]	; 0x38
    21dc:	6b3d      	ldr	r5, [r7, #48]	; 0x30
    21de:	4604      	mov	r4, r0
    21e0:	460e      	mov	r6, r1
    21e2:	4693      	mov	fp, r2
    21e4:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
    21e6:	f1ba 0f00 	cmp.w	sl, #0
    21ea:	d033      	beq.n	2254 <z_impl_z_log_msg_runtime_vcreate+0x84>
		va_list ap2;

		va_copy(ap2, ap);
    21ec:	f8c7 9004 	str.w	r9, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    21f0:	f8cd 9000 	str.w	r9, [sp]
    21f4:	2110      	movs	r1, #16
    21f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    21f8:	4653      	mov	r3, sl
    21fa:	2000      	movs	r0, #0
    21fc:	f7fe fd8a 	bl	d14 <cbvprintf_package>
    2200:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    2202:	4a15      	ldr	r2, [pc, #84]	; (2258 <z_impl_z_log_msg_runtime_vcreate+0x88>)
    2204:	f004 0407 	and.w	r4, r4, #7
    2208:	f00b 0b07 	and.w	fp, fp, #7
    220c:	00e4      	lsls	r4, r4, #3
    220e:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
    2212:	ea02 2241 	and.w	r2, r2, r1, lsl #9
    2216:	4314      	orrs	r4, r2
    2218:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    221c:	3517      	adds	r5, #23
    221e:	440d      	add	r5, r1
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    2220:	f025 0507 	bic.w	r5, r5, #7
    2224:	ebad 0d05 	sub.w	sp, sp, r5
    2228:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    222a:	f1ba 0f00 	cmp.w	sl, #0
    222e:	d007      	beq.n	2240 <z_impl_z_log_msg_runtime_vcreate+0x70>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    2230:	f8cd 9000 	str.w	r9, [sp]
    2234:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2236:	4653      	mov	r3, sl
    2238:	f105 0010 	add.w	r0, r5, #16
    223c:	f7fe fd6a 	bl	d14 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    2240:	4643      	mov	r3, r8
    2242:	4622      	mov	r2, r4
    2244:	4631      	mov	r1, r6
    2246:	4628      	mov	r0, r5
    2248:	f004 ffa2 	bl	7190 <z_log_msg_finalize>
	}
}
    224c:	370c      	adds	r7, #12
    224e:	46bd      	mov	sp, r7
    2250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
    2254:	4651      	mov	r1, sl
    2256:	e7d4      	b.n	2202 <z_impl_z_log_msg_runtime_vcreate+0x32>
    2258:	000ffe00 	.word	0x000ffe00

0000225c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    225c:	b40e      	push	{r1, r2, r3}
    225e:	b503      	push	{r0, r1, lr}
    2260:	ab03      	add	r3, sp, #12
    2262:	4601      	mov	r1, r0
    2264:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    2268:	4804      	ldr	r0, [pc, #16]	; (227c <print_formatted+0x20>)
	va_start(args, fmt);
    226a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    226c:	f004 ffd2 	bl	7214 <cbvprintf>
	va_end(args);

	return length;
}
    2270:	b002      	add	sp, #8
    2272:	f85d eb04 	ldr.w	lr, [sp], #4
    2276:	b003      	add	sp, #12
    2278:	4770      	bx	lr
    227a:	bf00      	nop
    227c:	000071c3 	.word	0x000071c3

00002280 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2280:	06ca      	lsls	r2, r1, #27
    2282:	d405      	bmi.n	2290 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2284:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    2286:	bf4c      	ite	mi
    2288:	4902      	ldrmi	r1, [pc, #8]	; (2294 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    228a:	4903      	ldrpl	r1, [pc, #12]	; (2298 <newline_print+0x18>)
    228c:	f7ff bfe6 	b.w	225c <print_formatted>
	}
}
    2290:	4770      	bx	lr
    2292:	bf00      	nop
    2294:	0000838b 	.word	0x0000838b
    2298:	0000838a 	.word	0x0000838a

0000229c <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    229c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22a0:	b089      	sub	sp, #36	; 0x24
    22a2:	469b      	mov	fp, r3
    22a4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    22a8:	9304      	str	r3, [sp, #16]
    22aa:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
    22ae:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    22b0:	9b04      	ldr	r3, [sp, #16]
{
    22b2:	9206      	str	r2, [sp, #24]
    22b4:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
    22b8:	4604      	mov	r4, r0
    22ba:	460d      	mov	r5, r1
	if (!raw_string) {
    22bc:	2b00      	cmp	r3, #0
    22be:	f000 8087 	beq.w	23d0 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    22c2:	f006 0308 	and.w	r3, r6, #8
    22c6:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    22c8:	f004 ff60 	bl	718c <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    22cc:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
    22d0:	4602      	mov	r2, r0
    22d2:	2800      	cmp	r0, #0
    22d4:	d04b      	beq.n	236e <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
    22d6:	4986      	ldr	r1, [pc, #536]	; (24f0 <log_output_process+0x254>)
    22d8:	4620      	mov	r0, r4
    22da:	f7ff ffbf 	bl	225c <print_formatted>
    22de:	4680      	mov	r8, r0
	if (stamp) {
    22e0:	f1ba 0f00 	cmp.w	sl, #0
    22e4:	d008      	beq.n	22f8 <log_output_process+0x5c>
	if (!format) {
    22e6:	f016 0f44 	tst.w	r6, #68	; 0x44
    22ea:	d142      	bne.n	2372 <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    22ec:	4981      	ldr	r1, [pc, #516]	; (24f4 <log_output_process+0x258>)
    22ee:	462a      	mov	r2, r5
    22f0:	4620      	mov	r0, r4
    22f2:	f7ff ffb3 	bl	225c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    22f6:	4480      	add	r8, r0
	if (color) {
    22f8:	f006 0301 	and.w	r3, r6, #1
    22fc:	b15b      	cbz	r3, 2316 <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
    22fe:	4b7e      	ldr	r3, [pc, #504]	; (24f8 <log_output_process+0x25c>)
    2300:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    2302:	497e      	ldr	r1, [pc, #504]	; (24fc <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
    2304:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    2308:	4b7d      	ldr	r3, [pc, #500]	; (2500 <log_output_process+0x264>)
    230a:	4620      	mov	r0, r4
    230c:	2a00      	cmp	r2, #0
    230e:	bf08      	it	eq
    2310:	461a      	moveq	r2, r3
    2312:	f7ff ffa3 	bl	225c <print_formatted>
	if (level_on) {
    2316:	f006 0308 	and.w	r3, r6, #8
    231a:	2b00      	cmp	r3, #0
    231c:	d055      	beq.n	23ca <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
    231e:	4b79      	ldr	r3, [pc, #484]	; (2504 <log_output_process+0x268>)
    2320:	9a04      	ldr	r2, [sp, #16]
    2322:	4979      	ldr	r1, [pc, #484]	; (2508 <log_output_process+0x26c>)
    2324:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2328:	4620      	mov	r0, r4
    232a:	f7ff ff97 	bl	225c <print_formatted>
    232e:	4605      	mov	r5, r0
	if (domain) {
    2330:	9b06      	ldr	r3, [sp, #24]
    2332:	b12b      	cbz	r3, 2340 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
    2334:	4975      	ldr	r1, [pc, #468]	; (250c <log_output_process+0x270>)
    2336:	461a      	mov	r2, r3
    2338:	4620      	mov	r0, r4
    233a:	f7ff ff8f 	bl	225c <print_formatted>
    233e:	4405      	add	r5, r0
	if (source) {
    2340:	f1bb 0f00 	cmp.w	fp, #0
    2344:	d005      	beq.n	2352 <log_output_process+0xb6>
		total += print_formatted(output,
    2346:	4972      	ldr	r1, [pc, #456]	; (2510 <log_output_process+0x274>)
    2348:	465a      	mov	r2, fp
    234a:	4620      	mov	r0, r4
    234c:	f7ff ff86 	bl	225c <print_formatted>
    2350:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    2352:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    2354:	f1b9 0f00 	cmp.w	r9, #0
    2358:	d149      	bne.n	23ee <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    235a:	2f00      	cmp	r7, #0
    235c:	d14f      	bne.n	23fe <log_output_process+0x162>
	if (color) {
    235e:	07f3      	lsls	r3, r6, #31
    2360:	f100 80c0 	bmi.w	24e4 <log_output_process+0x248>
	newline_print(output, flags);
    2364:	4631      	mov	r1, r6
    2366:	4620      	mov	r0, r4
    2368:	f7ff ff8a 	bl	2280 <newline_print>
}
    236c:	e0b4      	b.n	24d8 <log_output_process+0x23c>
	uint32_t length = 0U;
    236e:	4680      	mov	r8, r0
    2370:	e7b6      	b.n	22e0 <log_output_process+0x44>
	} else if (freq != 0U) {
    2372:	4b68      	ldr	r3, [pc, #416]	; (2514 <log_output_process+0x278>)
    2374:	6818      	ldr	r0, [r3, #0]
    2376:	2800      	cmp	r0, #0
    2378:	d0bd      	beq.n	22f6 <log_output_process+0x5a>
		timestamp /= timestamp_div;
    237a:	4b67      	ldr	r3, [pc, #412]	; (2518 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    237c:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    2380:	681b      	ldr	r3, [r3, #0]
    2382:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    2386:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    238a:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    238e:	fb00 5513 	mls	r5, r0, r3, r5
    2392:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
    2396:	fb0e f505 	mul.w	r5, lr, r5
    239a:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
    239e:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    23a0:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
    23a4:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    23a8:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
    23ac:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    23b0:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
    23b4:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    23b6:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    23ba:	4958      	ldr	r1, [pc, #352]	; (251c <log_output_process+0x280>)
    23bc:	e9cd c501 	strd	ip, r5, [sp, #4]
    23c0:	4652      	mov	r2, sl
    23c2:	4620      	mov	r0, r4
    23c4:	f7ff ff4a 	bl	225c <print_formatted>
    23c8:	e795      	b.n	22f6 <log_output_process+0x5a>
	int total = 0;
    23ca:	f006 0508 	and.w	r5, r6, #8
    23ce:	e7af      	b.n	2330 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    23d0:	f1bb 0f01 	cmp.w	fp, #1
    23d4:	d106      	bne.n	23e4 <log_output_process+0x148>
	if (package) {
    23d6:	f1b9 0f00 	cmp.w	r9, #0
    23da:	d164      	bne.n	24a6 <log_output_process+0x20a>
	if (data_len) {
    23dc:	2f00      	cmp	r7, #0
    23de:	d07b      	beq.n	24d8 <log_output_process+0x23c>
		prefix_offset = 0;
    23e0:	2500      	movs	r5, #0
    23e2:	e00c      	b.n	23fe <log_output_process+0x162>
	if (package) {
    23e4:	f1b9 0f00 	cmp.w	r9, #0
    23e8:	d0f8      	beq.n	23dc <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    23ea:	484d      	ldr	r0, [pc, #308]	; (2520 <log_output_process+0x284>)
    23ec:	e05c      	b.n	24a8 <log_output_process+0x20c>
		cb = out_func;
    23ee:	484d      	ldr	r0, [pc, #308]	; (2524 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    23f0:	494d      	ldr	r1, [pc, #308]	; (2528 <log_output_process+0x28c>)
    23f2:	464b      	mov	r3, r9
    23f4:	4622      	mov	r2, r4
    23f6:	f004 fcf2 	bl	6dde <cbpprintf_external>
	if (data_len) {
    23fa:	2f00      	cmp	r7, #0
    23fc:	d068      	beq.n	24d0 <log_output_process+0x234>
		print_formatted(output, " ");
    23fe:	f8df 912c 	ldr.w	r9, [pc, #300]	; 252c <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
    2402:	f8df a12c 	ldr.w	sl, [pc, #300]	; 2530 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    2406:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    2408:	4631      	mov	r1, r6
    240a:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    240c:	46b8      	mov	r8, r7
    240e:	bf28      	it	cs
    2410:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
    2414:	f7ff ff34 	bl	2280 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    2418:	f04f 0b00 	mov.w	fp, #0
    241c:	455d      	cmp	r5, fp
    241e:	dc45      	bgt.n	24ac <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
    2420:	9b05      	ldr	r3, [sp, #20]
    2422:	4651      	mov	r1, sl
    2424:	781a      	ldrb	r2, [r3, #0]
    2426:	4620      	mov	r0, r4
    2428:	f7ff ff18 	bl	225c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    242c:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
    2430:	f01b 0f07 	tst.w	fp, #7
    2434:	d103      	bne.n	243e <log_output_process+0x1a2>
			print_formatted(output, " ");
    2436:	4649      	mov	r1, r9
    2438:	4620      	mov	r0, r4
    243a:	f7ff ff0f 	bl	225c <print_formatted>
		if (i < length) {
    243e:	45d8      	cmp	r8, fp
    2440:	d93b      	bls.n	24ba <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
    2442:	9b05      	ldr	r3, [sp, #20]
    2444:	4651      	mov	r1, sl
    2446:	f813 200b 	ldrb.w	r2, [r3, fp]
    244a:	4620      	mov	r0, r4
    244c:	f7ff ff06 	bl	225c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2450:	f10b 0b01 	add.w	fp, fp, #1
    2454:	f1bb 0f10 	cmp.w	fp, #16
    2458:	d1ea      	bne.n	2430 <log_output_process+0x194>
	print_formatted(output, "|");
    245a:	4936      	ldr	r1, [pc, #216]	; (2534 <log_output_process+0x298>)
    245c:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    245e:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
    2462:	f7ff fefb 	bl	225c <print_formatted>
		if (i < length) {
    2466:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
    2468:	9b05      	ldr	r3, [sp, #20]
    246a:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
    246c:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
    2470:	295f      	cmp	r1, #95	; 0x5f
    2472:	bf28      	it	cs
    2474:	222e      	movcs	r2, #46	; 0x2e
    2476:	4930      	ldr	r1, [pc, #192]	; (2538 <log_output_process+0x29c>)
    2478:	4620      	mov	r0, r4
    247a:	f7ff feef 	bl	225c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    247e:	f10b 0b01 	add.w	fp, fp, #1
    2482:	f1bb 0f10 	cmp.w	fp, #16
    2486:	d01d      	beq.n	24c4 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
    2488:	f01b 0f07 	tst.w	fp, #7
    248c:	d103      	bne.n	2496 <log_output_process+0x1fa>
			print_formatted(output, " ");
    248e:	4649      	mov	r1, r9
    2490:	4620      	mov	r0, r4
    2492:	f7ff fee3 	bl	225c <print_formatted>
		if (i < length) {
    2496:	45d8      	cmp	r8, fp
    2498:	465a      	mov	r2, fp
    249a:	d8e5      	bhi.n	2468 <log_output_process+0x1cc>
			print_formatted(output, " ");
    249c:	4649      	mov	r1, r9
    249e:	4620      	mov	r0, r4
    24a0:	f7ff fedc 	bl	225c <print_formatted>
    24a4:	e7eb      	b.n	247e <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    24a6:	481f      	ldr	r0, [pc, #124]	; (2524 <log_output_process+0x288>)
		prefix_offset = 0;
    24a8:	9d04      	ldr	r5, [sp, #16]
    24aa:	e7a1      	b.n	23f0 <log_output_process+0x154>
		print_formatted(output, " ");
    24ac:	4649      	mov	r1, r9
    24ae:	4620      	mov	r0, r4
    24b0:	f7ff fed4 	bl	225c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    24b4:	f10b 0b01 	add.w	fp, fp, #1
    24b8:	e7b0      	b.n	241c <log_output_process+0x180>
			print_formatted(output, "   ");
    24ba:	4920      	ldr	r1, [pc, #128]	; (253c <log_output_process+0x2a0>)
    24bc:	4620      	mov	r0, r4
    24be:	f7ff fecd 	bl	225c <print_formatted>
    24c2:	e7c5      	b.n	2450 <log_output_process+0x1b4>
		data += length;
    24c4:	9b05      	ldr	r3, [sp, #20]
	} while (len);
    24c6:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
    24ca:	4443      	add	r3, r8
    24cc:	9305      	str	r3, [sp, #20]
	} while (len);
    24ce:	d19a      	bne.n	2406 <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    24d0:	9b04      	ldr	r3, [sp, #16]
    24d2:	2b00      	cmp	r3, #0
    24d4:	f47f af43 	bne.w	235e <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    24d8:	4620      	mov	r0, r4
}
    24da:	b009      	add	sp, #36	; 0x24
    24dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    24e0:	f004 be9f 	b.w	7222 <log_output_flush>
		print_formatted(output, "%s", log_color);
    24e4:	4a06      	ldr	r2, [pc, #24]	; (2500 <log_output_process+0x264>)
    24e6:	4905      	ldr	r1, [pc, #20]	; (24fc <log_output_process+0x260>)
    24e8:	4620      	mov	r0, r4
    24ea:	f7ff feb7 	bl	225c <print_formatted>
}
    24ee:	e739      	b.n	2364 <log_output_process+0xc8>
    24f0:	00008392 	.word	0x00008392
    24f4:	00008396 	.word	0x00008396
    24f8:	00007fc0 	.word	0x00007fc0
    24fc:	0000896c 	.word	0x0000896c
    2500:	0000838d 	.word	0x0000838d
    2504:	00007fd4 	.word	0x00007fd4
    2508:	000083bb 	.word	0x000083bb
    250c:	000083c1 	.word	0x000083c1
    2510:	000083c5 	.word	0x000083c5
    2514:	200003ac 	.word	0x200003ac
    2518:	200003a8 	.word	0x200003a8
    251c:	0000839f 	.word	0x0000839f
    2520:	000071df 	.word	0x000071df
    2524:	000071c3 	.word	0x000071c3
    2528:	00007215 	.word	0x00007215
    252c:	000083d2 	.word	0x000083d2
    2530:	000083ca 	.word	0x000083ca
    2534:	000083d4 	.word	0x000083d4
    2538:	000083d6 	.word	0x000083d6
    253c:	000083d0 	.word	0x000083d0

00002540 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    2540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    2544:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    2546:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    2548:	688e      	ldr	r6, [r1, #8]
    254a:	b086      	sub	sp, #24
    254c:	4605      	mov	r5, r0
    254e:	460c      	mov	r4, r1
    2550:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
    2552:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    2556:	b15b      	cbz	r3, 2570 <log_output_msg_process+0x30>
    2558:	4a13      	ldr	r2, [pc, #76]	; (25a8 <log_output_msg_process+0x68>)
    255a:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    255c:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    2560:	2900      	cmp	r1, #0
    2562:	db1f      	blt.n	25a4 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    2564:	7820      	ldrb	r0, [r4, #0]
    2566:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    256a:	f7ff fe0f 	bl	218c <log_source_name_get>
    256e:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    2570:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
    2572:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    2574:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    2578:	9700      	str	r7, [sp, #0]
    257a:	f3c2 224a 	ubfx	r2, r2, #9, #11
    257e:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    2580:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
    2584:	f3c0 100b 	ubfx	r0, r0, #4, #12
    2588:	bf08      	it	eq
    258a:	2100      	moveq	r1, #0
    258c:	e9cd 0803 	strd	r0, r8, [sp, #12]
    2590:	e9cd 1401 	strd	r1, r4, [sp, #4]
    2594:	2200      	movs	r2, #0
    2596:	4631      	mov	r1, r6
    2598:	4628      	mov	r0, r5
    259a:	f7ff fe7f 	bl	229c <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    259e:	b006      	add	sp, #24
    25a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    25a4:	2300      	movs	r3, #0
    25a6:	e7e3      	b.n	2570 <log_output_msg_process+0x30>
    25a8:	00007e60 	.word	0x00007e60

000025ac <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    25ac:	4a07      	ldr	r2, [pc, #28]	; (25cc <log_output_timestamp_freq_set+0x20>)
    25ae:	2100      	movs	r1, #0
    25b0:	2301      	movs	r3, #1
    25b2:	4290      	cmp	r0, r2
    25b4:	d806      	bhi.n	25c4 <log_output_timestamp_freq_set+0x18>
    25b6:	4a06      	ldr	r2, [pc, #24]	; (25d0 <log_output_timestamp_freq_set+0x24>)
    25b8:	b901      	cbnz	r1, 25bc <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    25ba:	2301      	movs	r3, #1
    25bc:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    25be:	4b05      	ldr	r3, [pc, #20]	; (25d4 <log_output_timestamp_freq_set+0x28>)
    25c0:	6018      	str	r0, [r3, #0]
}
    25c2:	4770      	bx	lr
		frequency /= 2U;
    25c4:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    25c6:	005b      	lsls	r3, r3, #1
    25c8:	2101      	movs	r1, #1
    25ca:	e7f2      	b.n	25b2 <log_output_timestamp_freq_set+0x6>
    25cc:	000f4240 	.word	0x000f4240
    25d0:	200003a8 	.word	0x200003a8
    25d4:	200003ac 	.word	0x200003ac

000025d8 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    25d8:	4b01      	ldr	r3, [pc, #4]	; (25e0 <log_backend_rtt_init+0x8>)
    25da:	2201      	movs	r2, #1
    25dc:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    25de:	4770      	bx	lr
    25e0:	200007bf 	.word	0x200007bf

000025e4 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    25e4:	4b01      	ldr	r3, [pc, #4]	; (25ec <format_set+0x8>)
	return 0;
}
    25e6:	2000      	movs	r0, #0
	log_format_current = log_type;
    25e8:	6019      	str	r1, [r3, #0]
}
    25ea:	4770      	bx	lr
    25ec:	200003c4 	.word	0x200003c4

000025f0 <panic>:
	panic_mode = true;
    25f0:	4b02      	ldr	r3, [pc, #8]	; (25fc <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    25f2:	4803      	ldr	r0, [pc, #12]	; (2600 <panic+0x10>)
    25f4:	2201      	movs	r2, #1
    25f6:	701a      	strb	r2, [r3, #0]
    25f8:	f004 be13 	b.w	7222 <log_output_flush>
    25fc:	200007c0 	.word	0x200007c0
    2600:	00008004 	.word	0x00008004

00002604 <process>:
{
    2604:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2606:	4b06      	ldr	r3, [pc, #24]	; (2620 <process+0x1c>)
    2608:	6818      	ldr	r0, [r3, #0]
{
    260a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    260c:	f7ff fd42 	bl	2094 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    2610:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2612:	4603      	mov	r3, r0
}
    2614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    2618:	4802      	ldr	r0, [pc, #8]	; (2624 <process+0x20>)
    261a:	220f      	movs	r2, #15
    261c:	4718      	bx	r3
    261e:	bf00      	nop
    2620:	200003c4 	.word	0x200003c4
    2624:	00008004 	.word	0x00008004

00002628 <data_out_block_mode>:
{
    2628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    262a:	4d19      	ldr	r5, [pc, #100]	; (2690 <data_out_block_mode+0x68>)
    262c:	4607      	mov	r7, r0
    262e:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    2630:	2404      	movs	r4, #4
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2632:	4632      	mov	r2, r6
    2634:	4639      	mov	r1, r7
    2636:	2000      	movs	r0, #0
    2638:	f003 f950 	bl	58dc <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    263c:	b1c8      	cbz	r0, 2672 <data_out_block_mode+0x4a>
	host_present = true;
    263e:	2301      	movs	r3, #1
    2640:	702b      	strb	r3, [r5, #0]
	return panic_mode;
    2642:	4b14      	ldr	r3, [pc, #80]	; (2694 <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
    2644:	781b      	ldrb	r3, [r3, #0]
    2646:	b92b      	cbnz	r3, 2654 <data_out_block_mode+0x2c>
}
    2648:	4630      	mov	r0, r6
    264a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
    264c:	b95c      	cbnz	r4, 2666 <data_out_block_mode+0x3e>
		host_present = false;
    264e:	702c      	strb	r4, [r5, #0]
    2650:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    2654:	2000      	movs	r0, #0
    2656:	f003 f9b5 	bl	59c4 <SEGGER_RTT_HasDataUp>
    265a:	2800      	cmp	r0, #0
    265c:	d0f4      	beq.n	2648 <data_out_block_mode+0x20>
    265e:	782b      	ldrb	r3, [r5, #0]
    2660:	2b00      	cmp	r3, #0
    2662:	d1f3      	bne.n	264c <data_out_block_mode+0x24>
    2664:	e7f0      	b.n	2648 <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
    2666:	3c01      	subs	r4, #1
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    2668:	f241 3088 	movw	r0, #5000	; 0x1388
    266c:	f005 facc 	bl	7c08 <z_impl_k_busy_wait>
}
    2670:	e7f0      	b.n	2654 <data_out_block_mode+0x2c>
		} else if (host_present) {
    2672:	782b      	ldrb	r3, [r5, #0]
    2674:	b113      	cbz	r3, 267c <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
    2676:	3c01      	subs	r4, #1
    2678:	d104      	bne.n	2684 <data_out_block_mode+0x5c>
		host_present = false;
    267a:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    267c:	782b      	ldrb	r3, [r5, #0]
    267e:	2b00      	cmp	r3, #0
    2680:	d1d7      	bne.n	2632 <data_out_block_mode+0xa>
    2682:	e7e1      	b.n	2648 <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
    2684:	f241 3088 	movw	r0, #5000	; 0x1388
    2688:	f005 fabe 	bl	7c08 <z_impl_k_busy_wait>
    268c:	e7f6      	b.n	267c <data_out_block_mode+0x54>
    268e:	bf00      	nop
    2690:	200007bf 	.word	0x200007bf
    2694:	200007c0 	.word	0x200007c0

00002698 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    2698:	4b01      	ldr	r3, [pc, #4]	; (26a0 <format_set+0x8>)
	return 0;
}
    269a:	2000      	movs	r0, #0
	log_format_current = log_type;
    269c:	6019      	str	r1, [r3, #0]
}
    269e:	4770      	bx	lr
    26a0:	200003dc 	.word	0x200003dc

000026a4 <panic>:
		}
	}
}

static void panic(struct log_backend const *const backend)
{
    26a4:	b507      	push	{r0, r1, r2, lr}
	}
#elif defined(CONFIG_PM_DEVICE)
	enum pm_device_state pm_state;
	int rc;

	rc = pm_device_state_get(uart_dev, &pm_state);
    26a6:	480b      	ldr	r0, [pc, #44]	; (26d4 <panic+0x30>)
    26a8:	f10d 0107 	add.w	r1, sp, #7
    26ac:	f004 fdc7 	bl	723e <pm_device_state_get>
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
    26b0:	b930      	cbnz	r0, 26c0 <panic+0x1c>
    26b2:	f89d 1007 	ldrb.w	r1, [sp, #7]
    26b6:	2901      	cmp	r1, #1
    26b8:	d102      	bne.n	26c0 <panic+0x1c>
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
    26ba:	4806      	ldr	r0, [pc, #24]	; (26d4 <panic+0x30>)
    26bc:	f000 fa2c 	bl	2b18 <pm_device_action_run>
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
    26c0:	4b05      	ldr	r3, [pc, #20]	; (26d8 <panic+0x34>)
    26c2:	4806      	ldr	r0, [pc, #24]	; (26dc <panic+0x38>)
    26c4:	2201      	movs	r2, #1
    26c6:	701a      	strb	r2, [r3, #0]
    26c8:	f004 fdab 	bl	7222 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    26cc:	b003      	add	sp, #12
    26ce:	f85d fb04 	ldr.w	pc, [sp], #4
    26d2:	bf00      	nop
    26d4:	00007cac 	.word	0x00007cac
    26d8:	200007c3 	.word	0x200007c3
    26dc:	00008030 	.word	0x00008030

000026e0 <process>:
{
    26e0:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    26e2:	4b06      	ldr	r3, [pc, #24]	; (26fc <process+0x1c>)
    26e4:	6818      	ldr	r0, [r3, #0]
{
    26e6:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    26e8:	f7ff fcd4 	bl	2094 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    26ec:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    26ee:	4603      	mov	r3, r0
}
    26f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
    26f4:	4802      	ldr	r0, [pc, #8]	; (2700 <process+0x20>)
    26f6:	220f      	movs	r2, #15
    26f8:	4718      	bx	r3
    26fa:	bf00      	nop
    26fc:	200003dc 	.word	0x200003dc
    2700:	00008030 	.word	0x00008030

00002704 <char_out>:
{
    2704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2706:	4f07      	ldr	r7, [pc, #28]	; (2724 <char_out+0x20>)
    2708:	460d      	mov	r5, r1
    270a:	4604      	mov	r4, r0
    270c:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    270e:	42b4      	cmp	r4, r6
    2710:	d101      	bne.n	2716 <char_out+0x12>
}
    2712:	4628      	mov	r0, r5
    2714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    2716:	f814 1b01 	ldrb.w	r1, [r4], #1
    271a:	68bb      	ldr	r3, [r7, #8]
    271c:	4801      	ldr	r0, [pc, #4]	; (2724 <char_out+0x20>)
    271e:	685b      	ldr	r3, [r3, #4]
    2720:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    2722:	e7f4      	b.n	270e <char_out+0xa>
    2724:	00007cac 	.word	0x00007cac

00002728 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    2728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    272c:	4605      	mov	r5, r0
	__asm__ volatile(
    272e:	f04f 0320 	mov.w	r3, #32
    2732:	f3ef 8611 	mrs	r6, BASEPRI
    2736:	f383 8812 	msr	BASEPRI_MAX, r3
    273a:	f3bf 8f6f 	isb	sy
	return list->head;
    273e:	4b0e      	ldr	r3, [pc, #56]	; (2778 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2740:	4f0e      	ldr	r7, [pc, #56]	; (277c <pm_state_notify+0x54>)
    2742:	681c      	ldr	r4, [r3, #0]
    2744:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2780 <pm_state_notify+0x58>
    2748:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    274c:	b92c      	cbnz	r4, 275a <pm_state_notify+0x32>
	__asm__ volatile(
    274e:	f386 8811 	msr	BASEPRI, r6
    2752:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    2756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    275a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    275e:	2d00      	cmp	r5, #0
    2760:	bf18      	it	ne
    2762:	4613      	movne	r3, r2
		if (callback) {
    2764:	b12b      	cbz	r3, 2772 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2766:	f898 2010 	ldrb.w	r2, [r8, #16]
    276a:	fb09 f202 	mul.w	r2, r9, r2
    276e:	5cb8      	ldrb	r0, [r7, r2]
    2770:	4798      	blx	r3
	return node->next;
    2772:	6824      	ldr	r4, [r4, #0]
    2774:	e7ea      	b.n	274c <pm_state_notify+0x24>
    2776:	bf00      	nop
    2778:	200003fc 	.word	0x200003fc
    277c:	200003f0 	.word	0x200003f0
    2780:	2000058c 	.word	0x2000058c

00002784 <pm_resume_devices>:
{
    2784:	b570      	push	{r4, r5, r6, lr}
	for (int i = (num_susp - 1); i >= 0; i--) {
    2786:	4d08      	ldr	r5, [pc, #32]	; (27a8 <pm_resume_devices+0x24>)
		pm_device_action_run(__pm_device_slots_start[i],
    2788:	4e08      	ldr	r6, [pc, #32]	; (27ac <pm_resume_devices+0x28>)
	for (int i = (num_susp - 1); i >= 0; i--) {
    278a:	682c      	ldr	r4, [r5, #0]
    278c:	3c01      	subs	r4, #1
    278e:	2c00      	cmp	r4, #0
    2790:	da02      	bge.n	2798 <pm_resume_devices+0x14>
	num_susp = 0;
    2792:	2300      	movs	r3, #0
    2794:	602b      	str	r3, [r5, #0]
}
    2796:	bd70      	pop	{r4, r5, r6, pc}
		pm_device_action_run(__pm_device_slots_start[i],
    2798:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    279c:	2101      	movs	r1, #1
    279e:	f000 f9bb 	bl	2b18 <pm_device_action_run>
	for (int i = (num_susp - 1); i >= 0; i--) {
    27a2:	3c01      	subs	r4, #1
    27a4:	e7f3      	b.n	278e <pm_resume_devices+0xa>
    27a6:	bf00      	nop
    27a8:	200003e0 	.word	0x200003e0
    27ac:	2000018c 	.word	0x2000018c

000027b0 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    27b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    27b2:	ab0b      	add	r3, sp, #44	; 0x2c
    27b4:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    27b6:	9303      	str	r3, [sp, #12]
    27b8:	4b05      	ldr	r3, [pc, #20]	; (27d0 <z_log_msg_runtime_create.constprop.0+0x20>)
    27ba:	9302      	str	r3, [sp, #8]
    27bc:	2300      	movs	r3, #0
    27be:	e9cd 3300 	strd	r3, r3, [sp]
    27c2:	2201      	movs	r2, #1
    27c4:	4618      	mov	r0, r3
    27c6:	f7ff fd03 	bl	21d0 <z_impl_z_log_msg_runtime_vcreate>
}
    27ca:	b007      	add	sp, #28
    27cc:	f85d fb04 	ldr.w	pc, [sp], #4
    27d0:	00008423 	.word	0x00008423

000027d4 <pm_system_resume>:

void pm_system_resume(void)
{
    27d4:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    27d6:	4b19      	ldr	r3, [pc, #100]	; (283c <pm_system_resume+0x68>)
    27d8:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    27da:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    27de:	f004 031f 	and.w	r3, r4, #31
    27e2:	2201      	movs	r2, #1
    27e4:	409a      	lsls	r2, r3
    27e6:	4b16      	ldr	r3, [pc, #88]	; (2840 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    27e8:	0961      	lsrs	r1, r4, #5
    27ea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    27ee:	43d0      	mvns	r0, r2
    27f0:	e853 1f00 	ldrex	r1, [r3]
    27f4:	ea01 0500 	and.w	r5, r1, r0
    27f8:	e843 5600 	strex	r6, r5, [r3]
    27fc:	2e00      	cmp	r6, #0
    27fe:	d1f7      	bne.n	27f0 <pm_system_resume+0x1c>
    2800:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    2804:	420a      	tst	r2, r1
    2806:	d013      	beq.n	2830 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    2808:	4b0e      	ldr	r3, [pc, #56]	; (2844 <pm_system_resume+0x70>)
    280a:	4d0f      	ldr	r5, [pc, #60]	; (2848 <pm_system_resume+0x74>)
    280c:	b18b      	cbz	r3, 2832 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    280e:	230c      	movs	r3, #12
    2810:	4363      	muls	r3, r4
    2812:	18ea      	adds	r2, r5, r3
    2814:	5ce8      	ldrb	r0, [r5, r3]
    2816:	7851      	ldrb	r1, [r2, #1]
    2818:	f004 fdb4 	bl	7384 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    281c:	2000      	movs	r0, #0
    281e:	f7ff ff83 	bl	2728 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    2822:	230c      	movs	r3, #12
    2824:	435c      	muls	r4, r3
    2826:	192a      	adds	r2, r5, r4
    2828:	2300      	movs	r3, #0
    282a:	512b      	str	r3, [r5, r4]
    282c:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    2830:	bd70      	pop	{r4, r5, r6, pc}
    2832:	f383 8811 	msr	BASEPRI, r3
    2836:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    283a:	e7ef      	b.n	281c <pm_system_resume+0x48>
    283c:	2000058c 	.word	0x2000058c
    2840:	20000404 	.word	0x20000404
    2844:	00007385 	.word	0x00007385
    2848:	200003f0 	.word	0x200003f0

0000284c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    284c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t id = CURRENT_CPU;
    2850:	4b76      	ldr	r3, [pc, #472]	; (2a2c <pm_system_suspend+0x1e0>)
{
    2852:	b089      	sub	sp, #36	; 0x24
	uint8_t id = CURRENT_CPU;
    2854:	7c1d      	ldrb	r5, [r3, #16]
{
    2856:	4606      	mov	r6, r0
	__asm__ volatile(
    2858:	f04f 0320 	mov.w	r3, #32
    285c:	f3ef 8811 	mrs	r8, BASEPRI
    2860:	f383 8812 	msr	BASEPRI_MAX, r3
    2864:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    2868:	240c      	movs	r4, #12
    286a:	4b71      	ldr	r3, [pc, #452]	; (2a30 <pm_system_suspend+0x1e4>)
    286c:	4f71      	ldr	r7, [pc, #452]	; (2a34 <pm_system_suspend+0x1e8>)
    286e:	436c      	muls	r4, r5
    2870:	191a      	adds	r2, r3, r4
    2872:	5d19      	ldrb	r1, [r3, r4]
    2874:	2900      	cmp	r1, #0
    2876:	d07c      	beq.n	2972 <pm_system_suspend+0x126>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    2878:	ca07      	ldmia	r2, {r0, r1, r2}
    287a:	eb07 0c04 	add.w	ip, r7, r4
    287e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    2882:	2200      	movs	r2, #0
    2884:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    2886:	f388 8811 	msr	BASEPRI, r8
    288a:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    288e:	230c      	movs	r3, #12
    2890:	436b      	muls	r3, r5
    2892:	18fa      	adds	r2, r7, r3
    2894:	5cfb      	ldrb	r3, [r7, r3]
    2896:	2b00      	cmp	r3, #0
    2898:	f000 80ba 	beq.w	2a10 <pm_system_suspend+0x1c4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    289c:	1c73      	adds	r3, r6, #1
    289e:	d010      	beq.n	28c2 <pm_system_suspend+0x76>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    28a0:	f8d2 c008 	ldr.w	ip, [r2, #8]
    28a4:	4c64      	ldr	r4, [pc, #400]	; (2a38 <pm_system_suspend+0x1ec>)
    28a6:	4a65      	ldr	r2, [pc, #404]	; (2a3c <pm_system_suspend+0x1f0>)
    28a8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    28ac:	2100      	movs	r1, #0
    28ae:	fbec 4100 	umlal	r4, r1, ip, r0
    28b2:	2300      	movs	r3, #0
    28b4:	4620      	mov	r0, r4
    28b6:	f7fd fc11 	bl	dc <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    28ba:	2101      	movs	r1, #1
    28bc:	1a30      	subs	r0, r6, r0
    28be:	f002 f817 	bl	48f0 <sys_clock_set_timeout>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    28c2:	f3bf 8f5b 	dmb	ish
    28c6:	f8df 8178 	ldr.w	r8, [pc, #376]	; 2a40 <pm_system_suspend+0x1f4>
    28ca:	e858 4f00 	ldrex	r4, [r8]
    28ce:	3c01      	subs	r4, #1
    28d0:	e848 4300 	strex	r3, r4, [r8]
    28d4:	2b00      	cmp	r3, #0
    28d6:	d1f8      	bne.n	28ca <pm_system_suspend+0x7e>
    28d8:	f3bf 8f5b 	dmb	ish
    28dc:	46c2      	mov	sl, r8
			     z_cpus_pm_state[id].exit_latency_us),
				     true);
	}

#if defined(CONFIG_PM_DEVICE) && !defined(CONFIG_PM_DEVICE_RUNTIME_EXCLUSIVE)
	if (atomic_sub(&z_cpus_active, 1) == 1) {
    28de:	b99c      	cbnz	r4, 2908 <pm_system_suspend+0xbc>
		if (z_cpus_pm_state[id].state != PM_STATE_RUNTIME_IDLE) {
    28e0:	230c      	movs	r3, #12
    28e2:	436b      	muls	r3, r5
    28e4:	5cfb      	ldrb	r3, [r7, r3]
    28e6:	2b01      	cmp	r3, #1
    28e8:	d00e      	beq.n	2908 <pm_system_suspend+0xbc>
	devc = z_device_get_all_static(&devs);
    28ea:	a807      	add	r0, sp, #28
    28ec:	f003 f884 	bl	59f8 <z_device_get_all_static>
	num_susp = 0;
    28f0:	f8df b150 	ldr.w	fp, [pc, #336]	; 2a44 <pm_system_suspend+0x1f8>
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
    28f4:	231c      	movs	r3, #28
	num_susp = 0;
    28f6:	f8cb 4000 	str.w	r4, [fp]
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
    28fa:	4358      	muls	r0, r3
    28fc:	9c07      	ldr	r4, [sp, #28]
    28fe:	381c      	subs	r0, #28
    2900:	4404      	add	r4, r0
    2902:	9b07      	ldr	r3, [sp, #28]
    2904:	429c      	cmp	r4, r3
    2906:	d23f      	bcs.n	2988 <pm_system_suspend+0x13c>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    2908:	f003 fda2 	bl	6450 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    290c:	2001      	movs	r0, #1
    290e:	f7ff ff0b 	bl	2728 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2912:	f3bf 8f5b 	dmb	ish
    2916:	4b4c      	ldr	r3, [pc, #304]	; (2a48 <pm_system_suspend+0x1fc>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    2918:	096a      	lsrs	r2, r5, #5
    291a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    291e:	f005 011f 	and.w	r1, r5, #31
    2922:	2201      	movs	r2, #1
    2924:	408a      	lsls	r2, r1
    2926:	e853 0f00 	ldrex	r0, [r3]
    292a:	4310      	orrs	r0, r2
    292c:	e843 0100 	strex	r1, r0, [r3]
    2930:	2900      	cmp	r1, #0
    2932:	d1f8      	bne.n	2926 <pm_system_suspend+0xda>
    2934:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    2938:	4b44      	ldr	r3, [pc, #272]	; (2a4c <pm_system_suspend+0x200>)
    293a:	b133      	cbz	r3, 294a <pm_system_suspend+0xfe>
		pm_state_set(info->state, info->substate_id);
    293c:	230c      	movs	r3, #12
    293e:	435d      	muls	r5, r3
    2940:	197b      	adds	r3, r7, r5
    2942:	5d78      	ldrb	r0, [r7, r5]
    2944:	7859      	ldrb	r1, [r3, #1]
    2946:	f004 fd11 	bl	736c <pm_state_set>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    294a:	f3bf 8f5b 	dmb	ish
    294e:	e85a 3f00 	ldrex	r3, [sl]
    2952:	1c5a      	adds	r2, r3, #1
    2954:	e84a 2100 	strex	r1, r2, [sl]
    2958:	2900      	cmp	r1, #0
    295a:	d1f8      	bne.n	294e <pm_system_suspend+0x102>
    295c:	f3bf 8f5b 	dmb	ish
	state_set(&z_cpus_pm_state[id]);
	pm_stats_stop();

	/* Wake up sequence starts here */
#if defined(CONFIG_PM_DEVICE) && !defined(CONFIG_PM_DEVICE_RUNTIME_EXCLUSIVE)
	if (atomic_add(&z_cpus_active, 1) == 0) {
    2960:	b90b      	cbnz	r3, 2966 <pm_system_suspend+0x11a>
		pm_resume_devices();
    2962:	f7ff ff0f 	bl	2784 <pm_resume_devices>
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    2966:	f7ff ff35 	bl	27d4 <pm_system_resume>
	k_sched_unlock();
    296a:	f003 fd85 	bl	6478 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    296e:	2001      	movs	r0, #1
    2970:	e04f      	b.n	2a12 <pm_system_suspend+0x1c6>
		info = pm_policy_next_state(id, ticks);
    2972:	4601      	mov	r1, r0
    2974:	4628      	mov	r0, r5
    2976:	f000 f871 	bl	2a5c <pm_policy_next_state>
		if (info != NULL) {
    297a:	2800      	cmp	r0, #0
    297c:	d083      	beq.n	2886 <pm_system_suspend+0x3a>
			z_cpus_pm_state[id] = *info;
    297e:	c807      	ldmia	r0, {r0, r1, r2}
    2980:	443c      	add	r4, r7
    2982:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    2986:	e77e      	b.n	2886 <pm_system_suspend+0x3a>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    2988:	4620      	mov	r0, r4
    298a:	f005 f83b 	bl	7a04 <z_device_is_ready>
		if (!device_is_ready(dev) || pm_device_is_busy(dev) ||
    298e:	2800      	cmp	r0, #0
    2990:	d04a      	beq.n	2a28 <pm_system_suspend+0x1dc>
    2992:	4620      	mov	r0, r4
    2994:	f004 fc5c 	bl	7250 <pm_device_is_busy>
    2998:	2800      	cmp	r0, #0
    299a:	d145      	bne.n	2a28 <pm_system_suspend+0x1dc>
		    pm_device_state_is_locked(dev) ||
    299c:	4620      	mov	r0, r4
    299e:	f004 fc6b 	bl	7278 <pm_device_state_is_locked>
		if (!device_is_ready(dev) || pm_device_is_busy(dev) ||
    29a2:	2800      	cmp	r0, #0
    29a4:	d140      	bne.n	2a28 <pm_system_suspend+0x1dc>
		    pm_device_wakeup_is_enabled(dev) ||
    29a6:	4620      	mov	r0, r4
    29a8:	f004 fc5c 	bl	7264 <pm_device_wakeup_is_enabled>
		    pm_device_state_is_locked(dev) ||
    29ac:	4606      	mov	r6, r0
    29ae:	2800      	cmp	r0, #0
    29b0:	d13a      	bne.n	2a28 <pm_system_suspend+0x1dc>
		ret = pm_device_action_run(dev, PM_DEVICE_ACTION_SUSPEND);
    29b2:	4601      	mov	r1, r0
    29b4:	4620      	mov	r0, r4
    29b6:	f000 f8af 	bl	2b18 <pm_device_action_run>
		if ((ret == -ENOSYS) || (ret == -ENOTSUP) || (ret == -EALREADY)) {
    29ba:	f020 0320 	bic.w	r3, r0, #32
    29be:	3378      	adds	r3, #120	; 0x78
		ret = pm_device_action_run(dev, PM_DEVICE_ACTION_SUSPEND);
    29c0:	4681      	mov	r9, r0
		if ((ret == -ENOSYS) || (ret == -ENOTSUP) || (ret == -EALREADY)) {
    29c2:	d031      	beq.n	2a28 <pm_system_suspend+0x1dc>
    29c4:	f110 0f86 	cmn.w	r0, #134	; 0x86
    29c8:	d02e      	beq.n	2a28 <pm_system_suspend+0x1dc>
		} else if (ret < 0) {
    29ca:	2800      	cmp	r0, #0
    29cc:	da24      	bge.n	2a18 <pm_system_suspend+0x1cc>
			LOG_ERR("Device %s did not enter %s state (%d)",
    29ce:	2001      	movs	r0, #1
    29d0:	6824      	ldr	r4, [r4, #0]
    29d2:	f000 f895 	bl	2b00 <pm_device_state_str>
    29d6:	4b1e      	ldr	r3, [pc, #120]	; (2a50 <pm_system_suspend+0x204>)
    29d8:	491e      	ldr	r1, [pc, #120]	; (2a54 <pm_system_suspend+0x208>)
    29da:	9403      	str	r4, [sp, #12]
    29dc:	e9cd 0904 	strd	r0, r9, [sp, #16]
    29e0:	e9cd 6301 	strd	r6, r3, [sp, #4]
    29e4:	2201      	movs	r2, #1
    29e6:	4633      	mov	r3, r6
    29e8:	4630      	mov	r0, r6
    29ea:	9600      	str	r6, [sp, #0]
    29ec:	f7ff fee0 	bl	27b0 <z_log_msg_runtime_create.constprop.0>
				pm_resume_devices();
    29f0:	f7ff fec8 	bl	2784 <pm_resume_devices>
				z_cpus_pm_state[id].state = PM_STATE_ACTIVE;
    29f4:	230c      	movs	r3, #12
    29f6:	436b      	muls	r3, r5
    29f8:	54fe      	strb	r6, [r7, r3]
    29fa:	f3bf 8f5b 	dmb	ish
    29fe:	e858 3f00 	ldrex	r3, [r8]
    2a02:	3301      	adds	r3, #1
    2a04:	e848 3200 	strex	r2, r3, [r8]
    2a08:	2a00      	cmp	r2, #0
    2a0a:	d1f8      	bne.n	29fe <pm_system_suspend+0x1b2>
    2a0c:	f3bf 8f5b 	dmb	ish
		return false;
    2a10:	2000      	movs	r0, #0
}
    2a12:	b009      	add	sp, #36	; 0x24
    2a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__pm_device_slots_start[num_susp] = dev;
    2a18:	f8db 3000 	ldr.w	r3, [fp]
    2a1c:	4a0e      	ldr	r2, [pc, #56]	; (2a58 <pm_system_suspend+0x20c>)
    2a1e:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
		num_susp++;
    2a22:	3301      	adds	r3, #1
    2a24:	f8cb 3000 	str.w	r3, [fp]
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
    2a28:	3c1c      	subs	r4, #28
    2a2a:	e76a      	b.n	2902 <pm_system_suspend+0xb6>
    2a2c:	2000058c 	.word	0x2000058c
    2a30:	200003e4 	.word	0x200003e4
    2a34:	200003f0 	.word	0x200003f0
    2a38:	000f423f 	.word	0x000f423f
    2a3c:	000f4240 	.word	0x000f4240
    2a40:	2000000c 	.word	0x2000000c
    2a44:	200003e0 	.word	0x200003e0
    2a48:	20000404 	.word	0x20000404
    2a4c:	0000736d 	.word	0x0000736d
    2a50:	00008423 	.word	0x00008423
    2a54:	00007ec8 	.word	0x00007ec8
    2a58:	2000018c 	.word	0x2000018c

00002a5c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    2a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a60:	b085      	sub	sp, #20
    2a62:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2a64:	a903      	add	r1, sp, #12
    2a66:	f000 f843 	bl	2af0 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2a6a:	4b1e      	ldr	r3, [pc, #120]	; (2ae4 <pm_policy_next_state+0x88>)
    2a6c:	9d03      	ldr	r5, [sp, #12]
    2a6e:	f8d3 a000 	ldr.w	sl, [r3]
    2a72:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2ae8 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2a76:	1e43      	subs	r3, r0, #1
    2a78:	b21b      	sxth	r3, r3
    2a7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2a7e:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2a80:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    2a84:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    2a88:	f04f 0b00 	mov.w	fp, #0
    2a8c:	b924      	cbnz	r4, 2a98 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    2a8e:	46a1      	mov	r9, r4
}
    2a90:	4648      	mov	r0, r9
    2a92:	b005      	add	sp, #20
    2a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a98:	6868      	ldr	r0, [r5, #4]
    2a9a:	4a14      	ldr	r2, [pc, #80]	; (2aec <pm_policy_next_state+0x90>)
    2a9c:	46c4      	mov	ip, r8
    2a9e:	4659      	mov	r1, fp
    2aa0:	fbe0 c107 	umlal	ip, r1, r0, r7
    2aa4:	2300      	movs	r3, #0
    2aa6:	4660      	mov	r0, ip
    2aa8:	f7fd fb18 	bl	dc <__aeabi_uldivmod>
    2aac:	9001      	str	r0, [sp, #4]
    2aae:	68a8      	ldr	r0, [r5, #8]
    2ab0:	4a0e      	ldr	r2, [pc, #56]	; (2aec <pm_policy_next_state+0x90>)
    2ab2:	46c4      	mov	ip, r8
    2ab4:	4659      	mov	r1, fp
    2ab6:	fbe0 c107 	umlal	ip, r1, r0, r7
    2aba:	2300      	movs	r3, #0
    2abc:	4660      	mov	r0, ip
    2abe:	f7fd fb0d 	bl	dc <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2ac2:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    2ac6:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2ac8:	d001      	beq.n	2ace <pm_policy_next_state+0x72>
    2aca:	4582      	cmp	sl, r0
    2acc:	d905      	bls.n	2ada <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    2ace:	1c73      	adds	r3, r6, #1
    2ad0:	d0de      	beq.n	2a90 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    2ad2:	9b01      	ldr	r3, [sp, #4]
    2ad4:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    2ad6:	42b0      	cmp	r0, r6
    2ad8:	d9da      	bls.n	2a90 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2ada:	3c01      	subs	r4, #1
    2adc:	b2a4      	uxth	r4, r4
    2ade:	3d0c      	subs	r5, #12
    2ae0:	e7d4      	b.n	2a8c <pm_policy_next_state+0x30>
    2ae2:	bf00      	nop
    2ae4:	20000010 	.word	0x20000010
    2ae8:	000f423f 	.word	0x000f423f
    2aec:	000f4240 	.word	0x000f4240

00002af0 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    2af0:	b908      	cbnz	r0, 2af6 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    2af2:	4b02      	ldr	r3, [pc, #8]	; (2afc <pm_state_cpu_get_all+0xc>)
    2af4:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    2af6:	2000      	movs	r0, #0
    2af8:	4770      	bx	lr
    2afa:	bf00      	nop
    2afc:	00008040 	.word	0x00008040

00002b00 <pm_device_state_str>:
	[PM_DEVICE_ACTION_TURN_ON] = PM_DEVICE_STATE_OFF,
};

const char *pm_device_state_str(enum pm_device_state state)
{
	switch (state) {
    2b00:	2803      	cmp	r0, #3
    2b02:	bf9a      	itte	ls
    2b04:	4b02      	ldrls	r3, [pc, #8]	; (2b10 <pm_device_state_str+0x10>)
    2b06:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
{
    2b0a:	4802      	ldrhi	r0, [pc, #8]	; (2b14 <pm_device_state_str+0x14>)
	case PM_DEVICE_STATE_OFF:
		return "off";
	default:
		return "";
	}
}
    2b0c:	4770      	bx	lr
    2b0e:	bf00      	nop
    2b10:	00008040 	.word	0x00008040
    2b14:	0000838c 	.word	0x0000838c

00002b18 <pm_device_action_run>:

int pm_device_action_run(const struct device *dev,
			 enum pm_device_action action)
{
    2b18:	b570      	push	{r4, r5, r6, lr}
	struct pm_device *pm = dev->pm;
    2b1a:	6984      	ldr	r4, [r0, #24]
{
    2b1c:	4603      	mov	r3, r0
    2b1e:	460d      	mov	r5, r1
	int ret;

	if (pm == NULL) {
    2b20:	2c00      	cmp	r4, #0
    2b22:	d03a      	beq.n	2b9a <pm_device_action_run+0x82>
		return -ENOSYS;
	}

	if (pm_device_state_is_locked(dev)) {
    2b24:	f004 fba8 	bl	7278 <pm_device_state_is_locked>
    2b28:	2800      	cmp	r0, #0
    2b2a:	d139      	bne.n	2ba0 <pm_device_action_run+0x88>
		return -EPERM;
	}

	/* Validate action against current state */
	if (pm->state == action_target_state[action]) {
    2b2c:	4821      	ldr	r0, [pc, #132]	; (2bb4 <pm_device_action_run+0x9c>)
    2b2e:	7a22      	ldrb	r2, [r4, #8]
    2b30:	5c46      	ldrb	r6, [r0, r1]
    2b32:	42b2      	cmp	r2, r6
    2b34:	d037      	beq.n	2ba6 <pm_device_action_run+0x8e>
		return -EALREADY;
	}
	if (pm->state != action_expected_state[action]) {
    2b36:	4820      	ldr	r0, [pc, #128]	; (2bb8 <pm_device_action_run+0xa0>)
    2b38:	5c40      	ldrb	r0, [r0, r1]
    2b3a:	4290      	cmp	r0, r2
    2b3c:	d136      	bne.n	2bac <pm_device_action_run+0x94>
		return -ENOTSUP;
	}

	ret = pm->action_cb(dev, action);
    2b3e:	68e2      	ldr	r2, [r4, #12]
    2b40:	4618      	mov	r0, r3
    2b42:	4790      	blx	r2
	if (ret < 0) {
    2b44:	2800      	cmp	r0, #0
    2b46:	da15      	bge.n	2b74 <pm_device_action_run+0x5c>
		 * physical behavior.
		 *
		 * The function will still return the error code so the domain
		 * can take whatever action is more appropriated.
		 */
		switch (action) {
    2b48:	2d02      	cmp	r5, #2
    2b4a:	d011      	beq.n	2b70 <pm_device_action_run+0x58>
    2b4c:	2d03      	cmp	r5, #3
    2b4e:	d110      	bne.n	2b72 <pm_device_action_run+0x5a>
		case PM_DEVICE_ACTION_TURN_ON:
			/* Store an error flag when the transition explicitly fails */
			if (ret != -ENOTSUP) {
    2b50:	f110 0f86 	cmn.w	r0, #134	; 0x86
    2b54:	d00c      	beq.n	2b70 <pm_device_action_run+0x58>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2b56:	f3bf 8f5b 	dmb	ish
    2b5a:	1d23      	adds	r3, r4, #4
    2b5c:	e853 1f00 	ldrex	r1, [r3]
    2b60:	f041 0102 	orr.w	r1, r1, #2
    2b64:	e843 1200 	strex	r2, r1, [r3]
    2b68:	2a00      	cmp	r2, #0
    2b6a:	d1f7      	bne.n	2b5c <pm_device_action_run+0x44>
    2b6c:	f3bf 8f5b 	dmb	ish
				atomic_set_bit(&pm->flags, PM_DEVICE_FLAG_TURN_ON_FAILED);
			}
			__fallthrough;
		case PM_DEVICE_ACTION_TURN_OFF:
			pm->state = action_target_state[action];
    2b70:	7226      	strb	r6, [r4, #8]
	if (action == PM_DEVICE_ACTION_TURN_OFF) {
		atomic_clear_bit(&pm->flags, PM_DEVICE_FLAG_TURN_ON_FAILED);
	}

	return 0;
}
    2b72:	bd70      	pop	{r4, r5, r6, pc}
	if (action == PM_DEVICE_ACTION_TURN_OFF) {
    2b74:	2d02      	cmp	r5, #2
	pm->state = action_target_state[action];
    2b76:	7226      	strb	r6, [r4, #8]
	if (action == PM_DEVICE_ACTION_TURN_OFF) {
    2b78:	d001      	beq.n	2b7e <pm_device_action_run+0x66>
	return 0;
    2b7a:	2000      	movs	r0, #0
    2b7c:	e7f9      	b.n	2b72 <pm_device_action_run+0x5a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2b7e:	3404      	adds	r4, #4
    2b80:	f3bf 8f5b 	dmb	ish
    2b84:	e854 3f00 	ldrex	r3, [r4]
    2b88:	f023 0302 	bic.w	r3, r3, #2
    2b8c:	e844 3200 	strex	r2, r3, [r4]
    2b90:	2a00      	cmp	r2, #0
    2b92:	d1f7      	bne.n	2b84 <pm_device_action_run+0x6c>
    2b94:	f3bf 8f5b 	dmb	ish
    2b98:	e7ef      	b.n	2b7a <pm_device_action_run+0x62>
		return -ENOSYS;
    2b9a:	f06f 0057 	mvn.w	r0, #87	; 0x57
    2b9e:	e7e8      	b.n	2b72 <pm_device_action_run+0x5a>
		return -EPERM;
    2ba0:	f04f 30ff 	mov.w	r0, #4294967295
    2ba4:	e7e5      	b.n	2b72 <pm_device_action_run+0x5a>
		return -EALREADY;
    2ba6:	f06f 0077 	mvn.w	r0, #119	; 0x77
    2baa:	e7e2      	b.n	2b72 <pm_device_action_run+0x5a>
		return -ENOTSUP;
    2bac:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2bb0:	e7df      	b.n	2b72 <pm_device_action_run+0x5a>
    2bb2:	bf00      	nop
    2bb4:	0000846f 	.word	0x0000846f
    2bb8:	0000846b 	.word	0x0000846b

00002bbc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2bbc:	4901      	ldr	r1, [pc, #4]	; (2bc4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2bbe:	2210      	movs	r2, #16
	str	r2, [r1]
    2bc0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2bc2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2bc4:	e000ed10 	.word	0xe000ed10

00002bc8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2bc8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2bca:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2bcc:	f380 8811 	msr	BASEPRI, r0
	isb
    2bd0:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    2bd4:	f3bf 8f4f 	dsb	sy
    2bd8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2bda:	b662      	cpsie	i
	isb
    2bdc:	f3bf 8f6f 	isb	sy

	bx	lr
    2be0:	4770      	bx	lr
    2be2:	bf00      	nop

00002be4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2be4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2be6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2be8:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    2bec:	f3bf 8f4f 	dsb	sy
    2bf0:	bf20      	wfe

	msr	BASEPRI, r0
    2bf2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2bf6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2bf8:	4770      	bx	lr
    2bfa:	bf00      	nop

00002bfc <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2bfc:	b570      	push	{r4, r5, r6, lr}
    2bfe:	4606      	mov	r6, r0
    2c00:	b086      	sub	sp, #24

	if (esf != NULL) {
    2c02:	460d      	mov	r5, r1
    2c04:	2900      	cmp	r1, #0
    2c06:	d038      	beq.n	2c7a <z_arm_fatal_error+0x7e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2c08:	688b      	ldr	r3, [r1, #8]
    2c0a:	9305      	str	r3, [sp, #20]
    2c0c:	684b      	ldr	r3, [r1, #4]
    2c0e:	9304      	str	r3, [sp, #16]
    2c10:	680b      	ldr	r3, [r1, #0]
    2c12:	9303      	str	r3, [sp, #12]
    2c14:	2400      	movs	r4, #0
    2c16:	4b1c      	ldr	r3, [pc, #112]	; (2c88 <z_arm_fatal_error+0x8c>)
    2c18:	491c      	ldr	r1, [pc, #112]	; (2c8c <z_arm_fatal_error+0x90>)
    2c1a:	9302      	str	r3, [sp, #8]
    2c1c:	2201      	movs	r2, #1
    2c1e:	4623      	mov	r3, r4
    2c20:	4620      	mov	r0, r4
    2c22:	e9cd 4400 	strd	r4, r4, [sp]
    2c26:	f004 fb31 	bl	728c <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2c2a:	696b      	ldr	r3, [r5, #20]
    2c2c:	9305      	str	r3, [sp, #20]
    2c2e:	692b      	ldr	r3, [r5, #16]
    2c30:	9304      	str	r3, [sp, #16]
    2c32:	68eb      	ldr	r3, [r5, #12]
    2c34:	9303      	str	r3, [sp, #12]
    2c36:	4b16      	ldr	r3, [pc, #88]	; (2c90 <z_arm_fatal_error+0x94>)
    2c38:	4914      	ldr	r1, [pc, #80]	; (2c8c <z_arm_fatal_error+0x90>)
    2c3a:	9400      	str	r4, [sp, #0]
    2c3c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2c40:	2201      	movs	r2, #1
    2c42:	4623      	mov	r3, r4
    2c44:	4620      	mov	r0, r4
    2c46:	f004 fb21 	bl	728c <z_log_msg_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2c4a:	69eb      	ldr	r3, [r5, #28]
    2c4c:	9303      	str	r3, [sp, #12]
    2c4e:	4b11      	ldr	r3, [pc, #68]	; (2c94 <z_arm_fatal_error+0x98>)
    2c50:	490e      	ldr	r1, [pc, #56]	; (2c8c <z_arm_fatal_error+0x90>)
    2c52:	9400      	str	r4, [sp, #0]
    2c54:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2c58:	2201      	movs	r2, #1
    2c5a:	4623      	mov	r3, r4
    2c5c:	4620      	mov	r0, r4
    2c5e:	f004 fb15 	bl	728c <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    2c62:	69ab      	ldr	r3, [r5, #24]
    2c64:	9303      	str	r3, [sp, #12]
    2c66:	4b0c      	ldr	r3, [pc, #48]	; (2c98 <z_arm_fatal_error+0x9c>)
    2c68:	4908      	ldr	r1, [pc, #32]	; (2c8c <z_arm_fatal_error+0x90>)
    2c6a:	9400      	str	r4, [sp, #0]
    2c6c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2c70:	2201      	movs	r2, #1
    2c72:	4623      	mov	r3, r4
    2c74:	4620      	mov	r0, r4
    2c76:	f004 fb09 	bl	728c <z_log_msg_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2c7a:	4629      	mov	r1, r5
    2c7c:	4630      	mov	r0, r6
}
    2c7e:	b006      	add	sp, #24
    2c80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    2c84:	f002 bec6 	b.w	5a14 <z_fatal_error>
    2c88:	00008473 	.word	0x00008473
    2c8c:	00007ec0 	.word	0x00007ec0
    2c90:	000084a2 	.word	0x000084a2
    2c94:	000084d1 	.word	0x000084d1
    2c98:	000084e0 	.word	0x000084e0

00002c9c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2c9c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2c9e:	2800      	cmp	r0, #0
    2ca0:	db07      	blt.n	2cb2 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ca2:	4a04      	ldr	r2, [pc, #16]	; (2cb4 <arch_irq_enable+0x18>)
    2ca4:	0941      	lsrs	r1, r0, #5
    2ca6:	2301      	movs	r3, #1
    2ca8:	f000 001f 	and.w	r0, r0, #31
    2cac:	4083      	lsls	r3, r0
    2cae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    2cb2:	4770      	bx	lr
    2cb4:	e000e100 	.word	0xe000e100

00002cb8 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    2cb8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2cba:	2800      	cmp	r0, #0
    2cbc:	db0c      	blt.n	2cd8 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2cbe:	0943      	lsrs	r3, r0, #5
    2cc0:	4906      	ldr	r1, [pc, #24]	; (2cdc <arch_irq_disable+0x24>)
    2cc2:	f000 001f 	and.w	r0, r0, #31
    2cc6:	3320      	adds	r3, #32
    2cc8:	2201      	movs	r2, #1
    2cca:	4082      	lsls	r2, r0
    2ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2cd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2cd4:	f3bf 8f6f 	isb	sy
}
    2cd8:	4770      	bx	lr
    2cda:	bf00      	nop
    2cdc:	e000e100 	.word	0xe000e100

00002ce0 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2ce0:	4b05      	ldr	r3, [pc, #20]	; (2cf8 <arch_irq_is_enabled+0x18>)
    2ce2:	0942      	lsrs	r2, r0, #5
    2ce4:	f000 001f 	and.w	r0, r0, #31
    2ce8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2cec:	2301      	movs	r3, #1
    2cee:	fa03 f000 	lsl.w	r0, r3, r0
}
    2cf2:	4010      	ands	r0, r2
    2cf4:	4770      	bx	lr
    2cf6:	bf00      	nop
    2cf8:	e000e100 	.word	0xe000e100

00002cfc <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2cfc:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2cfe:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d00:	bfa8      	it	ge
    2d02:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    2d06:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d0a:	bfb8      	it	lt
    2d0c:	4b06      	ldrlt	r3, [pc, #24]	; (2d28 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d0e:	ea4f 1141 	mov.w	r1, r1, lsl #5
    2d12:	bfac      	ite	ge
    2d14:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d18:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d1c:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d1e:	bfb4      	ite	lt
    2d20:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d22:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    2d26:	4770      	bx	lr
    2d28:	e000ed14 	.word	0xe000ed14

00002d2c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2d2c:	bf30      	wfi
    b z_SysNmiOnReset
    2d2e:	f7ff bffd 	b.w	2d2c <z_SysNmiOnReset>
    2d32:	bf00      	nop

00002d34 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2d34:	4a0b      	ldr	r2, [pc, #44]	; (2d64 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2d36:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2d38:	4b0b      	ldr	r3, [pc, #44]	; (2d68 <z_arm_prep_c+0x34>)
    2d3a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2d3e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    2d40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2d44:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2d48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2d4c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2d50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2d54:	f002 ff00 	bl	5b58 <z_bss_zero>
	z_data_copy();
    2d58:	f003 fcb4 	bl	66c4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2d5c:	f000 fb7c 	bl	3458 <z_arm_interrupt_init>
	z_cstart();
    2d60:	f002 ff3a 	bl	5bd8 <z_cstart>
    2d64:	00000000 	.word	0x00000000
    2d68:	e000ed00 	.word	0xe000ed00

00002d6c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2d6c:	4a09      	ldr	r2, [pc, #36]	; (2d94 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2d6e:	490a      	ldr	r1, [pc, #40]	; (2d98 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2d70:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2d72:	6809      	ldr	r1, [r1, #0]
    2d74:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2d76:	4909      	ldr	r1, [pc, #36]	; (2d9c <arch_swap+0x30>)
	_current->arch.basepri = key;
    2d78:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2d7a:	684b      	ldr	r3, [r1, #4]
    2d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2d80:	604b      	str	r3, [r1, #4]
    2d82:	2300      	movs	r3, #0
    2d84:	f383 8811 	msr	BASEPRI, r3
    2d88:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2d8c:	6893      	ldr	r3, [r2, #8]
}
    2d8e:	6f98      	ldr	r0, [r3, #120]	; 0x78
    2d90:	4770      	bx	lr
    2d92:	bf00      	nop
    2d94:	2000058c 	.word	0x2000058c
    2d98:	000081fc 	.word	0x000081fc
    2d9c:	e000ed00 	.word	0xe000ed00

00002da0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2da0:	490f      	ldr	r1, [pc, #60]	; (2de0 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2da2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2da4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2da8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2daa:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2dae:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2db2:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2db4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2db8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2dbc:	4f09      	ldr	r7, [pc, #36]	; (2de4 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2dbe:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2dc2:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    2dc4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2dc6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2dc8:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    2dca:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2dcc:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2dce:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2dd2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2dd6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2dda:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2dde:	4770      	bx	lr
    ldr r1, =_kernel
    2de0:	2000058c 	.word	0x2000058c
    ldr v4, =_SCS_ICSR
    2de4:	e000ed04 	.word	0xe000ed04

00002de8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2de8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2dec:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2dee:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2df2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2df6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2df8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2dfc:	2902      	cmp	r1, #2
    beq _oops
    2dfe:	d0ff      	beq.n	2e00 <_oops>

00002e00 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2e00:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    2e02:	f004 fa53 	bl	72ac <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    2e06:	bd01      	pop	{r0, pc}

00002e08 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2e08:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2e0c:	9b00      	ldr	r3, [sp, #0]
    2e0e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    2e12:	490a      	ldr	r1, [pc, #40]	; (2e3c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    2e14:	9b01      	ldr	r3, [sp, #4]
    2e16:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2e1a:	9b02      	ldr	r3, [sp, #8]
    2e1c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    2e20:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2e24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2e28:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    2e2c:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2e30:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2e32:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2e34:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2e36:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2e38:	4770      	bx	lr
    2e3a:	bf00      	nop
    2e3c:	00006e5f 	.word	0x00006e5f

00002e40 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2e40:	4b07      	ldr	r3, [pc, #28]	; (2e60 <arch_switch_to_main_thread+0x20>)
    2e42:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2e44:	4610      	mov	r0, r2
    2e46:	f381 8809 	msr	PSP, r1
    2e4a:	2100      	movs	r1, #0
    2e4c:	b663      	cpsie	if
    2e4e:	f381 8811 	msr	BASEPRI, r1
    2e52:	f3bf 8f6f 	isb	sy
    2e56:	2200      	movs	r2, #0
    2e58:	2300      	movs	r3, #0
    2e5a:	f004 f800 	bl	6e5e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2e5e:	bf00      	nop
    2e60:	2000058c 	.word	0x2000058c

00002e64 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2e64:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2e66:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2e68:	4a0b      	ldr	r2, [pc, #44]	; (2e98 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2e6a:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    2e6c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2e6e:	bf1e      	ittt	ne
	movne	r1, #0
    2e70:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2e72:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    2e74:	f004 fded 	blne	7a52 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2e78:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2e7a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2e7e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2e82:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2e86:	4905      	ldr	r1, [pc, #20]	; (2e9c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2e88:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2e8a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2e8c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2e8e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2e92:	4903      	ldr	r1, [pc, #12]	; (2ea0 <_isr_wrapper+0x3c>)
	bx r1
    2e94:	4708      	bx	r1
    2e96:	0000      	.short	0x0000
	ldr r2, =_kernel
    2e98:	2000058c 	.word	0x2000058c
	ldr r1, =_sw_isr_table
    2e9c:	00007d00 	.word	0x00007d00
	ldr r1, =z_arm_int_exit
    2ea0:	00002ea5 	.word	0x00002ea5

00002ea4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2ea4:	4b04      	ldr	r3, [pc, #16]	; (2eb8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2ea6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2ea8:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    2eaa:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2eac:	d003      	beq.n	2eb6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2eae:	4903      	ldr	r1, [pc, #12]	; (2ebc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2eb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2eb4:	600a      	str	r2, [r1, #0]

00002eb6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2eb6:	4770      	bx	lr
	ldr r3, =_kernel
    2eb8:	2000058c 	.word	0x2000058c
	ldr r1, =_SCS_ICSR
    2ebc:	e000ed04 	.word	0xe000ed04

00002ec0 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    2ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ec2:	b085      	sub	sp, #20
			      bool *recoverable)
{
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
    2ec4:	2400      	movs	r4, #0
    2ec6:	4b41      	ldr	r3, [pc, #260]	; (2fcc <mem_manage_fault.constprop.0+0x10c>)
    2ec8:	9302      	str	r3, [sp, #8]
    2eca:	e9cd 4400 	strd	r4, r4, [sp]
    2ece:	4623      	mov	r3, r4
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    2ed0:	4607      	mov	r7, r0
    2ed2:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    2ed4:	2201      	movs	r2, #1
    2ed6:	493e      	ldr	r1, [pc, #248]	; (2fd0 <mem_manage_fault.constprop.0+0x110>)
    2ed8:	4620      	mov	r0, r4
    2eda:	f004 f9f6 	bl	72ca <z_log_msg_runtime_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2ede:	4b3d      	ldr	r3, [pc, #244]	; (2fd4 <mem_manage_fault.constprop.0+0x114>)
    2ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2ee2:	06dd      	lsls	r5, r3, #27
    2ee4:	d56f      	bpl.n	2fc6 <mem_manage_fault.constprop.0+0x106>
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
    2ee6:	4b3c      	ldr	r3, [pc, #240]	; (2fd8 <mem_manage_fault.constprop.0+0x118>)
    2ee8:	4939      	ldr	r1, [pc, #228]	; (2fd0 <mem_manage_fault.constprop.0+0x110>)
    2eea:	9400      	str	r4, [sp, #0]
    2eec:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2ef0:	4620      	mov	r0, r4
    2ef2:	4623      	mov	r3, r4
    2ef4:	2201      	movs	r2, #1
    2ef6:	f004 f9e8 	bl	72ca <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_MEM_STACKING;
    2efa:	2011      	movs	r0, #17
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2efc:	4b35      	ldr	r3, [pc, #212]	; (2fd4 <mem_manage_fault.constprop.0+0x114>)
    2efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f00:	071c      	lsls	r4, r3, #28
    2f02:	d50a      	bpl.n	2f1a <mem_manage_fault.constprop.0+0x5a>
		reason = K_ERR_ARM_MEM_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    2f04:	4b35      	ldr	r3, [pc, #212]	; (2fdc <mem_manage_fault.constprop.0+0x11c>)
    2f06:	9302      	str	r3, [sp, #8]
    2f08:	2300      	movs	r3, #0
    2f0a:	4618      	mov	r0, r3
    2f0c:	e9cd 3300 	strd	r3, r3, [sp]
    2f10:	492f      	ldr	r1, [pc, #188]	; (2fd0 <mem_manage_fault.constprop.0+0x110>)
    2f12:	2201      	movs	r2, #1
    2f14:	f004 f9d9 	bl	72ca <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_MEM_UNSTACKING;
    2f18:	2012      	movs	r0, #18
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2f1a:	4d2e      	ldr	r5, [pc, #184]	; (2fd4 <mem_manage_fault.constprop.0+0x114>)
    2f1c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2f1e:	0799      	lsls	r1, r3, #30
    2f20:	d51f      	bpl.n	2f62 <mem_manage_fault.constprop.0+0xa2>
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
		PR_FAULT_INFO("  Data Access Violation");
    2f22:	2400      	movs	r4, #0
    2f24:	4b2e      	ldr	r3, [pc, #184]	; (2fe0 <mem_manage_fault.constprop.0+0x120>)
    2f26:	9302      	str	r3, [sp, #8]
    2f28:	2201      	movs	r2, #1
    2f2a:	4623      	mov	r3, r4
    2f2c:	e9cd 4400 	strd	r4, r4, [sp]
    2f30:	4927      	ldr	r1, [pc, #156]	; (2fd0 <mem_manage_fault.constprop.0+0x110>)
    2f32:	4620      	mov	r0, r4
    2f34:	f004 f9c9 	bl	72ca <z_log_msg_runtime_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    2f38:	6b6b      	ldr	r3, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2f3a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2f3c:	0612      	lsls	r2, r2, #24
    2f3e:	d50f      	bpl.n	2f60 <mem_manage_fault.constprop.0+0xa0>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2f40:	9303      	str	r3, [sp, #12]
    2f42:	4b28      	ldr	r3, [pc, #160]	; (2fe4 <mem_manage_fault.constprop.0+0x124>)
    2f44:	4922      	ldr	r1, [pc, #136]	; (2fd0 <mem_manage_fault.constprop.0+0x110>)
    2f46:	9400      	str	r4, [sp, #0]
    2f48:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2f4c:	2201      	movs	r2, #1
    2f4e:	4623      	mov	r3, r4
    2f50:	4620      	mov	r0, r4
    2f52:	f004 f9ba 	bl	72ca <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    2f56:	b11f      	cbz	r7, 2f60 <mem_manage_fault.constprop.0+0xa0>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2f58:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2f5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2f5e:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    2f60:	2013      	movs	r0, #19
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2f62:	4b1c      	ldr	r3, [pc, #112]	; (2fd4 <mem_manage_fault.constprop.0+0x114>)
    2f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f66:	07dd      	lsls	r5, r3, #31
    2f68:	d50a      	bpl.n	2f80 <mem_manage_fault.constprop.0+0xc0>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
		PR_FAULT_INFO("  Instruction Access Violation");
    2f6a:	4b1f      	ldr	r3, [pc, #124]	; (2fe8 <mem_manage_fault.constprop.0+0x128>)
    2f6c:	9302      	str	r3, [sp, #8]
    2f6e:	2300      	movs	r3, #0
    2f70:	4618      	mov	r0, r3
    2f72:	e9cd 3300 	strd	r3, r3, [sp]
    2f76:	4916      	ldr	r1, [pc, #88]	; (2fd0 <mem_manage_fault.constprop.0+0x110>)
    2f78:	2201      	movs	r2, #1
    2f7a:	f004 f9a6 	bl	72ca <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    2f7e:	2014      	movs	r0, #20
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2f80:	4b14      	ldr	r3, [pc, #80]	; (2fd4 <mem_manage_fault.constprop.0+0x114>)
    2f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f84:	069c      	lsls	r4, r3, #26
    2f86:	d50a      	bpl.n	2f9e <mem_manage_fault.constprop.0+0xde>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
		PR_FAULT_INFO(
    2f88:	4b18      	ldr	r3, [pc, #96]	; (2fec <mem_manage_fault.constprop.0+0x12c>)
    2f8a:	9302      	str	r3, [sp, #8]
    2f8c:	2300      	movs	r3, #0
    2f8e:	4618      	mov	r0, r3
    2f90:	e9cd 3300 	strd	r3, r3, [sp]
    2f94:	490e      	ldr	r1, [pc, #56]	; (2fd0 <mem_manage_fault.constprop.0+0x110>)
    2f96:	2201      	movs	r2, #1
    2f98:	f004 f997 	bl	72ca <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    2f9c:	2015      	movs	r0, #21
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2f9e:	4b0d      	ldr	r3, [pc, #52]	; (2fd4 <mem_manage_fault.constprop.0+0x114>)
    2fa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2fa2:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2fa4:	bf58      	it	pl
    2fa6:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2fa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2faa:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    2fac:	bf42      	ittt	mi
    2fae:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    2fb0:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    2fb4:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2fb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2fb8:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    2fbc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    2fbe:	2300      	movs	r3, #0
    2fc0:	7033      	strb	r3, [r6, #0]

	return reason;
}
    2fc2:	b005      	add	sp, #20
    2fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    2fc6:	2010      	movs	r0, #16
    2fc8:	e798      	b.n	2efc <mem_manage_fault.constprop.0+0x3c>
    2fca:	bf00      	nop
    2fcc:	0000850e 	.word	0x0000850e
    2fd0:	00007ec0 	.word	0x00007ec0
    2fd4:	e000ed00 	.word	0xe000ed00
    2fd8:	00008524 	.word	0x00008524
    2fdc:	00008557 	.word	0x00008557
    2fe0:	0000856a 	.word	0x0000856a
    2fe4:	00008582 	.word	0x00008582
    2fe8:	00008598 	.word	0x00008598
    2fec:	000085b7 	.word	0x000085b7

00002ff0 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ff2:	b085      	sub	sp, #20
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
    2ff4:	2400      	movs	r4, #0
    2ff6:	4b43      	ldr	r3, [pc, #268]	; (3104 <bus_fault.constprop.0+0x114>)
    2ff8:	9302      	str	r3, [sp, #8]
    2ffa:	e9cd 4400 	strd	r4, r4, [sp]
    2ffe:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3000:	4607      	mov	r7, r0
    3002:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    3004:	2201      	movs	r2, #1
    3006:	4940      	ldr	r1, [pc, #256]	; (3108 <bus_fault.constprop.0+0x118>)
    3008:	4620      	mov	r0, r4
    300a:	f004 f95e 	bl	72ca <z_log_msg_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    300e:	4b3f      	ldr	r3, [pc, #252]	; (310c <bus_fault.constprop.0+0x11c>)
    3010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3012:	04db      	lsls	r3, r3, #19
    3014:	d565      	bpl.n	30e2 <bus_fault.constprop.0+0xf2>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
    3016:	4b3e      	ldr	r3, [pc, #248]	; (3110 <bus_fault.constprop.0+0x120>)
    3018:	493b      	ldr	r1, [pc, #236]	; (3108 <bus_fault.constprop.0+0x118>)
    301a:	9400      	str	r4, [sp, #0]
    301c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3020:	4620      	mov	r0, r4
    3022:	4623      	mov	r3, r4
    3024:	2201      	movs	r2, #1
    3026:	f004 f950 	bl	72ca <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
    302a:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    302c:	4b37      	ldr	r3, [pc, #220]	; (310c <bus_fault.constprop.0+0x11c>)
    302e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3030:	051d      	lsls	r5, r3, #20
    3032:	d50a      	bpl.n	304a <bus_fault.constprop.0+0x5a>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    3034:	4b37      	ldr	r3, [pc, #220]	; (3114 <bus_fault.constprop.0+0x124>)
    3036:	9302      	str	r3, [sp, #8]
    3038:	2300      	movs	r3, #0
    303a:	4618      	mov	r0, r3
    303c:	e9cd 3300 	strd	r3, r3, [sp]
    3040:	4931      	ldr	r1, [pc, #196]	; (3108 <bus_fault.constprop.0+0x118>)
    3042:	2201      	movs	r2, #1
    3044:	f004 f941 	bl	72ca <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    3048:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    304a:	4d30      	ldr	r5, [pc, #192]	; (310c <bus_fault.constprop.0+0x11c>)
    304c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    304e:	059c      	lsls	r4, r3, #22
    3050:	d51f      	bpl.n	3092 <bus_fault.constprop.0+0xa2>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
    3052:	2400      	movs	r4, #0
    3054:	4b30      	ldr	r3, [pc, #192]	; (3118 <bus_fault.constprop.0+0x128>)
    3056:	9302      	str	r3, [sp, #8]
    3058:	2201      	movs	r2, #1
    305a:	4623      	mov	r3, r4
    305c:	4620      	mov	r0, r4
    305e:	e9cd 4400 	strd	r4, r4, [sp]
    3062:	4929      	ldr	r1, [pc, #164]	; (3108 <bus_fault.constprop.0+0x118>)
    3064:	f004 f931 	bl	72ca <z_log_msg_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    3068:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    306a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    306c:	0410      	lsls	r0, r2, #16
    306e:	d50f      	bpl.n	3090 <bus_fault.constprop.0+0xa0>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3070:	9303      	str	r3, [sp, #12]
    3072:	4b2a      	ldr	r3, [pc, #168]	; (311c <bus_fault.constprop.0+0x12c>)
    3074:	4924      	ldr	r1, [pc, #144]	; (3108 <bus_fault.constprop.0+0x118>)
    3076:	9400      	str	r4, [sp, #0]
    3078:	e9cd 4301 	strd	r4, r3, [sp, #4]
    307c:	2201      	movs	r2, #1
    307e:	4623      	mov	r3, r4
    3080:	4620      	mov	r0, r4
    3082:	f004 f922 	bl	72ca <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    3086:	b11f      	cbz	r7, 3090 <bus_fault.constprop.0+0xa0>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3088:	6aab      	ldr	r3, [r5, #40]	; 0x28
    308a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    308e:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    3090:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3092:	4b1e      	ldr	r3, [pc, #120]	; (310c <bus_fault.constprop.0+0x11c>)
    3094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3096:	0559      	lsls	r1, r3, #21
    3098:	d50a      	bpl.n	30b0 <bus_fault.constprop.0+0xc0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
    309a:	4b21      	ldr	r3, [pc, #132]	; (3120 <bus_fault.constprop.0+0x130>)
    309c:	9302      	str	r3, [sp, #8]
    309e:	2300      	movs	r3, #0
    30a0:	4618      	mov	r0, r3
    30a2:	e9cd 3300 	strd	r3, r3, [sp]
    30a6:	4918      	ldr	r1, [pc, #96]	; (3108 <bus_fault.constprop.0+0x118>)
    30a8:	2201      	movs	r2, #1
    30aa:	f004 f90e 	bl	72ca <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    30ae:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    30b0:	4a16      	ldr	r2, [pc, #88]	; (310c <bus_fault.constprop.0+0x11c>)
    30b2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    30b4:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    30b8:	d015      	beq.n	30e6 <bus_fault.constprop.0+0xf6>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
    30ba:	4b1a      	ldr	r3, [pc, #104]	; (3124 <bus_fault.constprop.0+0x134>)
    30bc:	9302      	str	r3, [sp, #8]
    30be:	2300      	movs	r3, #0
    30c0:	4618      	mov	r0, r3
    30c2:	e9cd 3300 	strd	r3, r3, [sp]
    30c6:	4910      	ldr	r1, [pc, #64]	; (3108 <bus_fault.constprop.0+0x118>)
    30c8:	2201      	movs	r2, #1
    30ca:	f004 f8fe 	bl	72ca <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    30ce:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    30d0:	4a0e      	ldr	r2, [pc, #56]	; (310c <bus_fault.constprop.0+0x11c>)
    30d2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    30d4:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    30d8:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    30da:	2300      	movs	r3, #0
    30dc:	7033      	strb	r3, [r6, #0]

	return reason;
}
    30de:	b005      	add	sp, #20
    30e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    30e2:	2016      	movs	r0, #22
    30e4:	e7a2      	b.n	302c <bus_fault.constprop.0+0x3c>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    30e6:	6a92      	ldr	r2, [r2, #40]	; 0x28
    30e8:	0492      	lsls	r2, r2, #18
    30ea:	d5f1      	bpl.n	30d0 <bus_fault.constprop.0+0xe0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    30ec:	4a0e      	ldr	r2, [pc, #56]	; (3128 <bus_fault.constprop.0+0x138>)
    30ee:	4906      	ldr	r1, [pc, #24]	; (3108 <bus_fault.constprop.0+0x118>)
    30f0:	9300      	str	r3, [sp, #0]
    30f2:	e9cd 3201 	strd	r3, r2, [sp, #4]
    30f6:	4618      	mov	r0, r3
    30f8:	2201      	movs	r2, #1
    30fa:	f004 f8e6 	bl	72ca <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    30fe:	201c      	movs	r0, #28
    3100:	e7e6      	b.n	30d0 <bus_fault.constprop.0+0xe0>
    3102:	bf00      	nop
    3104:	000085e6 	.word	0x000085e6
    3108:	00007ec0 	.word	0x00007ec0
    310c:	e000ed00 	.word	0xe000ed00
    3110:	000085fc 	.word	0x000085fc
    3114:	00008557 	.word	0x00008557
    3118:	0000860d 	.word	0x0000860d
    311c:	00008626 	.word	0x00008626
    3120:	0000863b 	.word	0x0000863b
    3124:	00008656 	.word	0x00008656
    3128:	000085b7 	.word	0x000085b7

0000312c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    312c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    312e:	2400      	movs	r4, #0
    3130:	4b37      	ldr	r3, [pc, #220]	; (3210 <usage_fault.constprop.0+0xe4>)
    3132:	9302      	str	r3, [sp, #8]
    3134:	2201      	movs	r2, #1
    3136:	4623      	mov	r3, r4
    3138:	e9cd 4400 	strd	r4, r4, [sp]
    313c:	4935      	ldr	r1, [pc, #212]	; (3214 <usage_fault.constprop.0+0xe8>)
    313e:	4620      	mov	r0, r4
    3140:	f004 f8c3 	bl	72ca <z_log_msg_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3144:	4b34      	ldr	r3, [pc, #208]	; (3218 <usage_fault.constprop.0+0xec>)
    3146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3148:	019a      	lsls	r2, r3, #6
    314a:	d55e      	bpl.n	320a <usage_fault.constprop.0+0xde>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
    314c:	4b33      	ldr	r3, [pc, #204]	; (321c <usage_fault.constprop.0+0xf0>)
    314e:	4931      	ldr	r1, [pc, #196]	; (3214 <usage_fault.constprop.0+0xe8>)
    3150:	9400      	str	r4, [sp, #0]
    3152:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3156:	4620      	mov	r0, r4
    3158:	4623      	mov	r3, r4
    315a:	2201      	movs	r2, #1
    315c:	f004 f8b5 	bl	72ca <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
    3160:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3162:	4b2d      	ldr	r3, [pc, #180]	; (3218 <usage_fault.constprop.0+0xec>)
    3164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3166:	01db      	lsls	r3, r3, #7
    3168:	d50a      	bpl.n	3180 <usage_fault.constprop.0+0x54>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
    316a:	4b2d      	ldr	r3, [pc, #180]	; (3220 <usage_fault.constprop.0+0xf4>)
    316c:	9302      	str	r3, [sp, #8]
    316e:	2300      	movs	r3, #0
    3170:	4618      	mov	r0, r3
    3172:	e9cd 3300 	strd	r3, r3, [sp]
    3176:	4927      	ldr	r1, [pc, #156]	; (3214 <usage_fault.constprop.0+0xe8>)
    3178:	2201      	movs	r2, #1
    317a:	f004 f8a6 	bl	72ca <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    317e:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3180:	4b25      	ldr	r3, [pc, #148]	; (3218 <usage_fault.constprop.0+0xec>)
    3182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3184:	031c      	lsls	r4, r3, #12
    3186:	d50a      	bpl.n	319e <usage_fault.constprop.0+0x72>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
    3188:	4b26      	ldr	r3, [pc, #152]	; (3224 <usage_fault.constprop.0+0xf8>)
    318a:	9302      	str	r3, [sp, #8]
    318c:	2300      	movs	r3, #0
    318e:	4618      	mov	r0, r3
    3190:	e9cd 3300 	strd	r3, r3, [sp]
    3194:	491f      	ldr	r1, [pc, #124]	; (3214 <usage_fault.constprop.0+0xe8>)
    3196:	2201      	movs	r2, #1
    3198:	f004 f897 	bl	72ca <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    319c:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    319e:	4b1e      	ldr	r3, [pc, #120]	; (3218 <usage_fault.constprop.0+0xec>)
    31a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    31a2:	0359      	lsls	r1, r3, #13
    31a4:	d50a      	bpl.n	31bc <usage_fault.constprop.0+0x90>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    31a6:	4b20      	ldr	r3, [pc, #128]	; (3228 <usage_fault.constprop.0+0xfc>)
    31a8:	9302      	str	r3, [sp, #8]
    31aa:	2300      	movs	r3, #0
    31ac:	4618      	mov	r0, r3
    31ae:	e9cd 3300 	strd	r3, r3, [sp]
    31b2:	4918      	ldr	r1, [pc, #96]	; (3214 <usage_fault.constprop.0+0xe8>)
    31b4:	2201      	movs	r2, #1
    31b6:	f004 f888 	bl	72ca <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    31ba:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    31bc:	4b16      	ldr	r3, [pc, #88]	; (3218 <usage_fault.constprop.0+0xec>)
    31be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    31c0:	039a      	lsls	r2, r3, #14
    31c2:	d50a      	bpl.n	31da <usage_fault.constprop.0+0xae>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
    31c4:	4b19      	ldr	r3, [pc, #100]	; (322c <usage_fault.constprop.0+0x100>)
    31c6:	9302      	str	r3, [sp, #8]
    31c8:	2300      	movs	r3, #0
    31ca:	4618      	mov	r0, r3
    31cc:	e9cd 3300 	strd	r3, r3, [sp]
    31d0:	4910      	ldr	r1, [pc, #64]	; (3214 <usage_fault.constprop.0+0xe8>)
    31d2:	2201      	movs	r2, #1
    31d4:	f004 f879 	bl	72ca <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    31d8:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    31da:	4b0f      	ldr	r3, [pc, #60]	; (3218 <usage_fault.constprop.0+0xec>)
    31dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    31de:	03db      	lsls	r3, r3, #15
    31e0:	d50a      	bpl.n	31f8 <usage_fault.constprop.0+0xcc>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    31e2:	4b13      	ldr	r3, [pc, #76]	; (3230 <usage_fault.constprop.0+0x104>)
    31e4:	9302      	str	r3, [sp, #8]
    31e6:	2300      	movs	r3, #0
    31e8:	4618      	mov	r0, r3
    31ea:	e9cd 3300 	strd	r3, r3, [sp]
    31ee:	4909      	ldr	r1, [pc, #36]	; (3214 <usage_fault.constprop.0+0xe8>)
    31f0:	2201      	movs	r2, #1
    31f2:	f004 f86a 	bl	72ca <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    31f6:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    31f8:	4a07      	ldr	r2, [pc, #28]	; (3218 <usage_fault.constprop.0+0xec>)
    31fa:	6a93      	ldr	r3, [r2, #40]	; 0x28
    31fc:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    3200:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    3204:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    3206:	b004      	add	sp, #16
    3208:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    320a:	201d      	movs	r0, #29
    320c:	e7a9      	b.n	3162 <usage_fault.constprop.0+0x36>
    320e:	bf00      	nop
    3210:	0000866e 	.word	0x0000866e
    3214:	00007ec0 	.word	0x00007ec0
    3218:	e000ed00 	.word	0xe000ed00
    321c:	00008686 	.word	0x00008686
    3220:	00008699 	.word	0x00008699
    3224:	000086b3 	.word	0x000086b3
    3228:	000086d1 	.word	0x000086d1
    322c:	000086f6 	.word	0x000086f6
    3230:	00008710 	.word	0x00008710

00003234 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3238:	4b72      	ldr	r3, [pc, #456]	; (3404 <z_arm_fault+0x1d0>)
    323a:	685f      	ldr	r7, [r3, #4]
{
    323c:	b090      	sub	sp, #64	; 0x40
    323e:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3240:	f3c7 0408 	ubfx	r4, r7, #0, #9
    3244:	2300      	movs	r3, #0
    3246:	f383 8811 	msr	BASEPRI, r3
    324a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    324e:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    3252:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    3256:	d10c      	bne.n	3272 <z_arm_fault+0x3e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3258:	f002 000c 	and.w	r0, r2, #12
    325c:	2808      	cmp	r0, #8
    325e:	d119      	bne.n	3294 <z_arm_fault+0x60>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    3260:	4a69      	ldr	r2, [pc, #420]	; (3408 <z_arm_fault+0x1d4>)
    3262:	496a      	ldr	r1, [pc, #424]	; (340c <z_arm_fault+0x1d8>)
    3264:	9300      	str	r3, [sp, #0]
    3266:	e9cd 3201 	strd	r3, r2, [sp, #4]
    326a:	4618      	mov	r0, r3
    326c:	2201      	movs	r2, #1
    326e:	f004 f82c 	bl	72ca <z_log_msg_runtime_create.constprop.0>
	*nested_exc = false;
    3272:	2500      	movs	r5, #0
		return NULL;
    3274:	462e      	mov	r6, r5
	*recoverable = false;
    3276:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
    327a:	1ee3      	subs	r3, r4, #3
	*recoverable = false;
    327c:	f88d 801f 	strb.w	r8, [sp, #31]
	switch (fault) {
    3280:	2b09      	cmp	r3, #9
    3282:	f200 80a5 	bhi.w	33d0 <z_arm_fault+0x19c>
    3286:	e8df f003 	tbb	[pc, r3]
    328a:	990b      	.short	0x990b
    328c:	a3a3959d 	.word	0xa3a3959d
    3290:	a1a3a3a3 	.word	0xa1a3a3a3
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3294:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    3296:	bf46      	itte	mi
    3298:	460e      	movmi	r6, r1
	*nested_exc = false;
    329a:	461d      	movmi	r5, r3
			*nested_exc = true;
    329c:	2501      	movpl	r5, #1
    329e:	e7ea      	b.n	3276 <z_arm_fault+0x42>
	PR_FAULT_INFO("***** HARD FAULT *****");
    32a0:	4b5b      	ldr	r3, [pc, #364]	; (3410 <z_arm_fault+0x1dc>)
    32a2:	495a      	ldr	r1, [pc, #360]	; (340c <z_arm_fault+0x1d8>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    32a4:	4f57      	ldr	r7, [pc, #348]	; (3404 <z_arm_fault+0x1d0>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    32a6:	f8cd 8000 	str.w	r8, [sp]
    32aa:	e9cd 8301 	strd	r8, r3, [sp, #4]
    32ae:	2300      	movs	r3, #0
    32b0:	2201      	movs	r2, #1
    32b2:	4618      	mov	r0, r3
    32b4:	f004 f809 	bl	72ca <z_log_msg_runtime_create.constprop.0>
	*recoverable = false;
    32b8:	f88d 801f 	strb.w	r8, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    32bc:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    32be:	f014 0402 	ands.w	r4, r4, #2
    32c2:	d005      	beq.n	32d0 <z_arm_fault+0x9c>
		PR_EXC("  Bus fault on vector table read");
    32c4:	4b53      	ldr	r3, [pc, #332]	; (3414 <z_arm_fault+0x1e0>)
	PR_FAULT_INFO(
    32c6:	f8cd 8000 	str.w	r8, [sp]
    32ca:	e9cd 8301 	strd	r8, r3, [sp, #4]
    32ce:	e006      	b.n	32de <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    32d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    32d2:	2b00      	cmp	r3, #0
    32d4:	da0b      	bge.n	32ee <z_arm_fault+0xba>
		PR_EXC("  Debug event");
    32d6:	4b50      	ldr	r3, [pc, #320]	; (3418 <z_arm_fault+0x1e4>)
    32d8:	9400      	str	r4, [sp, #0]
    32da:	e9cd 4301 	strd	r4, r3, [sp, #4]
	PR_FAULT_INFO(
    32de:	2300      	movs	r3, #0
    32e0:	494a      	ldr	r1, [pc, #296]	; (340c <z_arm_fault+0x1d8>)
    32e2:	2201      	movs	r2, #1
    32e4:	4618      	mov	r0, r3
    32e6:	f003 fff0 	bl	72ca <z_log_msg_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    32ea:	2400      	movs	r4, #0
    32ec:	e039      	b.n	3362 <z_arm_fault+0x12e>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    32ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    32f0:	005b      	lsls	r3, r3, #1
    32f2:	d5fa      	bpl.n	32ea <z_arm_fault+0xb6>
		PR_EXC("  Fault escalation (see below)");
    32f4:	4b49      	ldr	r3, [pc, #292]	; (341c <z_arm_fault+0x1e8>)
    32f6:	4945      	ldr	r1, [pc, #276]	; (340c <z_arm_fault+0x1d8>)
    32f8:	9400      	str	r4, [sp, #0]
    32fa:	e9cd 4301 	strd	r4, r3, [sp, #4]
    32fe:	2201      	movs	r2, #1
    3300:	4623      	mov	r3, r4
    3302:	4620      	mov	r0, r4
    3304:	f003 ffe1 	bl	72ca <z_log_msg_runtime_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    3308:	697b      	ldr	r3, [r7, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    330a:	69b2      	ldr	r2, [r6, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    330c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3310:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    3312:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3316:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    331a:	697b      	ldr	r3, [r7, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    331c:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    3320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3324:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    3326:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    332a:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    332e:	f64d 7302 	movw	r3, #57090	; 0xdf02
    3332:	429a      	cmp	r2, r3
    3334:	d008      	beq.n	3348 <z_arm_fault+0x114>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    3336:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3338:	b2db      	uxtb	r3, r3
    333a:	b36b      	cbz	r3, 3398 <z_arm_fault+0x164>
			reason = mem_manage_fault(esf, 1, recoverable);
    333c:	f10d 011f 	add.w	r1, sp, #31
    3340:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    3342:	f7ff fdbd 	bl	2ec0 <mem_manage_fault.constprop.0>
    3346:	e037      	b.n	33b8 <z_arm_fault+0x184>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    3348:	6833      	ldr	r3, [r6, #0]
    334a:	9303      	str	r3, [sp, #12]
    334c:	4b34      	ldr	r3, [pc, #208]	; (3420 <z_arm_fault+0x1ec>)
    334e:	9400      	str	r4, [sp, #0]
    3350:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3354:	4620      	mov	r0, r4
    3356:	4623      	mov	r3, r4
    3358:	492c      	ldr	r1, [pc, #176]	; (340c <z_arm_fault+0x1d8>)
    335a:	2201      	movs	r2, #1
    335c:	f003 ffb5 	bl	72ca <z_log_msg_runtime_create.constprop.0>
			reason = esf->basic.r0;
    3360:	6834      	ldr	r4, [r6, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    3362:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3366:	b9a3      	cbnz	r3, 3392 <z_arm_fault+0x15e>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3368:	2220      	movs	r2, #32
    336a:	4631      	mov	r1, r6
    336c:	eb0d 0002 	add.w	r0, sp, r2
    3370:	f003 ffe5 	bl	733e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    3374:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3376:	2d00      	cmp	r5, #0
    3378:	d03e      	beq.n	33f8 <z_arm_fault+0x1c4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    337a:	f3c3 0208 	ubfx	r2, r3, #0, #9
    337e:	b922      	cbnz	r2, 338a <z_arm_fault+0x156>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3380:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    3384:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3388:	930f      	str	r3, [sp, #60]	; 0x3c

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    338a:	a908      	add	r1, sp, #32
    338c:	4620      	mov	r0, r4
    338e:	f7ff fc35 	bl	2bfc <z_arm_fatal_error>
}
    3392:	b010      	add	sp, #64	; 0x40
    3394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    3398:	6abb      	ldr	r3, [r7, #40]	; 0x28
    339a:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    339e:	d005      	beq.n	33ac <z_arm_fault+0x178>
			reason = bus_fault(esf, 1, recoverable);
    33a0:	f10d 011f 	add.w	r1, sp, #31
    33a4:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    33a6:	f7ff fe23 	bl	2ff0 <bus_fault.constprop.0>
    33aa:	e005      	b.n	33b8 <z_arm_fault+0x184>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    33ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    33ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    33b2:	d39a      	bcc.n	32ea <z_arm_fault+0xb6>
			reason = usage_fault(esf);
    33b4:	f7ff feba 	bl	312c <usage_fault.constprop.0>
    33b8:	4604      	mov	r4, r0
    33ba:	e7d2      	b.n	3362 <z_arm_fault+0x12e>
		reason = mem_manage_fault(esf, 0, recoverable);
    33bc:	f10d 011f 	add.w	r1, sp, #31
    33c0:	2000      	movs	r0, #0
    33c2:	e7be      	b.n	3342 <z_arm_fault+0x10e>
		reason = bus_fault(esf, 0, recoverable);
    33c4:	f10d 011f 	add.w	r1, sp, #31
    33c8:	2000      	movs	r0, #0
    33ca:	e7ec      	b.n	33a6 <z_arm_fault+0x172>
	PR_FAULT_INFO(
    33cc:	4b15      	ldr	r3, [pc, #84]	; (3424 <z_arm_fault+0x1f0>)
    33ce:	e77a      	b.n	32c6 <z_arm_fault+0x92>
	PR_FAULT_INFO("***** %s %d) *****",
    33d0:	4a15      	ldr	r2, [pc, #84]	; (3428 <z_arm_fault+0x1f4>)
    33d2:	4b16      	ldr	r3, [pc, #88]	; (342c <z_arm_fault+0x1f8>)
    33d4:	490d      	ldr	r1, [pc, #52]	; (340c <z_arm_fault+0x1d8>)
    33d6:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    33da:	bf18      	it	ne
    33dc:	4613      	movne	r3, r2
    33de:	3c10      	subs	r4, #16
    33e0:	e9cd 3403 	strd	r3, r4, [sp, #12]
    33e4:	4b12      	ldr	r3, [pc, #72]	; (3430 <z_arm_fault+0x1fc>)
    33e6:	9302      	str	r3, [sp, #8]
    33e8:	2300      	movs	r3, #0
    33ea:	e9cd 3300 	strd	r3, r3, [sp]
    33ee:	2201      	movs	r2, #1
    33f0:	4618      	mov	r0, r3
    33f2:	f003 ff6a 	bl	72ca <z_log_msg_runtime_create.constprop.0>
}
    33f6:	e778      	b.n	32ea <z_arm_fault+0xb6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    33f8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    33fc:	f023 0301 	bic.w	r3, r3, #1
    3400:	e7c2      	b.n	3388 <z_arm_fault+0x154>
    3402:	bf00      	nop
    3404:	e000ed00 	.word	0xe000ed00
    3408:	00008769 	.word	0x00008769
    340c:	00007ec0 	.word	0x00007ec0
    3410:	00008794 	.word	0x00008794
    3414:	000087ab 	.word	0x000087ab
    3418:	000087cc 	.word	0x000087cc
    341c:	000087da 	.word	0x000087da
    3420:	000087f9 	.word	0x000087f9
    3424:	00008815 	.word	0x00008815
    3428:	00008750 	.word	0x00008750
    342c:	0000873b 	.word	0x0000873b
    3430:	00008839 	.word	0x00008839

00003434 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3434:	4a02      	ldr	r2, [pc, #8]	; (3440 <z_arm_fault_init+0xc>)
    3436:	6953      	ldr	r3, [r2, #20]
    3438:	f043 0310 	orr.w	r3, r3, #16
    343c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    343e:	4770      	bx	lr
    3440:	e000ed00 	.word	0xe000ed00

00003444 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3444:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3448:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    344c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    344e:	4672      	mov	r2, lr
	bl z_arm_fault
    3450:	f7ff fef0 	bl	3234 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    3454:	bd01      	pop	{r0, pc}
    3456:	bf00      	nop

00003458 <z_arm_interrupt_init>:
    3458:	4804      	ldr	r0, [pc, #16]	; (346c <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    345a:	2300      	movs	r3, #0
    345c:	2120      	movs	r1, #32
    345e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3460:	3301      	adds	r3, #1
    3462:	2b27      	cmp	r3, #39	; 0x27
    3464:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    3468:	d1f9      	bne.n	345e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    346a:	4770      	bx	lr
    346c:	e000e100 	.word	0xe000e100

00003470 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    3470:	2000      	movs	r0, #0
    msr CONTROL, r0
    3472:	f380 8814 	msr	CONTROL, r0
    isb
    3476:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    347a:	f7fe fda1 	bl	1fc0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    347e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    3480:	490d      	ldr	r1, [pc, #52]	; (34b8 <__start+0x48>)
    str r0, [r1]
    3482:	6008      	str	r0, [r1, #0]
    dsb
    3484:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3488:	480c      	ldr	r0, [pc, #48]	; (34bc <__start+0x4c>)
    msr msp, r0
    348a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    348e:	f000 f82b 	bl	34e8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3492:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3494:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    3498:	4809      	ldr	r0, [pc, #36]	; (34c0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    349a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    349e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    34a0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    34a4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    34a8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    34aa:	4308      	orrs	r0, r1
    msr CONTROL, r0
    34ac:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    34b0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    34b4:	f7ff fc3e 	bl	2d34 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    34b8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    34bc:	20001920 	.word	0x20001920
    ldr r0, =z_interrupt_stacks
    34c0:	20000be0 	.word	0x20000be0

000034c4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    34c4:	4907      	ldr	r1, [pc, #28]	; (34e4 <z_arm_clear_arm_mpu_config+0x20>)
    34c6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    34ca:	2300      	movs	r3, #0
	int num_regions =
    34cc:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    34d0:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    34d2:	4293      	cmp	r3, r2
    34d4:	db00      	blt.n	34d8 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    34d6:	4770      	bx	lr
  MPU->RNR = rnr;
    34d8:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    34dc:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    34e0:	3301      	adds	r3, #1
    34e2:	e7f6      	b.n	34d2 <z_arm_clear_arm_mpu_config+0xe>
    34e4:	e000ed00 	.word	0xe000ed00

000034e8 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    34e8:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    34ea:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    34ec:	2300      	movs	r3, #0
    34ee:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    34f2:	f7ff ffe7 	bl	34c4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    34f6:	4b14      	ldr	r3, [pc, #80]	; (3548 <z_arm_init_arch_hw_at_boot+0x60>)
    34f8:	f04f 32ff 	mov.w	r2, #4294967295
    34fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    3500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    3504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    3508:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    350c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    3510:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    3514:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    3518:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    351c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3520:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    3524:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    3528:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    352c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    3530:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    3534:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    3538:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    353c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    353e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3542:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    3546:	bd08      	pop	{r3, pc}
    3548:	e000e100 	.word	0xe000e100

0000354c <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    354c:	4b08      	ldr	r3, [pc, #32]	; (3570 <z_impl_k_thread_abort+0x24>)
    354e:	689b      	ldr	r3, [r3, #8]
    3550:	4283      	cmp	r3, r0
    3552:	d10b      	bne.n	356c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3554:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3558:	b143      	cbz	r3, 356c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    355a:	4b06      	ldr	r3, [pc, #24]	; (3574 <z_impl_k_thread_abort+0x28>)
    355c:	685a      	ldr	r2, [r3, #4]
    355e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    3562:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    3564:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3566:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    356a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    356c:	f003 b84a 	b.w	6604 <z_thread_abort>
    3570:	2000058c 	.word	0x2000058c
    3574:	e000ed00 	.word	0xe000ed00

00003578 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3578:	4b02      	ldr	r3, [pc, #8]	; (3584 <z_arm_configure_static_mpu_regions+0xc>)
    357a:	4a03      	ldr	r2, [pc, #12]	; (3588 <z_arm_configure_static_mpu_regions+0x10>)
    357c:	4803      	ldr	r0, [pc, #12]	; (358c <z_arm_configure_static_mpu_regions+0x14>)
    357e:	2101      	movs	r1, #1
    3580:	f000 b876 	b.w	3670 <arm_core_mpu_configure_static_mpu_regions>
    3584:	20010000 	.word	0x20010000
    3588:	20000000 	.word	0x20000000
    358c:	00008050 	.word	0x00008050

00003590 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    3590:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    3592:	4e28      	ldr	r6, [pc, #160]	; (3634 <mpu_configure_regions+0xa4>)
    3594:	b085      	sub	sp, #20
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    3596:	2500      	movs	r5, #0
    3598:	428d      	cmp	r5, r1
    359a:	da15      	bge.n	35c8 <mpu_configure_regions+0x38>
		if (regions[i].size == 0U) {
    359c:	6844      	ldr	r4, [r0, #4]
    359e:	2c00      	cmp	r4, #0
    35a0:	d045      	beq.n	362e <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    35a2:	b1d3      	cbz	r3, 35da <mpu_configure_regions+0x4a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    35a4:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    35a8:	ea14 0f0c 	tst.w	r4, ip
    35ac:	d00f      	beq.n	35ce <mpu_configure_regions+0x3e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    35ae:	4b22      	ldr	r3, [pc, #136]	; (3638 <mpu_configure_regions+0xa8>)
    35b0:	9503      	str	r5, [sp, #12]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    35b2:	9302      	str	r3, [sp, #8]
    35b4:	2300      	movs	r3, #0
    35b6:	2201      	movs	r2, #1
    35b8:	e9cd 3300 	strd	r3, r3, [sp]
    35bc:	491f      	ldr	r1, [pc, #124]	; (363c <mpu_configure_regions+0xac>)
    35be:	4618      	mov	r0, r3
    35c0:	f003 fe93 	bl	72ea <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
    35c4:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    35c8:	4610      	mov	r0, r2
    35ca:	b005      	add	sp, #20
    35cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		&&
    35ce:	2c1f      	cmp	r4, #31
    35d0:	d9ed      	bls.n	35ae <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    35d2:	6807      	ldr	r7, [r0, #0]
		&&
    35d4:	ea1c 0f07 	tst.w	ip, r7
    35d8:	d1e9      	bne.n	35ae <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    35da:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    35dc:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    35de:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    35e2:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    35e6:	d910      	bls.n	360a <mpu_configure_regions+0x7a>
	if (size > (1UL << 31)) {
    35e8:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    35ec:	d80f      	bhi.n	360e <mpu_configure_regions+0x7e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    35ee:	3c01      	subs	r4, #1
    35f0:	fab4 f484 	clz	r4, r4
    35f4:	f1c4 041f 	rsb	r4, r4, #31
    35f8:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    35fa:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    35fe:	ea4c 0c04 	orr.w	ip, ip, r4
    3602:	d906      	bls.n	3612 <mpu_configure_regions+0x82>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3604:	4b0e      	ldr	r3, [pc, #56]	; (3640 <mpu_configure_regions+0xb0>)
    3606:	9203      	str	r2, [sp, #12]
    3608:	e7d3      	b.n	35b2 <mpu_configure_regions+0x22>
		return REGION_32B;
    360a:	2408      	movs	r4, #8
    360c:	e7f5      	b.n	35fa <mpu_configure_regions+0x6a>
		return REGION_4G;
    360e:	243e      	movs	r4, #62	; 0x3e
    3610:	e7f3      	b.n	35fa <mpu_configure_regions+0x6a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3612:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    3616:	4314      	orrs	r4, r2
    3618:	f044 0410 	orr.w	r4, r4, #16
    361c:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3620:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3624:	f04c 0401 	orr.w	r4, ip, #1
    3628:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
    362c:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    362e:	3501      	adds	r5, #1
    3630:	300c      	adds	r0, #12
    3632:	e7b1      	b.n	3598 <mpu_configure_regions+0x8>
    3634:	e000ed00 	.word	0xe000ed00
    3638:	00008850 	.word	0x00008850
    363c:	00007eb8 	.word	0x00007eb8
    3640:	00008873 	.word	0x00008873

00003644 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3644:	4b04      	ldr	r3, [pc, #16]	; (3658 <arm_core_mpu_enable+0x14>)
    3646:	2205      	movs	r2, #5
    3648:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    364c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3650:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3654:	4770      	bx	lr
    3656:	bf00      	nop
    3658:	e000ed00 	.word	0xe000ed00

0000365c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    365c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3660:	4b02      	ldr	r3, [pc, #8]	; (366c <arm_core_mpu_disable+0x10>)
    3662:	2200      	movs	r2, #0
    3664:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    3668:	4770      	bx	lr
    366a:	bf00      	nop
    366c:	e000ed00 	.word	0xe000ed00

00003670 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3670:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3672:	4c03      	ldr	r4, [pc, #12]	; (3680 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3674:	2301      	movs	r3, #1
    3676:	7822      	ldrb	r2, [r4, #0]
    3678:	f7ff ff8a 	bl	3590 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    367c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    367e:	bd10      	pop	{r4, pc}
    3680:	200007c4 	.word	0x200007c4

00003684 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3684:	4914      	ldr	r1, [pc, #80]	; (36d8 <z_arm_mpu_init+0x54>)
    3686:	6808      	ldr	r0, [r1, #0]
    3688:	2808      	cmp	r0, #8
{
    368a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    368c:	d821      	bhi.n	36d2 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    368e:	f7ff ffe5 	bl	365c <arm_core_mpu_disable>
    3692:	4c12      	ldr	r4, [pc, #72]	; (36dc <z_arm_mpu_init+0x58>)
    3694:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3696:	2200      	movs	r2, #0
    3698:	4290      	cmp	r0, r2
    369a:	f101 010c 	add.w	r1, r1, #12
    369e:	d105      	bne.n	36ac <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    36a0:	4b0f      	ldr	r3, [pc, #60]	; (36e0 <z_arm_mpu_init+0x5c>)
    36a2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    36a4:	f7ff ffce 	bl	3644 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    36a8:	2000      	movs	r0, #0
}
    36aa:	bd10      	pop	{r4, pc}
    36ac:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    36b0:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    36b4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    36b8:	4313      	orrs	r3, r2
    36ba:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    36be:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    36c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
    36c6:	f043 0301 	orr.w	r3, r3, #1
    36ca:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    36ce:	3201      	adds	r2, #1
    36d0:	e7e2      	b.n	3698 <z_arm_mpu_init+0x14>
		return -1;
    36d2:	f04f 30ff 	mov.w	r0, #4294967295
    36d6:	e7e8      	b.n	36aa <z_arm_mpu_init+0x26>
    36d8:	0000805c 	.word	0x0000805c
    36dc:	e000ed00 	.word	0xe000ed00
    36e0:	200007c4 	.word	0x200007c4

000036e4 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    36e4:	4b01      	ldr	r3, [pc, #4]	; (36ec <__stdout_hook_install+0x8>)
    36e6:	6018      	str	r0, [r3, #0]
}
    36e8:	4770      	bx	lr
    36ea:	bf00      	nop
    36ec:	20000014 	.word	0x20000014

000036f0 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    36f0:	f04f 0320 	mov.w	r3, #32
    36f4:	f3ef 8211 	mrs	r2, BASEPRI
    36f8:	f383 8812 	msr	BASEPRI_MAX, r3
    36fc:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    3700:	4906      	ldr	r1, [pc, #24]	; (371c <nordicsemi_nrf52_init+0x2c>)
    3702:	2301      	movs	r3, #1
    3704:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    3708:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    370c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    3710:	f382 8811 	msr	BASEPRI, r2
    3714:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3718:	2000      	movs	r0, #0
    371a:	4770      	bx	lr
    371c:	4001e000 	.word	0x4001e000

00003720 <sys_arch_reboot>:
    *p_gpregret = val;
    3720:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3724:	b2c0      	uxtb	r0, r0
    3726:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    372a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    372e:	4905      	ldr	r1, [pc, #20]	; (3744 <sys_arch_reboot+0x24>)
    3730:	4b05      	ldr	r3, [pc, #20]	; (3748 <sys_arch_reboot+0x28>)
    3732:	68ca      	ldr	r2, [r1, #12]
    3734:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3738:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    373a:	60cb      	str	r3, [r1, #12]
    373c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3740:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3742:	e7fd      	b.n	3740 <sys_arch_reboot+0x20>
    3744:	e000ed00 	.word	0xe000ed00
    3748:	05fa0004 	.word	0x05fa0004

0000374c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    374c:	b120      	cbz	r0, 3758 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    374e:	4b03      	ldr	r3, [pc, #12]	; (375c <arch_busy_wait+0x10>)
    3750:	0180      	lsls	r0, r0, #6
    3752:	f043 0301 	orr.w	r3, r3, #1
    3756:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    3758:	4770      	bx	lr
    375a:	bf00      	nop
    375c:	00007f50 	.word	0x00007f50

00003760 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    3760:	4b08      	ldr	r3, [pc, #32]	; (3784 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3762:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3764:	1ac3      	subs	r3, r0, r3
{
    3766:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3768:	4907      	ldr	r1, [pc, #28]	; (3788 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    376a:	109b      	asrs	r3, r3, #2
{
    376c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    376e:	4359      	muls	r1, r3
    3770:	4806      	ldr	r0, [pc, #24]	; (378c <onoff_stop+0x2c>)
    3772:	2240      	movs	r2, #64	; 0x40
    3774:	f003 fe28 	bl	73c8 <stop>
	notify(mgr, res);
    3778:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    377a:	4601      	mov	r1, r0
	notify(mgr, res);
    377c:	4620      	mov	r0, r4
}
    377e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    3782:	4718      	bx	r3
    3784:	2000041c 	.word	0x2000041c
    3788:	b6db6db7 	.word	0xb6db6db7
    378c:	00007c74 	.word	0x00007c74

00003790 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3790:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3792:	4c0c      	ldr	r4, [pc, #48]	; (37c4 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3794:	4a0c      	ldr	r2, [pc, #48]	; (37c8 <onoff_start+0x38>)
    3796:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    3798:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    379a:	9300      	str	r3, [sp, #0]
{
    379c:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    379e:	460b      	mov	r3, r1
    37a0:	490a      	ldr	r1, [pc, #40]	; (37cc <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    37a2:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    37a4:	4361      	muls	r1, r4
{
    37a6:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    37a8:	4809      	ldr	r0, [pc, #36]	; (37d0 <onoff_start+0x40>)
    37aa:	f003 fe39 	bl	7420 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    37ae:	1e01      	subs	r1, r0, #0
    37b0:	da05      	bge.n	37be <onoff_start+0x2e>
		notify(mgr, err);
    37b2:	4630      	mov	r0, r6
    37b4:	462b      	mov	r3, r5
	}
}
    37b6:	b002      	add	sp, #8
    37b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    37bc:	4718      	bx	r3
}
    37be:	b002      	add	sp, #8
    37c0:	bd70      	pop	{r4, r5, r6, pc}
    37c2:	bf00      	nop
    37c4:	2000041c 	.word	0x2000041c
    37c8:	0000748b 	.word	0x0000748b
    37cc:	b6db6db7 	.word	0xb6db6db7
    37d0:	00007c74 	.word	0x00007c74

000037d4 <generic_hfclk_stop>:
{
    37d4:	b510      	push	{r4, lr}
	__asm__ volatile(
    37d6:	f04f 0320 	mov.w	r3, #32
    37da:	f3ef 8411 	mrs	r4, BASEPRI
    37de:	f383 8812 	msr	BASEPRI_MAX, r3
    37e2:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    37e6:	4a07      	ldr	r2, [pc, #28]	; (3804 <generic_hfclk_stop+0x30>)
    37e8:	6813      	ldr	r3, [r2, #0]
    37ea:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    37ee:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    37f0:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    37f2:	d402      	bmi.n	37fa <generic_hfclk_stop+0x26>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    37f4:	2001      	movs	r0, #1
    37f6:	f004 f84a 	bl	788e <nrfx_clock_stop>
	__asm__ volatile(
    37fa:	f384 8811 	msr	BASEPRI, r4
    37fe:	f3bf 8f6f 	isb	sy
}
    3802:	bd10      	pop	{r4, pc}
    3804:	2000046c 	.word	0x2000046c

00003808 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3808:	2200      	movs	r2, #0
{
    380a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    380c:	2101      	movs	r1, #1
{
    380e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3810:	4610      	mov	r0, r2
    3812:	f7ff fa73 	bl	2cfc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    3816:	480f      	ldr	r0, [pc, #60]	; (3854 <clk_init+0x4c>)
    3818:	f001 faca 	bl	4db0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    381c:	4b0e      	ldr	r3, [pc, #56]	; (3858 <clk_init+0x50>)
    381e:	4298      	cmp	r0, r3
    3820:	d115      	bne.n	384e <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    3822:	f004 f827 	bl	7874 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    3826:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    3828:	490c      	ldr	r1, [pc, #48]	; (385c <clk_init+0x54>)
    382a:	4630      	mov	r0, r6
    382c:	f003 fb71 	bl	6f12 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    3830:	2800      	cmp	r0, #0
    3832:	db0b      	blt.n	384c <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3834:	2501      	movs	r5, #1
    3836:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    3838:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    383a:	4908      	ldr	r1, [pc, #32]	; (385c <clk_init+0x54>)
    383c:	f104 001c 	add.w	r0, r4, #28
    3840:	f003 fb67 	bl	6f12 <onoff_manager_init>
		if (err < 0) {
    3844:	2800      	cmp	r0, #0
    3846:	db01      	blt.n	384c <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3848:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    384a:	2000      	movs	r0, #0
}
    384c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    384e:	f06f 0004 	mvn.w	r0, #4
    3852:	e7fb      	b.n	384c <clk_init+0x44>
    3854:	00003895 	.word	0x00003895
    3858:	0bad0000 	.word	0x0bad0000
    385c:	0000807c 	.word	0x0000807c

00003860 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    3860:	b570      	push	{r4, r5, r6, lr}
    3862:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    3864:	230c      	movs	r3, #12
    3866:	4809      	ldr	r0, [pc, #36]	; (388c <clkstarted_handle.constprop.0+0x2c>)
    3868:	434b      	muls	r3, r1
    386a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    386c:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    3870:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    3872:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    3874:	4418      	add	r0, r3
	sub_data->cb = NULL;
    3876:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    3878:	f003 fd93 	bl	73a2 <set_on_state>
	if (callback) {
    387c:	b12d      	cbz	r5, 388a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    387e:	4632      	mov	r2, r6
    3880:	462b      	mov	r3, r5
    3882:	4803      	ldr	r0, [pc, #12]	; (3890 <clkstarted_handle.constprop.0+0x30>)
}
    3884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    3888:	4718      	bx	r3
}
    388a:	bd70      	pop	{r4, r5, r6, pc}
    388c:	2000041c 	.word	0x2000041c
    3890:	00007c74 	.word	0x00007c74

00003894 <clock_event_handler>:
	switch (event) {
    3894:	b110      	cbz	r0, 389c <clock_event_handler+0x8>
    3896:	2801      	cmp	r0, #1
    3898:	d004      	beq.n	38a4 <clock_event_handler+0x10>
    389a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    389c:	4b03      	ldr	r3, [pc, #12]	; (38ac <clock_event_handler+0x18>)
    389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    38a0:	075b      	lsls	r3, r3, #29
    38a2:	d101      	bne.n	38a8 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    38a4:	f7ff bfdc 	b.w	3860 <clkstarted_handle.constprop.0>
}
    38a8:	4770      	bx	lr
    38aa:	bf00      	nop
    38ac:	2000041c 	.word	0x2000041c

000038b0 <generic_hfclk_start>:
{
    38b0:	b508      	push	{r3, lr}
	__asm__ volatile(
    38b2:	f04f 0320 	mov.w	r3, #32
    38b6:	f3ef 8111 	mrs	r1, BASEPRI
    38ba:	f383 8812 	msr	BASEPRI_MAX, r3
    38be:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    38c2:	4a12      	ldr	r2, [pc, #72]	; (390c <generic_hfclk_start+0x5c>)
    38c4:	6813      	ldr	r3, [r2, #0]
    38c6:	f043 0002 	orr.w	r0, r3, #2
    38ca:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    38cc:	07da      	lsls	r2, r3, #31
    38ce:	d408      	bmi.n	38e2 <generic_hfclk_start+0x32>
	__asm__ volatile(
    38d0:	f381 8811 	msr	BASEPRI, r1
    38d4:	f3bf 8f6f 	isb	sy
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    38d8:	2001      	movs	r0, #1
}
    38da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    38de:	f001 ba77 	b.w	4dd0 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    38e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    38e6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    38ea:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    38ee:	07d3      	lsls	r3, r2, #31
    38f0:	d5ee      	bpl.n	38d0 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    38f2:	4807      	ldr	r0, [pc, #28]	; (3910 <generic_hfclk_start+0x60>)
    38f4:	f003 fd55 	bl	73a2 <set_on_state>
    38f8:	f381 8811 	msr	BASEPRI, r1
    38fc:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    3900:	2000      	movs	r0, #0
}
    3902:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    3906:	f7ff bfab 	b.w	3860 <clkstarted_handle.constprop.0>
    390a:	bf00      	nop
    390c:	2000046c 	.word	0x2000046c
    3910:	2000045c 	.word	0x2000045c

00003914 <api_blocking_start>:
{
    3914:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3916:	2200      	movs	r2, #0
    3918:	2301      	movs	r3, #1
    391a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    391e:	4a09      	ldr	r2, [pc, #36]	; (3944 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3920:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3924:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3926:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    392a:	f003 fda7 	bl	747c <api_start>
	if (err < 0) {
    392e:	2800      	cmp	r0, #0
    3930:	db05      	blt.n	393e <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    3932:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3936:	2300      	movs	r3, #0
    3938:	4668      	mov	r0, sp
    393a:	f002 fb3b 	bl	5fb4 <z_impl_k_sem_take>
}
    393e:	b005      	add	sp, #20
    3940:	f85d fb04 	ldr.w	pc, [sp], #4
    3944:	000074a3 	.word	0x000074a3

00003948 <lfclk_start>:
{
    3948:	b510      	push	{r4, lr}
	if (!once) {
    394a:	4c07      	ldr	r4, [pc, #28]	; (3968 <lfclk_start+0x20>)
    394c:	7823      	ldrb	r3, [r4, #0]
    394e:	b92b      	cbnz	r3, 395c <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
    3950:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    3954:	f004 f958 	bl	7c08 <z_impl_k_busy_wait>
		once = true;
    3958:	2301      	movs	r3, #1
    395a:	7023      	strb	r3, [r4, #0]
}
    395c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    3960:	2000      	movs	r0, #0
    3962:	f001 ba35 	b.w	4dd0 <nrfx_clock_start>
    3966:	bf00      	nop
    3968:	200007c5 	.word	0x200007c5

0000396c <z_nrf_clock_control_lf_on>:
{
    396c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3970:	4938      	ldr	r1, [pc, #224]	; (3a54 <z_nrf_clock_control_lf_on+0xe8>)
    3972:	f3bf 8f5b 	dmb	ish
    3976:	4607      	mov	r7, r0
    3978:	2201      	movs	r2, #1
    397a:	e851 3f00 	ldrex	r3, [r1]
    397e:	e841 2000 	strex	r0, r2, [r1]
    3982:	2800      	cmp	r0, #0
    3984:	d1f9      	bne.n	397a <z_nrf_clock_control_lf_on+0xe>
    3986:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    398a:	b933      	cbnz	r3, 399a <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    398c:	4932      	ldr	r1, [pc, #200]	; (3a58 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    398e:	4833      	ldr	r0, [pc, #204]	; (3a5c <z_nrf_clock_control_lf_on+0xf0>)
    3990:	604b      	str	r3, [r1, #4]
    3992:	60cb      	str	r3, [r1, #12]
    3994:	608a      	str	r2, [r1, #8]
    3996:	f003 facf 	bl	6f38 <onoff_request>
	switch (start_mode) {
    399a:	1e7b      	subs	r3, r7, #1
    399c:	2b01      	cmp	r3, #1
    399e:	d82b      	bhi.n	39f8 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    39a0:	2f01      	cmp	r7, #1
    39a2:	d107      	bne.n	39b4 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    39a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    39a8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    39ac:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    39b0:	2b01      	cmp	r3, #1
    39b2:	d021      	beq.n	39f8 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    39b4:	f004 f845 	bl	7a42 <k_is_in_isr>
    39b8:	4605      	mov	r5, r0
    39ba:	b9f8      	cbnz	r0, 39fc <z_nrf_clock_control_lf_on+0x90>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    39bc:	4b28      	ldr	r3, [pc, #160]	; (3a60 <z_nrf_clock_control_lf_on+0xf4>)
    39be:	781b      	ldrb	r3, [r3, #0]
    39c0:	b1e3      	cbz	r3, 39fc <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    39c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    39c6:	2202      	movs	r2, #2
    39c8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    39cc:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    39ce:	f8df 8094 	ldr.w	r8, [pc, #148]	; 3a64 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    39d2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    39d6:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    39da:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    39de:	03d2      	lsls	r2, r2, #15
    39e0:	d516      	bpl.n	3a10 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    39e2:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    39e6:	2b01      	cmp	r3, #1
    39e8:	d001      	beq.n	39ee <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    39ea:	2f01      	cmp	r7, #1
    39ec:	d110      	bne.n	3a10 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    39ee:	b35d      	cbz	r5, 3a48 <z_nrf_clock_control_lf_on+0xdc>
    39f0:	f386 8811 	msr	BASEPRI, r6
    39f4:	f3bf 8f6f 	isb	sy
}
    39f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    39fc:	f04f 0320 	mov.w	r3, #32
    3a00:	f3ef 8611 	mrs	r6, BASEPRI
    3a04:	f383 8812 	msr	BASEPRI_MAX, r3
    3a08:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3a0c:	2501      	movs	r5, #1
    3a0e:	e7de      	b.n	39ce <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    3a10:	b1ad      	cbz	r5, 3a3e <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    3a12:	4630      	mov	r0, r6
    3a14:	f7ff f8e6 	bl	2be4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    3a18:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    3a1c:	2b00      	cmp	r3, #0
    3a1e:	d1da      	bne.n	39d6 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3a20:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    3a24:	2a00      	cmp	r2, #0
    3a26:	d0d6      	beq.n	39d6 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3a28:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3a2c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    3a30:	2301      	movs	r3, #1
    3a32:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    3a36:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3a3a:	60a3      	str	r3, [r4, #8]
}
    3a3c:	e7cb      	b.n	39d6 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    3a3e:	2100      	movs	r1, #0
    3a40:	2021      	movs	r0, #33	; 0x21
    3a42:	f002 fdbf 	bl	65c4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3a46:	e7e7      	b.n	3a18 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    3a48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a4c:	2202      	movs	r2, #2
    3a4e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    3a52:	e7d1      	b.n	39f8 <z_nrf_clock_control_lf_on+0x8c>
    3a54:	20000418 	.word	0x20000418
    3a58:	20000408 	.word	0x20000408
    3a5c:	20000438 	.word	0x20000438
    3a60:	20000bd7 	.word	0x20000bd7
    3a64:	e000e100 	.word	0xe000e100

00003a68 <rtt_console_init>:

	return character;
}

static int rtt_console_init(void)
{
    3a68:	b510      	push	{r4, lr}

#ifdef CONFIG_PRINTK
	__printk_hook_install(rtt_console_out);
    3a6a:	4c04      	ldr	r4, [pc, #16]	; (3a7c <rtt_console_init+0x14>)
    3a6c:	4620      	mov	r0, r4
    3a6e:	f7fd fb27 	bl	10c0 <__printk_hook_install>
#endif
	__stdout_hook_install(rtt_console_out);
    3a72:	4620      	mov	r0, r4
    3a74:	f7ff fe36 	bl	36e4 <__stdout_hook_install>

	return 0;
}
    3a78:	2000      	movs	r0, #0
    3a7a:	bd10      	pop	{r4, pc}
    3a7c:	00003a81 	.word	0x00003a81

00003a80 <rtt_console_out>:
{
    3a80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3a82:	4e13      	ldr	r6, [pc, #76]	; (3ad0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38>)
	char c = (char)character;
    3a84:	f88d 0007 	strb.w	r0, [sp, #7]
{
    3a88:	4604      	mov	r4, r0
	char c = (char)character;
    3a8a:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
    3a8c:	f001 ffa4 	bl	59d8 <zephyr_rtt_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    3a90:	2201      	movs	r2, #1
    3a92:	f10d 0107 	add.w	r1, sp, #7
    3a96:	2000      	movs	r0, #0
    3a98:	f001 ff68 	bl	596c <SEGGER_RTT_WriteNoLock>
    3a9c:	4607      	mov	r7, r0
		SEGGER_RTT_UNLOCK();
    3a9e:	f001 ffa5 	bl	59ec <zephyr_rtt_mutex_unlock>
		if (cnt) {
    3aa2:	b127      	cbz	r7, 3aae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16>
			host_present = true;
    3aa4:	2301      	movs	r3, #1
    3aa6:	7033      	strb	r3, [r6, #0]
}
    3aa8:	4620      	mov	r0, r4
    3aaa:	b003      	add	sp, #12
    3aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
    3aae:	7833      	ldrb	r3, [r6, #0]
    3ab0:	2b00      	cmp	r3, #0
    3ab2:	d0f9      	beq.n	3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>
			if (max_cnt) {
    3ab4:	3d01      	subs	r5, #1
    3ab6:	d008      	beq.n	3aca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    3ab8:	f003 ffc3 	bl	7a42 <k_is_in_isr>
    3abc:	2800      	cmp	r0, #0
    3abe:	d1e5      	bne.n	3a8c <rtt_console_out+0xc>
    3ac0:	2100      	movs	r1, #0
    3ac2:	2042      	movs	r0, #66	; 0x42
    3ac4:	f002 fd7e 	bl	65c4 <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
    3ac8:	e7e0      	b.n	3a8c <rtt_console_out+0xc>
				host_present = false;
    3aca:	7035      	strb	r5, [r6, #0]
    3acc:	e7ec      	b.n	3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>
    3ace:	bf00      	nop
    3ad0:	200007c6 	.word	0x200007c6

00003ad4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    3ad4:	b508      	push	{r3, lr}
    3ad6:	4807      	ldr	r0, [pc, #28]	; (3af4 <uart_console_init+0x20>)
    3ad8:	f003 ff94 	bl	7a04 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    3adc:	b138      	cbz	r0, 3aee <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    3ade:	4806      	ldr	r0, [pc, #24]	; (3af8 <uart_console_init+0x24>)
    3ae0:	f7ff fe00 	bl	36e4 <__stdout_hook_install>
	__printk_hook_install(console_out);
    3ae4:	4804      	ldr	r0, [pc, #16]	; (3af8 <uart_console_init+0x24>)
    3ae6:	f7fd faeb 	bl	10c0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    3aea:	2000      	movs	r0, #0
}
    3aec:	bd08      	pop	{r3, pc}
		return -ENODEV;
    3aee:	f06f 0012 	mvn.w	r0, #18
    3af2:	e7fb      	b.n	3aec <uart_console_init+0x18>
    3af4:	00007cac 	.word	0x00007cac
    3af8:	00003afd 	.word	0x00003afd

00003afc <console_out>:
	if ('\n' == c) {
    3afc:	280a      	cmp	r0, #10
{
    3afe:	b538      	push	{r3, r4, r5, lr}
    3b00:	4d07      	ldr	r5, [pc, #28]	; (3b20 <console_out+0x24>)
    3b02:	4604      	mov	r4, r0
	if ('\n' == c) {
    3b04:	d104      	bne.n	3b10 <console_out+0x14>
    3b06:	68ab      	ldr	r3, [r5, #8]
    3b08:	210d      	movs	r1, #13
    3b0a:	685b      	ldr	r3, [r3, #4]
    3b0c:	4628      	mov	r0, r5
    3b0e:	4798      	blx	r3
    3b10:	68ab      	ldr	r3, [r5, #8]
    3b12:	4803      	ldr	r0, [pc, #12]	; (3b20 <console_out+0x24>)
    3b14:	685b      	ldr	r3, [r3, #4]
    3b16:	b2e1      	uxtb	r1, r4
    3b18:	4798      	blx	r3
}
    3b1a:	4620      	mov	r0, r4
    3b1c:	bd38      	pop	{r3, r4, r5, pc}
    3b1e:	bf00      	nop
    3b20:	00007cac 	.word	0x00007cac

00003b24 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    3b24:	b530      	push	{r4, r5, lr}
	return port->config;
    3b26:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3b28:	7b05      	ldrb	r5, [r0, #12]
    3b2a:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    3b2e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    3b32:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3b34:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    3b38:	d105      	bne.n	3b46 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    3b3a:	4620      	mov	r0, r4
    3b3c:	f001 fc0c 	bl	5358 <nrfx_gpiote_trigger_disable>

		return 0;
    3b40:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    3b42:	b005      	add	sp, #20
    3b44:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    3b46:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    3b48:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    3b4c:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    3b50:	d114      	bne.n	3b7c <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    3b52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    3b56:	bf0c      	ite	eq
    3b58:	2304      	moveq	r3, #4
    3b5a:	2305      	movne	r3, #5
    3b5c:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3b60:	2300      	movs	r3, #0
    3b62:	4619      	mov	r1, r3
    3b64:	aa02      	add	r2, sp, #8
    3b66:	4620      	mov	r0, r4
    3b68:	f001 fa2c 	bl	4fc4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3b6c:	4b1d      	ldr	r3, [pc, #116]	; (3be4 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    3b6e:	4298      	cmp	r0, r3
    3b70:	d135      	bne.n	3bde <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    3b72:	2101      	movs	r1, #1
    3b74:	4620      	mov	r0, r4
    3b76:	f001 fbab 	bl	52d0 <nrfx_gpiote_trigger_enable>
	return 0;
    3b7a:	e7e1      	b.n	3b40 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    3b7c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    3b80:	d022      	beq.n	3bc8 <gpio_nrfx_pin_interrupt_configure+0xa4>
    3b82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    3b86:	bf14      	ite	ne
    3b88:	2301      	movne	r3, #1
    3b8a:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    3b8c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    3b90:	6883      	ldr	r3, [r0, #8]
    3b92:	40cb      	lsrs	r3, r1
    3b94:	07d9      	lsls	r1, r3, #31
    3b96:	d4e3      	bmi.n	3b60 <gpio_nrfx_pin_interrupt_configure+0x3c>
    3b98:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    3b9c:	d1e0      	bne.n	3b60 <gpio_nrfx_pin_interrupt_configure+0x3c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    3b9e:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3ba2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3ba6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    3bae:	07db      	lsls	r3, r3, #31
    3bb0:	d4d6      	bmi.n	3b60 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3bb2:	f10d 0507 	add.w	r5, sp, #7
    3bb6:	4629      	mov	r1, r5
    3bb8:	4620      	mov	r0, r4
    3bba:	f001 fb35 	bl	5228 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    3bbe:	4b0a      	ldr	r3, [pc, #40]	; (3be8 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    3bc0:	4298      	cmp	r0, r3
    3bc2:	d003      	beq.n	3bcc <gpio_nrfx_pin_interrupt_configure+0xa8>
		trigger_config.p_in_channel = &ch;
    3bc4:	9503      	str	r5, [sp, #12]
    3bc6:	e7cb      	b.n	3b60 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    3bc8:	2303      	movs	r3, #3
    3bca:	e7df      	b.n	3b8c <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    3bcc:	4628      	mov	r0, r5
    3bce:	f001 fb79 	bl	52c4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    3bd2:	4b04      	ldr	r3, [pc, #16]	; (3be4 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    3bd4:	4298      	cmp	r0, r3
    3bd6:	d0f5      	beq.n	3bc4 <gpio_nrfx_pin_interrupt_configure+0xa0>
				return -ENOMEM;
    3bd8:	f06f 000b 	mvn.w	r0, #11
    3bdc:	e7b1      	b.n	3b42 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    3bde:	f06f 0015 	mvn.w	r0, #21
    3be2:	e7ae      	b.n	3b42 <gpio_nrfx_pin_interrupt_configure+0x1e>
    3be4:	0bad0000 	.word	0x0bad0000
    3be8:	0bad0004 	.word	0x0bad0004

00003bec <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    3bec:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    3bee:	f001 fb59 	bl	52a4 <nrfx_gpiote_is_init>
    3bf2:	4604      	mov	r4, r0
    3bf4:	b968      	cbnz	r0, 3c12 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    3bf6:	f001 fb2d 	bl	5254 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    3bfa:	4b08      	ldr	r3, [pc, #32]	; (3c1c <gpio_nrfx_init+0x30>)
    3bfc:	4298      	cmp	r0, r3
    3bfe:	d10a      	bne.n	3c16 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    3c00:	4807      	ldr	r0, [pc, #28]	; (3c20 <gpio_nrfx_init+0x34>)
    3c02:	4621      	mov	r1, r4
    3c04:	f001 fb0a 	bl	521c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    3c08:	4622      	mov	r2, r4
    3c0a:	2105      	movs	r1, #5
    3c0c:	2006      	movs	r0, #6
    3c0e:	f7ff f875 	bl	2cfc <z_arm_irq_priority_set>
		return 0;
    3c12:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    3c14:	bd10      	pop	{r4, pc}
		return -EIO;
    3c16:	f06f 0004 	mvn.w	r0, #4
    3c1a:	e7fb      	b.n	3c14 <gpio_nrfx_init+0x28>
    3c1c:	0bad0000 	.word	0x0bad0000
    3c20:	00003c25 	.word	0x00003c25

00003c24 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3c24:	0943      	lsrs	r3, r0, #5
{
    3c26:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3c28:	d107      	bne.n	3c3a <nrfx_gpio_handler+0x16>
	return list->head;
    3c2a:	4b0b      	ldr	r3, [pc, #44]	; (3c58 <nrfx_gpio_handler+0x34>)
    3c2c:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3c2e:	b121      	cbz	r1, 3c3a <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
    3c30:	2501      	movs	r5, #1
	return node->next;
    3c32:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    3c34:	4e09      	ldr	r6, [pc, #36]	; (3c5c <nrfx_gpio_handler+0x38>)
    3c36:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3c38:	b901      	cbnz	r1, 3c3c <nrfx_gpio_handler+0x18>
}
    3c3a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    3c3c:	688a      	ldr	r2, [r1, #8]
    3c3e:	402a      	ands	r2, r5
    3c40:	d002      	beq.n	3c48 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
    3c42:	684b      	ldr	r3, [r1, #4]
    3c44:	4630      	mov	r0, r6
    3c46:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3c48:	b11c      	cbz	r4, 3c52 <nrfx_gpio_handler+0x2e>
    3c4a:	6823      	ldr	r3, [r4, #0]
    3c4c:	4621      	mov	r1, r4
    3c4e:	461c      	mov	r4, r3
    3c50:	e7f2      	b.n	3c38 <nrfx_gpio_handler+0x14>
    3c52:	4623      	mov	r3, r4
    3c54:	e7fa      	b.n	3c4c <nrfx_gpio_handler+0x28>
    3c56:	bf00      	nop
    3c58:	20000470 	.word	0x20000470
    3c5c:	00007c90 	.word	0x00007c90

00003c60 <gpio_nrfx_pin_configure>:
{
    3c60:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    3c64:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3c66:	7b3b      	ldrb	r3, [r7, #12]
    3c68:	f001 051f 	and.w	r5, r1, #31
    3c6c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    3c70:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3c72:	4628      	mov	r0, r5
    3c74:	f10d 0103 	add.w	r1, sp, #3
{
    3c78:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3c7a:	f001 fad5 	bl	5228 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    3c7e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3c82:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    3c84:	d10b      	bne.n	3c9e <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    3c86:	4628      	mov	r0, r5
    3c88:	f001 fb8e 	bl	53a8 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    3c8c:	4b3d      	ldr	r3, [pc, #244]	; (3d84 <gpio_nrfx_pin_configure+0x124>)
    3c8e:	4598      	cmp	r8, r3
    3c90:	d103      	bne.n	3c9a <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    3c92:	f89d 0003 	ldrb.w	r0, [sp, #3]
    3c96:	f001 fb0f 	bl	52b8 <nrfx_gpiote_channel_free>
		return 0;
    3c9a:	2000      	movs	r0, #0
    3c9c:	e00c      	b.n	3cb8 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    3c9e:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3ca0:	4619      	mov	r1, r3
    3ca2:	aa02      	add	r2, sp, #8
    3ca4:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    3ca6:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3caa:	f001 f98b 	bl	4fc4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3cae:	4b35      	ldr	r3, [pc, #212]	; (3d84 <gpio_nrfx_pin_configure+0x124>)
    3cb0:	4298      	cmp	r0, r3
    3cb2:	d004      	beq.n	3cbe <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    3cb4:	f06f 0015 	mvn.w	r0, #21
}
    3cb8:	b004      	add	sp, #16
    3cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    3cbe:	4580      	cmp	r8, r0
    3cc0:	d103      	bne.n	3cca <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    3cc2:	f89d 0003 	ldrb.w	r0, [sp, #3]
    3cc6:	f001 faf7 	bl	52b8 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    3cca:	03a3      	lsls	r3, r4, #14
    3ccc:	d54b      	bpl.n	3d66 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3cce:	f240 3306 	movw	r3, #774	; 0x306
    3cd2:	4023      	ands	r3, r4
    3cd4:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    3cd8:	d019      	beq.n	3d0e <gpio_nrfx_pin_configure+0xae>
    3cda:	d80c      	bhi.n	3cf6 <gpio_nrfx_pin_configure+0x96>
    3cdc:	2b06      	cmp	r3, #6
    3cde:	d017      	beq.n	3d10 <gpio_nrfx_pin_configure+0xb0>
    3ce0:	d804      	bhi.n	3cec <gpio_nrfx_pin_configure+0x8c>
    3ce2:	b1ab      	cbz	r3, 3d10 <gpio_nrfx_pin_configure+0xb0>
    3ce4:	2b02      	cmp	r3, #2
    3ce6:	d1e5      	bne.n	3cb4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    3ce8:	2304      	movs	r3, #4
    3cea:	e011      	b.n	3d10 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    3cf0:	d1e0      	bne.n	3cb4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    3cf2:	2301      	movs	r3, #1
    3cf4:	e00c      	b.n	3d10 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3cf6:	f240 2202 	movw	r2, #514	; 0x202
    3cfa:	4293      	cmp	r3, r2
    3cfc:	d027      	beq.n	3d4e <gpio_nrfx_pin_configure+0xee>
    3cfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    3d02:	d026      	beq.n	3d52 <gpio_nrfx_pin_configure+0xf2>
    3d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3d08:	d1d4      	bne.n	3cb4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    3d0a:	2302      	movs	r3, #2
    3d0c:	e000      	b.n	3d10 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    3d0e:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    3d10:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    3d14:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    3d18:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    3d1c:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    3d1e:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    3d22:	bf54      	ite	pl
    3d24:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    3d28:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3d2a:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    3d2c:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3d30:	d511      	bpl.n	3d56 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    3d32:	687a      	ldr	r2, [r7, #4]
    3d34:	2301      	movs	r3, #1
    3d36:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    3d38:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    3d3c:	2200      	movs	r2, #0
    3d3e:	a901      	add	r1, sp, #4
    3d40:	4628      	mov	r0, r5
    3d42:	f001 f9ed 	bl	5120 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3d46:	4b0f      	ldr	r3, [pc, #60]	; (3d84 <gpio_nrfx_pin_configure+0x124>)
    3d48:	4298      	cmp	r0, r3
    3d4a:	d0a6      	beq.n	3c9a <gpio_nrfx_pin_configure+0x3a>
    3d4c:	e7b2      	b.n	3cb4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    3d4e:	2305      	movs	r3, #5
    3d50:	e7de      	b.n	3d10 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3d52:	2303      	movs	r3, #3
    3d54:	e7dc      	b.n	3d10 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    3d56:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    3d58:	bf41      	itttt	mi
    3d5a:	2301      	movmi	r3, #1
    3d5c:	687a      	ldrmi	r2, [r7, #4]
    3d5e:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    3d60:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    3d64:	e7ea      	b.n	3d3c <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    3d66:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3d68:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    3d6c:	bf54      	ite	pl
    3d6e:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    3d72:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3d74:	461a      	mov	r2, r3
    3d76:	a901      	add	r1, sp, #4
    3d78:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    3d7a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3d7e:	f001 f921 	bl	4fc4 <nrfx_gpiote_input_configure>
    3d82:	e7e0      	b.n	3d46 <gpio_nrfx_pin_configure+0xe6>
    3d84:	0bad0000 	.word	0x0bad0000

00003d88 <uart_nrfx_poll_in>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3d88:	4b07      	ldr	r3, [pc, #28]	; (3da8 <uart_nrfx_poll_in+0x20>)
    3d8a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    3d8e:	b142      	cbz	r2, 3da2 <uart_nrfx_poll_in+0x1a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3d90:	2000      	movs	r0, #0
    3d92:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    3d96:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
    3d9a:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    3d9e:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
    3da0:	4770      	bx	lr
		return -1;
    3da2:	f04f 30ff 	mov.w	r0, #4294967295
}
    3da6:	4770      	bx	lr
    3da8:	40002000 	.word	0x40002000

00003dac <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    3dac:	4b02      	ldr	r3, [pc, #8]	; (3db8 <uart_nrfx_err_check+0xc>)
    3dae:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    3db2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
    3db6:	4770      	bx	lr
    3db8:	40002000 	.word	0x40002000

00003dbc <uart_nrfx_configure>:

static int uart_nrfx_configure(const struct device *dev,
			       const struct uart_config *cfg)
{
    3dbc:	b510      	push	{r4, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    3dbe:	794b      	ldrb	r3, [r1, #5]
    3dc0:	2b01      	cmp	r3, #1
    3dc2:	d11c      	bne.n	3dfe <uart_nrfx_configure+0x42>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3dc4:	798b      	ldrb	r3, [r1, #6]
    3dc6:	2b03      	cmp	r3, #3
    3dc8:	d119      	bne.n	3dfe <uart_nrfx_configure+0x42>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    3dca:	79cb      	ldrb	r3, [r1, #7]
    3dcc:	b9bb      	cbnz	r3, 3dfe <uart_nrfx_configure+0x42>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    3dce:	790a      	ldrb	r2, [r1, #4]
    3dd0:	b112      	cbz	r2, 3dd8 <uart_nrfx_configure+0x1c>
    3dd2:	2a02      	cmp	r2, #2
    3dd4:	d113      	bne.n	3dfe <uart_nrfx_configure+0x42>
    3dd6:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3dd8:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
    3dda:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    3dde:	d05e      	beq.n	3e9e <uart_nrfx_configure+0xe2>
    3de0:	d82b      	bhi.n	3e3a <uart_nrfx_configure+0x7e>
    3de2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3de6:	d05c      	beq.n	3ea2 <uart_nrfx_configure+0xe6>
    3de8:	d814      	bhi.n	3e14 <uart_nrfx_configure+0x58>
    3dea:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3dee:	d05a      	beq.n	3ea6 <uart_nrfx_configure+0xea>
    3df0:	d808      	bhi.n	3e04 <uart_nrfx_configure+0x48>
    3df2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3df6:	d059      	beq.n	3eac <uart_nrfx_configure+0xf0>
    3df8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3dfc:	d059      	beq.n	3eb2 <uart_nrfx_configure+0xf6>
    3dfe:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3e02:	e04b      	b.n	3e9c <uart_nrfx_configure+0xe0>
    3e04:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3e08:	d056      	beq.n	3eb8 <uart_nrfx_configure+0xfc>
    3e0a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3e0e:	d1f6      	bne.n	3dfe <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    3e10:	4b33      	ldr	r3, [pc, #204]	; (3ee0 <uart_nrfx_configure+0x124>)
    3e12:	e039      	b.n	3e88 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
    3e14:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3e18:	d051      	beq.n	3ebe <uart_nrfx_configure+0x102>
    3e1a:	d807      	bhi.n	3e2c <uart_nrfx_configure+0x70>
    3e1c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3e20:	d04f      	beq.n	3ec2 <uart_nrfx_configure+0x106>
    3e22:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    3e26:	d1ea      	bne.n	3dfe <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    3e28:	4b2e      	ldr	r3, [pc, #184]	; (3ee4 <uart_nrfx_configure+0x128>)
    3e2a:	e02d      	b.n	3e88 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
    3e2c:	f647 2412 	movw	r4, #31250	; 0x7a12
    3e30:	42a3      	cmp	r3, r4
    3e32:	d1e4      	bne.n	3dfe <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    3e34:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3e38:	e026      	b.n	3e88 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
    3e3a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3e3e:	d043      	beq.n	3ec8 <uart_nrfx_configure+0x10c>
    3e40:	d811      	bhi.n	3e66 <uart_nrfx_configure+0xaa>
    3e42:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3e46:	d041      	beq.n	3ecc <uart_nrfx_configure+0x110>
    3e48:	d808      	bhi.n	3e5c <uart_nrfx_configure+0xa0>
    3e4a:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    3e4e:	42a3      	cmp	r3, r4
    3e50:	d03e      	beq.n	3ed0 <uart_nrfx_configure+0x114>
    3e52:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3e56:	d1d2      	bne.n	3dfe <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    3e58:	4b23      	ldr	r3, [pc, #140]	; (3ee8 <uart_nrfx_configure+0x12c>)
    3e5a:	e015      	b.n	3e88 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
    3e5c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3e60:	d1cd      	bne.n	3dfe <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    3e62:	4b22      	ldr	r3, [pc, #136]	; (3eec <uart_nrfx_configure+0x130>)
    3e64:	e010      	b.n	3e88 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
    3e66:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3e6a:	d034      	beq.n	3ed6 <uart_nrfx_configure+0x11a>
    3e6c:	d807      	bhi.n	3e7e <uart_nrfx_configure+0xc2>
    3e6e:	4c20      	ldr	r4, [pc, #128]	; (3ef0 <uart_nrfx_configure+0x134>)
    3e70:	42a3      	cmp	r3, r4
    3e72:	d032      	beq.n	3eda <uart_nrfx_configure+0x11e>
    3e74:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3e78:	d1c1      	bne.n	3dfe <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    3e7a:	4b1e      	ldr	r3, [pc, #120]	; (3ef4 <uart_nrfx_configure+0x138>)
    3e7c:	e004      	b.n	3e88 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
    3e7e:	4c1e      	ldr	r4, [pc, #120]	; (3ef8 <uart_nrfx_configure+0x13c>)
    3e80:	42a3      	cmp	r3, r4
    3e82:	d1bc      	bne.n	3dfe <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    3e84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uart_nrfx_data *data = dev->data;
    3e88:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3e8a:	481c      	ldr	r0, [pc, #112]	; (3efc <uart_nrfx_configure+0x140>)
    3e8c:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3e90:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	data->uart_config = *cfg;
    3e94:	c903      	ldmia	r1, {r0, r1}
    3e96:	e884 0003 	stmia.w	r4, {r0, r1}

	return 0;
    3e9a:	2000      	movs	r0, #0
}
    3e9c:	bd10      	pop	{r4, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    3e9e:	4b18      	ldr	r3, [pc, #96]	; (3f00 <uart_nrfx_configure+0x144>)
    3ea0:	e7f2      	b.n	3e88 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    3ea2:	4b18      	ldr	r3, [pc, #96]	; (3f04 <uart_nrfx_configure+0x148>)
    3ea4:	e7f0      	b.n	3e88 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    3ea6:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3eaa:	e7ed      	b.n	3e88 <uart_nrfx_configure+0xcc>
		nrf_baudrate = 0x00014000;
    3eac:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3eb0:	e7ea      	b.n	3e88 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
    3eb2:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3eb6:	e7e7      	b.n	3e88 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    3eb8:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3ebc:	e7e4      	b.n	3e88 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    3ebe:	4b12      	ldr	r3, [pc, #72]	; (3f08 <uart_nrfx_configure+0x14c>)
    3ec0:	e7e2      	b.n	3e88 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    3ec2:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    3ec6:	e7df      	b.n	3e88 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    3ec8:	4b10      	ldr	r3, [pc, #64]	; (3f0c <uart_nrfx_configure+0x150>)
    3eca:	e7dd      	b.n	3e88 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    3ecc:	4b10      	ldr	r3, [pc, #64]	; (3f10 <uart_nrfx_configure+0x154>)
    3ece:	e7db      	b.n	3e88 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    3ed0:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3ed4:	e7d8      	b.n	3e88 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    3ed6:	4b0f      	ldr	r3, [pc, #60]	; (3f14 <uart_nrfx_configure+0x158>)
    3ed8:	e7d6      	b.n	3e88 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    3eda:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3ede:	e7d3      	b.n	3e88 <uart_nrfx_configure+0xcc>
    3ee0:	0013b000 	.word	0x0013b000
    3ee4:	004ea000 	.word	0x004ea000
    3ee8:	00ebf000 	.word	0x00ebf000
    3eec:	01d7e000 	.word	0x01d7e000
    3ef0:	0003d090 	.word	0x0003d090
    3ef4:	075f7000 	.word	0x075f7000
    3ef8:	000f4240 	.word	0x000f4240
    3efc:	40002000 	.word	0x40002000
    3f00:	009d5000 	.word	0x009d5000
    3f04:	00275000 	.word	0x00275000
    3f08:	0075f000 	.word	0x0075f000
    3f0c:	03afb000 	.word	0x03afb000
    3f10:	013a9000 	.word	0x013a9000
    3f14:	0ebed000 	.word	0x0ebed000

00003f18 <uart_nrfx_poll_out>:
{
    3f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f1a:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
    3f1c:	f003 fd91 	bl	7a42 <k_is_in_isr>
    3f20:	4d1a      	ldr	r5, [pc, #104]	; (3f8c <uart_nrfx_poll_out+0x74>)
    3f22:	bb78      	cbnz	r0, 3f84 <uart_nrfx_poll_out+0x6c>
    3f24:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3f26:	2701      	movs	r7, #1
    3f28:	f3bf 8f5b 	dmb	ish
    3f2c:	e855 3f00 	ldrex	r3, [r5]
    3f30:	2b00      	cmp	r3, #0
    3f32:	d103      	bne.n	3f3c <uart_nrfx_poll_out+0x24>
    3f34:	e845 7200 	strex	r2, r7, [r5]
    3f38:	2a00      	cmp	r2, #0
    3f3a:	d1f7      	bne.n	3f2c <uart_nrfx_poll_out+0x14>
    3f3c:	f3bf 8f5b 	dmb	ish
				  (atomic_val_t) 1) == false) {
    3f40:	d007      	beq.n	3f52 <uart_nrfx_poll_out+0x3a>
    3f42:	2021      	movs	r0, #33	; 0x21
    3f44:	2100      	movs	r1, #0
			if (--safety_cnt == 0) {
    3f46:	3c01      	subs	r4, #1
    3f48:	f002 fb3c 	bl	65c4 <z_impl_k_sleep>
    3f4c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    3f50:	d1ea      	bne.n	3f28 <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3f52:	4c0f      	ldr	r4, [pc, #60]	; (3f90 <uart_nrfx_poll_out+0x78>)
    3f54:	2300      	movs	r3, #0
    3f56:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    3f5a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3f5e:	2301      	movs	r3, #1
    3f60:	60a3      	str	r3, [r4, #8]
    p_reg->TXD = txd;
    3f62:	f8c4 651c 	str.w	r6, [r4, #1308]	; 0x51c
    3f66:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3f6a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
    3f6e:	b923      	cbnz	r3, 3f7a <uart_nrfx_poll_out+0x62>
    3f70:	2001      	movs	r0, #1
    3f72:	f003 fc7d 	bl	7870 <nrfx_busy_wait>
    3f76:	3e01      	subs	r6, #1
    3f78:	d1f7      	bne.n	3f6a <uart_nrfx_poll_out+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3f7a:	2301      	movs	r3, #1
    3f7c:	60e3      	str	r3, [r4, #12]
	*lock = 0;
    3f7e:	2300      	movs	r3, #0
    3f80:	602b      	str	r3, [r5, #0]
}
    3f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
    3f84:	2301      	movs	r3, #1
    3f86:	602b      	str	r3, [r5, #0]
    3f88:	e7e3      	b.n	3f52 <uart_nrfx_poll_out+0x3a>
    3f8a:	bf00      	nop
    3f8c:	2000047c 	.word	0x2000047c
    3f90:	40002000 	.word	0x40002000

00003f94 <uart_nrfx_pm_action>:
};

#ifdef CONFIG_PM_DEVICE
static int uart_nrfx_pm_action(const struct device *dev,
			       enum pm_device_action action)
{
    3f94:	b510      	push	{r4, lr}
	const struct uart_nrfx_config *config = dev->config;
	int ret;

	switch (action) {
    3f96:	460c      	mov	r4, r1
	const struct uart_nrfx_config *config = dev->config;
    3f98:	6843      	ldr	r3, [r0, #4]
	switch (action) {
    3f9a:	b171      	cbz	r1, 3fba <uart_nrfx_pm_action+0x26>
    3f9c:	2901      	cmp	r1, #1
    3f9e:	d116      	bne.n	3fce <uart_nrfx_pm_action+0x3a>
	case PM_DEVICE_ACTION_RESUME:
		if (IS_ENABLED(CONFIG_UART_0_GPIO_MANAGEMENT)) {
			ret = pinctrl_apply_state(config->pcfg,
    3fa0:	6818      	ldr	r0, [r3, #0]
    3fa2:	2100      	movs	r1, #0
    3fa4:	f003 fb77 	bl	7696 <pinctrl_apply_state>
						  PINCTRL_STATE_DEFAULT);
			if (ret < 0) {
    3fa8:	2800      	cmp	r0, #0
    3faa:	db05      	blt.n	3fb8 <uart_nrfx_pm_action+0x24>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    3fac:	4b09      	ldr	r3, [pc, #36]	; (3fd4 <uart_nrfx_pm_action+0x40>)
    3fae:	2204      	movs	r2, #4
    3fb0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		break;
	default:
		return -ENOTSUP;
	}

	return 0;
    3fb4:	2000      	movs	r0, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3fb6:	601c      	str	r4, [r3, #0]
}
    3fb8:	bd10      	pop	{r4, pc}
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
    3fba:	4a06      	ldr	r2, [pc, #24]	; (3fd4 <uart_nrfx_pm_action+0x40>)
    3fbc:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
			ret = pinctrl_apply_state(config->pcfg,
    3fc0:	6818      	ldr	r0, [r3, #0]
    3fc2:	2101      	movs	r1, #1
    3fc4:	f003 fb67 	bl	7696 <pinctrl_apply_state>
			if (ret < 0) {
    3fc8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
    3fcc:	e7f4      	b.n	3fb8 <uart_nrfx_pm_action+0x24>
	switch (action) {
    3fce:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3fd2:	e7f1      	b.n	3fb8 <uart_nrfx_pm_action+0x24>
    3fd4:	40002000 	.word	0x40002000

00003fd8 <uart_nrfx_init>:
{
    3fd8:	b570      	push	{r4, r5, r6, lr}
    3fda:	4c0d      	ldr	r4, [pc, #52]	; (4010 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x10>)
	const struct uart_nrfx_config *config = dev->config;
    3fdc:	6843      	ldr	r3, [r0, #4]
	struct uart_nrfx_data *data = dev->data;
    3fde:	6906      	ldr	r6, [r0, #16]
    3fe0:	2100      	movs	r1, #0
    3fe2:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
{
    3fe6:	4605      	mov	r5, r0
	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
    3fe8:	6818      	ldr	r0, [r3, #0]
    3fea:	f003 fb54 	bl	7696 <pinctrl_apply_state>
	if (err < 0) {
    3fee:	2800      	cmp	r0, #0
    3ff0:	db0d      	blt.n	400e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe>
	err = uart_nrfx_configure(dev, &data->uart_config);
    3ff2:	4631      	mov	r1, r6
    3ff4:	4628      	mov	r0, r5
    3ff6:	f7ff fee1 	bl	3dbc <uart_nrfx_configure>
	if (err) {
    3ffa:	b940      	cbnz	r0, 400e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    3ffc:	2304      	movs	r3, #4
    3ffe:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4002:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    4006:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    400a:	2301      	movs	r3, #1
    400c:	6023      	str	r3, [r4, #0]
}
    400e:	bd70      	pop	{r4, r5, r6, pc}
    4010:	40002000 	.word	0x40002000

00004014 <spi_nrfx_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int spi_nrfx_init(const struct device *dev)
{
    4014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
    4018:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    401a:	6905      	ldr	r5, [r0, #16]
	int err;

	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    401c:	6a20      	ldr	r0, [r4, #32]
{
    401e:	b086      	sub	sp, #24
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    4020:	2100      	movs	r1, #0
    4022:	f003 fb74 	bl	770e <pinctrl_apply_state>
	if (err < 0) {
    4026:	2800      	cmp	r0, #0
    4028:	db22      	blt.n	4070 <spi_nrfx_init+0x5c>
		return err;
	}

	dev_config->irq_connect();
    402a:	69e3      	ldr	r3, [r4, #28]
    402c:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    402e:	68ac      	ldr	r4, [r5, #8]

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
    4030:	2601      	movs	r6, #1
    4032:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    4036:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    403a:	429c      	cmp	r4, r3
    403c:	d304      	bcc.n	4048 <spi_nrfx_init+0x34>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
    403e:	4628      	mov	r0, r5
    4040:	f003 fbc4 	bl	77cc <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
    4044:	2000      	movs	r0, #0

	return 0;
    4046:	e013      	b.n	4070 <spi_nrfx_init+0x5c>
		if (!device_is_ready(cs_gpio->port)) {
    4048:	6820      	ldr	r0, [r4, #0]
    404a:	f003 fcdb 	bl	7a04 <z_device_is_ready>
    404e:	4603      	mov	r3, r0
    4050:	b988      	cbnz	r0, 4076 <spi_nrfx_init+0x62>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
    4052:	7922      	ldrb	r2, [r4, #4]
    4054:	9204      	str	r2, [sp, #16]
    4056:	6822      	ldr	r2, [r4, #0]
    4058:	4918      	ldr	r1, [pc, #96]	; (40bc <spi_nrfx_init+0xa8>)
    405a:	6812      	ldr	r2, [r2, #0]
    405c:	9203      	str	r2, [sp, #12]
    405e:	4a18      	ldr	r2, [pc, #96]	; (40c0 <spi_nrfx_init+0xac>)
    4060:	9000      	str	r0, [sp, #0]
    4062:	e9cd 0201 	strd	r0, r2, [sp, #4]
    4066:	2201      	movs	r2, #1
    4068:	f003 fb41 	bl	76ee <z_log_msg_runtime_create.constprop.0>
			return -ENODEV;
    406c:	f06f 0012 	mvn.w	r0, #18
}
    4070:	b006      	add	sp, #24
    4072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
    4076:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
    4078:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
    407a:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
    407c:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
    4080:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    4084:	f8dc 7000 	ldr.w	r7, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    4088:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
    408a:	bf54      	ite	pl
    408c:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    4090:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    4094:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    4098:	fa06 fe01 	lsl.w	lr, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    409c:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    409e:	bf4c      	ite	mi
    40a0:	ea47 070e 	orrmi.w	r7, r7, lr
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    40a4:	ea27 070e 	bicpl.w	r7, r7, lr
    40a8:	f8cc 7000 	str.w	r7, [ip]
	return api->pin_configure(port, pin, flags);
    40ac:	f8d8 3000 	ldr.w	r3, [r8]
    40b0:	4798      	blx	r3
		if (ret < 0) {
    40b2:	2800      	cmp	r0, #0
    40b4:	dbdc      	blt.n	4070 <spi_nrfx_init+0x5c>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    40b6:	3408      	adds	r4, #8
    40b8:	e7bb      	b.n	4032 <spi_nrfx_init+0x1e>
    40ba:	bf00      	nop
    40bc:	00007ee0 	.word	0x00007ee0
    40c0:	000088f1 	.word	0x000088f1

000040c4 <transfer_next_chunk>:
{
    40c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    40c6:	4605      	mov	r5, r0
	const struct spi_nrfx_config *dev_config = dev->config;
    40c8:	6840      	ldr	r0, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    40ca:	692a      	ldr	r2, [r5, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    40cc:	6c93      	ldr	r3, [r2, #72]	; 0x48
		return ctx->rx_len;
    40ce:	6d11      	ldr	r1, [r2, #80]	; 0x50
	if (!ctx->tx_len) {
    40d0:	b9e3      	cbnz	r3, 410c <transfer_next_chunk+0x48>
	if (chunk_len > 0) {
    40d2:	b1a9      	cbz	r1, 4100 <transfer_next_chunk+0x3c>
		xfer.p_tx_buffer = ctx->tx_buf;
    40d4:	6c54      	ldr	r4, [r2, #68]	; 0x44
		dev_data->chunk_len = chunk_len;
    40d6:	6591      	str	r1, [r2, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    40d8:	461e      	mov	r6, r3
		xfer.p_tx_buffer = ctx->tx_buf;
    40da:	460b      	mov	r3, r1
		xfer.p_rx_buffer = ctx->rx_buf;
    40dc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    40de:	9202      	str	r2, [sp, #8]
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    40e0:	e9cd 4600 	strd	r4, r6, [sp]
	return !!(ctx->rx_buf && ctx->rx_len);
    40e4:	b1ea      	cbz	r2, 4122 <transfer_next_chunk+0x5e>
    40e6:	2900      	cmp	r1, #0
    40e8:	bf18      	it	ne
    40ea:	4619      	movne	r1, r3
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    40ec:	9103      	str	r1, [sp, #12]
		result = nrfx_spi_xfer(&dev_config->spi, &xfer, 0);
    40ee:	2200      	movs	r2, #0
    40f0:	4669      	mov	r1, sp
    40f2:	f001 fb25 	bl	5740 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
    40f6:	4b0d      	ldr	r3, [pc, #52]	; (412c <transfer_next_chunk+0x68>)
    40f8:	4298      	cmp	r0, r3
    40fa:	d014      	beq.n	4126 <transfer_next_chunk+0x62>
		error = -EIO;
    40fc:	f06f 0104 	mvn.w	r1, #4
	finish_transaction(dev, error);
    4100:	6928      	ldr	r0, [r5, #16]
}
    4102:	b004      	add	sp, #16
    4104:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	finish_transaction(dev, error);
    4108:	f003 bb82 	b.w	7810 <finish_transaction.isra.0>
	} else if (!ctx->rx_len) {
    410c:	6c54      	ldr	r4, [r2, #68]	; 0x44
    410e:	b111      	cbz	r1, 4116 <transfer_next_chunk+0x52>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    4110:	428b      	cmp	r3, r1
    4112:	bf28      	it	cs
    4114:	460b      	movcs	r3, r1
		return ctx->tx_len;
    4116:	2c00      	cmp	r4, #0
		dev_data->chunk_len = chunk_len;
    4118:	6593      	str	r3, [r2, #88]	; 0x58
    411a:	bf14      	ite	ne
    411c:	461e      	movne	r6, r3
    411e:	2600      	moveq	r6, #0
    4120:	e7dc      	b.n	40dc <transfer_next_chunk+0x18>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    4122:	4611      	mov	r1, r2
    4124:	e7e2      	b.n	40ec <transfer_next_chunk+0x28>
}
    4126:	b004      	add	sp, #16
    4128:	bd70      	pop	{r4, r5, r6, pc}
    412a:	bf00      	nop
    412c:	0bad0000 	.word	0x0bad0000

00004130 <event_handler>:
{
    4130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    4132:	7803      	ldrb	r3, [r0, #0]
{
    4134:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    4136:	2b00      	cmp	r3, #0
    4138:	d15e      	bne.n	41f8 <event_handler+0xc8>
		if (dev_data->chunk_len == 0) {
    413a:	6d89      	ldr	r1, [r1, #88]	; 0x58
    413c:	b941      	cbnz	r1, 4150 <event_handler+0x20>
			finish_transaction(dev_data->dev, -ETIMEDOUT);
    413e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    4140:	6918      	ldr	r0, [r3, #16]
    4142:	f06f 0173 	mvn.w	r1, #115	; 0x73
}
    4146:	b004      	add	sp, #16
    4148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			finish_transaction(dev_data->dev, -ETIMEDOUT);
    414c:	f003 bb60 	b.w	7810 <finish_transaction.isra.0>
	if (!ctx->tx_len) {
    4150:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    4152:	b152      	cbz	r2, 416a <event_handler+0x3a>
	if (len > ctx->tx_len) {
    4154:	4291      	cmp	r1, r2
    4156:	d91d      	bls.n	4194 <event_handler+0x64>
		LOG_ERR("Update exceeds current buffer");
    4158:	4a28      	ldr	r2, [pc, #160]	; (41fc <event_handler+0xcc>)
    415a:	4929      	ldr	r1, [pc, #164]	; (4200 <event_handler+0xd0>)
    415c:	9300      	str	r3, [sp, #0]
    415e:	e9cd 3201 	strd	r3, r2, [sp, #4]
    4162:	4618      	mov	r0, r3
    4164:	2201      	movs	r2, #1
    4166:	f003 fac2 	bl	76ee <z_log_msg_runtime_create.constprop.0>
	if (!ctx->rx_len) {
    416a:	6d23      	ldr	r3, [r4, #80]	; 0x50
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    416c:	6da2      	ldr	r2, [r4, #88]	; 0x58
    416e:	b15b      	cbz	r3, 4188 <event_handler+0x58>
	if (len > ctx->rx_len) {
    4170:	429a      	cmp	r2, r3
    4172:	d928      	bls.n	41c6 <event_handler+0x96>
		LOG_ERR("Update exceeds current buffer");
    4174:	4b21      	ldr	r3, [pc, #132]	; (41fc <event_handler+0xcc>)
    4176:	9302      	str	r3, [sp, #8]
    4178:	2300      	movs	r3, #0
    417a:	e9cd 3300 	strd	r3, r3, [sp]
    417e:	4920      	ldr	r1, [pc, #128]	; (4200 <event_handler+0xd0>)
    4180:	2201      	movs	r2, #1
    4182:	4618      	mov	r0, r3
    4184:	f003 fab3 	bl	76ee <z_log_msg_runtime_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
    4188:	6d60      	ldr	r0, [r4, #84]	; 0x54
}
    418a:	b004      	add	sp, #16
    418c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    4190:	f7ff bf98 	b.w	40c4 <transfer_next_chunk>
	ctx->tx_len -= len;
    4194:	1a52      	subs	r2, r2, r1
    4196:	64a2      	str	r2, [r4, #72]	; 0x48
	if (!ctx->tx_len) {
    4198:	b97a      	cbnz	r2, 41ba <event_handler+0x8a>
		++ctx->current_tx;
    419a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    419c:	3308      	adds	r3, #8
    419e:	6363      	str	r3, [r4, #52]	; 0x34
		--ctx->tx_count;
    41a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    41a2:	3b01      	subs	r3, #1
    41a4:	63a3      	str	r3, [r4, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
    41a6:	f104 0248 	add.w	r2, r4, #72	; 0x48
    41aa:	f104 0138 	add.w	r1, r4, #56	; 0x38
    41ae:	f104 0034 	add.w	r0, r4, #52	; 0x34
    41b2:	f003 fa89 	bl	76c8 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
    41b6:	6460      	str	r0, [r4, #68]	; 0x44
    41b8:	e7d7      	b.n	416a <event_handler+0x3a>
	} else if (ctx->tx_buf) {
    41ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
    41bc:	2b00      	cmp	r3, #0
    41be:	d0d4      	beq.n	416a <event_handler+0x3a>
		ctx->tx_buf += dfs * len;
    41c0:	440b      	add	r3, r1
    41c2:	6463      	str	r3, [r4, #68]	; 0x44
    41c4:	e7d1      	b.n	416a <event_handler+0x3a>
	ctx->rx_len -= len;
    41c6:	1a9b      	subs	r3, r3, r2
    41c8:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
    41ca:	b97b      	cbnz	r3, 41ec <event_handler+0xbc>
		++ctx->current_rx;
    41cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    41ce:	3308      	adds	r3, #8
    41d0:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
    41d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    41d4:	3b01      	subs	r3, #1
    41d6:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
    41d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
    41dc:	f104 0140 	add.w	r1, r4, #64	; 0x40
    41e0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    41e4:	f003 fa70 	bl	76c8 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
    41e8:	64e0      	str	r0, [r4, #76]	; 0x4c
    41ea:	e7cd      	b.n	4188 <event_handler+0x58>
	} else if (ctx->rx_buf) {
    41ec:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    41ee:	2b00      	cmp	r3, #0
    41f0:	d0ca      	beq.n	4188 <event_handler+0x58>
		ctx->rx_buf += dfs * len;
    41f2:	4413      	add	r3, r2
    41f4:	64e3      	str	r3, [r4, #76]	; 0x4c
    41f6:	e7c7      	b.n	4188 <event_handler+0x58>
}
    41f8:	b004      	add	sp, #16
    41fa:	bd10      	pop	{r4, pc}
    41fc:	00008915 	.word	0x00008915
    4200:	00007ee0 	.word	0x00007ee0

00004204 <spi_nrfx_transceive>:
{
    4204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4208:	b08f      	sub	sp, #60	; 0x3c
    420a:	4699      	mov	r9, r3
	const struct spi_nrfx_config *dev_config = dev->config;
    420c:	6843      	ldr	r3, [r0, #4]
    420e:	9307      	str	r3, [sp, #28]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    4210:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    4212:	6904      	ldr	r4, [r0, #16]
{
    4214:	4688      	mov	r8, r1
    4216:	0499      	lsls	r1, r3, #18
    4218:	4607      	mov	r7, r0
    421a:	4692      	mov	sl, r2
    421c:	d435      	bmi.n	428a <spi_nrfx_transceive+0x86>
	return z_impl_k_sem_take(sem, timeout);
    421e:	f04f 32ff 	mov.w	r2, #4294967295
    4222:	f04f 33ff 	mov.w	r3, #4294967295
    4226:	f104 0010 	add.w	r0, r4, #16
    422a:	f001 fec3 	bl	5fb4 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    422e:	f8c4 8004 	str.w	r8, [r4, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    4232:	f8d7 b010 	ldr.w	fp, [r7, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    4236:	687b      	ldr	r3, [r7, #4]
    4238:	9305      	str	r3, [sp, #20]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    423a:	f89b 305d 	ldrb.w	r3, [fp, #93]	; 0x5d
    423e:	9306      	str	r3, [sp, #24]
    4240:	b123      	cbz	r3, 424c <spi_nrfx_transceive+0x48>
    4242:	f8db 3000 	ldr.w	r3, [fp]
    4246:	4598      	cmp	r8, r3
    4248:	f000 80be 	beq.w	43c8 <spi_nrfx_transceive+0x1c4>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    424c:	f8b8 6004 	ldrh.w	r6, [r8, #4]
    4250:	f416 6300 	ands.w	r3, r6, #2048	; 0x800
    4254:	d020      	beq.n	4298 <spi_nrfx_transceive+0x94>
		LOG_ERR("Half-duplex not supported");
    4256:	4baa      	ldr	r3, [pc, #680]	; (4500 <spi_nrfx_transceive+0x2fc>)
    4258:	9302      	str	r3, [sp, #8]
    425a:	2300      	movs	r3, #0
    425c:	e9cd 3300 	strd	r3, r3, [sp]
    4260:	49a8      	ldr	r1, [pc, #672]	; (4504 <spi_nrfx_transceive+0x300>)
    4262:	2201      	movs	r2, #1
    4264:	4618      	mov	r0, r3
    4266:	f003 fa42 	bl	76ee <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
    426a:	f06f 0585 	mvn.w	r5, #133	; 0x85
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    426e:	6823      	ldr	r3, [r4, #0]
    4270:	889b      	ldrh	r3, [r3, #4]
    4272:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    4276:	d104      	bne.n	4282 <spi_nrfx_transceive+0x7e>
		ctx->owner = NULL;
    4278:	6063      	str	r3, [r4, #4]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    427a:	f104 0010 	add.w	r0, r4, #16
    427e:	f001 fe79 	bl	5f74 <z_impl_k_sem_give>
}
    4282:	4628      	mov	r0, r5
    4284:	b00f      	add	sp, #60	; 0x3c
    4286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    428a:	69a3      	ldr	r3, [r4, #24]
    428c:	2b00      	cmp	r3, #0
    428e:	d1c6      	bne.n	421e <spi_nrfx_transceive+0x1a>
		(k_sem_count_get(&ctx->lock) == 0) &&
    4290:	6863      	ldr	r3, [r4, #4]
    4292:	4598      	cmp	r8, r3
    4294:	d1c3      	bne.n	421e <spi_nrfx_transceive+0x1a>
    4296:	e7cc      	b.n	4232 <spi_nrfx_transceive+0x2e>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    4298:	f016 0201 	ands.w	r2, r6, #1
    429c:	d00d      	beq.n	42ba <spi_nrfx_transceive+0xb6>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
    429e:	683a      	ldr	r2, [r7, #0]
    42a0:	9203      	str	r2, [sp, #12]
    42a2:	4a99      	ldr	r2, [pc, #612]	; (4508 <spi_nrfx_transceive+0x304>)
    42a4:	4997      	ldr	r1, [pc, #604]	; (4504 <spi_nrfx_transceive+0x300>)
    42a6:	9300      	str	r3, [sp, #0]
    42a8:	e9cd 3201 	strd	r3, r2, [sp, #4]
    42ac:	4618      	mov	r0, r3
    42ae:	2201      	movs	r2, #1
    42b0:	f003 fa1d 	bl	76ee <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    42b4:	f06f 0515 	mvn.w	r5, #21
    42b8:	e7d9      	b.n	426e <spi_nrfx_transceive+0x6a>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    42ba:	f016 0308 	ands.w	r3, r6, #8
    42be:	d00a      	beq.n	42d6 <spi_nrfx_transceive+0xd2>
		LOG_ERR("Loopback mode is not supported");
    42c0:	4b92      	ldr	r3, [pc, #584]	; (450c <spi_nrfx_transceive+0x308>)
    42c2:	9200      	str	r2, [sp, #0]
    42c4:	e9cd 2301 	strd	r2, r3, [sp, #4]
    42c8:	4613      	mov	r3, r2
		LOG_ERR("Word sizes other than 8 bits are not supported");
    42ca:	498e      	ldr	r1, [pc, #568]	; (4504 <spi_nrfx_transceive+0x300>)
    42cc:	2201      	movs	r2, #1
    42ce:	4618      	mov	r0, r3
    42d0:	f003 fa0d 	bl	76ee <z_log_msg_runtime_create.constprop.0>
	if (error == 0) {
    42d4:	e7ee      	b.n	42b4 <spi_nrfx_transceive+0xb0>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    42d6:	f3c6 1245 	ubfx	r2, r6, #5, #6
    42da:	2a08      	cmp	r2, #8
    42dc:	d004      	beq.n	42e8 <spi_nrfx_transceive+0xe4>
		LOG_ERR("Word sizes other than 8 bits are not supported");
    42de:	4a8c      	ldr	r2, [pc, #560]	; (4510 <spi_nrfx_transceive+0x30c>)
    42e0:	9300      	str	r3, [sp, #0]
    42e2:	e9cd 3201 	strd	r3, r2, [sp, #4]
    42e6:	e7f0      	b.n	42ca <spi_nrfx_transceive+0xc6>
	if (spi_cfg->frequency < 125000) {
    42e8:	f8d8 5000 	ldr.w	r5, [r8]
    42ec:	4a89      	ldr	r2, [pc, #548]	; (4514 <spi_nrfx_transceive+0x310>)
    42ee:	4295      	cmp	r5, r2
    42f0:	d801      	bhi.n	42f6 <spi_nrfx_transceive+0xf2>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    42f2:	4a89      	ldr	r2, [pc, #548]	; (4518 <spi_nrfx_transceive+0x314>)
    42f4:	e7f4      	b.n	42e0 <spi_nrfx_transceive+0xdc>
	config = dev_config->def_config;
    42f6:	9b05      	ldr	r3, [sp, #20]
    42f8:	f103 0e08 	add.w	lr, r3, #8
    42fc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    4300:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
    4304:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4308:	f8de 3000 	ldr.w	r3, [lr]
    430c:	f8cc 3000 	str.w	r3, [ip]
	if (frequency < 250000) {
    4310:	4b82      	ldr	r3, [pc, #520]	; (451c <spi_nrfx_transceive+0x318>)
    4312:	429d      	cmp	r5, r3
    4314:	d940      	bls.n	4398 <spi_nrfx_transceive+0x194>
	} else if (frequency < 500000) {
    4316:	4b82      	ldr	r3, [pc, #520]	; (4520 <spi_nrfx_transceive+0x31c>)
    4318:	429d      	cmp	r5, r3
    431a:	d940      	bls.n	439e <spi_nrfx_transceive+0x19a>
	} else if (frequency < 1000000) {
    431c:	4b81      	ldr	r3, [pc, #516]	; (4524 <spi_nrfx_transceive+0x320>)
    431e:	429d      	cmp	r5, r3
    4320:	d940      	bls.n	43a4 <spi_nrfx_transceive+0x1a0>
	} else if (frequency < 2000000) {
    4322:	4b81      	ldr	r3, [pc, #516]	; (4528 <spi_nrfx_transceive+0x324>)
    4324:	429d      	cmp	r5, r3
    4326:	d940      	bls.n	43aa <spi_nrfx_transceive+0x1a6>
	} else if (frequency < 4000000) {
    4328:	4b80      	ldr	r3, [pc, #512]	; (452c <spi_nrfx_transceive+0x328>)
    432a:	429d      	cmp	r5, r3
    432c:	d940      	bls.n	43b0 <spi_nrfx_transceive+0x1ac>
		return NRF_SPI_FREQ_4M;
    432e:	4b80      	ldr	r3, [pc, #512]	; (4530 <spi_nrfx_transceive+0x32c>)
    4330:	429d      	cmp	r5, r3
    4332:	bf2c      	ite	cs
    4334:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
    4338:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    433c:	07b2      	lsls	r2, r6, #30
	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
    433e:	950b      	str	r5, [sp, #44]	; 0x2c
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    4340:	f006 0304 	and.w	r3, r6, #4
    4344:	d537      	bpl.n	43b6 <spi_nrfx_transceive+0x1b2>
			return NRF_SPI_MODE_2;
    4346:	2b00      	cmp	r3, #0
    4348:	bf14      	ite	ne
    434a:	2303      	movne	r3, #3
    434c:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
    434e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	if (dev_data->initialized) {
    4352:	9b06      	ldr	r3, [sp, #24]
	if (operation & SPI_TRANSFER_LSB) {
    4354:	f3c6 1600 	ubfx	r6, r6, #4, #1
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
    4358:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
	if (dev_data->initialized) {
    435c:	b12b      	cbz	r3, 436a <spi_nrfx_transceive+0x166>
		nrfx_spi_uninit(&dev_config->spi);
    435e:	9805      	ldr	r0, [sp, #20]
    4360:	f001 f99c 	bl	569c <nrfx_spi_uninit>
		dev_data->initialized = false;
    4364:	2300      	movs	r3, #0
    4366:	f88b 305d 	strb.w	r3, [fp, #93]	; 0x5d
	result = nrfx_spi_init(&dev_config->spi, &config,
    436a:	465b      	mov	r3, fp
    436c:	4a71      	ldr	r2, [pc, #452]	; (4534 <spi_nrfx_transceive+0x330>)
    436e:	9805      	ldr	r0, [sp, #20]
    4370:	a909      	add	r1, sp, #36	; 0x24
    4372:	f001 f8e5 	bl	5540 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
    4376:	4b70      	ldr	r3, [pc, #448]	; (4538 <spi_nrfx_transceive+0x334>)
    4378:	4298      	cmp	r0, r3
    437a:	d020      	beq.n	43be <spi_nrfx_transceive+0x1ba>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
    437c:	4b6f      	ldr	r3, [pc, #444]	; (453c <spi_nrfx_transceive+0x338>)
    437e:	9302      	str	r3, [sp, #8]
    4380:	2300      	movs	r3, #0
    4382:	9003      	str	r0, [sp, #12]
    4384:	e9cd 3300 	strd	r3, r3, [sp]
    4388:	495e      	ldr	r1, [pc, #376]	; (4504 <spi_nrfx_transceive+0x300>)
    438a:	2201      	movs	r2, #1
    438c:	4618      	mov	r0, r3
    438e:	f003 f9ae 	bl	76ee <z_log_msg_runtime_create.constprop.0>
		return -EIO;
    4392:	f06f 0504 	mvn.w	r5, #4
    4396:	e76a      	b.n	426e <spi_nrfx_transceive+0x6a>
		return NRF_SPI_FREQ_125K;
    4398:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
    439c:	e7ce      	b.n	433c <spi_nrfx_transceive+0x138>
		return NRF_SPI_FREQ_250K;
    439e:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    43a2:	e7cb      	b.n	433c <spi_nrfx_transceive+0x138>
		return NRF_SPI_FREQ_500K;
    43a4:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    43a8:	e7c8      	b.n	433c <spi_nrfx_transceive+0x138>
		return NRF_SPI_FREQ_1M;
    43aa:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    43ae:	e7c5      	b.n	433c <spi_nrfx_transceive+0x138>
		return NRF_SPI_FREQ_2M;
    43b0:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
    43b4:	e7c2      	b.n	433c <spi_nrfx_transceive+0x138>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    43b6:	3b00      	subs	r3, #0
    43b8:	bf18      	it	ne
    43ba:	2301      	movne	r3, #1
    43bc:	e7c7      	b.n	434e <spi_nrfx_transceive+0x14a>
	dev_data->initialized = true;
    43be:	2301      	movs	r3, #1
    43c0:	f88b 305d 	strb.w	r3, [fp, #93]	; 0x5d
	ctx->config = spi_cfg;
    43c4:	f8cb 8000 	str.w	r8, [fp]
		dev_data->busy = true;
    43c8:	2301      	movs	r3, #1
    43ca:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    43ce:	f1ba 0f00 	cmp.w	sl, #0
    43d2:	d170      	bne.n	44b6 <spi_nrfx_transceive+0x2b2>
    43d4:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    43d8:	2300      	movs	r3, #0
    43da:	63a3      	str	r3, [r4, #56]	; 0x38
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    43dc:	f104 0248 	add.w	r2, r4, #72	; 0x48
    43e0:	f104 0138 	add.w	r1, r4, #56	; 0x38
    43e4:	f104 0034 	add.w	r0, r4, #52	; 0x34
    43e8:	f003 f96e 	bl	76c8 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
    43ec:	6460      	str	r0, [r4, #68]	; 0x44
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    43ee:	f1b9 0f00 	cmp.w	r9, #0
    43f2:	d168      	bne.n	44c6 <spi_nrfx_transceive+0x2c2>
    43f4:	f8c4 903c 	str.w	r9, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    43f8:	2300      	movs	r3, #0
    43fa:	6423      	str	r3, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    43fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
    4400:	f104 0140 	add.w	r1, r4, #64	; 0x40
    4404:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    4408:	f003 f95e 	bl	76c8 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
    440c:	2500      	movs	r5, #0
	_spi_context_cs_control(ctx, on, false);
    440e:	462a      	mov	r2, r5
	ctx->rx_buf = (uint8_t *)
    4410:	64e0      	str	r0, [r4, #76]	; 0x4c
	_spi_context_cs_control(ctx, on, false);
    4412:	2101      	movs	r1, #1
    4414:	4620      	mov	r0, r4
	ctx->sync_status = 0;
    4416:	6325      	str	r5, [r4, #48]	; 0x30
	_spi_context_cs_control(ctx, on, false);
    4418:	f003 f9b6 	bl	7788 <_spi_context_cs_control>
		transfer_next_chunk(dev);
    441c:	4638      	mov	r0, r7
    441e:	f7ff fe51 	bl	40c4 <transfer_next_chunk>
static inline size_t spi_context_total_tx_len(struct spi_context *ctx)
{
	size_t n;
	size_t total_len = 0;

	for (n = 0; n < ctx->tx_count; ++n) {
    4422:	6ba0      	ldr	r0, [r4, #56]	; 0x38
	size_t total_len = 0;
    4424:	462a      	mov	r2, r5
	for (n = 0; n < ctx->tx_count; ++n) {
    4426:	462b      	mov	r3, r5
    4428:	4283      	cmp	r3, r0
    442a:	d154      	bne.n	44d6 <spi_nrfx_transceive+0x2d2>
}

static inline size_t spi_context_total_rx_len(struct spi_context *ctx)
{
	size_t n;
	size_t total_len = 0;
    442c:	2300      	movs	r3, #0

	for (n = 0; n < ctx->rx_count; ++n) {
    442e:	6c25      	ldr	r5, [r4, #64]	; 0x40
    4430:	4619      	mov	r1, r3
    4432:	42a9      	cmp	r1, r5
    4434:	d156      	bne.n	44e4 <spi_nrfx_transceive+0x2e0>
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    4436:	4293      	cmp	r3, r2
				     ctx->config->frequency;
    4438:	4626      	mov	r6, r4
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    443a:	bf38      	it	cc
    443c:	4613      	movcc	r3, r2
    443e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    4442:	fb02 f503 	mul.w	r5, r2, r3
				     ctx->config->frequency;
    4446:	f856 3b20 	ldr.w	r3, [r6], #32
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    444a:	f04f 0800 	mov.w	r8, #0
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    444e:	681b      	ldr	r3, [r3, #0]
    4450:	fbb5 f5f3 	udiv	r5, r5, r3
    4454:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
			timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    4458:	35c8      	adds	r5, #200	; 0xc8
    445a:	4641      	mov	r1, r8
    445c:	f240 30e7 	movw	r0, #999	; 0x3e7
    4460:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4464:	2300      	movs	r3, #0
    4466:	fbe5 010c 	umlal	r0, r1, r5, ip
    446a:	f7fb fe37 	bl	dc <__aeabi_uldivmod>
    446e:	4602      	mov	r2, r0
    4470:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    4472:	4630      	mov	r0, r6
    4474:	f001 fd9e 	bl	5fb4 <z_impl_k_sem_take>
		if (k_sem_take(&ctx->sync, timeout)) {
    4478:	2800      	cmp	r0, #0
    447a:	d03a      	beq.n	44f2 <spi_nrfx_transceive+0x2ee>
			LOG_ERR("Timeout waiting for transfer complete");
    447c:	4b30      	ldr	r3, [pc, #192]	; (4540 <spi_nrfx_transceive+0x33c>)
    447e:	4921      	ldr	r1, [pc, #132]	; (4504 <spi_nrfx_transceive+0x300>)
    4480:	f8cd 8000 	str.w	r8, [sp]
    4484:	e9cd 8301 	strd	r8, r3, [sp, #4]
    4488:	2201      	movs	r2, #1
    448a:	4643      	mov	r3, r8
    448c:	4640      	mov	r0, r8
    448e:	f003 f92e 	bl	76ee <z_log_msg_runtime_create.constprop.0>
			dev_data->chunk_len = 0;
    4492:	2500      	movs	r5, #0
			nrfx_spi_uninit(&dev_config->spi);
    4494:	9807      	ldr	r0, [sp, #28]
			dev_data->chunk_len = 0;
    4496:	65a5      	str	r5, [r4, #88]	; 0x58
			nrfx_spi_uninit(&dev_config->spi);
    4498:	f001 f900 	bl	569c <nrfx_spi_uninit>
			dev_data->initialized = false;
    449c:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			finish_transaction(dev, -ETIMEDOUT);
    44a0:	6938      	ldr	r0, [r7, #16]
    44a2:	f06f 0173 	mvn.w	r1, #115	; 0x73
    44a6:	f003 f9b3 	bl	7810 <finish_transaction.isra.0>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_RESET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_reset(sem);
    44aa:	4630      	mov	r0, r6
    44ac:	f001 fdaa 	bl	6004 <z_impl_k_sem_reset>
		error = spi_context_wait_for_completion(&dev_data->ctx);
    44b0:	f06f 0573 	mvn.w	r5, #115	; 0x73
}
    44b4:	e6db      	b.n	426e <spi_nrfx_transceive+0x6a>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    44b6:	f8da 3000 	ldr.w	r3, [sl]
    44ba:	6363      	str	r3, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    44bc:	2b00      	cmp	r3, #0
    44be:	d08b      	beq.n	43d8 <spi_nrfx_transceive+0x1d4>
    44c0:	f8da 3004 	ldr.w	r3, [sl, #4]
    44c4:	e789      	b.n	43da <spi_nrfx_transceive+0x1d6>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    44c6:	f8d9 3000 	ldr.w	r3, [r9]
    44ca:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    44cc:	2b00      	cmp	r3, #0
    44ce:	d093      	beq.n	43f8 <spi_nrfx_transceive+0x1f4>
    44d0:	f8d9 3004 	ldr.w	r3, [r9, #4]
    44d4:	e791      	b.n	43fa <spi_nrfx_transceive+0x1f6>
		total_len += ctx->current_tx[n].len;
    44d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    44d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
	for (n = 0; n < ctx->tx_count; ++n) {
    44dc:	3301      	adds	r3, #1
		total_len += ctx->current_tx[n].len;
    44de:	6849      	ldr	r1, [r1, #4]
    44e0:	440a      	add	r2, r1
	for (n = 0; n < ctx->tx_count; ++n) {
    44e2:	e7a1      	b.n	4428 <spi_nrfx_transceive+0x224>
		total_len += ctx->current_rx[n].len;
    44e4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    44e6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
	for (n = 0; n < ctx->rx_count; ++n) {
    44ea:	3101      	adds	r1, #1
		total_len += ctx->current_rx[n].len;
    44ec:	6840      	ldr	r0, [r0, #4]
    44ee:	4403      	add	r3, r0
	for (n = 0; n < ctx->rx_count; ++n) {
    44f0:	e79f      	b.n	4432 <spi_nrfx_transceive+0x22e>
		status = ctx->sync_status;
    44f2:	6b25      	ldr	r5, [r4, #48]	; 0x30
		if (error == -ETIMEDOUT) {
    44f4:	f115 0f74 	cmn.w	r5, #116	; 0x74
    44f8:	f47f aeb9 	bne.w	426e <spi_nrfx_transceive+0x6a>
    44fc:	e7c9      	b.n	4492 <spi_nrfx_transceive+0x28e>
    44fe:	bf00      	nop
    4500:	00008933 	.word	0x00008933
    4504:	00007ee0 	.word	0x00007ee0
    4508:	0000894d 	.word	0x0000894d
    450c:	0000896f 	.word	0x0000896f
    4510:	0000898e 	.word	0x0000898e
    4514:	0001e847 	.word	0x0001e847
    4518:	000089bd 	.word	0x000089bd
    451c:	0003d08f 	.word	0x0003d08f
    4520:	0007a11f 	.word	0x0007a11f
    4524:	000f423f 	.word	0x000f423f
    4528:	001e847f 	.word	0x001e847f
    452c:	003d08ff 	.word	0x003d08ff
    4530:	007a1200 	.word	0x007a1200
    4534:	00004131 	.word	0x00004131
    4538:	0bad0000 	.word	0x0bad0000
    453c:	000089ee 	.word	0x000089ee
    4540:	00008a15 	.word	0x00008a15

00004544 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    4544:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    4546:	2301      	movs	r3, #1
    4548:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    454a:	4a0e      	ldr	r2, [pc, #56]	; (4584 <compare_int_lock+0x40>)
    454c:	f3bf 8f5b 	dmb	ish
    4550:	43dc      	mvns	r4, r3
    4552:	e852 1f00 	ldrex	r1, [r2]
    4556:	ea01 0504 	and.w	r5, r1, r4
    455a:	e842 5600 	strex	r6, r5, [r2]
    455e:	2e00      	cmp	r6, #0
    4560:	d1f7      	bne.n	4552 <compare_int_lock+0xe>
    4562:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4566:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    456a:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    456c:	4806      	ldr	r0, [pc, #24]	; (4588 <compare_int_lock+0x44>)
    456e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    4572:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4576:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    457a:	420b      	tst	r3, r1
}
    457c:	bf14      	ite	ne
    457e:	2001      	movne	r0, #1
    4580:	2000      	moveq	r0, #0
    4582:	bd70      	pop	{r4, r5, r6, pc}
    4584:	20000484 	.word	0x20000484
    4588:	40011000 	.word	0x40011000

0000458c <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    458c:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    458e:	490e      	ldr	r1, [pc, #56]	; (45c8 <sys_clock_timeout_handler+0x3c>)
    4590:	e9d1 3400 	ldrd	r3, r4, [r1]
    4594:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    4596:	18c3      	adds	r3, r0, r3
    4598:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    459c:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    45a0:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    45a4:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    45a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    45ac:	d209      	bcs.n	45c2 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    45ae:	4b07      	ldr	r3, [pc, #28]	; (45cc <sys_clock_timeout_handler+0x40>)
    45b0:	681b      	ldr	r3, [r3, #0]
    45b2:	0a1a      	lsrs	r2, r3, #8
    45b4:	061b      	lsls	r3, r3, #24
    45b6:	199c      	adds	r4, r3, r6
    45b8:	4b05      	ldr	r3, [pc, #20]	; (45d0 <sys_clock_timeout_handler+0x44>)
    45ba:	f142 0500 	adc.w	r5, r2, #0
    45be:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    45c2:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    45c4:	f002 b954 	b.w	6870 <sys_clock_announce>
    45c8:	200001c0 	.word	0x200001c0
    45cc:	20000488 	.word	0x20000488
    45d0:	200001c8 	.word	0x200001c8

000045d4 <compare_int_unlock>:
	if (key) {
    45d4:	b311      	cbz	r1, 461c <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    45d6:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    45da:	2301      	movs	r3, #1
    45dc:	4a10      	ldr	r2, [pc, #64]	; (4620 <compare_int_unlock+0x4c>)
    45de:	4083      	lsls	r3, r0
    45e0:	e852 cf00 	ldrex	ip, [r2]
    45e4:	ea4c 0c03 	orr.w	ip, ip, r3
    45e8:	e842 c100 	strex	r1, ip, [r2]
    45ec:	2900      	cmp	r1, #0
    45ee:	d1f7      	bne.n	45e0 <compare_int_unlock+0xc>
    45f0:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    45f4:	4a0b      	ldr	r2, [pc, #44]	; (4624 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    45f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    45fa:	4083      	lsls	r3, r0
    45fc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4600:	4b09      	ldr	r3, [pc, #36]	; (4628 <compare_int_unlock+0x54>)
    4602:	f3bf 8f5b 	dmb	ish
    4606:	681b      	ldr	r3, [r3, #0]
    4608:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    460c:	40c3      	lsrs	r3, r0
    460e:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4610:	bf42      	ittt	mi
    4612:	4b06      	ldrmi	r3, [pc, #24]	; (462c <compare_int_unlock+0x58>)
    4614:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    4618:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    461c:	4770      	bx	lr
    461e:	bf00      	nop
    4620:	20000484 	.word	0x20000484
    4624:	40011000 	.word	0x40011000
    4628:	20000480 	.word	0x20000480
    462c:	e000e100 	.word	0xe000e100

00004630 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    4630:	4b0d      	ldr	r3, [pc, #52]	; (4668 <z_nrf_rtc_timer_read+0x38>)
    4632:	6818      	ldr	r0, [r3, #0]
    4634:	0a01      	lsrs	r1, r0, #8
    4636:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    4638:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    463c:	4b0b      	ldr	r3, [pc, #44]	; (466c <z_nrf_rtc_timer_read+0x3c>)
    463e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    4642:	1818      	adds	r0, r3, r0
    4644:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    4648:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    464c:	d20a      	bcs.n	4664 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    464e:	4b08      	ldr	r3, [pc, #32]	; (4670 <z_nrf_rtc_timer_read+0x40>)
    4650:	e9d3 2300 	ldrd	r2, r3, [r3]
    4654:	4290      	cmp	r0, r2
    4656:	eb71 0303 	sbcs.w	r3, r1, r3
    465a:	d203      	bcs.n	4664 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    465c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    4660:	f141 0100 	adc.w	r1, r1, #0
}
    4664:	4770      	bx	lr
    4666:	bf00      	nop
    4668:	20000488 	.word	0x20000488
    466c:	40011000 	.word	0x40011000
    4670:	200001c8 	.word	0x200001c8

00004674 <compare_set>:
{
    4674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4678:	4616      	mov	r6, r2
    467a:	461f      	mov	r7, r3
    467c:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    467e:	f7ff ff61 	bl	4544 <compare_int_lock>
    4682:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    4684:	f7ff ffd4 	bl	4630 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    4688:	42b0      	cmp	r0, r6
    468a:	eb71 0307 	sbcs.w	r3, r1, r7
    468e:	d251      	bcs.n	4734 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    4690:	4b3a      	ldr	r3, [pc, #232]	; (477c <compare_set+0x108>)
    4692:	1a30      	subs	r0, r6, r0
    4694:	eb67 0101 	sbc.w	r1, r7, r1
    4698:	4298      	cmp	r0, r3
    469a:	f171 0100 	sbcs.w	r1, r1, #0
    469e:	d26a      	bcs.n	4776 <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
    46a0:	4b37      	ldr	r3, [pc, #220]	; (4780 <compare_set+0x10c>)
    46a2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    46a6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    46aa:	429f      	cmp	r7, r3
    46ac:	bf08      	it	eq
    46ae:	4296      	cmpeq	r6, r2
    46b0:	d04e      	beq.n	4750 <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    46b2:	4934      	ldr	r1, [pc, #208]	; (4784 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    46b4:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    46b8:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    46bc:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    46c0:	00ad      	lsls	r5, r5, #2
    46c2:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    46c6:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    46c8:	b2ad      	uxth	r5, r5
    46ca:	f003 f8b2 	bl	7832 <event_clear>
	return absolute_time & COUNTER_MAX;
    46ce:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    46d2:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    46d6:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    46da:	4a2b      	ldr	r2, [pc, #172]	; (4788 <compare_set+0x114>)
    46dc:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    46de:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    46e2:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    46e4:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
    46e8:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    46ea:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
    46ee:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
    46f2:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    46f6:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    46fa:	f06f 0002 	mvn.w	r0, #2
    46fe:	eba0 0008 	sub.w	r0, r0, r8
    4702:	4460      	add	r0, ip
    4704:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    4708:	4290      	cmp	r0, r2
    470a:	d921      	bls.n	4750 <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    470c:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    470e:	b160      	cbz	r0, 472a <compare_set+0xb6>
     return p_reg->COUNTER;
    4710:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    4714:	eba8 000b 	sub.w	r0, r8, fp
    4718:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    471c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4720:	d916      	bls.n	4750 <compare_set+0xdc>
					event_clear(chan);
    4722:	4620      	mov	r0, r4
    4724:	f003 f885 	bl	7832 <event_clear>
    4728:	4a17      	ldr	r2, [pc, #92]	; (4788 <compare_set+0x114>)
			cc_val = now + cc_inc;
    472a:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
    472e:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    4732:	e7d9      	b.n	46e8 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    4734:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4736:	4a15      	ldr	r2, [pc, #84]	; (478c <compare_set+0x118>)
    4738:	f3bf 8f5b 	dmb	ish
    473c:	40a3      	lsls	r3, r4
    473e:	e852 0f00 	ldrex	r0, [r2]
    4742:	4318      	orrs	r0, r3
    4744:	e842 0100 	strex	r1, r0, [r2]
    4748:	2900      	cmp	r1, #0
    474a:	d1f8      	bne.n	473e <compare_set+0xca>
    474c:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    4750:	490b      	ldr	r1, [pc, #44]	; (4780 <compare_set+0x10c>)
	cc_data[chan].callback = handler;
    4752:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    4754:	0123      	lsls	r3, r4, #4
    4756:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    475a:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
    475e:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    4760:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4762:	6053      	str	r3, [r2, #4]
	return ret;
    4764:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
    4766:	4620      	mov	r0, r4
    4768:	9900      	ldr	r1, [sp, #0]
    476a:	f7ff ff33 	bl	45d4 <compare_int_unlock>
}
    476e:	4628      	mov	r0, r5
    4770:	b003      	add	sp, #12
    4772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    4776:	f06f 0515 	mvn.w	r5, #21
    477a:	e7f4      	b.n	4766 <compare_set+0xf2>
    477c:	00800001 	.word	0x00800001
    4780:	200001b0 	.word	0x200001b0
    4784:	40011000 	.word	0x40011000
    4788:	007ffffd 	.word	0x007ffffd
    478c:	20000480 	.word	0x20000480

00004790 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    4790:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
    4792:	4c1b      	ldr	r4, [pc, #108]	; (4800 <sys_clock_driver_init+0x70>)
    4794:	4b1b      	ldr	r3, [pc, #108]	; (4804 <sys_clock_driver_init+0x74>)
    4796:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    479a:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    479e:	4b1a      	ldr	r3, [pc, #104]	; (4808 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    47a0:	2500      	movs	r5, #0
    47a2:	f04f 30ff 	mov.w	r0, #4294967295
    47a6:	f04f 31ff 	mov.w	r1, #4294967295
    47aa:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    47ae:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    47b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    47b6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    47ba:	4b14      	ldr	r3, [pc, #80]	; (480c <sys_clock_driver_init+0x7c>)
    47bc:	2602      	movs	r6, #2
    47be:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    47c2:	2101      	movs	r1, #1
    47c4:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    47c8:	2011      	movs	r0, #17
    47ca:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    47ce:	462a      	mov	r2, r5
    47d0:	f7fe fa94 	bl	2cfc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    47d4:	2011      	movs	r0, #17
    47d6:	f7fe fa61 	bl	2c9c <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    47da:	4a0d      	ldr	r2, [pc, #52]	; (4810 <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    47dc:	2301      	movs	r3, #1
    47de:	60a3      	str	r3, [r4, #8]
    47e0:	6023      	str	r3, [r4, #0]
    47e2:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    47e4:	4b0b      	ldr	r3, [pc, #44]	; (4814 <sys_clock_driver_init+0x84>)
    47e6:	4a0c      	ldr	r2, [pc, #48]	; (4818 <sys_clock_driver_init+0x88>)
    47e8:	9300      	str	r3, [sp, #0]
    47ea:	9501      	str	r5, [sp, #4]
    47ec:	2300      	movs	r3, #0
    47ee:	4628      	mov	r0, r5
    47f0:	f7ff ff40 	bl	4674 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    47f4:	4630      	mov	r0, r6
    47f6:	f7ff f8b9 	bl	396c <z_nrf_clock_control_lf_on>

	return 0;
}
    47fa:	4628      	mov	r0, r5
    47fc:	b002      	add	sp, #8
    47fe:	bd70      	pop	{r4, r5, r6, pc}
    4800:	40011000 	.word	0x40011000
    4804:	000f0003 	.word	0x000f0003
    4808:	200001b0 	.word	0x200001b0
    480c:	e000e100 	.word	0xe000e100
    4810:	20000484 	.word	0x20000484
    4814:	0000458d 	.word	0x0000458d
    4818:	007fffff 	.word	0x007fffff

0000481c <rtc_nrf_isr>:
{
    481c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    4820:	4c2f      	ldr	r4, [pc, #188]	; (48e0 <rtc_nrf_isr+0xc4>)
    4822:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    4826:	0799      	lsls	r1, r3, #30
    4828:	d50b      	bpl.n	4842 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    482a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    482e:	b143      	cbz	r3, 4842 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    4830:	4a2c      	ldr	r2, [pc, #176]	; (48e4 <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4832:	2300      	movs	r3, #0
    4834:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    4838:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    483c:	6813      	ldr	r3, [r2, #0]
    483e:	3301      	adds	r3, #1
    4840:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    4842:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    4846:	03da      	lsls	r2, r3, #15
    4848:	d52a      	bpl.n	48a0 <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    484a:	f3bf 8f5b 	dmb	ish
    484e:	4b26      	ldr	r3, [pc, #152]	; (48e8 <rtc_nrf_isr+0xcc>)
    4850:	e853 2f00 	ldrex	r2, [r3]
    4854:	f022 0101 	bic.w	r1, r2, #1
    4858:	e843 1000 	strex	r0, r1, [r3]
    485c:	2800      	cmp	r0, #0
    485e:	d1f7      	bne.n	4850 <rtc_nrf_isr+0x34>
    4860:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    4864:	07d3      	lsls	r3, r2, #31
    4866:	d402      	bmi.n	486e <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4868:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    486c:	b1c3      	cbz	r3, 48a0 <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    486e:	2500      	movs	r5, #0
    4870:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    4874:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    4878:	f7ff feda 	bl	4630 <z_nrf_rtc_timer_read>
    487c:	f04f 0320 	mov.w	r3, #32
    4880:	f3ef 8211 	mrs	r2, BASEPRI
    4884:	f383 8812 	msr	BASEPRI_MAX, r3
    4888:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    488c:	4b17      	ldr	r3, [pc, #92]	; (48ec <rtc_nrf_isr+0xd0>)
    488e:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    4892:	42b0      	cmp	r0, r6
    4894:	41b9      	sbcs	r1, r7
    4896:	d206      	bcs.n	48a6 <rtc_nrf_isr+0x8a>
	__asm__ volatile(
    4898:	f382 8811 	msr	BASEPRI, r2
    489c:	f3bf 8f6f 	isb	sy
}
    48a0:	b003      	add	sp, #12
    48a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    48a6:	f04f 38ff 	mov.w	r8, #4294967295
    48aa:	f04f 39ff 	mov.w	r9, #4294967295
    48ae:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    48b2:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    48b6:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    48b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    48bc:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    48c0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    48c4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    48c8:	f382 8811 	msr	BASEPRI, r2
    48cc:	f3bf 8f6f 	isb	sy
		if (handler) {
    48d0:	2900      	cmp	r1, #0
    48d2:	d0e5      	beq.n	48a0 <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
    48d4:	9000      	str	r0, [sp, #0]
    48d6:	4632      	mov	r2, r6
    48d8:	463b      	mov	r3, r7
    48da:	4628      	mov	r0, r5
    48dc:	4788      	blx	r1
    48de:	e7df      	b.n	48a0 <rtc_nrf_isr+0x84>
    48e0:	40011000 	.word	0x40011000
    48e4:	20000488 	.word	0x20000488
    48e8:	20000480 	.word	0x20000480
    48ec:	200001b0 	.word	0x200001b0

000048f0 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    48f0:	1c43      	adds	r3, r0, #1
{
    48f2:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    48f4:	d022      	beq.n	493c <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    48f6:	2801      	cmp	r0, #1
    48f8:	dd22      	ble.n	4940 <sys_clock_set_timeout+0x50>
    48fa:	4a12      	ldr	r2, [pc, #72]	; (4944 <sys_clock_set_timeout+0x54>)
    48fc:	4b12      	ldr	r3, [pc, #72]	; (4948 <sys_clock_set_timeout+0x58>)
    48fe:	4290      	cmp	r0, r2
    4900:	bfd4      	ite	le
    4902:	4604      	movle	r4, r0
    4904:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    4906:	f7ff fe93 	bl	4630 <z_nrf_rtc_timer_read>
    490a:	4b10      	ldr	r3, [pc, #64]	; (494c <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    490c:	490e      	ldr	r1, [pc, #56]	; (4948 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    490e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4912:	1a80      	subs	r0, r0, r2
		cyc = 0;
    4914:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4918:	bf28      	it	cs
    491a:	2400      	movcs	r4, #0
	cyc += unannounced;
    491c:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    491e:	428c      	cmp	r4, r1
    4920:	bf28      	it	cs
    4922:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    4924:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4926:	490a      	ldr	r1, [pc, #40]	; (4950 <sys_clock_set_timeout+0x60>)
    4928:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    492a:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    492e:	9001      	str	r0, [sp, #4]
    4930:	f143 0300 	adc.w	r3, r3, #0
    4934:	f7ff fe9e 	bl	4674 <compare_set>
}
    4938:	b002      	add	sp, #8
    493a:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    493c:	4c02      	ldr	r4, [pc, #8]	; (4948 <sys_clock_set_timeout+0x58>)
    493e:	e7e2      	b.n	4906 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    4940:	2401      	movs	r4, #1
    4942:	e7e0      	b.n	4906 <sys_clock_set_timeout+0x16>
    4944:	007ffffe 	.word	0x007ffffe
    4948:	007fffff 	.word	0x007fffff
    494c:	200001c0 	.word	0x200001c0
    4950:	0000458d 	.word	0x0000458d

00004954 <sys_clock_elapsed>:
{
    4954:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    4956:	f7ff fe6b 	bl	4630 <z_nrf_rtc_timer_read>
    495a:	4b02      	ldr	r3, [pc, #8]	; (4964 <sys_clock_elapsed+0x10>)
    495c:	681b      	ldr	r3, [r3, #0]
}
    495e:	1ac0      	subs	r0, r0, r3
    4960:	bd08      	pop	{r3, pc}
    4962:	bf00      	nop
    4964:	200001c0 	.word	0x200001c0

00004968 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    4968:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    496a:	ab0b      	add	r3, sp, #44	; 0x2c
    496c:	9305      	str	r3, [sp, #20]
    496e:	9303      	str	r3, [sp, #12]
    4970:	4b05      	ldr	r3, [pc, #20]	; (4988 <z_log_msg_runtime_create.constprop.0+0x20>)
    4972:	9302      	str	r3, [sp, #8]
    4974:	2300      	movs	r3, #0
    4976:	e9cd 3300 	strd	r3, r3, [sp]
    497a:	2201      	movs	r2, #1
    497c:	4618      	mov	r0, r3
    497e:	f7fd fc27 	bl	21d0 <z_impl_z_log_msg_runtime_vcreate>
}
    4982:	b007      	add	sp, #28
    4984:	f85d fb04 	ldr.w	pc, [sp], #4
    4988:	00008a62 	.word	0x00008a62

0000498c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    498c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    498e:	f7fd fbab 	bl	20e8 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    4992:	2400      	movs	r4, #0
    4994:	4b06      	ldr	r3, [pc, #24]	; (49b0 <k_sys_fatal_error_handler+0x24>)
    4996:	9302      	str	r3, [sp, #8]
    4998:	4620      	mov	r0, r4
    499a:	e9cd 4400 	strd	r4, r4, [sp]
    499e:	4905      	ldr	r1, [pc, #20]	; (49b4 <k_sys_fatal_error_handler+0x28>)
    49a0:	4623      	mov	r3, r4
    49a2:	2201      	movs	r2, #1
    49a4:	f7ff ffe0 	bl	4968 <z_log_msg_runtime_create.constprop.0>
		sys_arch_reboot(0);
    49a8:	4620      	mov	r0, r4
    49aa:	f7fe feb9 	bl	3720 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    49ae:	bf00      	nop
    49b0:	00008a62 	.word	0x00008a62
    49b4:	00007e98 	.word	0x00007e98

000049b8 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    49b8:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    49bc:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    49c0:	2a06      	cmp	r2, #6
    49c2:	d109      	bne.n	49d8 <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    49c4:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    49c8:	f3c3 1303 	ubfx	r3, r3, #4, #4
    49cc:	3b03      	subs	r3, #3
    49ce:	2b04      	cmp	r3, #4
    49d0:	d802      	bhi.n	49d8 <nrf52_errata_16+0x20>
    49d2:	4a02      	ldr	r2, [pc, #8]	; (49dc <nrf52_errata_16+0x24>)
    49d4:	5cd0      	ldrb	r0, [r2, r3]
    49d6:	4770      	bx	lr
                switch(var2)
                {
                    case 0x03ul:
                        return true;
                    case 0x04ul:
                        return false;
    49d8:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
    49da:	4770      	bx	lr
    49dc:	00008a8e 	.word	0x00008a8e

000049e0 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    49e0:	4a02      	ldr	r2, [pc, #8]	; (49ec <nvmc_wait+0xc>)
    49e2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    49e6:	2b00      	cmp	r3, #0
    49e8:	d0fb      	beq.n	49e2 <nvmc_wait+0x2>
}
    49ea:	4770      	bx	lr
    49ec:	4001e000 	.word	0x4001e000

000049f0 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    49f0:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    49f2:	f002 ff2e 	bl	7852 <nrf52_errata_108>
    49f6:	b140      	cbz	r0, 4a0a <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    49f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    49fc:	4a8e      	ldr	r2, [pc, #568]	; (4c38 <SystemInit+0x248>)
    49fe:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
    4a02:	f3c3 2304 	ubfx	r3, r3, #8, #5
    4a06:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    4a0a:	f7ff ffd5 	bl	49b8 <nrf52_errata_16>
    4a0e:	b110      	cbz	r0, 4a16 <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    4a10:	4b8a      	ldr	r3, [pc, #552]	; (4c3c <SystemInit+0x24c>)
    4a12:	4a8b      	ldr	r2, [pc, #556]	; (4c40 <SystemInit+0x250>)
    4a14:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    4a16:	f002 ff1c 	bl	7852 <nrf52_errata_108>
    4a1a:	b148      	cbz	r0, 4a30 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    4a1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4a20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4a24:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    4a28:	f3c3 3342 	ubfx	r3, r3, #13, #3
    4a2c:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    4a30:	f7ff ffc2 	bl	49b8 <nrf52_errata_16>
    4a34:	b130      	cbz	r0, 4a44 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    4a36:	4a83      	ldr	r2, [pc, #524]	; (4c44 <SystemInit+0x254>)
    4a38:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    4a3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    4a40:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    4a44:	f002 ff05 	bl	7852 <nrf52_errata_108>
    4a48:	b140      	cbz	r0, 4a5c <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
    4a4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4a4e:	2200      	movs	r2, #0
    4a50:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    4a54:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    4a58:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    4a5c:	f7ff ffac 	bl	49b8 <nrf52_errata_16>
    4a60:	b120      	cbz	r0, 4a6c <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    4a62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4a66:	2203      	movs	r2, #3
    4a68:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    4a6c:	f7ff ffa4 	bl	49b8 <nrf52_errata_16>
    4a70:	b160      	cbz	r0, 4a8c <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    4a72:	4b75      	ldr	r3, [pc, #468]	; (4c48 <SystemInit+0x258>)
    4a74:	2205      	movs	r2, #5
    4a76:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    4a7a:	2201      	movs	r2, #1
    4a7c:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    4a80:	2200      	movs	r2, #0
    4a82:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    4a86:	223f      	movs	r2, #63	; 0x3f
    4a88:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    4a8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4a90:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    4a94:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    4a96:	bf09      	itett	eq
    4a98:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    4a9c:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    4aa0:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    4aa4:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
    4aa8:	bf08      	it	eq
    4aaa:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    4aae:	2a06      	cmp	r2, #6
    4ab0:	d14d      	bne.n	4b4e <SystemInit+0x15e>
            {
                switch(var2)
    4ab2:	3b03      	subs	r3, #3
    4ab4:	2b04      	cmp	r3, #4
    4ab6:	d803      	bhi.n	4ac0 <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    4ab8:	4a64      	ldr	r2, [pc, #400]	; (4c4c <SystemInit+0x25c>)
    4aba:	5cd3      	ldrb	r3, [r2, r3]
    4abc:	2b00      	cmp	r3, #0
    4abe:	d046      	beq.n	4b4e <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    4ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4ac4:	4b62      	ldr	r3, [pc, #392]	; (4c50 <SystemInit+0x260>)
    4ac6:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    4aca:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    4ace:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    4ad2:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    4ad6:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    4ada:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    4ade:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    4ae2:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    4ae6:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    4aea:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    4aee:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4af2:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    4af6:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    4afa:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    4afe:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    4b02:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    4b06:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    4b0a:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    4b0e:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    4b12:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    4b16:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    4b1a:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    4b1e:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    4b22:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    4b26:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    4b2a:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    4b2e:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    4b32:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    4b36:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    4b3a:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    4b3e:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    4b42:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    4b46:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    4b4a:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    4b4e:	f002 fe80 	bl	7852 <nrf52_errata_108>
    4b52:	b148      	cbz	r0, 4b68 <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    4b54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4b58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4b5c:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    4b60:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    4b64:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    4b68:	f002 fe73 	bl	7852 <nrf52_errata_108>
    4b6c:	b148      	cbz	r0, 4b82 <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    4b6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4b72:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    4b76:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    4b78:	bf44      	itt	mi
    4b7a:	f06f 0201 	mvnmi.w	r2, #1
    4b7e:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4b82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    4b86:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    4b8a:	2a06      	cmp	r2, #6
    4b8c:	d126      	bne.n	4bdc <SystemInit+0x1ec>
            {
                switch(var2)
    4b8e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    4b92:	3b03      	subs	r3, #3
    4b94:	2b04      	cmp	r3, #4
    4b96:	d802      	bhi.n	4b9e <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    4b98:	4a2e      	ldr	r2, [pc, #184]	; (4c54 <SystemInit+0x264>)
    4b9a:	5cd3      	ldrb	r3, [r2, r3]
    4b9c:	b163      	cbz	r3, 4bb8 <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    4b9e:	4a2e      	ldr	r2, [pc, #184]	; (4c58 <SystemInit+0x268>)
    4ba0:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
    4ba4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    4ba8:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4bac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    4bb0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    4bb4:	2b06      	cmp	r3, #6
    4bb6:	d111      	bne.n	4bdc <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4bb8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4bbc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    4bc0:	3b03      	subs	r3, #3
    4bc2:	2b04      	cmp	r3, #4
    4bc4:	d802      	bhi.n	4bcc <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    4bc6:	4a25      	ldr	r2, [pc, #148]	; (4c5c <SystemInit+0x26c>)
    4bc8:	5cd3      	ldrb	r3, [r2, r3]
    4bca:	b13b      	cbz	r3, 4bdc <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    4bcc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4bd0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    4bd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4bd8:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4bdc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4be0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4be4:	2a00      	cmp	r2, #0
    4be6:	db03      	blt.n	4bf0 <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    4be8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4bec:	2b00      	cmp	r3, #0
    4bee:	da22      	bge.n	4c36 <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4bf0:	491b      	ldr	r1, [pc, #108]	; (4c60 <SystemInit+0x270>)
    4bf2:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4bf4:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4bf8:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4bfc:	2415      	movs	r4, #21
    nvmc_wait();
    4bfe:	f7ff feef 	bl	49e0 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4c02:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    4c06:	f7ff feeb 	bl	49e0 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    4c0a:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    4c0e:	f7ff fee7 	bl	49e0 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4c12:	2300      	movs	r3, #0
    4c14:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    4c18:	f7ff fee2 	bl	49e0 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    4c1c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4c20:	4908      	ldr	r1, [pc, #32]	; (4c44 <SystemInit+0x254>)
    4c22:	4b10      	ldr	r3, [pc, #64]	; (4c64 <SystemInit+0x274>)
    4c24:	68ca      	ldr	r2, [r1, #12]
    4c26:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4c2a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4c2c:	60cb      	str	r3, [r1, #12]
    4c2e:	f3bf 8f4f 	dsb	sy
    __NOP();
    4c32:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4c34:	e7fd      	b.n	4c32 <SystemInit+0x242>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    4c36:	bd10      	pop	{r4, pc}
    4c38:	40013000 	.word	0x40013000
    4c3c:	4007c000 	.word	0x4007c000
    4c40:	baadf00d 	.word	0xbaadf00d
    4c44:	e000ed00 	.word	0xe000ed00
    4c48:	40005000 	.word	0x40005000
    4c4c:	00008a89 	.word	0x00008a89
    4c50:	4000c000 	.word	0x4000c000
    4c54:	00008a84 	.word	0x00008a84
    4c58:	40001000 	.word	0x40001000
    4c5c:	00008a7f 	.word	0x00008a7f
    4c60:	4001e000 	.word	0x4001e000
    4c64:	05fa0004 	.word	0x05fa0004

00004c68 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    4c68:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    4c6a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    4c6c:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4c6e:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    4c72:	fab2 f382 	clz	r3, r2
    4c76:	f1c3 031f 	rsb	r3, r3, #31
    4c7a:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    4c7c:	fa05 f403 	lsl.w	r4, r5, r3
    4c80:	ea22 0404 	bic.w	r4, r2, r4
    4c84:	e850 6f00 	ldrex	r6, [r0]
    4c88:	4296      	cmp	r6, r2
    4c8a:	d104      	bne.n	4c96 <nrfx_flag32_alloc+0x2e>
    4c8c:	e840 4c00 	strex	ip, r4, [r0]
    4c90:	f1bc 0f00 	cmp.w	ip, #0
    4c94:	d1f6      	bne.n	4c84 <nrfx_flag32_alloc+0x1c>
    4c96:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4c9a:	d1e7      	bne.n	4c6c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    4c9c:	4801      	ldr	r0, [pc, #4]	; (4ca4 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    4c9e:	700b      	strb	r3, [r1, #0]
}
    4ca0:	bd70      	pop	{r4, r5, r6, pc}
    4ca2:	bf00      	nop
    4ca4:	0bad0000 	.word	0x0bad0000

00004ca8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    4ca8:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    4caa:	6803      	ldr	r3, [r0, #0]
    4cac:	40cb      	lsrs	r3, r1
    4cae:	07db      	lsls	r3, r3, #31
    4cb0:	d414      	bmi.n	4cdc <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    4cb2:	2301      	movs	r3, #1
    4cb4:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    4cb6:	6802      	ldr	r2, [r0, #0]
    4cb8:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    4cbc:	ea43 0102 	orr.w	r1, r3, r2
    4cc0:	e850 4f00 	ldrex	r4, [r0]
    4cc4:	4294      	cmp	r4, r2
    4cc6:	d104      	bne.n	4cd2 <nrfx_flag32_free+0x2a>
    4cc8:	e840 1c00 	strex	ip, r1, [r0]
    4ccc:	f1bc 0f00 	cmp.w	ip, #0
    4cd0:	d1f6      	bne.n	4cc0 <nrfx_flag32_free+0x18>
    4cd2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4cd6:	d1ee      	bne.n	4cb6 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    4cd8:	4801      	ldr	r0, [pc, #4]	; (4ce0 <nrfx_flag32_free+0x38>)
}
    4cda:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4cdc:	4801      	ldr	r0, [pc, #4]	; (4ce4 <nrfx_flag32_free+0x3c>)
    4cde:	e7fc      	b.n	4cda <nrfx_flag32_free+0x32>
    4ce0:	0bad0000 	.word	0x0bad0000
    4ce4:	0bad0004 	.word	0x0bad0004

00004ce8 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    4ce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    4cea:	4604      	mov	r4, r0
    4cec:	b118      	cbz	r0, 4cf6 <clock_stop+0xe>
    4cee:	2801      	cmp	r0, #1
    4cf0:	d022      	beq.n	4d38 <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    4cf2:	b003      	add	sp, #12
    4cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    4cf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4cfa:	2202      	movs	r2, #2
    4cfc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4d00:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    4d04:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4d08:	2201      	movs	r2, #1
    4d0a:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4d0c:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    4d0e:	2301      	movs	r3, #1
    4d10:	f88d 3007 	strb.w	r3, [sp, #7]
    4d14:	f242 7510 	movw	r5, #10000	; 0x2710
    4d18:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    4d1c:	b1cc      	cbz	r4, 4d52 <clock_stop+0x6a>
    4d1e:	2c01      	cmp	r4, #1
    4d20:	d1e7      	bne.n	4cf2 <clock_stop+0xa>
            if (p_clk_src != NULL)
    4d22:	b3c7      	cbz	r7, 4d96 <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4d24:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4d28:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    4d2c:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4d2e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4d32:	03da      	lsls	r2, r3, #15
    4d34:	d521      	bpl.n	4d7a <clock_stop+0x92>
    4d36:	e016      	b.n	4d66 <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
    4d38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4d3c:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    4d3e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4d42:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4d46:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4d4a:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4d4c:	f10d 0707 	add.w	r7, sp, #7
    4d50:	e7dd      	b.n	4d0e <clock_stop+0x26>
            if (p_clk_src != NULL)
    4d52:	b1b7      	cbz	r7, 4d82 <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4d54:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4d58:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    4d5c:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4d5e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    4d62:	03d8      	lsls	r0, r3, #15
    4d64:	d5c5      	bpl.n	4cf2 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    4d66:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4d6a:	2801      	cmp	r0, #1
    4d6c:	d103      	bne.n	4d76 <clock_stop+0x8e>
    4d6e:	f002 fd7f 	bl	7870 <nrfx_busy_wait>
    4d72:	3d01      	subs	r5, #1
    4d74:	d1d2      	bne.n	4d1c <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    4d76:	2c01      	cmp	r4, #1
    4d78:	d1bb      	bne.n	4cf2 <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
    4d7a:	4b0c      	ldr	r3, [pc, #48]	; (4dac <clock_stop+0xc4>)
    4d7c:	2200      	movs	r2, #0
    4d7e:	715a      	strb	r2, [r3, #5]
    4d80:	e7b7      	b.n	4cf2 <clock_stop+0xa>
    4d82:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    4d86:	03d9      	lsls	r1, r3, #15
    4d88:	d5b3      	bpl.n	4cf2 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    4d8a:	2001      	movs	r0, #1
    4d8c:	f002 fd70 	bl	7870 <nrfx_busy_wait>
    4d90:	3d01      	subs	r5, #1
    4d92:	d1f6      	bne.n	4d82 <clock_stop+0x9a>
    4d94:	e7ad      	b.n	4cf2 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4d96:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4d9a:	03db      	lsls	r3, r3, #15
    4d9c:	d5ed      	bpl.n	4d7a <clock_stop+0x92>
    4d9e:	2001      	movs	r0, #1
    4da0:	f002 fd66 	bl	7870 <nrfx_busy_wait>
    4da4:	3d01      	subs	r5, #1
    4da6:	d1f6      	bne.n	4d96 <clock_stop+0xae>
    4da8:	e7e7      	b.n	4d7a <clock_stop+0x92>
    4daa:	bf00      	nop
    4dac:	2000048c 	.word	0x2000048c

00004db0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    4db0:	4b04      	ldr	r3, [pc, #16]	; (4dc4 <nrfx_clock_init+0x14>)
    4db2:	791a      	ldrb	r2, [r3, #4]
    4db4:	b922      	cbnz	r2, 4dc0 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    4db6:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    4db8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    4dba:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    4dbc:	4802      	ldr	r0, [pc, #8]	; (4dc8 <nrfx_clock_init+0x18>)
    4dbe:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    4dc0:	4802      	ldr	r0, [pc, #8]	; (4dcc <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4dc2:	4770      	bx	lr
    4dc4:	2000048c 	.word	0x2000048c
    4dc8:	0bad0000 	.word	0x0bad0000
    4dcc:	0bad000c 	.word	0x0bad000c

00004dd0 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    4dd0:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    4dd2:	b110      	cbz	r0, 4dda <nrfx_clock_start+0xa>
    4dd4:	2801      	cmp	r0, #1
    4dd6:	d043      	beq.n	4e60 <nrfx_clock_start+0x90>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    4dd8:	bd38      	pop	{r3, r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4dda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4dde:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4de2:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4de6:	03c8      	lsls	r0, r1, #15
    4de8:	d40b      	bmi.n	4e02 <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    4dea:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    4dee:	07d9      	lsls	r1, r3, #31
    4df0:	d50f      	bpl.n	4e12 <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4df2:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    4df6:	079b      	lsls	r3, r3, #30
    4df8:	d408      	bmi.n	4e0c <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
    4dfa:	2302      	movs	r3, #2
    4dfc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    4e00:	e7ea      	b.n	4dd8 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4e02:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    4e06:	2b01      	cmp	r3, #1
    4e08:	d004      	beq.n	4e14 <nrfx_clock_start+0x44>
    4e0a:	b113      	cbz	r3, 4e12 <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    4e0c:	2000      	movs	r0, #0
    4e0e:	f7ff ff6b 	bl	4ce8 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    4e12:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    4e14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4e18:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4e1c:	2300      	movs	r3, #0
    4e1e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    4e22:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    4e26:	2302      	movs	r3, #2
    4e28:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
    4e2c:	4a12      	ldr	r2, [pc, #72]	; (4e78 <nrfx_clock_start+0xa8>)
    4e2e:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    4e32:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
    4e36:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dwt_ctrl = DWT->CTRL;
    4e3a:	4b10      	ldr	r3, [pc, #64]	; (4e7c <nrfx_clock_start+0xac>)
    4e3c:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    4e3e:	f044 0101 	orr.w	r1, r4, #1
    4e42:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
    4e44:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    4e46:	6859      	ldr	r1, [r3, #4]
    4e48:	1b49      	subs	r1, r1, r5
    4e4a:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
    4e4e:	d3fa      	bcc.n	4e46 <nrfx_clock_start+0x76>
    DWT->CTRL = dwt_ctrl;
    4e50:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4e52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    CoreDebug->DEMCR = core_debug;
    4e56:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    4e5a:	2201      	movs	r2, #1
    4e5c:	609a      	str	r2, [r3, #8]
}
    4e5e:	e7bb      	b.n	4dd8 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4e60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4e64:	2200      	movs	r2, #0
    4e66:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4e6a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    4e6e:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4e72:	6018      	str	r0, [r3, #0]
}
    4e74:	e7b0      	b.n	4dd8 <nrfx_clock_start+0x8>
    4e76:	bf00      	nop
    4e78:	e000ed00 	.word	0xe000ed00
    4e7c:	e0001000 	.word	0xe0001000

00004e80 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    4e80:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4e82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4e86:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    4e8a:	b16a      	cbz	r2, 4ea8 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4e8c:	2200      	movs	r2, #0
    4e8e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4e92:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    4e96:	2201      	movs	r2, #1
    4e98:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    4e9c:	4b11      	ldr	r3, [pc, #68]	; (4ee4 <nrfx_power_clock_irq_handler+0x64>)
    4e9e:	7958      	ldrb	r0, [r3, #5]
    4ea0:	b910      	cbnz	r0, 4ea8 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    4ea2:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    4ea4:	681b      	ldr	r3, [r3, #0]
    4ea6:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4ea8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4eac:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    4eb0:	b172      	cbz	r2, 4ed0 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4eb2:	2200      	movs	r2, #0
    4eb4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4eb8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4ebc:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4ec0:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    4ec4:	0792      	lsls	r2, r2, #30
    4ec6:	d104      	bne.n	4ed2 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4ec8:	2201      	movs	r2, #1
    4eca:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4ece:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4ed0:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    4ed2:	2202      	movs	r2, #2
    4ed4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4ed8:	4b02      	ldr	r3, [pc, #8]	; (4ee4 <nrfx_power_clock_irq_handler+0x64>)
}
    4eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4ede:	681b      	ldr	r3, [r3, #0]
    4ee0:	2001      	movs	r0, #1
    4ee2:	4718      	bx	r3
    4ee4:	2000048c 	.word	0x2000048c

00004ee8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4ee8:	4b03      	ldr	r3, [pc, #12]	; (4ef8 <pin_in_use_by_te+0x10>)
    4eea:	3008      	adds	r0, #8
    4eec:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4ef0:	f3c0 1040 	ubfx	r0, r0, #5, #1
    4ef4:	4770      	bx	lr
    4ef6:	bf00      	nop
    4ef8:	20000110 	.word	0x20000110

00004efc <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    4efc:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4efe:	f100 0308 	add.w	r3, r0, #8
    4f02:	4c0c      	ldr	r4, [pc, #48]	; (4f34 <call_handler+0x38>)
    4f04:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    4f08:	05da      	lsls	r2, r3, #23
{
    4f0a:	4605      	mov	r5, r0
    4f0c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4f0e:	d507      	bpl.n	4f20 <call_handler+0x24>
    4f10:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    4f14:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4f18:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    4f1c:	6852      	ldr	r2, [r2, #4]
    4f1e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    4f20:	68a3      	ldr	r3, [r4, #8]
    4f22:	b12b      	cbz	r3, 4f30 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4f24:	68e2      	ldr	r2, [r4, #12]
    4f26:	4631      	mov	r1, r6
    4f28:	4628      	mov	r0, r5
    }
}
    4f2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4f2e:	4718      	bx	r3
}
    4f30:	bd70      	pop	{r4, r5, r6, pc}
    4f32:	bf00      	nop
    4f34:	20000110 	.word	0x20000110

00004f38 <release_handler>:
{
    4f38:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4f3a:	4a12      	ldr	r2, [pc, #72]	; (4f84 <release_handler+0x4c>)
    4f3c:	3008      	adds	r0, #8
    4f3e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    4f42:	05d9      	lsls	r1, r3, #23
    4f44:	d51b      	bpl.n	4f7e <release_handler+0x46>
    4f46:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    4f4a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4f4e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4f52:	f102 040e 	add.w	r4, r2, #14
    4f56:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4f58:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    4f5c:	f413 7f80 	tst.w	r3, #256	; 0x100
    4f60:	d003      	beq.n	4f6a <release_handler+0x32>
    4f62:	f3c3 2343 	ubfx	r3, r3, #9, #4
    4f66:	4299      	cmp	r1, r3
    4f68:	d009      	beq.n	4f7e <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4f6a:	3001      	adds	r0, #1
    4f6c:	2820      	cmp	r0, #32
    4f6e:	d1f3      	bne.n	4f58 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    4f70:	2300      	movs	r3, #0
    4f72:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4f76:	4804      	ldr	r0, [pc, #16]	; (4f88 <release_handler+0x50>)
}
    4f78:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4f7a:	f7ff be95 	b.w	4ca8 <nrfx_flag32_free>
}
    4f7e:	bc10      	pop	{r4}
    4f80:	4770      	bx	lr
    4f82:	bf00      	nop
    4f84:	20000110 	.word	0x20000110
    4f88:	20000164 	.word	0x20000164

00004f8c <pin_handler_trigger_uninit>:
{
    4f8c:	b538      	push	{r3, r4, r5, lr}
    4f8e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4f90:	f7ff ffaa 	bl	4ee8 <pin_in_use_by_te>
    4f94:	4c09      	ldr	r4, [pc, #36]	; (4fbc <pin_handler_trigger_uninit+0x30>)
    4f96:	f102 0508 	add.w	r5, r2, #8
    4f9a:	b140      	cbz	r0, 4fae <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4f9c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4fa0:	4907      	ldr	r1, [pc, #28]	; (4fc0 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    4fa2:	0b5b      	lsrs	r3, r3, #13
    4fa4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    4fa8:	2000      	movs	r0, #0
    4faa:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    4fae:	4610      	mov	r0, r2
    4fb0:	f7ff ffc2 	bl	4f38 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    4fb4:	2300      	movs	r3, #0
    4fb6:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    4fba:	bd38      	pop	{r3, r4, r5, pc}
    4fbc:	20000110 	.word	0x20000110
    4fc0:	40006000 	.word	0x40006000

00004fc4 <nrfx_gpiote_input_configure>:
{
    4fc4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4fc8:	4604      	mov	r4, r0
    4fca:	461d      	mov	r5, r3
    if (p_input_config)
    4fcc:	b309      	cbz	r1, 5012 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4fce:	4f4f      	ldr	r7, [pc, #316]	; (510c <nrfx_gpiote_input_configure+0x148>)
    4fd0:	f100 0808 	add.w	r8, r0, #8
    4fd4:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    4fd8:	07b3      	lsls	r3, r6, #30
    4fda:	d506      	bpl.n	4fea <nrfx_gpiote_input_configure+0x26>
    4fdc:	f7ff ff84 	bl	4ee8 <pin_in_use_by_te>
    4fe0:	b118      	cbz	r0, 4fea <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    4fe2:	484b      	ldr	r0, [pc, #300]	; (5110 <nrfx_gpiote_input_configure+0x14c>)
}
    4fe4:	b002      	add	sp, #8
    4fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
    4fea:	f004 031f 	and.w	r3, r4, #31
    4fee:	009b      	lsls	r3, r3, #2
    4ff0:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4ff4:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4ff6:	f8d3 0700 	ldr.w	r0, [r3, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    4ffa:	f026 0602 	bic.w	r6, r6, #2
    cnf &= ~to_update;
    4ffe:	f020 000f 	bic.w	r0, r0, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    5002:	f046 0601 	orr.w	r6, r6, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5006:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
    500a:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    500e:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
    if (p_trigger_config)
    5012:	b19a      	cbz	r2, 503c <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5014:	4b3d      	ldr	r3, [pc, #244]	; (510c <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    5016:	7817      	ldrb	r7, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    5018:	6850      	ldr	r0, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    501a:	f104 0608 	add.w	r6, r4, #8
    501e:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
    5022:	f011 0f02 	tst.w	r1, #2
    5026:	d00d      	beq.n	5044 <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
    5028:	2800      	cmp	r0, #0
    502a:	d1da      	bne.n	4fe2 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    502c:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    5030:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    5034:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
    5038:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
    if (p_handler_config)
    503c:	2d00      	cmp	r5, #0
    503e:	d13b      	bne.n	50b8 <nrfx_gpiote_input_configure+0xf4>
        err = NRFX_SUCCESS;
    5040:	4834      	ldr	r0, [pc, #208]	; (5114 <nrfx_gpiote_input_configure+0x150>)
    5042:	e7cf      	b.n	4fe4 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    5044:	f021 0120 	bic.w	r1, r1, #32
    5048:	04c9      	lsls	r1, r1, #19
    504a:	0cc9      	lsrs	r1, r1, #19
    504c:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
    5050:	2800      	cmp	r0, #0
    5052:	d0eb      	beq.n	502c <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    5054:	2f03      	cmp	r7, #3
    5056:	d8c4      	bhi.n	4fe2 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    5058:	6852      	ldr	r2, [r2, #4]
    505a:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    505e:	b92f      	cbnz	r7, 506c <nrfx_gpiote_input_configure+0xa8>
    5060:	4a2d      	ldr	r2, [pc, #180]	; (5118 <nrfx_gpiote_input_configure+0x154>)
    5062:	f50c 7ca2 	add.w	ip, ip, #324	; 0x144
    5066:	f842 702c 	str.w	r7, [r2, ip, lsl #2]
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
#endif
}
    506a:	e7df      	b.n	502c <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    506c:	ea4f 028c 	mov.w	r2, ip, lsl #2
    5070:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5074:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5078:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    507c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    5080:	f020 0003 	bic.w	r0, r0, #3
    5084:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    5088:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    508c:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    5090:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    5094:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5098:	0220      	lsls	r0, r4, #8
    509a:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    509e:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
    50a2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    50a6:	ea40 000e 	orr.w	r0, r0, lr
    50aa:	f041 0120 	orr.w	r1, r1, #32
    50ae:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
    50b2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    50b6:	e7b9      	b.n	502c <nrfx_gpiote_input_configure+0x68>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    50b8:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    50bc:	4620      	mov	r0, r4
    50be:	f7ff ff3b 	bl	4f38 <release_handler>
    if (!handler)
    50c2:	2e00      	cmp	r6, #0
    50c4:	d0bc      	beq.n	5040 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    50c6:	4d11      	ldr	r5, [pc, #68]	; (510c <nrfx_gpiote_input_configure+0x148>)
    50c8:	e9d5 2300 	ldrd	r2, r3, [r5]
    50cc:	4296      	cmp	r6, r2
    50ce:	d101      	bne.n	50d4 <nrfx_gpiote_input_configure+0x110>
    50d0:	429f      	cmp	r7, r3
    50d2:	d019      	beq.n	5108 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    50d4:	4811      	ldr	r0, [pc, #68]	; (511c <nrfx_gpiote_input_configure+0x158>)
    50d6:	f10d 0107 	add.w	r1, sp, #7
    50da:	f7ff fdc5 	bl	4c68 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    50de:	4b0d      	ldr	r3, [pc, #52]	; (5114 <nrfx_gpiote_input_configure+0x150>)
    50e0:	4298      	cmp	r0, r3
    50e2:	f47f af7f 	bne.w	4fe4 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    50e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
    50ea:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    50ee:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    50f2:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    50f4:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    50f6:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    50fa:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    50fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5102:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    5106:	e79b      	b.n	5040 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5108:	2200      	movs	r2, #0
    510a:	e7ee      	b.n	50ea <nrfx_gpiote_input_configure+0x126>
    510c:	20000110 	.word	0x20000110
    5110:	0bad0004 	.word	0x0bad0004
    5114:	0bad0000 	.word	0x0bad0000
    5118:	40006000 	.word	0x40006000
    511c:	20000164 	.word	0x20000164

00005120 <nrfx_gpiote_output_configure>:
{
    5120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5122:	4604      	mov	r4, r0
    if (p_config)
    5124:	b389      	cbz	r1, 518a <nrfx_gpiote_output_configure+0x6a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5126:	4e3a      	ldr	r6, [pc, #232]	; (5210 <nrfx_gpiote_output_configure+0xf0>)
    5128:	f100 0708 	add.w	r7, r0, #8
    512c:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    5130:	07ab      	lsls	r3, r5, #30
    5132:	d404      	bmi.n	513e <nrfx_gpiote_output_configure+0x1e>
    5134:	f7ff fed8 	bl	4ee8 <pin_in_use_by_te>
    5138:	b108      	cbz	r0, 513e <nrfx_gpiote_output_configure+0x1e>
{
    513a:	4836      	ldr	r0, [pc, #216]	; (5214 <nrfx_gpiote_output_configure+0xf4>)
}
    513c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    513e:	f015 0f1c 	tst.w	r5, #28
    5142:	784b      	ldrb	r3, [r1, #1]
    5144:	d124      	bne.n	5190 <nrfx_gpiote_output_configure+0x70>
    *p_pin = pin_number & 0x1F;
    5146:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    514a:	f500 7ee0 	add.w	lr, r0, #448	; 0x1c0
    514e:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    5152:	005b      	lsls	r3, r3, #1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5154:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    5158:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    515c:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    515e:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
    5162:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    5166:	f02c 0c07 	bic.w	ip, ip, #7
    516a:	ea43 030c 	orr.w	r3, r3, ip
    516e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    5172:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    5176:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    517a:	f043 0301 	orr.w	r3, r3, #1
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    517e:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    5182:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    5186:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    518a:	b922      	cbnz	r2, 5196 <nrfx_gpiote_output_configure+0x76>
    return NRFX_SUCCESS;
    518c:	4822      	ldr	r0, [pc, #136]	; (5218 <nrfx_gpiote_output_configure+0xf8>)
    518e:	e7d5      	b.n	513c <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    5190:	2b01      	cmp	r3, #1
    5192:	d1d8      	bne.n	5146 <nrfx_gpiote_output_configure+0x26>
    5194:	e7d1      	b.n	513a <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5196:	4e1e      	ldr	r6, [pc, #120]	; (5210 <nrfx_gpiote_output_configure+0xf0>)
    5198:	f104 0708 	add.w	r7, r4, #8
    519c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    51a0:	0783      	lsls	r3, r0, #30
    51a2:	d5ca      	bpl.n	513a <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    51a4:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    51a8:	4661      	mov	r1, ip
    51aa:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    51ac:	f020 0020 	bic.w	r0, r0, #32
    51b0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    51b4:	04c0      	lsls	r0, r0, #19
    51b6:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    51ba:	0cc0      	lsrs	r0, r0, #19
    51bc:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    51c0:	2300      	movs	r3, #0
    51c2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    51c6:	7855      	ldrb	r5, [r2, #1]
    51c8:	2d00      	cmp	r5, #0
    51ca:	d0df      	beq.n	518c <nrfx_gpiote_output_configure+0x6c>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    51cc:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    51d0:	7892      	ldrb	r2, [r2, #2]
    51d2:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    51d6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    51da:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    51de:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    51e2:	0223      	lsls	r3, r4, #8
    51e4:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    51e8:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    51ea:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    51ee:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    51f2:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    51f4:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    51f6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    51fa:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    51fe:	4313      	orrs	r3, r2
    5200:	f040 0020 	orr.w	r0, r0, #32
    5204:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    5208:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    520c:	e7be      	b.n	518c <nrfx_gpiote_output_configure+0x6c>
    520e:	bf00      	nop
    5210:	20000110 	.word	0x20000110
    5214:	0bad0004 	.word	0x0bad0004
    5218:	0bad0000 	.word	0x0bad0000

0000521c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    521c:	4b01      	ldr	r3, [pc, #4]	; (5224 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    521e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    5222:	4770      	bx	lr
    5224:	20000110 	.word	0x20000110

00005228 <nrfx_gpiote_channel_get>:
{
    5228:	b508      	push	{r3, lr}
    522a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    522c:	f7ff fe5c 	bl	4ee8 <pin_in_use_by_te>
    5230:	b138      	cbz	r0, 5242 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5232:	4b05      	ldr	r3, [pc, #20]	; (5248 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    5234:	4805      	ldr	r0, [pc, #20]	; (524c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5236:	3208      	adds	r2, #8
    5238:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    523c:	0b5b      	lsrs	r3, r3, #13
    523e:	700b      	strb	r3, [r1, #0]
}
    5240:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5242:	4803      	ldr	r0, [pc, #12]	; (5250 <nrfx_gpiote_channel_get+0x28>)
    5244:	e7fc      	b.n	5240 <nrfx_gpiote_channel_get+0x18>
    5246:	bf00      	nop
    5248:	20000110 	.word	0x20000110
    524c:	0bad0000 	.word	0x0bad0000
    5250:	0bad0004 	.word	0x0bad0004

00005254 <nrfx_gpiote_init>:
{
    5254:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    5256:	4c0f      	ldr	r4, [pc, #60]	; (5294 <nrfx_gpiote_init+0x40>)
    5258:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    525c:	b9bd      	cbnz	r5, 528e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    525e:	2240      	movs	r2, #64	; 0x40
    5260:	4629      	mov	r1, r5
    5262:	f104 0010 	add.w	r0, r4, #16
    5266:	f002 f875 	bl	7354 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    526a:	2006      	movs	r0, #6
    526c:	f7fd fd16 	bl	2c9c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5270:	4b09      	ldr	r3, [pc, #36]	; (5298 <nrfx_gpiote_init+0x44>)
    return err_code;
    5272:	480a      	ldr	r0, [pc, #40]	; (529c <nrfx_gpiote_init+0x48>)
    5274:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    5278:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    527c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5280:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    5284:	2301      	movs	r3, #1
    5286:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    528a:	6563      	str	r3, [r4, #84]	; 0x54
}
    528c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    528e:	4804      	ldr	r0, [pc, #16]	; (52a0 <nrfx_gpiote_init+0x4c>)
    5290:	e7fc      	b.n	528c <nrfx_gpiote_init+0x38>
    5292:	bf00      	nop
    5294:	20000110 	.word	0x20000110
    5298:	40006000 	.word	0x40006000
    529c:	0bad0000 	.word	0x0bad0000
    52a0:	0bad0005 	.word	0x0bad0005

000052a4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    52a4:	4b03      	ldr	r3, [pc, #12]	; (52b4 <nrfx_gpiote_is_init+0x10>)
    52a6:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    52aa:	3800      	subs	r0, #0
    52ac:	bf18      	it	ne
    52ae:	2001      	movne	r0, #1
    52b0:	4770      	bx	lr
    52b2:	bf00      	nop
    52b4:	20000110 	.word	0x20000110

000052b8 <nrfx_gpiote_channel_free>:
{
    52b8:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    52ba:	4801      	ldr	r0, [pc, #4]	; (52c0 <nrfx_gpiote_channel_free+0x8>)
    52bc:	f7ff bcf4 	b.w	4ca8 <nrfx_flag32_free>
    52c0:	20000160 	.word	0x20000160

000052c4 <nrfx_gpiote_channel_alloc>:
{
    52c4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    52c6:	4801      	ldr	r0, [pc, #4]	; (52cc <nrfx_gpiote_channel_alloc+0x8>)
    52c8:	f7ff bcce 	b.w	4c68 <nrfx_flag32_alloc>
    52cc:	20000160 	.word	0x20000160

000052d0 <nrfx_gpiote_trigger_enable>:
{
    52d0:	b510      	push	{r4, lr}
    52d2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    52d4:	f7ff fe08 	bl	4ee8 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    52d8:	f102 0408 	add.w	r4, r2, #8
    52dc:	4b1c      	ldr	r3, [pc, #112]	; (5350 <nrfx_gpiote_trigger_enable+0x80>)
    52de:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    52e2:	b1e0      	cbz	r0, 531e <nrfx_gpiote_trigger_enable+0x4e>
    52e4:	f013 0402 	ands.w	r4, r3, #2
    52e8:	d119      	bne.n	531e <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    52ea:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    52ec:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    52ee:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    52f2:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    52f6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    52fa:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    52fe:	6004      	str	r4, [r0, #0]
    5300:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    5302:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    5306:	f040 0001 	orr.w	r0, r0, #1
    530a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    530e:	b129      	cbz	r1, 531c <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    5310:	2201      	movs	r2, #1
    5312:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    5316:	4a0f      	ldr	r2, [pc, #60]	; (5354 <nrfx_gpiote_trigger_enable+0x84>)
    5318:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    531c:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    531e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    5322:	2b04      	cmp	r3, #4
    5324:	d010      	beq.n	5348 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    5326:	2b05      	cmp	r3, #5
    5328:	d010      	beq.n	534c <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
    532a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    532e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
    5332:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5336:	40d9      	lsrs	r1, r3
    5338:	f001 0101 	and.w	r1, r1, #1
    533c:	3102      	adds	r1, #2
}
    533e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    5342:	4610      	mov	r0, r2
    5344:	f002 baa5 	b.w	7892 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    5348:	2103      	movs	r1, #3
    534a:	e7f8      	b.n	533e <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    534c:	2102      	movs	r1, #2
    534e:	e7f6      	b.n	533e <nrfx_gpiote_trigger_enable+0x6e>
    5350:	20000110 	.word	0x20000110
    5354:	40006000 	.word	0x40006000

00005358 <nrfx_gpiote_trigger_disable>:
{
    5358:	b508      	push	{r3, lr}
    535a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    535c:	f7ff fdc4 	bl	4ee8 <pin_in_use_by_te>
    5360:	b1c0      	cbz	r0, 5394 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5362:	f102 0108 	add.w	r1, r2, #8
    5366:	4b0e      	ldr	r3, [pc, #56]	; (53a0 <nrfx_gpiote_trigger_disable+0x48>)
    5368:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    536c:	0799      	lsls	r1, r3, #30
    536e:	d411      	bmi.n	5394 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5370:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    5372:	2201      	movs	r2, #1
    5374:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    5376:	009b      	lsls	r3, r3, #2
    5378:	490a      	ldr	r1, [pc, #40]	; (53a4 <nrfx_gpiote_trigger_disable+0x4c>)
    537a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    537e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    5382:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5386:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    538a:	f022 0203 	bic.w	r2, r2, #3
    538e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    5392:	bd08      	pop	{r3, pc}
    5394:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5398:	2100      	movs	r1, #0
    539a:	4610      	mov	r0, r2
    539c:	f002 ba79 	b.w	7892 <nrf_gpio_cfg_sense_set>
    53a0:	20000110 	.word	0x20000110
    53a4:	40006000 	.word	0x40006000

000053a8 <nrfx_gpiote_pin_uninit>:
{
    53a8:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    53aa:	4b0d      	ldr	r3, [pc, #52]	; (53e0 <nrfx_gpiote_pin_uninit+0x38>)
    53ac:	f100 0208 	add.w	r2, r0, #8
{
    53b0:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    53b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    53b6:	07db      	lsls	r3, r3, #31
    53b8:	d50f      	bpl.n	53da <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
    53ba:	f7ff ffcd 	bl	5358 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    53be:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
    53c0:	f004 041f 	and.w	r4, r4, #31
    53c4:	f7ff fde2 	bl	4f8c <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    53c8:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    53cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    53d0:	2202      	movs	r2, #2
    53d2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    53d6:	4803      	ldr	r0, [pc, #12]	; (53e4 <nrfx_gpiote_pin_uninit+0x3c>)
}
    53d8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    53da:	4803      	ldr	r0, [pc, #12]	; (53e8 <nrfx_gpiote_pin_uninit+0x40>)
    53dc:	e7fc      	b.n	53d8 <nrfx_gpiote_pin_uninit+0x30>
    53de:	bf00      	nop
    53e0:	20000110 	.word	0x20000110
    53e4:	0bad0000 	.word	0x0bad0000
    53e8:	0bad0004 	.word	0x0bad0004

000053ec <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    53ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    53f0:	4b4f      	ldr	r3, [pc, #316]	; (5530 <nrfx_gpiote_irq_handler+0x144>)
    return p_reg->INTENSET & mask;
    53f2:	4850      	ldr	r0, [pc, #320]	; (5534 <nrfx_gpiote_irq_handler+0x148>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    53f4:	4950      	ldr	r1, [pc, #320]	; (5538 <nrfx_gpiote_irq_handler+0x14c>)
    uint32_t status = 0;
    53f6:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    53f8:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    53fa:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    53fc:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    53fe:	b136      	cbz	r6, 540e <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
    5400:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    5404:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5406:	bf1e      	ittt	ne
    5408:	601c      	strne	r4, [r3, #0]
    540a:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    540c:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    540e:	3304      	adds	r3, #4
    5410:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    5412:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5416:	d1f1      	bne.n	53fc <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5418:	4b46      	ldr	r3, [pc, #280]	; (5534 <nrfx_gpiote_irq_handler+0x148>)
    541a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    541e:	b1bb      	cbz	r3, 5450 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
    5420:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    5424:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    5428:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    542a:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    542e:	af01      	add	r7, sp, #4
    5430:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
    5434:	9c01      	ldr	r4, [sp, #4]
    5436:	b98c      	cbnz	r4, 545c <nrfx_gpiote_irq_handler+0x70>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5438:	4b3e      	ldr	r3, [pc, #248]	; (5534 <nrfx_gpiote_irq_handler+0x148>)
    543a:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    543e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    5442:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    5446:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    5448:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
    544c:	2b00      	cmp	r3, #0
    544e:	d1ee      	bne.n	542e <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    5450:	2401      	movs	r4, #1
    while (mask)
    5452:	2d00      	cmp	r5, #0
    5454:	d153      	bne.n	54fe <nrfx_gpiote_irq_handler+0x112>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    5456:	b003      	add	sp, #12
    5458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    545c:	fa94 f4a4 	rbit	r4, r4
    5460:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5464:	4a35      	ldr	r2, [pc, #212]	; (553c <nrfx_gpiote_irq_handler+0x150>)
    5466:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    546a:	08e0      	lsrs	r0, r4, #3
    546c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    5470:	5c3b      	ldrb	r3, [r7, r0]
    bit = BITMASK_RELBIT_GET(bit);
    5472:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    5476:	fa08 f202 	lsl.w	r2, r8, r2
    547a:	ea23 0302 	bic.w	r3, r3, r2
    547e:	543b      	strb	r3, [r7, r0]
    5480:	00a3      	lsls	r3, r4, #2
    5482:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
    5486:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    548a:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
    548e:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5490:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    5492:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    5496:	d518      	bpl.n	54ca <nrfx_gpiote_irq_handler+0xde>
        call_handler(pin, trigger);
    5498:	4659      	mov	r1, fp
    549a:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    549c:	fa5f fa82 	uxtb.w	sl, r2
    54a0:	f7ff fd2c 	bl	4efc <call_handler>
    54a4:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
    54a8:	f3c3 4301 	ubfx	r3, r3, #16, #2
    54ac:	459a      	cmp	sl, r3
    54ae:	d107      	bne.n	54c0 <nrfx_gpiote_irq_handler+0xd4>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    54b0:	2100      	movs	r1, #0
    54b2:	4620      	mov	r0, r4
    54b4:	f002 f9ed 	bl	7892 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    54b8:	4651      	mov	r1, sl
    54ba:	4620      	mov	r0, r4
    54bc:	f002 f9e9 	bl	7892 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    54c0:	fa08 f404 	lsl.w	r4, r8, r4
    54c4:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
    54c8:	e7b4      	b.n	5434 <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    54ca:	2a02      	cmp	r2, #2
    54cc:	d10c      	bne.n	54e8 <nrfx_gpiote_irq_handler+0xfc>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    54ce:	2103      	movs	r1, #3
    54d0:	4620      	mov	r0, r4
    54d2:	f002 f9de 	bl	7892 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    54d6:	f00a 0305 	and.w	r3, sl, #5
    54da:	2b01      	cmp	r3, #1
    54dc:	d1f0      	bne.n	54c0 <nrfx_gpiote_irq_handler+0xd4>
            call_handler(pin, trigger);
    54de:	4659      	mov	r1, fp
    54e0:	4620      	mov	r0, r4
    54e2:	f7ff fd0b 	bl	4efc <call_handler>
    54e6:	e7eb      	b.n	54c0 <nrfx_gpiote_irq_handler+0xd4>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    54e8:	2102      	movs	r1, #2
    54ea:	4620      	mov	r0, r4
    54ec:	f002 f9d1 	bl	7892 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    54f0:	f1ba 0f03 	cmp.w	sl, #3
    54f4:	d0f3      	beq.n	54de <nrfx_gpiote_irq_handler+0xf2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    54f6:	2a03      	cmp	r2, #3
    54f8:	d1e2      	bne.n	54c0 <nrfx_gpiote_irq_handler+0xd4>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    54fa:	458a      	cmp	sl, r1
    54fc:	e7ee      	b.n	54dc <nrfx_gpiote_irq_handler+0xf0>
        uint32_t ch = NRF_CTZ(mask);
    54fe:	fa95 f3a5 	rbit	r3, r5
    5502:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    5506:	fa04 f203 	lsl.w	r2, r4, r3
    550a:	009b      	lsls	r3, r3, #2
    550c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5510:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    5514:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    5518:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    551c:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    5520:	f3c0 2004 	ubfx	r0, r0, #8, #5
    5524:	f3c1 4101 	ubfx	r1, r1, #16, #2
    5528:	f7ff fce8 	bl	4efc <call_handler>
    552c:	e791      	b.n	5452 <nrfx_gpiote_irq_handler+0x66>
    552e:	bf00      	nop
    5530:	40006100 	.word	0x40006100
    5534:	40006000 	.word	0x40006000
    5538:	40006120 	.word	0x40006120
    553c:	20000110 	.word	0x20000110

00005540 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
    5540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    5542:	7906      	ldrb	r6, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    5544:	4c52      	ldr	r4, [pc, #328]	; (5690 <nrfx_spi_init+0x150>)
    5546:	f04f 0c28 	mov.w	ip, #40	; 0x28
    554a:	fb0c fc06 	mul.w	ip, ip, r6
    554e:	eb04 070c 	add.w	r7, r4, ip
    5552:	7f3d      	ldrb	r5, [r7, #28]
    5554:	2d00      	cmp	r5, #0
    5556:	f040 8098 	bne.w	568a <nrfx_spi_init+0x14a>
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    555a:	6805      	ldr	r5, [r0, #0]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    555c:	f844 200c 	str.w	r2, [r4, ip]
    p_cb->p_context = p_context;
    5560:	607b      	str	r3, [r7, #4]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    5562:	7bcb      	ldrb	r3, [r1, #15]
    5564:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    p_cb->ss_pin = p_config->ss_pin;
    5568:	78cb      	ldrb	r3, [r1, #3]
    556a:	77bb      	strb	r3, [r7, #30]
    p_cb->orc = p_config->orc;
    556c:	794b      	ldrb	r3, [r1, #5]
    556e:	77fb      	strb	r3, [r7, #31]
    if (!p_config->skip_gpio_cfg)
    5570:	7bcb      	ldrb	r3, [r1, #15]
    5572:	2b00      	cmp	r3, #0
    5574:	d149      	bne.n	560a <nrfx_spi_init+0xca>
    *p_pin = pin_number & 0x1F;
    5576:	780f      	ldrb	r7, [r1, #0]
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5578:	2301      	movs	r3, #1
    *p_pin = pin_number & 0x1F;
    557a:	f007 071f 	and.w	r7, r7, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    557e:	40bb      	lsls	r3, r7
    if (value == 0)
    5580:	7b0f      	ldrb	r7, [r1, #12]
    5582:	2f01      	cmp	r7, #1
    5584:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    5588:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
    p_reg->OUTCLR = clr_mask;
    558c:	bf94      	ite	ls
    558e:	f8c7 350c 	strls.w	r3, [r7, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
    5592:	f8c7 3508 	strhi.w	r3, [r7, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    5596:	780b      	ldrb	r3, [r1, #0]
    5598:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    559c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    55a0:	2701      	movs	r7, #1
    55a2:	f84c 7023 	str.w	r7, [ip, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    55a6:	784b      	ldrb	r3, [r1, #1]
    55a8:	2bff      	cmp	r3, #255	; 0xff
    55aa:	d00c      	beq.n	55c6 <nrfx_spi_init+0x86>
    *p_pin = pin_number & 0x1F;
    55ac:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    55b0:	409f      	lsls	r7, r3
    p_reg->OUTCLR = clr_mask;
    55b2:	f8cc 750c 	str.w	r7, [ip, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    55b6:	784b      	ldrb	r3, [r1, #1]
    55b8:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    55bc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    55c0:	2703      	movs	r7, #3
    55c2:	f84c 7023 	str.w	r7, [ip, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    55c6:	788b      	ldrb	r3, [r1, #2]
    55c8:	2bff      	cmp	r3, #255	; 0xff
    55ca:	d009      	beq.n	55e0 <nrfx_spi_init+0xa0>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    55cc:	7b8f      	ldrb	r7, [r1, #14]
    *p_pin = pin_number & 0x1F;
    55ce:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    55d2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    55d6:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    55da:	00bf      	lsls	r7, r7, #2
    reg->PIN_CNF[pin_number] = cnf;
    55dc:	f84c 7023 	str.w	r7, [ip, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
    55e0:	78cb      	ldrb	r3, [r1, #3]
    55e2:	2bff      	cmp	r3, #255	; 0xff
    55e4:	d011      	beq.n	560a <nrfx_spi_init+0xca>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    55e6:	2701      	movs	r7, #1
    *p_pin = pin_number & 0x1F;
    55e8:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    55ec:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTSET = set_mask;
    55f0:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    55f4:	f04f 0c03 	mov.w	ip, #3
    p_reg->OUTSET = set_mask;
    55f8:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    55fc:	78cb      	ldrb	r3, [r1, #3]
    55fe:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    5602:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5606:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    560a:	7c0b      	ldrb	r3, [r1, #16]
    560c:	b99b      	cbnz	r3, 5636 <nrfx_spi_init+0xf6>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    560e:	784b      	ldrb	r3, [r1, #1]
        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
    5610:	f891 c000 	ldrb.w	ip, [r1]
                            : NRF_SPI_PIN_NOT_CONNECTED;
    5614:	2bff      	cmp	r3, #255	; 0xff
    5616:	bf18      	it	ne
    5618:	461f      	movne	r7, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    561a:	788b      	ldrb	r3, [r1, #2]
                                        uint32_t       miso_pin)
{
#if defined(SPI_PSEL_SCK_CONNECT_Pos)
    p_reg->PSEL.SCK = sck_pin;
#else
    p_reg->PSELSCK  = sck_pin;
    561c:	f8c5 c508 	str.w	ip, [r5, #1288]	; 0x508
                            : NRF_SPI_PIN_NOT_CONNECTED;
    5620:	bf08      	it	eq
    5622:	f04f 37ff 	moveq.w	r7, #4294967295
                            : NRF_SPI_PIN_NOT_CONNECTED;
    5626:	2bff      	cmp	r3, #255	; 0xff
    5628:	bf08      	it	eq
    562a:	f04f 33ff 	moveq.w	r3, #4294967295
#endif

#if defined(SPI_PSEL_MOSI_CONNECT_Pos)
    p_reg->PSEL.MOSI = mosi_pin;
#else
    p_reg->PSELMOSI = mosi_pin;
    562e:	f8c5 750c 	str.w	r7, [r5, #1292]	; 0x50c
#endif

#if defined(SPI_PSEL_MISO_CONNECT_Pos)
    p_reg->PSEL.MISO = miso_pin;
#else
    p_reg->PSELMISO = miso_pin;
    5632:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    5636:	688b      	ldr	r3, [r1, #8]
    5638:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    563c:	7b4b      	ldrb	r3, [r1, #13]

    configure_pins(p_spi, p_config);

    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
    563e:	7b0f      	ldrb	r7, [r1, #12]
    5640:	3b00      	subs	r3, #0
    5642:	bf18      	it	ne
    5644:	2301      	movne	r3, #1
    switch (spi_mode)
    5646:	2f02      	cmp	r7, #2
    5648:	d019      	beq.n	567e <nrfx_spi_init+0x13e>
    564a:	2f03      	cmp	r7, #3
    564c:	d01a      	beq.n	5684 <nrfx_spi_init+0x144>
    564e:	2f01      	cmp	r7, #1
    5650:	d101      	bne.n	5656 <nrfx_spi_init+0x116>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
    5652:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    5656:	f8c5 3554 	str.w	r3, [r5, #1364]	; 0x554
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    565a:	2301      	movs	r3, #1
    565c:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
    5660:	b122      	cbz	r2, 566c <nrfx_spi_init+0x12c>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    5662:	6800      	ldr	r0, [r0, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    5664:	f340 3007 	sbfx	r0, r0, #12, #8
    5668:	f7fd fb18 	bl	2c9c <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    566c:	2328      	movs	r3, #40	; 0x28
    566e:	fb03 4406 	mla	r4, r3, r6, r4
    5672:	2300      	movs	r3, #0
    5674:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    5676:	4807      	ldr	r0, [pc, #28]	; (5694 <nrfx_spi_init+0x154>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    5678:	2301      	movs	r3, #1
    567a:	7723      	strb	r3, [r4, #28]
}
    567c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    567e:	f043 0304 	orr.w	r3, r3, #4
        break;
    5682:	e7e8      	b.n	5656 <nrfx_spi_init+0x116>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    5684:	f043 0306 	orr.w	r3, r3, #6
        break;
    5688:	e7e5      	b.n	5656 <nrfx_spi_init+0x116>
        return err_code;
    568a:	4803      	ldr	r0, [pc, #12]	; (5698 <nrfx_spi_init+0x158>)
    568c:	e7f6      	b.n	567c <nrfx_spi_init+0x13c>
    568e:	bf00      	nop
    5690:	20000494 	.word	0x20000494
    5694:	0bad0000 	.word	0x0bad0000
    5698:	0bad0005 	.word	0x0bad0005

0000569c <nrfx_spi_uninit>:

void nrfx_spi_uninit(nrfx_spi_t const * p_instance)
{
    569c:	b570      	push	{r4, r5, r6, lr}
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    569e:	7906      	ldrb	r6, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPI_Type * p_spi = p_instance->p_reg;

    if (p_cb->handler)
    56a0:	4c26      	ldr	r4, [pc, #152]	; (573c <nrfx_spi_uninit+0xa0>)
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    56a2:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
    56a4:	2328      	movs	r3, #40	; 0x28
    56a6:	4373      	muls	r3, r6
    56a8:	58e3      	ldr	r3, [r4, r3]
    56aa:	b133      	cbz	r3, 56ba <nrfx_spi_uninit+0x1e>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    56ac:	f345 3007 	sbfx	r0, r5, #12, #8
    56b0:	f7fd fb02 	bl	2cb8 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    56b4:	2304      	movs	r3, #4
    56b6:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
    56ba:	2300      	movs	r3, #0
    56bc:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        nrf_spi_int_disable(p_spi, NRF_SPI_ALL_INTS_MASK);
    }

    nrf_spi_disable(p_spi);

    if (!p_cb->skip_gpio_cfg)
    56c0:	2328      	movs	r3, #40	; 0x28
    56c2:	fb03 4306 	mla	r3, r3, r6, r4
    56c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    56ca:	bb83      	cbnz	r3, 572e <nrfx_spi_uninit+0x92>
    return p_reg->PSELSCK;
    56cc:	f8d5 3508 	ldr.w	r3, [r5, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    56d0:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    56d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    56d8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    56dc:	2102      	movs	r1, #2
    56de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return p_reg->PSELMISO;
    56e2:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
    {
        nrf_gpio_cfg_default(nrf_spi_sck_pin_get(p_spi));

        uint32_t miso_pin = nrf_spi_miso_pin_get(p_spi);
        if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
    56e6:	1c58      	adds	r0, r3, #1
    *p_pin = pin_number & 0x1F;
    56e8:	bf1e      	ittt	ne
    56ea:	f003 031f 	andne.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    56ee:	f503 73e0 	addne.w	r3, r3, #448	; 0x1c0
    56f2:	f842 1023 	strne.w	r1, [r2, r3, lsl #2]
    return p_reg->PSELMOSI;
    56f6:	f8d5 350c 	ldr.w	r3, [r5, #1292]	; 0x50c
        {
            nrf_gpio_cfg_default(miso_pin);
        }

        uint32_t mosi_pin = nrf_spi_mosi_pin_get(p_spi);
        if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
    56fa:	1c5a      	adds	r2, r3, #1
    56fc:	d008      	beq.n	5710 <nrfx_spi_uninit+0x74>
    *p_pin = pin_number & 0x1F;
    56fe:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    5702:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5706:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    570a:	2102      	movs	r1, #2
    570c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        {
            nrf_gpio_cfg_default(mosi_pin);
        }

        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    5710:	2328      	movs	r3, #40	; 0x28
    5712:	fb03 4306 	mla	r3, r3, r6, r4
    5716:	7f9b      	ldrb	r3, [r3, #30]
    5718:	2bff      	cmp	r3, #255	; 0xff
    571a:	d008      	beq.n	572e <nrfx_spi_uninit+0x92>
    *p_pin = pin_number & 0x1F;
    571c:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    5720:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5724:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5728:	2102      	movs	r1, #2
    572a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    572e:	2328      	movs	r3, #40	; 0x28
    5730:	fb03 4406 	mla	r4, r3, r6, r4
    5734:	2300      	movs	r3, #0
    5736:	7723      	strb	r3, [r4, #28]
}
    5738:	bd70      	pop	{r4, r5, r6, pc}
    573a:	bf00      	nop
    573c:	20000494 	.word	0x20000494

00005740 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    5740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    5744:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    5746:	4e41      	ldr	r6, [pc, #260]	; (584c <nrfx_spi_xfer+0x10c>)
    5748:	2328      	movs	r3, #40	; 0x28
    574a:	437b      	muls	r3, r7
{
    574c:	4694      	mov	ip, r2
    if (p_cb->transfer_in_progress)
    574e:	18f2      	adds	r2, r6, r3
{
    5750:	460d      	mov	r5, r1
    if (p_cb->transfer_in_progress)
    5752:	7f51      	ldrb	r1, [r2, #29]
{
    5754:	4686      	mov	lr, r0
    if (p_cb->transfer_in_progress)
    5756:	2900      	cmp	r1, #0
    5758:	d176      	bne.n	5848 <nrfx_spi_xfer+0x108>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
    575a:	f856 8003 	ldr.w	r8, [r6, r3]
    575e:	f1b8 0f00 	cmp.w	r8, #0
    5762:	d001      	beq.n	5768 <nrfx_spi_xfer+0x28>
        {
            p_cb->transfer_in_progress = true;
    5764:	2301      	movs	r3, #1
    5766:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    5768:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    576c:	2428      	movs	r4, #40	; 0x28
    576e:	fb04 6407 	mla	r4, r4, r7, r6
    5772:	f104 090c 	add.w	r9, r4, #12
    5776:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
    p_cb->abort = false;
    577a:	2300      	movs	r3, #0
    577c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    5780:	7fa3      	ldrb	r3, [r4, #30]
    5782:	2bff      	cmp	r3, #255	; 0xff
    5784:	d008      	beq.n	5798 <nrfx_spi_xfer+0x58>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5786:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
    5788:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    578c:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTCLR = clr_mask;
    5790:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5794:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    {
        nrf_gpio_pin_write(p_cb->ss_pin, 0);
    }
    if (flags)
    5798:	2328      	movs	r3, #40	; 0x28
    579a:	f1bc 0f00 	cmp.w	ip, #0
    579e:	d006      	beq.n	57ae <nrfx_spi_xfer+0x6e>
    {
        p_cb->transfer_in_progress = false;
    57a0:	fb03 6307 	mla	r3, r3, r7, r6
    57a4:	2200      	movs	r2, #0
        err_code = NRFX_ERROR_NOT_SUPPORTED;
    57a6:	482a      	ldr	r0, [pc, #168]	; (5850 <nrfx_spi_xfer+0x110>)
        p_cb->transfer_in_progress = false;
    57a8:	775a      	strb	r2, [r3, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    57aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
    57ae:	f8de 4000 	ldr.w	r4, [lr]
    p_cb->bytes_transferred = 0;
    57b2:	fb03 6307 	mla	r3, r3, r7, r6
    p_reg->INTENCLR = mask;
    57b6:	2204      	movs	r2, #4
    57b8:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    57bc:	f8c3 c020 	str.w	ip, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    57c0:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
    57c4:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    nrf_spi_txd_set(p_spi,
    57c8:	686a      	ldr	r2, [r5, #4]
    57ca:	b192      	cbz	r2, 57f2 <nrfx_spi_xfer+0xb2>
    57cc:	682b      	ldr	r3, [r5, #0]
    57ce:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
    57d0:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
    57d4:	686b      	ldr	r3, [r5, #4]
    57d6:	2b01      	cmp	r3, #1
    57d8:	d90d      	bls.n	57f6 <nrfx_spi_xfer+0xb6>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
    57da:	682b      	ldr	r3, [r5, #0]
    57dc:	785b      	ldrb	r3, [r3, #1]
    57de:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_cb->handler)
    57e2:	f1b8 0f00 	cmp.w	r8, #0
    57e6:	d00e      	beq.n	5806 <nrfx_spi_xfer+0xc6>
    p_reg->INTENSET = mask;
    57e8:	2304      	movs	r3, #4
    57ea:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
    57ee:	4819      	ldr	r0, [pc, #100]	; (5854 <nrfx_spi_xfer+0x114>)
    57f0:	e7db      	b.n	57aa <nrfx_spi_xfer+0x6a>
    nrf_spi_txd_set(p_spi,
    57f2:	7fdb      	ldrb	r3, [r3, #31]
    57f4:	e7ec      	b.n	57d0 <nrfx_spi_xfer+0x90>
    else if (p_xfer_desc->rx_length > 1)
    57f6:	68eb      	ldr	r3, [r5, #12]
    57f8:	2b01      	cmp	r3, #1
    57fa:	d9f2      	bls.n	57e2 <nrfx_spi_xfer+0xa2>
        nrf_spi_txd_set(p_spi, p_cb->orc);
    57fc:	2328      	movs	r3, #40	; 0x28
    57fe:	fb03 6307 	mla	r3, r3, r7, r6
    p_reg->TXD = data;
    5802:	7fdb      	ldrb	r3, [r3, #31]
    5804:	e7eb      	b.n	57de <nrfx_spi_xfer+0x9e>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    5806:	eb07 0187 	add.w	r1, r7, r7, lsl #2
    580a:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    580e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
    5812:	2b00      	cmp	r3, #0
    5814:	d0fb      	beq.n	580e <nrfx_spi_xfer+0xce>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5816:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
    581a:	4620      	mov	r0, r4
    581c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    5820:	f002 f845 	bl	78ae <transfer_byte>
    5824:	2800      	cmp	r0, #0
    5826:	d1f2      	bne.n	580e <nrfx_spi_xfer+0xce>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    5828:	2328      	movs	r3, #40	; 0x28
    582a:	fb03 6607 	mla	r6, r3, r7, r6
    582e:	7fb3      	ldrb	r3, [r6, #30]
    5830:	2bff      	cmp	r3, #255	; 0xff
    5832:	d0dc      	beq.n	57ee <nrfx_spi_xfer+0xae>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5834:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
    5836:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    583a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
    583e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5842:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
    5846:	e7d2      	b.n	57ee <nrfx_spi_xfer+0xae>
        return err_code;
    5848:	4803      	ldr	r0, [pc, #12]	; (5858 <nrfx_spi_xfer+0x118>)
    584a:	e7ae      	b.n	57aa <nrfx_spi_xfer+0x6a>
    584c:	20000494 	.word	0x20000494
    5850:	0bad0003 	.word	0x0bad0003
    5854:	0bad0000 	.word	0x0bad0000
    5858:	0bad000b 	.word	0x0bad000b

0000585c <nrfx_spi_1_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
    585c:	4902      	ldr	r1, [pc, #8]	; (5868 <nrfx_spi_1_irq_handler+0xc>)
    585e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    5862:	f002 b857 	b.w	7914 <irq_handler>
    5866:	bf00      	nop
    5868:	20000494 	.word	0x20000494

0000586c <nrfx_spi_2_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_SPI2_ENABLED)
void nrfx_spi_2_irq_handler(void)
{
    irq_handler(NRF_SPI2, &m_cb[NRFX_SPI2_INST_IDX]);
    586c:	4901      	ldr	r1, [pc, #4]	; (5874 <nrfx_spi_2_irq_handler+0x8>)
    586e:	4802      	ldr	r0, [pc, #8]	; (5878 <nrfx_spi_2_irq_handler+0xc>)
    5870:	f002 b850 	b.w	7914 <irq_handler>
    5874:	200004bc 	.word	0x200004bc
    5878:	40023000 	.word	0x40023000

0000587c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    587c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    587e:	4c11      	ldr	r4, [pc, #68]	; (58c4 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    5880:	4a11      	ldr	r2, [pc, #68]	; (58c8 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    5882:	4912      	ldr	r1, [pc, #72]	; (58cc <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    5884:	2303      	movs	r3, #3
    5886:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    5888:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    588a:	4b11      	ldr	r3, [pc, #68]	; (58d0 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    588c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    588e:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    5890:	f44f 6380 	mov.w	r3, #1024	; 0x400
    5894:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    5896:	2300      	movs	r3, #0
    5898:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    589a:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    589c:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    589e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    58a0:	4a0c      	ldr	r2, [pc, #48]	; (58d4 <_DoInit+0x58>)
    58a2:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    58a4:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    58a6:	2210      	movs	r2, #16
    58a8:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    58aa:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    58ac:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    58ae:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    58b0:	f001 fd2b 	bl	730a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    58b4:	4908      	ldr	r1, [pc, #32]	; (58d8 <_DoInit+0x5c>)
    58b6:	4620      	mov	r0, r4
    58b8:	f001 fd27 	bl	730a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    58bc:	2320      	movs	r3, #32
    58be:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    58c0:	bd10      	pop	{r4, pc}
    58c2:	bf00      	nop
    58c4:	200004e4 	.word	0x200004e4
    58c8:	00008ab3 	.word	0x00008ab3
    58cc:	00008abc 	.word	0x00008abc
    58d0:	200007d7 	.word	0x200007d7
    58d4:	200007c7 	.word	0x200007c7
    58d8:	00008ac0 	.word	0x00008ac0

000058dc <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    58dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    58e0:	4f21      	ldr	r7, [pc, #132]	; (5968 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
    58e2:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    58e6:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    58e8:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    58ec:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    58ee:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    58f0:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    58f2:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    58f4:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    58f6:	d831      	bhi.n	595c <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    58f8:	f8d2 a020 	ldr.w	sl, [r2, #32]
    58fc:	ebaa 0905 	sub.w	r9, sl, r5
    5900:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    5904:	4294      	cmp	r4, r2
    5906:	d811      	bhi.n	592c <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5908:	2318      	movs	r3, #24
    590a:	fb06 3303 	mla	r3, r6, r3, r3
    590e:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
    5910:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5912:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    5914:	4641      	mov	r1, r8
    5916:	4428      	add	r0, r5
    5918:	f001 fd11 	bl	733e <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    591c:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    591e:	2318      	movs	r3, #24
    5920:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
    5924:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
    5926:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    5928:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    592c:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    592e:	429c      	cmp	r4, r3
    5930:	d818      	bhi.n	5964 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5932:	fb00 bb0b 	mla	fp, r0, fp, fp
    5936:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    5938:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    593a:	f8db 0004 	ldr.w	r0, [fp, #4]
    593e:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    5940:	4428      	add	r0, r5
    5942:	f001 fcfc 	bl	733e <memcpy>
      if (NumBytes) {
    5946:	ebb4 040a 	subs.w	r4, r4, sl
    594a:	d0e8      	beq.n	591e <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    594c:	f8db 0004 	ldr.w	r0, [fp, #4]
    5950:	4622      	mov	r2, r4
    5952:	eb08 0109 	add.w	r1, r8, r9
    5956:	f001 fcf2 	bl	733e <memcpy>
      return 1;
    595a:	e7e0      	b.n	591e <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
    595c:	3b01      	subs	r3, #1
    595e:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    5960:	42a3      	cmp	r3, r4
    5962:	d2d1      	bcs.n	5908 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    5964:	2000      	movs	r0, #0
    5966:	e7df      	b.n	5928 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    5968:	200004e4 	.word	0x200004e4

0000596c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    596c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    596e:	4b14      	ldr	r3, [pc, #80]	; (59c0 <SEGGER_RTT_WriteNoLock+0x54>)
    5970:	2718      	movs	r7, #24
    5972:	fb00 7507 	mla	r5, r0, r7, r7
    5976:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    5978:	fb07 3300 	mla	r3, r7, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    597c:	460e      	mov	r6, r1
  switch (pRing->Flags) {
    597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5980:	2b01      	cmp	r3, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5982:	4614      	mov	r4, r2
  switch (pRing->Flags) {
    5984:	d00a      	beq.n	599c <SEGGER_RTT_WriteNoLock+0x30>
    5986:	2b02      	cmp	r3, #2
    5988:	d014      	beq.n	59b4 <SEGGER_RTT_WriteNoLock+0x48>
    598a:	b923      	cbnz	r3, 5996 <SEGGER_RTT_WriteNoLock+0x2a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    598c:	4628      	mov	r0, r5
    598e:	f001 ffe3 	bl	7958 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    5992:	4284      	cmp	r4, r0
    5994:	d908      	bls.n	59a8 <SEGGER_RTT_WriteNoLock+0x3c>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
    5996:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
    5998:	4620      	mov	r0, r4
    599a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    599c:	4628      	mov	r0, r5
    599e:	f001 ffdb 	bl	7958 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    59a2:	4284      	cmp	r4, r0
    59a4:	bf28      	it	cs
    59a6:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    59a8:	4622      	mov	r2, r4
    59aa:	4631      	mov	r1, r6
    59ac:	4628      	mov	r0, r5
    59ae:	f001 ffdc 	bl	796a <_WriteNoCheck>
    break;
    59b2:	e7f1      	b.n	5998 <SEGGER_RTT_WriteNoLock+0x2c>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    59b4:	4628      	mov	r0, r5
}
    59b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    59ba:	f001 bff1 	b.w	79a0 <_WriteBlocking>
    59be:	bf00      	nop
    59c0:	200004e4 	.word	0x200004e4

000059c4 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    59c4:	4b03      	ldr	r3, [pc, #12]	; (59d4 <SEGGER_RTT_HasDataUp+0x10>)
    59c6:	2218      	movs	r2, #24
    59c8:	fb02 3300 	mla	r3, r2, r0, r3
    59cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    59ce:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    59d0:	1a80      	subs	r0, r0, r2
    59d2:	4770      	bx	lr
    59d4:	200004e4 	.word	0x200004e4

000059d8 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
    59d8:	4803      	ldr	r0, [pc, #12]	; (59e8 <zephyr_rtt_mutex_lock+0x10>)
    59da:	f04f 32ff 	mov.w	r2, #4294967295
    59de:	f04f 33ff 	mov.w	r3, #4294967295
    59e2:	f000 ba11 	b.w	5e08 <z_impl_k_mutex_lock>
    59e6:	bf00      	nop
    59e8:	2000019c 	.word	0x2000019c

000059ec <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
    59ec:	4801      	ldr	r0, [pc, #4]	; (59f4 <zephyr_rtt_mutex_unlock+0x8>)
    59ee:	f000 ba85 	b.w	5efc <z_impl_k_mutex_unlock>
    59f2:	bf00      	nop
    59f4:	2000019c 	.word	0x2000019c

000059f8 <z_device_get_all_static>:
#include <syscalls/device_is_ready_mrsh.c>
#endif /* CONFIG_USERSPACE */

size_t z_device_get_all_static(struct device const **devices)
{
	*devices = __device_start;
    59f8:	4a03      	ldr	r2, [pc, #12]	; (5a08 <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
    59fa:	4b04      	ldr	r3, [pc, #16]	; (5a0c <z_device_get_all_static+0x14>)
	*devices = __device_start;
    59fc:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
    59fe:	1a9b      	subs	r3, r3, r2
}
    5a00:	4803      	ldr	r0, [pc, #12]	; (5a10 <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
    5a02:	109b      	asrs	r3, r3, #2
}
    5a04:	4358      	muls	r0, r3
    5a06:	4770      	bx	lr
    5a08:	00007c74 	.word	0x00007c74
    5a0c:	00007d00 	.word	0x00007d00
    5a10:	b6db6db7 	.word	0xb6db6db7

00005a14 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a18:	4606      	mov	r6, r0
    5a1a:	b086      	sub	sp, #24
    5a1c:	460f      	mov	r7, r1
	__asm__ volatile(
    5a1e:	f04f 0320 	mov.w	r3, #32
    5a22:	f3ef 8811 	mrs	r8, BASEPRI
    5a26:	f383 8812 	msr	BASEPRI_MAX, r3
    5a2a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    5a2e:	f000 fde3 	bl	65f8 <z_impl_z_current_get>
    5a32:	2e04      	cmp	r6, #4
    5a34:	bf96      	itet	ls
    5a36:	4b22      	ldrls	r3, [pc, #136]	; (5ac0 <z_fatal_error+0xac>)
    5a38:	4b22      	ldrhi	r3, [pc, #136]	; (5ac4 <z_fatal_error+0xb0>)
    5a3a:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    5a3e:	4922      	ldr	r1, [pc, #136]	; (5ac8 <z_fatal_error+0xb4>)
    5a40:	9603      	str	r6, [sp, #12]
    5a42:	2400      	movs	r4, #0
    5a44:	e9cd 3404 	strd	r3, r4, [sp, #16]
    5a48:	4b20      	ldr	r3, [pc, #128]	; (5acc <z_fatal_error+0xb8>)
    5a4a:	9400      	str	r4, [sp, #0]
    5a4c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    5a50:	4605      	mov	r5, r0
    5a52:	4623      	mov	r3, r4
    5a54:	2201      	movs	r2, #1
    5a56:	4620      	mov	r0, r4
    5a58:	f001 ffdf 	bl	7a1a <z_log_msg_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    5a5c:	b16f      	cbz	r7, 5a7a <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    5a5e:	69fb      	ldr	r3, [r7, #28]
    5a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5a64:	b14b      	cbz	r3, 5a7a <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
    5a66:	4b1a      	ldr	r3, [pc, #104]	; (5ad0 <z_fatal_error+0xbc>)
    5a68:	4917      	ldr	r1, [pc, #92]	; (5ac8 <z_fatal_error+0xb4>)
    5a6a:	9400      	str	r4, [sp, #0]
    5a6c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    5a70:	2201      	movs	r2, #1
    5a72:	4623      	mov	r3, r4
    5a74:	4620      	mov	r0, r4
    5a76:	f001 ffd0 	bl	7a1a <z_log_msg_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    5a7a:	b12d      	cbz	r5, 5a88 <z_fatal_error+0x74>
    5a7c:	4628      	mov	r0, r5
    5a7e:	f001 ffe6 	bl	7a4e <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    5a82:	b108      	cbz	r0, 5a88 <z_fatal_error+0x74>
    5a84:	7803      	ldrb	r3, [r0, #0]
    5a86:	b903      	cbnz	r3, 5a8a <z_fatal_error+0x76>
		thread_name = "unknown";
    5a88:	4812      	ldr	r0, [pc, #72]	; (5ad4 <z_fatal_error+0xc0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    5a8a:	4b13      	ldr	r3, [pc, #76]	; (5ad8 <z_fatal_error+0xc4>)
    5a8c:	9302      	str	r3, [sp, #8]
    5a8e:	2300      	movs	r3, #0
    5a90:	e9cd 5003 	strd	r5, r0, [sp, #12]
    5a94:	e9cd 3300 	strd	r3, r3, [sp]
    5a98:	4618      	mov	r0, r3
    5a9a:	2201      	movs	r2, #1
    5a9c:	490a      	ldr	r1, [pc, #40]	; (5ac8 <z_fatal_error+0xb4>)
    5a9e:	f001 ffbc 	bl	7a1a <z_log_msg_runtime_create.constprop.0>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    5aa2:	4639      	mov	r1, r7
    5aa4:	4630      	mov	r0, r6
    5aa6:	f7fe ff71 	bl	498c <k_sys_fatal_error_handler>
	__asm__ volatile(
    5aaa:	f388 8811 	msr	BASEPRI, r8
    5aae:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    5ab2:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5ab4:	b006      	add	sp, #24
    5ab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5aba:	f7fd bd47 	b.w	354c <z_impl_k_thread_abort>
    5abe:	bf00      	nop
    5ac0:	00008200 	.word	0x00008200
    5ac4:	00008ac7 	.word	0x00008ac7
    5ac8:	00007ec0 	.word	0x00007ec0
    5acc:	00008add 	.word	0x00008add
    5ad0:	00008b05 	.word	0x00008b05
    5ad4:	00008ad5 	.word	0x00008ad5
    5ad8:	00008b26 	.word	0x00008b26

00005adc <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5adc:	4b10      	ldr	r3, [pc, #64]	; (5b20 <z_sys_init_run_level+0x44>)
{
    5ade:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5ae0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    5ae4:	3001      	adds	r0, #1
    5ae6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    5aea:	42a6      	cmp	r6, r4
    5aec:	d800      	bhi.n	5af0 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    5aee:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    5af0:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    5af4:	b18d      	cbz	r5, 5b1a <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    5af6:	4628      	mov	r0, r5
    5af8:	4798      	blx	r3
			if (rc != 0) {
    5afa:	b138      	cbz	r0, 5b0c <z_sys_init_run_level+0x30>
				if (rc < 0) {
    5afc:	2800      	cmp	r0, #0
    5afe:	bfb8      	it	lt
    5b00:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    5b02:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    5b04:	28ff      	cmp	r0, #255	; 0xff
    5b06:	bfa8      	it	ge
    5b08:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    5b0a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    5b0c:	68ea      	ldr	r2, [r5, #12]
    5b0e:	7853      	ldrb	r3, [r2, #1]
    5b10:	f043 0301 	orr.w	r3, r3, #1
    5b14:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5b16:	3408      	adds	r4, #8
    5b18:	e7e7      	b.n	5aea <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    5b1a:	4798      	blx	r3
    5b1c:	e7fb      	b.n	5b16 <z_sys_init_run_level+0x3a>
    5b1e:	bf00      	nop
    5b20:	00008214 	.word	0x00008214

00005b24 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    5b24:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    5b26:	4b0a      	ldr	r3, [pc, #40]	; (5b50 <bg_thread_main+0x2c>)
    5b28:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    5b2a:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    5b2c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    5b2e:	f7ff ffd5 	bl	5adc <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    5b32:	f000 ff21 	bl	6978 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    5b36:	2004      	movs	r0, #4
    5b38:	f7ff ffd0 	bl	5adc <z_sys_init_run_level>

	z_init_static_threads();
    5b3c:	f000 f8ec 	bl	5d18 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    5b40:	f7fa fc50 	bl	3e4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    5b44:	4a03      	ldr	r2, [pc, #12]	; (5b54 <bg_thread_main+0x30>)
    5b46:	7b13      	ldrb	r3, [r2, #12]
    5b48:	f023 0301 	bic.w	r3, r3, #1
    5b4c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    5b4e:	bd08      	pop	{r3, pc}
    5b50:	20000bd7 	.word	0x20000bd7
    5b54:	20000250 	.word	0x20000250

00005b58 <z_bss_zero>:
{
    5b58:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    5b5a:	4803      	ldr	r0, [pc, #12]	; (5b68 <z_bss_zero+0x10>)
    5b5c:	4a03      	ldr	r2, [pc, #12]	; (5b6c <z_bss_zero+0x14>)
    5b5e:	2100      	movs	r1, #0
    5b60:	1a12      	subs	r2, r2, r0
    5b62:	f001 ff6a 	bl	7a3a <z_early_memset>
}
    5b66:	bd08      	pop	{r3, pc}
    5b68:	200001b0 	.word	0x200001b0
    5b6c:	20000bdc 	.word	0x20000bdc

00005b70 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    5b70:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    5b72:	2300      	movs	r3, #0
{
    5b74:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    5b76:	2201      	movs	r2, #1
    5b78:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    5b7c:	4e11      	ldr	r6, [pc, #68]	; (5bc4 <z_init_cpu+0x54>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5b7e:	4d12      	ldr	r5, [pc, #72]	; (5bc8 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
    5b80:	9301      	str	r3, [sp, #4]
    5b82:	220f      	movs	r2, #15
    5b84:	e9cd 3202 	strd	r3, r2, [sp, #8]
    5b88:	4910      	ldr	r1, [pc, #64]	; (5bcc <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5b8a:	2314      	movs	r3, #20
    5b8c:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    5b90:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
	z_setup_new_thread(thread, stack,
    5b94:	f44f 72a0 	mov.w	r2, #320	; 0x140
{
    5b98:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    5b9a:	fb02 1100 	mla	r1, r2, r0, r1
    5b9e:	4b0c      	ldr	r3, [pc, #48]	; (5bd0 <z_init_cpu+0x60>)
    5ba0:	9500      	str	r5, [sp, #0]
    5ba2:	4630      	mov	r0, r6
    5ba4:	f000 f888 	bl	5cb8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5ba8:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
    5baa:	742c      	strb	r4, [r5, #16]
    5bac:	f023 0304 	bic.w	r3, r3, #4
    5bb0:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    5bb2:	4b08      	ldr	r3, [pc, #32]	; (5bd4 <z_init_cpu+0x64>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    5bb4:	60ee      	str	r6, [r5, #12]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    5bb6:	3401      	adds	r4, #1
    5bb8:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].irq_stack =
    5bbc:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    5bbe:	b006      	add	sp, #24
    5bc0:	bd70      	pop	{r4, r5, r6, pc}
    5bc2:	bf00      	nop
    5bc4:	200001d0 	.word	0x200001d0
    5bc8:	2000058c 	.word	0x2000058c
    5bcc:	200013e0 	.word	0x200013e0
    5bd0:	00005dd1 	.word	0x00005dd1
    5bd4:	20000be0 	.word	0x20000be0

00005bd8 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    5bd8:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    5bda:	2000      	movs	r0, #0
{
    5bdc:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    5bde:	f7ff ff7d 	bl	5adc <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    5be2:	4b2e      	ldr	r3, [pc, #184]	; (5c9c <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5be4:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    5be8:	4d2d      	ldr	r5, [pc, #180]	; (5ca0 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    5bea:	4e2e      	ldr	r6, [pc, #184]	; (5ca4 <z_cstart+0xcc>)
    5bec:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5bee:	4f2e      	ldr	r7, [pc, #184]	; (5ca8 <z_cstart+0xd0>)
    5bf0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    5bf4:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5bf6:	2400      	movs	r4, #0
    5bf8:	23e0      	movs	r3, #224	; 0xe0
    5bfa:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    5bfe:	77ec      	strb	r4, [r5, #31]
    5c00:	762c      	strb	r4, [r5, #24]
    5c02:	766c      	strb	r4, [r5, #25]
    5c04:	76ac      	strb	r4, [r5, #26]
    5c06:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    5c0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    5c0c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    5c10:	626b      	str	r3, [r5, #36]	; 0x24
    5c12:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    5c16:	f7fd fc0d 	bl	3434 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    5c1a:	f7fc ffcf 	bl	2bbc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    5c1e:	f04f 33ff 	mov.w	r3, #4294967295
    5c22:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    5c24:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    5c26:	f7fd fd2d 	bl	3684 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    5c2a:	f7fd fca5 	bl	3578 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    5c2e:	f7fc fa47 	bl	20c0 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    5c32:	f240 1301 	movw	r3, #257	; 0x101
    5c36:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    5c3a:	ab06      	add	r3, sp, #24
    5c3c:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    5c3e:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    5c42:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    5c44:	f001 fedd 	bl	7a02 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    5c48:	2001      	movs	r0, #1
    5c4a:	f7ff ff47 	bl	5adc <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    5c4e:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    5c50:	4d16      	ldr	r5, [pc, #88]	; (5cac <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    5c52:	f7ff ff43 	bl	5adc <z_sys_init_run_level>
	z_sched_init();
    5c56:	f000 fc2b 	bl	64b0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5c5a:	4b15      	ldr	r3, [pc, #84]	; (5cb0 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
    5c5c:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5c5e:	9305      	str	r3, [sp, #20]
    5c60:	2301      	movs	r3, #1
    5c62:	4914      	ldr	r1, [pc, #80]	; (5cb4 <z_cstart+0xdc>)
    5c64:	9400      	str	r4, [sp, #0]
    5c66:	e9cd 4303 	strd	r4, r3, [sp, #12]
    5c6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5c6e:	463b      	mov	r3, r7
    5c70:	e9cd 4401 	strd	r4, r4, [sp, #4]
    5c74:	4628      	mov	r0, r5
    5c76:	f000 f81f 	bl	5cb8 <z_setup_new_thread>
    5c7a:	7b6a      	ldrb	r2, [r5, #13]
    5c7c:	4606      	mov	r6, r0
    5c7e:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    5c82:	4628      	mov	r0, r5
    5c84:	736a      	strb	r2, [r5, #13]
    5c86:	f001 ff2d 	bl	7ae4 <z_ready_thread>
	z_init_cpu(0);
    5c8a:	4620      	mov	r0, r4
    5c8c:	f7ff ff70 	bl	5b70 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    5c90:	463a      	mov	r2, r7
    5c92:	4631      	mov	r1, r6
    5c94:	4628      	mov	r0, r5
    5c96:	f7fd f8d3 	bl	2e40 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    5c9a:	bf00      	nop
    5c9c:	200013e0 	.word	0x200013e0
    5ca0:	e000ed00 	.word	0xe000ed00
    5ca4:	2000058c 	.word	0x2000058c
    5ca8:	00005b25 	.word	0x00005b25
    5cac:	20000250 	.word	0x20000250
    5cb0:	00008b88 	.word	0x00008b88
    5cb4:	20001520 	.word	0x20001520

00005cb8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    5cb8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    5cbc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    5cbe:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    5cc0:	2604      	movs	r6, #4
    5cc2:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    5cc4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    5cc6:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    5cc8:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5ccc:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    5cce:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5cd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    5cd4:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5cd6:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    5cda:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    5cde:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    5ce2:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    5ce4:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    5ce6:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5ce8:	9202      	str	r2, [sp, #8]
    5cea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5cec:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    5cee:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5cf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5cf4:	9200      	str	r2, [sp, #0]
    5cf6:	4642      	mov	r2, r8
{
    5cf8:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5cfa:	f7fd f885 	bl	2e08 <arch_new_thread>
	if (!_current) {
    5cfe:	4b05      	ldr	r3, [pc, #20]	; (5d14 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    5d00:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    5d02:	689b      	ldr	r3, [r3, #8]
    5d04:	b103      	cbz	r3, 5d08 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    5d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    5d08:	6723      	str	r3, [r4, #112]	; 0x70
}
    5d0a:	4640      	mov	r0, r8
    5d0c:	b004      	add	sp, #16
    5d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d12:	bf00      	nop
    5d14:	2000058c 	.word	0x2000058c

00005d18 <z_init_static_threads>:
{
    5d18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5d1c:	4c29      	ldr	r4, [pc, #164]	; (5dc4 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    5d1e:	4d2a      	ldr	r5, [pc, #168]	; (5dc8 <z_init_static_threads+0xb0>)
{
    5d20:	b087      	sub	sp, #28
    5d22:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    5d24:	42ae      	cmp	r6, r5
    5d26:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    5d2a:	d30f      	bcc.n	5d4c <z_init_static_threads+0x34>
	k_sched_lock();
    5d2c:	f000 fb90 	bl	6450 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    5d30:	4c24      	ldr	r4, [pc, #144]	; (5dc4 <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5d32:	f8df 9098 	ldr.w	r9, [pc, #152]	; 5dcc <z_init_static_threads+0xb4>
    5d36:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    5d3a:	f240 37e7 	movw	r7, #999	; 0x3e7
    5d3e:	42ac      	cmp	r4, r5
    5d40:	d320      	bcc.n	5d84 <z_init_static_threads+0x6c>
}
    5d42:	b007      	add	sp, #28
    5d44:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    5d48:	f000 bb96 	b.w	6478 <k_sched_unlock>
		z_setup_new_thread(
    5d4c:	f854 3c04 	ldr.w	r3, [r4, #-4]
    5d50:	9305      	str	r3, [sp, #20]
    5d52:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    5d56:	9304      	str	r3, [sp, #16]
    5d58:	f854 3c10 	ldr.w	r3, [r4, #-16]
    5d5c:	9303      	str	r3, [sp, #12]
    5d5e:	f854 3c14 	ldr.w	r3, [r4, #-20]
    5d62:	9302      	str	r3, [sp, #8]
    5d64:	f854 3c18 	ldr.w	r3, [r4, #-24]
    5d68:	9301      	str	r3, [sp, #4]
    5d6a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    5d6e:	9300      	str	r3, [sp, #0]
    5d70:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    5d74:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    5d78:	f7ff ff9e 	bl	5cb8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    5d7c:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    5d80:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    5d82:	e7ce      	b.n	5d22 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    5d84:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5d86:	1c5a      	adds	r2, r3, #1
    5d88:	d00d      	beq.n	5da6 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    5d8a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5d8e:	2100      	movs	r1, #0
    5d90:	4638      	mov	r0, r7
    5d92:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5d96:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    5d9a:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5d9e:	d104      	bne.n	5daa <z_init_static_threads+0x92>
	z_sched_start(thread);
    5da0:	4640      	mov	r0, r8
    5da2:	f000 fb05 	bl	63b0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    5da6:	342c      	adds	r4, #44	; 0x2c
    5da8:	e7c9      	b.n	5d3e <z_init_static_threads+0x26>
    5daa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5dae:	2300      	movs	r3, #0
    5db0:	f7fa f994 	bl	dc <__aeabi_uldivmod>
    5db4:	4602      	mov	r2, r0
    5db6:	460b      	mov	r3, r1
    5db8:	f108 0018 	add.w	r0, r8, #24
    5dbc:	4649      	mov	r1, r9
    5dbe:	f000 fce1 	bl	6784 <z_add_timeout>
    5dc2:	e7f0      	b.n	5da6 <z_init_static_threads+0x8e>
    5dc4:	00007e38 	.word	0x00007e38
    5dc8:	00007e38 	.word	0x00007e38
    5dcc:	00007b49 	.word	0x00007b49

00005dd0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    5dd0:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    5dd2:	4c0b      	ldr	r4, [pc, #44]	; (5e00 <idle+0x30>)
	return !z_sys_post_kernel;
    5dd4:	4d0b      	ldr	r5, [pc, #44]	; (5e04 <idle+0x34>)
	__asm__ volatile(
    5dd6:	f04f 0220 	mov.w	r2, #32
    5dda:	f3ef 8311 	mrs	r3, BASEPRI
    5dde:	f382 8812 	msr	BASEPRI_MAX, r2
    5de2:	f3bf 8f6f 	isb	sy
    5de6:	f001 fefb 	bl	7be0 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    5dea:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    5dec:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    5dee:	b913      	cbnz	r3, 5df6 <idle+0x26>
	arch_cpu_idle();
    5df0:	f7fc feea 	bl	2bc8 <arch_cpu_idle>
}
    5df4:	e7ef      	b.n	5dd6 <idle+0x6>
    5df6:	f7fc fd29 	bl	284c <pm_system_suspend>
    5dfa:	2800      	cmp	r0, #0
    5dfc:	d1eb      	bne.n	5dd6 <idle+0x6>
    5dfe:	e7f7      	b.n	5df0 <idle+0x20>
    5e00:	2000058c 	.word	0x2000058c
    5e04:	20000bd7 	.word	0x20000bd7

00005e08 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    5e08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5e0c:	4604      	mov	r4, r0
    5e0e:	4617      	mov	r7, r2
    5e10:	461e      	mov	r6, r3
    5e12:	f04f 0320 	mov.w	r3, #32
    5e16:	f3ef 8811 	mrs	r8, BASEPRI
    5e1a:	f383 8812 	msr	BASEPRI_MAX, r3
    5e1e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    5e22:	68c3      	ldr	r3, [r0, #12]
    5e24:	4a33      	ldr	r2, [pc, #204]	; (5ef4 <z_impl_k_mutex_lock+0xec>)
    5e26:	b17b      	cbz	r3, 5e48 <z_impl_k_mutex_lock+0x40>
    5e28:	6880      	ldr	r0, [r0, #8]
    5e2a:	6891      	ldr	r1, [r2, #8]
    5e2c:	4288      	cmp	r0, r1
    5e2e:	d019      	beq.n	5e64 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    5e30:	ea57 0306 	orrs.w	r3, r7, r6
    5e34:	d118      	bne.n	5e68 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    5e36:	f388 8811 	msr	BASEPRI, r8
    5e3a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    5e3e:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    5e42:	b002      	add	sp, #8
    5e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    5e48:	6891      	ldr	r1, [r2, #8]
    5e4a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    5e4e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    5e50:	3301      	adds	r3, #1
    5e52:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    5e54:	6893      	ldr	r3, [r2, #8]
    5e56:	60a3      	str	r3, [r4, #8]
    5e58:	f388 8811 	msr	BASEPRI, r8
    5e5c:	f3bf 8f6f 	isb	sy
		return 0;
    5e60:	2000      	movs	r0, #0
    5e62:	e7ee      	b.n	5e42 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    5e64:	6921      	ldr	r1, [r4, #16]
    5e66:	e7f2      	b.n	5e4e <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    5e68:	f991 100e 	ldrsb.w	r1, [r1, #14]
    5e6c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    5e70:	4299      	cmp	r1, r3
    5e72:	bfa8      	it	ge
    5e74:	4619      	movge	r1, r3
    5e76:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    5e7a:	4291      	cmp	r1, r2
    5e7c:	bfb8      	it	lt
    5e7e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    5e80:	428b      	cmp	r3, r1
    5e82:	dd2e      	ble.n	5ee2 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    5e84:	f001 fdec 	bl	7a60 <adjust_owner_prio.isra.0>
    5e88:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    5e8a:	e9cd 7600 	strd	r7, r6, [sp]
    5e8e:	481a      	ldr	r0, [pc, #104]	; (5ef8 <z_impl_k_mutex_lock+0xf0>)
    5e90:	4622      	mov	r2, r4
    5e92:	4641      	mov	r1, r8
    5e94:	f000 fa16 	bl	62c4 <z_pend_curr>
	if (got_mutex == 0) {
    5e98:	2800      	cmp	r0, #0
    5e9a:	d0e1      	beq.n	5e60 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    5e9c:	f04f 0320 	mov.w	r3, #32
    5ea0:	f3ef 8611 	mrs	r6, BASEPRI
    5ea4:	f383 8812 	msr	BASEPRI_MAX, r3
    5ea8:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    5eac:	68a0      	ldr	r0, [r4, #8]
    5eae:	b1d0      	cbz	r0, 5ee6 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    5eb0:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    5eb2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5eb4:	429c      	cmp	r4, r3
    5eb6:	d00a      	beq.n	5ece <z_impl_k_mutex_lock+0xc6>
    5eb8:	b14b      	cbz	r3, 5ece <z_impl_k_mutex_lock+0xc6>
    5eba:	f993 300e 	ldrsb.w	r3, [r3, #14]
    5ebe:	4299      	cmp	r1, r3
    5ec0:	bfa8      	it	ge
    5ec2:	4619      	movge	r1, r3
    5ec4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    5ec8:	4299      	cmp	r1, r3
    5eca:	bfb8      	it	lt
    5ecc:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    5ece:	f001 fdc7 	bl	7a60 <adjust_owner_prio.isra.0>
    5ed2:	b140      	cbz	r0, 5ee6 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    5ed4:	4808      	ldr	r0, [pc, #32]	; (5ef8 <z_impl_k_mutex_lock+0xf0>)
    5ed6:	4631      	mov	r1, r6
    5ed8:	f000 fa58 	bl	638c <z_reschedule>
	return -EAGAIN;
    5edc:	f06f 000a 	mvn.w	r0, #10
    5ee0:	e7af      	b.n	5e42 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    5ee2:	2500      	movs	r5, #0
    5ee4:	e7d1      	b.n	5e8a <z_impl_k_mutex_lock+0x82>
	if (resched) {
    5ee6:	2d00      	cmp	r5, #0
    5ee8:	d1f4      	bne.n	5ed4 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    5eea:	f386 8811 	msr	BASEPRI, r6
    5eee:	f3bf 8f6f 	isb	sy
    5ef2:	e7f3      	b.n	5edc <z_impl_k_mutex_lock+0xd4>
    5ef4:	2000058c 	.word	0x2000058c
    5ef8:	20000bd8 	.word	0x20000bd8

00005efc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    5efc:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    5efe:	6883      	ldr	r3, [r0, #8]
{
    5f00:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    5f02:	b36b      	cbz	r3, 5f60 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    5f04:	4a19      	ldr	r2, [pc, #100]	; (5f6c <z_impl_k_mutex_unlock+0x70>)
    5f06:	6892      	ldr	r2, [r2, #8]
    5f08:	4293      	cmp	r3, r2
    5f0a:	d12c      	bne.n	5f66 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    5f0c:	68c3      	ldr	r3, [r0, #12]
    5f0e:	2b01      	cmp	r3, #1
    5f10:	d903      	bls.n	5f1a <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    5f12:	3b01      	subs	r3, #1
    5f14:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    5f16:	2000      	movs	r0, #0
}
    5f18:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    5f1a:	f04f 0320 	mov.w	r3, #32
    5f1e:	f3ef 8511 	mrs	r5, BASEPRI
    5f22:	f383 8812 	msr	BASEPRI_MAX, r3
    5f26:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    5f2a:	6901      	ldr	r1, [r0, #16]
    5f2c:	6880      	ldr	r0, [r0, #8]
    5f2e:	f001 fd97 	bl	7a60 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    5f32:	4620      	mov	r0, r4
    5f34:	f001 fe0c 	bl	7b50 <z_unpend_first_thread>
	mutex->owner = new_owner;
    5f38:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    5f3a:	b158      	cbz	r0, 5f54 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    5f3c:	f990 200e 	ldrsb.w	r2, [r0, #14]
    5f40:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    5f42:	2200      	movs	r2, #0
    5f44:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    5f46:	f001 fdcd 	bl	7ae4 <z_ready_thread>
		z_reschedule(&lock, key);
    5f4a:	4809      	ldr	r0, [pc, #36]	; (5f70 <z_impl_k_mutex_unlock+0x74>)
    5f4c:	4629      	mov	r1, r5
    5f4e:	f000 fa1d 	bl	638c <z_reschedule>
    5f52:	e7e0      	b.n	5f16 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    5f54:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    5f56:	f385 8811 	msr	BASEPRI, r5
    5f5a:	f3bf 8f6f 	isb	sy
    5f5e:	e7da      	b.n	5f16 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    5f60:	f06f 0015 	mvn.w	r0, #21
    5f64:	e7d8      	b.n	5f18 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    5f66:	f04f 30ff 	mov.w	r0, #4294967295
    5f6a:	e7d5      	b.n	5f18 <z_impl_k_mutex_unlock+0x1c>
    5f6c:	2000058c 	.word	0x2000058c
    5f70:	20000bd8 	.word	0x20000bd8

00005f74 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5f74:	b538      	push	{r3, r4, r5, lr}
    5f76:	4604      	mov	r4, r0
	__asm__ volatile(
    5f78:	f04f 0320 	mov.w	r3, #32
    5f7c:	f3ef 8511 	mrs	r5, BASEPRI
    5f80:	f383 8812 	msr	BASEPRI_MAX, r3
    5f84:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    5f88:	f001 fde2 	bl	7b50 <z_unpend_first_thread>

	if (thread != NULL) {
    5f8c:	b148      	cbz	r0, 5fa2 <z_impl_k_sem_give+0x2e>
    5f8e:	2200      	movs	r2, #0
    5f90:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    5f92:	f001 fda7 	bl	7ae4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    5f96:	4629      	mov	r1, r5
    5f98:	4805      	ldr	r0, [pc, #20]	; (5fb0 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    5f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    5f9e:	f000 b9f5 	b.w	638c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    5fa2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    5fa6:	429a      	cmp	r2, r3
    5fa8:	bf18      	it	ne
    5faa:	3301      	addne	r3, #1
    5fac:	60a3      	str	r3, [r4, #8]
}
    5fae:	e7f2      	b.n	5f96 <z_impl_k_sem_give+0x22>
    5fb0:	20000bd8 	.word	0x20000bd8

00005fb4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    5fb4:	b513      	push	{r0, r1, r4, lr}
    5fb6:	f04f 0420 	mov.w	r4, #32
    5fba:	f3ef 8111 	mrs	r1, BASEPRI
    5fbe:	f384 8812 	msr	BASEPRI_MAX, r4
    5fc2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    5fc6:	6884      	ldr	r4, [r0, #8]
    5fc8:	b144      	cbz	r4, 5fdc <z_impl_k_sem_take+0x28>
		sem->count--;
    5fca:	3c01      	subs	r4, #1
    5fcc:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    5fce:	f381 8811 	msr	BASEPRI, r1
    5fd2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    5fd6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    5fd8:	b002      	add	sp, #8
    5fda:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    5fdc:	ea52 0403 	orrs.w	r4, r2, r3
    5fe0:	d106      	bne.n	5ff0 <z_impl_k_sem_take+0x3c>
    5fe2:	f381 8811 	msr	BASEPRI, r1
    5fe6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    5fea:	f06f 000f 	mvn.w	r0, #15
    5fee:	e7f3      	b.n	5fd8 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    5ff0:	e9cd 2300 	strd	r2, r3, [sp]
    5ff4:	4602      	mov	r2, r0
    5ff6:	4802      	ldr	r0, [pc, #8]	; (6000 <z_impl_k_sem_take+0x4c>)
    5ff8:	f000 f964 	bl	62c4 <z_pend_curr>
	return ret;
    5ffc:	e7ec      	b.n	5fd8 <z_impl_k_sem_take+0x24>
    5ffe:	bf00      	nop
    6000:	20000bd8 	.word	0x20000bd8

00006004 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
    6004:	b570      	push	{r4, r5, r6, lr}
    6006:	4604      	mov	r4, r0
	__asm__ volatile(
    6008:	f04f 0320 	mov.w	r3, #32
    600c:	f3ef 8511 	mrs	r5, BASEPRI
    6010:	f383 8812 	msr	BASEPRI_MAX, r3
    6014:	f3bf 8f6f 	isb	sy
    6018:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
    601c:	4620      	mov	r0, r4
    601e:	f001 fd97 	bl	7b50 <z_unpend_first_thread>
		if (thread == NULL) {
    6022:	b118      	cbz	r0, 602c <z_impl_k_sem_reset+0x28>
    6024:	6786      	str	r6, [r0, #120]	; 0x78
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
    6026:	f001 fd5d 	bl	7ae4 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
    602a:	e7f7      	b.n	601c <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
    602c:	60a0      	str	r0, [r4, #8]

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
    602e:	4629      	mov	r1, r5
    6030:	4802      	ldr	r0, [pc, #8]	; (603c <z_impl_k_sem_reset+0x38>)
}
    6032:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
    6036:	f000 b9a9 	b.w	638c <z_reschedule>
    603a:	bf00      	nop
    603c:	20000bd8 	.word	0x20000bd8

00006040 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    6040:	89c3      	ldrh	r3, [r0, #14]
    6042:	2b7f      	cmp	r3, #127	; 0x7f
    6044:	d812      	bhi.n	606c <sliceable+0x2c>
	int ret = slice_ticks;
    6046:	4b0a      	ldr	r3, [pc, #40]	; (6070 <sliceable+0x30>)
    6048:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    604a:	b163      	cbz	r3, 6066 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    604c:	4b09      	ldr	r3, [pc, #36]	; (6074 <sliceable+0x34>)
    604e:	f990 200e 	ldrsb.w	r2, [r0, #14]
    6052:	681b      	ldr	r3, [r3, #0]
    6054:	429a      	cmp	r2, r3
    6056:	db09      	blt.n	606c <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    6058:	7b43      	ldrb	r3, [r0, #13]
    605a:	06db      	lsls	r3, r3, #27
    605c:	d106      	bne.n	606c <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    605e:	4b06      	ldr	r3, [pc, #24]	; (6078 <sliceable+0x38>)
    6060:	1ac3      	subs	r3, r0, r3
    6062:	bf18      	it	ne
    6064:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    6066:	f003 0001 	and.w	r0, r3, #1
    606a:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    606c:	2300      	movs	r3, #0
    606e:	e7fa      	b.n	6066 <sliceable+0x26>
    6070:	200005b8 	.word	0x200005b8
    6074:	200005b4 	.word	0x200005b4
    6078:	200001d0 	.word	0x200001d0

0000607c <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    607c:	4b04      	ldr	r3, [pc, #16]	; (6090 <slice_timeout+0x14>)
    607e:	1ac0      	subs	r0, r0, r3
    6080:	4b04      	ldr	r3, [pc, #16]	; (6094 <slice_timeout+0x18>)
    6082:	10c0      	asrs	r0, r0, #3
    6084:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
    6086:	4b04      	ldr	r3, [pc, #16]	; (6098 <slice_timeout+0x1c>)
    6088:	2201      	movs	r2, #1
    608a:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    608c:	4770      	bx	lr
    608e:	bf00      	nop
    6090:	200002d0 	.word	0x200002d0
    6094:	aaaaaaab 	.word	0xaaaaaaab
    6098:	20000bd8 	.word	0x20000bd8

0000609c <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    609c:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    609e:	4b0e      	ldr	r3, [pc, #56]	; (60d8 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    60a0:	4c0e      	ldr	r4, [pc, #56]	; (60dc <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    60a2:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
    60a4:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    60a8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
    60ac:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    60ae:	4620      	mov	r0, r4
    60b0:	f001 fd80 	bl	7bb4 <z_abort_timeout>
	slice_expired[cpu] = false;
    60b4:	4b0a      	ldr	r3, [pc, #40]	; (60e0 <z_reset_time_slice+0x44>)
    60b6:	2200      	movs	r2, #0
	if (sliceable(curr)) {
    60b8:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    60ba:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    60bc:	f7ff ffc0 	bl	6040 <sliceable>
    60c0:	b148      	cbz	r0, 60d6 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    60c2:	4b08      	ldr	r3, [pc, #32]	; (60e4 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    60c4:	4908      	ldr	r1, [pc, #32]	; (60e8 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    60c6:	681a      	ldr	r2, [r3, #0]
    60c8:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    60ca:	4620      	mov	r0, r4
    60cc:	17d3      	asrs	r3, r2, #31
	}
}
    60ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    60d2:	f000 bb57 	b.w	6784 <z_add_timeout>
}
    60d6:	bd70      	pop	{r4, r5, r6, pc}
    60d8:	2000058c 	.word	0x2000058c
    60dc:	200002d0 	.word	0x200002d0
    60e0:	20000bd8 	.word	0x20000bd8
    60e4:	200005b8 	.word	0x200005b8
    60e8:	0000607d 	.word	0x0000607d

000060ec <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    60ec:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    60ee:	4d0d      	ldr	r5, [pc, #52]	; (6124 <update_cache+0x38>)
    60f0:	462b      	mov	r3, r5
    60f2:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    60f6:	429c      	cmp	r4, r3
    60f8:	d000      	beq.n	60fc <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    60fa:	b904      	cbnz	r4, 60fe <update_cache+0x12>
    60fc:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    60fe:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    6100:	b938      	cbnz	r0, 6112 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    6102:	7b5a      	ldrb	r2, [r3, #13]
    6104:	06d2      	lsls	r2, r2, #27
    6106:	d104      	bne.n	6112 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    6108:	69a2      	ldr	r2, [r4, #24]
    610a:	b912      	cbnz	r2, 6112 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    610c:	89da      	ldrh	r2, [r3, #14]
    610e:	2a7f      	cmp	r2, #127	; 0x7f
    6110:	d805      	bhi.n	611e <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    6112:	429c      	cmp	r4, r3
    6114:	d002      	beq.n	611c <update_cache+0x30>
			z_reset_time_slice(thread);
    6116:	4620      	mov	r0, r4
    6118:	f7ff ffc0 	bl	609c <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    611c:	4623      	mov	r3, r4
    611e:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    6120:	bd38      	pop	{r3, r4, r5, pc}
    6122:	bf00      	nop
    6124:	2000058c 	.word	0x2000058c

00006128 <move_thread_to_end_of_prio_q>:
{
    6128:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    612a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    612e:	7b43      	ldrb	r3, [r0, #13]
    6130:	2a00      	cmp	r2, #0
{
    6132:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    6134:	da04      	bge.n	6140 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    613a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    613c:	f001 fc98 	bl	7a70 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    6140:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    6142:	4a15      	ldr	r2, [pc, #84]	; (6198 <move_thread_to_end_of_prio_q+0x70>)
    6144:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6148:	4610      	mov	r0, r2
    614a:	734b      	strb	r3, [r1, #13]
    614c:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    6150:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6152:	4283      	cmp	r3, r0
    6154:	bf08      	it	eq
    6156:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6158:	b923      	cbnz	r3, 6164 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    615a:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    615e:	6021      	str	r1, [r4, #0]
	list->tail = node;
    6160:	6211      	str	r1, [r2, #32]
}
    6162:	e00c      	b.n	617e <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    6164:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    6168:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    616c:	42b5      	cmp	r5, r6
    616e:	d00e      	beq.n	618e <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6170:	42ae      	cmp	r6, r5
    6172:	dd0c      	ble.n	618e <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    6174:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    6176:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    617a:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    617c:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    617e:	6890      	ldr	r0, [r2, #8]
    6180:	1a43      	subs	r3, r0, r1
    6182:	4258      	negs	r0, r3
}
    6184:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    6188:	4158      	adcs	r0, r3
    618a:	f7ff bfaf 	b.w	60ec <update_cache>
	return (node == list->tail) ? NULL : node->next;
    618e:	429c      	cmp	r4, r3
    6190:	d0e3      	beq.n	615a <move_thread_to_end_of_prio_q+0x32>
    6192:	681b      	ldr	r3, [r3, #0]
    6194:	e7e0      	b.n	6158 <move_thread_to_end_of_prio_q+0x30>
    6196:	bf00      	nop
    6198:	2000058c 	.word	0x2000058c

0000619c <ready_thread>:
{
    619c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    619e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    61a2:	7b42      	ldrb	r2, [r0, #13]
    61a4:	2b00      	cmp	r3, #0
    61a6:	db29      	blt.n	61fc <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    61a8:	06d3      	lsls	r3, r2, #27
    61aa:	d127      	bne.n	61fc <ready_thread+0x60>
	return node->next != NULL;
    61ac:	6983      	ldr	r3, [r0, #24]
    61ae:	bb2b      	cbnz	r3, 61fc <ready_thread+0x60>
	return list->head == list;
    61b0:	4913      	ldr	r1, [pc, #76]	; (6200 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    61b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
    61b6:	7342      	strb	r2, [r0, #13]
    61b8:	460a      	mov	r2, r1
    61ba:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    61be:	4294      	cmp	r4, r2
    61c0:	bf18      	it	ne
    61c2:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    61c4:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    61c6:	b923      	cbnz	r3, 61d2 <ready_thread+0x36>
	node->prev = tail;
    61c8:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    61cc:	6020      	str	r0, [r4, #0]
	list->tail = node;
    61ce:	6208      	str	r0, [r1, #32]
}
    61d0:	e00c      	b.n	61ec <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    61d2:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    61d6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    61da:	42b5      	cmp	r5, r6
    61dc:	d00a      	beq.n	61f4 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    61de:	42ae      	cmp	r6, r5
    61e0:	dd08      	ble.n	61f4 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    61e2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    61e4:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    61e8:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    61ea:	6058      	str	r0, [r3, #4]
}
    61ec:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    61ee:	2000      	movs	r0, #0
    61f0:	f7ff bf7c 	b.w	60ec <update_cache>
	return (node == list->tail) ? NULL : node->next;
    61f4:	42a3      	cmp	r3, r4
    61f6:	d0e7      	beq.n	61c8 <ready_thread+0x2c>
    61f8:	681b      	ldr	r3, [r3, #0]
    61fa:	e7e4      	b.n	61c6 <ready_thread+0x2a>
}
    61fc:	bc70      	pop	{r4, r5, r6}
    61fe:	4770      	bx	lr
    6200:	2000058c 	.word	0x2000058c

00006204 <unready_thread>:
{
    6204:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    6206:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    620a:	7b43      	ldrb	r3, [r0, #13]
    620c:	2a00      	cmp	r2, #0
{
    620e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    6210:	da04      	bge.n	621c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6216:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    6218:	f001 fc2a 	bl	7a70 <sys_dlist_remove>
	update_cache(thread == _current);
    621c:	4b04      	ldr	r3, [pc, #16]	; (6230 <unready_thread+0x2c>)
    621e:	6898      	ldr	r0, [r3, #8]
    6220:	1a43      	subs	r3, r0, r1
    6222:	4258      	negs	r0, r3
    6224:	4158      	adcs	r0, r3
}
    6226:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    622a:	f7ff bf5f 	b.w	60ec <update_cache>
    622e:	bf00      	nop
    6230:	2000058c 	.word	0x2000058c

00006234 <pend_locked>:
{
    6234:	b570      	push	{r4, r5, r6, lr}
    6236:	4615      	mov	r5, r2
    6238:	461c      	mov	r4, r3
    623a:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    623c:	f001 fc2a 	bl	7a94 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6240:	f1b4 3fff 	cmp.w	r4, #4294967295
    6244:	bf08      	it	eq
    6246:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    624a:	d008      	beq.n	625e <pend_locked+0x2a>
    624c:	462a      	mov	r2, r5
    624e:	4623      	mov	r3, r4
    6250:	f106 0018 	add.w	r0, r6, #24
    6254:	4902      	ldr	r1, [pc, #8]	; (6260 <pend_locked+0x2c>)
}
    6256:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    625a:	f000 ba93 	b.w	6784 <z_add_timeout>
    625e:	bd70      	pop	{r4, r5, r6, pc}
    6260:	00007b49 	.word	0x00007b49

00006264 <z_time_slice>:
{
    6264:	b538      	push	{r3, r4, r5, lr}
    6266:	f04f 0320 	mov.w	r3, #32
    626a:	f3ef 8511 	mrs	r5, BASEPRI
    626e:	f383 8812 	msr	BASEPRI_MAX, r3
    6272:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    6276:	4b10      	ldr	r3, [pc, #64]	; (62b8 <z_time_slice+0x54>)
	if (pending_current == curr) {
    6278:	4a10      	ldr	r2, [pc, #64]	; (62bc <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    627a:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    627c:	6810      	ldr	r0, [r2, #0]
    627e:	42a0      	cmp	r0, r4
    6280:	d106      	bne.n	6290 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    6282:	f7ff ff0b 	bl	609c <z_reset_time_slice>
	__asm__ volatile(
    6286:	f385 8811 	msr	BASEPRI, r5
    628a:	f3bf 8f6f 	isb	sy
}
    628e:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    6290:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    6292:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    6294:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    6296:	4a0a      	ldr	r2, [pc, #40]	; (62c0 <z_time_slice+0x5c>)
    6298:	5cd3      	ldrb	r3, [r2, r3]
    629a:	2b00      	cmp	r3, #0
    629c:	d0f3      	beq.n	6286 <z_time_slice+0x22>
    629e:	4620      	mov	r0, r4
    62a0:	f7ff fece 	bl	6040 <sliceable>
    62a4:	2800      	cmp	r0, #0
    62a6:	d0ee      	beq.n	6286 <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    62a8:	7b63      	ldrb	r3, [r4, #13]
    62aa:	06db      	lsls	r3, r3, #27
    62ac:	d102      	bne.n	62b4 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    62ae:	4620      	mov	r0, r4
    62b0:	f7ff ff3a 	bl	6128 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    62b4:	4620      	mov	r0, r4
    62b6:	e7e4      	b.n	6282 <z_time_slice+0x1e>
    62b8:	2000058c 	.word	0x2000058c
    62bc:	200005b0 	.word	0x200005b0
    62c0:	20000bd8 	.word	0x20000bd8

000062c4 <z_pend_curr>:
{
    62c4:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    62c6:	480c      	ldr	r0, [pc, #48]	; (62f8 <z_pend_curr+0x34>)
    62c8:	4d0c      	ldr	r5, [pc, #48]	; (62fc <z_pend_curr+0x38>)
    62ca:	6886      	ldr	r6, [r0, #8]
    62cc:	602e      	str	r6, [r5, #0]
{
    62ce:	460c      	mov	r4, r1
    62d0:	4611      	mov	r1, r2
    62d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    62d6:	f04f 0620 	mov.w	r6, #32
    62da:	f3ef 8511 	mrs	r5, BASEPRI
    62de:	f386 8812 	msr	BASEPRI_MAX, r6
    62e2:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    62e6:	6880      	ldr	r0, [r0, #8]
    62e8:	f7ff ffa4 	bl	6234 <pend_locked>
	ret = arch_swap(key);
    62ec:	4620      	mov	r0, r4
}
    62ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    62f2:	f7fc bd3b 	b.w	2d6c <arch_swap>
    62f6:	bf00      	nop
    62f8:	2000058c 	.word	0x2000058c
    62fc:	200005b0 	.word	0x200005b0

00006300 <z_set_prio>:
{
    6300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6302:	4604      	mov	r4, r0
    6304:	f04f 0320 	mov.w	r3, #32
    6308:	f3ef 8611 	mrs	r6, BASEPRI
    630c:	f383 8812 	msr	BASEPRI_MAX, r3
    6310:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    6314:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6316:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    6318:	b249      	sxtb	r1, r1
    631a:	d119      	bne.n	6350 <z_set_prio+0x50>
	return node->next != NULL;
    631c:	6985      	ldr	r5, [r0, #24]
    631e:	b9bd      	cbnz	r5, 6350 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6324:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    6326:	f001 fba3 	bl	7a70 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    632a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    632c:	4a16      	ldr	r2, [pc, #88]	; (6388 <z_set_prio+0x88>)
				thread->base.prio = prio;
    632e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    6330:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6334:	7343      	strb	r3, [r0, #13]
    6336:	4613      	mov	r3, r2
    6338:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    633c:	4298      	cmp	r0, r3
    633e:	bf18      	it	ne
    6340:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    6342:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6344:	b95d      	cbnz	r5, 635e <z_set_prio+0x5e>
	node->prev = tail;
    6346:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    634a:	6004      	str	r4, [r0, #0]
	list->tail = node;
    634c:	6214      	str	r4, [r2, #32]
}
    634e:	e011      	b.n	6374 <z_set_prio+0x74>
			thread->base.prio = prio;
    6350:	73a1      	strb	r1, [r4, #14]
    6352:	2000      	movs	r0, #0
	__asm__ volatile(
    6354:	f386 8811 	msr	BASEPRI, r6
    6358:	f3bf 8f6f 	isb	sy
}
    635c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    635e:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    6362:	42b9      	cmp	r1, r7
    6364:	d00b      	beq.n	637e <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6366:	428f      	cmp	r7, r1
    6368:	dd09      	ble.n	637e <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    636a:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    636c:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    6370:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    6372:	606c      	str	r4, [r5, #4]
			update_cache(1);
    6374:	2001      	movs	r0, #1
    6376:	f7ff feb9 	bl	60ec <update_cache>
    637a:	2001      	movs	r0, #1
    637c:	e7ea      	b.n	6354 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    637e:	42a8      	cmp	r0, r5
    6380:	d0e1      	beq.n	6346 <z_set_prio+0x46>
    6382:	682d      	ldr	r5, [r5, #0]
    6384:	e7de      	b.n	6344 <z_set_prio+0x44>
    6386:	bf00      	nop
    6388:	2000058c 	.word	0x2000058c

0000638c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    638c:	b949      	cbnz	r1, 63a2 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    638e:	f3ef 8005 	mrs	r0, IPSR
    6392:	b930      	cbnz	r0, 63a2 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    6394:	4b05      	ldr	r3, [pc, #20]	; (63ac <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    6396:	699a      	ldr	r2, [r3, #24]
    6398:	689b      	ldr	r3, [r3, #8]
    639a:	429a      	cmp	r2, r3
    639c:	d001      	beq.n	63a2 <z_reschedule+0x16>
    639e:	f7fc bce5 	b.w	2d6c <arch_swap>
    63a2:	f381 8811 	msr	BASEPRI, r1
    63a6:	f3bf 8f6f 	isb	sy
}
    63aa:	4770      	bx	lr
    63ac:	2000058c 	.word	0x2000058c

000063b0 <z_sched_start>:
{
    63b0:	b510      	push	{r4, lr}
	__asm__ volatile(
    63b2:	f04f 0220 	mov.w	r2, #32
    63b6:	f3ef 8411 	mrs	r4, BASEPRI
    63ba:	f382 8812 	msr	BASEPRI_MAX, r2
    63be:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    63c2:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    63c4:	0751      	lsls	r1, r2, #29
    63c6:	d404      	bmi.n	63d2 <z_sched_start+0x22>
	__asm__ volatile(
    63c8:	f384 8811 	msr	BASEPRI, r4
    63cc:	f3bf 8f6f 	isb	sy
}
    63d0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    63d2:	f022 0204 	bic.w	r2, r2, #4
    63d6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    63d8:	f7ff fee0 	bl	619c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    63dc:	4621      	mov	r1, r4
    63de:	4802      	ldr	r0, [pc, #8]	; (63e8 <z_sched_start+0x38>)
}
    63e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    63e4:	f7ff bfd2 	b.w	638c <z_reschedule>
    63e8:	20000bd9 	.word	0x20000bd9

000063ec <z_impl_k_thread_suspend>:
{
    63ec:	b570      	push	{r4, r5, r6, lr}
    63ee:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    63f0:	3018      	adds	r0, #24
    63f2:	f001 fbdf 	bl	7bb4 <z_abort_timeout>
	__asm__ volatile(
    63f6:	f04f 0320 	mov.w	r3, #32
    63fa:	f3ef 8611 	mrs	r6, BASEPRI
    63fe:	f383 8812 	msr	BASEPRI_MAX, r3
    6402:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    6406:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    640a:	7b63      	ldrb	r3, [r4, #13]
    640c:	2a00      	cmp	r2, #0
    640e:	da05      	bge.n	641c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6414:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    6416:	4620      	mov	r0, r4
    6418:	f001 fb2a 	bl	7a70 <sys_dlist_remove>
		update_cache(thread == _current);
    641c:	4d0b      	ldr	r5, [pc, #44]	; (644c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    641e:	7b63      	ldrb	r3, [r4, #13]
    6420:	68a8      	ldr	r0, [r5, #8]
    6422:	f043 0310 	orr.w	r3, r3, #16
    6426:	7363      	strb	r3, [r4, #13]
    6428:	1b03      	subs	r3, r0, r4
    642a:	4258      	negs	r0, r3
    642c:	4158      	adcs	r0, r3
    642e:	f7ff fe5d 	bl	60ec <update_cache>
	__asm__ volatile(
    6432:	f386 8811 	msr	BASEPRI, r6
    6436:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    643a:	68ab      	ldr	r3, [r5, #8]
    643c:	42a3      	cmp	r3, r4
    643e:	d103      	bne.n	6448 <z_impl_k_thread_suspend+0x5c>
}
    6440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    6444:	f001 bbac 	b.w	7ba0 <z_reschedule_unlocked>
}
    6448:	bd70      	pop	{r4, r5, r6, pc}
    644a:	bf00      	nop
    644c:	2000058c 	.word	0x2000058c

00006450 <k_sched_lock>:
	__asm__ volatile(
    6450:	f04f 0320 	mov.w	r3, #32
    6454:	f3ef 8111 	mrs	r1, BASEPRI
    6458:	f383 8812 	msr	BASEPRI_MAX, r3
    645c:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    6460:	4b04      	ldr	r3, [pc, #16]	; (6474 <k_sched_lock+0x24>)
    6462:	689a      	ldr	r2, [r3, #8]
    6464:	7bd3      	ldrb	r3, [r2, #15]
    6466:	3b01      	subs	r3, #1
    6468:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    646a:	f381 8811 	msr	BASEPRI, r1
    646e:	f3bf 8f6f 	isb	sy
}
    6472:	4770      	bx	lr
    6474:	2000058c 	.word	0x2000058c

00006478 <k_sched_unlock>:
{
    6478:	b510      	push	{r4, lr}
	__asm__ volatile(
    647a:	f04f 0320 	mov.w	r3, #32
    647e:	f3ef 8411 	mrs	r4, BASEPRI
    6482:	f383 8812 	msr	BASEPRI_MAX, r3
    6486:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    648a:	4b08      	ldr	r3, [pc, #32]	; (64ac <k_sched_unlock+0x34>)
    648c:	689a      	ldr	r2, [r3, #8]
    648e:	7bd3      	ldrb	r3, [r2, #15]
    6490:	3301      	adds	r3, #1
    6492:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    6494:	2000      	movs	r0, #0
    6496:	f7ff fe29 	bl	60ec <update_cache>
	__asm__ volatile(
    649a:	f384 8811 	msr	BASEPRI, r4
    649e:	f3bf 8f6f 	isb	sy
}
    64a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    64a6:	f001 bb7b 	b.w	7ba0 <z_reschedule_unlocked>
    64aa:	bf00      	nop
    64ac:	2000058c 	.word	0x2000058c

000064b0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    64b0:	4b02      	ldr	r3, [pc, #8]	; (64bc <z_sched_init+0xc>)
    64b2:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    64b6:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    64ba:	4770      	bx	lr
    64bc:	2000058c 	.word	0x2000058c

000064c0 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    64c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    64c2:	f04f 0320 	mov.w	r3, #32
    64c6:	f3ef 8511 	mrs	r5, BASEPRI
    64ca:	f383 8812 	msr	BASEPRI_MAX, r3
    64ce:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    64d2:	4919      	ldr	r1, [pc, #100]	; (6538 <z_impl_k_yield+0x78>)
    64d4:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    64d6:	7b43      	ldrb	r3, [r0, #13]
    64d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    64dc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    64de:	f001 fac7 	bl	7a70 <sys_dlist_remove>
	}
	queue_thread(_current);
    64e2:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    64e4:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    64e6:	4608      	mov	r0, r1
    64e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
    64ec:	735a      	strb	r2, [r3, #13]
    64ee:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    64f2:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    64f4:	4282      	cmp	r2, r0
    64f6:	bf08      	it	eq
    64f8:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    64fa:	b922      	cbnz	r2, 6506 <z_impl_k_yield+0x46>
	node->prev = tail;
    64fc:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    6500:	6023      	str	r3, [r4, #0]
	list->tail = node;
    6502:	620b      	str	r3, [r1, #32]
}
    6504:	e00c      	b.n	6520 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    6506:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    650a:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    650e:	42be      	cmp	r6, r7
    6510:	d00e      	beq.n	6530 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6512:	42b7      	cmp	r7, r6
    6514:	dd0c      	ble.n	6530 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    6516:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    6518:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    651c:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    651e:	6053      	str	r3, [r2, #4]
	update_cache(1);
    6520:	2001      	movs	r0, #1
    6522:	f7ff fde3 	bl	60ec <update_cache>
    6526:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    6528:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    652c:	f7fc bc1e 	b.w	2d6c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    6530:	42a2      	cmp	r2, r4
    6532:	d0e3      	beq.n	64fc <z_impl_k_yield+0x3c>
    6534:	6812      	ldr	r2, [r2, #0]
    6536:	e7e0      	b.n	64fa <z_impl_k_yield+0x3a>
    6538:	2000058c 	.word	0x2000058c

0000653c <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    653c:	ea50 0301 	orrs.w	r3, r0, r1
{
    6540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6544:	4605      	mov	r5, r0
    6546:	460e      	mov	r6, r1
	if (ticks == 0) {
    6548:	d103      	bne.n	6552 <z_tick_sleep+0x16>
	z_impl_k_yield();
    654a:	f7ff ffb9 	bl	64c0 <z_impl_k_yield>
		k_yield();
		return 0;
    654e:	2000      	movs	r0, #0
    6550:	e02c      	b.n	65ac <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    6552:	1c83      	adds	r3, r0, #2
    6554:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    6558:	db2a      	blt.n	65b0 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    655a:	f001 fb51 	bl	7c00 <sys_clock_tick_get_32>
    655e:	182c      	adds	r4, r5, r0
    6560:	f04f 0320 	mov.w	r3, #32
    6564:	f3ef 8811 	mrs	r8, BASEPRI
    6568:	f383 8812 	msr	BASEPRI_MAX, r3
    656c:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    6570:	4f11      	ldr	r7, [pc, #68]	; (65b8 <z_tick_sleep+0x7c>)
    6572:	4b12      	ldr	r3, [pc, #72]	; (65bc <z_tick_sleep+0x80>)
    6574:	68b8      	ldr	r0, [r7, #8]
    6576:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    6578:	f7ff fe44 	bl	6204 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    657c:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    657e:	4910      	ldr	r1, [pc, #64]	; (65c0 <z_tick_sleep+0x84>)
    6580:	462a      	mov	r2, r5
    6582:	4633      	mov	r3, r6
    6584:	3018      	adds	r0, #24
    6586:	f000 f8fd 	bl	6784 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    658a:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    658c:	7b53      	ldrb	r3, [r2, #13]
    658e:	f043 0310 	orr.w	r3, r3, #16
    6592:	7353      	strb	r3, [r2, #13]
    6594:	4640      	mov	r0, r8
    6596:	f7fc fbe9 	bl	2d6c <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    659a:	f001 fb31 	bl	7c00 <sys_clock_tick_get_32>
    659e:	1a20      	subs	r0, r4, r0
    65a0:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    65a4:	2801      	cmp	r0, #1
    65a6:	f173 0300 	sbcs.w	r3, r3, #0
    65aa:	dbd0      	blt.n	654e <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    65ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    65b0:	f06f 0401 	mvn.w	r4, #1
    65b4:	1a24      	subs	r4, r4, r0
    65b6:	e7d3      	b.n	6560 <z_tick_sleep+0x24>
    65b8:	2000058c 	.word	0x2000058c
    65bc:	200005b0 	.word	0x200005b0
    65c0:	00007b49 	.word	0x00007b49

000065c4 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    65c4:	f1b1 3fff 	cmp.w	r1, #4294967295
    65c8:	bf08      	it	eq
    65ca:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    65ce:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    65d0:	d106      	bne.n	65e0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    65d2:	4b08      	ldr	r3, [pc, #32]	; (65f4 <z_impl_k_sleep+0x30>)
    65d4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    65d6:	f7ff ff09 	bl	63ec <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    65da:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    65de:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    65e0:	f7ff ffac 	bl	653c <z_tick_sleep>
    65e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    65e8:	fb80 0303 	smull	r0, r3, r0, r3
    65ec:	0bc0      	lsrs	r0, r0, #15
    65ee:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    65f2:	e7f4      	b.n	65de <z_impl_k_sleep+0x1a>
    65f4:	2000058c 	.word	0x2000058c

000065f8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    65f8:	4b01      	ldr	r3, [pc, #4]	; (6600 <z_impl_z_current_get+0x8>)
    65fa:	6898      	ldr	r0, [r3, #8]
    65fc:	4770      	bx	lr
    65fe:	bf00      	nop
    6600:	2000058c 	.word	0x2000058c

00006604 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    6604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6608:	4604      	mov	r4, r0
    660a:	f04f 0320 	mov.w	r3, #32
    660e:	f3ef 8611 	mrs	r6, BASEPRI
    6612:	f383 8812 	msr	BASEPRI_MAX, r3
    6616:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    661a:	7b03      	ldrb	r3, [r0, #12]
    661c:	07d9      	lsls	r1, r3, #31
    661e:	d50b      	bpl.n	6638 <z_thread_abort+0x34>
	__asm__ volatile(
    6620:	f386 8811 	msr	BASEPRI, r6
    6624:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    6628:	4040      	eors	r0, r0
    662a:	f380 8811 	msr	BASEPRI, r0
    662e:	f04f 0004 	mov.w	r0, #4
    6632:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    6634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    6638:	7b43      	ldrb	r3, [r0, #13]
    663a:	071a      	lsls	r2, r3, #28
    663c:	d504      	bpl.n	6648 <z_thread_abort+0x44>
    663e:	f386 8811 	msr	BASEPRI, r6
    6642:	f3bf 8f6f 	isb	sy
    6646:	e7f5      	b.n	6634 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6648:	f023 0220 	bic.w	r2, r3, #32
    664c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    6650:	09d2      	lsrs	r2, r2, #7
    6652:	d120      	bne.n	6696 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6654:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    6656:	68a3      	ldr	r3, [r4, #8]
    6658:	b113      	cbz	r3, 6660 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    665a:	4620      	mov	r0, r4
    665c:	f001 fa10 	bl	7a80 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    6660:	f104 0018 	add.w	r0, r4, #24
    6664:	f001 faa6 	bl	7bb4 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    6668:	f104 0758 	add.w	r7, r4, #88	; 0x58
    666c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    6670:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6672:	42bd      	cmp	r5, r7
    6674:	d000      	beq.n	6678 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    6676:	b9b5      	cbnz	r5, 66a6 <z_thread_abort+0xa2>
		update_cache(1);
    6678:	2001      	movs	r0, #1
    667a:	f7ff fd37 	bl	60ec <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    667e:	4b10      	ldr	r3, [pc, #64]	; (66c0 <z_thread_abort+0xbc>)
    6680:	689b      	ldr	r3, [r3, #8]
    6682:	42a3      	cmp	r3, r4
    6684:	d1db      	bne.n	663e <z_thread_abort+0x3a>
    6686:	f3ef 8305 	mrs	r3, IPSR
    668a:	2b00      	cmp	r3, #0
    668c:	d1d7      	bne.n	663e <z_thread_abort+0x3a>
    668e:	4630      	mov	r0, r6
    6690:	f7fc fb6c 	bl	2d6c <arch_swap>
	return ret;
    6694:	e7d3      	b.n	663e <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6696:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    669a:	f043 0308 	orr.w	r3, r3, #8
    669e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    66a0:	f001 f9e6 	bl	7a70 <sys_dlist_remove>
}
    66a4:	e7d7      	b.n	6656 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    66a6:	4628      	mov	r0, r5
    66a8:	f001 f9ea 	bl	7a80 <unpend_thread_no_timeout>
    66ac:	f105 0018 	add.w	r0, r5, #24
    66b0:	f001 fa80 	bl	7bb4 <z_abort_timeout>
    66b4:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    66b8:	4628      	mov	r0, r5
    66ba:	f7ff fd6f 	bl	619c <ready_thread>
    66be:	e7d7      	b.n	6670 <z_thread_abort+0x6c>
    66c0:	2000058c 	.word	0x2000058c

000066c4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    66c4:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    66c6:	4806      	ldr	r0, [pc, #24]	; (66e0 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    66c8:	4a06      	ldr	r2, [pc, #24]	; (66e4 <z_data_copy+0x20>)
    66ca:	4907      	ldr	r1, [pc, #28]	; (66e8 <z_data_copy+0x24>)
    66cc:	1a12      	subs	r2, r2, r0
    66ce:	f001 f9b6 	bl	7a3e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    66d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    66d6:	4a05      	ldr	r2, [pc, #20]	; (66ec <z_data_copy+0x28>)
    66d8:	4905      	ldr	r1, [pc, #20]	; (66f0 <z_data_copy+0x2c>)
    66da:	4806      	ldr	r0, [pc, #24]	; (66f4 <z_data_copy+0x30>)
    66dc:	f001 b9af 	b.w	7a3e <z_early_memcpy>
    66e0:	20000000 	.word	0x20000000
    66e4:	200001b0 	.word	0x200001b0
    66e8:	00008bc0 	.word	0x00008bc0
    66ec:	00000000 	.word	0x00000000
    66f0:	00008bc0 	.word	0x00008bc0
    66f4:	20000000 	.word	0x20000000

000066f8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    66f8:	4b03      	ldr	r3, [pc, #12]	; (6708 <elapsed+0x10>)
    66fa:	681b      	ldr	r3, [r3, #0]
    66fc:	b90b      	cbnz	r3, 6702 <elapsed+0xa>
    66fe:	f7fe b929 	b.w	4954 <sys_clock_elapsed>
}
    6702:	2000      	movs	r0, #0
    6704:	4770      	bx	lr
    6706:	bf00      	nop
    6708:	200005bc 	.word	0x200005bc

0000670c <next_timeout>:

static int32_t next_timeout(void)
{
    670c:	b510      	push	{r4, lr}
	return list->head == list;
    670e:	4b0e      	ldr	r3, [pc, #56]	; (6748 <next_timeout+0x3c>)
    6710:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6712:	429c      	cmp	r4, r3
    6714:	d104      	bne.n	6720 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    6716:	f7ff ffef 	bl	66f8 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    671a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    671e:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    6720:	f7ff ffea 	bl	66f8 <elapsed>
	if ((to == NULL) ||
    6724:	2c00      	cmp	r4, #0
    6726:	d0f8      	beq.n	671a <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    6728:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    672c:	1a1b      	subs	r3, r3, r0
    672e:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    6732:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    6736:	f172 0100 	sbcs.w	r1, r2, #0
    673a:	daee      	bge.n	671a <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    673c:	2a00      	cmp	r2, #0
    673e:	bfac      	ite	ge
    6740:	4618      	movge	r0, r3
    6742:	2000      	movlt	r0, #0
	return ret;
    6744:	e7eb      	b.n	671e <next_timeout+0x12>
    6746:	bf00      	nop
    6748:	2000016c 	.word	0x2000016c

0000674c <remove_timeout>:
{
    674c:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    674e:	b170      	cbz	r0, 676e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    6750:	4b0b      	ldr	r3, [pc, #44]	; (6780 <remove_timeout+0x34>)
    6752:	685b      	ldr	r3, [r3, #4]
    6754:	4298      	cmp	r0, r3
    6756:	d00a      	beq.n	676e <remove_timeout+0x22>
    6758:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    675a:	b143      	cbz	r3, 676e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    675c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    6760:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    6764:	1912      	adds	r2, r2, r4
    6766:	eb41 0105 	adc.w	r1, r1, r5
    676a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    676e:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    6772:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6774:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6776:	2300      	movs	r3, #0
	node->prev = NULL;
    6778:	e9c0 3300 	strd	r3, r3, [r0]
}
    677c:	bd30      	pop	{r4, r5, pc}
    677e:	bf00      	nop
    6780:	2000016c 	.word	0x2000016c

00006784 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6784:	f1b3 3fff 	cmp.w	r3, #4294967295
    6788:	bf08      	it	eq
    678a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    678e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6790:	4604      	mov	r4, r0
    6792:	461d      	mov	r5, r3
    6794:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6796:	d05c      	beq.n	6852 <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    6798:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    679a:	f04f 0320 	mov.w	r3, #32
    679e:	f3ef 8711 	mrs	r7, BASEPRI
    67a2:	f383 8812 	msr	BASEPRI_MAX, r3
    67a6:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    67aa:	3201      	adds	r2, #1
    67ac:	f175 33ff 	sbcs.w	r3, r5, #4294967295
    67b0:	da24      	bge.n	67fc <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    67b2:	492d      	ldr	r1, [pc, #180]	; (6868 <z_add_timeout+0xe4>)
    67b4:	e9d1 2000 	ldrd	r2, r0, [r1]
    67b8:	f06f 0301 	mvn.w	r3, #1
    67bc:	1a9b      	subs	r3, r3, r2
    67be:	f04f 32ff 	mov.w	r2, #4294967295
    67c2:	eb62 0000 	sbc.w	r0, r2, r0
    67c6:	1b9e      	subs	r6, r3, r6
    67c8:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    67cc:	2e01      	cmp	r6, #1
    67ce:	f170 0300 	sbcs.w	r3, r0, #0
    67d2:	da01      	bge.n	67d8 <z_add_timeout+0x54>
    67d4:	2601      	movs	r6, #1
    67d6:	2000      	movs	r0, #0
    67d8:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    67dc:	4e23      	ldr	r6, [pc, #140]	; (686c <z_add_timeout+0xe8>)
    67de:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    67e2:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    67e4:	45b4      	cmp	ip, r6
    67e6:	bf08      	it	eq
    67e8:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    67ec:	f1bc 0f00 	cmp.w	ip, #0
    67f0:	d10d      	bne.n	680e <z_add_timeout+0x8a>
	node->prev = tail;
    67f2:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    67f6:	602c      	str	r4, [r5, #0]
	list->tail = node;
    67f8:	6074      	str	r4, [r6, #4]
}
    67fa:	e01c      	b.n	6836 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    67fc:	f7ff ff7c 	bl	66f8 <elapsed>
    6800:	3601      	adds	r6, #1
    6802:	f145 0500 	adc.w	r5, r5, #0
    6806:	1836      	adds	r6, r6, r0
    6808:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    680c:	e7e4      	b.n	67d8 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    680e:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    6812:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    6816:	4293      	cmp	r3, r2
    6818:	eb71 0e00 	sbcs.w	lr, r1, r0
    681c:	da1a      	bge.n	6854 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    681e:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    6820:	f8dc 3004 	ldr.w	r3, [ip, #4]
    6824:	eb60 0001 	sbc.w	r0, r0, r1
    6828:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    682c:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    6830:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    6832:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    6836:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6838:	42b3      	cmp	r3, r6
    683a:	d006      	beq.n	684a <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    683c:	429c      	cmp	r4, r3
    683e:	d104      	bne.n	684a <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    6840:	f7ff ff64 	bl	670c <next_timeout>
    6844:	2100      	movs	r1, #0
    6846:	f7fe f853 	bl	48f0 <sys_clock_set_timeout>
	__asm__ volatile(
    684a:	f387 8811 	msr	BASEPRI, r7
    684e:	f3bf 8f6f 	isb	sy
		}
	}
}
    6852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    6854:	1a9b      	subs	r3, r3, r2
    6856:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    685a:	45ac      	cmp	ip, r5
    685c:	e9c4 3104 	strd	r3, r1, [r4, #16]
    6860:	d0c7      	beq.n	67f2 <z_add_timeout+0x6e>
    6862:	f8dc c000 	ldr.w	ip, [ip]
    6866:	e7c1      	b.n	67ec <z_add_timeout+0x68>
    6868:	200002e8 	.word	0x200002e8
    686c:	2000016c 	.word	0x2000016c

00006870 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    6870:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    6874:	f04f 0320 	mov.w	r3, #32
    6878:	f3ef 8c11 	mrs	ip, BASEPRI
    687c:	f383 8812 	msr	BASEPRI_MAX, r3
    6880:	f3bf 8f6f 	isb	sy
	return list->head == list;
    6884:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 6938 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    6888:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 693c <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
    688c:	4f2c      	ldr	r7, [pc, #176]	; (6940 <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
    688e:	f8c9 0000 	str.w	r0, [r9]
    6892:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    6896:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6898:	4550      	cmp	r0, sl
    689a:	bf08      	it	eq
    689c:	2000      	moveq	r0, #0
    689e:	2500      	movs	r5, #0
		curr_tick += dt;
    68a0:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    68a4:	f8d9 3000 	ldr.w	r3, [r9]
    68a8:	46e0      	mov	r8, ip
    68aa:	b380      	cbz	r0, 690e <sys_clock_announce+0x9e>
    68ac:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    68b0:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    68b4:	42b3      	cmp	r3, r6
    68b6:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    68ba:	da05      	bge.n	68c8 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    68bc:	1af6      	subs	r6, r6, r3
    68be:	eb6c 040e 	sbc.w	r4, ip, lr
    68c2:	e9c0 6404 	strd	r6, r4, [r0, #16]
    68c6:	e022      	b.n	690e <sys_clock_announce+0x9e>
		curr_tick += dt;
    68c8:	18b2      	adds	r2, r6, r2
    68ca:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    68ce:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    68d2:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    68d6:	f7ff ff39 	bl	674c <remove_timeout>
	__asm__ volatile(
    68da:	f388 8811 	msr	BASEPRI, r8
    68de:	f3bf 8f6f 	isb	sy
		t->fn(t);
    68e2:	6883      	ldr	r3, [r0, #8]
    68e4:	4798      	blx	r3
	__asm__ volatile(
    68e6:	f04f 0320 	mov.w	r3, #32
    68ea:	f3ef 8811 	mrs	r8, BASEPRI
    68ee:	f383 8812 	msr	BASEPRI_MAX, r3
    68f2:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    68f6:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    68fa:	f8da 0000 	ldr.w	r0, [sl]
    68fe:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6900:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    6902:	46c4      	mov	ip, r8
    6904:	f8c9 3000 	str.w	r3, [r9]
    6908:	d1ca      	bne.n	68a0 <sys_clock_announce+0x30>
		curr_tick += dt;
    690a:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
    690e:	189a      	adds	r2, r3, r2
    6910:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
    6914:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    6916:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    691a:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    691e:	f7ff fef5 	bl	670c <next_timeout>
    6922:	4621      	mov	r1, r4
    6924:	f7fd ffe4 	bl	48f0 <sys_clock_set_timeout>
	__asm__ volatile(
    6928:	f388 8811 	msr	BASEPRI, r8
    692c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    6930:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    6934:	f7ff bc96 	b.w	6264 <z_time_slice>
    6938:	2000016c 	.word	0x2000016c
    693c:	200005bc 	.word	0x200005bc
    6940:	200002e8 	.word	0x200002e8

00006944 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    6944:	b510      	push	{r4, lr}
	__asm__ volatile(
    6946:	f04f 0320 	mov.w	r3, #32
    694a:	f3ef 8411 	mrs	r4, BASEPRI
    694e:	f383 8812 	msr	BASEPRI_MAX, r3
    6952:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    6956:	f7ff fecf 	bl	66f8 <elapsed>
    695a:	4a06      	ldr	r2, [pc, #24]	; (6974 <sys_clock_tick_get+0x30>)
    695c:	4603      	mov	r3, r0
    695e:	e9d2 0100 	ldrd	r0, r1, [r2]
    6962:	1818      	adds	r0, r3, r0
    6964:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    6968:	f384 8811 	msr	BASEPRI, r4
    696c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    6970:	bd10      	pop	{r4, pc}
    6972:	bf00      	nop
    6974:	200002e8 	.word	0x200002e8

00006978 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    6978:	4801      	ldr	r0, [pc, #4]	; (6980 <boot_banner+0x8>)
    697a:	f000 ba63 	b.w	6e44 <printk>
    697e:	bf00      	nop
    6980:	00008b90 	.word	0x00008b90

00006984 <dwt_writetodevice>:
{
    6984:	b507      	push	{r0, r1, r2, lr}
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
    6986:	b2c0      	uxtb	r0, r0
    if (index == 0) // For index of 0, no sub-index is required
    6988:	b951      	cbnz	r1, 69a0 <dwt_writetodevice+0x1c>
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
    698a:	f060 007f 	orn	r0, r0, #127	; 0x7f
    698e:	f88d 0004 	strb.w	r0, [sp, #4]
    6992:	2001      	movs	r0, #1
    writetospi(cnt,header,length,buffer);
    6994:	a901      	add	r1, sp, #4
    6996:	f7fa f8ad 	bl	af4 <writetospi>
} // end dwt_writetodevice()
    699a:	b003      	add	sp, #12
    699c:	f85d fb04 	ldr.w	pc, [sp], #4
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
    69a0:	f060 003f 	orn	r0, r0, #63	; 0x3f
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
    69a4:	297f      	cmp	r1, #127	; 0x7f
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
    69a6:	f88d 0004 	strb.w	r0, [sp, #4]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
    69aa:	b2c8      	uxtb	r0, r1
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
    69ac:	bf85      	ittet	hi
    69ae:	f060 007f 	ornhi	r0, r0, #127	; 0x7f
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
    69b2:	09c9      	lsrhi	r1, r1, #7
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
    69b4:	f88d 0005 	strbls.w	r0, [sp, #5]
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
    69b8:	f88d 0005 	strbhi.w	r0, [sp, #5]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
    69bc:	bf92      	itee	ls
    69be:	2002      	movls	r0, #2
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
    69c0:	f88d 1006 	strbhi.w	r1, [sp, #6]
    69c4:	2003      	movhi	r0, #3
    69c6:	e7e5      	b.n	6994 <dwt_writetodevice+0x10>

000069c8 <dwt_readfromdevice>:
{
    69c8:	b507      	push	{r0, r1, r2, lr}
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
    69ca:	b2c0      	uxtb	r0, r0
    if (index == 0) // For index of 0, no sub-index is required
    69cc:	b941      	cbnz	r1, 69e0 <dwt_readfromdevice+0x18>
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
    69ce:	f88d 0004 	strb.w	r0, [sp, #4]
    69d2:	2001      	movs	r0, #1
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
    69d4:	a901      	add	r1, sp, #4
    69d6:	f7fa f8c3 	bl	b60 <readfromspi>
} // end dwt_readfromdevice()
    69da:	b003      	add	sp, #12
    69dc:	f85d fb04 	ldr.w	pc, [sp], #4
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
    69e0:	f040 0040 	orr.w	r0, r0, #64	; 0x40
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
    69e4:	297f      	cmp	r1, #127	; 0x7f
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
    69e6:	f88d 0004 	strb.w	r0, [sp, #4]
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
    69ea:	b2c8      	uxtb	r0, r1
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
    69ec:	bf85      	ittet	hi
    69ee:	f060 007f 	ornhi	r0, r0, #127	; 0x7f
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
    69f2:	09c9      	lsrhi	r1, r1, #7
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
    69f4:	f88d 0005 	strbls.w	r0, [sp, #5]
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
    69f8:	f88d 0005 	strbhi.w	r0, [sp, #5]
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
    69fc:	bf92      	itee	ls
    69fe:	2002      	movls	r0, #2
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
    6a00:	f88d 1006 	strbhi.w	r1, [sp, #6]
    6a04:	2003      	movhi	r0, #3
    6a06:	e7e5      	b.n	69d4 <dwt_readfromdevice+0xc>

00006a08 <dwt_read32bitoffsetreg>:
{
    6a08:	b513      	push	{r0, r1, r4, lr}
    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
    6a0a:	ac01      	add	r4, sp, #4
    6a0c:	2204      	movs	r2, #4
    6a0e:	b280      	uxth	r0, r0
    6a10:	4623      	mov	r3, r4
    6a12:	b289      	uxth	r1, r1
    6a14:	f7ff ffd8 	bl	69c8 <dwt_readfromdevice>
    for (j = 3 ; j >= 0 ; j --)
    6a18:	2203      	movs	r2, #3
    uint32  regval = 0 ;
    6a1a:	2000      	movs	r0, #0
        regval = (regval << 8) + buffer[j] ;
    6a1c:	5ca3      	ldrb	r3, [r4, r2]
    for (j = 3 ; j >= 0 ; j --)
    6a1e:	3a01      	subs	r2, #1
        regval = (regval << 8) + buffer[j] ;
    6a20:	eb03 2000 	add.w	r0, r3, r0, lsl #8
    for (j = 3 ; j >= 0 ; j --)
    6a24:	d2fa      	bcs.n	6a1c <dwt_read32bitoffsetreg+0x14>
} // end dwt_read32bitoffsetreg()
    6a26:	b002      	add	sp, #8
    6a28:	bd10      	pop	{r4, pc}

00006a2a <dwt_readdevid>:
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
    6a2a:	2100      	movs	r1, #0
    6a2c:	4608      	mov	r0, r1
    6a2e:	f7ff bfeb 	b.w	6a08 <dwt_read32bitoffsetreg>

00006a32 <dwt_read16bitoffsetreg>:
{
    6a32:	b507      	push	{r0, r1, r2, lr}
    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
    6a34:	2202      	movs	r2, #2
    6a36:	ab01      	add	r3, sp, #4
    6a38:	b289      	uxth	r1, r1
    6a3a:	b280      	uxth	r0, r0
    6a3c:	f7ff ffc4 	bl	69c8 <dwt_readfromdevice>
} // end dwt_read16bitoffsetreg()
    6a40:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    6a44:	b003      	add	sp, #12
    6a46:	f85d fb04 	ldr.w	pc, [sp], #4

00006a4a <dwt_read8bitoffsetreg>:
{
    6a4a:	b507      	push	{r0, r1, r2, lr}
    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
    6a4c:	2201      	movs	r2, #1
    6a4e:	f10d 0307 	add.w	r3, sp, #7
    6a52:	b289      	uxth	r1, r1
    6a54:	b280      	uxth	r0, r0
    6a56:	f7ff ffb7 	bl	69c8 <dwt_readfromdevice>
}
    6a5a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    6a5e:	b003      	add	sp, #12
    6a60:	f85d fb04 	ldr.w	pc, [sp], #4

00006a64 <dwt_write8bitoffsetreg>:
{
    6a64:	b507      	push	{r0, r1, r2, lr}
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
    6a66:	b289      	uxth	r1, r1
{
    6a68:	f88d 2007 	strb.w	r2, [sp, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
    6a6c:	f10d 0307 	add.w	r3, sp, #7
    6a70:	2201      	movs	r2, #1
    6a72:	b280      	uxth	r0, r0
    6a74:	f7ff ff86 	bl	6984 <dwt_writetodevice>
}
    6a78:	b003      	add	sp, #12
    6a7a:	f85d fb04 	ldr.w	pc, [sp], #4

00006a7e <dwt_write16bitoffsetreg>:
{
    6a7e:	b507      	push	{r0, r1, r2, lr}
    dwt_writetodevice(regFileID,regOffset,2,buffer);
    6a80:	b289      	uxth	r1, r1
    buffer[0] = regval & 0xFF;
    6a82:	f8ad 2004 	strh.w	r2, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
    6a86:	ab01      	add	r3, sp, #4
    6a88:	2202      	movs	r2, #2
    6a8a:	b280      	uxth	r0, r0
    6a8c:	f7ff ff7a 	bl	6984 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
    6a90:	b003      	add	sp, #12
    6a92:	f85d fb04 	ldr.w	pc, [sp], #4

00006a96 <dwt_setrxantennadelay>:
{
    6a96:	4602      	mov	r2, r0
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
    6a98:	f641 0104 	movw	r1, #6148	; 0x1804
    6a9c:	202e      	movs	r0, #46	; 0x2e
    6a9e:	f7ff bfee 	b.w	6a7e <dwt_write16bitoffsetreg>

00006aa2 <dwt_settxantennadelay>:
{
    6aa2:	4602      	mov	r2, r0
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
    6aa4:	2100      	movs	r1, #0
    6aa6:	2018      	movs	r0, #24
    6aa8:	f7ff bfe9 	b.w	6a7e <dwt_write16bitoffsetreg>

00006aac <dwt_write32bitoffsetreg>:
{
    6aac:	b507      	push	{r0, r1, r2, lr}
    dwt_writetodevice(regFileID,regOffset,4,buffer);
    6aae:	b289      	uxth	r1, r1
        buffer[j] = regval & 0xff ;
    6ab0:	9201      	str	r2, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
    6ab2:	ab01      	add	r3, sp, #4
    6ab4:	2204      	movs	r2, #4
    6ab6:	b280      	uxth	r0, r0
    6ab8:	f7ff ff64 	bl	6984 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
    6abc:	b003      	add	sp, #12
    6abe:	f85d fb04 	ldr.w	pc, [sp], #4

00006ac2 <_dwt_otpread>:
{
    6ac2:	b508      	push	{r3, lr}
    6ac4:	4602      	mov	r2, r0
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
    6ac6:	2104      	movs	r1, #4
    6ac8:	202d      	movs	r0, #45	; 0x2d
    6aca:	f7ff ffd8 	bl	6a7e <dwt_write16bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
    6ace:	2203      	movs	r2, #3
    6ad0:	2106      	movs	r1, #6
    6ad2:	202d      	movs	r0, #45	; 0x2d
    6ad4:	f7ff ffc6 	bl	6a64 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
    6ad8:	2106      	movs	r1, #6
    6ada:	202d      	movs	r0, #45	; 0x2d
    6adc:	2200      	movs	r2, #0
    6ade:	f7ff ffc1 	bl	6a64 <dwt_write8bitoffsetreg>
}
    6ae2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
    6ae6:	210a      	movs	r1, #10
    6ae8:	202d      	movs	r0, #45	; 0x2d
    6aea:	f7ff bf8d 	b.w	6a08 <dwt_read32bitoffsetreg>

00006aee <_dwt_aonarrayupload>:
{
    6aee:	b508      	push	{r3, lr}
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
    6af0:	2200      	movs	r2, #0
    6af2:	2102      	movs	r1, #2
    6af4:	202c      	movs	r0, #44	; 0x2c
    6af6:	f7ff ffb5 	bl	6a64 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
    6afa:	2202      	movs	r2, #2
}
    6afc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
    6b00:	4611      	mov	r1, r2
    6b02:	202c      	movs	r0, #44	; 0x2c
    6b04:	f7ff bfae 	b.w	6a64 <dwt_write8bitoffsetreg>

00006b08 <_dwt_configlde>:
{
    6b08:	b510      	push	{r4, lr}
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
    6b0a:	226d      	movs	r2, #109	; 0x6d
{
    6b0c:	4604      	mov	r4, r0
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
    6b0e:	f640 0106 	movw	r1, #2054	; 0x806
    6b12:	202e      	movs	r0, #46	; 0x2e
    6b14:	f7ff ffa6 	bl	6a64 <dwt_write8bitoffsetreg>
    if(prfIndex)
    6b18:	b144      	cbz	r4, 6b2c <_dwt_configlde+0x24>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
    6b1a:	f240 6207 	movw	r2, #1543	; 0x607
}
    6b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    6b22:	f641 0106 	movw	r1, #6150	; 0x1806
    6b26:	202e      	movs	r0, #46	; 0x2e
    6b28:	f7ff bfa9 	b.w	6a7e <dwt_write16bitoffsetreg>
    6b2c:	f241 6207 	movw	r2, #5639	; 0x1607
    6b30:	e7f5      	b.n	6b1e <_dwt_configlde+0x16>

00006b32 <_dwt_enableclocks>:
{
    6b32:	b513      	push	{r0, r1, r4, lr}
    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
    6b34:	2202      	movs	r2, #2
{
    6b36:	4604      	mov	r4, r0
    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
    6b38:	ab01      	add	r3, sp, #4
    6b3a:	2100      	movs	r1, #0
    6b3c:	2036      	movs	r0, #54	; 0x36
    6b3e:	f7ff ff43 	bl	69c8 <dwt_readfromdevice>
    switch(clocks)
    6b42:	2c0e      	cmp	r4, #14
    6b44:	d81b      	bhi.n	6b7e <_dwt_enableclocks+0x4c>
    6b46:	e8df f004 	tbb	[pc, r4]
    6b4a:	0812      	.short	0x0812
    6b4c:	1a1a1a29 	.word	0x1a1a1a29
    6b50:	1a3d301a 	.word	0x1a3d301a
    6b54:	504b461a 	.word	0x504b461a
    6b58:	57          	.byte	0x57
    6b59:	00          	.byte	0x00
            reg[0] = 0x00 ;
    6b5a:	2300      	movs	r3, #0
    6b5c:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = reg[1] & 0xfe;
    6b60:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6b64:	f023 0301 	bic.w	r3, r3, #1
            reg[1] = 0x80 | reg[1];
    6b68:	f88d 3005 	strb.w	r3, [sp, #5]
        break;
    6b6c:	e007      	b.n	6b7e <_dwt_enableclocks+0x4c>
            reg[0] = 0x01 | (reg[0] & 0xfc);
    6b6e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6b72:	f023 0303 	bic.w	r3, r3, #3
    6b76:	f043 0301 	orr.w	r3, r3, #1
            reg[0] = 0x02 | (reg[0] & 0xfc);
    6b7a:	f88d 3004 	strb.w	r3, [sp, #4]
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
    6b7e:	ab01      	add	r3, sp, #4
    6b80:	2201      	movs	r2, #1
    6b82:	2100      	movs	r1, #0
    6b84:	2036      	movs	r0, #54	; 0x36
    6b86:	f7ff fefd 	bl	6984 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
    6b8a:	2201      	movs	r2, #1
    6b8c:	f10d 0305 	add.w	r3, sp, #5
    6b90:	4611      	mov	r1, r2
    6b92:	2036      	movs	r0, #54	; 0x36
    6b94:	f7ff fef6 	bl	6984 <dwt_writetodevice>
} // end _dwt_enableclocks()
    6b98:	b002      	add	sp, #8
    6b9a:	bd10      	pop	{r4, pc}
            reg[0] = 0x02 | (reg[0] & 0xfc);
    6b9c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6ba0:	f023 0303 	bic.w	r3, r3, #3
    6ba4:	f043 0302 	orr.w	r3, r3, #2
    6ba8:	e7e7      	b.n	6b7a <_dwt_enableclocks+0x48>
            reg[0] = 0x48 | (reg[0] & 0xb3);
    6baa:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6bae:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
    6bb2:	f043 0348 	orr.w	r3, r3, #72	; 0x48
    6bb6:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = 0x80 | reg[1];
    6bba:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6bbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6bc2:	e7d1      	b.n	6b68 <_dwt_enableclocks+0x36>
            reg[0] = reg[0] & 0xb3;
    6bc4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6bc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    6bcc:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
            reg[0] = 0x01;
    6bd0:	f8ad 3004 	strh.w	r3, [sp, #4]
        break;
    6bd4:	e7d3      	b.n	6b7e <_dwt_enableclocks+0x4c>
            reg[1] = 0x02 | reg[1];
    6bd6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6bda:	f043 0302 	orr.w	r3, r3, #2
    6bde:	e7c3      	b.n	6b68 <_dwt_enableclocks+0x36>
            reg[1] = reg[1] & 0xfd;
    6be0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6be4:	f023 0302 	bic.w	r3, r3, #2
    6be8:	e7be      	b.n	6b68 <_dwt_enableclocks+0x36>
            reg[0] = 0x20 | (reg[0] & 0xcf);
    6bea:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6bee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    6bf2:	f043 0320 	orr.w	r3, r3, #32
    6bf6:	e7c0      	b.n	6b7a <_dwt_enableclocks+0x48>
            reg[0] = 0x01;
    6bf8:	f240 3301 	movw	r3, #769	; 0x301
    6bfc:	e7e8      	b.n	6bd0 <_dwt_enableclocks+0x9e>

00006bfe <_dwt_loaducodefromrom>:
{
    6bfe:	b508      	push	{r3, lr}
    _dwt_enableclocks(FORCE_LDE);
    6c00:	200e      	movs	r0, #14
    6c02:	f7ff ff96 	bl	6b32 <_dwt_enableclocks>
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
    6c06:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    6c0a:	2106      	movs	r1, #6
    6c0c:	202d      	movs	r0, #45	; 0x2d
    6c0e:	f7ff ff36 	bl	6a7e <dwt_write16bitoffsetreg>
    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
    6c12:	2001      	movs	r0, #1
    6c14:	f000 f87f 	bl	6d16 <deca_sleep>
}
    6c18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
    6c1c:	2001      	movs	r0, #1
    6c1e:	f7ff bf88 	b.w	6b32 <_dwt_enableclocks>

00006c22 <_dwt_disablesequencing>:
{
    6c22:	b508      	push	{r3, lr}
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
    6c24:	2000      	movs	r0, #0
    6c26:	f7ff ff84 	bl	6b32 <_dwt_enableclocks>
}
    6c2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
    6c2e:	2200      	movs	r2, #0
    6c30:	2104      	movs	r1, #4
    6c32:	2036      	movs	r0, #54	; 0x36
    6c34:	f7ff bf23 	b.w	6a7e <dwt_write16bitoffsetreg>

00006c38 <dwt_syncrxbufptrs>:
{
    6c38:	b508      	push	{r3, lr}
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
    6c3a:	2103      	movs	r1, #3
    6c3c:	200f      	movs	r0, #15
    6c3e:	f7ff ff04 	bl	6a4a <dwt_read8bitoffsetreg>
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
    6c42:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
    6c46:	0603      	lsls	r3, r0, #24
    6c48:	d506      	bpl.n	6c58 <dwt_syncrxbufptrs+0x20>
}
    6c4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
    6c4e:	2201      	movs	r2, #1
    6c50:	2103      	movs	r1, #3
    6c52:	200d      	movs	r0, #13
    6c54:	f7ff bf06 	b.w	6a64 <dwt_write8bitoffsetreg>
}
    6c58:	bd08      	pop	{r3, pc}

00006c5a <dwt_rxenable>:
    if ((mode & DWT_NO_SYNC_PTRS) == 0)
    6c5a:	0742      	lsls	r2, r0, #29
{
    6c5c:	b510      	push	{r4, lr}
    6c5e:	4604      	mov	r4, r0
    if ((mode & DWT_NO_SYNC_PTRS) == 0)
    6c60:	d401      	bmi.n	6c66 <dwt_rxenable+0xc>
        dwt_syncrxbufptrs();
    6c62:	f7ff ffe9 	bl	6c38 <dwt_syncrxbufptrs>
    if (mode & DWT_START_RX_DELAYED)
    6c66:	f014 0101 	ands.w	r1, r4, #1
    6c6a:	d106      	bne.n	6c7a <dwt_rxenable+0x20>
    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
    6c6c:	f44f 7280 	mov.w	r2, #256	; 0x100
    6c70:	200d      	movs	r0, #13
    6c72:	f7ff ff04 	bl	6a7e <dwt_write16bitoffsetreg>
    return DWT_SUCCESS;
    6c76:	2000      	movs	r0, #0
} // end dwt_rxenable()
    6c78:	bd10      	pop	{r4, pc}
    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
    6c7a:	f44f 7240 	mov.w	r2, #768	; 0x300
    6c7e:	2100      	movs	r1, #0
    6c80:	200d      	movs	r0, #13
    6c82:	f7ff fefc 	bl	6a7e <dwt_write16bitoffsetreg>
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
    6c86:	2103      	movs	r1, #3
    6c88:	200f      	movs	r0, #15
    6c8a:	f7ff fede 	bl	6a4a <dwt_read8bitoffsetreg>
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
    6c8e:	0703      	lsls	r3, r0, #28
    6c90:	d5f1      	bpl.n	6c76 <dwt_rxenable+0x1c>
            dwt_forcetrxoff(); // turn the delayed receive off
    6c92:	f7f9 fccb 	bl	62c <dwt_forcetrxoff>
            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
    6c96:	f014 0102 	ands.w	r1, r4, #2
    6c9a:	d104      	bne.n	6ca6 <dwt_rxenable+0x4c>
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
    6c9c:	f44f 7280 	mov.w	r2, #256	; 0x100
    6ca0:	200d      	movs	r0, #13
    6ca2:	f7ff feec 	bl	6a7e <dwt_write16bitoffsetreg>
            return DWT_ERROR; // return warning indication
    6ca6:	f04f 30ff 	mov.w	r0, #4294967295
    6caa:	e7e5      	b.n	6c78 <dwt_rxenable+0x1e>

00006cac <dwt_setinterrupt>:
{
    6cac:	b570      	push	{r4, r5, r6, lr}
    6cae:	460d      	mov	r5, r1
    6cb0:	4604      	mov	r4, r0
    stat = decamutexon() ;
    6cb2:	f000 f82d 	bl	6d10 <decamutexon>
    if(operation == 2)
    6cb6:	2d02      	cmp	r5, #2
    stat = decamutexon() ;
    6cb8:	4606      	mov	r6, r0
    if(operation == 2)
    6cba:	d109      	bne.n	6cd0 <dwt_setinterrupt+0x24>
        dwt_write32bitreg(SYS_MASK_ID, bitmask) ; // New value
    6cbc:	4622      	mov	r2, r4
        dwt_write32bitreg(SYS_MASK_ID, mask) ; // New value
    6cbe:	200e      	movs	r0, #14
    6cc0:	2100      	movs	r1, #0
    6cc2:	f7ff fef3 	bl	6aac <dwt_write32bitoffsetreg>
    decamutexoff(stat) ;
    6cc6:	4630      	mov	r0, r6
}
    6cc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    decamutexoff(stat) ;
    6ccc:	f000 b822 	b.w	6d14 <decamutexoff>
        mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read register
    6cd0:	2100      	movs	r1, #0
    6cd2:	200e      	movs	r0, #14
    6cd4:	f7ff fe98 	bl	6a08 <dwt_read32bitoffsetreg>
        if(operation == 1)
    6cd8:	2d01      	cmp	r5, #1
            mask |= bitmask ;
    6cda:	bf0c      	ite	eq
    6cdc:	ea40 0204 	orreq.w	r2, r0, r4
            mask &= ~bitmask ; // Clear the bit
    6ce0:	ea20 0204 	bicne.w	r2, r0, r4
    6ce4:	e7eb      	b.n	6cbe <dwt_setinterrupt+0x12>

00006ce6 <dwt_rxreset>:
{
    6ce6:	b508      	push	{r3, lr}
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
    6ce8:	22e0      	movs	r2, #224	; 0xe0
    6cea:	2103      	movs	r1, #3
    6cec:	2036      	movs	r0, #54	; 0x36
    6cee:	f7ff feb9 	bl	6a64 <dwt_write8bitoffsetreg>
}
    6cf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
    6cf6:	22f0      	movs	r2, #240	; 0xf0
    6cf8:	2103      	movs	r1, #3
    6cfa:	2036      	movs	r0, #54	; 0x36
    6cfc:	f7ff beb2 	b.w	6a64 <dwt_write8bitoffsetreg>

00006d00 <dwt_setxtaltrim>:
 */
void dwt_setxtaltrim(uint8 value)
{
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
    6d00:	f000 021f 	and.w	r2, r0, #31
    6d04:	f042 0260 	orr.w	r2, r2, #96	; 0x60
    6d08:	210e      	movs	r1, #14
    6d0a:	202b      	movs	r0, #43	; 0x2b
    6d0c:	f7ff beaa 	b.w	6a64 <dwt_write8bitoffsetreg>

00006d10 <decamutexon>:
 */
decaIrqStatus_t decamutexon(void)           
{
	//TODO
	return 0 ;   // return state before disable, value is used to re-enable in decamutexoff call
}
    6d10:	2000      	movs	r0, #0
    6d12:	4770      	bx	lr

00006d14 <decamutexoff>:
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
	//TODO
}
    6d14:	4770      	bx	lr

00006d16 <deca_sleep>:
#include "deca_device_api.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_sleep(unsigned int time_ms)
{
    6d16:	b538      	push	{r3, r4, r5, lr}
    6d18:	2100      	movs	r1, #0
	return k_sleep(Z_TIMEOUT_MS(ms));
    6d1a:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
    6d1e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    6d22:	f240 30e7 	movw	r0, #999	; 0x3e7
    6d26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6d2a:	2300      	movs	r3, #0
    6d2c:	fbc4 0105 	smlal	r0, r1, r4, r5
    6d30:	f7f9 f9d4 	bl	dc <__aeabi_uldivmod>
	k_msleep(time_ms);
}
    6d34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
    6d38:	f7ff bc44 	b.w	65c4 <z_impl_k_sleep>

00006d3c <port_set_dw1000_slowrate>:
{
    6d3c:	b580      	push	{r7, lr}
    6d3e:	af00      	add	r7, sp, #0
    set_spi_speed_slow();
    6d40:	f7f9 fe98 	bl	a74 <set_spi_speed_slow>
}
    6d44:	bf00      	nop
    6d46:	bd80      	pop	{r7, pc}

00006d48 <port_set_dw1000_fastrate>:
{
    6d48:	b580      	push	{r7, lr}
    6d4a:	af00      	add	r7, sp, #0
    set_spi_speed_fast();
    6d4c:	f7f9 feb2 	bl	ab4 <set_spi_speed_fast>
}
    6d50:	bf00      	nop
    6d52:	bd80      	pop	{r7, pc}

00006d54 <gpio_init_callback>:
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
	callback->pin_mask = pin_mask;
    6d54:	e9c0 1201 	strd	r1, r2, [r0, #4]
}
    6d58:	4770      	bx	lr

00006d5a <gpio_add_callback.isra.0>:
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    6d5a:	6883      	ldr	r3, [r0, #8]
    6d5c:	69db      	ldr	r3, [r3, #28]
    6d5e:	b10b      	cbz	r3, 6d64 <gpio_add_callback.isra.0+0xa>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    6d60:	2201      	movs	r2, #1
    6d62:	4718      	bx	r3
}
    6d64:	4770      	bx	lr

00006d66 <gpio_pin_configure.isra.0>:


extern int z_impl_gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);

__pinned_func
static inline int gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
    6d66:	b470      	push	{r4, r5, r6}
    6d68:	4613      	mov	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    6d6a:	02d4      	lsls	r4, r2, #11
	const struct gpio_driver_api *api =
    6d6c:	f8d0 c008 	ldr.w	ip, [r0, #8]
	struct gpio_driver_data *data =
    6d70:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    6d72:	d506      	bpl.n	6d82 <gpio_pin_configure.isra.0+0x1c>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    6d74:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
    6d78:	d003      	beq.n	6d82 <gpio_pin_configure.isra.0+0x1c>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    6d7a:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    6d7c:	bf48      	it	mi
    6d7e:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    6d82:	6834      	ldr	r4, [r6, #0]
    6d84:	2501      	movs	r5, #1
    6d86:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    6d88:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    6d8c:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    6d8e:	bf4c      	ite	mi
    6d90:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    6d92:	43ac      	bicpl	r4, r5
    6d94:	6034      	str	r4, [r6, #0]
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
}
    6d96:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
    6d98:	f8dc 3000 	ldr.w	r3, [ip]
    6d9c:	4718      	bx	r3

00006d9e <gpio_pin_interrupt_configure.isra.0>:
static inline int gpio_pin_interrupt_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
    6d9e:	b430      	push	{r4, r5}
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    6da0:	0213      	lsls	r3, r2, #8
	const struct gpio_driver_api *api =
    6da2:	6884      	ldr	r4, [r0, #8]
	const struct gpio_driver_data *const data =
    6da4:	6905      	ldr	r5, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    6da6:	d506      	bpl.n	6db6 <gpio_pin_interrupt_configure.isra.0+0x18>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    6da8:	682d      	ldr	r5, [r5, #0]
    6daa:	2301      	movs	r3, #1
    6dac:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    6dae:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    6db0:	bf18      	it	ne
    6db2:	f082 62c0 	eorne.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
    6db6:	69a4      	ldr	r4, [r4, #24]
    6db8:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
    6dbc:	46a4      	mov	ip, r4
    6dbe:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
}
    6dc2:	bc30      	pop	{r4, r5}
    6dc4:	4760      	bx	ip

00006dc6 <uwb_listen>:
{
    6dc6:	b508      	push	{r3, lr}
    dwt_setrxtimeout(0);
    6dc8:	2000      	movs	r0, #0
    6dca:	f7f9 fc5b 	bl	684 <dwt_setrxtimeout>
    if (dwt_rxenable(DWT_START_RX_IMMEDIATE) != DWT_SUCCESS)
    6dce:	2000      	movs	r0, #0
    6dd0:	f7ff ff43 	bl	6c5a <dwt_rxenable>
    6dd4:	3800      	subs	r0, #0
    6dd6:	bf18      	it	ne
    6dd8:	2001      	movne	r0, #1
}
    6dda:	4240      	negs	r0, r0
    6ddc:	bd08      	pop	{r3, pc}

00006dde <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_external_formatter_func formatter,
		       void *ctx, void *packaged)
{
    6dde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6de2:	4606      	mov	r6, r0
    6de4:	460d      	mov	r5, r1
    6de6:	4617      	mov	r7, r2
	uint8_t *buf = packaged;
	struct cbprintf_package_hdr_ext *hdr = packaged;
	char *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    6de8:	4698      	mov	r8, r3
    6dea:	b32b      	cbz	r3, 6e38 <cbpprintf_external+0x5a>
		return -EINVAL;
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = hdr->hdr.desc.len * sizeof(int);
    6dec:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
    6df0:	f893 9001 	ldrb.w	r9, [r3, #1]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    6df4:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
    6df6:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    6df8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
    6dfc:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    6e00:	441c      	add	r4, r3
    6e02:	4444      	add	r4, r8

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    6e04:	f04f 0a00 	mov.w	sl, #0
    6e08:	45ca      	cmp	sl, r9
    6e0a:	d309      	bcc.n	6e20 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
    6e0c:	f8d8 2004 	ldr.w	r2, [r8, #4]
    6e10:	f108 0308 	add.w	r3, r8, #8
    6e14:	4639      	mov	r1, r7
    6e16:	4630      	mov	r0, r6
    6e18:	46ac      	mov	ip, r5
	/* Skip past the header */
	buf += sizeof(*hdr);

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
}
    6e1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    6e1e:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    6e20:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    6e24:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
    6e28:	4620      	mov	r0, r4
    6e2a:	f000 fa78 	bl	731e <strlen>
    6e2e:	3001      	adds	r0, #1
    6e30:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    6e32:	f10a 0a01 	add.w	sl, sl, #1
    6e36:	e7e7      	b.n	6e08 <cbpprintf_external+0x2a>
}
    6e38:	f06f 0015 	mvn.w	r0, #21
    6e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00006e40 <arch_printk_char_out>:
}
    6e40:	2000      	movs	r0, #0
    6e42:	4770      	bx	lr

00006e44 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    6e44:	b40f      	push	{r0, r1, r2, r3}
    6e46:	b507      	push	{r0, r1, r2, lr}
    6e48:	a904      	add	r1, sp, #16
    6e4a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    6e4e:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    6e50:	f000 f98d 	bl	716e <z_log_vprintk>

	vprintk(fmt, ap);

	va_end(ap);
}
    6e54:	b003      	add	sp, #12
    6e56:	f85d eb04 	ldr.w	lr, [sp], #4
    6e5a:	b004      	add	sp, #16
    6e5c:	4770      	bx	lr

00006e5e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    6e5e:	4604      	mov	r4, r0
    6e60:	b508      	push	{r3, lr}
    6e62:	4608      	mov	r0, r1
    6e64:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    6e66:	461a      	mov	r2, r3
    6e68:	47a0      	blx	r4
	return z_impl_z_current_get();
    6e6a:	f7ff fbc5 	bl	65f8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    6e6e:	f7fc fb6d 	bl	354c <z_impl_k_thread_abort>

00006e72 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6e72:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    6e74:	f013 0307 	ands.w	r3, r3, #7
    6e78:	d105      	bne.n	6e86 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    6e7a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    6e7c:	2b00      	cmp	r3, #0
    6e7e:	bf0c      	ite	eq
    6e80:	2000      	moveq	r0, #0
    6e82:	2003      	movne	r0, #3
    6e84:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    6e86:	2b02      	cmp	r3, #2
    6e88:	d105      	bne.n	6e96 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    6e8a:	8b40      	ldrh	r0, [r0, #26]
    6e8c:	fab0 f080 	clz	r0, r0
    6e90:	0940      	lsrs	r0, r0, #5
    6e92:	0080      	lsls	r0, r0, #2
    6e94:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    6e96:	2b01      	cmp	r3, #1
    6e98:	d105      	bne.n	6ea6 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    6e9a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    6e9c:	2b00      	cmp	r3, #0
    6e9e:	bf0c      	ite	eq
    6ea0:	2000      	moveq	r0, #0
    6ea2:	2005      	movne	r0, #5
    6ea4:	4770      	bx	lr
	int evt = EVT_NOP;
    6ea6:	2000      	movs	r0, #0
}
    6ea8:	4770      	bx	lr

00006eaa <validate_args>:
{
    6eaa:	b510      	push	{r4, lr}
    6eac:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    6eae:	b100      	cbz	r0, 6eb2 <validate_args+0x8>
    6eb0:	b911      	cbnz	r1, 6eb8 <validate_args+0xe>
		return -EINVAL;
    6eb2:	f06f 0015 	mvn.w	r0, #21
}
    6eb6:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    6eb8:	1d08      	adds	r0, r1, #4
    6eba:	f000 f895 	bl	6fe8 <sys_notify_validate>
	if ((rv == 0)
    6ebe:	2800      	cmp	r0, #0
    6ec0:	d1f9      	bne.n	6eb6 <validate_args+0xc>
	    && ((cli->notify.flags
    6ec2:	68a3      	ldr	r3, [r4, #8]
    6ec4:	2b03      	cmp	r3, #3
    6ec6:	d9f6      	bls.n	6eb6 <validate_args+0xc>
    6ec8:	e7f3      	b.n	6eb2 <validate_args+0x8>

00006eca <notify_one>:
{
    6eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ece:	460d      	mov	r5, r1
    6ed0:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6ed2:	4619      	mov	r1, r3
    6ed4:	1d28      	adds	r0, r5, #4
{
    6ed6:	4690      	mov	r8, r2
    6ed8:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6eda:	f000 f896 	bl	700a <sys_notify_finalize>
	if (cb) {
    6ede:	4604      	mov	r4, r0
    6ee0:	b138      	cbz	r0, 6ef2 <notify_one+0x28>
		cb(mgr, cli, state, res);
    6ee2:	4633      	mov	r3, r6
    6ee4:	4642      	mov	r2, r8
    6ee6:	4629      	mov	r1, r5
    6ee8:	4638      	mov	r0, r7
    6eea:	46a4      	mov	ip, r4
}
    6eec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    6ef0:	4760      	bx	ip
}
    6ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006ef6 <transition_complete>:
{
    6ef6:	b410      	push	{r4}
	__asm__ volatile(
    6ef8:	f04f 0420 	mov.w	r4, #32
    6efc:	f3ef 8211 	mrs	r2, BASEPRI
    6f00:	f384 8812 	msr	BASEPRI_MAX, r4
    6f04:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    6f08:	6141      	str	r1, [r0, #20]
}
    6f0a:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    6f0c:	2101      	movs	r1, #1
    6f0e:	f7fa b8dd 	b.w	10cc <process_event>

00006f12 <onoff_manager_init>:
{
    6f12:	b538      	push	{r3, r4, r5, lr}
    6f14:	460c      	mov	r4, r1
	if ((mgr == NULL)
    6f16:	4605      	mov	r5, r0
    6f18:	b158      	cbz	r0, 6f32 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    6f1a:	b151      	cbz	r1, 6f32 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    6f1c:	680b      	ldr	r3, [r1, #0]
    6f1e:	b143      	cbz	r3, 6f32 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    6f20:	684b      	ldr	r3, [r1, #4]
    6f22:	b133      	cbz	r3, 6f32 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    6f24:	221c      	movs	r2, #28
    6f26:	2100      	movs	r1, #0
    6f28:	f000 fa14 	bl	7354 <memset>
    6f2c:	612c      	str	r4, [r5, #16]
	return 0;
    6f2e:	2000      	movs	r0, #0
}
    6f30:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    6f32:	f06f 0015 	mvn.w	r0, #21
    6f36:	e7fb      	b.n	6f30 <onoff_manager_init+0x1e>

00006f38 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    6f38:	b570      	push	{r4, r5, r6, lr}
    6f3a:	4605      	mov	r5, r0
    6f3c:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    6f3e:	f7ff ffb4 	bl	6eaa <validate_args>

	if (rv < 0) {
    6f42:	1e04      	subs	r4, r0, #0
    6f44:	db15      	blt.n	6f72 <onoff_request+0x3a>
    6f46:	f04f 0320 	mov.w	r3, #32
    6f4a:	f3ef 8211 	mrs	r2, BASEPRI
    6f4e:	f383 8812 	msr	BASEPRI_MAX, r3
    6f52:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    6f56:	8b6b      	ldrh	r3, [r5, #26]
    6f58:	8b2c      	ldrh	r4, [r5, #24]
    6f5a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6f5e:	428b      	cmp	r3, r1
    6f60:	f004 0407 	and.w	r4, r4, #7
    6f64:	d107      	bne.n	6f76 <onoff_request+0x3e>
	__asm__ volatile(
    6f66:	f382 8811 	msr	BASEPRI, r2
    6f6a:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    6f6e:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    6f72:	4620      	mov	r0, r4
    6f74:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    6f76:	2c02      	cmp	r4, #2
    6f78:	d10c      	bne.n	6f94 <onoff_request+0x5c>
		mgr->refs += 1U;
    6f7a:	3301      	adds	r3, #1
    6f7c:	836b      	strh	r3, [r5, #26]
    6f7e:	f382 8811 	msr	BASEPRI, r2
    6f82:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    6f86:	2300      	movs	r3, #0
    6f88:	4622      	mov	r2, r4
    6f8a:	4631      	mov	r1, r6
    6f8c:	4628      	mov	r0, r5
    6f8e:	f7ff ff9c 	bl	6eca <notify_one>
    6f92:	e7ee      	b.n	6f72 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    6f94:	2c06      	cmp	r4, #6
    6f96:	d814      	bhi.n	6fc2 <onoff_request+0x8a>
    6f98:	e8df f004 	tbb	[pc, r4]
    6f9c:	13131304 	.word	0x13131304
    6fa0:	1a04      	.short	0x1a04
    6fa2:	04          	.byte	0x04
    6fa3:	00          	.byte	0x00
	parent->next = child;
    6fa4:	2300      	movs	r3, #0
    6fa6:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    6fa8:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    6faa:	b93b      	cbnz	r3, 6fbc <onoff_request+0x84>
	list->head = node;
    6fac:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    6fb0:	b9ac      	cbnz	r4, 6fde <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    6fb2:	2102      	movs	r1, #2
    6fb4:	4628      	mov	r0, r5
    6fb6:	f7fa f889 	bl	10cc <process_event>
    6fba:	e7da      	b.n	6f72 <onoff_request+0x3a>
	parent->next = child;
    6fbc:	601e      	str	r6, [r3, #0]
	list->tail = node;
    6fbe:	606e      	str	r6, [r5, #4]
}
    6fc0:	e7f6      	b.n	6fb0 <onoff_request+0x78>
    6fc2:	f382 8811 	msr	BASEPRI, r2
    6fc6:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    6fca:	f06f 0404 	mvn.w	r4, #4
    6fce:	e7d0      	b.n	6f72 <onoff_request+0x3a>
    6fd0:	f382 8811 	msr	BASEPRI, r2
    6fd4:	f3bf 8f6f 	isb	sy
    6fd8:	f06f 0485 	mvn.w	r4, #133	; 0x85
    6fdc:	e7c9      	b.n	6f72 <onoff_request+0x3a>
    6fde:	f382 8811 	msr	BASEPRI, r2
    6fe2:	f3bf 8f6f 	isb	sy
		if (notify) {
    6fe6:	e7c4      	b.n	6f72 <onoff_request+0x3a>

00006fe8 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    6fe8:	4603      	mov	r3, r0
    6fea:	b158      	cbz	r0, 7004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6fec:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    6fee:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    6ff2:	2a01      	cmp	r2, #1
    6ff4:	d003      	beq.n	6ffe <sys_notify_validate+0x16>
    6ff6:	2a03      	cmp	r2, #3
    6ff8:	d104      	bne.n	7004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    6ffa:	6802      	ldr	r2, [r0, #0]
    6ffc:	b112      	cbz	r2, 7004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    6ffe:	2000      	movs	r0, #0
    7000:	6098      	str	r0, [r3, #8]
    7002:	4770      	bx	lr
    7004:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    7008:	4770      	bx	lr

0000700a <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    700a:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    700c:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    700e:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    7012:	2a03      	cmp	r2, #3
    7014:	f04f 0200 	mov.w	r2, #0
{
    7018:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    701a:	bf0c      	ite	eq
    701c:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    701e:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    7020:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    7022:	4770      	bx	lr

00007024 <_ldiv5>:
	uint32_t v_lo = *v;
    7024:	e9d0 2100 	ldrd	r2, r1, [r0]
{
    7028:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
    702a:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
    702e:	fba2 2403 	umull	r2, r4, r2, r3
    7032:	18d5      	adds	r5, r2, r3
    7034:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
    7038:	fba1 1303 	umull	r1, r3, r1, r3
    703c:	1852      	adds	r2, r2, r1
    703e:	eb44 0403 	adc.w	r4, r4, r3
    7042:	1952      	adds	r2, r2, r5
    7044:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
    7048:	1889      	adds	r1, r1, r2
    704a:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
    704e:	e9c0 1300 	strd	r1, r3, [r0]
}
    7052:	bd30      	pop	{r4, r5, pc}

00007054 <_get_digit>:
{
    7054:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
    7056:	680a      	ldr	r2, [r1, #0]
    7058:	2a00      	cmp	r2, #0
{
    705a:	4603      	mov	r3, r0
	if (*digit_count > 0) {
    705c:	dd0f      	ble.n	707e <_get_digit+0x2a>
		--*digit_count;
    705e:	3a01      	subs	r2, #1
    7060:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
    7062:	681a      	ldr	r2, [r3, #0]
    7064:	6844      	ldr	r4, [r0, #4]
    7066:	200a      	movs	r0, #10
    7068:	fba2 1200 	umull	r1, r2, r2, r0
    706c:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
    7070:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
    7072:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
    7076:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
    707a:	3030      	adds	r0, #48	; 0x30
}
    707c:	bd10      	pop	{r4, pc}
		rval = '0';
    707e:	2030      	movs	r0, #48	; 0x30
    7080:	e7fc      	b.n	707c <_get_digit+0x28>

00007082 <encode_uint>:
{
    7082:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7086:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    7088:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    708a:	2b6f      	cmp	r3, #111	; 0x6f
{
    708c:	4680      	mov	r8, r0
    708e:	460f      	mov	r7, r1
    7090:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    7092:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    7096:	d029      	beq.n	70ec <encode_uint+0x6a>
    7098:	d824      	bhi.n	70e4 <encode_uint+0x62>
		return 10;
    709a:	2b58      	cmp	r3, #88	; 0x58
    709c:	bf0c      	ite	eq
    709e:	2610      	moveq	r6, #16
    70a0:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    70a2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    70a6:	4632      	mov	r2, r6
    70a8:	2300      	movs	r3, #0
    70aa:	4640      	mov	r0, r8
    70ac:	4639      	mov	r1, r7
    70ae:	f7f9 f815 	bl	dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    70b2:	2a09      	cmp	r2, #9
    70b4:	b2d4      	uxtb	r4, r2
    70b6:	d81e      	bhi.n	70f6 <encode_uint+0x74>
    70b8:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    70ba:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    70bc:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    70be:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    70c2:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    70c6:	d301      	bcc.n	70cc <encode_uint+0x4a>
    70c8:	45d1      	cmp	r9, sl
    70ca:	d811      	bhi.n	70f0 <encode_uint+0x6e>
	if (conv->flag_hash) {
    70cc:	782b      	ldrb	r3, [r5, #0]
    70ce:	069b      	lsls	r3, r3, #26
    70d0:	d505      	bpl.n	70de <encode_uint+0x5c>
		if (radix == 8) {
    70d2:	2e08      	cmp	r6, #8
    70d4:	d115      	bne.n	7102 <encode_uint+0x80>
			conv->altform_0 = true;
    70d6:	78ab      	ldrb	r3, [r5, #2]
    70d8:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    70dc:	70ab      	strb	r3, [r5, #2]
}
    70de:	4648      	mov	r0, r9
    70e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    70e4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    70e8:	2b70      	cmp	r3, #112	; 0x70
    70ea:	e7d7      	b.n	709c <encode_uint+0x1a>
	switch (specifier) {
    70ec:	2608      	movs	r6, #8
    70ee:	e7d8      	b.n	70a2 <encode_uint+0x20>
		value /= radix;
    70f0:	4680      	mov	r8, r0
    70f2:	460f      	mov	r7, r1
    70f4:	e7d7      	b.n	70a6 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    70f6:	f1bb 0f19 	cmp.w	fp, #25
    70fa:	bf94      	ite	ls
    70fc:	3437      	addls	r4, #55	; 0x37
    70fe:	3457      	addhi	r4, #87	; 0x57
    7100:	e7db      	b.n	70ba <encode_uint+0x38>
		} else if (radix == 16) {
    7102:	2e10      	cmp	r6, #16
    7104:	d1eb      	bne.n	70de <encode_uint+0x5c>
			conv->altform_0c = true;
    7106:	78ab      	ldrb	r3, [r5, #2]
    7108:	f043 0310 	orr.w	r3, r3, #16
    710c:	e7e6      	b.n	70dc <encode_uint+0x5a>

0000710e <outs>:
{
    710e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7112:	4607      	mov	r7, r0
    7114:	4688      	mov	r8, r1
    7116:	4615      	mov	r5, r2
    7118:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    711a:	4614      	mov	r4, r2
    711c:	42b4      	cmp	r4, r6
    711e:	d305      	bcc.n	712c <outs+0x1e>
    7120:	b10e      	cbz	r6, 7126 <outs+0x18>
	return (int)count;
    7122:	1b60      	subs	r0, r4, r5
    7124:	e008      	b.n	7138 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    7126:	7823      	ldrb	r3, [r4, #0]
    7128:	2b00      	cmp	r3, #0
    712a:	d0fa      	beq.n	7122 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    712c:	f814 0b01 	ldrb.w	r0, [r4], #1
    7130:	4641      	mov	r1, r8
    7132:	47b8      	blx	r7
		if (rc < 0) {
    7134:	2800      	cmp	r0, #0
    7136:	daf1      	bge.n	711c <outs+0xe>
}
    7138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000713c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    713c:	4770      	bx	lr

0000713e <dummy_timestamp>:
}
    713e:	2000      	movs	r0, #0
    7140:	4770      	bx	lr

00007142 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    7142:	f000 bb82 	b.w	784a <sys_clock_cycle_get_32>

00007146 <atomic_inc>:
{
    7146:	4603      	mov	r3, r0
}
    7148:	f3bf 8f5b 	dmb	ish
    714c:	e853 0f00 	ldrex	r0, [r3]
    7150:	1c42      	adds	r2, r0, #1
    7152:	e843 2100 	strex	r1, r2, [r3]
    7156:	2900      	cmp	r1, #0
    7158:	d1f8      	bne.n	714c <atomic_inc+0x6>
    715a:	f3bf 8f5b 	dmb	ish
    715e:	4770      	bx	lr

00007160 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
    7160:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		(void)z_log_init(false, false);
    7162:	2100      	movs	r1, #0
    7164:	4608      	mov	r0, r1
    7166:	f7fa ff2d 	bl	1fc4 <z_log_init.isra.0>
	}

	return 0;
}
    716a:	2000      	movs	r0, #0
    716c:	bd08      	pop	{r3, pc}

0000716e <z_log_vprintk>:
{
    716e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    7170:	2300      	movs	r3, #0
    7172:	e9cd 0102 	strd	r0, r1, [sp, #8]
    7176:	e9cd 3300 	strd	r3, r3, [sp]
    717a:	461a      	mov	r2, r3
    717c:	4619      	mov	r1, r3
    717e:	4618      	mov	r0, r3
    7180:	f7fb f826 	bl	21d0 <z_impl_z_log_msg_runtime_vcreate>
}
    7184:	b005      	add	sp, #20
    7186:	f85d fb04 	ldr.w	pc, [sp], #4

0000718a <z_log_notify_backend_enabled>:
}
    718a:	4770      	bx	lr

0000718c <z_log_get_tag>:
}
    718c:	2000      	movs	r0, #0
    718e:	4770      	bx	lr

00007190 <z_log_msg_finalize>:
{
    7190:	b570      	push	{r4, r5, r6, lr}
    7192:	460e      	mov	r6, r1
    7194:	4615      	mov	r5, r2
    7196:	4619      	mov	r1, r3
	if (!msg) {
    7198:	4604      	mov	r4, r0
    719a:	b918      	cbnz	r0, 71a4 <z_log_msg_finalize+0x14>
}
    719c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    71a0:	f7fa bfc0 	b.w	2124 <z_log_dropped>
	if (data) {
    71a4:	b133      	cbz	r3, 71b4 <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
    71a6:	f3c2 234a 	ubfx	r3, r2, #9, #11
    71aa:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
    71ac:	0d12      	lsrs	r2, r2, #20
    71ae:	4418      	add	r0, r3
    71b0:	f000 f8c5 	bl	733e <memcpy>
	msg->hdr.source = source;
    71b4:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
    71b8:	4620      	mov	r0, r4
}
    71ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
    71be:	f7fa bfc9 	b.w	2154 <z_log_msg_commit>

000071c2 <out_func>:
{
    71c2:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    71c4:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
    71c8:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    71cc:	6852      	ldr	r2, [r2, #4]
    71ce:	2101      	movs	r1, #1
    71d0:	f10d 0007 	add.w	r0, sp, #7
    71d4:	4798      	blx	r3
}
    71d6:	2000      	movs	r0, #0
    71d8:	b003      	add	sp, #12
    71da:	f85d fb04 	ldr.w	pc, [sp], #4

000071de <cr_out_func>:
	if (c == '\n') {
    71de:	280a      	cmp	r0, #10
{
    71e0:	b538      	push	{r3, r4, r5, lr}
    71e2:	4604      	mov	r4, r0
    71e4:	460d      	mov	r5, r1
	if (c == '\n') {
    71e6:	d102      	bne.n	71ee <cr_out_func+0x10>
		out_func((int)'\r', ctx);
    71e8:	200d      	movs	r0, #13
    71ea:	f7ff ffea 	bl	71c2 <out_func>
	out_func(c, ctx);
    71ee:	4629      	mov	r1, r5
    71f0:	4620      	mov	r0, r4
    71f2:	f7ff ffe6 	bl	71c2 <out_func>
}
    71f6:	2000      	movs	r0, #0
    71f8:	bd38      	pop	{r3, r4, r5, pc}

000071fa <buffer_write>:
{
    71fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    71fc:	4606      	mov	r6, r0
    71fe:	460d      	mov	r5, r1
    7200:	4614      	mov	r4, r2
    7202:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    7204:	4621      	mov	r1, r4
    7206:	4628      	mov	r0, r5
    7208:	463a      	mov	r2, r7
    720a:	47b0      	blx	r6
	} while (len != 0);
    720c:	1a24      	subs	r4, r4, r0
		buf += processed;
    720e:	4405      	add	r5, r0
	} while (len != 0);
    7210:	d1f8      	bne.n	7204 <buffer_write+0xa>
}
    7212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007214 <cbvprintf>:
{
    7214:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    7216:	2400      	movs	r4, #0
    7218:	9400      	str	r4, [sp, #0]
    721a:	f7fa f865 	bl	12e8 <z_cbvprintf_impl>
}
    721e:	b002      	add	sp, #8
    7220:	bd10      	pop	{r4, pc}

00007222 <log_output_flush>:
{
    7222:	b510      	push	{r4, lr}
		     output->control_block->offset,
    7224:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    7226:	6881      	ldr	r1, [r0, #8]
{
    7228:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    722a:	e9d2 2300 	ldrd	r2, r3, [r2]
    722e:	6800      	ldr	r0, [r0, #0]
    7230:	f7ff ffe3 	bl	71fa <buffer_write>
	output->control_block->offset = 0;
    7234:	6863      	ldr	r3, [r4, #4]
    7236:	2200      	movs	r2, #0
    7238:	601a      	str	r2, [r3, #0]
}
    723a:	bd10      	pop	{r4, pc}

0000723c <log_backend_uart_init>:
}
    723c:	4770      	bx	lr

0000723e <pm_device_state_get>:
}

int pm_device_state_get(const struct device *dev,
			enum pm_device_state *state)
{
	struct pm_device *pm = dev->pm;
    723e:	6983      	ldr	r3, [r0, #24]

	if (pm == NULL) {
    7240:	b11b      	cbz	r3, 724a <pm_device_state_get+0xc>
		return -ENOSYS;
	}

	*state = pm->state;
    7242:	7a1b      	ldrb	r3, [r3, #8]
    7244:	700b      	strb	r3, [r1, #0]

	return 0;
    7246:	2000      	movs	r0, #0
    7248:	4770      	bx	lr
		return -ENOSYS;
    724a:	f06f 0057 	mvn.w	r0, #87	; 0x57
}
    724e:	4770      	bx	lr

00007250 <pm_device_is_busy>:
	return false;
}

bool pm_device_is_busy(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
    7250:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
    7252:	b130      	cbz	r0, 7262 <pm_device_is_busy+0x12>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7254:	f3bf 8f5b 	dmb	ish
    7258:	6840      	ldr	r0, [r0, #4]
    725a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    725e:	f000 0001 	and.w	r0, r0, #1
		return false;
	}

	return atomic_test_bit(&pm->flags, PM_DEVICE_FLAG_BUSY);
}
    7262:	4770      	bx	lr

00007264 <pm_device_wakeup_is_enabled>:
	return atomic_cas(&pm->flags, flags, new_flags);
}

bool pm_device_wakeup_is_enabled(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
    7264:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
    7266:	b130      	cbz	r0, 7276 <pm_device_wakeup_is_enabled+0x12>
    7268:	f3bf 8f5b 	dmb	ish
    726c:	6840      	ldr	r0, [r0, #4]
    726e:	f3bf 8f5b 	dmb	ish
    7272:	f3c0 1000 	ubfx	r0, r0, #4, #1
		return false;
	}

	return atomic_test_bit(&pm->flags,
			       PM_DEVICE_FLAG_WS_ENABLED);
}
    7276:	4770      	bx	lr

00007278 <pm_device_state_is_locked>:
	}
}

bool pm_device_state_is_locked(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
    7278:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
    727a:	b130      	cbz	r0, 728a <pm_device_state_is_locked+0x12>
    727c:	f3bf 8f5b 	dmb	ish
    7280:	6840      	ldr	r0, [r0, #4]
    7282:	f3bf 8f5b 	dmb	ish
    7286:	f3c0 1080 	ubfx	r0, r0, #6, #1
		return false;
	}

	return atomic_test_bit(&pm->flags,
			       PM_DEVICE_FLAG_STATE_LOCKED);
}
    728a:	4770      	bx	lr

0000728c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    728c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    728e:	ab0b      	add	r3, sp, #44	; 0x2c
    7290:	9305      	str	r3, [sp, #20]
    7292:	9303      	str	r3, [sp, #12]
    7294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7296:	9302      	str	r3, [sp, #8]
    7298:	2300      	movs	r3, #0
    729a:	e9cd 3300 	strd	r3, r3, [sp]
    729e:	2201      	movs	r2, #1
    72a0:	4618      	mov	r0, r3
    72a2:	f7fa ff95 	bl	21d0 <z_impl_z_log_msg_runtime_vcreate>
}
    72a6:	b007      	add	sp, #28
    72a8:	f85d fb04 	ldr.w	pc, [sp], #4

000072ac <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    72ac:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    72ae:	6800      	ldr	r0, [r0, #0]
    72b0:	f7fb bca4 	b.w	2bfc <z_arm_fatal_error>

000072b4 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    72b4:	2100      	movs	r1, #0
    72b6:	2001      	movs	r0, #1
    72b8:	f7fb bca0 	b.w	2bfc <z_arm_fatal_error>

000072bc <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    72bc:	b508      	push	{r3, lr}
	handler();
    72be:	f7fb fd35 	bl	2d2c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    72c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    72c6:	f7fb bded 	b.w	2ea4 <z_arm_exc_exit>

000072ca <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    72ca:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    72cc:	ab0b      	add	r3, sp, #44	; 0x2c
    72ce:	9305      	str	r3, [sp, #20]
    72d0:	9303      	str	r3, [sp, #12]
    72d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    72d4:	9302      	str	r3, [sp, #8]
    72d6:	2300      	movs	r3, #0
    72d8:	e9cd 3300 	strd	r3, r3, [sp]
    72dc:	2201      	movs	r2, #1
    72de:	4618      	mov	r0, r3
    72e0:	f7fa ff76 	bl	21d0 <z_impl_z_log_msg_runtime_vcreate>
}
    72e4:	b007      	add	sp, #28
    72e6:	f85d fb04 	ldr.w	pc, [sp], #4

000072ea <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    72ea:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    72ec:	ab0b      	add	r3, sp, #44	; 0x2c
    72ee:	9305      	str	r3, [sp, #20]
    72f0:	9303      	str	r3, [sp, #12]
    72f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    72f4:	9302      	str	r3, [sp, #8]
    72f6:	2300      	movs	r3, #0
    72f8:	e9cd 3300 	strd	r3, r3, [sp]
    72fc:	2201      	movs	r2, #1
    72fe:	4618      	mov	r0, r3
    7300:	f7fa ff66 	bl	21d0 <z_impl_z_log_msg_runtime_vcreate>
}
    7304:	b007      	add	sp, #28
    7306:	f85d fb04 	ldr.w	pc, [sp], #4

0000730a <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    730a:	3901      	subs	r1, #1
    730c:	4603      	mov	r3, r0
    730e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    7312:	b90a      	cbnz	r2, 7318 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    7314:	701a      	strb	r2, [r3, #0]

	return dest;
}
    7316:	4770      	bx	lr
		*d = *s;
    7318:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    731c:	e7f7      	b.n	730e <strcpy+0x4>

0000731e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    731e:	4603      	mov	r3, r0
	size_t n = 0;
    7320:	2000      	movs	r0, #0

	while (*s != '\0') {
    7322:	5c1a      	ldrb	r2, [r3, r0]
    7324:	b902      	cbnz	r2, 7328 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    7326:	4770      	bx	lr
		n++;
    7328:	3001      	adds	r0, #1
    732a:	e7fa      	b.n	7322 <strlen+0x4>

0000732c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    732c:	4603      	mov	r3, r0
	size_t n = 0;
    732e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    7330:	5c1a      	ldrb	r2, [r3, r0]
    7332:	b10a      	cbz	r2, 7338 <strnlen+0xc>
    7334:	4288      	cmp	r0, r1
    7336:	d100      	bne.n	733a <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    7338:	4770      	bx	lr
		n++;
    733a:	3001      	adds	r0, #1
    733c:	e7f8      	b.n	7330 <strnlen+0x4>

0000733e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    733e:	b510      	push	{r4, lr}
    7340:	1e43      	subs	r3, r0, #1
    7342:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    7344:	4291      	cmp	r1, r2
    7346:	d100      	bne.n	734a <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    7348:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    734a:	f811 4b01 	ldrb.w	r4, [r1], #1
    734e:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    7352:	e7f7      	b.n	7344 <memcpy+0x6>

00007354 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    7354:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    7356:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    7358:	4603      	mov	r3, r0
	while (n > 0) {
    735a:	4293      	cmp	r3, r2
    735c:	d100      	bne.n	7360 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    735e:	4770      	bx	lr
		*(d_byte++) = c_byte;
    7360:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    7364:	e7f9      	b.n	735a <memset+0x6>

00007366 <_stdout_hook_default>:
}
    7366:	f04f 30ff 	mov.w	r0, #4294967295
    736a:	4770      	bx	lr

0000736c <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    736c:	2806      	cmp	r0, #6
    736e:	d108      	bne.n	7382 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    7370:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7374:	2201      	movs	r2, #1
    7376:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    737a:	f3bf 8f4f 	dsb	sy
        __WFE();
    737e:	bf20      	wfe
    while (true)
    7380:	e7fd      	b.n	737e <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    7382:	4770      	bx	lr

00007384 <pm_state_exit_post_ops>:
    7384:	2300      	movs	r3, #0
    7386:	f383 8811 	msr	BASEPRI, r3
    738a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    738e:	4770      	bx	lr

00007390 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    7390:	6903      	ldr	r3, [r0, #16]
    7392:	b2c9      	uxtb	r1, r1
    7394:	220c      	movs	r2, #12
    7396:	fb01 3302 	mla	r3, r1, r2, r3
    739a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    739c:	f000 0007 	and.w	r0, r0, #7
    73a0:	4770      	bx	lr

000073a2 <set_on_state>:
	__asm__ volatile(
    73a2:	f04f 0320 	mov.w	r3, #32
    73a6:	f3ef 8211 	mrs	r2, BASEPRI
    73aa:	f383 8812 	msr	BASEPRI_MAX, r3
    73ae:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    73b2:	6803      	ldr	r3, [r0, #0]
    73b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    73b8:	f043 0302 	orr.w	r3, r3, #2
    73bc:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    73be:	f382 8811 	msr	BASEPRI, r2
    73c2:	f3bf 8f6f 	isb	sy
}
    73c6:	4770      	bx	lr

000073c8 <stop>:
{
    73c8:	b570      	push	{r4, r5, r6, lr}
    73ca:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    73cc:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    73ce:	f04f 0420 	mov.w	r4, #32
    73d2:	f3ef 8511 	mrs	r5, BASEPRI
    73d6:	f384 8812 	msr	BASEPRI_MAX, r4
    73da:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    73de:	260c      	movs	r6, #12
    73e0:	fb06 3401 	mla	r4, r6, r1, r3
    73e4:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    73e6:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    73ea:	d008      	beq.n	73fe <stop+0x36>
    73ec:	42a2      	cmp	r2, r4
    73ee:	d006      	beq.n	73fe <stop+0x36>
	__asm__ volatile(
    73f0:	f385 8811 	msr	BASEPRI, r5
    73f4:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    73f8:	f04f 30ff 	mov.w	r0, #4294967295
}
    73fc:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    73fe:	4371      	muls	r1, r6
    7400:	440b      	add	r3, r1
    7402:	2201      	movs	r2, #1
    7404:	641a      	str	r2, [r3, #64]	; 0x40
    7406:	f385 8811 	msr	BASEPRI, r5
    740a:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    740e:	6843      	ldr	r3, [r0, #4]
    7410:	440b      	add	r3, r1
    7412:	685b      	ldr	r3, [r3, #4]
    7414:	4798      	blx	r3
	return 0;
    7416:	2000      	movs	r0, #0
    7418:	e7f0      	b.n	73fc <stop+0x34>

0000741a <api_stop>:
	return stop(dev, subsys, CTX_API);
    741a:	2280      	movs	r2, #128	; 0x80
    741c:	f7ff bfd4 	b.w	73c8 <stop>

00007420 <async_start>:
{
    7420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7422:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    7424:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    7426:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    7428:	f04f 0520 	mov.w	r5, #32
    742c:	f3ef 8611 	mrs	r6, BASEPRI
    7430:	f385 8812 	msr	BASEPRI_MAX, r5
    7434:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    7438:	250c      	movs	r5, #12
    743a:	4369      	muls	r1, r5
    743c:	440c      	add	r4, r1
    743e:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    7440:	f005 0c07 	and.w	ip, r5, #7
    7444:	f1bc 0f01 	cmp.w	ip, #1
    7448:	d10b      	bne.n	7462 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    744a:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    744c:	f386 8811 	msr	BASEPRI, r6
    7450:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    7454:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    7458:	6843      	ldr	r3, [r0, #4]
    745a:	585b      	ldr	r3, [r3, r1]
    745c:	4798      	blx	r3
	return 0;
    745e:	2000      	movs	r0, #0
}
    7460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    7462:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    7466:	42af      	cmp	r7, r5
    7468:	f386 8811 	msr	BASEPRI, r6
    746c:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    7470:	bf0c      	ite	eq
    7472:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    7476:	f04f 30ff 	movne.w	r0, #4294967295
    747a:	e7f1      	b.n	7460 <async_start+0x40>

0000747c <api_start>:
{
    747c:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    747e:	2480      	movs	r4, #128	; 0x80
    7480:	9400      	str	r4, [sp, #0]
    7482:	f7ff ffcd 	bl	7420 <async_start>
}
    7486:	b002      	add	sp, #8
    7488:	bd10      	pop	{r4, pc}

0000748a <onoff_started_callback>:
{
    748a:	b410      	push	{r4}
	return &data->mgr[type];
    748c:	6900      	ldr	r0, [r0, #16]
    748e:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    7490:	241c      	movs	r4, #28
    7492:	fb03 0004 	mla	r0, r3, r4, r0
    7496:	2100      	movs	r1, #0
}
    7498:	bc10      	pop	{r4}
	notify(mgr, 0);
    749a:	4710      	bx	r2

0000749c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    749c:	2000      	movs	r0, #0
    749e:	f000 b9f6 	b.w	788e <nrfx_clock_stop>

000074a2 <blocking_start_callback>:
{
    74a2:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    74a4:	f7fe bd66 	b.w	5f74 <z_impl_k_sem_give>

000074a8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    74a8:	6843      	ldr	r3, [r0, #4]
    74aa:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    74ac:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    74b0:	600b      	str	r3, [r1, #0]
}
    74b2:	2000      	movs	r0, #0
    74b4:	4770      	bx	lr

000074b6 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    74b6:	6843      	ldr	r3, [r0, #4]
    74b8:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    74ba:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    74be:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    74c2:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    74c6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    74ca:	2000      	movs	r0, #0
    74cc:	4770      	bx	lr

000074ce <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    74ce:	6843      	ldr	r3, [r0, #4]
    74d0:	685b      	ldr	r3, [r3, #4]
}
    74d2:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    74d4:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    74d8:	4770      	bx	lr

000074da <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    74da:	6843      	ldr	r3, [r0, #4]
    74dc:	685b      	ldr	r3, [r3, #4]
}
    74de:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    74e0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    74e4:	4770      	bx	lr

000074e6 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    74e6:	6843      	ldr	r3, [r0, #4]
    74e8:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    74ea:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    74ee:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    74f2:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    74f4:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    74f8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    74fc:	2000      	movs	r0, #0
    74fe:	4770      	bx	lr

00007500 <gpio_nrfx_manage_callback>:
{
    7500:	b510      	push	{r4, lr}
	return port->data;
    7502:	6903      	ldr	r3, [r0, #16]
	return list->head;
    7504:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    7506:	b1f8      	cbz	r0, 7548 <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7508:	4288      	cmp	r0, r1
    750a:	d119      	bne.n	7540 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    750c:	689c      	ldr	r4, [r3, #8]
	return node->next;
    750e:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    7510:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    7512:	42a1      	cmp	r1, r4
    7514:	d100      	bne.n	7518 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    7516:	6098      	str	r0, [r3, #8]
	parent->next = child;
    7518:	2000      	movs	r0, #0
    751a:	6008      	str	r0, [r1, #0]
	if (set) {
    751c:	b12a      	cbz	r2, 752a <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    751e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    7520:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    7522:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    7524:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    7526:	b902      	cbnz	r2, 752a <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    7528:	6099      	str	r1, [r3, #8]
	return 0;
    752a:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    752c:	e010      	b.n	7550 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    752e:	4281      	cmp	r1, r0
    7530:	d106      	bne.n	7540 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    7532:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    7534:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    7536:	6898      	ldr	r0, [r3, #8]
    7538:	4281      	cmp	r1, r0
    753a:	d1ed      	bne.n	7518 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    753c:	609c      	str	r4, [r3, #8]
}
    753e:	e7eb      	b.n	7518 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    7540:	4604      	mov	r4, r0
    7542:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7544:	2800      	cmp	r0, #0
    7546:	d1f2      	bne.n	752e <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    7548:	2a00      	cmp	r2, #0
    754a:	d1e8      	bne.n	751e <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    754c:	f06f 0015 	mvn.w	r0, #21
}
    7550:	bd10      	pop	{r4, pc}

00007552 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    7552:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    7554:	6843      	ldr	r3, [r0, #4]
    7556:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    7558:	7a05      	ldrb	r5, [r0, #8]
    755a:	6844      	ldr	r4, [r0, #4]
    755c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    7560:	42a3      	cmp	r3, r4
    7562:	d302      	bcc.n	756a <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    7564:	f06f 0001 	mvn.w	r0, #1
}
    7568:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    756a:	795c      	ldrb	r4, [r3, #5]
    756c:	428c      	cmp	r4, r1
    756e:	d001      	beq.n	7574 <pinctrl_lookup_state+0x22>
		(*state)++;
    7570:	3308      	adds	r3, #8
    7572:	e7f0      	b.n	7556 <pinctrl_lookup_state+0x4>
			return 0;
    7574:	2000      	movs	r0, #0
    7576:	e7f7      	b.n	7568 <pinctrl_lookup_state+0x16>

00007578 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    7578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    757c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7580:	2701      	movs	r7, #1
    p_reg->OUTSET = set_mask;
    7582:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    7586:	4281      	cmp	r1, r0
    7588:	d102      	bne.n	7590 <pinctrl_configure_pins+0x18>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    758a:	2000      	movs	r0, #0
}
    758c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    7590:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    7592:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    7596:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
    759a:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    759c:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
    75a0:	bf08      	it	eq
    75a2:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    75a6:	2d19      	cmp	r5, #25
    75a8:	d86a      	bhi.n	7680 <pinctrl_configure_pins+0x108>
    75aa:	e8df f005 	tbb	[pc, r5]
    75ae:	170d      	.short	0x170d
    75b0:	2e221f1c 	.word	0x2e221f1c
    75b4:	6969691f 	.word	0x6969691f
    75b8:	69553269 	.word	0x69553269
    75bc:	69696969 	.word	0x69696969
    75c0:	69696969 	.word	0x69696969
    75c4:	66636058 	.word	0x66636058
			NRF_PSEL_UART(reg, TXD) = pin;
    75c8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    75cc:	f003 051f 	and.w	r5, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    75d0:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
    75d4:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
}
    75d8:	2501      	movs	r5, #1
    75da:	e002      	b.n	75e2 <pinctrl_configure_pins+0x6a>
			NRF_PSEL_UART(reg, RXD) = pin;
    75dc:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    75e0:	2500      	movs	r5, #0
    75e2:	46ac      	mov	ip, r5
    75e4:	e01c      	b.n	7620 <pinctrl_configure_pins+0xa8>
			NRF_PSEL_UART(reg, RTS) = pin;
    75e6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    75ea:	e7ef      	b.n	75cc <pinctrl_configure_pins+0x54>
			NRF_PSEL_UART(reg, CTS) = pin;
    75ec:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    75f0:	e7f6      	b.n	75e0 <pinctrl_configure_pins+0x68>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    75f2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    75f6:	2500      	movs	r5, #0
    *p_pin = pin_number & 0x1F;
    75f8:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    75fc:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
    7600:	f8c6 c50c 	str.w	ip, [r6, #1292]	; 0x50c
}
    7604:	f04f 0c01 	mov.w	ip, #1
    7608:	e00a      	b.n	7620 <pinctrl_configure_pins+0xa8>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    760a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    760e:	2501      	movs	r5, #1
    7610:	e7f2      	b.n	75f8 <pinctrl_configure_pins+0x80>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    7612:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    7616:	2c00      	cmp	r4, #0
    7618:	d1e2      	bne.n	75e0 <pinctrl_configure_pins+0x68>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    761a:	2500      	movs	r5, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    761c:	46ac      	mov	ip, r5
				drive = NRF_DRIVE_S0D1;
    761e:	2406      	movs	r4, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    7620:	f850 eb04 	ldr.w	lr, [r0], #4
    7624:	f40e 5800 	and.w	r8, lr, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    7628:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    762c:	f3ce 1ec1 	ubfx	lr, lr, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    7630:	ea4f 2404 	mov.w	r4, r4, lsl #8
    7634:	bf18      	it	ne
    7636:	f04f 0c00 	movne.w	ip, #0
    *p_pin = pin_number & 0x1F;
    763a:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    763e:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
    7642:	bf18      	it	ne
    7644:	2501      	movne	r5, #1
    7646:	ea44 040c 	orr.w	r4, r4, ip
    reg->PIN_CNF[pin_number] = cnf;
    764a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    764e:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    7652:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    7656:	e796      	b.n	7586 <pinctrl_configure_pins+0xe>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    7658:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    765c:	e7db      	b.n	7616 <pinctrl_configure_pins+0x9e>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    765e:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    7662:	6805      	ldr	r5, [r0, #0]
    7664:	f3c5 3580 	ubfx	r5, r5, #14, #1
    if (value == 0)
    7668:	2d00      	cmp	r5, #0
    766a:	d0d0      	beq.n	760e <pinctrl_configure_pins+0x96>
    766c:	e7ae      	b.n	75cc <pinctrl_configure_pins+0x54>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    766e:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    7672:	e7f6      	b.n	7662 <pinctrl_configure_pins+0xea>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    7674:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    7678:	e7f3      	b.n	7662 <pinctrl_configure_pins+0xea>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    767a:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    767e:	e7f0      	b.n	7662 <pinctrl_configure_pins+0xea>
		switch (NRF_GET_FUN(pins[i])) {
    7680:	f06f 0085 	mvn.w	r0, #133	; 0x85
    7684:	e782      	b.n	758c <pinctrl_configure_pins+0x14>

00007686 <uart_nrfx_config_get>:
	struct uart_nrfx_data *data = dev->data;
    7686:	6902      	ldr	r2, [r0, #16]
{
    7688:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    768a:	e892 0003 	ldmia.w	r2, {r0, r1}
    768e:	e883 0003 	stmia.w	r3, {r0, r1}
}
    7692:	2000      	movs	r0, #0
    7694:	4770      	bx	lr

00007696 <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
    7696:	b513      	push	{r0, r1, r4, lr}
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    7698:	aa01      	add	r2, sp, #4
{
    769a:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
    769c:	f7ff ff59 	bl	7552 <pinctrl_lookup_state>
	if (ret < 0) {
    76a0:	2800      	cmp	r0, #0
    76a2:	db05      	blt.n	76b0 <pinctrl_apply_state+0x1a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    76a4:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    76a6:	6822      	ldr	r2, [r4, #0]
    76a8:	7919      	ldrb	r1, [r3, #4]
    76aa:	6818      	ldr	r0, [r3, #0]
    76ac:	f7ff ff64 	bl	7578 <pinctrl_configure_pins>
}
    76b0:	b002      	add	sp, #8
    76b2:	bd10      	pop	{r4, pc}

000076b4 <irq_connect1>:
#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEFINE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEFINE(1);
    76b4:	2200      	movs	r2, #0
    76b6:	2101      	movs	r1, #1
    76b8:	2004      	movs	r0, #4
    76ba:	f7fb bb1f 	b.w	2cfc <z_arm_irq_priority_set>

000076be <irq_connect2>:
#endif

#ifdef CONFIG_SPI_2_NRF_SPI
SPI_NRFX_SPI_DEFINE(2);
    76be:	2200      	movs	r2, #0
    76c0:	2101      	movs	r1, #1
    76c2:	2023      	movs	r0, #35	; 0x23
    76c4:	f7fb bb1a 	b.w	2cfc <z_arm_irq_priority_set>

000076c8 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
    76c8:	b510      	push	{r4, lr}
	while (*count) {
    76ca:	680b      	ldr	r3, [r1, #0]
    76cc:	b913      	cbnz	r3, 76d4 <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
    76ce:	6013      	str	r3, [r2, #0]
	return NULL;
    76d0:	4618      	mov	r0, r3
    76d2:	e005      	b.n	76e0 <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
    76d4:	6803      	ldr	r3, [r0, #0]
    76d6:	685c      	ldr	r4, [r3, #4]
    76d8:	b11c      	cbz	r4, 76e2 <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
    76da:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
    76dc:	6803      	ldr	r3, [r0, #0]
    76de:	6818      	ldr	r0, [r3, #0]
}
    76e0:	bd10      	pop	{r4, pc}
		++(*current);
    76e2:	3308      	adds	r3, #8
    76e4:	6003      	str	r3, [r0, #0]
		--(*count);
    76e6:	680b      	ldr	r3, [r1, #0]
    76e8:	3b01      	subs	r3, #1
    76ea:	600b      	str	r3, [r1, #0]
    76ec:	e7ed      	b.n	76ca <spi_context_get_next_buf.constprop.0+0x2>

000076ee <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    76ee:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    76f0:	ab0b      	add	r3, sp, #44	; 0x2c
    76f2:	9305      	str	r3, [sp, #20]
    76f4:	9303      	str	r3, [sp, #12]
    76f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    76f8:	9302      	str	r3, [sp, #8]
    76fa:	2300      	movs	r3, #0
    76fc:	e9cd 3300 	strd	r3, r3, [sp]
    7700:	2201      	movs	r2, #1
    7702:	4618      	mov	r0, r3
    7704:	f7fa fd64 	bl	21d0 <z_impl_z_log_msg_runtime_vcreate>
}
    7708:	b007      	add	sp, #28
    770a:	f85d fb04 	ldr.w	pc, [sp], #4

0000770e <pinctrl_apply_state>:
{
    770e:	b513      	push	{r0, r1, r4, lr}
	ret = pinctrl_lookup_state(config, id, &state);
    7710:	aa01      	add	r2, sp, #4
{
    7712:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
    7714:	f7ff ff1d 	bl	7552 <pinctrl_lookup_state>
	if (ret < 0) {
    7718:	2800      	cmp	r0, #0
    771a:	db05      	blt.n	7728 <pinctrl_apply_state+0x1a>
	return pinctrl_apply_state_direct(config, state);
    771c:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    771e:	6822      	ldr	r2, [r4, #0]
    7720:	7919      	ldrb	r1, [r3, #4]
    7722:	6818      	ldr	r0, [r3, #0]
    7724:	f7ff ff28 	bl	7578 <pinctrl_configure_pins>
}
    7728:	b002      	add	sp, #8
    772a:	bd10      	pop	{r4, pc}

0000772c <spi_nrfx_pm_action>:
{
    772c:	b570      	push	{r4, r5, r6, lr}
	switch (action) {
    772e:	460c      	mov	r4, r1
	struct spi_nrfx_data *dev_data = dev->data;
    7730:	6906      	ldr	r6, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    7732:	6845      	ldr	r5, [r0, #4]
	switch (action) {
    7734:	b139      	cbz	r1, 7746 <spi_nrfx_pm_action+0x1a>
    7736:	2901      	cmp	r1, #1
    7738:	d10f      	bne.n	775a <spi_nrfx_pm_action+0x2e>
		ret = pinctrl_apply_state(dev_config->pcfg,
    773a:	2100      	movs	r1, #0
		ret = pinctrl_apply_state(dev_config->pcfg,
    773c:	6a28      	ldr	r0, [r5, #32]
}
    773e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ret = pinctrl_apply_state(dev_config->pcfg,
    7742:	f7ff bfe4 	b.w	770e <pinctrl_apply_state>
		if (dev_data->initialized) {
    7746:	f896 305d 	ldrb.w	r3, [r6, #93]	; 0x5d
    774a:	b123      	cbz	r3, 7756 <spi_nrfx_pm_action+0x2a>
			nrfx_spi_uninit(&dev_config->spi);
    774c:	4628      	mov	r0, r5
    774e:	f7fd ffa5 	bl	569c <nrfx_spi_uninit>
			dev_data->initialized = false;
    7752:	f886 405d 	strb.w	r4, [r6, #93]	; 0x5d
		ret = pinctrl_apply_state(dev_config->pcfg,
    7756:	2101      	movs	r1, #1
    7758:	e7f0      	b.n	773c <spi_nrfx_pm_action+0x10>
}
    775a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    775e:	bd70      	pop	{r4, r5, r6, pc}

00007760 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    7760:	4603      	mov	r3, r0
    7762:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
    7764:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    7766:	7919      	ldrb	r1, [r3, #4]
    7768:	2301      	movs	r3, #1
    776a:	fa03 f101 	lsl.w	r1, r3, r1
    776e:	6903      	ldr	r3, [r0, #16]
    7770:	681b      	ldr	r3, [r3, #0]
    7772:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    7774:	bf18      	it	ne
    7776:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    777a:	b112      	cbz	r2, 7782 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
    777c:	6883      	ldr	r3, [r0, #8]
    777e:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    7780:	4718      	bx	r3
    7782:	6883      	ldr	r3, [r0, #8]
    7784:	691b      	ldr	r3, [r3, #16]
    7786:	e7fb      	b.n	7780 <gpio_pin_set_dt.isra.0+0x20>

00007788 <_spi_context_cs_control>:
{
    7788:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    778a:	6803      	ldr	r3, [r0, #0]
{
    778c:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    778e:	b1e3      	cbz	r3, 77ca <_spi_context_cs_control+0x42>
    7790:	6898      	ldr	r0, [r3, #8]
    7792:	b1d0      	cbz	r0, 77ca <_spi_context_cs_control+0x42>
    7794:	6805      	ldr	r5, [r0, #0]
    7796:	b1c5      	cbz	r5, 77ca <_spi_context_cs_control+0x42>
		if (on) {
    7798:	b149      	cbz	r1, 77ae <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
    779a:	2101      	movs	r1, #1
    779c:	f7ff ffe0 	bl	7760 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
    77a0:	6823      	ldr	r3, [r4, #0]
    77a2:	689b      	ldr	r3, [r3, #8]
    77a4:	6898      	ldr	r0, [r3, #8]
}
    77a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    77aa:	f000 ba2d 	b.w	7c08 <z_impl_k_busy_wait>
			if (!force_off &&
    77ae:	b912      	cbnz	r2, 77b6 <_spi_context_cs_control+0x2e>
    77b0:	889b      	ldrh	r3, [r3, #4]
    77b2:	04db      	lsls	r3, r3, #19
    77b4:	d409      	bmi.n	77ca <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
    77b6:	6880      	ldr	r0, [r0, #8]
    77b8:	f000 fa26 	bl	7c08 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    77bc:	6823      	ldr	r3, [r4, #0]
    77be:	2100      	movs	r1, #0
    77c0:	6898      	ldr	r0, [r3, #8]
}
    77c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    77c6:	f7ff bfcb 	b.w	7760 <gpio_pin_set_dt.isra.0>
}
    77ca:	bd38      	pop	{r3, r4, r5, pc}

000077cc <spi_context_unlock_unconditionally>:
{
    77cc:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
    77ce:	2201      	movs	r2, #1
    77d0:	2100      	movs	r1, #0
{
    77d2:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    77d4:	f7ff ffd8 	bl	7788 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
    77d8:	69a3      	ldr	r3, [r4, #24]
    77da:	b933      	cbnz	r3, 77ea <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
    77dc:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    77de:	f104 0010 	add.w	r0, r4, #16
}
    77e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    77e6:	f7fe bbc5 	b.w	5f74 <z_impl_k_sem_give>
    77ea:	bd10      	pop	{r4, pc}

000077ec <spi_nrfx_release>:
{
    77ec:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    77ee:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    77f0:	6803      	ldr	r3, [r0, #0]
    77f2:	428b      	cmp	r3, r1
    77f4:	d106      	bne.n	7804 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    77f6:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
    77fa:	b934      	cbnz	r4, 780a <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    77fc:	f7ff ffe6 	bl	77cc <spi_context_unlock_unconditionally>
	return 0;
    7800:	4620      	mov	r0, r4
}
    7802:	bd10      	pop	{r4, pc}
		return -EINVAL;
    7804:	f06f 0015 	mvn.w	r0, #21
    7808:	e7fb      	b.n	7802 <spi_nrfx_release+0x16>
		return -EBUSY;
    780a:	f06f 000f 	mvn.w	r0, #15
    780e:	e7f8      	b.n	7802 <spi_nrfx_release+0x16>

00007810 <finish_transaction.isra.0>:
static void finish_transaction(const struct device *dev, int error)
    7810:	b538      	push	{r3, r4, r5, lr}
	_spi_context_cs_control(ctx, on, false);
    7812:	2200      	movs	r2, #0
    7814:	4604      	mov	r4, r0
    7816:	460d      	mov	r5, r1
    7818:	4611      	mov	r1, r2
    781a:	f7ff ffb5 	bl	7788 <_spi_context_cs_control>
	ctx->sync_status = status;
    781e:	6325      	str	r5, [r4, #48]	; 0x30
    7820:	f104 0020 	add.w	r0, r4, #32
    7824:	f7fe fba6 	bl	5f74 <z_impl_k_sem_give>
	dev_data->busy = false;
    7828:	2300      	movs	r3, #0
    782a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
    782e:	bd38      	pop	{r3, r4, r5, pc}

00007830 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    7830:	4770      	bx	lr

00007832 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    7832:	f100 0350 	add.w	r3, r0, #80	; 0x50
    7836:	009b      	lsls	r3, r3, #2
    7838:	b29b      	uxth	r3, r3
    783a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    783e:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    7842:	2200      	movs	r2, #0
    7844:	601a      	str	r2, [r3, #0]
    7846:	681b      	ldr	r3, [r3, #0]
}
    7848:	4770      	bx	lr

0000784a <sys_clock_cycle_get_32>:
{
    784a:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    784c:	f7fc fef0 	bl	4630 <z_nrf_rtc_timer_read>
}
    7850:	bd08      	pop	{r3, pc}

00007852 <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    7852:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7856:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
    785a:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    785c:	bf04      	itt	eq
    785e:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
    7862:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
    7866:	1f83      	subs	r3, r0, #6
    7868:	4258      	negs	r0, r3
    786a:	4158      	adcs	r0, r3
    786c:	4770      	bx	lr

0000786e <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    786e:	4700      	bx	r0

00007870 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    7870:	f000 b9ca 	b.w	7c08 <z_impl_k_busy_wait>

00007874 <nrfx_clock_enable>:
{
    7874:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    7876:	2000      	movs	r0, #0
    7878:	f7fb fa32 	bl	2ce0 <arch_irq_is_enabled>
    787c:	b908      	cbnz	r0, 7882 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    787e:	f7fb fa0d 	bl	2c9c <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    7882:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7886:	2200      	movs	r2, #0
    7888:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    788c:	bd08      	pop	{r3, pc}

0000788e <nrfx_clock_stop>:
    clock_stop(domain);
    788e:	f7fd ba2b 	b.w	4ce8 <clock_stop>

00007892 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    7892:	f000 001f 	and.w	r0, r0, #31
    7896:	0080      	lsls	r0, r0, #2
    7898:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    789c:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    78a0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    78a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    78a8:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    78ac:	4770      	bx	lr

000078ae <transfer_byte>:
{
    78ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
    78b0:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    78b4:	698a      	ldr	r2, [r1, #24]
    78b6:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
    78b8:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    78bc:	6a0b      	ldr	r3, [r1, #32]
    78be:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
    78c0:	bf3e      	ittt	cc
    78c2:	694a      	ldrcc	r2, [r1, #20]
    78c4:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
    78c8:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
    78ca:	6a0b      	ldr	r3, [r1, #32]
    if (p_cb->abort)
    78cc:	f891 5024 	ldrb.w	r5, [r1, #36]	; 0x24
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    78d0:	690c      	ldr	r4, [r1, #16]
    ++p_cb->bytes_transferred;
    78d2:	1c5a      	adds	r2, r3, #1
    78d4:	620a      	str	r2, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
    78d6:	3302      	adds	r3, #2
    if (p_cb->abort)
    78d8:	b135      	cbz	r5, 78e8 <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    78da:	42a3      	cmp	r3, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    78dc:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
    78de:	bf38      	it	cc
    78e0:	610b      	strcc	r3, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    78e2:	429c      	cmp	r4, r3
            p_cb->evt.xfer_desc.rx_length = bytes_used;
    78e4:	bf88      	it	hi
    78e6:	618b      	strhi	r3, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    78e8:	690d      	ldr	r5, [r1, #16]
    78ea:	429d      	cmp	r5, r3
    78ec:	d905      	bls.n	78fa <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
    78ee:	68ca      	ldr	r2, [r1, #12]
    p_reg->TXD = data;
    78f0:	5cd3      	ldrb	r3, [r2, r3]
    78f2:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    78f6:	2001      	movs	r0, #1
    78f8:	e00a      	b.n	7910 <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    78fa:	698c      	ldr	r4, [r1, #24]
    78fc:	429c      	cmp	r4, r3
    78fe:	d901      	bls.n	7904 <transfer_byte+0x56>
    7900:	7fcb      	ldrb	r3, [r1, #31]
    7902:	e7f6      	b.n	78f2 <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    7904:	42aa      	cmp	r2, r5
    7906:	d3f6      	bcc.n	78f6 <transfer_byte+0x48>
    7908:	42a2      	cmp	r2, r4
    790a:	bf2c      	ite	cs
    790c:	2000      	movcs	r0, #0
    790e:	2001      	movcc	r0, #1
}
    7910:	b003      	add	sp, #12
    7912:	bd30      	pop	{r4, r5, pc}

00007914 <irq_handler>:
{
    7914:	b510      	push	{r4, lr}
    7916:	4603      	mov	r3, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7918:	2200      	movs	r2, #0
    791a:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
    791e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    7922:	460c      	mov	r4, r1
    if (!transfer_byte(p_spi, p_cb))
    7924:	f7ff ffc3 	bl	78ae <transfer_byte>
    7928:	b9a8      	cbnz	r0, 7956 <irq_handler+0x42>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    792a:	7f8b      	ldrb	r3, [r1, #30]
    792c:	2bff      	cmp	r3, #255	; 0xff
    792e:	d008      	beq.n	7942 <irq_handler+0x2e>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7930:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
    7932:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7936:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
    793a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    793e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_cb->transfer_in_progress = false;
    7942:	2300      	movs	r3, #0
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    7944:	4620      	mov	r0, r4
    p_cb->transfer_in_progress = false;
    7946:	7763      	strb	r3, [r4, #29]
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
    7948:	7223      	strb	r3, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    794a:	6861      	ldr	r1, [r4, #4]
    794c:	f850 3b08 	ldr.w	r3, [r0], #8
}
    7950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    7954:	4718      	bx	r3
}
    7956:	bd10      	pop	{r4, pc}

00007958 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    7958:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    795a:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    795c:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    795e:	bf9c      	itt	ls
    7960:	6881      	ldrls	r1, [r0, #8]
    7962:	185b      	addls	r3, r3, r1
    r = RdOff - WrOff - 1u;
    7964:	3b01      	subs	r3, #1
    7966:	1a98      	subs	r0, r3, r2
}
    7968:	4770      	bx	lr

0000796a <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    796a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
    796e:	e9d0 8402 	ldrd	r8, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    7972:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    7974:	eba8 0604 	sub.w	r6, r8, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    7978:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
    797a:	4296      	cmp	r6, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    797c:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    797e:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
    7980:	4414      	add	r4, r2
  if (Rem > NumBytes) {
    7982:	d904      	bls.n	798e <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    7984:	f7ff fcdb 	bl	733e <memcpy>
    pRing->WrOff = WrOff + NumBytes;
    7988:	60ec      	str	r4, [r5, #12]
}
    798a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    798e:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
    7990:	eba4 0408 	sub.w	r4, r4, r8
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    7994:	f7ff fcd3 	bl	733e <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    7998:	6868      	ldr	r0, [r5, #4]
    799a:	4622      	mov	r2, r4
    799c:	19b9      	adds	r1, r7, r6
    799e:	e7f1      	b.n	7984 <_WriteNoCheck+0x1a>

000079a0 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    79a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    79a4:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    79a6:	4606      	mov	r6, r0
    79a8:	4689      	mov	r9, r1
    79aa:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    79ac:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    79b0:	6933      	ldr	r3, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    79b2:	68b4      	ldr	r4, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    79b4:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    79b6:	429d      	cmp	r5, r3
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    79b8:	bf28      	it	cs
    79ba:	191b      	addcs	r3, r3, r4
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    79bc:	1b64      	subs	r4, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    79be:	42bc      	cmp	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    79c0:	f103 33ff 	add.w	r3, r3, #4294967295
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    79c4:	bf28      	it	cs
    79c6:	463c      	movcs	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    79c8:	1b5b      	subs	r3, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    79ca:	429c      	cmp	r4, r3
    79cc:	bf28      	it	cs
    79ce:	461c      	movcs	r4, r3
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    79d0:	4649      	mov	r1, r9
    79d2:	4428      	add	r0, r5
    79d4:	4622      	mov	r2, r4
    79d6:	f7ff fcb2 	bl	733e <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    79da:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    79dc:	4425      	add	r5, r4
      WrOff = 0u;
    79de:	42ab      	cmp	r3, r5
    79e0:	bf08      	it	eq
    79e2:	2500      	moveq	r5, #0
  } while (NumBytes);
    79e4:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
    79e6:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    79e8:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
    79ea:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    79ec:	d1e0      	bne.n	79b0 <_WriteBlocking+0x10>
}
    79ee:	4640      	mov	r0, r8
    79f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000079f4 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    79f4:	f7fd bf42 	b.w	587c <_DoInit>

000079f8 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
    79f8:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
    79fa:	f7ff fffb 	bl	79f4 <SEGGER_RTT_Init>

	return 0;
}
    79fe:	2000      	movs	r0, #0
    7a00:	bd08      	pop	{r3, pc}

00007a02 <z_device_state_init>:
}
    7a02:	4770      	bx	lr

00007a04 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    7a04:	b140      	cbz	r0, 7a18 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    7a06:	68c3      	ldr	r3, [r0, #12]
    7a08:	7858      	ldrb	r0, [r3, #1]
    7a0a:	f010 0001 	ands.w	r0, r0, #1
    7a0e:	bf1e      	ittt	ne
    7a10:	7818      	ldrbne	r0, [r3, #0]
    7a12:	fab0 f080 	clzne	r0, r0
    7a16:	0940      	lsrne	r0, r0, #5
}
    7a18:	4770      	bx	lr

00007a1a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    7a1a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    7a1c:	ab0b      	add	r3, sp, #44	; 0x2c
    7a1e:	9305      	str	r3, [sp, #20]
    7a20:	9303      	str	r3, [sp, #12]
    7a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7a24:	9302      	str	r3, [sp, #8]
    7a26:	2300      	movs	r3, #0
    7a28:	e9cd 3300 	strd	r3, r3, [sp]
    7a2c:	2201      	movs	r2, #1
    7a2e:	4618      	mov	r0, r3
    7a30:	f7fa fbce 	bl	21d0 <z_impl_z_log_msg_runtime_vcreate>
}
    7a34:	b007      	add	sp, #28
    7a36:	f85d fb04 	ldr.w	pc, [sp], #4

00007a3a <z_early_memset>:
	(void) memset(dst, c, n);
    7a3a:	f7ff bc8b 	b.w	7354 <memset>

00007a3e <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    7a3e:	f7ff bc7e 	b.w	733e <memcpy>

00007a42 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7a42:	f3ef 8005 	mrs	r0, IPSR
}
    7a46:	3800      	subs	r0, #0
    7a48:	bf18      	it	ne
    7a4a:	2001      	movne	r0, #1
    7a4c:	4770      	bx	lr

00007a4e <k_thread_name_get>:
}
    7a4e:	2000      	movs	r0, #0
    7a50:	4770      	bx	lr

00007a52 <z_pm_save_idle_exit>:
{
    7a52:	b508      	push	{r3, lr}
	pm_system_resume();
    7a54:	f7fa febe 	bl	27d4 <pm_system_resume>
}
    7a58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    7a5c:	f7ff bee8 	b.w	7830 <sys_clock_idle_exit>

00007a60 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    7a60:	f990 300e 	ldrsb.w	r3, [r0, #14]
    7a64:	428b      	cmp	r3, r1
    7a66:	d001      	beq.n	7a6c <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    7a68:	f7fe bc4a 	b.w	6300 <z_set_prio>
}
    7a6c:	2000      	movs	r0, #0
    7a6e:	4770      	bx	lr

00007a70 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    7a70:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    7a74:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7a76:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7a78:	2300      	movs	r3, #0
	node->prev = NULL;
    7a7a:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    7a7e:	4770      	bx	lr

00007a80 <unpend_thread_no_timeout>:
{
    7a80:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    7a82:	f7ff fff5 	bl	7a70 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    7a86:	7b43      	ldrb	r3, [r0, #13]
    7a88:	f023 0302 	bic.w	r3, r3, #2
    7a8c:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    7a8e:	2300      	movs	r3, #0
    7a90:	6083      	str	r3, [r0, #8]
}
    7a92:	bd08      	pop	{r3, pc}

00007a94 <add_to_waitq_locked>:
{
    7a94:	b538      	push	{r3, r4, r5, lr}
    7a96:	4604      	mov	r4, r0
    7a98:	460d      	mov	r5, r1
	unready_thread(thread);
    7a9a:	f7fe fbb3 	bl	6204 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    7a9e:	7b63      	ldrb	r3, [r4, #13]
    7aa0:	f043 0302 	orr.w	r3, r3, #2
    7aa4:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    7aa6:	b1e5      	cbz	r5, 7ae2 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    7aa8:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    7aaa:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7aac:	429d      	cmp	r5, r3
    7aae:	d109      	bne.n	7ac4 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    7ab0:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    7ab2:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    7ab6:	601c      	str	r4, [r3, #0]
	list->tail = node;
    7ab8:	606c      	str	r4, [r5, #4]
}
    7aba:	e012      	b.n	7ae2 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    7abc:	686a      	ldr	r2, [r5, #4]
    7abe:	4293      	cmp	r3, r2
    7ac0:	d0f6      	beq.n	7ab0 <add_to_waitq_locked+0x1c>
    7ac2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7ac4:	2b00      	cmp	r3, #0
    7ac6:	d0f3      	beq.n	7ab0 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    7ac8:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    7acc:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    7ad0:	428a      	cmp	r2, r1
    7ad2:	d0f3      	beq.n	7abc <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7ad4:	4291      	cmp	r1, r2
    7ad6:	ddf1      	ble.n	7abc <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    7ad8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    7ada:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    7ade:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    7ae0:	605c      	str	r4, [r3, #4]
}
    7ae2:	bd38      	pop	{r3, r4, r5, pc}

00007ae4 <z_ready_thread>:
{
    7ae4:	b510      	push	{r4, lr}
	__asm__ volatile(
    7ae6:	f04f 0320 	mov.w	r3, #32
    7aea:	f3ef 8411 	mrs	r4, BASEPRI
    7aee:	f383 8812 	msr	BASEPRI_MAX, r3
    7af2:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    7af6:	f7fe fb51 	bl	619c <ready_thread>
	__asm__ volatile(
    7afa:	f384 8811 	msr	BASEPRI, r4
    7afe:	f3bf 8f6f 	isb	sy
}
    7b02:	bd10      	pop	{r4, pc}

00007b04 <z_sched_wake_thread>:
{
    7b04:	b538      	push	{r3, r4, r5, lr}
    7b06:	4604      	mov	r4, r0
	__asm__ volatile(
    7b08:	f04f 0320 	mov.w	r3, #32
    7b0c:	f3ef 8511 	mrs	r5, BASEPRI
    7b10:	f383 8812 	msr	BASEPRI_MAX, r3
    7b14:	f3bf 8f6f 	isb	sy
		if (!killed) {
    7b18:	7b43      	ldrb	r3, [r0, #13]
    7b1a:	f013 0f28 	tst.w	r3, #40	; 0x28
    7b1e:	d10b      	bne.n	7b38 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    7b20:	6883      	ldr	r3, [r0, #8]
    7b22:	b10b      	cbz	r3, 7b28 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    7b24:	f7ff ffac 	bl	7a80 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7b28:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    7b2a:	b951      	cbnz	r1, 7b42 <z_sched_wake_thread+0x3e>
    7b2c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    7b30:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
    7b32:	4620      	mov	r0, r4
    7b34:	f7fe fb32 	bl	619c <ready_thread>
	__asm__ volatile(
    7b38:	f385 8811 	msr	BASEPRI, r5
    7b3c:	f3bf 8f6f 	isb	sy
}
    7b40:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    7b42:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    7b46:	e7f3      	b.n	7b30 <z_sched_wake_thread+0x2c>

00007b48 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    7b48:	2101      	movs	r1, #1
    7b4a:	3818      	subs	r0, #24
    7b4c:	f7ff bfda 	b.w	7b04 <z_sched_wake_thread>

00007b50 <z_unpend_first_thread>:
{
    7b50:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    7b52:	f04f 0320 	mov.w	r3, #32
    7b56:	f3ef 8511 	mrs	r5, BASEPRI
    7b5a:	f383 8812 	msr	BASEPRI_MAX, r3
    7b5e:	f3bf 8f6f 	isb	sy
	return list->head == list;
    7b62:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7b64:	42a0      	cmp	r0, r4
    7b66:	d00d      	beq.n	7b84 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    7b68:	b134      	cbz	r4, 7b78 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    7b6a:	4620      	mov	r0, r4
    7b6c:	f7ff ff88 	bl	7a80 <unpend_thread_no_timeout>
    7b70:	f104 0018 	add.w	r0, r4, #24
    7b74:	f000 f81e 	bl	7bb4 <z_abort_timeout>
	__asm__ volatile(
    7b78:	f385 8811 	msr	BASEPRI, r5
    7b7c:	f3bf 8f6f 	isb	sy
}
    7b80:	4620      	mov	r0, r4
    7b82:	bd38      	pop	{r3, r4, r5, pc}
    7b84:	2400      	movs	r4, #0
    7b86:	e7f7      	b.n	7b78 <z_unpend_first_thread+0x28>

00007b88 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7b88:	4603      	mov	r3, r0
    7b8a:	b920      	cbnz	r0, 7b96 <z_reschedule_irqlock+0xe>
    7b8c:	f3ef 8205 	mrs	r2, IPSR
    7b90:	b90a      	cbnz	r2, 7b96 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    7b92:	f7fb b8eb 	b.w	2d6c <arch_swap>
    7b96:	f383 8811 	msr	BASEPRI, r3
    7b9a:	f3bf 8f6f 	isb	sy
}
    7b9e:	4770      	bx	lr

00007ba0 <z_reschedule_unlocked>:
	__asm__ volatile(
    7ba0:	f04f 0320 	mov.w	r3, #32
    7ba4:	f3ef 8011 	mrs	r0, BASEPRI
    7ba8:	f383 8812 	msr	BASEPRI_MAX, r3
    7bac:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    7bb0:	f7ff bfea 	b.w	7b88 <z_reschedule_irqlock>

00007bb4 <z_abort_timeout>:
{
    7bb4:	b510      	push	{r4, lr}
    7bb6:	f04f 0220 	mov.w	r2, #32
    7bba:	f3ef 8411 	mrs	r4, BASEPRI
    7bbe:	f382 8812 	msr	BASEPRI_MAX, r2
    7bc2:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    7bc6:	6803      	ldr	r3, [r0, #0]
    7bc8:	b13b      	cbz	r3, 7bda <z_abort_timeout+0x26>
			remove_timeout(to);
    7bca:	f7fe fdbf 	bl	674c <remove_timeout>
			ret = 0;
    7bce:	2000      	movs	r0, #0
	__asm__ volatile(
    7bd0:	f384 8811 	msr	BASEPRI, r4
    7bd4:	f3bf 8f6f 	isb	sy
}
    7bd8:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    7bda:	f06f 0015 	mvn.w	r0, #21
    7bde:	e7f7      	b.n	7bd0 <z_abort_timeout+0x1c>

00007be0 <z_get_next_timeout_expiry>:
{
    7be0:	b510      	push	{r4, lr}
	__asm__ volatile(
    7be2:	f04f 0320 	mov.w	r3, #32
    7be6:	f3ef 8411 	mrs	r4, BASEPRI
    7bea:	f383 8812 	msr	BASEPRI_MAX, r3
    7bee:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    7bf2:	f7fe fd8b 	bl	670c <next_timeout>
	__asm__ volatile(
    7bf6:	f384 8811 	msr	BASEPRI, r4
    7bfa:	f3bf 8f6f 	isb	sy
}
    7bfe:	bd10      	pop	{r4, pc}

00007c00 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    7c00:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    7c02:	f7fe fe9f 	bl	6944 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    7c06:	bd08      	pop	{r3, pc}

00007c08 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    7c08:	b108      	cbz	r0, 7c0e <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    7c0a:	f7fb bd9f 	b.w	374c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    7c0e:	4770      	bx	lr

00007c10 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    7c10:	4770      	bx	lr
	...
