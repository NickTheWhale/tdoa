
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

LOG_MODULE_REGISTER(tag, LOG_LEVEL_DBG);

static void tag_init(void)
{
    LOG_DBG("Tag init");
   0:	f8 56 00 20 35 8f 00 00 51 29 01 00 ed 8e 00 00     .V. 5...Q)......
  10:	ed 8e 00 00 ed 8e 00 00 ed 8e 00 00 00 00 00 00     ................
	...
  2c:	71 7f 00 00 ed 8e 00 00 00 00 00 00 25 7f 00 00     q...........%...
  3c:	ed 8e 00 00                                         ....

00000040 <_irq_vector_table>:
  40:	f9 7f 00 00 f9 7f 00 00 f9 7f 00 00 f9 7f 00 00     ................
  50:	f9 7f 00 00 f9 7f 00 00 f9 7f 00 00 f9 7f 00 00     ................
  60:	f9 7f 00 00 f9 7f 00 00 f9 7f 00 00 f9 7f 00 00     ................
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
  70:	f9 7f 00 00 f9 7f 00 00 f9 7f 00 00 f9 7f 00 00     ................
  80:	f9 7f 00 00 f9 7f 00 00 f9 7f 00 00 f9 7f 00 00     ................
  90:	f9 7f 00 00 f9 7f 00 00 f9 7f 00 00 f9 7f 00 00     ................
  a0:	f9 7f 00 00 f9 7f 00 00 f9 7f 00 00 f9 7f 00 00     ................
  b0:	f9 7f 00 00 f9 7f 00 00 f9 7f 00 00 f9 7f 00 00     ................
  c0:	f9 7f 00 00 f9 7f 00 00 f9 7f 00 00 f9 7f 00 00     ................
  d0:	f9 7f 00 00 f9 7f 00 00 f9 7f 00 00                 ............

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295
      ec:	f04f 30ff 	movne.w	r0, #4294967295
      f0:	f000 b80c 	b.w	10c <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f808 	bl	110 <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__aeabi_idiv0>:
     10c:	4770      	bx	lr
     10e:	bf00      	nop

00000110 <__udivmoddi4>:
     110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     114:	4686      	mov	lr, r0
     116:	468c      	mov	ip, r1
     118:	4608      	mov	r0, r1
     11a:	9e08      	ldr	r6, [sp, #32]
     11c:	4615      	mov	r5, r2
     11e:	4674      	mov	r4, lr
     120:	4619      	mov	r1, r3
     122:	2b00      	cmp	r3, #0
     124:	f040 80c2 	bne.w	2ac <__data_size+0x58>
     128:	4285      	cmp	r5, r0
     12a:	fab2 f282 	clz	r2, r2
     12e:	d945      	bls.n	1bc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4f>
     130:	b14a      	cbz	r2, 146 <CONFIG_IDLE_STACK_SIZE+0x6>
     132:	f1c2 0320 	rsb	r3, r2, #32
     136:	fa00 fc02 	lsl.w	ip, r0, r2
     13a:	fa2e f303 	lsr.w	r3, lr, r3
     13e:	4095      	lsls	r5, r2
     140:	ea43 0c0c 	orr.w	ip, r3, ip
     144:	4094      	lsls	r4, r2
     146:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     14a:	b2a8      	uxth	r0, r5
     14c:	fbbc f8fe 	udiv	r8, ip, lr
     150:	0c23      	lsrs	r3, r4, #16
     152:	fb0e cc18 	mls	ip, lr, r8, ip
     156:	fb08 f900 	mul.w	r9, r8, r0
     15a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     15e:	4599      	cmp	r9, r3
     160:	d928      	bls.n	1b4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x47>
     162:	18eb      	adds	r3, r5, r3
     164:	f108 37ff 	add.w	r7, r8, #4294967295
     168:	d204      	bcs.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     16a:	4599      	cmp	r9, r3
     16c:	d902      	bls.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     16e:	f1a8 0702 	sub.w	r7, r8, #2
     172:	442b      	add	r3, r5
     174:	eba3 0309 	sub.w	r3, r3, r9
     178:	b2a4      	uxth	r4, r4
     17a:	fbb3 fcfe 	udiv	ip, r3, lr
     17e:	fb0e 331c 	mls	r3, lr, ip, r3
     182:	fb0c f000 	mul.w	r0, ip, r0
     186:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     18a:	42a0      	cmp	r0, r4
     18c:	d914      	bls.n	1b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4b>
     18e:	192c      	adds	r4, r5, r4
     190:	f10c 33ff 	add.w	r3, ip, #4294967295
     194:	d204      	bcs.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     196:	42a0      	cmp	r0, r4
     198:	d902      	bls.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     19a:	f1ac 0302 	sub.w	r3, ip, #2
     19e:	442c      	add	r4, r5
     1a0:	1a24      	subs	r4, r4, r0
     1a2:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     1a6:	b11e      	cbz	r6, 1b0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x43>
     1a8:	40d4      	lsrs	r4, r2
     1aa:	2300      	movs	r3, #0
     1ac:	6034      	str	r4, [r6, #0]
     1ae:	6073      	str	r3, [r6, #4]
     1b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b4:	4647      	mov	r7, r8
     1b6:	e7dd      	b.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     1b8:	4663      	mov	r3, ip
     1ba:	e7f1      	b.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     1bc:	bb92      	cbnz	r2, 224 <CONFIG_FLASH_SIZE+0x24>
     1be:	1b43      	subs	r3, r0, r5
     1c0:	2101      	movs	r1, #1
     1c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1c6:	b2af      	uxth	r7, r5
     1c8:	fbb3 fcfe 	udiv	ip, r3, lr
     1cc:	0c20      	lsrs	r0, r4, #16
     1ce:	fb0e 331c 	mls	r3, lr, ip, r3
     1d2:	fb0c f807 	mul.w	r8, ip, r7
     1d6:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1da:	4598      	cmp	r8, r3
     1dc:	d962      	bls.n	2a4 <__data_size+0x50>
     1de:	18eb      	adds	r3, r5, r3
     1e0:	f10c 30ff 	add.w	r0, ip, #4294967295
     1e4:	d204      	bcs.n	1f0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x83>
     1e6:	4598      	cmp	r8, r3
     1e8:	d902      	bls.n	1f0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x83>
     1ea:	f1ac 0002 	sub.w	r0, ip, #2
     1ee:	442b      	add	r3, r5
     1f0:	eba3 0308 	sub.w	r3, r3, r8
     1f4:	b2a4      	uxth	r4, r4
     1f6:	fbb3 fcfe 	udiv	ip, r3, lr
     1fa:	fb0e 331c 	mls	r3, lr, ip, r3
     1fe:	fb0c f707 	mul.w	r7, ip, r7
     202:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     206:	42a7      	cmp	r7, r4
     208:	d94e      	bls.n	2a8 <__data_size+0x54>
     20a:	192c      	adds	r4, r5, r4
     20c:	f10c 33ff 	add.w	r3, ip, #4294967295
     210:	d204      	bcs.n	21c <CONFIG_FLASH_SIZE+0x1c>
     212:	42a7      	cmp	r7, r4
     214:	d902      	bls.n	21c <CONFIG_FLASH_SIZE+0x1c>
     216:	f1ac 0302 	sub.w	r3, ip, #2
     21a:	442c      	add	r4, r5
     21c:	1be4      	subs	r4, r4, r7
     21e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     222:	e7c0      	b.n	1a6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x39>
     224:	f1c2 0320 	rsb	r3, r2, #32
     228:	fa20 f103 	lsr.w	r1, r0, r3
     22c:	4095      	lsls	r5, r2
     22e:	4090      	lsls	r0, r2
     230:	fa2e f303 	lsr.w	r3, lr, r3
     234:	4303      	orrs	r3, r0
     236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23a:	b2af      	uxth	r7, r5
     23c:	fbb1 fcfe 	udiv	ip, r1, lr
     240:	fb0e 101c 	mls	r0, lr, ip, r1
     244:	0c19      	lsrs	r1, r3, #16
     246:	fb0c f807 	mul.w	r8, ip, r7
     24a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     24e:	4588      	cmp	r8, r1
     250:	fa04 f402 	lsl.w	r4, r4, r2
     254:	d922      	bls.n	29c <__data_size+0x48>
     256:	1869      	adds	r1, r5, r1
     258:	f10c 30ff 	add.w	r0, ip, #4294967295
     25c:	d204      	bcs.n	268 <__data_size+0x14>
     25e:	4588      	cmp	r8, r1
     260:	d902      	bls.n	268 <__data_size+0x14>
     262:	f1ac 0002 	sub.w	r0, ip, #2
     266:	4429      	add	r1, r5
     268:	eba1 0108 	sub.w	r1, r1, r8
     26c:	b29b      	uxth	r3, r3
     26e:	fbb1 fcfe 	udiv	ip, r1, lr
     272:	fb0e 111c 	mls	r1, lr, ip, r1
     276:	fb0c f707 	mul.w	r7, ip, r7
     27a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     27e:	429f      	cmp	r7, r3
     280:	d90e      	bls.n	2a0 <__data_size+0x4c>
     282:	18eb      	adds	r3, r5, r3
     284:	f10c 31ff 	add.w	r1, ip, #4294967295
     288:	d204      	bcs.n	294 <__data_size+0x40>
     28a:	429f      	cmp	r7, r3
     28c:	d902      	bls.n	294 <__data_size+0x40>
     28e:	f1ac 0102 	sub.w	r1, ip, #2
     292:	442b      	add	r3, r5
     294:	1bdb      	subs	r3, r3, r7
     296:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     29a:	e792      	b.n	1c2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x55>
     29c:	4660      	mov	r0, ip
     29e:	e7e3      	b.n	268 <__data_size+0x14>
     2a0:	4661      	mov	r1, ip
     2a2:	e7f7      	b.n	294 <__data_size+0x40>
     2a4:	4660      	mov	r0, ip
     2a6:	e7a3      	b.n	1f0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x83>
     2a8:	4663      	mov	r3, ip
     2aa:	e7b7      	b.n	21c <CONFIG_FLASH_SIZE+0x1c>
     2ac:	4283      	cmp	r3, r0
     2ae:	d906      	bls.n	2be <__data_size+0x6a>
     2b0:	b916      	cbnz	r6, 2b8 <__data_size+0x64>
     2b2:	2100      	movs	r1, #0
     2b4:	4608      	mov	r0, r1
     2b6:	e77b      	b.n	1b0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x43>
     2b8:	e9c6 e000 	strd	lr, r0, [r6]
     2bc:	e7f9      	b.n	2b2 <__data_size+0x5e>
     2be:	fab3 f783 	clz	r7, r3
     2c2:	b98f      	cbnz	r7, 2e8 <__data_size+0x94>
     2c4:	4283      	cmp	r3, r0
     2c6:	d301      	bcc.n	2cc <__data_size+0x78>
     2c8:	4572      	cmp	r2, lr
     2ca:	d808      	bhi.n	2de <__data_size+0x8a>
     2cc:	ebbe 0402 	subs.w	r4, lr, r2
     2d0:	eb60 0303 	sbc.w	r3, r0, r3
     2d4:	2001      	movs	r0, #1
     2d6:	469c      	mov	ip, r3
     2d8:	b91e      	cbnz	r6, 2e2 <__data_size+0x8e>
     2da:	2100      	movs	r1, #0
     2dc:	e768      	b.n	1b0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x43>
     2de:	4638      	mov	r0, r7
     2e0:	e7fa      	b.n	2d8 <__data_size+0x84>
     2e2:	e9c6 4c00 	strd	r4, ip, [r6]
     2e6:	e7f8      	b.n	2da <__data_size+0x86>
     2e8:	f1c7 0c20 	rsb	ip, r7, #32
     2ec:	40bb      	lsls	r3, r7
     2ee:	fa22 f40c 	lsr.w	r4, r2, ip
     2f2:	431c      	orrs	r4, r3
     2f4:	fa2e f10c 	lsr.w	r1, lr, ip
     2f8:	fa20 f30c 	lsr.w	r3, r0, ip
     2fc:	40b8      	lsls	r0, r7
     2fe:	4301      	orrs	r1, r0
     300:	ea4f 4914 	mov.w	r9, r4, lsr #16
     304:	fa0e f507 	lsl.w	r5, lr, r7
     308:	fbb3 f8f9 	udiv	r8, r3, r9
     30c:	fa1f fe84 	uxth.w	lr, r4
     310:	fb09 3018 	mls	r0, r9, r8, r3
     314:	0c0b      	lsrs	r3, r1, #16
     316:	fb08 fa0e 	mul.w	sl, r8, lr
     31a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     31e:	459a      	cmp	sl, r3
     320:	fa02 f207 	lsl.w	r2, r2, r7
     324:	d940      	bls.n	3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     326:	18e3      	adds	r3, r4, r3
     328:	f108 30ff 	add.w	r0, r8, #4294967295
     32c:	d204      	bcs.n	338 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x38>
     32e:	459a      	cmp	sl, r3
     330:	d902      	bls.n	338 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x38>
     332:	f1a8 0002 	sub.w	r0, r8, #2
     336:	4423      	add	r3, r4
     338:	eba3 030a 	sub.w	r3, r3, sl
     33c:	b289      	uxth	r1, r1
     33e:	fbb3 f8f9 	udiv	r8, r3, r9
     342:	fb09 3318 	mls	r3, r9, r8, r3
     346:	fb08 fe0e 	mul.w	lr, r8, lr
     34a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     34e:	458e      	cmp	lr, r1
     350:	d92c      	bls.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     352:	1861      	adds	r1, r4, r1
     354:	f108 33ff 	add.w	r3, r8, #4294967295
     358:	d204      	bcs.n	364 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x64>
     35a:	458e      	cmp	lr, r1
     35c:	d902      	bls.n	364 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x64>
     35e:	f1a8 0302 	sub.w	r3, r8, #2
     362:	4421      	add	r1, r4
     364:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     368:	fba0 9802 	umull	r9, r8, r0, r2
     36c:	eba1 010e 	sub.w	r1, r1, lr
     370:	4541      	cmp	r1, r8
     372:	46ce      	mov	lr, r9
     374:	4643      	mov	r3, r8
     376:	d302      	bcc.n	37e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x7e>
     378:	d106      	bne.n	388 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x88>
     37a:	454d      	cmp	r5, r9
     37c:	d204      	bcs.n	388 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x88>
     37e:	ebb9 0e02 	subs.w	lr, r9, r2
     382:	eb68 0304 	sbc.w	r3, r8, r4
     386:	3801      	subs	r0, #1
     388:	2e00      	cmp	r6, #0
     38a:	d0a6      	beq.n	2da <__data_size+0x86>
     38c:	ebb5 020e 	subs.w	r2, r5, lr
     390:	eb61 0103 	sbc.w	r1, r1, r3
     394:	fa01 fc0c 	lsl.w	ip, r1, ip
     398:	fa22 f307 	lsr.w	r3, r2, r7
     39c:	ea4c 0303 	orr.w	r3, ip, r3
     3a0:	40f9      	lsrs	r1, r7
     3a2:	e9c6 3100 	strd	r3, r1, [r6]
     3a6:	e798      	b.n	2da <__data_size+0x86>
     3a8:	4640      	mov	r0, r8
     3aa:	e7c5      	b.n	338 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x38>
     3ac:	4643      	mov	r3, r8
     3ae:	e7d9      	b.n	364 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x64>

000003b0 <main>:
LOG_MODULE_REGISTER(main, LOG_LEVEL_DBG);

static config_t config;

int main(void)
{
     3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     3b2:	b083      	sub	sp, #12
     3b4:	af00      	add	r7, sp, #0
    k_msleep(1000); // wait for shell to startup
     3b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     3ba:	f00e fa41 	bl	e840 <k_msleep>
    
    int ret;
    ret = config_init();
     3be:	f000 fe6f 	bl	10a0 <config_init>
    if (ret != 0)
     3c2:	4604      	mov	r4, r0
     3c4:	2800      	cmp	r0, #0
     3c6:	d067      	beq.n	498 <CONFIG_LOG_BUFFER_SIZE+0x98>
    {
        LOG_ERR("Failed to initialize config: %d", ret);
     3c8:	4b8e      	ldr	r3, [pc, #568]	; (604 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11c>)
     3ca:	681b      	ldr	r3, [r3, #0]
     3cc:	f013 0f07 	tst.w	r3, #7
     3d0:	d032      	beq.n	438 <CONFIG_LOG_BUFFER_SIZE+0x38>
     3d2:	466d      	mov	r5, sp
     3d4:	b088      	sub	sp, #32
     3d6:	466b      	mov	r3, sp
     3d8:	f113 0210 	adds.w	r2, r3, #16
     3dc:	d02f      	beq.n	43e <CONFIG_LOG_BUFFER_SIZE+0x3e>
     3de:	210c      	movs	r1, #12
     3e0:	b13a      	cbz	r2, 3f2 <CONFIG_LOG_FAILURE_REPORT_PERIOD+0xa>
     3e2:	4608      	mov	r0, r1
     3e4:	2904      	cmp	r1, #4
     3e6:	dd01      	ble.n	3ec <CONFIG_LOG_FAILURE_REPORT_PERIOD+0x4>
     3e8:	4e87      	ldr	r6, [pc, #540]	; (608 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x120>)
     3ea:	615e      	str	r6, [r3, #20]
     3ec:	2808      	cmp	r0, #8
     3ee:	dd00      	ble.n	3f2 <CONFIG_LOG_FAILURE_REPORT_PERIOD+0xa>
     3f0:	619c      	str	r4, [r3, #24]
     3f2:	290b      	cmp	r1, #11
     3f4:	dd26      	ble.n	444 <CONFIG_LOG_BUFFER_SIZE+0x44>
     3f6:	240c      	movs	r4, #12
     3f8:	b13a      	cbz	r2, 40a <CONFIG_LOG_BUFFER_SIZE+0xa>
     3fa:	2103      	movs	r1, #3
     3fc:	7139      	strb	r1, [r7, #4]
     3fe:	2100      	movs	r1, #0
     400:	7179      	strb	r1, [r7, #5]
     402:	71b9      	strb	r1, [r7, #6]
     404:	71f9      	strb	r1, [r7, #7]
     406:	6878      	ldr	r0, [r7, #4]
     408:	6118      	str	r0, [r3, #16]
     40a:	2100      	movs	r1, #0
     40c:	f36f 0100 	bfc	r1, #0, #1
     410:	f36f 0141 	bfc	r1, #1, #1
     414:	f36f 0182 	bfc	r1, #2, #1
     418:	f36f 01c5 	bfc	r1, #3, #3
     41c:	2301      	movs	r3, #1
     41e:	f363 1188 	bfi	r1, r3, #6, #3
     422:	f3c4 040a 	ubfx	r4, r4, #0, #11
     426:	f364 2153 	bfi	r1, r4, #9, #11
     42a:	f36f 511f 	bfc	r1, #20, #12
     42e:	2300      	movs	r3, #0
     430:	4874      	ldr	r0, [pc, #464]	; (604 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11c>)
     432:	f004 fa73 	bl	491c <z_impl_z_log_msg_static_create>
     436:	46ad      	mov	sp, r5
        return -1;
     438:	f04f 34ff 	mov.w	r4, #4294967295
     43c:	e097      	b.n	56e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x86>
        LOG_ERR("Failed to initialize config: %d", ret);
     43e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
     442:	e7cd      	b.n	3e0 <main+0x30>
     444:	f06f 041b 	mvn.w	r4, #27
     448:	e7d6      	b.n	3f8 <CONFIG_LOG_FAILURE_REPORT_PERIOD+0x10>

    for (int i = 0; i < 42; ++i)
    {
        if (config_write_u8(i, (char)i) != 0)
        {
            LOG_DBG("Failed to write: %d", i);
     44a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
     44e:	e037      	b.n	4c0 <CONFIG_LOG_BUFFER_SIZE+0xc0>
     450:	290f      	cmp	r1, #15
     452:	dd48      	ble.n	4e6 <CONFIG_LOG_BUFFER_SIZE+0xe6>
     454:	2110      	movs	r1, #16
     456:	b13a      	cbz	r2, 468 <CONFIG_LOG_BUFFER_SIZE+0x68>
     458:	2004      	movs	r0, #4
     45a:	7138      	strb	r0, [r7, #4]
     45c:	2000      	movs	r0, #0
     45e:	7178      	strb	r0, [r7, #5]
     460:	71b8      	strb	r0, [r7, #6]
     462:	71f8      	strb	r0, [r7, #7]
     464:	6878      	ldr	r0, [r7, #4]
     466:	6118      	str	r0, [r3, #16]
     468:	f36f 0500 	bfc	r5, #0, #1
     46c:	f36f 0541 	bfc	r5, #1, #1
     470:	f36f 0582 	bfc	r5, #2, #1
     474:	f36f 05c5 	bfc	r5, #3, #3
     478:	2304      	movs	r3, #4
     47a:	f363 1588 	bfi	r5, r3, #6, #3
     47e:	f3c1 010a 	ubfx	r1, r1, #0, #11
     482:	f361 2553 	bfi	r5, r1, #9, #11
     486:	f36f 551f 	bfc	r5, #20, #12
     48a:	2300      	movs	r3, #0
     48c:	4629      	mov	r1, r5
     48e:	485d      	ldr	r0, [pc, #372]	; (604 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11c>)
     490:	f004 fa44 	bl	491c <z_impl_z_log_msg_static_create>
     494:	46b5      	mov	sp, r6
    for (int i = 0; i < 42; ++i)
     496:	3401      	adds	r4, #1
     498:	2c29      	cmp	r4, #41	; 0x29
     49a:	dc27      	bgt.n	4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>
        if (config_write_u8(i, (char)i) != 0)
     49c:	b2e0      	uxtb	r0, r4
     49e:	4601      	mov	r1, r0
     4a0:	f00e fa10 	bl	e8c4 <config_write_u8>
     4a4:	2800      	cmp	r0, #0
     4a6:	d0f6      	beq.n	496 <CONFIG_LOG_BUFFER_SIZE+0x96>
            LOG_DBG("Failed to write: %d", i);
     4a8:	4b56      	ldr	r3, [pc, #344]	; (604 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11c>)
     4aa:	681b      	ldr	r3, [r3, #0]
     4ac:	f013 0f04 	tst.w	r3, #4
     4b0:	d0f1      	beq.n	496 <CONFIG_LOG_BUFFER_SIZE+0x96>
     4b2:	466e      	mov	r6, sp
     4b4:	b088      	sub	sp, #32
     4b6:	466b      	mov	r3, sp
     4b8:	f113 0210 	adds.w	r2, r3, #16
     4bc:	d0c5      	beq.n	44a <CONFIG_LOG_BUFFER_SIZE+0x4a>
     4be:	2110      	movs	r1, #16
     4c0:	2a00      	cmp	r2, #0
     4c2:	d0c5      	beq.n	450 <CONFIG_LOG_BUFFER_SIZE+0x50>
     4c4:	4608      	mov	r0, r1
     4c6:	2904      	cmp	r1, #4
     4c8:	dd03      	ble.n	4d2 <CONFIG_LOG_BUFFER_SIZE+0xd2>
     4ca:	f8df c140 	ldr.w	ip, [pc, #320]	; 60c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x124>
     4ce:	f8c3 c014 	str.w	ip, [r3, #20]
     4d2:	2808      	cmp	r0, #8
     4d4:	dd03      	ble.n	4de <CONFIG_LOG_BUFFER_SIZE+0xde>
     4d6:	f8df c138 	ldr.w	ip, [pc, #312]	; 610 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x128>
     4da:	f8c3 c018 	str.w	ip, [r3, #24]
     4de:	280c      	cmp	r0, #12
     4e0:	ddb6      	ble.n	450 <CONFIG_LOG_BUFFER_SIZE+0x50>
     4e2:	61dc      	str	r4, [r3, #28]
     4e4:	e7b4      	b.n	450 <CONFIG_LOG_BUFFER_SIZE+0x50>
     4e6:	f06f 011b 	mvn.w	r1, #27
     4ea:	e7b4      	b.n	456 <CONFIG_LOG_BUFFER_SIZE+0x56>
    }


    // end testing config

    ret = uwb_init(&config);
     4ec:	4849      	ldr	r0, [pc, #292]	; (614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>)
     4ee:	f000 f96f 	bl	7d0 <uwb_init>
    if (ret != 0)
     4f2:	4604      	mov	r4, r0
     4f4:	2800      	cmp	r0, #0
     4f6:	d13e      	bne.n	576 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8e>
    {
        LOG_ERR("Failed to initalize uwb: %d", ret);
        return -2;
    }
    LOG_DBG("Initialized uwb");
     4f8:	4b42      	ldr	r3, [pc, #264]	; (604 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11c>)
     4fa:	681b      	ldr	r3, [r3, #0]
     4fc:	f013 0f04 	tst.w	r3, #4
     500:	d033      	beq.n	56a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x82>
     502:	466e      	mov	r6, sp
     504:	b088      	sub	sp, #32
     506:	466b      	mov	r3, sp
     508:	f113 0210 	adds.w	r2, r3, #16
     50c:	d074      	beq.n	5f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x110>
     50e:	210c      	movs	r1, #12
     510:	b142      	cbz	r2, 524 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3c>
     512:	4608      	mov	r0, r1
     514:	2904      	cmp	r1, #4
     516:	dd01      	ble.n	51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>
     518:	4d3f      	ldr	r5, [pc, #252]	; (618 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x130>)
     51a:	615d      	str	r5, [r3, #20]
     51c:	2808      	cmp	r0, #8
     51e:	dd01      	ble.n	524 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3c>
     520:	483b      	ldr	r0, [pc, #236]	; (610 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x128>)
     522:	6198      	str	r0, [r3, #24]
     524:	290b      	cmp	r1, #11
     526:	dd6a      	ble.n	5fe <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x116>
     528:	250c      	movs	r5, #12
     52a:	b13a      	cbz	r2, 53c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x54>
     52c:	2103      	movs	r1, #3
     52e:	7139      	strb	r1, [r7, #4]
     530:	2100      	movs	r1, #0
     532:	7179      	strb	r1, [r7, #5]
     534:	71b9      	strb	r1, [r7, #6]
     536:	71f9      	strb	r1, [r7, #7]
     538:	6878      	ldr	r0, [r7, #4]
     53a:	6118      	str	r0, [r3, #16]
     53c:	2100      	movs	r1, #0
     53e:	f36f 0100 	bfc	r1, #0, #1
     542:	f36f 0141 	bfc	r1, #1, #1
     546:	f36f 0182 	bfc	r1, #2, #1
     54a:	f36f 01c5 	bfc	r1, #3, #3
     54e:	2304      	movs	r3, #4
     550:	f363 1188 	bfi	r1, r3, #6, #3
     554:	f3c5 030a 	ubfx	r3, r5, #0, #11
     558:	f363 2153 	bfi	r1, r3, #9, #11
     55c:	f36f 511f 	bfc	r1, #20, #12
     560:	2300      	movs	r3, #0
     562:	4828      	ldr	r0, [pc, #160]	; (604 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11c>)
     564:	f004 f9da 	bl	491c <z_impl_z_log_msg_static_create>
     568:	46b5      	mov	sp, r6

    uwb_start();
     56a:	f000 f9cb 	bl	904 <uwb_start>

    return 0;
     56e:	4620      	mov	r0, r4
     570:	370c      	adds	r7, #12
     572:	46bd      	mov	sp, r7
     574:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG_ERR("Failed to initalize uwb: %d", ret);
     576:	4b23      	ldr	r3, [pc, #140]	; (604 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11c>)
     578:	681b      	ldr	r3, [r3, #0]
     57a:	f013 0f07 	tst.w	r3, #7
     57e:	d032      	beq.n	5e6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xfe>
     580:	466d      	mov	r5, sp
     582:	b088      	sub	sp, #32
     584:	466b      	mov	r3, sp
     586:	f113 0210 	adds.w	r2, r3, #16
     58a:	d02f      	beq.n	5ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x104>
     58c:	210c      	movs	r1, #12
     58e:	b13a      	cbz	r2, 5a0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb8>
     590:	4608      	mov	r0, r1
     592:	2904      	cmp	r1, #4
     594:	dd01      	ble.n	59a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb2>
     596:	4e21      	ldr	r6, [pc, #132]	; (61c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x134>)
     598:	615e      	str	r6, [r3, #20]
     59a:	2808      	cmp	r0, #8
     59c:	dd00      	ble.n	5a0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb8>
     59e:	619c      	str	r4, [r3, #24]
     5a0:	290b      	cmp	r1, #11
     5a2:	dd26      	ble.n	5f2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10a>
     5a4:	240c      	movs	r4, #12
     5a6:	b13a      	cbz	r2, 5b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd0>
     5a8:	2103      	movs	r1, #3
     5aa:	7139      	strb	r1, [r7, #4]
     5ac:	2100      	movs	r1, #0
     5ae:	7179      	strb	r1, [r7, #5]
     5b0:	71b9      	strb	r1, [r7, #6]
     5b2:	71f9      	strb	r1, [r7, #7]
     5b4:	6878      	ldr	r0, [r7, #4]
     5b6:	6118      	str	r0, [r3, #16]
     5b8:	2100      	movs	r1, #0
     5ba:	f36f 0100 	bfc	r1, #0, #1
     5be:	f36f 0141 	bfc	r1, #1, #1
     5c2:	f36f 0182 	bfc	r1, #2, #1
     5c6:	f36f 01c5 	bfc	r1, #3, #3
     5ca:	2301      	movs	r3, #1
     5cc:	f363 1188 	bfi	r1, r3, #6, #3
     5d0:	f3c4 040a 	ubfx	r4, r4, #0, #11
     5d4:	f364 2153 	bfi	r1, r4, #9, #11
     5d8:	f36f 511f 	bfc	r1, #20, #12
     5dc:	2300      	movs	r3, #0
     5de:	4809      	ldr	r0, [pc, #36]	; (604 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11c>)
     5e0:	f004 f99c 	bl	491c <z_impl_z_log_msg_static_create>
     5e4:	46ad      	mov	sp, r5
        return -2;
     5e6:	f06f 0401 	mvn.w	r4, #1
     5ea:	e7c0      	b.n	56e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x86>
        LOG_ERR("Failed to initalize uwb: %d", ret);
     5ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
     5f0:	e7cd      	b.n	58e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa6>
     5f2:	f06f 041b 	mvn.w	r4, #27
     5f6:	e7d6      	b.n	5a6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbe>
    LOG_DBG("Initialized uwb");
     5f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
     5fc:	e788      	b.n	510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>
     5fe:	f06f 051b 	mvn.w	r5, #27
     602:	e792      	b.n	52a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x42>
     604:	200002f0 	.word	0x200002f0
     608:	00015538 	.word	0x00015538
     60c:	00015558 	.word	0x00015558
     610:	000155a0 	.word	0x000155a0
     614:	20000de0 	.word	0x20000de0
     618:	0001558c 	.word	0x0001558c
     61c:	00015570 	.word	0x00015570

00000620 <rx_ok_callback>:
{
    k_sem_give(&uwb_irq_sem);
}

static void rx_ok_callback(const dwt_cb_data_t *cb_data)
{
     620:	b508      	push	{r3, lr}
    algorithm->on_event();
     622:	4b02      	ldr	r3, [pc, #8]	; (62c <rx_ok_callback+0xc>)
     624:	681b      	ldr	r3, [r3, #0]
     626:	685b      	ldr	r3, [r3, #4]
     628:	4798      	blx	r3
}
     62a:	bd08      	pop	{r3, pc}
     62c:	2000000c 	.word	0x2000000c

00000630 <rx_timeout_callback>:

static void rx_timeout_callback(const dwt_cb_data_t *cb_data)
{
     630:	b508      	push	{r3, lr}
    algorithm->on_event();
     632:	4b02      	ldr	r3, [pc, #8]	; (63c <rx_timeout_callback+0xc>)
     634:	681b      	ldr	r3, [r3, #0]
     636:	685b      	ldr	r3, [r3, #4]
     638:	4798      	blx	r3
}
     63a:	bd08      	pop	{r3, pc}
     63c:	2000000c 	.word	0x2000000c

00000640 <rx_error_callback>:

static void rx_error_callback(const dwt_cb_data_t *cb_data)
{
     640:	b508      	push	{r3, lr}
    algorithm->on_event();
     642:	4b02      	ldr	r3, [pc, #8]	; (64c <rx_error_callback+0xc>)
     644:	681b      	ldr	r3, [r3, #0]
     646:	685b      	ldr	r3, [r3, #4]
     648:	4798      	blx	r3
}
     64a:	bd08      	pop	{r3, pc}
     64c:	2000000c 	.word	0x2000000c

00000650 <tx_done_callback>:

static void tx_done_callback(const dwt_cb_data_t *cb_data)
{
     650:	b508      	push	{r3, lr}
    algorithm->on_event();
     652:	4b02      	ldr	r3, [pc, #8]	; (65c <tx_done_callback+0xc>)
     654:	681b      	ldr	r3, [r3, #0]
     656:	685b      	ldr	r3, [r3, #4]
     658:	4798      	blx	r3
}
     65a:	bd08      	pop	{r3, pc}
     65c:	2000000c 	.word	0x2000000c

00000660 <uwb_isr>:
{
     660:	b508      	push	{r3, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     662:	4802      	ldr	r0, [pc, #8]	; (66c <uwb_isr+0xc>)
     664:	f00d f8e2 	bl	d82c <z_impl_k_sem_give>
}
     668:	bd08      	pop	{r3, pc}
     66a:	bf00      	nop
     66c:	20000348 	.word	0x20000348

00000670 <dummy_on_event>:
    LOG_DBG("Dummy init");
}

void dummy_on_event()
{
    LOG_DBG("Dummy on event");
     670:	4b23      	ldr	r3, [pc, #140]	; (700 <dummy_on_event+0x90>)
     672:	681b      	ldr	r3, [r3, #0]
     674:	f013 0f04 	tst.w	r3, #4
     678:	d040      	beq.n	6fc <dummy_on_event+0x8c>
{
     67a:	b5b0      	push	{r4, r5, r7, lr}
     67c:	b082      	sub	sp, #8
     67e:	af00      	add	r7, sp, #0
    LOG_DBG("Dummy on event");
     680:	466c      	mov	r4, sp
     682:	b088      	sub	sp, #32
     684:	466b      	mov	r3, sp
     686:	f113 0210 	adds.w	r2, r3, #16
     68a:	d031      	beq.n	6f0 <dummy_on_event+0x80>
     68c:	210c      	movs	r1, #12
     68e:	b142      	cbz	r2, 6a2 <dummy_on_event+0x32>
     690:	4608      	mov	r0, r1
     692:	2904      	cmp	r1, #4
     694:	dd01      	ble.n	69a <dummy_on_event+0x2a>
     696:	4d1b      	ldr	r5, [pc, #108]	; (704 <dummy_on_event+0x94>)
     698:	615d      	str	r5, [r3, #20]
     69a:	2808      	cmp	r0, #8
     69c:	dd01      	ble.n	6a2 <dummy_on_event+0x32>
     69e:	481a      	ldr	r0, [pc, #104]	; (708 <dummy_on_event+0x98>)
     6a0:	6198      	str	r0, [r3, #24]
     6a2:	290b      	cmp	r1, #11
     6a4:	dd27      	ble.n	6f6 <dummy_on_event+0x86>
     6a6:	f04f 0c0c 	mov.w	ip, #12
     6aa:	b13a      	cbz	r2, 6bc <dummy_on_event+0x4c>
     6ac:	2103      	movs	r1, #3
     6ae:	7139      	strb	r1, [r7, #4]
     6b0:	2100      	movs	r1, #0
     6b2:	7179      	strb	r1, [r7, #5]
     6b4:	71b9      	strb	r1, [r7, #6]
     6b6:	71f9      	strb	r1, [r7, #7]
     6b8:	6878      	ldr	r0, [r7, #4]
     6ba:	6118      	str	r0, [r3, #16]
     6bc:	2100      	movs	r1, #0
     6be:	f36f 0100 	bfc	r1, #0, #1
     6c2:	f36f 0141 	bfc	r1, #1, #1
     6c6:	f36f 0182 	bfc	r1, #2, #1
     6ca:	f36f 01c5 	bfc	r1, #3, #3
     6ce:	2304      	movs	r3, #4
     6d0:	f363 1188 	bfi	r1, r3, #6, #3
     6d4:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
     6d8:	f36c 2153 	bfi	r1, ip, #9, #11
     6dc:	f36f 511f 	bfc	r1, #20, #12
     6e0:	2300      	movs	r3, #0
     6e2:	4807      	ldr	r0, [pc, #28]	; (700 <dummy_on_event+0x90>)
     6e4:	f004 f91a 	bl	491c <z_impl_z_log_msg_static_create>
     6e8:	46a5      	mov	sp, r4
}
     6ea:	3708      	adds	r7, #8
     6ec:	46bd      	mov	sp, r7
     6ee:	bdb0      	pop	{r4, r5, r7, pc}
    LOG_DBG("Dummy on event");
     6f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
     6f4:	e7cb      	b.n	68e <dummy_on_event+0x1e>
     6f6:	f06f 0c1b 	mvn.w	ip, #27
     6fa:	e7d6      	b.n	6aa <dummy_on_event+0x3a>
     6fc:	4770      	bx	lr
     6fe:	bf00      	nop
     700:	20000318 	.word	0x20000318
     704:	000155b0 	.word	0x000155b0
     708:	00015610 	.word	0x00015610

0000070c <dummy_init>:
    LOG_DBG("Dummy init");
     70c:	4b23      	ldr	r3, [pc, #140]	; (79c <dummy_init+0x90>)
     70e:	681b      	ldr	r3, [r3, #0]
     710:	f013 0f04 	tst.w	r3, #4
     714:	d040      	beq.n	798 <dummy_init+0x8c>
{
     716:	b5b0      	push	{r4, r5, r7, lr}
     718:	b082      	sub	sp, #8
     71a:	af00      	add	r7, sp, #0
    LOG_DBG("Dummy init");
     71c:	466c      	mov	r4, sp
     71e:	b088      	sub	sp, #32
     720:	466b      	mov	r3, sp
     722:	f113 0210 	adds.w	r2, r3, #16
     726:	d031      	beq.n	78c <dummy_init+0x80>
     728:	210c      	movs	r1, #12
     72a:	b142      	cbz	r2, 73e <dummy_init+0x32>
     72c:	4608      	mov	r0, r1
     72e:	2904      	cmp	r1, #4
     730:	dd01      	ble.n	736 <dummy_init+0x2a>
     732:	4d1b      	ldr	r5, [pc, #108]	; (7a0 <dummy_init+0x94>)
     734:	615d      	str	r5, [r3, #20]
     736:	2808      	cmp	r0, #8
     738:	dd01      	ble.n	73e <dummy_init+0x32>
     73a:	481a      	ldr	r0, [pc, #104]	; (7a4 <dummy_init+0x98>)
     73c:	6198      	str	r0, [r3, #24]
     73e:	290b      	cmp	r1, #11
     740:	dd27      	ble.n	792 <dummy_init+0x86>
     742:	f04f 0c0c 	mov.w	ip, #12
     746:	b13a      	cbz	r2, 758 <dummy_init+0x4c>
     748:	2103      	movs	r1, #3
     74a:	7139      	strb	r1, [r7, #4]
     74c:	2100      	movs	r1, #0
     74e:	7179      	strb	r1, [r7, #5]
     750:	71b9      	strb	r1, [r7, #6]
     752:	71f9      	strb	r1, [r7, #7]
     754:	6878      	ldr	r0, [r7, #4]
     756:	6118      	str	r0, [r3, #16]
     758:	2100      	movs	r1, #0
     75a:	f36f 0100 	bfc	r1, #0, #1
     75e:	f36f 0141 	bfc	r1, #1, #1
     762:	f36f 0182 	bfc	r1, #2, #1
     766:	f36f 01c5 	bfc	r1, #3, #3
     76a:	2304      	movs	r3, #4
     76c:	f363 1188 	bfi	r1, r3, #6, #3
     770:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
     774:	f36c 2153 	bfi	r1, ip, #9, #11
     778:	f36f 511f 	bfc	r1, #20, #12
     77c:	2300      	movs	r3, #0
     77e:	4807      	ldr	r0, [pc, #28]	; (79c <dummy_init+0x90>)
     780:	f004 f8cc 	bl	491c <z_impl_z_log_msg_static_create>
     784:	46a5      	mov	sp, r4
}
     786:	3708      	adds	r7, #8
     788:	46bd      	mov	sp, r7
     78a:	bdb0      	pop	{r4, r5, r7, pc}
    LOG_DBG("Dummy init");
     78c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
     790:	e7cb      	b.n	72a <dummy_init+0x1e>
     792:	f06f 0c1b 	mvn.w	ip, #27
     796:	e7d6      	b.n	746 <dummy_init+0x3a>
     798:	4770      	bx	lr
     79a:	bf00      	nop
     79c:	20000318 	.word	0x20000318
     7a0:	000155c4 	.word	0x000155c4
     7a4:	00015604 	.word	0x00015604

000007a8 <uwb_loop>:
{
     7a8:	b508      	push	{r3, lr}
     7aa:	e005      	b.n	7b8 <uwb_loop+0x10>
            dwt_isr();
     7ac:	f001 f81a 	bl	17e4 <dwt_isr>
        k_msleep(1000);
     7b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     7b4:	f00e f85a 	bl	e86c <k_msleep>
	return z_impl_k_sem_take(sem, timeout);
     7b8:	f240 6267 	movw	r2, #1639	; 0x667
     7bc:	2300      	movs	r3, #0
     7be:	4803      	ldr	r0, [pc, #12]	; (7cc <uwb_loop+0x24>)
     7c0:	f00d f85c 	bl	d87c <z_impl_k_sem_take>
        if (k_sem_take(&uwb_irq_sem, K_MSEC(50)) == 0)
     7c4:	2800      	cmp	r0, #0
     7c6:	d0f1      	beq.n	7ac <uwb_loop+0x4>
     7c8:	e7f2      	b.n	7b0 <uwb_loop+0x8>
     7ca:	bf00      	nop
     7cc:	20000348 	.word	0x20000348

000007d0 <uwb_init>:
{
     7d0:	b510      	push	{r4, lr}
     7d2:	b08e      	sub	sp, #56	; 0x38
    if (openspi() != DWT_SUCCESS)
     7d4:	f001 f9b4 	bl	1b40 <openspi>
     7d8:	bb38      	cbnz	r0, 82a <CONFIG_ISR_STACK_SIZE+0x2a>
    port_set_dw1000_slowrate();
     7da:	f00e fa86 	bl	ecea <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADUCODE) != DWT_SUCCESS)
     7de:	2001      	movs	r0, #1
     7e0:	f001 f8d0 	bl	1984 <dwt_initialise>
     7e4:	4604      	mov	r4, r0
     7e6:	2800      	cmp	r0, #0
     7e8:	d14b      	bne.n	882 <CONFIG_ISR_STACK_SIZE+0x82>
    port_set_dw1000_fastrate();
     7ea:	f00e fa84 	bl	ecf6 <port_set_dw1000_fastrate>
    dwt_configure(&dwt_config);
     7ee:	483b      	ldr	r0, [pc, #236]	; (8dc <CONFIG_ISR_STACK_SIZE+0xdc>)
     7f0:	f000 fe74 	bl	14dc <dwt_configure>
    dwt_settxantennadelay(TX_ANTENNA_DELAY);
     7f4:	f244 0034 	movw	r0, #16436	; 0x4034
     7f8:	f00e f927 	bl	ea4a <dwt_settxantennadelay>
    dwt_setrxantennadelay(RX_ANTENNA_DELAY);
     7fc:	f244 0034 	movw	r0, #16436	; 0x4034
     800:	f00e f91b 	bl	ea3a <dwt_setrxantennadelay>
    port_set_deca_isr(uwb_isr);
     804:	4836      	ldr	r0, [pc, #216]	; (8e0 <CONFIG_ISR_STACK_SIZE+0xe0>)
     806:	f001 faa3 	bl	1d50 <port_set_deca_isr>
    dwt_setcallbacks(&tx_done_callback,
     80a:	4b36      	ldr	r3, [pc, #216]	; (8e4 <CONFIG_ISR_STACK_SIZE+0xe4>)
     80c:	4a36      	ldr	r2, [pc, #216]	; (8e8 <CONFIG_ISR_STACK_SIZE+0xe8>)
     80e:	4937      	ldr	r1, [pc, #220]	; (8ec <CONFIG_ISR_STACK_SIZE+0xec>)
     810:	4837      	ldr	r0, [pc, #220]	; (8f0 <CONFIG_ISR_STACK_SIZE+0xf0>)
     812:	f000 ff73 	bl	16fc <dwt_setcallbacks>
    dwt_setinterrupt(DWT_INT_TFRS | DWT_INT_RFCG | DWT_INT_RFTO | DWT_INT_RXPTO | DWT_INT_RPHE | DWT_INT_RFCE | DWT_INT_RFSL | DWT_INT_SFDT, 1);
     816:	2101      	movs	r1, #1
     818:	4836      	ldr	r0, [pc, #216]	; (8f4 <CONFIG_ISR_STACK_SIZE+0xf4>)
     81a:	f00e fa12 	bl	ec42 <dwt_setinterrupt>
    dwt_setleds(DWT_LEDS_ENABLE);
     81e:	2001      	movs	r0, #1
     820:	f000 ff78 	bl	1714 <dwt_setleds>
}
     824:	4620      	mov	r0, r4
     826:	b00e      	add	sp, #56	; 0x38
     828:	bd10      	pop	{r4, pc}
        LOG_ERR("Failed to open spi");
     82a:	4b33      	ldr	r3, [pc, #204]	; (8f8 <CONFIG_ISR_STACK_SIZE+0xf8>)
     82c:	681b      	ldr	r3, [r3, #0]
     82e:	f013 0f07 	tst.w	r3, #7
     832:	d102      	bne.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
        return -1;
     834:	f04f 34ff 	mov.w	r4, #4294967295
     838:	e7f4      	b.n	824 <CONFIG_ISR_STACK_SIZE+0x24>
        LOG_ERR("Failed to open spi");
     83a:	4b30      	ldr	r3, [pc, #192]	; (8fc <CONFIG_ISR_STACK_SIZE+0xfc>)
     83c:	930d      	str	r3, [sp, #52]	; 0x34
     83e:	2302      	movs	r3, #2
     840:	f88d 3004 	strb.w	r3, [sp, #4]
     844:	2300      	movs	r3, #0
     846:	f88d 3005 	strb.w	r3, [sp, #5]
     84a:	f88d 3006 	strb.w	r3, [sp, #6]
     84e:	f88d 3007 	strb.w	r3, [sp, #7]
     852:	9a01      	ldr	r2, [sp, #4]
     854:	920c      	str	r2, [sp, #48]	; 0x30
     856:	4619      	mov	r1, r3
     858:	f363 0100 	bfi	r1, r3, #0, #1
     85c:	f363 0141 	bfi	r1, r3, #1, #1
     860:	f363 0182 	bfi	r1, r3, #2, #1
     864:	f363 01c5 	bfi	r1, r3, #3, #3
     868:	2201      	movs	r2, #1
     86a:	f362 1188 	bfi	r1, r2, #6, #3
     86e:	2208      	movs	r2, #8
     870:	f362 2153 	bfi	r1, r2, #9, #11
     874:	f363 511f 	bfi	r1, r3, #20, #12
     878:	aa0c      	add	r2, sp, #48	; 0x30
     87a:	481f      	ldr	r0, [pc, #124]	; (8f8 <CONFIG_ISR_STACK_SIZE+0xf8>)
     87c:	f004 f84e 	bl	491c <z_impl_z_log_msg_static_create>
     880:	e7d8      	b.n	834 <CONFIG_ISR_STACK_SIZE+0x34>
        LOG_ERR("Failed to initialize deca");
     882:	4b1d      	ldr	r3, [pc, #116]	; (8f8 <CONFIG_ISR_STACK_SIZE+0xf8>)
     884:	681b      	ldr	r3, [r3, #0]
     886:	f013 0f07 	tst.w	r3, #7
     88a:	d102      	bne.n	892 <CONFIG_ISR_STACK_SIZE+0x92>
        return -2;
     88c:	f06f 0401 	mvn.w	r4, #1
     890:	e7c8      	b.n	824 <CONFIG_ISR_STACK_SIZE+0x24>
        LOG_ERR("Failed to initialize deca");
     892:	4b1b      	ldr	r3, [pc, #108]	; (900 <CONFIG_ISR_STACK_SIZE+0x100>)
     894:	9307      	str	r3, [sp, #28]
     896:	2302      	movs	r3, #2
     898:	f88d 3004 	strb.w	r3, [sp, #4]
     89c:	2300      	movs	r3, #0
     89e:	f88d 3005 	strb.w	r3, [sp, #5]
     8a2:	f88d 3006 	strb.w	r3, [sp, #6]
     8a6:	f88d 3007 	strb.w	r3, [sp, #7]
     8aa:	9a01      	ldr	r2, [sp, #4]
     8ac:	9206      	str	r2, [sp, #24]
     8ae:	4619      	mov	r1, r3
     8b0:	f363 0100 	bfi	r1, r3, #0, #1
     8b4:	f363 0141 	bfi	r1, r3, #1, #1
     8b8:	f363 0182 	bfi	r1, r3, #2, #1
     8bc:	f363 01c5 	bfi	r1, r3, #3, #3
     8c0:	2201      	movs	r2, #1
     8c2:	f362 1188 	bfi	r1, r2, #6, #3
     8c6:	2208      	movs	r2, #8
     8c8:	f362 2153 	bfi	r1, r2, #9, #11
     8cc:	f363 511f 	bfi	r1, r3, #20, #12
     8d0:	aa06      	add	r2, sp, #24
     8d2:	4809      	ldr	r0, [pc, #36]	; (8f8 <CONFIG_ISR_STACK_SIZE+0xf8>)
     8d4:	f004 f822 	bl	491c <z_impl_z_log_msg_static_create>
     8d8:	e7d8      	b.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
     8da:	bf00      	nop
     8dc:	20000000 	.word	0x20000000
     8e0:	00000661 	.word	0x00000661
     8e4:	00000641 	.word	0x00000641
     8e8:	00000631 	.word	0x00000631
     8ec:	00000621 	.word	0x00000621
     8f0:	00000651 	.word	0x00000651
     8f4:	0423d080 	.word	0x0423d080
     8f8:	20000318 	.word	0x20000318
     8fc:	000155d4 	.word	0x000155d4
     900:	000155e8 	.word	0x000155e8

00000904 <uwb_start>:
{
     904:	b500      	push	{lr}
     906:	b0b7      	sub	sp, #220	; 0xdc
    algorithm->init();
     908:	4b0c      	ldr	r3, [pc, #48]	; (93c <uwb_start+0x38>)
     90a:	681b      	ldr	r3, [r3, #0]
     90c:	681b      	ldr	r3, [r3, #0]
     90e:	4798      	blx	r3
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     910:	2200      	movs	r2, #0
     912:	2300      	movs	r3, #0
     914:	e9cd 2306 	strd	r2, r3, [sp, #24]
     918:	2300      	movs	r3, #0
     91a:	9304      	str	r3, [sp, #16]
     91c:	2205      	movs	r2, #5
     91e:	9203      	str	r2, [sp, #12]
     920:	9302      	str	r3, [sp, #8]
     922:	9301      	str	r3, [sp, #4]
     924:	9300      	str	r3, [sp, #0]
     926:	4b06      	ldr	r3, [pc, #24]	; (940 <uwb_start+0x3c>)
     928:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
     92c:	4905      	ldr	r1, [pc, #20]	; (944 <uwb_start+0x40>)
     92e:	a808      	add	r0, sp, #32
     930:	f013 fee7 	bl	14702 <z_impl_k_thread_create>
}
     934:	b037      	add	sp, #220	; 0xdc
     936:	f85d fb04 	ldr.w	pc, [sp], #4
     93a:	bf00      	nop
     93c:	2000000c 	.word	0x2000000c
     940:	000007a9 	.word	0x000007a9
     944:	20003cc0 	.word	0x20003cc0

00000948 <find_field>:
    memcpy(&_buffer[SIZE_HEADER + header->tlv_length], &checksum, sizeof(uint32_t));
}

static int find_field(config_field_t field)
{
    uint16_t pos = 0;
     948:	2200      	movs	r2, #0
    while (pos < header->tlv_length)
     94a:	e005      	b.n	958 <find_field+0x10>
        if (tlv.data[pos] == field)
        {
            return pos;
        }

        pos += tlv.data[pos + 1] + 2;
     94c:	4413      	add	r3, r2
     94e:	785b      	ldrb	r3, [r3, #1]
     950:	4413      	add	r3, r2
     952:	b29b      	uxth	r3, r3
     954:	3302      	adds	r3, #2
     956:	b29a      	uxth	r2, r3
    while (pos < header->tlv_length)
     958:	4b06      	ldr	r3, [pc, #24]	; (974 <find_field+0x2c>)
     95a:	889b      	ldrh	r3, [r3, #4]
     95c:	4293      	cmp	r3, r2
     95e:	d906      	bls.n	96e <find_field+0x26>
        if (tlv.data[pos] == field)
     960:	4b05      	ldr	r3, [pc, #20]	; (978 <find_field+0x30>)
     962:	681b      	ldr	r3, [r3, #0]
     964:	5c99      	ldrb	r1, [r3, r2]
     966:	4281      	cmp	r1, r0
     968:	d1f0      	bne.n	94c <find_field+0x4>
            return pos;
     96a:	4610      	mov	r0, r2
     96c:	4770      	bx	lr
    }

    return -1;
     96e:	f04f 30ff 	mov.w	r0, #4294967295
}
     972:	4770      	bx	lr
     974:	20000e18 	.word	0x20000e18
     978:	20000e14 	.word	0x20000e14

0000097c <read_buffer>:
{
     97c:	b508      	push	{r3, lr}
    ret = nvs_read(&fs, CONFIG_NVS_ID, &_buffer, SIZE_READ);
     97e:	2380      	movs	r3, #128	; 0x80
     980:	4a04      	ldr	r2, [pc, #16]	; (994 <read_buffer+0x18>)
     982:	2100      	movs	r1, #0
     984:	4804      	ldr	r0, [pc, #16]	; (998 <read_buffer+0x1c>)
     986:	f00f fe0b 	bl	105a0 <nvs_read>
    if (ret < 0)
     98a:	2800      	cmp	r0, #0
     98c:	db00      	blt.n	990 <read_buffer+0x14>
    return 0;
     98e:	2000      	movs	r0, #0
}
     990:	bd08      	pop	{r3, pc}
     992:	bf00      	nop
     994:	20000e18 	.word	0x20000e18
     998:	20000de4 	.word	0x20000de4

0000099c <write_crc>:
{
     99c:	b510      	push	{r4, lr}
     99e:	b082      	sub	sp, #8
    uint32_t checksum = crc32_ieee(_buffer, SIZE_HEADER + header->tlv_length);
     9a0:	4c08      	ldr	r4, [pc, #32]	; (9c4 <write_crc+0x28>)
     9a2:	88a1      	ldrh	r1, [r4, #4]
     9a4:	3106      	adds	r1, #6
     9a6:	4620      	mov	r0, r4
     9a8:	f00e fc68 	bl	f27c <crc32_ieee>
     9ac:	9001      	str	r0, [sp, #4]
    memcpy(&_buffer[SIZE_HEADER + header->tlv_length], &checksum, sizeof(uint32_t));
     9ae:	88a0      	ldrh	r0, [r4, #4]
     9b0:	3006      	adds	r0, #6
     9b2:	2204      	movs	r2, #4
     9b4:	eb0d 0102 	add.w	r1, sp, r2
     9b8:	4420      	add	r0, r4
     9ba:	f012 f9e6 	bl	12d8a <memcpy>
}
     9be:	b002      	add	sp, #8
     9c0:	bd10      	pop	{r4, pc}
     9c2:	bf00      	nop
     9c4:	20000e18 	.word	0x20000e18

000009c8 <flash_init>:
{
     9c8:	b510      	push	{r4, lr}
     9ca:	b09e      	sub	sp, #120	; 0x78
    fs.flash_device = NVS_PARTITION_DEVICE;
     9cc:	4870      	ldr	r0, [pc, #448]	; (b90 <flash_init+0x1c8>)
     9ce:	4b71      	ldr	r3, [pc, #452]	; (b94 <flash_init+0x1cc>)
     9d0:	6298      	str	r0, [r3, #40]	; 0x28
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     9d2:	f013 fe2d 	bl	14630 <z_device_is_ready>
    if (!device_is_ready(fs.flash_device))
     9d6:	b310      	cbz	r0, a1e <flash_init+0x56>
    fs.offset = NVS_PARTITION_OFFSET;
     9d8:	4b6e      	ldr	r3, [pc, #440]	; (b94 <flash_init+0x1cc>)
     9da:	f44f 21f4 	mov.w	r1, #499712	; 0x7a000
     9de:	6019      	str	r1, [r3, #0]
    if (flash_get_page_info_by_offs(fs.flash_device, fs.offset, &info) != 0)
     9e0:	6a98      	ldr	r0, [r3, #40]	; 0x28
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
     9e2:	aa03      	add	r2, sp, #12
     9e4:	f012 fdcb 	bl	1357e <z_impl_flash_get_page_info_by_offs>
     9e8:	2800      	cmp	r0, #0
     9ea:	d144      	bne.n	a76 <flash_init+0xae>
    fs.sector_size = info.size;
     9ec:	4869      	ldr	r0, [pc, #420]	; (b94 <flash_init+0x1cc>)
     9ee:	9b04      	ldr	r3, [sp, #16]
     9f0:	8183      	strh	r3, [r0, #12]
    fs.sector_count = 3U;
     9f2:	2303      	movs	r3, #3
     9f4:	81c3      	strh	r3, [r0, #14]
    if (nvs_mount(&fs) != 0)
     9f6:	f003 f84f 	bl	3a98 <nvs_mount>
     9fa:	4604      	mov	r4, r0
     9fc:	2800      	cmp	r0, #0
     9fe:	d166      	bne.n	ace <flash_init+0x106>
    k_msleep(CONFIG_READ_DELAY);
     a00:	20c8      	movs	r0, #200	; 0xc8
     a02:	f00d ff49 	bl	e898 <k_msleep>
    if (nvs_read(&fs, CONFIG_NVS_ID, &dummy_buffer, sizeof(dummy_buffer)) < 0)
     a06:	2304      	movs	r3, #4
     a08:	aa02      	add	r2, sp, #8
     a0a:	2100      	movs	r1, #0
     a0c:	4861      	ldr	r0, [pc, #388]	; (b94 <flash_init+0x1cc>)
     a0e:	f00f fdc7 	bl	105a0 <nvs_read>
     a12:	2800      	cmp	r0, #0
     a14:	f2c0 8087 	blt.w	b26 <flash_init+0x15e>
}
     a18:	4620      	mov	r0, r4
     a1a:	b01e      	add	sp, #120	; 0x78
     a1c:	bd10      	pop	{r4, pc}
        LOG_ERR("Flash device is not ready");
     a1e:	4b5e      	ldr	r3, [pc, #376]	; (b98 <flash_init+0x1d0>)
     a20:	681b      	ldr	r3, [r3, #0]
     a22:	f013 0f07 	tst.w	r3, #7
     a26:	d102      	bne.n	a2e <flash_init+0x66>
        return -1;
     a28:	f04f 34ff 	mov.w	r4, #4294967295
     a2c:	e7f4      	b.n	a18 <flash_init+0x50>
        LOG_ERR("Flash device is not ready");
     a2e:	4b5b      	ldr	r3, [pc, #364]	; (b9c <flash_init+0x1d4>)
     a30:	931d      	str	r3, [sp, #116]	; 0x74
     a32:	2302      	movs	r3, #2
     a34:	f88d 3004 	strb.w	r3, [sp, #4]
     a38:	2300      	movs	r3, #0
     a3a:	f88d 3005 	strb.w	r3, [sp, #5]
     a3e:	f88d 3006 	strb.w	r3, [sp, #6]
     a42:	f88d 3007 	strb.w	r3, [sp, #7]
     a46:	9a01      	ldr	r2, [sp, #4]
     a48:	921c      	str	r2, [sp, #112]	; 0x70
     a4a:	4619      	mov	r1, r3
     a4c:	f363 0100 	bfi	r1, r3, #0, #1
     a50:	f363 0141 	bfi	r1, r3, #1, #1
     a54:	f363 0182 	bfi	r1, r3, #2, #1
     a58:	f363 01c5 	bfi	r1, r3, #3, #3
     a5c:	2201      	movs	r2, #1
     a5e:	f362 1188 	bfi	r1, r2, #6, #3
     a62:	2208      	movs	r2, #8
     a64:	f362 2153 	bfi	r1, r2, #9, #11
     a68:	f363 511f 	bfi	r1, r3, #20, #12
     a6c:	aa1c      	add	r2, sp, #112	; 0x70
     a6e:	484a      	ldr	r0, [pc, #296]	; (b98 <flash_init+0x1d0>)
     a70:	f003 ff54 	bl	491c <z_impl_z_log_msg_static_create>
     a74:	e7d8      	b.n	a28 <flash_init+0x60>
        LOG_ERR("Unabled to get page info");
     a76:	4b48      	ldr	r3, [pc, #288]	; (b98 <flash_init+0x1d0>)
     a78:	681b      	ldr	r3, [r3, #0]
     a7a:	f013 0f07 	tst.w	r3, #7
     a7e:	d102      	bne.n	a86 <flash_init+0xbe>
        return -2;
     a80:	f06f 0401 	mvn.w	r4, #1
     a84:	e7c8      	b.n	a18 <flash_init+0x50>
        LOG_ERR("Unabled to get page info");
     a86:	4b46      	ldr	r3, [pc, #280]	; (ba0 <flash_init+0x1d8>)
     a88:	9317      	str	r3, [sp, #92]	; 0x5c
     a8a:	2302      	movs	r3, #2
     a8c:	f88d 3004 	strb.w	r3, [sp, #4]
     a90:	2300      	movs	r3, #0
     a92:	f88d 3005 	strb.w	r3, [sp, #5]
     a96:	f88d 3006 	strb.w	r3, [sp, #6]
     a9a:	f88d 3007 	strb.w	r3, [sp, #7]
     a9e:	9a01      	ldr	r2, [sp, #4]
     aa0:	9216      	str	r2, [sp, #88]	; 0x58
     aa2:	4619      	mov	r1, r3
     aa4:	f363 0100 	bfi	r1, r3, #0, #1
     aa8:	f363 0141 	bfi	r1, r3, #1, #1
     aac:	f363 0182 	bfi	r1, r3, #2, #1
     ab0:	f363 01c5 	bfi	r1, r3, #3, #3
     ab4:	2201      	movs	r2, #1
     ab6:	f362 1188 	bfi	r1, r2, #6, #3
     aba:	2208      	movs	r2, #8
     abc:	f362 2153 	bfi	r1, r2, #9, #11
     ac0:	f363 511f 	bfi	r1, r3, #20, #12
     ac4:	aa16      	add	r2, sp, #88	; 0x58
     ac6:	4834      	ldr	r0, [pc, #208]	; (b98 <flash_init+0x1d0>)
     ac8:	f003 ff28 	bl	491c <z_impl_z_log_msg_static_create>
     acc:	e7d8      	b.n	a80 <flash_init+0xb8>
        LOG_ERR("Failed to mount flash");
     ace:	4b32      	ldr	r3, [pc, #200]	; (b98 <flash_init+0x1d0>)
     ad0:	681b      	ldr	r3, [r3, #0]
     ad2:	f013 0f07 	tst.w	r3, #7
     ad6:	d102      	bne.n	ade <flash_init+0x116>
        return -3;
     ad8:	f06f 0402 	mvn.w	r4, #2
     adc:	e79c      	b.n	a18 <flash_init+0x50>
        LOG_ERR("Failed to mount flash");
     ade:	4b31      	ldr	r3, [pc, #196]	; (ba4 <flash_init+0x1dc>)
     ae0:	9311      	str	r3, [sp, #68]	; 0x44
     ae2:	2302      	movs	r3, #2
     ae4:	f88d 3004 	strb.w	r3, [sp, #4]
     ae8:	2300      	movs	r3, #0
     aea:	f88d 3005 	strb.w	r3, [sp, #5]
     aee:	f88d 3006 	strb.w	r3, [sp, #6]
     af2:	f88d 3007 	strb.w	r3, [sp, #7]
     af6:	9a01      	ldr	r2, [sp, #4]
     af8:	9210      	str	r2, [sp, #64]	; 0x40
     afa:	4619      	mov	r1, r3
     afc:	f363 0100 	bfi	r1, r3, #0, #1
     b00:	f363 0141 	bfi	r1, r3, #1, #1
     b04:	f363 0182 	bfi	r1, r3, #2, #1
     b08:	f363 01c5 	bfi	r1, r3, #3, #3
     b0c:	2201      	movs	r2, #1
     b0e:	f362 1188 	bfi	r1, r2, #6, #3
     b12:	2208      	movs	r2, #8
     b14:	f362 2153 	bfi	r1, r2, #9, #11
     b18:	f363 511f 	bfi	r1, r3, #20, #12
     b1c:	aa10      	add	r2, sp, #64	; 0x40
     b1e:	481e      	ldr	r0, [pc, #120]	; (b98 <flash_init+0x1d0>)
     b20:	f003 fefc 	bl	491c <z_impl_z_log_msg_static_create>
     b24:	e7d8      	b.n	ad8 <flash_init+0x110>
        if (nvs_write(&fs, CONFIG_NVS_ID, &dummy_buffer, sizeof(dummy_buffer)) < 0)
     b26:	2304      	movs	r3, #4
     b28:	aa02      	add	r2, sp, #8
     b2a:	2100      	movs	r1, #0
     b2c:	4819      	ldr	r0, [pc, #100]	; (b94 <flash_init+0x1cc>)
     b2e:	f003 f9c3 	bl	3eb8 <nvs_write>
     b32:	2800      	cmp	r0, #0
     b34:	f6bf af70 	bge.w	a18 <flash_init+0x50>
            LOG_ERR("Failed to write null config");
     b38:	4b17      	ldr	r3, [pc, #92]	; (b98 <flash_init+0x1d0>)
     b3a:	681b      	ldr	r3, [r3, #0]
     b3c:	f013 0f07 	tst.w	r3, #7
     b40:	d102      	bne.n	b48 <flash_init+0x180>
            return -4;
     b42:	f06f 0403 	mvn.w	r4, #3
     b46:	e767      	b.n	a18 <flash_init+0x50>
            LOG_ERR("Failed to write null config");
     b48:	4b17      	ldr	r3, [pc, #92]	; (ba8 <flash_init+0x1e0>)
     b4a:	930b      	str	r3, [sp, #44]	; 0x2c
     b4c:	2302      	movs	r3, #2
     b4e:	f88d 3004 	strb.w	r3, [sp, #4]
     b52:	2300      	movs	r3, #0
     b54:	f88d 3005 	strb.w	r3, [sp, #5]
     b58:	f88d 3006 	strb.w	r3, [sp, #6]
     b5c:	f88d 3007 	strb.w	r3, [sp, #7]
     b60:	9a01      	ldr	r2, [sp, #4]
     b62:	920a      	str	r2, [sp, #40]	; 0x28
     b64:	4619      	mov	r1, r3
     b66:	f363 0100 	bfi	r1, r3, #0, #1
     b6a:	f363 0141 	bfi	r1, r3, #1, #1
     b6e:	f363 0182 	bfi	r1, r3, #2, #1
     b72:	f363 01c5 	bfi	r1, r3, #3, #3
     b76:	2201      	movs	r2, #1
     b78:	f362 1188 	bfi	r1, r2, #6, #3
     b7c:	2208      	movs	r2, #8
     b7e:	f362 2153 	bfi	r1, r2, #9, #11
     b82:	f363 511f 	bfi	r1, r3, #20, #12
     b86:	aa0a      	add	r2, sp, #40	; 0x28
     b88:	4803      	ldr	r0, [pc, #12]	; (b98 <flash_init+0x1d0>)
     b8a:	f003 fec7 	bl	491c <z_impl_z_log_msg_static_create>
     b8e:	e7d8      	b.n	b42 <flash_init+0x17a>
     b90:	0001513c 	.word	0x0001513c
     b94:	20000de4 	.word	0x20000de4
     b98:	200002cc 	.word	0x200002cc
     b9c:	00015638 	.word	0x00015638
     ba0:	00015654 	.word	0x00015654
     ba4:	00015670 	.word	0x00015670
     ba8:	00015688 	.word	0x00015688

00000bac <check_magic>:
{
     bac:	b5f0      	push	{r4, r5, r6, r7, lr}
     bae:	b083      	sub	sp, #12
     bb0:	af00      	add	r7, sp, #0
    const uint16_t magic = (MAGIC);
     bb2:	f64d 63ca 	movw	r3, #57034	; 0xdeca
     bb6:	80fb      	strh	r3, [r7, #6]
    if (memcmp(&header->magic, &magic, sizeof(uint16_t)))
     bb8:	2202      	movs	r2, #2
     bba:	1db9      	adds	r1, r7, #6
     bbc:	4827      	ldr	r0, [pc, #156]	; (c5c <check_magic+0xb0>)
     bbe:	f012 f8bf 	bl	12d40 <memcmp>
     bc2:	b910      	cbnz	r0, bca <check_magic+0x1e>
}
     bc4:	370c      	adds	r7, #12
     bc6:	46bd      	mov	sp, r7
     bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG_ERR("header magic: %u, magic: %u", header->magic, magic);
     bca:	4b25      	ldr	r3, [pc, #148]	; (c60 <check_magic+0xb4>)
     bcc:	681b      	ldr	r3, [r3, #0]
     bce:	f013 0f07 	tst.w	r3, #7
     bd2:	d03a      	beq.n	c4a <check_magic+0x9e>
     bd4:	4b21      	ldr	r3, [pc, #132]	; (c5c <check_magic+0xb0>)
     bd6:	881d      	ldrh	r5, [r3, #0]
     bd8:	466c      	mov	r4, sp
     bda:	b088      	sub	sp, #32
     bdc:	466b      	mov	r3, sp
     bde:	f113 0210 	adds.w	r2, r3, #16
     be2:	d035      	beq.n	c50 <check_magic+0xa4>
     be4:	2110      	movs	r1, #16
     be6:	b162      	cbz	r2, c02 <check_magic+0x56>
     be8:	4608      	mov	r0, r1
     bea:	2904      	cmp	r1, #4
     bec:	dd01      	ble.n	bf2 <check_magic+0x46>
     bee:	4e1d      	ldr	r6, [pc, #116]	; (c64 <check_magic+0xb8>)
     bf0:	615e      	str	r6, [r3, #20]
     bf2:	2808      	cmp	r0, #8
     bf4:	dd00      	ble.n	bf8 <check_magic+0x4c>
     bf6:	619d      	str	r5, [r3, #24]
     bf8:	280c      	cmp	r0, #12
     bfa:	dd02      	ble.n	c02 <check_magic+0x56>
     bfc:	f64d 60ca 	movw	r0, #57034	; 0xdeca
     c00:	61d8      	str	r0, [r3, #28]
     c02:	290f      	cmp	r1, #15
     c04:	dd27      	ble.n	c56 <check_magic+0xaa>
     c06:	f04f 0c10 	mov.w	ip, #16
     c0a:	b13a      	cbz	r2, c1c <check_magic+0x70>
     c0c:	2104      	movs	r1, #4
     c0e:	7039      	strb	r1, [r7, #0]
     c10:	2100      	movs	r1, #0
     c12:	7079      	strb	r1, [r7, #1]
     c14:	70b9      	strb	r1, [r7, #2]
     c16:	70f9      	strb	r1, [r7, #3]
     c18:	6838      	ldr	r0, [r7, #0]
     c1a:	6118      	str	r0, [r3, #16]
     c1c:	2100      	movs	r1, #0
     c1e:	f36f 0100 	bfc	r1, #0, #1
     c22:	f36f 0141 	bfc	r1, #1, #1
     c26:	f36f 0182 	bfc	r1, #2, #1
     c2a:	f36f 01c5 	bfc	r1, #3, #3
     c2e:	2301      	movs	r3, #1
     c30:	f363 1188 	bfi	r1, r3, #6, #3
     c34:	f3cc 030a 	ubfx	r3, ip, #0, #11
     c38:	f363 2153 	bfi	r1, r3, #9, #11
     c3c:	f36f 511f 	bfc	r1, #20, #12
     c40:	2300      	movs	r3, #0
     c42:	4807      	ldr	r0, [pc, #28]	; (c60 <check_magic+0xb4>)
     c44:	f003 fe6a 	bl	491c <z_impl_z_log_msg_static_create>
     c48:	46a5      	mov	sp, r4
        return -1;
     c4a:	f04f 30ff 	mov.w	r0, #4294967295
     c4e:	e7b9      	b.n	bc4 <check_magic+0x18>
        LOG_ERR("header magic: %u, magic: %u", header->magic, magic);
     c50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
     c54:	e7c7      	b.n	be6 <check_magic+0x3a>
     c56:	f06f 0c1b 	mvn.w	ip, #27
     c5a:	e7d6      	b.n	c0a <check_magic+0x5e>
     c5c:	20000e18 	.word	0x20000e18
     c60:	200002cc 	.word	0x200002cc
     c64:	000156a4 	.word	0x000156a4

00000c68 <check_crc>:
{
     c68:	b5f0      	push	{r4, r5, r6, r7, lr}
     c6a:	b083      	sub	sp, #12
     c6c:	af00      	add	r7, sp, #0
    const int total_length = SIZE_HEADER + header->tlv_length;
     c6e:	4d2c      	ldr	r5, [pc, #176]	; (d20 <check_crc+0xb8>)
     c70:	88ac      	ldrh	r4, [r5, #4]
     c72:	3406      	adds	r4, #6
    memcpy(&buffer_checksum, &_buffer[SIZE_HEADER + header->tlv_length], sizeof(uint32_t));
     c74:	2204      	movs	r2, #4
     c76:	1929      	adds	r1, r5, r4
     c78:	18b8      	adds	r0, r7, r2
     c7a:	f012 f886 	bl	12d8a <memcpy>
    uint32_t checksum = crc32_ieee(_buffer, total_length);
     c7e:	4621      	mov	r1, r4
     c80:	4628      	mov	r0, r5
     c82:	f00e fafb 	bl	f27c <crc32_ieee>
    if (buffer_checksum != checksum)
     c86:	687b      	ldr	r3, [r7, #4]
     c88:	4283      	cmp	r3, r0
     c8a:	d103      	bne.n	c94 <check_crc+0x2c>
    return 0;
     c8c:	2000      	movs	r0, #0
}
     c8e:	370c      	adds	r7, #12
     c90:	46bd      	mov	sp, r7
     c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG_ERR("Checksums do not match. Reference: %u, Calculated: %u", buffer_checksum, checksum);
     c94:	4a23      	ldr	r2, [pc, #140]	; (d24 <check_crc+0xbc>)
     c96:	6812      	ldr	r2, [r2, #0]
     c98:	f012 0f07 	tst.w	r2, #7
     c9c:	d037      	beq.n	d0e <check_crc+0xa6>
     c9e:	466c      	mov	r4, sp
     ca0:	b088      	sub	sp, #32
     ca2:	4669      	mov	r1, sp
     ca4:	f111 0210 	adds.w	r2, r1, #16
     ca8:	d034      	beq.n	d14 <check_crc+0xac>
     caa:	2510      	movs	r5, #16
     cac:	b162      	cbz	r2, cc8 <check_crc+0x60>
     cae:	46ac      	mov	ip, r5
     cb0:	2d04      	cmp	r5, #4
     cb2:	dd01      	ble.n	cb8 <check_crc+0x50>
     cb4:	4e1c      	ldr	r6, [pc, #112]	; (d28 <check_crc+0xc0>)
     cb6:	614e      	str	r6, [r1, #20]
     cb8:	f1bc 0f08 	cmp.w	ip, #8
     cbc:	dd00      	ble.n	cc0 <check_crc+0x58>
     cbe:	618b      	str	r3, [r1, #24]
     cc0:	f1bc 0f0c 	cmp.w	ip, #12
     cc4:	dd00      	ble.n	cc8 <check_crc+0x60>
     cc6:	61c8      	str	r0, [r1, #28]
     cc8:	2d0f      	cmp	r5, #15
     cca:	dd26      	ble.n	d1a <check_crc+0xb2>
     ccc:	2310      	movs	r3, #16
     cce:	b13a      	cbz	r2, ce0 <check_crc+0x78>
     cd0:	2004      	movs	r0, #4
     cd2:	7038      	strb	r0, [r7, #0]
     cd4:	2000      	movs	r0, #0
     cd6:	7078      	strb	r0, [r7, #1]
     cd8:	70b8      	strb	r0, [r7, #2]
     cda:	70f8      	strb	r0, [r7, #3]
     cdc:	6838      	ldr	r0, [r7, #0]
     cde:	6108      	str	r0, [r1, #16]
     ce0:	2100      	movs	r1, #0
     ce2:	f36f 0100 	bfc	r1, #0, #1
     ce6:	f36f 0141 	bfc	r1, #1, #1
     cea:	f36f 0182 	bfc	r1, #2, #1
     cee:	f36f 01c5 	bfc	r1, #3, #3
     cf2:	2001      	movs	r0, #1
     cf4:	f360 1188 	bfi	r1, r0, #6, #3
     cf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
     cfc:	f363 2153 	bfi	r1, r3, #9, #11
     d00:	f36f 511f 	bfc	r1, #20, #12
     d04:	2300      	movs	r3, #0
     d06:	4807      	ldr	r0, [pc, #28]	; (d24 <check_crc+0xbc>)
     d08:	f003 fe08 	bl	491c <z_impl_z_log_msg_static_create>
     d0c:	46a5      	mov	sp, r4
        return -1;
     d0e:	f04f 30ff 	mov.w	r0, #4294967295
     d12:	e7bc      	b.n	c8e <check_crc+0x26>
        LOG_ERR("Checksums do not match. Reference: %u, Calculated: %u", buffer_checksum, checksum);
     d14:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
     d18:	e7c8      	b.n	cac <check_crc+0x44>
     d1a:	f06f 031b 	mvn.w	r3, #27
     d1e:	e7d6      	b.n	cce <check_crc+0x66>
     d20:	20000e18 	.word	0x20000e18
     d24:	200002cc 	.word	0x200002cc
     d28:	000156c0 	.word	0x000156c0

00000d2c <check_data>:
{
     d2c:	b500      	push	{lr}
     d2e:	b08f      	sub	sp, #60	; 0x3c
    if (check_magic() != 0)
     d30:	f7ff ff3c 	bl	bac <check_magic>
     d34:	b940      	cbnz	r0, d48 <check_data+0x1c>
    if (header->tlv_length >= (SIZE_READ - SIZE_HEADER))
     d36:	4b30      	ldr	r3, [pc, #192]	; (df8 <check_data+0xcc>)
     d38:	889b      	ldrh	r3, [r3, #4]
     d3a:	2b79      	cmp	r3, #121	; 0x79
     d3c:	d830      	bhi.n	da0 <check_data+0x74>
    return check_crc();
     d3e:	f7ff ff93 	bl	c68 <check_crc>
}
     d42:	b00f      	add	sp, #60	; 0x3c
     d44:	f85d fb04 	ldr.w	pc, [sp], #4
        LOG_ERR("Magic not found");
     d48:	4b2c      	ldr	r3, [pc, #176]	; (dfc <check_data+0xd0>)
     d4a:	681b      	ldr	r3, [r3, #0]
     d4c:	f013 0f07 	tst.w	r3, #7
     d50:	d102      	bne.n	d58 <check_data+0x2c>
        return -1;
     d52:	f04f 30ff 	mov.w	r0, #4294967295
     d56:	e7f4      	b.n	d42 <check_data+0x16>
        LOG_ERR("Magic not found");
     d58:	4b29      	ldr	r3, [pc, #164]	; (e00 <check_data+0xd4>)
     d5a:	930d      	str	r3, [sp, #52]	; 0x34
     d5c:	2302      	movs	r3, #2
     d5e:	f88d 3004 	strb.w	r3, [sp, #4]
     d62:	2300      	movs	r3, #0
     d64:	f88d 3005 	strb.w	r3, [sp, #5]
     d68:	f88d 3006 	strb.w	r3, [sp, #6]
     d6c:	f88d 3007 	strb.w	r3, [sp, #7]
     d70:	9a01      	ldr	r2, [sp, #4]
     d72:	920c      	str	r2, [sp, #48]	; 0x30
     d74:	4619      	mov	r1, r3
     d76:	f363 0100 	bfi	r1, r3, #0, #1
     d7a:	f363 0141 	bfi	r1, r3, #1, #1
     d7e:	f363 0182 	bfi	r1, r3, #2, #1
     d82:	f363 01c5 	bfi	r1, r3, #3, #3
     d86:	2201      	movs	r2, #1
     d88:	f362 1188 	bfi	r1, r2, #6, #3
     d8c:	2208      	movs	r2, #8
     d8e:	f362 2153 	bfi	r1, r2, #9, #11
     d92:	f363 511f 	bfi	r1, r3, #20, #12
     d96:	aa0c      	add	r2, sp, #48	; 0x30
     d98:	4818      	ldr	r0, [pc, #96]	; (dfc <check_data+0xd0>)
     d9a:	f003 fdbf 	bl	491c <z_impl_z_log_msg_static_create>
     d9e:	e7d8      	b.n	d52 <check_data+0x26>
        LOG_ERR("Data length mismatch");
     da0:	4b16      	ldr	r3, [pc, #88]	; (dfc <check_data+0xd0>)
     da2:	681b      	ldr	r3, [r3, #0]
     da4:	f013 0f07 	tst.w	r3, #7
     da8:	d102      	bne.n	db0 <check_data+0x84>
        return -2;
     daa:	f06f 0001 	mvn.w	r0, #1
     dae:	e7c8      	b.n	d42 <check_data+0x16>
        LOG_ERR("Data length mismatch");
     db0:	4b14      	ldr	r3, [pc, #80]	; (e04 <check_data+0xd8>)
     db2:	9307      	str	r3, [sp, #28]
     db4:	2302      	movs	r3, #2
     db6:	f88d 3004 	strb.w	r3, [sp, #4]
     dba:	2300      	movs	r3, #0
     dbc:	f88d 3005 	strb.w	r3, [sp, #5]
     dc0:	f88d 3006 	strb.w	r3, [sp, #6]
     dc4:	f88d 3007 	strb.w	r3, [sp, #7]
     dc8:	9a01      	ldr	r2, [sp, #4]
     dca:	9206      	str	r2, [sp, #24]
     dcc:	4619      	mov	r1, r3
     dce:	f363 0100 	bfi	r1, r3, #0, #1
     dd2:	f363 0141 	bfi	r1, r3, #1, #1
     dd6:	f363 0182 	bfi	r1, r3, #2, #1
     dda:	f363 01c5 	bfi	r1, r3, #3, #3
     dde:	2201      	movs	r2, #1
     de0:	f362 1188 	bfi	r1, r2, #6, #3
     de4:	2208      	movs	r2, #8
     de6:	f362 2153 	bfi	r1, r2, #9, #11
     dea:	f363 511f 	bfi	r1, r3, #20, #12
     dee:	aa06      	add	r2, sp, #24
     df0:	4802      	ldr	r0, [pc, #8]	; (dfc <check_data+0xd0>)
     df2:	f003 fd93 	bl	491c <z_impl_z_log_msg_static_create>
     df6:	e7d8      	b.n	daa <check_data+0x7e>
     df8:	20000e18 	.word	0x20000e18
     dfc:	200002cc 	.word	0x200002cc
     e00:	000156f8 	.word	0x000156f8
     e04:	00015708 	.word	0x00015708

00000e08 <write_defaults>:
{
     e08:	b530      	push	{r4, r5, lr}
     e0a:	b083      	sub	sp, #12
    const uint16_t magic = (MAGIC);
     e0c:	f64d 63ca 	movw	r3, #57034	; 0xdeca
     e10:	f8ad 3006 	strh.w	r3, [sp, #6]
    memcpy(&_buffer[OFFSET_MAGIC], &magic, sizeof(uint16_t));
     e14:	4c14      	ldr	r4, [pc, #80]	; (e68 <write_defaults+0x60>)
     e16:	2202      	movs	r2, #2
     e18:	f10d 0106 	add.w	r1, sp, #6
     e1c:	4620      	mov	r0, r4
     e1e:	f011 ffb4 	bl	12d8a <memcpy>
    _buffer[OFFSET_MAJOR_VERSION] = VERSION_MAJOR;
     e22:	2301      	movs	r3, #1
     e24:	70a3      	strb	r3, [r4, #2]
    _buffer[OFFSET_MINOR_VERSION] = VERSION_MINOR;
     e26:	2500      	movs	r5, #0
     e28:	70e5      	strb	r5, [r4, #3]
    write_crc();
     e2a:	f7ff fdb7 	bl	99c <write_crc>
    if (nvs_write(&fs, CONFIG_NVS_ID, &_buffer, SIZE_READ) < 0)
     e2e:	2380      	movs	r3, #128	; 0x80
     e30:	4622      	mov	r2, r4
     e32:	4629      	mov	r1, r5
     e34:	480d      	ldr	r0, [pc, #52]	; (e6c <write_defaults+0x64>)
     e36:	f003 f83f 	bl	3eb8 <nvs_write>
     e3a:	42a8      	cmp	r0, r5
     e3c:	db0a      	blt.n	e54 <write_defaults+0x4c>
    k_msleep(CONFIG_READ_DELAY);
     e3e:	20c8      	movs	r0, #200	; 0xc8
     e40:	f00d fd2a 	bl	e898 <k_msleep>
    if (read_buffer() != 0)
     e44:	f7ff fd9a 	bl	97c <read_buffer>
     e48:	b938      	cbnz	r0, e5a <write_defaults+0x52>
    if (check_data() != 0)
     e4a:	f7ff ff6f 	bl	d2c <check_data>
     e4e:	b938      	cbnz	r0, e60 <write_defaults+0x58>
}
     e50:	b003      	add	sp, #12
     e52:	bd30      	pop	{r4, r5, pc}
        return -1;
     e54:	f04f 30ff 	mov.w	r0, #4294967295
     e58:	e7fa      	b.n	e50 <write_defaults+0x48>
        return -2;
     e5a:	f06f 0001 	mvn.w	r0, #1
     e5e:	e7f7      	b.n	e50 <write_defaults+0x48>
        return -3;
     e60:	f06f 0002 	mvn.w	r0, #2
     e64:	e7f4      	b.n	e50 <write_defaults+0x48>
     e66:	bf00      	nop
     e68:	20000e18 	.word	0x20000e18
     e6c:	20000de4 	.word	0x20000de4

00000e70 <write_un>:

    return 0;
}

int write_un(config_field_t field, size_t size, void *value)
{
     e70:	b5f0      	push	{r4, r5, r6, r7, lr}
     e72:	b09d      	sub	sp, #116	; 0x74
     e74:	9101      	str	r1, [sp, #4]
    if (header->tlv_length + 2 + size >= SIZE_TLV_MAX)
     e76:	4b83      	ldr	r3, [pc, #524]	; (1084 <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x84>)
     e78:	889f      	ldrh	r7, [r3, #4]
     e7a:	187b      	adds	r3, r7, r1
     e7c:	3302      	adds	r3, #2
     e7e:	2b79      	cmp	r3, #121	; 0x79
     e80:	d82c      	bhi.n	edc <write_un+0x6c>
     e82:	4604      	mov	r4, r0
     e84:	4616      	mov	r6, r2
     e86:	460d      	mov	r5, r1
        LOG_ERR("Cannot add value to flash, not enough space");
        return -1;
    }

    bool need_to_write = false;
    int pos = find_field(field);
     e88:	f7ff fd5e 	bl	948 <find_field>
    if (pos > -1)
     e8c:	1e03      	subs	r3, r0, #0
     e8e:	f2c0 8086 	blt.w	f9e <write_un+0x12e>
    {
        if (pos + 2 + size >= (SIZE_TLV_MAX))
     e92:	18ea      	adds	r2, r5, r3
     e94:	3202      	adds	r2, #2
     e96:	2a79      	cmp	r2, #121	; 0x79
     e98:	d84c      	bhi.n	f34 <write_un+0xc4>
        {
            LOG_ERR("Cannot add value to flash, not enough space");
            return -2;
        }
        if (memcmp(&tlv.data[pos + 2], value, size) != 0)
     e9a:	4a7b      	ldr	r2, [pc, #492]	; (1088 <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x88>)
     e9c:	6810      	ldr	r0, [r2, #0]
     e9e:	1c9c      	adds	r4, r3, #2
     ea0:	462a      	mov	r2, r5
     ea2:	4631      	mov	r1, r6
     ea4:	4420      	add	r0, r4
     ea6:	f011 ff4b 	bl	12d40 <memcmp>
     eaa:	2800      	cmp	r0, #0
     eac:	d16e      	bne.n	f8c <write_un+0x11c>
    bool need_to_write = false;
     eae:	2400      	movs	r4, #0
        header->tlv_length += 2 + size;

        need_to_write = true;
    }

    write_crc();
     eb0:	f7ff fd74 	bl	99c <write_crc>
    ssize_t bytes_written = nvs_write(&fs, CONFIG_NVS_ID, &_buffer, SIZE_READ);
     eb4:	2380      	movs	r3, #128	; 0x80
     eb6:	4a73      	ldr	r2, [pc, #460]	; (1084 <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x84>)
     eb8:	2100      	movs	r1, #0
     eba:	4874      	ldr	r0, [pc, #464]	; (108c <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x8c>)
     ebc:	f002 fffc 	bl	3eb8 <nvs_write>
    if (need_to_write && bytes_written < 0)
     ec0:	b114      	cbz	r4, ec8 <write_un+0x58>
     ec2:	2800      	cmp	r0, #0
     ec4:	f2c0 8085 	blt.w	fd2 <write_un+0x162>
    {
        LOG_ERR("Failed to write value to flash");
        return -4;
    }

    k_msleep(CONFIG_READ_DELAY);
     ec8:	20c8      	movs	r0, #200	; 0xc8
     eca:	f00d fce5 	bl	e898 <k_msleep>
    if (read_buffer() != 0)
     ece:	f7ff fd55 	bl	97c <read_buffer>
     ed2:	2800      	cmp	r0, #0
     ed4:	f040 80a9 	bne.w	102a <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x2a>
        LOG_ERR("Failed to re-read buffer after write");
        return -5;
    }

    return 0;
}
     ed8:	b01d      	add	sp, #116	; 0x74
     eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG_ERR("Cannot add value to flash, not enough space");
     edc:	4b6c      	ldr	r3, [pc, #432]	; (1090 <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x90>)
     ede:	681b      	ldr	r3, [r3, #0]
     ee0:	f013 0f07 	tst.w	r3, #7
     ee4:	d102      	bne.n	eec <write_un+0x7c>
        return -1;
     ee6:	f04f 30ff 	mov.w	r0, #4294967295
     eea:	e7f5      	b.n	ed8 <write_un+0x68>
        LOG_ERR("Cannot add value to flash, not enough space");
     eec:	4b69      	ldr	r3, [pc, #420]	; (1094 <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x94>)
     eee:	931b      	str	r3, [sp, #108]	; 0x6c
     ef0:	2302      	movs	r3, #2
     ef2:	f88d 300c 	strb.w	r3, [sp, #12]
     ef6:	2300      	movs	r3, #0
     ef8:	f88d 300d 	strb.w	r3, [sp, #13]
     efc:	f88d 300e 	strb.w	r3, [sp, #14]
     f00:	f88d 300f 	strb.w	r3, [sp, #15]
     f04:	9a03      	ldr	r2, [sp, #12]
     f06:	921a      	str	r2, [sp, #104]	; 0x68
     f08:	4619      	mov	r1, r3
     f0a:	f363 0100 	bfi	r1, r3, #0, #1
     f0e:	f363 0141 	bfi	r1, r3, #1, #1
     f12:	f363 0182 	bfi	r1, r3, #2, #1
     f16:	f363 01c5 	bfi	r1, r3, #3, #3
     f1a:	2201      	movs	r2, #1
     f1c:	f362 1188 	bfi	r1, r2, #6, #3
     f20:	2208      	movs	r2, #8
     f22:	f362 2153 	bfi	r1, r2, #9, #11
     f26:	f363 511f 	bfi	r1, r3, #20, #12
     f2a:	aa1a      	add	r2, sp, #104	; 0x68
     f2c:	4858      	ldr	r0, [pc, #352]	; (1090 <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x90>)
     f2e:	f003 fcf5 	bl	491c <z_impl_z_log_msg_static_create>
     f32:	e7d8      	b.n	ee6 <write_un+0x76>
            LOG_ERR("Cannot add value to flash, not enough space");
     f34:	4b56      	ldr	r3, [pc, #344]	; (1090 <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x90>)
     f36:	681b      	ldr	r3, [r3, #0]
     f38:	f013 0f07 	tst.w	r3, #7
     f3c:	d102      	bne.n	f44 <write_un+0xd4>
            return -2;
     f3e:	f06f 0001 	mvn.w	r0, #1
     f42:	e7c9      	b.n	ed8 <write_un+0x68>
            LOG_ERR("Cannot add value to flash, not enough space");
     f44:	4b53      	ldr	r3, [pc, #332]	; (1094 <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x94>)
     f46:	9309      	str	r3, [sp, #36]	; 0x24
     f48:	2302      	movs	r3, #2
     f4a:	f88d 300c 	strb.w	r3, [sp, #12]
     f4e:	2300      	movs	r3, #0
     f50:	f88d 300d 	strb.w	r3, [sp, #13]
     f54:	f88d 300e 	strb.w	r3, [sp, #14]
     f58:	f88d 300f 	strb.w	r3, [sp, #15]
     f5c:	9a03      	ldr	r2, [sp, #12]
     f5e:	9208      	str	r2, [sp, #32]
     f60:	4619      	mov	r1, r3
     f62:	f363 0100 	bfi	r1, r3, #0, #1
     f66:	f363 0141 	bfi	r1, r3, #1, #1
     f6a:	f363 0182 	bfi	r1, r3, #2, #1
     f6e:	f363 01c5 	bfi	r1, r3, #3, #3
     f72:	2201      	movs	r2, #1
     f74:	f362 1188 	bfi	r1, r2, #6, #3
     f78:	2208      	movs	r2, #8
     f7a:	f362 2153 	bfi	r1, r2, #9, #11
     f7e:	f363 511f 	bfi	r1, r3, #20, #12
     f82:	aa08      	add	r2, sp, #32
     f84:	4842      	ldr	r0, [pc, #264]	; (1090 <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x90>)
     f86:	f003 fcc9 	bl	491c <z_impl_z_log_msg_static_create>
     f8a:	e7d8      	b.n	f3e <write_un+0xce>
            memcpy(&tlv.data[pos + 2], value, size);
     f8c:	4b3e      	ldr	r3, [pc, #248]	; (1088 <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x88>)
     f8e:	6818      	ldr	r0, [r3, #0]
     f90:	9a01      	ldr	r2, [sp, #4]
     f92:	4631      	mov	r1, r6
     f94:	4420      	add	r0, r4
     f96:	f011 fef8 	bl	12d8a <memcpy>
            need_to_write = true;
     f9a:	2401      	movs	r4, #1
     f9c:	e788      	b.n	eb0 <write_un+0x40>
        tlv.data[header->tlv_length] = field;
     f9e:	4d3a      	ldr	r5, [pc, #232]	; (1088 <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x88>)
     fa0:	6828      	ldr	r0, [r5, #0]
     fa2:	55c4      	strb	r4, [r0, r7]
        memcpy(&tlv.data[header->tlv_length + 1], &size, size);
     fa4:	4c37      	ldr	r4, [pc, #220]	; (1084 <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x84>)
     fa6:	88a3      	ldrh	r3, [r4, #4]
     fa8:	3301      	adds	r3, #1
     faa:	9a01      	ldr	r2, [sp, #4]
     fac:	a901      	add	r1, sp, #4
     fae:	4418      	add	r0, r3
     fb0:	f011 feeb 	bl	12d8a <memcpy>
        memcpy(&tlv.data[header->tlv_length + 2], value, size);
     fb4:	6828      	ldr	r0, [r5, #0]
     fb6:	88a3      	ldrh	r3, [r4, #4]
     fb8:	3302      	adds	r3, #2
     fba:	9a01      	ldr	r2, [sp, #4]
     fbc:	4631      	mov	r1, r6
     fbe:	4418      	add	r0, r3
     fc0:	f011 fee3 	bl	12d8a <memcpy>
        header->tlv_length += 2 + size;
     fc4:	88a3      	ldrh	r3, [r4, #4]
     fc6:	9a01      	ldr	r2, [sp, #4]
     fc8:	4413      	add	r3, r2
     fca:	3302      	adds	r3, #2
     fcc:	80a3      	strh	r3, [r4, #4]
        need_to_write = true;
     fce:	2401      	movs	r4, #1
     fd0:	e76e      	b.n	eb0 <write_un+0x40>
        LOG_ERR("Failed to write value to flash");
     fd2:	4b2f      	ldr	r3, [pc, #188]	; (1090 <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x90>)
     fd4:	681b      	ldr	r3, [r3, #0]
     fd6:	f013 0f07 	tst.w	r3, #7
     fda:	d102      	bne.n	fe2 <write_un+0x172>
        return -4;
     fdc:	f06f 0003 	mvn.w	r0, #3
     fe0:	e77a      	b.n	ed8 <write_un+0x68>
        LOG_ERR("Failed to write value to flash");
     fe2:	4b2d      	ldr	r3, [pc, #180]	; (1098 <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x98>)
     fe4:	930f      	str	r3, [sp, #60]	; 0x3c
     fe6:	2302      	movs	r3, #2
     fe8:	f88d 300c 	strb.w	r3, [sp, #12]
     fec:	2300      	movs	r3, #0
     fee:	f88d 300d 	strb.w	r3, [sp, #13]
     ff2:	f88d 300e 	strb.w	r3, [sp, #14]
     ff6:	f88d 300f 	strb.w	r3, [sp, #15]
     ffa:	9a03      	ldr	r2, [sp, #12]
     ffc:	920e      	str	r2, [sp, #56]	; 0x38
     ffe:	4619      	mov	r1, r3
    1000:	f363 0100 	bfi	r1, r3, #0, #1
    1004:	f363 0141 	bfi	r1, r3, #1, #1
    1008:	f363 0182 	bfi	r1, r3, #2, #1
    100c:	f363 01c5 	bfi	r1, r3, #3, #3
    1010:	2201      	movs	r2, #1
    1012:	f362 1188 	bfi	r1, r2, #6, #3
    1016:	2208      	movs	r2, #8
    1018:	f362 2153 	bfi	r1, r2, #9, #11
    101c:	f363 511f 	bfi	r1, r3, #20, #12
    1020:	aa0e      	add	r2, sp, #56	; 0x38
    1022:	481b      	ldr	r0, [pc, #108]	; (1090 <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x90>)
    1024:	f003 fc7a 	bl	491c <z_impl_z_log_msg_static_create>
    1028:	e7d8      	b.n	fdc <write_un+0x16c>
        LOG_ERR("Failed to re-read buffer after write");
    102a:	4b19      	ldr	r3, [pc, #100]	; (1090 <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x90>)
    102c:	681b      	ldr	r3, [r3, #0]
    102e:	f013 0f07 	tst.w	r3, #7
    1032:	d102      	bne.n	103a <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x3a>
        return -5;
    1034:	f06f 0004 	mvn.w	r0, #4
    1038:	e74e      	b.n	ed8 <write_un+0x68>
        LOG_ERR("Failed to re-read buffer after write");
    103a:	4b18      	ldr	r3, [pc, #96]	; (109c <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x9c>)
    103c:	9315      	str	r3, [sp, #84]	; 0x54
    103e:	2302      	movs	r3, #2
    1040:	f88d 300c 	strb.w	r3, [sp, #12]
    1044:	2300      	movs	r3, #0
    1046:	f88d 300d 	strb.w	r3, [sp, #13]
    104a:	f88d 300e 	strb.w	r3, [sp, #14]
    104e:	f88d 300f 	strb.w	r3, [sp, #15]
    1052:	9a03      	ldr	r2, [sp, #12]
    1054:	9214      	str	r2, [sp, #80]	; 0x50
    1056:	4619      	mov	r1, r3
    1058:	f363 0100 	bfi	r1, r3, #0, #1
    105c:	f363 0141 	bfi	r1, r3, #1, #1
    1060:	f363 0182 	bfi	r1, r3, #2, #1
    1064:	f363 01c5 	bfi	r1, r3, #3, #3
    1068:	2201      	movs	r2, #1
    106a:	f362 1188 	bfi	r1, r2, #6, #3
    106e:	2208      	movs	r2, #8
    1070:	f362 2153 	bfi	r1, r2, #9, #11
    1074:	f363 511f 	bfi	r1, r3, #20, #12
    1078:	aa14      	add	r2, sp, #80	; 0x50
    107a:	4805      	ldr	r0, [pc, #20]	; (1090 <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x90>)
    107c:	f003 fc4e 	bl	491c <z_impl_z_log_msg_static_create>
    1080:	e7d8      	b.n	1034 <CONFIG_FLASH_SHELL_BUFFER_SIZE+0x34>
    1082:	bf00      	nop
    1084:	20000e18 	.word	0x20000e18
    1088:	20000e14 	.word	0x20000e14
    108c:	20000de4 	.word	0x20000de4
    1090:	200002cc 	.word	0x200002cc
    1094:	00015720 	.word	0x00015720
    1098:	0001574c 	.word	0x0001574c
    109c:	0001576c 	.word	0x0001576c

000010a0 <config_init>:
{
    10a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    10a2:	b08f      	sub	sp, #60	; 0x3c
    10a4:	af00      	add	r7, sp, #0
    ret = flash_init();
    10a6:	f7ff fc8f 	bl	9c8 <flash_init>
    if (ret != 0)
    10aa:	b9d8      	cbnz	r0, 10e4 <config_init+0x44>
    k_msleep(CONFIG_READ_DELAY);
    10ac:	20c8      	movs	r0, #200	; 0xc8
    10ae:	f00d fbf3 	bl	e898 <k_msleep>
    ret = read_buffer();
    10b2:	f7ff fc63 	bl	97c <read_buffer>
    if (ret != 0)
    10b6:	4603      	mov	r3, r0
    10b8:	2800      	cmp	r0, #0
    10ba:	d159      	bne.n	1170 <config_init+0xd0>
    tlv.data = &_buffer[SIZE_HEADER];
    10bc:	4b97      	ldr	r3, [pc, #604]	; (131c <config_init+0x27c>)
    10be:	4a98      	ldr	r2, [pc, #608]	; (1320 <config_init+0x280>)
    10c0:	601a      	str	r2, [r3, #0]
    ret = check_data();
    10c2:	f7ff fe33 	bl	d2c <check_data>
    if (ret == 0)
    10c6:	4604      	mov	r4, r0
    10c8:	2800      	cmp	r0, #0
    10ca:	f040 80b7 	bne.w	123c <config_init+0x19c>
        LOG_INF("Configuration read and verified");
    10ce:	4b95      	ldr	r3, [pc, #596]	; (1324 <config_init+0x284>)
    10d0:	681b      	ldr	r3, [r3, #0]
    10d2:	f003 0307 	and.w	r3, r3, #7
    10d6:	2b02      	cmp	r3, #2
    10d8:	f200 808f 	bhi.w	11fa <config_init+0x15a>
}
    10dc:	4620      	mov	r0, r4
    10de:	373c      	adds	r7, #60	; 0x3c
    10e0:	46bd      	mov	sp, r7
    10e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10e4:	4603      	mov	r3, r0
        LOG_ERR("Failed to initialize flash: %d", ret);
    10e6:	4a8f      	ldr	r2, [pc, #572]	; (1324 <config_init+0x284>)
    10e8:	6812      	ldr	r2, [r2, #0]
    10ea:	f012 0f07 	tst.w	r2, #7
    10ee:	d039      	beq.n	1164 <config_init+0xc4>
    10f0:	466c      	mov	r4, sp
    10f2:	b088      	sub	sp, #32
    10f4:	4669      	mov	r1, sp
    10f6:	f111 0210 	adds.w	r2, r1, #16
    10fa:	d00e      	beq.n	111a <config_init+0x7a>
    10fc:	200c      	movs	r0, #12
    10fe:	b142      	cbz	r2, 1112 <config_init+0x72>
    1100:	4684      	mov	ip, r0
    1102:	2804      	cmp	r0, #4
    1104:	dd01      	ble.n	110a <config_init+0x6a>
    1106:	4d88      	ldr	r5, [pc, #544]	; (1328 <config_init+0x288>)
    1108:	614d      	str	r5, [r1, #20]
    110a:	f1bc 0f08 	cmp.w	ip, #8
    110e:	dd07      	ble.n	1120 <config_init+0x80>
    1110:	618b      	str	r3, [r1, #24]
    1112:	280b      	cmp	r0, #11
    1114:	dd29      	ble.n	116a <config_init+0xca>
    1116:	230c      	movs	r3, #12
    1118:	e004      	b.n	1124 <config_init+0x84>
    111a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    111e:	e7ee      	b.n	10fe <config_init+0x5e>
    1120:	f06f 031b 	mvn.w	r3, #27
    1124:	b13a      	cbz	r2, 1136 <config_init+0x96>
    1126:	2003      	movs	r0, #3
    1128:	7138      	strb	r0, [r7, #4]
    112a:	2000      	movs	r0, #0
    112c:	7178      	strb	r0, [r7, #5]
    112e:	71b8      	strb	r0, [r7, #6]
    1130:	71f8      	strb	r0, [r7, #7]
    1132:	6878      	ldr	r0, [r7, #4]
    1134:	6108      	str	r0, [r1, #16]
    1136:	2100      	movs	r1, #0
    1138:	f36f 0100 	bfc	r1, #0, #1
    113c:	f36f 0141 	bfc	r1, #1, #1
    1140:	f36f 0182 	bfc	r1, #2, #1
    1144:	f36f 01c5 	bfc	r1, #3, #3
    1148:	2001      	movs	r0, #1
    114a:	f360 1188 	bfi	r1, r0, #6, #3
    114e:	f3c3 030a 	ubfx	r3, r3, #0, #11
    1152:	f363 2153 	bfi	r1, r3, #9, #11
    1156:	f36f 511f 	bfc	r1, #20, #12
    115a:	2300      	movs	r3, #0
    115c:	4871      	ldr	r0, [pc, #452]	; (1324 <config_init+0x284>)
    115e:	f003 fbdd 	bl	491c <z_impl_z_log_msg_static_create>
    1162:	46a5      	mov	sp, r4
        return -1;
    1164:	f04f 34ff 	mov.w	r4, #4294967295
    1168:	e7b8      	b.n	10dc <config_init+0x3c>
        LOG_ERR("Failed to initialize flash: %d", ret);
    116a:	f06f 031b 	mvn.w	r3, #27
    116e:	e7d9      	b.n	1124 <config_init+0x84>
        LOG_ERR("Failed to read flash data: %d", ret);
    1170:	4a6c      	ldr	r2, [pc, #432]	; (1324 <config_init+0x284>)
    1172:	6812      	ldr	r2, [r2, #0]
    1174:	f012 0f07 	tst.w	r2, #7
    1178:	d039      	beq.n	11ee <config_init+0x14e>
    117a:	466c      	mov	r4, sp
    117c:	b088      	sub	sp, #32
    117e:	4669      	mov	r1, sp
    1180:	f111 0210 	adds.w	r2, r1, #16
    1184:	d00e      	beq.n	11a4 <config_init+0x104>
    1186:	200c      	movs	r0, #12
    1188:	b142      	cbz	r2, 119c <config_init+0xfc>
    118a:	4684      	mov	ip, r0
    118c:	2804      	cmp	r0, #4
    118e:	dd01      	ble.n	1194 <config_init+0xf4>
    1190:	4d66      	ldr	r5, [pc, #408]	; (132c <config_init+0x28c>)
    1192:	614d      	str	r5, [r1, #20]
    1194:	f1bc 0f08 	cmp.w	ip, #8
    1198:	dd07      	ble.n	11aa <config_init+0x10a>
    119a:	618b      	str	r3, [r1, #24]
    119c:	280b      	cmp	r0, #11
    119e:	dd29      	ble.n	11f4 <config_init+0x154>
    11a0:	230c      	movs	r3, #12
    11a2:	e004      	b.n	11ae <config_init+0x10e>
    11a4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    11a8:	e7ee      	b.n	1188 <config_init+0xe8>
    11aa:	f06f 031b 	mvn.w	r3, #27
    11ae:	b13a      	cbz	r2, 11c0 <config_init+0x120>
    11b0:	2003      	movs	r0, #3
    11b2:	7138      	strb	r0, [r7, #4]
    11b4:	2000      	movs	r0, #0
    11b6:	7178      	strb	r0, [r7, #5]
    11b8:	71b8      	strb	r0, [r7, #6]
    11ba:	71f8      	strb	r0, [r7, #7]
    11bc:	6878      	ldr	r0, [r7, #4]
    11be:	6108      	str	r0, [r1, #16]
    11c0:	2100      	movs	r1, #0
    11c2:	f36f 0100 	bfc	r1, #0, #1
    11c6:	f36f 0141 	bfc	r1, #1, #1
    11ca:	f36f 0182 	bfc	r1, #2, #1
    11ce:	f36f 01c5 	bfc	r1, #3, #3
    11d2:	2001      	movs	r0, #1
    11d4:	f360 1188 	bfi	r1, r0, #6, #3
    11d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
    11dc:	f363 2153 	bfi	r1, r3, #9, #11
    11e0:	f36f 511f 	bfc	r1, #20, #12
    11e4:	2300      	movs	r3, #0
    11e6:	484f      	ldr	r0, [pc, #316]	; (1324 <config_init+0x284>)
    11e8:	f003 fb98 	bl	491c <z_impl_z_log_msg_static_create>
    11ec:	46a5      	mov	sp, r4
        return -2;
    11ee:	f06f 0401 	mvn.w	r4, #1
    11f2:	e773      	b.n	10dc <config_init+0x3c>
        LOG_ERR("Failed to read flash data: %d", ret);
    11f4:	f06f 031b 	mvn.w	r3, #27
    11f8:	e7d9      	b.n	11ae <config_init+0x10e>
        LOG_INF("Configuration read and verified");
    11fa:	4b4d      	ldr	r3, [pc, #308]	; (1330 <config_init+0x290>)
    11fc:	637b      	str	r3, [r7, #52]	; 0x34
    11fe:	2302      	movs	r3, #2
    1200:	713b      	strb	r3, [r7, #4]
    1202:	2300      	movs	r3, #0
    1204:	717b      	strb	r3, [r7, #5]
    1206:	71bb      	strb	r3, [r7, #6]
    1208:	71fb      	strb	r3, [r7, #7]
    120a:	687a      	ldr	r2, [r7, #4]
    120c:	633a      	str	r2, [r7, #48]	; 0x30
    120e:	4619      	mov	r1, r3
    1210:	f363 0100 	bfi	r1, r3, #0, #1
    1214:	f363 0141 	bfi	r1, r3, #1, #1
    1218:	f363 0182 	bfi	r1, r3, #2, #1
    121c:	f363 01c5 	bfi	r1, r3, #3, #3
    1220:	2203      	movs	r2, #3
    1222:	f362 1188 	bfi	r1, r2, #6, #3
    1226:	2208      	movs	r2, #8
    1228:	f362 2153 	bfi	r1, r2, #9, #11
    122c:	f363 511f 	bfi	r1, r3, #20, #12
    1230:	f107 0230 	add.w	r2, r7, #48	; 0x30
    1234:	483b      	ldr	r0, [pc, #236]	; (1324 <config_init+0x284>)
    1236:	f003 fb71 	bl	491c <z_impl_z_log_msg_static_create>
    123a:	e74f      	b.n	10dc <config_init+0x3c>
        ret = write_defaults();
    123c:	f7ff fde4 	bl	e08 <write_defaults>
        if (ret != 0)
    1240:	4604      	mov	r4, r0
    1242:	bb38      	cbnz	r0, 1294 <config_init+0x1f4>
        LOG_INF("Wrote default config to flash");
    1244:	4b37      	ldr	r3, [pc, #220]	; (1324 <config_init+0x284>)
    1246:	681b      	ldr	r3, [r3, #0]
    1248:	f003 0307 	and.w	r3, r3, #7
    124c:	2b02      	cmp	r3, #2
    124e:	f67f af45 	bls.w	10dc <config_init+0x3c>
    1252:	4b38      	ldr	r3, [pc, #224]	; (1334 <config_init+0x294>)
    1254:	61fb      	str	r3, [r7, #28]
    1256:	2302      	movs	r3, #2
    1258:	713b      	strb	r3, [r7, #4]
    125a:	2300      	movs	r3, #0
    125c:	717b      	strb	r3, [r7, #5]
    125e:	71bb      	strb	r3, [r7, #6]
    1260:	71fb      	strb	r3, [r7, #7]
    1262:	687a      	ldr	r2, [r7, #4]
    1264:	61ba      	str	r2, [r7, #24]
    1266:	4619      	mov	r1, r3
    1268:	f363 0100 	bfi	r1, r3, #0, #1
    126c:	f363 0141 	bfi	r1, r3, #1, #1
    1270:	f363 0182 	bfi	r1, r3, #2, #1
    1274:	f363 01c5 	bfi	r1, r3, #3, #3
    1278:	2203      	movs	r2, #3
    127a:	f362 1188 	bfi	r1, r2, #6, #3
    127e:	2208      	movs	r2, #8
    1280:	f362 2153 	bfi	r1, r2, #9, #11
    1284:	f363 511f 	bfi	r1, r3, #20, #12
    1288:	f107 0218 	add.w	r2, r7, #24
    128c:	4825      	ldr	r0, [pc, #148]	; (1324 <config_init+0x284>)
    128e:	f003 fb45 	bl	491c <z_impl_z_log_msg_static_create>
    1292:	e723      	b.n	10dc <config_init+0x3c>
            LOG_ERR("Failed to write default config to flash: %d", ret);
    1294:	4b23      	ldr	r3, [pc, #140]	; (1324 <config_init+0x284>)
    1296:	681b      	ldr	r3, [r3, #0]
    1298:	f013 0f07 	tst.w	r3, #7
    129c:	d038      	beq.n	1310 <config_init+0x270>
    129e:	466d      	mov	r5, sp
    12a0:	b088      	sub	sp, #32
    12a2:	4669      	mov	r1, sp
    12a4:	f111 0210 	adds.w	r2, r1, #16
    12a8:	d00d      	beq.n	12c6 <config_init+0x226>
    12aa:	230c      	movs	r3, #12
    12ac:	b13a      	cbz	r2, 12be <config_init+0x21e>
    12ae:	4618      	mov	r0, r3
    12b0:	2b04      	cmp	r3, #4
    12b2:	dd01      	ble.n	12b8 <config_init+0x218>
    12b4:	4e20      	ldr	r6, [pc, #128]	; (1338 <config_init+0x298>)
    12b6:	614e      	str	r6, [r1, #20]
    12b8:	2808      	cmp	r0, #8
    12ba:	dd07      	ble.n	12cc <config_init+0x22c>
    12bc:	618c      	str	r4, [r1, #24]
    12be:	2b0b      	cmp	r3, #11
    12c0:	dd29      	ble.n	1316 <config_init+0x276>
    12c2:	230c      	movs	r3, #12
    12c4:	e004      	b.n	12d0 <config_init+0x230>
    12c6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    12ca:	e7ef      	b.n	12ac <config_init+0x20c>
    12cc:	f06f 031b 	mvn.w	r3, #27
    12d0:	b13a      	cbz	r2, 12e2 <config_init+0x242>
    12d2:	2003      	movs	r0, #3
    12d4:	7138      	strb	r0, [r7, #4]
    12d6:	2000      	movs	r0, #0
    12d8:	7178      	strb	r0, [r7, #5]
    12da:	71b8      	strb	r0, [r7, #6]
    12dc:	71f8      	strb	r0, [r7, #7]
    12de:	6878      	ldr	r0, [r7, #4]
    12e0:	6108      	str	r0, [r1, #16]
    12e2:	2100      	movs	r1, #0
    12e4:	f36f 0100 	bfc	r1, #0, #1
    12e8:	f36f 0141 	bfc	r1, #1, #1
    12ec:	f36f 0182 	bfc	r1, #2, #1
    12f0:	f36f 01c5 	bfc	r1, #3, #3
    12f4:	2001      	movs	r0, #1
    12f6:	f360 1188 	bfi	r1, r0, #6, #3
    12fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
    12fe:	f363 2153 	bfi	r1, r3, #9, #11
    1302:	f36f 511f 	bfc	r1, #20, #12
    1306:	2300      	movs	r3, #0
    1308:	4806      	ldr	r0, [pc, #24]	; (1324 <config_init+0x284>)
    130a:	f003 fb07 	bl	491c <z_impl_z_log_msg_static_create>
    130e:	46ad      	mov	sp, r5
            return -3;
    1310:	f06f 0402 	mvn.w	r4, #2
    1314:	e6e2      	b.n	10dc <config_init+0x3c>
            LOG_ERR("Failed to write default config to flash: %d", ret);
    1316:	f06f 031b 	mvn.w	r3, #27
    131a:	e7d9      	b.n	12d0 <config_init+0x230>
    131c:	20000e14 	.word	0x20000e14
    1320:	20000e1e 	.word	0x20000e1e
    1324:	200002cc 	.word	0x200002cc
    1328:	00015794 	.word	0x00015794
    132c:	000157b4 	.word	0x000157b4
    1330:	000157d4 	.word	0x000157d4
    1334:	00015820 	.word	0x00015820
    1338:	000157f4 	.word	0x000157f4

0000133c <config_clear>:
{
    133c:	b508      	push	{r3, lr}
    if (nvs_delete(&fs, CONFIG_NVS_ID) != 0)
    133e:	2100      	movs	r1, #0
    1340:	4803      	ldr	r0, [pc, #12]	; (1350 <config_clear+0x14>)
    1342:	f00f f927 	bl	10594 <nvs_delete>
    1346:	b900      	cbnz	r0, 134a <config_clear+0xe>
}
    1348:	bd08      	pop	{r3, pc}
        return -1;
    134a:	f04f 30ff 	mov.w	r0, #4294967295
    134e:	e7fb      	b.n	1348 <config_clear+0xc>
    1350:	20000de4 	.word	0x20000de4

00001354 <config_buffer>:
{
    1354:	b508      	push	{r3, lr}
    memcpy(buffer, &_buffer, read_size);
    1356:	460a      	mov	r2, r1
    1358:	2980      	cmp	r1, #128	; 0x80
    135a:	bf28      	it	cs
    135c:	2280      	movcs	r2, #128	; 0x80
    135e:	4902      	ldr	r1, [pc, #8]	; (1368 <config_buffer+0x14>)
    1360:	f011 fd13 	bl	12d8a <memcpy>
}
    1364:	bd08      	pop	{r3, pc}
    1366:	bf00      	nop
    1368:	20000e18 	.word	0x20000e18

0000136c <config_refresh>:
{
    136c:	b500      	push	{lr}
    136e:	b089      	sub	sp, #36	; 0x24
    k_msleep(CONFIG_READ_DELAY);
    1370:	20c8      	movs	r0, #200	; 0xc8
    1372:	f00d fa91 	bl	e898 <k_msleep>
    if (read_buffer() != 0)
    1376:	f7ff fb01 	bl	97c <read_buffer>
    137a:	b910      	cbnz	r0, 1382 <config_refresh+0x16>
}
    137c:	b009      	add	sp, #36	; 0x24
    137e:	f85d fb04 	ldr.w	pc, [sp], #4
        LOG_ERR("Failed to refresh config");
    1382:	4b16      	ldr	r3, [pc, #88]	; (13dc <config_refresh+0x70>)
    1384:	681b      	ldr	r3, [r3, #0]
    1386:	f013 0f07 	tst.w	r3, #7
    138a:	d102      	bne.n	1392 <config_refresh+0x26>
        return -1;
    138c:	f04f 30ff 	mov.w	r0, #4294967295
    1390:	e7f4      	b.n	137c <config_refresh+0x10>
        LOG_ERR("Failed to refresh config");
    1392:	4b13      	ldr	r3, [pc, #76]	; (13e0 <config_refresh+0x74>)
    1394:	9307      	str	r3, [sp, #28]
    1396:	2302      	movs	r3, #2
    1398:	f88d 3004 	strb.w	r3, [sp, #4]
    139c:	2300      	movs	r3, #0
    139e:	f88d 3005 	strb.w	r3, [sp, #5]
    13a2:	f88d 3006 	strb.w	r3, [sp, #6]
    13a6:	f88d 3007 	strb.w	r3, [sp, #7]
    13aa:	9a01      	ldr	r2, [sp, #4]
    13ac:	9206      	str	r2, [sp, #24]
    13ae:	4619      	mov	r1, r3
    13b0:	f363 0100 	bfi	r1, r3, #0, #1
    13b4:	f363 0141 	bfi	r1, r3, #1, #1
    13b8:	f363 0182 	bfi	r1, r3, #2, #1
    13bc:	f363 01c5 	bfi	r1, r3, #3, #3
    13c0:	2201      	movs	r2, #1
    13c2:	f362 1188 	bfi	r1, r2, #6, #3
    13c6:	2208      	movs	r2, #8
    13c8:	f362 2153 	bfi	r1, r2, #9, #11
    13cc:	f363 511f 	bfi	r1, r3, #20, #12
    13d0:	aa06      	add	r2, sp, #24
    13d2:	4802      	ldr	r0, [pc, #8]	; (13dc <config_refresh+0x70>)
    13d4:	f003 faa2 	bl	491c <z_impl_z_log_msg_static_create>
    13d8:	e7d8      	b.n	138c <config_refresh+0x20>
    13da:	bf00      	nop
    13dc:	200002cc 	.word	0x200002cc
    13e0:	00015840 	.word	0x00015840

000013e4 <handle_config>:

static int handle_config(const struct shell *sh,
                         size_t argc,
                         char **argv,
                         void *data)
{
    13e4:	b590      	push	{r4, r7, lr}
    13e6:	b0a3      	sub	sp, #140	; 0x8c
    13e8:	af00      	add	r7, sp, #0
    cli_command_t cmd = (cli_command_t)data;

    switch (cmd)
    13ea:	b2db      	uxtb	r3, r3
    13ec:	2b01      	cmp	r3, #1
    13ee:	d068      	beq.n	14c2 <handle_config+0xde>
    13f0:	2b02      	cmp	r3, #2
    13f2:	d069      	beq.n	14c8 <handle_config+0xe4>
    13f4:	b11b      	cbz	r3, 13fe <handle_config+0x1a>
    case CLI_CONFIG_REFRESH:
        config_refresh();
        break;
    }
    return 0;
    13f6:	2000      	movs	r0, #0
    13f8:	378c      	adds	r7, #140	; 0x8c
    13fa:	46bd      	mov	sp, r7
    13fc:	bd90      	pop	{r4, r7, pc}
        config_buffer(buffer, CONFIG_SIZE_BUFFER);
    13fe:	2180      	movs	r1, #128	; 0x80
    1400:	f107 0008 	add.w	r0, r7, #8
    1404:	f7ff ffa6 	bl	1354 <config_buffer>
        LOG_HEXDUMP_INF(buffer, CONFIG_SIZE_BUFFER, "");
    1408:	4b31      	ldr	r3, [pc, #196]	; (14d0 <handle_config+0xec>)
    140a:	681b      	ldr	r3, [r3, #0]
    140c:	f003 0307 	and.w	r3, r3, #7
    1410:	2b02      	cmp	r3, #2
    1412:	d9f0      	bls.n	13f6 <handle_config+0x12>
    1414:	466c      	mov	r4, sp
    1416:	2300      	movs	r3, #0
    1418:	713b      	strb	r3, [r7, #4]
    141a:	2302      	movs	r3, #2
    141c:	717b      	strb	r3, [r7, #5]
    141e:	b088      	sub	sp, #32
    1420:	46ec      	mov	ip, sp
    1422:	f11c 0210 	adds.w	r2, ip, #16
    1426:	d014      	beq.n	1452 <handle_config+0x6e>
    1428:	200e      	movs	r0, #14
    142a:	b122      	cbz	r2, 1436 <handle_config+0x52>
    142c:	2804      	cmp	r0, #4
    142e:	dd02      	ble.n	1436 <handle_config+0x52>
    1430:	4b28      	ldr	r3, [pc, #160]	; (14d4 <handle_config+0xf0>)
    1432:	f8cc 3014 	str.w	r3, [ip, #20]
    1436:	2300      	movs	r3, #0
    1438:	703b      	strb	r3, [r7, #0]
    143a:	2302      	movs	r3, #2
    143c:	707b      	strb	r3, [r7, #1]
    143e:	b1aa      	cbz	r2, 146c <handle_config+0x88>
    1440:	2808      	cmp	r0, #8
    1442:	dd02      	ble.n	144a <handle_config+0x66>
    1444:	4b24      	ldr	r3, [pc, #144]	; (14d8 <handle_config+0xf4>)
    1446:	f8cc 3018 	str.w	r3, [ip, #24]
    144a:	f10c 031c 	add.w	r3, ip, #28
    144e:	2100      	movs	r1, #0
    1450:	e00a      	b.n	1468 <handle_config+0x84>
    1452:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    1456:	e7e8      	b.n	142a <handle_config+0x46>
    1458:	f101 0e88 	add.w	lr, r1, #136	; 0x88
    145c:	44be      	add	lr, r7
    145e:	f81e ec88 	ldrb.w	lr, [lr, #-136]
    1462:	f803 eb01 	strb.w	lr, [r3], #1
    1466:	3101      	adds	r1, #1
    1468:	2901      	cmp	r1, #1
    146a:	d9f5      	bls.n	1458 <handle_config+0x74>
    146c:	280d      	cmp	r0, #13
    146e:	dd25      	ble.n	14bc <handle_config+0xd8>
    1470:	230e      	movs	r3, #14
    1472:	b14a      	cbz	r2, 1488 <handle_config+0xa4>
    1474:	2103      	movs	r1, #3
    1476:	7139      	strb	r1, [r7, #4]
    1478:	2100      	movs	r1, #0
    147a:	7179      	strb	r1, [r7, #5]
    147c:	71b9      	strb	r1, [r7, #6]
    147e:	2101      	movs	r1, #1
    1480:	71f9      	strb	r1, [r7, #7]
    1482:	6878      	ldr	r0, [r7, #4]
    1484:	f8cc 0010 	str.w	r0, [ip, #16]
    1488:	2100      	movs	r1, #0
    148a:	f36f 0100 	bfc	r1, #0, #1
    148e:	f36f 0141 	bfc	r1, #1, #1
    1492:	f36f 0182 	bfc	r1, #2, #1
    1496:	f36f 01c5 	bfc	r1, #3, #3
    149a:	2003      	movs	r0, #3
    149c:	f360 1188 	bfi	r1, r0, #6, #3
    14a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
    14a4:	f363 2153 	bfi	r1, r3, #9, #11
    14a8:	2380      	movs	r3, #128	; 0x80
    14aa:	f363 511f 	bfi	r1, r3, #20, #12
    14ae:	f107 0308 	add.w	r3, r7, #8
    14b2:	4807      	ldr	r0, [pc, #28]	; (14d0 <handle_config+0xec>)
    14b4:	f003 fa32 	bl	491c <z_impl_z_log_msg_static_create>
    14b8:	46a5      	mov	sp, r4
    14ba:	e79c      	b.n	13f6 <handle_config+0x12>
    14bc:	f06f 031b 	mvn.w	r3, #27
    14c0:	e7d7      	b.n	1472 <handle_config+0x8e>
        config_clear();
    14c2:	f7ff ff3b 	bl	133c <config_clear>
        break;
    14c6:	e796      	b.n	13f6 <handle_config+0x12>
        config_refresh();
    14c8:	f7ff ff50 	bl	136c <config_refresh>
        break;
    14cc:	e793      	b.n	13f6 <handle_config+0x12>
    14ce:	bf00      	nop
    14d0:	200002c4 	.word	0x200002c4
    14d4:	00015864 	.word	0x00015864
    14d8:	000165a8 	.word	0x000165a8

000014dc <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
    14dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    14e0:	4604      	mov	r4, r0
    uint8 nsSfd_result  = 0;
    uint8 useDWnsSFD = 0;
    uint8 chan = config->chan ;
    14e2:	7805      	ldrb	r5, [r0, #0]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
    14e4:	7942      	ldrb	r2, [r0, #5]
    14e6:	4b79      	ldr	r3, [pc, #484]	; (16cc <dwt_configure+0x1f0>)
    14e8:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
    14ec:	7846      	ldrb	r6, [r0, #1]
    14ee:	3e01      	subs	r6, #1
    14f0:	b2f6      	uxtb	r6, r6
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
    14f2:	2d04      	cmp	r5, #4
    14f4:	f000 80c6 	beq.w	1684 <dwt_configure+0x1a8>
    14f8:	2d07      	cmp	r5, #7
    14fa:	f000 80c1 	beq.w	1680 <dwt_configure+0x1a4>
    14fe:	2700      	movs	r7, #0
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
    1500:	79e3      	ldrb	r3, [r4, #7]
    1502:	2b00      	cmp	r3, #0
    1504:	f040 80c0 	bne.w	1688 <dwt_configure+0x1ac>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
    1508:	4b71      	ldr	r3, [pc, #452]	; (16d0 <dwt_configure+0x1f4>)
    150a:	681a      	ldr	r2, [r3, #0]
    150c:	6913      	ldr	r3, [r2, #16]
    150e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    1512:	6113      	str	r3, [r2, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
    1514:	ea4f 08d8 	mov.w	r8, r8, lsr #3
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
    }

    pdw1000local->longFrames = config->phrMode ;
    1518:	4b6d      	ldr	r3, [pc, #436]	; (16d0 <dwt_configure+0x1f4>)
    151a:	6819      	ldr	r1, [r3, #0]
    151c:	7a23      	ldrb	r3, [r4, #8]
    151e:	728b      	strb	r3, [r1, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
    1520:	690a      	ldr	r2, [r1, #16]
    1522:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    1526:	610a      	str	r2, [r1, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
    1528:	7a23      	ldrb	r3, [r4, #8]
    152a:	041b      	lsls	r3, r3, #16
    152c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    1530:	431a      	orrs	r2, r3
    1532:	610a      	str	r2, [r1, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
    1534:	2100      	movs	r1, #0
    1536:	2004      	movs	r0, #4
    1538:	f00d fa8e 	bl	ea58 <dwt_write32bitoffsetreg>

    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
    153c:	4642      	mov	r2, r8
    153e:	f642 0104 	movw	r1, #10244	; 0x2804
    1542:	202e      	movs	r0, #46	; 0x2e
    1544:	f00d fa69 	bl	ea1a <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
    1548:	4630      	mov	r0, r6
    154a:	f00d fabc 	bl	eac6 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
    154e:	4b61      	ldr	r3, [pc, #388]	; (16d4 <dwt_configure+0x1f8>)
    1550:	f813 8005 	ldrb.w	r8, [r3, r5]
    1554:	4b60      	ldr	r3, [pc, #384]	; (16d8 <dwt_configure+0x1fc>)
    1556:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    155a:	2107      	movs	r1, #7
    155c:	202b      	movs	r0, #43	; 0x2b
    155e:	f00d fa7b 	bl	ea58 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
    1562:	4b5e      	ldr	r3, [pc, #376]	; (16dc <dwt_configure+0x200>)
    1564:	f813 2008 	ldrb.w	r2, [r3, r8]
    1568:	210b      	movs	r1, #11
    156a:	202b      	movs	r0, #43	; 0x2b
    156c:	f00d fa47 	bl	e9fe <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
    1570:	b2ff      	uxtb	r7, r7
    1572:	4b5b      	ldr	r3, [pc, #364]	; (16e0 <dwt_configure+0x204>)
    1574:	5dda      	ldrb	r2, [r3, r7]
    1576:	210b      	movs	r1, #11
    1578:	2028      	movs	r0, #40	; 0x28
    157a:	f00d fa40 	bl	e9fe <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
    157e:	4b59      	ldr	r3, [pc, #356]	; (16e4 <dwt_configure+0x208>)
    1580:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    1584:	210c      	movs	r1, #12
    1586:	2028      	movs	r0, #40	; 0x28
    1588:	f00d fa66 	bl	ea58 <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
    158c:	79e2      	ldrb	r2, [r4, #7]
    158e:	79a3      	ldrb	r3, [r4, #6]
    1590:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    1594:	4a54      	ldr	r2, [pc, #336]	; (16e8 <dwt_configure+0x20c>)
    1596:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    159a:	2102      	movs	r1, #2
    159c:	2027      	movs	r0, #39	; 0x27
    159e:	f00d fa3c 	bl	ea1a <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
    15a2:	4b52      	ldr	r3, [pc, #328]	; (16ec <dwt_configure+0x210>)
    15a4:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    15a8:	2104      	movs	r1, #4
    15aa:	2027      	movs	r0, #39	; 0x27
    15ac:	f00d fa35 	bl	ea1a <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
    15b0:	79e3      	ldrb	r3, [r4, #7]
    15b2:	2b00      	cmp	r3, #0
    15b4:	d06f      	beq.n	1696 <dwt_configure+0x1ba>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
    15b6:	78a3      	ldrb	r3, [r4, #2]
    15b8:	2b04      	cmp	r3, #4
    15ba:	d072      	beq.n	16a2 <dwt_configure+0x1c6>
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
    15bc:	2220      	movs	r2, #32
    15be:	2106      	movs	r1, #6
    15c0:	2027      	movs	r0, #39	; 0x27
    15c2:	f00d fa2a 	bl	ea1a <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
    15c6:	2228      	movs	r2, #40	; 0x28
    15c8:	2126      	movs	r1, #38	; 0x26
    15ca:	2027      	movs	r0, #39	; 0x27
    15cc:	f00d fa17 	bl	e9fe <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
    15d0:	78e3      	ldrb	r3, [r4, #3]
    15d2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    15d6:	4a46      	ldr	r2, [pc, #280]	; (16f0 <dwt_configure+0x214>)
    15d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    15dc:	2108      	movs	r1, #8
    15de:	2027      	movs	r0, #39	; 0x27
    15e0:	f00d fa3a 	bl	ea58 <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
    15e4:	8963      	ldrh	r3, [r4, #10]
    15e6:	b913      	cbnz	r3, 15ee <dwt_configure+0x112>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
    15e8:	f241 0341 	movw	r3, #4161	; 0x1041
    15ec:	8163      	strh	r3, [r4, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
    15ee:	8962      	ldrh	r2, [r4, #10]
    15f0:	2120      	movs	r1, #32
    15f2:	2027      	movs	r0, #39	; 0x27
    15f4:	f00d fa11 	bl	ea1a <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
    15f8:	4f3e      	ldr	r7, [pc, #248]	; (16f4 <dwt_configure+0x218>)
    15fa:	683a      	ldr	r2, [r7, #0]
    15fc:	210c      	movs	r1, #12
    15fe:	2023      	movs	r0, #35	; 0x23
    1600:	f00d fa2a 	bl	ea58 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
    1604:	eb07 0746 	add.w	r7, r7, r6, lsl #1
    1608:	88ba      	ldrh	r2, [r7, #4]
    160a:	2104      	movs	r1, #4
    160c:	2023      	movs	r0, #35	; 0x23
    160e:	f00d fa04 	bl	ea1a <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
    1612:	79a2      	ldrb	r2, [r4, #6]
    1614:	2a00      	cmp	r2, #0
    1616:	d14f      	bne.n	16b8 <dwt_configure+0x1dc>
    uint8 useDWnsSFD = 0;
    1618:	4611      	mov	r1, r2
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
        nsSfd_result = 3 ;
        useDWnsSFD = 1 ;
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
    161a:	f005 030f 	and.w	r3, r5, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
    161e:	012d      	lsls	r5, r5, #4
    1620:	b2ed      	uxtb	r5, r5
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
    1622:	432b      	orrs	r3, r5
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
    1624:	7860      	ldrb	r0, [r4, #1]
    1626:	0480      	lsls	r0, r0, #18
    1628:	f400 2040 	and.w	r0, r0, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
    162c:	4303      	orrs	r3, r0
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
    162e:	0512      	lsls	r2, r2, #20
    1630:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
    1634:	4313      	orrs	r3, r2
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
    1636:	044a      	lsls	r2, r1, #17
    1638:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
    163c:	4313      	orrs	r3, r2
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
    163e:	7922      	ldrb	r2, [r4, #4]
    1640:	0592      	lsls	r2, r2, #22
    1642:	f002 62f8 	and.w	r2, r2, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
    1646:	4313      	orrs	r3, r2
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
    1648:	7962      	ldrb	r2, [r4, #5]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
    164a:	ea43 62c2 	orr.w	r2, r3, r2, lsl #27
    164e:	2100      	movs	r1, #0
    1650:	201f      	movs	r0, #31
    1652:	f00d fa01 	bl	ea58 <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
    1656:	78a3      	ldrb	r3, [r4, #2]
    1658:	7862      	ldrb	r2, [r4, #1]
    165a:	4313      	orrs	r3, r2
    165c:	79e2      	ldrb	r2, [r4, #7]
    165e:	0352      	lsls	r2, r2, #13
    1660:	491b      	ldr	r1, [pc, #108]	; (16d0 <dwt_configure+0x1f4>)
    1662:	6809      	ldr	r1, [r1, #0]
    1664:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    1668:	60ca      	str	r2, [r1, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
    166a:	2100      	movs	r1, #0
    166c:	2008      	movs	r0, #8
    166e:	f00d f9f3 	bl	ea58 <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
    1672:	2242      	movs	r2, #66	; 0x42
    1674:	2100      	movs	r1, #0
    1676:	200d      	movs	r0, #13
    1678:	f00d f9c1 	bl	e9fe <dwt_write8bitoffsetreg>
} // end dwt_configure()
    167c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
    1680:	2701      	movs	r7, #1
    1682:	e73d      	b.n	1500 <dwt_configure+0x24>
    1684:	2701      	movs	r7, #1
    1686:	e73b      	b.n	1500 <dwt_configure+0x24>
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
    1688:	4b11      	ldr	r3, [pc, #68]	; (16d0 <dwt_configure+0x1f4>)
    168a:	681a      	ldr	r2, [r3, #0]
    168c:	6913      	ldr	r3, [r2, #16]
    168e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    1692:	6113      	str	r3, [r2, #16]
    1694:	e740      	b.n	1518 <dwt_configure+0x3c>
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
    1696:	2264      	movs	r2, #100	; 0x64
    1698:	2106      	movs	r1, #6
    169a:	2027      	movs	r0, #39	; 0x27
    169c:	f00d f9bd 	bl	ea1a <dwt_write16bitoffsetreg>
    16a0:	e796      	b.n	15d0 <dwt_configure+0xf4>
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
    16a2:	2210      	movs	r2, #16
    16a4:	2106      	movs	r1, #6
    16a6:	2027      	movs	r0, #39	; 0x27
    16a8:	f00d f9b7 	bl	ea1a <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
    16ac:	2210      	movs	r2, #16
    16ae:	2126      	movs	r1, #38	; 0x26
    16b0:	2027      	movs	r0, #39	; 0x27
    16b2:	f00d f9a4 	bl	e9fe <dwt_write8bitoffsetreg>
    16b6:	e78b      	b.n	15d0 <dwt_configure+0xf4>
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
    16b8:	79e3      	ldrb	r3, [r4, #7]
    16ba:	4a0f      	ldr	r2, [pc, #60]	; (16f8 <dwt_configure+0x21c>)
    16bc:	5cd2      	ldrb	r2, [r2, r3]
    16be:	2100      	movs	r1, #0
    16c0:	2021      	movs	r0, #33	; 0x21
    16c2:	f00d f99c 	bl	e9fe <dwt_write8bitoffsetreg>
        useDWnsSFD = 1 ;
    16c6:	2101      	movs	r1, #1
        nsSfd_result = 3 ;
    16c8:	2203      	movs	r2, #3
    16ca:	e7a6      	b.n	161a <dwt_configure+0x13e>
    16cc:	0001596c 	.word	0x0001596c
    16d0:	20000018 	.word	0x20000018
    16d4:	00015a18 	.word	0x00015a18
    16d8:	000159e8 	.word	0x000159e8
    16dc:	000159e0 	.word	0x000159e0
    16e0:	000159dc 	.word	0x000159dc
    16e4:	00015a00 	.word	0x00015a00
    16e8:	000159c4 	.word	0x000159c4
    16ec:	000159c0 	.word	0x000159c0
    16f0:	000159a0 	.word	0x000159a0
    16f4:	000159d4 	.word	0x000159d4
    16f8:	000159d0 	.word	0x000159d0

000016fc <dwt_setcallbacks>:
 * output parameters
 *
 * no return value
 */
void dwt_setcallbacks(dwt_cb_t cbTxDone, dwt_cb_t cbRxOk, dwt_cb_t cbRxTo, dwt_cb_t cbRxErr)
{
    16fc:	b410      	push	{r4}
    pdw1000local->cbTxDone = cbTxDone;
    16fe:	4c04      	ldr	r4, [pc, #16]	; (1710 <dwt_setcallbacks+0x14>)
    1700:	6824      	ldr	r4, [r4, #0]
    1702:	62a0      	str	r0, [r4, #40]	; 0x28
    pdw1000local->cbRxOk = cbRxOk;
    1704:	62e1      	str	r1, [r4, #44]	; 0x2c
    pdw1000local->cbRxTo = cbRxTo;
    1706:	6322      	str	r2, [r4, #48]	; 0x30
    pdw1000local->cbRxErr = cbRxErr;
    1708:	6363      	str	r3, [r4, #52]	; 0x34
}
    170a:	bc10      	pop	{r4}
    170c:	4770      	bx	lr
    170e:	bf00      	nop
    1710:	20000018 	.word	0x20000018

00001714 <dwt_setleds>:
 * output parameters none
 *
 * no return value
 */
void dwt_setleds(uint8 mode)
{
    1714:	b538      	push	{r3, r4, r5, lr}
    uint32 reg;

    if (mode & DWT_LEDS_ENABLE)
    1716:	f010 0f01 	tst.w	r0, #1
    171a:	d02a      	beq.n	1772 <dwt_setleds+0x5e>
    171c:	4604      	mov	r4, r0
    {
        // Set up MFIO for LED output.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
    171e:	2100      	movs	r1, #0
    1720:	2026      	movs	r0, #38	; 0x26
    1722:	f00d f92e 	bl	e982 <dwt_read32bitoffsetreg>
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
    1726:	f420 5270 	bic.w	r2, r0, #15360	; 0x3c00
        reg |= (GPIO_PIN2_RXLED | GPIO_PIN3_TXLED);
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
    172a:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
    172e:	2100      	movs	r1, #0
    1730:	2026      	movs	r0, #38	; 0x26
    1732:	f00d f991 	bl	ea58 <dwt_write32bitoffsetreg>

        // Enable LP Oscillator to run from counter and turn on de-bounce clock.
        reg = dwt_read32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET);
    1736:	2100      	movs	r1, #0
    1738:	2036      	movs	r0, #54	; 0x36
    173a:	f00d f922 	bl	e982 <dwt_read32bitoffsetreg>
        reg |= (PMSC_CTRL0_GPDCE | PMSC_CTRL0_KHZCLEN);
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET, reg);
    173e:	f440 0204 	orr.w	r2, r0, #8650752	; 0x840000
    1742:	2100      	movs	r1, #0
    1744:	2036      	movs	r0, #54	; 0x36
    1746:	f00d f987 	bl	ea58 <dwt_write32bitoffsetreg>

        // Enable LEDs to blink and set default blink time.
        reg = PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF;
        // Make LEDs blink once if requested.
        if (mode & DWT_LEDS_INIT_BLINK)
    174a:	f014 0402 	ands.w	r4, r4, #2
    174e:	d10e      	bne.n	176e <dwt_setleds+0x5a>
        reg = PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF;
    1750:	f44f 7588 	mov.w	r5, #272	; 0x110
        {
            reg |= PMSC_LEDC_BLINK_NOW_ALL;
        }
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg);
    1754:	462a      	mov	r2, r5
    1756:	2128      	movs	r1, #40	; 0x28
    1758:	2036      	movs	r0, #54	; 0x36
    175a:	f00d f97d 	bl	ea58 <dwt_write32bitoffsetreg>
        // Clear force blink bits if needed.
        if(mode & DWT_LEDS_INIT_BLINK)
    175e:	b194      	cbz	r4, 1786 <dwt_setleds+0x72>
        {
            reg &= ~PMSC_LEDC_BLINK_NOW_ALL;
            dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg);
    1760:	f405 7288 	and.w	r2, r5, #272	; 0x110
    1764:	2128      	movs	r1, #40	; 0x28
    1766:	2036      	movs	r0, #54	; 0x36
    1768:	f00d f976 	bl	ea58 <dwt_write32bitoffsetreg>
    176c:	e00b      	b.n	1786 <dwt_setleds+0x72>
            reg |= PMSC_LEDC_BLINK_NOW_ALL;
    176e:	4d06      	ldr	r5, [pc, #24]	; (1788 <dwt_setleds+0x74>)
    1770:	e7f0      	b.n	1754 <dwt_setleds+0x40>
        }
    }
    else
    {
        // Clear the GPIO bits that are used for LED control.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
    1772:	2100      	movs	r1, #0
    1774:	2026      	movs	r0, #38	; 0x26
    1776:	f00d f904 	bl	e982 <dwt_read32bitoffsetreg>
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
    177a:	f420 5270 	bic.w	r2, r0, #15360	; 0x3c00
    177e:	2100      	movs	r1, #0
    1780:	2026      	movs	r0, #38	; 0x26
    1782:	f00d f969 	bl	ea58 <dwt_write32bitoffsetreg>
    }
}
    1786:	bd38      	pop	{r3, r4, r5, pc}
    1788:	000f0110 	.word	0x000f0110

0000178c <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
    178c:	b538      	push	{r3, r4, r5, lr}
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
    178e:	2100      	movs	r1, #0
    1790:	200e      	movs	r0, #14
    1792:	f00d f8f6 	bl	e982 <dwt_read32bitoffsetreg>
    1796:	4605      	mov	r5, r0

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
    1798:	f00d fa8a 	bl	ecb0 <decamutexon>
    179c:	4604      	mov	r4, r0

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
    179e:	2200      	movs	r2, #0
    17a0:	4611      	mov	r1, r2
    17a2:	200e      	movs	r0, #14
    17a4:	f00d f958 	bl	ea58 <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
    17a8:	2240      	movs	r2, #64	; 0x40
    17aa:	2100      	movs	r1, #0
    17ac:	200d      	movs	r0, #13
    17ae:	f00d f926 	bl	e9fe <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
    17b2:	4a0a      	ldr	r2, [pc, #40]	; (17dc <dwt_forcetrxoff+0x50>)
    17b4:	2100      	movs	r1, #0
    17b6:	200f      	movs	r0, #15
    17b8:	f00d f94e 	bl	ea58 <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
    17bc:	f00d fa30 	bl	ec20 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
    17c0:	462a      	mov	r2, r5
    17c2:	2100      	movs	r1, #0
    17c4:	200e      	movs	r0, #14
    17c6:	f00d f947 	bl	ea58 <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
    17ca:	4620      	mov	r0, r4
    17cc:	f00d fa72 	bl	ecb4 <decamutexoff>
    pdw1000local->wait4resp = 0;
    17d0:	4b03      	ldr	r3, [pc, #12]	; (17e0 <dwt_forcetrxoff+0x54>)
    17d2:	681b      	ldr	r3, [r3, #0]
    17d4:	2200      	movs	r2, #0
    17d6:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
    17d8:	bd38      	pop	{r3, r4, r5, pc}
    17da:	bf00      	nop
    17dc:	2427fff8 	.word	0x2427fff8
    17e0:	20000018 	.word	0x20000018

000017e4 <dwt_isr>:
{
    17e4:	b538      	push	{r3, r4, r5, lr}
    uint32 status = pdw1000local->cbData.status = dwt_read32bitreg(SYS_STATUS_ID); // Read status register low 32bits
    17e6:	4b53      	ldr	r3, [pc, #332]	; (1934 <dwt_isr+0x150>)
    17e8:	681d      	ldr	r5, [r3, #0]
    17ea:	2100      	movs	r1, #0
    17ec:	200f      	movs	r0, #15
    17ee:	f00d f8c8 	bl	e982 <dwt_read32bitoffsetreg>
    17f2:	4604      	mov	r4, r0
    17f4:	61e8      	str	r0, [r5, #28]
    if(status & SYS_STATUS_RXFCG)
    17f6:	f410 4f80 	tst.w	r0, #16384	; 0x4000
    17fa:	d109      	bne.n	1810 <dwt_isr+0x2c>
    if(status & SYS_STATUS_TXFRS)
    17fc:	f014 0f80 	tst.w	r4, #128	; 0x80
    1800:	d155      	bne.n	18ae <dwt_isr+0xca>
    if(status & SYS_STATUS_ALL_RX_TO)
    1802:	f414 1f08 	tst.w	r4, #2228224	; 0x220000
    1806:	d16b      	bne.n	18e0 <dwt_isr+0xfc>
    if(status & SYS_STATUS_ALL_RX_ERR)
    1808:	4b4b      	ldr	r3, [pc, #300]	; (1938 <dwt_isr+0x154>)
    180a:	421c      	tst	r4, r3
    180c:	d17d      	bne.n	190a <dwt_isr+0x126>
}
    180e:	bd38      	pop	{r3, r4, r5, pc}
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_GOOD); // Clear all receive status bits
    1810:	f44f 42de 	mov.w	r2, #28416	; 0x6f00
    1814:	2100      	movs	r1, #0
    1816:	200f      	movs	r0, #15
    1818:	f00d f91e 	bl	ea58 <dwt_write32bitoffsetreg>
        pdw1000local->cbData.rx_flags = 0;
    181c:	4d45      	ldr	r5, [pc, #276]	; (1934 <dwt_isr+0x150>)
    181e:	682b      	ldr	r3, [r5, #0]
    1820:	2100      	movs	r1, #0
    1822:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
        finfo16 = dwt_read16bitoffsetreg(RX_FINFO_ID, RX_FINFO_OFFSET);
    1826:	2010      	movs	r0, #16
    1828:	f00d f8c9 	bl	e9be <dwt_read16bitoffsetreg>
        len = finfo16 & RX_FINFO_RXFL_MASK_1023;
    182c:	f3c0 0209 	ubfx	r2, r0, #0, #10
        if(pdw1000local->longFrames == 0)
    1830:	682b      	ldr	r3, [r5, #0]
    1832:	7a99      	ldrb	r1, [r3, #10]
    1834:	b909      	cbnz	r1, 183a <dwt_isr+0x56>
            len &= RX_FINFO_RXFLEN_MASK;
    1836:	f000 027f 	and.w	r2, r0, #127	; 0x7f
        pdw1000local->cbData.datalength = len;
    183a:	841a      	strh	r2, [r3, #32]
        if(finfo16 & RX_FINFO_RNG)
    183c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
    1840:	d120      	bne.n	1884 <dwt_isr+0xa0>
        dwt_readfromdevice(RX_BUFFER_ID, 0, FCTRL_LEN_MAX, pdw1000local->cbData.fctrl);
    1842:	3322      	adds	r3, #34	; 0x22
    1844:	2202      	movs	r2, #2
    1846:	2100      	movs	r1, #0
    1848:	2011      	movs	r0, #17
    184a:	f00d f879 	bl	e940 <dwt_readfromdevice>
        if((status & SYS_STATUS_AAT) && ((pdw1000local->cbData.fctrl[0] & FCTRL_ACK_REQ_MASK) == 0))
    184e:	f014 0f08 	tst.w	r4, #8
    1852:	d006      	beq.n	1862 <dwt_isr+0x7e>
    1854:	4b37      	ldr	r3, [pc, #220]	; (1934 <dwt_isr+0x150>)
    1856:	681b      	ldr	r3, [r3, #0]
    1858:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    185c:	f013 0f20 	tst.w	r3, #32
    1860:	d017      	beq.n	1892 <dwt_isr+0xae>
        if(pdw1000local->cbRxOk != NULL)
    1862:	4b34      	ldr	r3, [pc, #208]	; (1934 <dwt_isr+0x150>)
    1864:	6818      	ldr	r0, [r3, #0]
    1866:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    1868:	b10b      	cbz	r3, 186e <dwt_isr+0x8a>
            pdw1000local->cbRxOk(&pdw1000local->cbData);
    186a:	301c      	adds	r0, #28
    186c:	4798      	blx	r3
        if (pdw1000local->dblbuffon)
    186e:	4b31      	ldr	r3, [pc, #196]	; (1934 <dwt_isr+0x150>)
    1870:	681b      	ldr	r3, [r3, #0]
    1872:	7d1b      	ldrb	r3, [r3, #20]
    1874:	2b00      	cmp	r3, #0
    1876:	d0c1      	beq.n	17fc <dwt_isr+0x18>
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 1);
    1878:	2201      	movs	r2, #1
    187a:	2103      	movs	r1, #3
    187c:	200d      	movs	r0, #13
    187e:	f00d f8be 	bl	e9fe <dwt_write8bitoffsetreg>
    1882:	e7bb      	b.n	17fc <dwt_isr+0x18>
            pdw1000local->cbData.rx_flags |= DWT_CB_DATA_RX_FLAG_RNG;
    1884:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    1888:	f042 0201 	orr.w	r2, r2, #1
    188c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    1890:	e7d7      	b.n	1842 <dwt_isr+0x5e>
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_AAT); // Clear AAT status bit in register
    1892:	2208      	movs	r2, #8
    1894:	2100      	movs	r1, #0
    1896:	200f      	movs	r0, #15
    1898:	f00d f8de 	bl	ea58 <dwt_write32bitoffsetreg>
            pdw1000local->cbData.status &= ~SYS_STATUS_AAT; // Clear AAT status bit in callback data register copy
    189c:	4b25      	ldr	r3, [pc, #148]	; (1934 <dwt_isr+0x150>)
    189e:	681b      	ldr	r3, [r3, #0]
    18a0:	69da      	ldr	r2, [r3, #28]
    18a2:	f022 0208 	bic.w	r2, r2, #8
    18a6:	61da      	str	r2, [r3, #28]
            pdw1000local->wait4resp = 0;
    18a8:	2200      	movs	r2, #0
    18aa:	755a      	strb	r2, [r3, #21]
    18ac:	e7d9      	b.n	1862 <dwt_isr+0x7e>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_TX); // Clear TX event bits
    18ae:	22f8      	movs	r2, #248	; 0xf8
    18b0:	2100      	movs	r1, #0
    18b2:	200f      	movs	r0, #15
    18b4:	f00d f8d0 	bl	ea58 <dwt_write32bitoffsetreg>
        if((status & SYS_STATUS_AAT) && pdw1000local->wait4resp)
    18b8:	f014 0f08 	tst.w	r4, #8
    18bc:	d003      	beq.n	18c6 <dwt_isr+0xe2>
    18be:	4b1d      	ldr	r3, [pc, #116]	; (1934 <dwt_isr+0x150>)
    18c0:	681b      	ldr	r3, [r3, #0]
    18c2:	7d5b      	ldrb	r3, [r3, #21]
    18c4:	b93b      	cbnz	r3, 18d6 <dwt_isr+0xf2>
        if(pdw1000local->cbTxDone != NULL)
    18c6:	4b1b      	ldr	r3, [pc, #108]	; (1934 <dwt_isr+0x150>)
    18c8:	6818      	ldr	r0, [r3, #0]
    18ca:	6a83      	ldr	r3, [r0, #40]	; 0x28
    18cc:	2b00      	cmp	r3, #0
    18ce:	d098      	beq.n	1802 <dwt_isr+0x1e>
            pdw1000local->cbTxDone(&pdw1000local->cbData);
    18d0:	301c      	adds	r0, #28
    18d2:	4798      	blx	r3
    18d4:	e795      	b.n	1802 <dwt_isr+0x1e>
            dwt_forcetrxoff(); // Turn the RX off
    18d6:	f7ff ff59 	bl	178c <dwt_forcetrxoff>
            dwt_rxreset(); // Reset in case we were late and a frame was already being received
    18da:	f00d f9d3 	bl	ec84 <dwt_rxreset>
    18de:	e7f2      	b.n	18c6 <dwt_isr+0xe2>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXRFTO); // Clear RX timeout event bits
    18e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    18e4:	2100      	movs	r1, #0
    18e6:	200f      	movs	r0, #15
    18e8:	f00d f8b6 	bl	ea58 <dwt_write32bitoffsetreg>
        pdw1000local->wait4resp = 0;
    18ec:	4d11      	ldr	r5, [pc, #68]	; (1934 <dwt_isr+0x150>)
    18ee:	682b      	ldr	r3, [r5, #0]
    18f0:	2200      	movs	r2, #0
    18f2:	755a      	strb	r2, [r3, #21]
        dwt_forcetrxoff();
    18f4:	f7ff ff4a 	bl	178c <dwt_forcetrxoff>
        dwt_rxreset();
    18f8:	f00d f9c4 	bl	ec84 <dwt_rxreset>
        if(pdw1000local->cbRxTo != NULL)
    18fc:	6828      	ldr	r0, [r5, #0]
    18fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1900:	2b00      	cmp	r3, #0
    1902:	d081      	beq.n	1808 <dwt_isr+0x24>
            pdw1000local->cbRxTo(&pdw1000local->cbData);
    1904:	301c      	adds	r0, #28
    1906:	4798      	blx	r3
    1908:	e77e      	b.n	1808 <dwt_isr+0x24>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR); // Clear RX error event bits
    190a:	461a      	mov	r2, r3
    190c:	2100      	movs	r1, #0
    190e:	200f      	movs	r0, #15
    1910:	f00d f8a2 	bl	ea58 <dwt_write32bitoffsetreg>
        pdw1000local->wait4resp = 0;
    1914:	4c07      	ldr	r4, [pc, #28]	; (1934 <dwt_isr+0x150>)
    1916:	6823      	ldr	r3, [r4, #0]
    1918:	2200      	movs	r2, #0
    191a:	755a      	strb	r2, [r3, #21]
        dwt_forcetrxoff();
    191c:	f7ff ff36 	bl	178c <dwt_forcetrxoff>
        dwt_rxreset();
    1920:	f00d f9b0 	bl	ec84 <dwt_rxreset>
        if(pdw1000local->cbRxErr != NULL)
    1924:	6820      	ldr	r0, [r4, #0]
    1926:	6b43      	ldr	r3, [r0, #52]	; 0x34
    1928:	2b00      	cmp	r3, #0
    192a:	f43f af70 	beq.w	180e <dwt_isr+0x2a>
            pdw1000local->cbRxErr(&pdw1000local->cbData);
    192e:	301c      	adds	r0, #28
    1930:	4798      	blx	r3
}
    1932:	e76c      	b.n	180e <dwt_isr+0x2a>
    1934:	20000018 	.word	0x20000018
    1938:	24059000 	.word	0x24059000

0000193c <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
    193c:	b508      	push	{r3, lr}
    _dwt_disablesequencing();
    193e:	f00d f965 	bl	ec0c <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
    1942:	2200      	movs	r2, #0
    1944:	4611      	mov	r1, r2
    1946:	202c      	movs	r0, #44	; 0x2c
    1948:	f00d f867 	bl	ea1a <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
    194c:	2200      	movs	r2, #0
    194e:	2106      	movs	r1, #6
    1950:	202c      	movs	r0, #44	; 0x2c
    1952:	f00d f854 	bl	e9fe <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
    1956:	f00d f8aa 	bl	eaae <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
    195a:	2200      	movs	r2, #0
    195c:	2103      	movs	r1, #3
    195e:	2036      	movs	r0, #54	; 0x36
    1960:	f00d f84d 	bl	e9fe <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
    1964:	2001      	movs	r0, #1
    1966:	f00d f9bc 	bl	ece2 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
    196a:	22f0      	movs	r2, #240	; 0xf0
    196c:	2103      	movs	r1, #3
    196e:	2036      	movs	r0, #54	; 0x36
    1970:	f00d f845 	bl	e9fe <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
    1974:	4b02      	ldr	r3, [pc, #8]	; (1980 <dwt_softreset+0x44>)
    1976:	681b      	ldr	r3, [r3, #0]
    1978:	2200      	movs	r2, #0
    197a:	755a      	strb	r2, [r3, #21]
}
    197c:	bd08      	pop	{r3, pc}
    197e:	bf00      	nop
    1980:	20000018 	.word	0x20000018

00001984 <dwt_initialise>:
{
    1984:	b570      	push	{r4, r5, r6, lr}
    1986:	4604      	mov	r4, r0
    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
    1988:	4b6b      	ldr	r3, [pc, #428]	; (1b38 <dwt_initialise+0x1b4>)
    198a:	681b      	ldr	r3, [r3, #0]
    198c:	2200      	movs	r2, #0
    198e:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
    1990:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
    1992:	82da      	strh	r2, [r3, #22]
    pdw1000local->cbTxDone = NULL;
    1994:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
    1996:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
    1998:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
    199a:	635a      	str	r2, [r3, #52]	; 0x34
    uint32_t device_id = dwt_readdevid();
    199c:	f00d f809 	bl	e9b2 <dwt_readdevid>
    if (DWT_DEVICE_ID != device_id) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
    19a0:	4b66      	ldr	r3, [pc, #408]	; (1b3c <dwt_initialise+0x1b8>)
    19a2:	4298      	cmp	r0, r3
    19a4:	f040 80c4 	bne.w	1b30 <dwt_initialise+0x1ac>
    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
    19a8:	f014 0502 	ands.w	r5, r4, #2
    19ac:	d01c      	beq.n	19e8 <dwt_initialise+0x64>
    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
    19ae:	b115      	cbz	r5, 19b6 <dwt_initialise+0x32>
    19b0:	f014 0ff8 	tst.w	r4, #248	; 0xf8
    19b4:	d102      	bne.n	19bc <dwt_initialise+0x38>
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
    19b6:	2000      	movs	r0, #0
    19b8:	f00d f89e 	bl	eaf8 <_dwt_enableclocks>
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
    19bc:	2204      	movs	r2, #4
    19be:	2100      	movs	r1, #0
    19c0:	2024      	movs	r0, #36	; 0x24
    19c2:	f00d f81c 	bl	e9fe <dwt_write8bitoffsetreg>
    if(!(DWT_DW_WAKE_UP & config))
    19c6:	b9f5      	cbnz	r5, 1a06 <dwt_initialise+0x82>
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
    19c8:	2004      	movs	r0, #4
    19ca:	f00d f85b 	bl	ea84 <_dwt_otpread>
        if((ldo_tune & 0xFF) != 0)
    19ce:	f010 0fff 	tst.w	r0, #255	; 0xff
    19d2:	d10c      	bne.n	19ee <dwt_initialise+0x6a>
    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
    19d4:	b32d      	cbz	r5, 1a22 <dwt_initialise+0x9e>
    19d6:	f004 030a 	and.w	r3, r4, #10
    19da:	2b0a      	cmp	r3, #10
    19dc:	d021      	beq.n	1a22 <dwt_initialise+0x9e>
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
    19de:	4b56      	ldr	r3, [pc, #344]	; (1b38 <dwt_initialise+0x1b4>)
    19e0:	681a      	ldr	r2, [r3, #0]
    19e2:	2300      	movs	r3, #0
    19e4:	72d3      	strb	r3, [r2, #11]
    19e6:	e025      	b.n	1a34 <dwt_initialise+0xb0>
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
    19e8:	f7ff ffa8 	bl	193c <dwt_softreset>
    19ec:	e7df      	b.n	19ae <dwt_initialise+0x2a>
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
    19ee:	2202      	movs	r2, #2
    19f0:	2112      	movs	r1, #18
    19f2:	202d      	movs	r0, #45	; 0x2d
    19f4:	f00d f803 	bl	e9fe <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
    19f8:	4b4f      	ldr	r3, [pc, #316]	; (1b38 <dwt_initialise+0x1b4>)
    19fa:	681a      	ldr	r2, [r3, #0]
    19fc:	8ad3      	ldrh	r3, [r2, #22]
    19fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1a02:	82d3      	strh	r3, [r2, #22]
    1a04:	e7e6      	b.n	19d4 <dwt_initialise+0x50>
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
    1a06:	2130      	movs	r1, #48	; 0x30
    1a08:	2028      	movs	r0, #40	; 0x28
    1a0a:	f00c ffba 	bl	e982 <dwt_read32bitoffsetreg>
    1a0e:	f1b0 3f88 	cmp.w	r0, #2290649224	; 0x88888888
    1a12:	d0df      	beq.n	19d4 <dwt_initialise+0x50>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
    1a14:	4b48      	ldr	r3, [pc, #288]	; (1b38 <dwt_initialise+0x1b4>)
    1a16:	681a      	ldr	r2, [r3, #0]
    1a18:	8ad3      	ldrh	r3, [r2, #22]
    1a1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1a1e:	82d3      	strh	r3, [r2, #22]
    1a20:	e7d8      	b.n	19d4 <dwt_initialise+0x50>
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
    1a22:	201e      	movs	r0, #30
    1a24:	f00d f82e 	bl	ea84 <_dwt_otpread>
    1a28:	b283      	uxth	r3, r0
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
    1a2a:	4a43      	ldr	r2, [pc, #268]	; (1b38 <dwt_initialise+0x1b4>)
    1a2c:	6812      	ldr	r2, [r2, #0]
    1a2e:	f3c0 2007 	ubfx	r0, r0, #8, #8
    1a32:	72d0      	strb	r0, [r2, #11]
    if(!(DWT_DW_WAKE_UP & config))
    1a34:	b935      	cbnz	r5, 1a44 <dwt_initialise+0xc0>
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
    1a36:	f013 0f1f 	tst.w	r3, #31
    1a3a:	d100      	bne.n	1a3e <dwt_initialise+0xba>
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
    1a3c:	2310      	movs	r3, #16
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
    1a3e:	b2d8      	uxtb	r0, r3
    1a40:	f00d f92c 	bl	ec9c <dwt_setxtaltrim>
    if(DWT_READ_OTP_PID & config)
    1a44:	f014 0f10 	tst.w	r4, #16
    1a48:	d140      	bne.n	1acc <dwt_initialise+0x148>
        pdw1000local->partID = 0;
    1a4a:	4b3b      	ldr	r3, [pc, #236]	; (1b38 <dwt_initialise+0x1b4>)
    1a4c:	681b      	ldr	r3, [r3, #0]
    1a4e:	2200      	movs	r2, #0
    1a50:	601a      	str	r2, [r3, #0]
    if(DWT_READ_OTP_LID & config)
    1a52:	f014 0f20 	tst.w	r4, #32
    1a56:	d140      	bne.n	1ada <dwt_initialise+0x156>
        pdw1000local->lotID = 0;
    1a58:	4b37      	ldr	r3, [pc, #220]	; (1b38 <dwt_initialise+0x1b4>)
    1a5a:	681b      	ldr	r3, [r3, #0]
    1a5c:	2200      	movs	r2, #0
    1a5e:	605a      	str	r2, [r3, #4]
    if(DWT_READ_OTP_BAT & config)
    1a60:	f014 0f40 	tst.w	r4, #64	; 0x40
    1a64:	d140      	bne.n	1ae8 <dwt_initialise+0x164>
        pdw1000local->vBatP = 0;
    1a66:	4b34      	ldr	r3, [pc, #208]	; (1b38 <dwt_initialise+0x1b4>)
    1a68:	681b      	ldr	r3, [r3, #0]
    1a6a:	2200      	movs	r2, #0
    1a6c:	721a      	strb	r2, [r3, #8]
    if(DWT_READ_OTP_TMP & config)
    1a6e:	f014 0f80 	tst.w	r4, #128	; 0x80
    1a72:	d140      	bne.n	1af6 <dwt_initialise+0x172>
        pdw1000local->tempP = 0;
    1a74:	4b30      	ldr	r3, [pc, #192]	; (1b38 <dwt_initialise+0x1b4>)
    1a76:	681b      	ldr	r3, [r3, #0]
    1a78:	2200      	movs	r2, #0
    1a7a:	725a      	strb	r2, [r3, #9]
    if(!(DWT_DW_WAKE_UP & config))
    1a7c:	2d00      	cmp	r5, #0
    1a7e:	d14d      	bne.n	1b1c <dwt_initialise+0x198>
        if(DWT_LOADUCODE & config)
    1a80:	f014 0f01 	tst.w	r4, #1
    1a84:	d03e      	beq.n	1b04 <dwt_initialise+0x180>
            _dwt_loaducodefromrom();
    1a86:	f00d f8b0 	bl	ebea <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
    1a8a:	4b2b      	ldr	r3, [pc, #172]	; (1b38 <dwt_initialise+0x1b4>)
    1a8c:	681a      	ldr	r2, [r3, #0]
    1a8e:	8ad3      	ldrh	r3, [r2, #22]
    1a90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1a94:	82d3      	strh	r3, [r2, #22]
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
    1a96:	2001      	movs	r0, #1
    1a98:	f00d f82e 	bl	eaf8 <_dwt_enableclocks>
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
    1a9c:	2200      	movs	r2, #0
    1a9e:	210a      	movs	r1, #10
    1aa0:	202c      	movs	r0, #44	; 0x2c
    1aa2:	f00c ffac 	bl	e9fe <dwt_write8bitoffsetreg>
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
    1aa6:	4c24      	ldr	r4, [pc, #144]	; (1b38 <dwt_initialise+0x1b4>)
    1aa8:	6825      	ldr	r5, [r4, #0]
    1aaa:	2100      	movs	r1, #0
    1aac:	2004      	movs	r0, #4
    1aae:	f00c ff68 	bl	e982 <dwt_read32bitoffsetreg>
    1ab2:	6128      	str	r0, [r5, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
    1ab4:	6824      	ldr	r4, [r4, #0]
    1ab6:	8a63      	ldrh	r3, [r4, #18]
    1ab8:	f003 0303 	and.w	r3, r3, #3
    1abc:	72a3      	strb	r3, [r4, #10]
    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
    1abe:	2100      	movs	r1, #0
    1ac0:	2008      	movs	r0, #8
    1ac2:	f00c ff5e 	bl	e982 <dwt_read32bitoffsetreg>
    1ac6:	60e0      	str	r0, [r4, #12]
    return DWT_SUCCESS ;
    1ac8:	2000      	movs	r0, #0
} // end dwt_initialise()
    1aca:	bd70      	pop	{r4, r5, r6, pc}
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
    1acc:	4b1a      	ldr	r3, [pc, #104]	; (1b38 <dwt_initialise+0x1b4>)
    1ace:	681e      	ldr	r6, [r3, #0]
    1ad0:	2006      	movs	r0, #6
    1ad2:	f00c ffd7 	bl	ea84 <_dwt_otpread>
    1ad6:	6030      	str	r0, [r6, #0]
    1ad8:	e7bb      	b.n	1a52 <dwt_initialise+0xce>
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
    1ada:	4b17      	ldr	r3, [pc, #92]	; (1b38 <dwt_initialise+0x1b4>)
    1adc:	681e      	ldr	r6, [r3, #0]
    1ade:	2007      	movs	r0, #7
    1ae0:	f00c ffd0 	bl	ea84 <_dwt_otpread>
    1ae4:	6070      	str	r0, [r6, #4]
    1ae6:	e7bb      	b.n	1a60 <dwt_initialise+0xdc>
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
    1ae8:	2008      	movs	r0, #8
    1aea:	f00c ffcb 	bl	ea84 <_dwt_otpread>
    1aee:	4b12      	ldr	r3, [pc, #72]	; (1b38 <dwt_initialise+0x1b4>)
    1af0:	681b      	ldr	r3, [r3, #0]
    1af2:	7218      	strb	r0, [r3, #8]
    1af4:	e7bb      	b.n	1a6e <dwt_initialise+0xea>
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
    1af6:	2009      	movs	r0, #9
    1af8:	f00c ffc4 	bl	ea84 <_dwt_otpread>
    1afc:	4b0e      	ldr	r3, [pc, #56]	; (1b38 <dwt_initialise+0x1b4>)
    1afe:	681b      	ldr	r3, [r3, #0]
    1b00:	7258      	strb	r0, [r3, #9]
    1b02:	e7bb      	b.n	1a7c <dwt_initialise+0xf8>
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
    1b04:	2105      	movs	r1, #5
    1b06:	2036      	movs	r0, #54	; 0x36
    1b08:	f00c ff59 	bl	e9be <dwt_read16bitoffsetreg>
            rega &= 0xFDFF ; // Clear LDERUN bit
    1b0c:	f420 7200 	bic.w	r2, r0, #512	; 0x200
    1b10:	b292      	uxth	r2, r2
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
    1b12:	2105      	movs	r1, #5
    1b14:	2036      	movs	r0, #54	; 0x36
    1b16:	f00c ff80 	bl	ea1a <dwt_write16bitoffsetreg>
    1b1a:	e7bc      	b.n	1a96 <dwt_initialise+0x112>
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
    1b1c:	f014 0f04 	tst.w	r4, #4
    1b20:	d1b9      	bne.n	1a96 <dwt_initialise+0x112>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
    1b22:	4b05      	ldr	r3, [pc, #20]	; (1b38 <dwt_initialise+0x1b4>)
    1b24:	681a      	ldr	r2, [r3, #0]
    1b26:	8ad3      	ldrh	r3, [r2, #22]
    1b28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1b2c:	82d3      	strh	r3, [r2, #22]
    1b2e:	e7b2      	b.n	1a96 <dwt_initialise+0x112>
        return DWT_ERROR ;
    1b30:	f04f 30ff 	mov.w	r0, #4294967295
    1b34:	e7c9      	b.n	1aca <dwt_initialise+0x146>
    1b36:	bf00      	nop
    1b38:	20000018 	.word	0x20000018
    1b3c:	deca0130 	.word	0xdeca0130

00001b40 <openspi>:

//     return 0;
// }

int openspi(void)
{
    1b40:	b530      	push	{r4, r5, lr}
    1b42:	b085      	sub	sp, #20
    cs_ctrl = *SPI_CS_CONTROL_PTR_DT(DT_NODELABEL(ieee802154), 2);
    1b44:	4a1c      	ldr	r2, [pc, #112]	; (1bb8 <openspi+0x78>)
    1b46:	ab01      	add	r3, sp, #4
    1b48:	ca07      	ldmia	r2, {r0, r1, r2}
    1b4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    1b4e:	4c1b      	ldr	r4, [pc, #108]	; (1bbc <openspi+0x7c>)
    1b50:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    for (int i = 0; i < SPI_CFGS_COUNT; ++i) {
    1b54:	2300      	movs	r3, #0
    1b56:	e007      	b.n	1b68 <openspi+0x28>
        spi_cfgs[i].cs = &cs_ctrl;
    1b58:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    1b5c:	0091      	lsls	r1, r2, #2
    1b5e:	4a18      	ldr	r2, [pc, #96]	; (1bc0 <openspi+0x80>)
    1b60:	440a      	add	r2, r1
    1b62:	4916      	ldr	r1, [pc, #88]	; (1bbc <openspi+0x7c>)
    1b64:	6091      	str	r1, [r2, #8]
    for (int i = 0; i < SPI_CFGS_COUNT; ++i) {
    1b66:	3301      	adds	r3, #1
    1b68:	2b03      	cmp	r3, #3
    1b6a:	d9f5      	bls.n	1b58 <openspi+0x18>
    }
    spi_cfg = &spi_cfgs[0];
    1b6c:	4b14      	ldr	r3, [pc, #80]	; (1bc0 <openspi+0x80>)
    1b6e:	4a15      	ldr	r2, [pc, #84]	; (1bc4 <openspi+0x84>)
    1b70:	6013      	str	r3, [r2, #0]

    spi = DEVICE_DT_GET(DT_NODELABEL(spi2));
    1b72:	4a15      	ldr	r2, [pc, #84]	; (1bc8 <openspi+0x88>)
    1b74:	4915      	ldr	r1, [pc, #84]	; (1bcc <openspi+0x8c>)
    1b76:	6011      	str	r1, [r2, #0]

    spi_cfg->operation = SPI_WORD_SET(8);
    1b78:	f44f 7280 	mov.w	r2, #256	; 0x100
    1b7c:	809a      	strh	r2, [r3, #4]
    spi_cfg->frequency = 2000000;
    1b7e:	4a14      	ldr	r2, [pc, #80]	; (1bd0 <openspi+0x90>)
    1b80:	601a      	str	r2, [r3, #0]

    memset(&tx_buf[0], 0, 255);
    1b82:	4d14      	ldr	r5, [pc, #80]	; (1bd4 <openspi+0x94>)
    1b84:	22ff      	movs	r2, #255	; 0xff
    1b86:	2100      	movs	r1, #0
    1b88:	4628      	mov	r0, r5
    1b8a:	f011 f92d 	bl	12de8 <memset>
    memset(&rx_buf[0], 0, 255);
    1b8e:	4c12      	ldr	r4, [pc, #72]	; (1bd8 <openspi+0x98>)
    1b90:	22ff      	movs	r2, #255	; 0xff
    1b92:	2100      	movs	r1, #0
    1b94:	4620      	mov	r0, r4
    1b96:	f011 f927 	bl	12de8 <memset>
    bufs[0].buf = &tx_buf[0];
    1b9a:	4b10      	ldr	r3, [pc, #64]	; (1bdc <openspi+0x9c>)
    1b9c:	601d      	str	r5, [r3, #0]
    bufs[1].buf = &rx_buf[0];
    1b9e:	609c      	str	r4, [r3, #8]
    tx.buffers = &bufs[0];
    1ba0:	490f      	ldr	r1, [pc, #60]	; (1be0 <openspi+0xa0>)
    1ba2:	600b      	str	r3, [r1, #0]
    rx.buffers = &bufs[1];
    1ba4:	4a0f      	ldr	r2, [pc, #60]	; (1be4 <openspi+0xa4>)
    1ba6:	3308      	adds	r3, #8
    1ba8:	6013      	str	r3, [r2, #0]
    tx.count = 1;
    1baa:	2301      	movs	r3, #1
    1bac:	604b      	str	r3, [r1, #4]
    rx.count = 1;
    1bae:	6053      	str	r3, [r2, #4]

    return 0;
}
    1bb0:	2000      	movs	r0, #0
    1bb2:	b005      	add	sp, #20
    1bb4:	bd30      	pop	{r4, r5, pc}
    1bb6:	bf00      	nop
    1bb8:	000154c0 	.word	0x000154c0
    1bbc:	20000ed0 	.word	0x20000ed0
    1bc0:	200010fc 	.word	0x200010fc
    1bc4:	2000112c 	.word	0x2000112c
    1bc8:	20001130 	.word	0x20001130
    1bcc:	00015158 	.word	0x00015158
    1bd0:	001e8480 	.word	0x001e8480
    1bd4:	20000ffc 	.word	0x20000ffc
    1bd8:	20000efc 	.word	0x20000efc
    1bdc:	20000eec 	.word	0x20000eec
    1be0:	20000ee4 	.word	0x20000ee4
    1be4:	20000edc 	.word	0x20000edc

00001be8 <set_spi_speed_slow>:

void set_spi_speed_slow(void)
{
    1be8:	b508      	push	{r3, lr}
    spi_cfg = &spi_cfgs[0];
    1bea:	4b09      	ldr	r3, [pc, #36]	; (1c10 <set_spi_speed_slow+0x28>)
    1bec:	4a09      	ldr	r2, [pc, #36]	; (1c14 <set_spi_speed_slow+0x2c>)
    1bee:	6013      	str	r3, [r2, #0]
    spi_cfg->operation = SPI_WORD_SET(8);
    1bf0:	f44f 7280 	mov.w	r2, #256	; 0x100
    1bf4:	809a      	strh	r2, [r3, #4]
    spi_cfg->frequency = 2000000;
    1bf6:	4a08      	ldr	r2, [pc, #32]	; (1c18 <set_spi_speed_slow+0x30>)
    1bf8:	601a      	str	r2, [r3, #0]

    memset(&tx_buf[0], 0, 255);
    1bfa:	22ff      	movs	r2, #255	; 0xff
    1bfc:	2100      	movs	r1, #0
    1bfe:	4807      	ldr	r0, [pc, #28]	; (1c1c <set_spi_speed_slow+0x34>)
    1c00:	f011 f8f2 	bl	12de8 <memset>
    memset(&rx_buf[0], 0, 255);
    1c04:	22ff      	movs	r2, #255	; 0xff
    1c06:	2100      	movs	r1, #0
    1c08:	4805      	ldr	r0, [pc, #20]	; (1c20 <set_spi_speed_slow+0x38>)
    1c0a:	f011 f8ed 	bl	12de8 <memset>
}
    1c0e:	bd08      	pop	{r3, pc}
    1c10:	200010fc 	.word	0x200010fc
    1c14:	2000112c 	.word	0x2000112c
    1c18:	001e8480 	.word	0x001e8480
    1c1c:	20000ffc 	.word	0x20000ffc
    1c20:	20000efc 	.word	0x20000efc

00001c24 <set_spi_speed_fast>:

void set_spi_speed_fast(void)
{
    1c24:	b508      	push	{r3, lr}
    spi_cfg = &spi_cfgs[1];
    1c26:	4b0a      	ldr	r3, [pc, #40]	; (1c50 <set_spi_speed_fast+0x2c>)
    1c28:	4a0a      	ldr	r2, [pc, #40]	; (1c54 <set_spi_speed_fast+0x30>)
    1c2a:	6013      	str	r3, [r2, #0]
    spi_cfg->operation = SPI_WORD_SET(8);
    1c2c:	f44f 7280 	mov.w	r2, #256	; 0x100
    1c30:	809a      	strh	r2, [r3, #4]
    1c32:	3b0c      	subs	r3, #12
    spi_cfg->frequency = 8000000;
    1c34:	4a08      	ldr	r2, [pc, #32]	; (1c58 <set_spi_speed_fast+0x34>)
    1c36:	60da      	str	r2, [r3, #12]

    memset(&tx_buf[0], 0, 255);
    1c38:	22ff      	movs	r2, #255	; 0xff
    1c3a:	2100      	movs	r1, #0
    1c3c:	4807      	ldr	r0, [pc, #28]	; (1c5c <set_spi_speed_fast+0x38>)
    1c3e:	f011 f8d3 	bl	12de8 <memset>
    memset(&rx_buf[0], 0, 255);
    1c42:	22ff      	movs	r2, #255	; 0xff
    1c44:	2100      	movs	r1, #0
    1c46:	4806      	ldr	r0, [pc, #24]	; (1c60 <set_spi_speed_fast+0x3c>)
    1c48:	f011 f8ce 	bl	12de8 <memset>
}
    1c4c:	bd08      	pop	{r3, pc}
    1c4e:	bf00      	nop
    1c50:	20001108 	.word	0x20001108
    1c54:	2000112c 	.word	0x2000112c
    1c58:	007a1200 	.word	0x007a1200
    1c5c:	20000ffc 	.word	0x20000ffc
    1c60:	20000efc 	.word	0x20000efc

00001c64 <writetospi>:
 */
int writetospi(uint16           headerLength,
               const    uint8 * headerBuffer,
               uint32           bodyLength,
               const    uint8 * bodyBuffer)
{
    1c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1c68:	4604      	mov	r4, r0
    1c6a:	4688      	mov	r8, r1
    1c6c:	4615      	mov	r5, r2
    1c6e:	461f      	mov	r7, r3
#if 0
    LOG_HEXDUMP_INF(headerBuffer, headerLength, "writetospi: Header");
    LOG_HEXDUMP_INF(bodyBuffer, bodyLength, "writetospi: Body");
#endif

    stat = decamutexon();
    1c70:	f00d f81e 	bl	ecb0 <decamutexon>
    1c74:	4606      	mov	r6, r0

    memcpy(&tx_buf[0], headerBuffer, headerLength);
    1c76:	f8df 9040 	ldr.w	r9, [pc, #64]	; 1cb8 <writetospi+0x54>
    1c7a:	4622      	mov	r2, r4
    1c7c:	4641      	mov	r1, r8
    1c7e:	4648      	mov	r0, r9
    1c80:	f011 f883 	bl	12d8a <memcpy>
    memcpy(&tx_buf[headerLength], bodyBuffer, bodyLength);
    1c84:	462a      	mov	r2, r5
    1c86:	4639      	mov	r1, r7
    1c88:	eb09 0004 	add.w	r0, r9, r4
    1c8c:	f011 f87d 	bl	12d8a <memcpy>

    bufs[0].len = headerLength + bodyLength;
    1c90:	442c      	add	r4, r5
    1c92:	4b0a      	ldr	r3, [pc, #40]	; (1cbc <writetospi+0x58>)
    1c94:	605c      	str	r4, [r3, #4]
    bufs[1].len = headerLength + bodyLength;
    1c96:	60dc      	str	r4, [r3, #12]

    spi_transceive(spi, spi_cfg, &tx, &rx);
    1c98:	4b09      	ldr	r3, [pc, #36]	; (1cc0 <writetospi+0x5c>)
    1c9a:	6818      	ldr	r0, [r3, #0]
    1c9c:	4b09      	ldr	r3, [pc, #36]	; (1cc4 <writetospi+0x60>)
    1c9e:	6819      	ldr	r1, [r3, #0]
static inline int z_impl_spi_transceive(const struct device *dev,
					const struct spi_config *config,
					const struct spi_buf_set *tx_bufs,
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
    1ca0:	6883      	ldr	r3, [r0, #8]
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
    1ca2:	681c      	ldr	r4, [r3, #0]
    1ca4:	4b08      	ldr	r3, [pc, #32]	; (1cc8 <writetospi+0x64>)
    1ca6:	4a09      	ldr	r2, [pc, #36]	; (1ccc <writetospi+0x68>)
    1ca8:	47a0      	blx	r4

    decamutexoff(stat);
    1caa:	4630      	mov	r0, r6
    1cac:	f00d f802 	bl	ecb4 <decamutexoff>

    return 0;
}
    1cb0:	2000      	movs	r0, #0
    1cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1cb6:	bf00      	nop
    1cb8:	20000ffc 	.word	0x20000ffc
    1cbc:	20000eec 	.word	0x20000eec
    1cc0:	20001130 	.word	0x20001130
    1cc4:	2000112c 	.word	0x2000112c
    1cc8:	20000edc 	.word	0x20000edc
    1ccc:	20000ee4 	.word	0x20000ee4

00001cd0 <readfromspi>:
 */
int readfromspi(uint16        headerLength,
                const uint8 * headerBuffer,
                uint32        readLength,
                uint8       * readBuffer)
{
    1cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1cd4:	4604      	mov	r4, r0
    1cd6:	4689      	mov	r9, r1
    1cd8:	4615      	mov	r5, r2
    1cda:	461f      	mov	r7, r3
    decaIrqStatus_t  stat;

    stat = decamutexon();
    1cdc:	f00c ffe8 	bl	ecb0 <decamutexon>
    1ce0:	4606      	mov	r6, r0

    memset(&tx_buf[0], 0, headerLength + readLength);
    1ce2:	eb04 0805 	add.w	r8, r4, r5
    1ce6:	f8df a04c 	ldr.w	sl, [pc, #76]	; 1d34 <readfromspi+0x64>
    1cea:	4642      	mov	r2, r8
    1cec:	2100      	movs	r1, #0
    1cee:	4650      	mov	r0, sl
    1cf0:	f011 f87a 	bl	12de8 <memset>
    memcpy(&tx_buf[0], headerBuffer, headerLength);
    1cf4:	4622      	mov	r2, r4
    1cf6:	4649      	mov	r1, r9
    1cf8:	4650      	mov	r0, sl
    1cfa:	f011 f846 	bl	12d8a <memcpy>

    bufs[0].len = headerLength + readLength;
    1cfe:	4b0e      	ldr	r3, [pc, #56]	; (1d38 <readfromspi+0x68>)
    1d00:	f8c3 8004 	str.w	r8, [r3, #4]
    bufs[1].len = headerLength + readLength;
    1d04:	f8c3 800c 	str.w	r8, [r3, #12]

    spi_transceive(spi, spi_cfg, &tx, &rx);
    1d08:	4b0c      	ldr	r3, [pc, #48]	; (1d3c <readfromspi+0x6c>)
    1d0a:	6818      	ldr	r0, [r3, #0]
    1d0c:	4b0c      	ldr	r3, [pc, #48]	; (1d40 <readfromspi+0x70>)
    1d0e:	6819      	ldr	r1, [r3, #0]
	const struct spi_driver_api *api =
    1d10:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    1d12:	f8d3 8000 	ldr.w	r8, [r3]
    1d16:	4b0b      	ldr	r3, [pc, #44]	; (1d44 <readfromspi+0x74>)
    1d18:	4a0b      	ldr	r2, [pc, #44]	; (1d48 <readfromspi+0x78>)
    1d1a:	47c0      	blx	r8

    memcpy(readBuffer, rx_buf + headerLength, readLength);
    1d1c:	462a      	mov	r2, r5
    1d1e:	490b      	ldr	r1, [pc, #44]	; (1d4c <readfromspi+0x7c>)
    1d20:	4421      	add	r1, r4
    1d22:	4638      	mov	r0, r7
    1d24:	f011 f831 	bl	12d8a <memcpy>

    decamutexoff(stat);
    1d28:	4630      	mov	r0, r6
    1d2a:	f00c ffc3 	bl	ecb4 <decamutexoff>
    LOG_HEXDUMP_INF(headerBuffer, headerLength, "readfromspi: Header");
    LOG_HEXDUMP_INF(readBuffer, readLength, "readfromspi: Body");
#endif

    return 0;
}
    1d2e:	2000      	movs	r0, #0
    1d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1d34:	20000ffc 	.word	0x20000ffc
    1d38:	20000eec 	.word	0x20000eec
    1d3c:	20001130 	.word	0x20001130
    1d40:	2000112c 	.word	0x2000112c
    1d44:	20000edc 	.word	0x20000edc
    1d48:	20000ee4 	.word	0x20000ee4
    1d4c:	20000efc 	.word	0x20000efc

00001d50 <port_set_deca_isr>:
 * @param deca_isr function pointer to DW1000 interrupt handler to install
 *
 * @return none
 */
void port_set_deca_isr(port_deca_isr_t deca_isr)
{
    1d50:	b580      	push	{r7, lr}
    1d52:	b082      	sub	sp, #8
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    // printk("%s: Binding to GPIO0 and pin %d\n", __func__, GPIO_PIN);
    // gpio_dev = device_get_binding(DT_LABEL(DT_NODELABEL(gpio0))); // changed 10/23/23
    gpio_dev = DEVICE_DT_GET(DT_NODELABEL(gpio0));
    1d58:	4b14      	ldr	r3, [pc, #80]	; (1dac <port_set_deca_isr+0x5c>)
    1d5a:	4a15      	ldr	r2, [pc, #84]	; (1db0 <port_set_deca_isr+0x60>)
    1d5c:	601a      	str	r2, [r3, #0]
    if (!gpio_dev) {
    1d5e:	4b13      	ldr	r3, [pc, #76]	; (1dac <port_set_deca_isr+0x5c>)
    1d60:	681b      	ldr	r3, [r3, #0]
    1d62:	2b00      	cmp	r3, #0
    1d64:	d103      	bne.n	1d6e <port_set_deca_isr+0x1e>
        printk("error\n");
    1d66:	4813      	ldr	r0, [pc, #76]	; (1db4 <port_set_deca_isr+0x64>)
    1d68:	f00d f8cb 	bl	ef02 <printk>
        return;
    1d6c:	e01a      	b.n	1da4 <port_set_deca_isr+0x54>
    }

    /* Decawave interrupt */
    gpio_pin_configure(gpio_dev, GPIO_PIN, (GPIO_INPUT | GPIO_FLAGS));
    1d6e:	4b0f      	ldr	r3, [pc, #60]	; (1dac <port_set_deca_isr+0x5c>)
    1d70:	681b      	ldr	r3, [r3, #0]
    1d72:	4a11      	ldr	r2, [pc, #68]	; (1db8 <port_set_deca_isr+0x68>)
    1d74:	2113      	movs	r1, #19
    1d76:	4618      	mov	r0, r3
    1d78:	f00d f810 	bl	ed9c <gpio_pin_configure>

    gpio_init_callback(&gpio_cb, (gpio_callback_handler_t)(deca_isr), BIT(GPIO_PIN));
    1d7c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    1d80:	6879      	ldr	r1, [r7, #4]
    1d82:	480e      	ldr	r0, [pc, #56]	; (1dbc <port_set_deca_isr+0x6c>)
    1d84:	f00c fff9 	bl	ed7a <gpio_init_callback>

    gpio_add_callback(gpio_dev, &gpio_cb);
    1d88:	4b08      	ldr	r3, [pc, #32]	; (1dac <port_set_deca_isr+0x5c>)
    1d8a:	681b      	ldr	r3, [r3, #0]
    1d8c:	490b      	ldr	r1, [pc, #44]	; (1dbc <port_set_deca_isr+0x6c>)
    1d8e:	4618      	mov	r0, r3
    1d90:	f00c fff6 	bl	ed80 <gpio_add_callback>

    gpio_pin_interrupt_configure(gpio_dev, GPIO_PIN, GPIO_INT_EDGE_RISING);
    1d94:	4b05      	ldr	r3, [pc, #20]	; (1dac <port_set_deca_isr+0x5c>)
    1d96:	681b      	ldr	r3, [r3, #0]
    1d98:	f04f 62a8 	mov.w	r2, #88080384	; 0x5400000
    1d9c:	2113      	movs	r1, #19
    1d9e:	4618      	mov	r0, r3
    1da0:	f00c fff8 	bl	ed94 <gpio_pin_interrupt_configure>
}
    1da4:	3708      	adds	r7, #8
    1da6:	46bd      	mov	sp, r7
    1da8:	bd80      	pop	{r7, pc}
    1daa:	bf00      	nop
    1dac:	20001140 	.word	0x20001140
    1db0:	00015104 	.word	0x00015104
    1db4:	000154cc 	.word	0x000154cc
    1db8:	00010011 	.word	0x00010011
    1dbc:	20001134 	.word	0x20001134

00001dc0 <getopt>:
/*
 * getopt --
 *	Parse argc/argv argument vector.
 */
int getopt(int nargc, char *const nargv[], const char *ostr)
{
    1dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1dc4:	b082      	sub	sp, #8
    1dc6:	af00      	add	r7, sp, #0
    1dc8:	4606      	mov	r6, r0
    1dca:	4688      	mov	r8, r1
    1dcc:	4615      	mov	r5, r2
	struct getopt_state *state;
	char *oli; /* option letter list index */

	/* get getopt state of the current thread */
	state = getopt_state_get();
    1dce:	f000 f93b 	bl	2048 <getopt_state_get>
    1dd2:	4604      	mov	r4, r0

	if (state->optreset || *state->place == 0) { /* update scanning pointer */
    1dd4:	68c3      	ldr	r3, [r0, #12]
    1dd6:	b91b      	cbnz	r3, 1de0 <getopt+0x20>
    1dd8:	6943      	ldr	r3, [r0, #20]
    1dda:	781a      	ldrb	r2, [r3, #0]
    1ddc:	2a00      	cmp	r2, #0
    1dde:	d156      	bne.n	1e8e <getopt+0xce>
		state->optreset = 0;
    1de0:	2300      	movs	r3, #0
    1de2:	60e3      	str	r3, [r4, #12]
		state->place = nargv[state->optind];
    1de4:	6861      	ldr	r1, [r4, #4]
    1de6:	f858 3021 	ldr.w	r3, [r8, r1, lsl #2]
    1dea:	6163      	str	r3, [r4, #20]
		if (state->optind >= nargc || *state->place++ != '-') {
    1dec:	42b1      	cmp	r1, r6
    1dee:	da29      	bge.n	1e44 <getopt+0x84>
    1df0:	1c5a      	adds	r2, r3, #1
    1df2:	6162      	str	r2, [r4, #20]
    1df4:	781a      	ldrb	r2, [r3, #0]
    1df6:	2a2d      	cmp	r2, #45	; 0x2d
    1df8:	d124      	bne.n	1e44 <getopt+0x84>
			/* Argument is absent or is not an option */
			state->place = EMSG;
			z_getopt_global_state_update(state);
			return -1;
		}
		state->optopt = *state->place++;
    1dfa:	1c9a      	adds	r2, r3, #2
    1dfc:	6162      	str	r2, [r4, #20]
    1dfe:	785a      	ldrb	r2, [r3, #1]
    1e00:	60a2      	str	r2, [r4, #8]
		if (state->optopt == '-' && *state->place == 0) {
    1e02:	2a2d      	cmp	r2, #45	; 0x2d
    1e04:	d026      	beq.n	1e54 <getopt+0x94>
			++state->optind;
			state->place = EMSG;
			z_getopt_global_state_update(state);
			return -1;
		}
		if (state->optopt == 0) {
    1e06:	2a00      	cmp	r2, #0
    1e08:	d031      	beq.n	1e6e <getopt+0xae>
	} else {
		state->optopt = *state->place++;
	}

	/* See if option letter is one the caller wanted... */
	oli = strchr(ostr, state->optopt);
    1e0a:	68a1      	ldr	r1, [r4, #8]
    1e0c:	4628      	mov	r0, r5
    1e0e:	f010 ff59 	bl	12cc4 <strchr>
	if (state->optopt == ':' || oli == NULL) {
    1e12:	68a3      	ldr	r3, [r4, #8]
    1e14:	2b3a      	cmp	r3, #58	; 0x3a
    1e16:	d03f      	beq.n	1e98 <getopt+0xd8>
    1e18:	2800      	cmp	r0, #0
    1e1a:	d03d      	beq.n	1e98 <getopt+0xd8>
		z_getopt_global_state_update(state);
		return BADCH;
	}

	/* Does this option need an argument? */
	if (oli[1] != ':') {
    1e1c:	7842      	ldrb	r2, [r0, #1]
    1e1e:	2a3a      	cmp	r2, #58	; 0x3a
    1e20:	f000 808b 	beq.w	1f3a <getopt+0x17a>
		/* don't need argument */
		state->optarg = NULL;
    1e24:	2300      	movs	r3, #0
    1e26:	6123      	str	r3, [r4, #16]
		if (*state->place == 0) {
    1e28:	6963      	ldr	r3, [r4, #20]
    1e2a:	781b      	ldrb	r3, [r3, #0]
    1e2c:	b913      	cbnz	r3, 1e34 <getopt+0x74>
			++state->optind;
    1e2e:	6863      	ldr	r3, [r4, #4]
    1e30:	3301      	adds	r3, #1
    1e32:	6063      	str	r3, [r4, #4]
			return BADCH;
		}
		state->place = EMSG;
		++state->optind;
	}
	z_getopt_global_state_update(state);
    1e34:	4620      	mov	r0, r4
    1e36:	f000 f8ed 	bl	2014 <z_getopt_global_state_update>
	return state->optopt;	/* return option letter */
    1e3a:	68a0      	ldr	r0, [r4, #8]
}
    1e3c:	3708      	adds	r7, #8
    1e3e:	46bd      	mov	sp, r7
    1e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			state->place = EMSG;
    1e44:	4b6f      	ldr	r3, [pc, #444]	; (2004 <getopt+0x244>)
    1e46:	6163      	str	r3, [r4, #20]
			z_getopt_global_state_update(state);
    1e48:	4620      	mov	r0, r4
    1e4a:	f000 f8e3 	bl	2014 <z_getopt_global_state_update>
			return -1;
    1e4e:	f04f 30ff 	mov.w	r0, #4294967295
    1e52:	e7f3      	b.n	1e3c <getopt+0x7c>
		if (state->optopt == '-' && *state->place == 0) {
    1e54:	789b      	ldrb	r3, [r3, #2]
    1e56:	2b00      	cmp	r3, #0
    1e58:	d1d5      	bne.n	1e06 <getopt+0x46>
			++state->optind;
    1e5a:	3101      	adds	r1, #1
    1e5c:	6061      	str	r1, [r4, #4]
			state->place = EMSG;
    1e5e:	4b69      	ldr	r3, [pc, #420]	; (2004 <getopt+0x244>)
    1e60:	6163      	str	r3, [r4, #20]
			z_getopt_global_state_update(state);
    1e62:	4620      	mov	r0, r4
    1e64:	f000 f8d6 	bl	2014 <z_getopt_global_state_update>
			return -1;
    1e68:	f04f 30ff 	mov.w	r0, #4294967295
    1e6c:	e7e6      	b.n	1e3c <getopt+0x7c>
			state->place = EMSG;
    1e6e:	4b65      	ldr	r3, [pc, #404]	; (2004 <getopt+0x244>)
    1e70:	6163      	str	r3, [r4, #20]
			if (strchr(ostr, '-') == NULL) {
    1e72:	212d      	movs	r1, #45	; 0x2d
    1e74:	4628      	mov	r0, r5
    1e76:	f010 ff25 	bl	12cc4 <strchr>
    1e7a:	b110      	cbz	r0, 1e82 <getopt+0xc2>
			state->optopt = '-';
    1e7c:	232d      	movs	r3, #45	; 0x2d
    1e7e:	60a3      	str	r3, [r4, #8]
    1e80:	e7c3      	b.n	1e0a <getopt+0x4a>
				z_getopt_global_state_update(state);
    1e82:	4620      	mov	r0, r4
    1e84:	f000 f8c6 	bl	2014 <z_getopt_global_state_update>
				return -1;
    1e88:	f04f 30ff 	mov.w	r0, #4294967295
    1e8c:	e7d6      	b.n	1e3c <getopt+0x7c>
		state->optopt = *state->place++;
    1e8e:	1c5a      	adds	r2, r3, #1
    1e90:	6142      	str	r2, [r0, #20]
    1e92:	781b      	ldrb	r3, [r3, #0]
    1e94:	6083      	str	r3, [r0, #8]
    1e96:	e7b8      	b.n	1e0a <getopt+0x4a>
		if (*state->place == 0) {
    1e98:	6962      	ldr	r2, [r4, #20]
    1e9a:	7812      	ldrb	r2, [r2, #0]
    1e9c:	b912      	cbnz	r2, 1ea4 <getopt+0xe4>
			++state->optind;
    1e9e:	6862      	ldr	r2, [r4, #4]
    1ea0:	3201      	adds	r2, #1
    1ea2:	6062      	str	r2, [r4, #4]
		if (state->opterr && *ostr != ':') {
    1ea4:	6822      	ldr	r2, [r4, #0]
    1ea6:	2a00      	cmp	r2, #0
    1ea8:	d03c      	beq.n	1f24 <getopt+0x164>
    1eaa:	782a      	ldrb	r2, [r5, #0]
    1eac:	2a3a      	cmp	r2, #58	; 0x3a
    1eae:	d039      	beq.n	1f24 <getopt+0x164>
			LOG_ERR("illegal option -- %c", state->optopt);
    1eb0:	4a55      	ldr	r2, [pc, #340]	; (2008 <getopt+0x248>)
    1eb2:	6812      	ldr	r2, [r2, #0]
    1eb4:	f012 0f07 	tst.w	r2, #7
    1eb8:	d034      	beq.n	1f24 <getopt+0x164>
    1eba:	466d      	mov	r5, sp
    1ebc:	b088      	sub	sp, #32
    1ebe:	4669      	mov	r1, sp
    1ec0:	f111 0210 	adds.w	r2, r1, #16
    1ec4:	d033      	beq.n	1f2e <getopt+0x16e>
    1ec6:	200c      	movs	r0, #12
    1ec8:	b14a      	cbz	r2, 1ede <getopt+0x11e>
    1eca:	4606      	mov	r6, r0
    1ecc:	2804      	cmp	r0, #4
    1ece:	dd03      	ble.n	1ed8 <getopt+0x118>
    1ed0:	f8df c138 	ldr.w	ip, [pc, #312]	; 200c <getopt+0x24c>
    1ed4:	f8c1 c014 	str.w	ip, [r1, #20]
    1ed8:	2e08      	cmp	r6, #8
    1eda:	dd00      	ble.n	1ede <getopt+0x11e>
    1edc:	618b      	str	r3, [r1, #24]
    1ede:	280b      	cmp	r0, #11
    1ee0:	dd28      	ble.n	1f34 <getopt+0x174>
    1ee2:	230c      	movs	r3, #12
    1ee4:	b13a      	cbz	r2, 1ef6 <getopt+0x136>
    1ee6:	2003      	movs	r0, #3
    1ee8:	7138      	strb	r0, [r7, #4]
    1eea:	2000      	movs	r0, #0
    1eec:	7178      	strb	r0, [r7, #5]
    1eee:	71b8      	strb	r0, [r7, #6]
    1ef0:	71f8      	strb	r0, [r7, #7]
    1ef2:	6878      	ldr	r0, [r7, #4]
    1ef4:	6108      	str	r0, [r1, #16]
    1ef6:	2100      	movs	r1, #0
    1ef8:	f36f 0100 	bfc	r1, #0, #1
    1efc:	f36f 0141 	bfc	r1, #1, #1
    1f00:	f36f 0182 	bfc	r1, #2, #1
    1f04:	f36f 01c5 	bfc	r1, #3, #3
    1f08:	2001      	movs	r0, #1
    1f0a:	f360 1188 	bfi	r1, r0, #6, #3
    1f0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
    1f12:	f363 2153 	bfi	r1, r3, #9, #11
    1f16:	f36f 511f 	bfc	r1, #20, #12
    1f1a:	2300      	movs	r3, #0
    1f1c:	483a      	ldr	r0, [pc, #232]	; (2008 <getopt+0x248>)
    1f1e:	f002 fcfd 	bl	491c <z_impl_z_log_msg_static_create>
    1f22:	46ad      	mov	sp, r5
		z_getopt_global_state_update(state);
    1f24:	4620      	mov	r0, r4
    1f26:	f000 f875 	bl	2014 <z_getopt_global_state_update>
		return BADCH;
    1f2a:	203f      	movs	r0, #63	; 0x3f
    1f2c:	e786      	b.n	1e3c <getopt+0x7c>
			LOG_ERR("illegal option -- %c", state->optopt);
    1f2e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    1f32:	e7c9      	b.n	1ec8 <getopt+0x108>
    1f34:	f06f 031b 	mvn.w	r3, #27
    1f38:	e7d4      	b.n	1ee4 <getopt+0x124>
		if (*state->place) {
    1f3a:	6962      	ldr	r2, [r4, #20]
    1f3c:	7811      	ldrb	r1, [r2, #0]
    1f3e:	b131      	cbz	r1, 1f4e <getopt+0x18e>
			state->optarg = state->place;
    1f40:	6122      	str	r2, [r4, #16]
		state->place = EMSG;
    1f42:	4b30      	ldr	r3, [pc, #192]	; (2004 <getopt+0x244>)
    1f44:	6163      	str	r3, [r4, #20]
		++state->optind;
    1f46:	6863      	ldr	r3, [r4, #4]
    1f48:	3301      	adds	r3, #1
    1f4a:	6063      	str	r3, [r4, #4]
    1f4c:	e772      	b.n	1e34 <getopt+0x74>
		} else if (nargc > ++state->optind) {
    1f4e:	6862      	ldr	r2, [r4, #4]
    1f50:	3201      	adds	r2, #1
    1f52:	6062      	str	r2, [r4, #4]
    1f54:	4296      	cmp	r6, r2
    1f56:	dd03      	ble.n	1f60 <getopt+0x1a0>
			state->optarg = nargv[state->optind];
    1f58:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    1f5c:	6123      	str	r3, [r4, #16]
    1f5e:	e7f0      	b.n	1f42 <getopt+0x182>
			state->place = EMSG;
    1f60:	4a28      	ldr	r2, [pc, #160]	; (2004 <getopt+0x244>)
    1f62:	6162      	str	r2, [r4, #20]
			if (*ostr == ':') {
    1f64:	782a      	ldrb	r2, [r5, #0]
    1f66:	2a3a      	cmp	r2, #58	; 0x3a
    1f68:	d040      	beq.n	1fec <getopt+0x22c>
			if (state->opterr) {
    1f6a:	6822      	ldr	r2, [r4, #0]
    1f6c:	b3ca      	cbz	r2, 1fe2 <getopt+0x222>
				LOG_ERR("option requires an argument -- %c",
    1f6e:	4a26      	ldr	r2, [pc, #152]	; (2008 <getopt+0x248>)
    1f70:	6812      	ldr	r2, [r2, #0]
    1f72:	f012 0f07 	tst.w	r2, #7
    1f76:	d034      	beq.n	1fe2 <getopt+0x222>
    1f78:	466d      	mov	r5, sp
    1f7a:	b088      	sub	sp, #32
    1f7c:	4669      	mov	r1, sp
    1f7e:	f111 0210 	adds.w	r2, r1, #16
    1f82:	d038      	beq.n	1ff6 <getopt+0x236>
    1f84:	200c      	movs	r0, #12
    1f86:	b14a      	cbz	r2, 1f9c <getopt+0x1dc>
    1f88:	4606      	mov	r6, r0
    1f8a:	2804      	cmp	r0, #4
    1f8c:	dd03      	ble.n	1f96 <getopt+0x1d6>
    1f8e:	f8df c080 	ldr.w	ip, [pc, #128]	; 2010 <getopt+0x250>
    1f92:	f8c1 c014 	str.w	ip, [r1, #20]
    1f96:	2e08      	cmp	r6, #8
    1f98:	dd00      	ble.n	1f9c <getopt+0x1dc>
    1f9a:	618b      	str	r3, [r1, #24]
    1f9c:	280b      	cmp	r0, #11
    1f9e:	dd2d      	ble.n	1ffc <getopt+0x23c>
    1fa0:	230c      	movs	r3, #12
    1fa2:	b13a      	cbz	r2, 1fb4 <getopt+0x1f4>
    1fa4:	2003      	movs	r0, #3
    1fa6:	7138      	strb	r0, [r7, #4]
    1fa8:	2000      	movs	r0, #0
    1faa:	7178      	strb	r0, [r7, #5]
    1fac:	71b8      	strb	r0, [r7, #6]
    1fae:	71f8      	strb	r0, [r7, #7]
    1fb0:	6878      	ldr	r0, [r7, #4]
    1fb2:	6108      	str	r0, [r1, #16]
    1fb4:	2100      	movs	r1, #0
    1fb6:	f36f 0100 	bfc	r1, #0, #1
    1fba:	f36f 0141 	bfc	r1, #1, #1
    1fbe:	f36f 0182 	bfc	r1, #2, #1
    1fc2:	f36f 01c5 	bfc	r1, #3, #3
    1fc6:	2001      	movs	r0, #1
    1fc8:	f360 1188 	bfi	r1, r0, #6, #3
    1fcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
    1fd0:	f363 2153 	bfi	r1, r3, #9, #11
    1fd4:	f36f 511f 	bfc	r1, #20, #12
    1fd8:	2300      	movs	r3, #0
    1fda:	480b      	ldr	r0, [pc, #44]	; (2008 <getopt+0x248>)
    1fdc:	f002 fc9e 	bl	491c <z_impl_z_log_msg_static_create>
    1fe0:	46ad      	mov	sp, r5
			z_getopt_global_state_update(state);
    1fe2:	4620      	mov	r0, r4
    1fe4:	f000 f816 	bl	2014 <z_getopt_global_state_update>
			return BADCH;
    1fe8:	203f      	movs	r0, #63	; 0x3f
    1fea:	e727      	b.n	1e3c <getopt+0x7c>
				z_getopt_global_state_update(state);
    1fec:	4620      	mov	r0, r4
    1fee:	f000 f811 	bl	2014 <z_getopt_global_state_update>
				return BADARG;
    1ff2:	203a      	movs	r0, #58	; 0x3a
    1ff4:	e722      	b.n	1e3c <getopt+0x7c>
				LOG_ERR("option requires an argument -- %c",
    1ff6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    1ffa:	e7c4      	b.n	1f86 <getopt+0x1c6>
    1ffc:	f06f 031b 	mvn.w	r3, #27
    2000:	e7cf      	b.n	1fa2 <getopt+0x1e2>
    2002:	bf00      	nop
    2004:	000165a8 	.word	0x000165a8
    2008:	200002e4 	.word	0x200002e4
    200c:	00015a2c 	.word	0x00015a2c
    2010:	00015a44 	.word	0x00015a44

00002014 <z_getopt_global_state_update>:
/* This function is not thread safe. All threads using getopt are calling
 * this function.
 */
void z_getopt_global_state_update(struct getopt_state *state)
{
	opterr = state->opterr;
    2014:	6802      	ldr	r2, [r0, #0]
    2016:	4b07      	ldr	r3, [pc, #28]	; (2034 <z_getopt_global_state_update+0x20>)
    2018:	601a      	str	r2, [r3, #0]
	optind = state->optind;
    201a:	6842      	ldr	r2, [r0, #4]
    201c:	4b06      	ldr	r3, [pc, #24]	; (2038 <z_getopt_global_state_update+0x24>)
    201e:	601a      	str	r2, [r3, #0]
	optopt = state->optopt;
    2020:	6882      	ldr	r2, [r0, #8]
    2022:	4b06      	ldr	r3, [pc, #24]	; (203c <z_getopt_global_state_update+0x28>)
    2024:	601a      	str	r2, [r3, #0]
	optreset = state->optreset;
    2026:	68c2      	ldr	r2, [r0, #12]
    2028:	4b05      	ldr	r3, [pc, #20]	; (2040 <z_getopt_global_state_update+0x2c>)
    202a:	601a      	str	r2, [r3, #0]
	optarg = state->optarg;
    202c:	6902      	ldr	r2, [r0, #16]
    202e:	4b05      	ldr	r3, [pc, #20]	; (2044 <z_getopt_global_state_update+0x30>)
    2030:	601a      	str	r2, [r3, #0]
}
    2032:	4770      	bx	lr
    2034:	20000038 	.word	0x20000038
    2038:	20000034 	.word	0x20000034
    203c:	2000114c 	.word	0x2000114c
    2040:	20001148 	.word	0x20001148
    2044:	20001144 	.word	0x20001144

00002048 <getopt_state_get>:
		}
	}
#endif
	/* If not a shell thread return a common pointer */
	return &m_getopt_common_state;
}
    2048:	4800      	ldr	r0, [pc, #0]	; (204c <getopt_state_get+0x4>)
    204a:	4770      	bx	lr
    204c:	2000001c 	.word	0x2000001c

00002050 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    2050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2054:	b091      	sub	sp, #68	; 0x44
    2056:	9205      	str	r2, [sp, #20]
    2058:	9302      	str	r3, [sp, #8]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    205a:	4613      	mov	r3, r2
    205c:	f002 0204 	and.w	r2, r2, #4
    2060:	9200      	str	r2, [sp, #0]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    2062:	f3c3 02c2 	ubfx	r2, r3, #3, #3
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    2066:	f010 0303 	ands.w	r3, r0, #3
    206a:	9301      	str	r3, [sp, #4]
    206c:	f040 8223 	bne.w	24b6 <cbvprintf_package+0x466>
    2070:	4607      	mov	r7, r0
    2072:	468a      	mov	sl, r1
    2074:	3201      	adds	r2, #1
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    2076:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    2078:	2800      	cmp	r0, #0
    207a:	d047      	beq.n	210c <cbvprintf_package+0xbc>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    207c:	b127      	cbz	r7, 2088 <cbvprintf_package+0x38>
    207e:	1be3      	subs	r3, r4, r7
    2080:	3304      	adds	r3, #4
    2082:	4553      	cmp	r3, sl
    2084:	f200 821a 	bhi.w	24bc <cbvprintf_package+0x46c>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
    2088:	9b02      	ldr	r3, [sp, #8]
    208a:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    208c:	9b01      	ldr	r3, [sp, #4]
    208e:	9304      	str	r3, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    2090:	9306      	str	r3, [sp, #24]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    2092:	9303      	str	r3, [sp, #12]
	bool parsing = false;
    2094:	2600      	movs	r6, #0
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    2096:	f04f 3bff 	mov.w	fp, #4294967295
	align = VA_STACK_ALIGN(char *);
    209a:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
    209e:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
    20a0:	b10f      	cbz	r7, 20a6 <cbvprintf_package+0x56>
				*(const char **)buf = s;
    20a2:	9b02      	ldr	r3, [sp, #8]
    20a4:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    20a6:	1e53      	subs	r3, r2, #1
    20a8:	9307      	str	r3, [sp, #28]
    20aa:	2a00      	cmp	r2, #0
    20ac:	f340 815f 	ble.w	236e <cbvprintf_package+0x31e>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
    20b0:	9b05      	ldr	r3, [sp, #20]
    20b2:	f013 0202 	ands.w	r2, r3, #2
    20b6:	d026      	beq.n	2106 <cbvprintf_package+0xb6>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    20b8:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    20ba:	1be1      	subs	r1, r4, r7
    20bc:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    20be:	b11a      	cbz	r2, 20c8 <cbvprintf_package+0x78>
    20c0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    20c4:	f080 8200 	bcs.w	24c8 <cbvprintf_package+0x478>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    20c8:	9903      	ldr	r1, [sp, #12]
    20ca:	290f      	cmp	r1, #15
    20cc:	f200 81ff 	bhi.w	24ce <cbvprintf_package+0x47e>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
    20d0:	2f00      	cmp	r7, #0
    20d2:	f000 8164 	beq.w	239e <cbvprintf_package+0x34e>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
    20d6:	b2db      	uxtb	r3, r3
    20d8:	f101 0240 	add.w	r2, r1, #64	; 0x40
    20dc:	446a      	add	r2, sp
    20de:	f802 3c10 	strb.w	r3, [r2, #-16]
					str_ptr_arg[s_idx] = arg_idx;
    20e2:	f802 bc20 	strb.w	fp, [r2, #-32]
					if (is_ro) {
    20e6:	2800      	cmp	r0, #0
    20e8:	f000 8155 	beq.w	2396 <cbvprintf_package+0x346>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    20ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
    20f0:	f101 0240 	add.w	r2, r1, #64	; 0x40
    20f4:	446a      	add	r2, sp
    20f6:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
    20fa:	9b04      	ldr	r3, [sp, #16]
    20fc:	3301      	adds	r3, #1
    20fe:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
    2100:	9b03      	ldr	r3, [sp, #12]
    2102:	3301      	adds	r3, #1
    2104:	9303      	str	r3, [sp, #12]
			}
			buf += sizeof(char *);
    2106:	3404      	adds	r4, #4

			is_str_arg = false;
    2108:	2200      	movs	r2, #0
    210a:	e03d      	b.n	2188 <cbvprintf_package+0x138>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    210c:	f001 0a07 	and.w	sl, r1, #7
    2110:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    2112:	f1ca 0a08 	rsb	sl, sl, #8
    2116:	e7b1      	b.n	207c <cbvprintf_package+0x2c>
				parsing = false;
    2118:	2600      	movs	r6, #0
    211a:	e034      	b.n	2186 <cbvprintf_package+0x136>
    211c:	2600      	movs	r6, #0
    211e:	e032      	b.n	2186 <cbvprintf_package+0x136>
    2120:	2600      	movs	r6, #0
    2122:	e030      	b.n	2186 <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(intmax_t);
    2124:	f04f 0808 	mov.w	r8, #8
				size = sizeof(intmax_t);
    2128:	46c1      	mov	r9, r8
    212a:	e02c      	b.n	2186 <cbvprintf_package+0x136>
				if (*fmt == '%') {
    212c:	2925      	cmp	r1, #37	; 0x25
    212e:	d12a      	bne.n	2186 <cbvprintf_package+0x136>
					arg_idx++;
    2130:	f10b 0b01 	add.w	fp, fp, #1
					parsing = true;
    2134:	2601      	movs	r6, #1
					align = VA_STACK_ALIGN(int);
    2136:	f04f 0804 	mov.w	r8, #4
					size = sizeof(int);
    213a:	46c1      	mov	r9, r8
				continue;
    213c:	e023      	b.n	2186 <cbvprintf_package+0x136>
			switch (*fmt) {
    213e:	2947      	cmp	r1, #71	; 0x47
    2140:	d8ec      	bhi.n	211c <cbvprintf_package+0xcc>
    2142:	292a      	cmp	r1, #42	; 0x2a
    2144:	d312      	bcc.n	216c <cbvprintf_package+0x11c>
    2146:	392a      	subs	r1, #42	; 0x2a
    2148:	b2c9      	uxtb	r1, r1
    214a:	2001      	movs	r0, #1
    214c:	fa00 f101 	lsl.w	r1, r0, r1
    2150:	f64f 70da 	movw	r0, #65498	; 0xffda
    2154:	4201      	tst	r1, r0
    2156:	d116      	bne.n	2186 <cbvprintf_package+0x136>
    2158:	f011 5f62 	tst.w	r1, #947912704	; 0x38800000
    215c:	f040 80c4 	bne.w	22e8 <cbvprintf_package+0x298>
    2160:	f011 0f01 	tst.w	r1, #1
    2164:	f040 808e 	bne.w	2284 <cbvprintf_package+0x234>
				parsing = false;
    2168:	2600      	movs	r6, #0
    216a:	e00c      	b.n	2186 <cbvprintf_package+0x136>
			switch (*fmt) {
    216c:	2925      	cmp	r1, #37	; 0x25
    216e:	d103      	bne.n	2178 <cbvprintf_package+0x128>
				arg_idx--;
    2170:	f10b 3bff 	add.w	fp, fp, #4294967295
				parsing = false;
    2174:	2600      	movs	r6, #0
				continue;
    2176:	e006      	b.n	2186 <cbvprintf_package+0x136>
			switch (*fmt) {
    2178:	d901      	bls.n	217e <cbvprintf_package+0x12e>
				parsing = false;
    217a:	2600      	movs	r6, #0
    217c:	e003      	b.n	2186 <cbvprintf_package+0x136>
			switch (*fmt) {
    217e:	2920      	cmp	r1, #32
    2180:	d001      	beq.n	2186 <cbvprintf_package+0x136>
    2182:	2923      	cmp	r1, #35	; 0x23
    2184:	d1cc      	bne.n	2120 <cbvprintf_package+0xd0>
				parsing = false;
    2186:	461d      	mov	r5, r3
			if (*++fmt == '\0') {
    2188:	1c6b      	adds	r3, r5, #1
    218a:	7869      	ldrb	r1, [r5, #1]
    218c:	2900      	cmp	r1, #0
    218e:	f000 811d 	beq.w	23cc <cbvprintf_package+0x37c>
			if (!parsing) {
    2192:	2e00      	cmp	r6, #0
    2194:	d0ca      	beq.n	212c <cbvprintf_package+0xdc>
			switch (*fmt) {
    2196:	297a      	cmp	r1, #122	; 0x7a
    2198:	d8be      	bhi.n	2118 <cbvprintf_package+0xc8>
    219a:	294c      	cmp	r1, #76	; 0x4c
    219c:	d3cf      	bcc.n	213e <cbvprintf_package+0xee>
    219e:	394c      	subs	r1, #76	; 0x4c
    21a0:	292e      	cmp	r1, #46	; 0x2e
    21a2:	d861      	bhi.n	2268 <cbvprintf_package+0x218>
    21a4:	a001      	add	r0, pc, #4	; (adr r0, 21ac <cbvprintf_package+0x15c>)
    21a6:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    21aa:	bf00      	nop
    21ac:	00002187 	.word	0x00002187
    21b0:	00002269 	.word	0x00002269
    21b4:	00002269 	.word	0x00002269
    21b8:	00002269 	.word	0x00002269
    21bc:	00002269 	.word	0x00002269
    21c0:	00002269 	.word	0x00002269
    21c4:	00002269 	.word	0x00002269
    21c8:	00002269 	.word	0x00002269
    21cc:	00002269 	.word	0x00002269
    21d0:	00002269 	.word	0x00002269
    21d4:	00002269 	.word	0x00002269
    21d8:	00002269 	.word	0x00002269
    21dc:	0000227d 	.word	0x0000227d
    21e0:	00002269 	.word	0x00002269
    21e4:	00002269 	.word	0x00002269
    21e8:	00002269 	.word	0x00002269
    21ec:	00002269 	.word	0x00002269
    21f0:	00002269 	.word	0x00002269
    21f4:	00002269 	.word	0x00002269
    21f8:	00002269 	.word	0x00002269
    21fc:	00002269 	.word	0x00002269
    2200:	000022e9 	.word	0x000022e9
    2204:	00002269 	.word	0x00002269
    2208:	0000227d 	.word	0x0000227d
    220c:	0000227d 	.word	0x0000227d
    2210:	000022e9 	.word	0x000022e9
    2214:	000022e9 	.word	0x000022e9
    2218:	000022e9 	.word	0x000022e9
    221c:	00002187 	.word	0x00002187
    2220:	0000227d 	.word	0x0000227d
    2224:	00002125 	.word	0x00002125
    2228:	00002269 	.word	0x00002269
    222c:	00002187 	.word	0x00002187
    2230:	00002269 	.word	0x00002269
    2234:	00002347 	.word	0x00002347
    2238:	0000227d 	.word	0x0000227d
    223c:	00002347 	.word	0x00002347
    2240:	00002269 	.word	0x00002269
    2244:	00002269 	.word	0x00002269
    2248:	00002351 	.word	0x00002351
    224c:	00002275 	.word	0x00002275
    2250:	0000227d 	.word	0x0000227d
    2254:	00002269 	.word	0x00002269
    2258:	00002269 	.word	0x00002269
    225c:	0000227d 	.word	0x0000227d
    2260:	00002269 	.word	0x00002269
    2264:	0000226d 	.word	0x0000226d
				parsing = false;
    2268:	2600      	movs	r6, #0
    226a:	e78c      	b.n	2186 <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(size_t);
    226c:	f04f 0804 	mov.w	r8, #4
				size = sizeof(size_t);
    2270:	46c1      	mov	r9, r8
				continue;
    2272:	e788      	b.n	2186 <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(ptrdiff_t);
    2274:	f04f 0804 	mov.w	r8, #4
				size = sizeof(ptrdiff_t);
    2278:	46c1      	mov	r9, r8
				continue;
    227a:	e784      	b.n	2186 <cbvprintf_package+0x136>
				if (fmt[-1] == 'l') {
    227c:	7829      	ldrb	r1, [r5, #0]
    227e:	296c      	cmp	r1, #108	; 0x6c
    2280:	d024      	beq.n	22cc <cbvprintf_package+0x27c>
				parsing = false;
    2282:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
    2284:	4444      	add	r4, r8
    2286:	3c01      	subs	r4, #1
    2288:	f1c8 0100 	rsb	r1, r8, #0
    228c:	400c      	ands	r4, r1
    228e:	4620      	mov	r0, r4
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    2290:	b127      	cbz	r7, 229c <cbvprintf_package+0x24c>
    2292:	1be1      	subs	r1, r4, r7
    2294:	4449      	add	r1, r9
    2296:	4551      	cmp	r1, sl
    2298:	f200 8113 	bhi.w	24c2 <cbvprintf_package+0x472>
		if (is_str_arg) {
    229c:	2a00      	cmp	r2, #0
    229e:	d15d      	bne.n	235c <cbvprintf_package+0x30c>
		} else if (size == sizeof(int)) {
    22a0:	f1b9 0f04 	cmp.w	r9, #4
    22a4:	f000 808a 	beq.w	23bc <cbvprintf_package+0x36c>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
    22a8:	f1b9 0f08 	cmp.w	r9, #8
    22ac:	f040 8112 	bne.w	24d4 <cbvprintf_package+0x484>
			long long v = va_arg(ap, long long);
    22b0:	991a      	ldr	r1, [sp, #104]	; 0x68
    22b2:	3107      	adds	r1, #7
    22b4:	f021 0107 	bic.w	r1, r1, #7
    22b8:	f101 0008 	add.w	r0, r1, #8
    22bc:	901a      	str	r0, [sp, #104]	; 0x68
    22be:	e9d1 0100 	ldrd	r0, r1, [r1]

			if (buf0 != NULL) {
    22c2:	b10f      	cbz	r7, 22c8 <cbvprintf_package+0x278>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
    22c4:	e9c4 0100 	strd	r0, r1, [r4]
				}
			}
			buf += sizeof(long long);
    22c8:	3408      	adds	r4, #8
    22ca:	e75c      	b.n	2186 <cbvprintf_package+0x136>
					if (fmt[-2] == 'l') {
    22cc:	f813 1c02 	ldrb.w	r1, [r3, #-2]
    22d0:	296c      	cmp	r1, #108	; 0x6c
    22d2:	d004      	beq.n	22de <cbvprintf_package+0x28e>
				parsing = false;
    22d4:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long);
    22d6:	f04f 0804 	mov.w	r8, #4
						size = sizeof(long);
    22da:	46c1      	mov	r9, r8
    22dc:	e7d2      	b.n	2284 <cbvprintf_package+0x234>
				parsing = false;
    22de:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long long);
    22e0:	f04f 0808 	mov.w	r8, #8
						size = sizeof(long long);
    22e4:	46c1      	mov	r9, r8
    22e6:	e7cd      	b.n	2284 <cbvprintf_package+0x234>
				if (fmt[-1] == 'L') {
    22e8:	7829      	ldrb	r1, [r5, #0]
    22ea:	294c      	cmp	r1, #76	; 0x4c
    22ec:	d01b      	beq.n	2326 <cbvprintf_package+0x2d6>
					v.d = va_arg(ap, double);
    22ee:	991a      	ldr	r1, [sp, #104]	; 0x68
    22f0:	3107      	adds	r1, #7
    22f2:	f021 0107 	bic.w	r1, r1, #7
    22f6:	f101 0008 	add.w	r0, r1, #8
    22fa:	901a      	str	r0, [sp, #104]	; 0x68
    22fc:	e9d1 0100 	ldrd	r0, r1, [r1]
				buf = (void *) ROUND_UP(buf, align);
    2300:	3407      	adds	r4, #7
    2302:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
    2306:	b147      	cbz	r7, 231a <cbvprintf_package+0x2ca>
					if (BUF_OFFSET + size > len) {
    2308:	1be6      	subs	r6, r4, r7
    230a:	3608      	adds	r6, #8
    230c:	4556      	cmp	r6, sl
    230e:	d814      	bhi.n	233a <cbvprintf_package+0x2ea>
					} else if (fmt[-1] == 'L') {
    2310:	782d      	ldrb	r5, [r5, #0]
    2312:	2d4c      	cmp	r5, #76	; 0x4c
    2314:	d014      	beq.n	2340 <cbvprintf_package+0x2f0>
						*(double *)buf = v.d;
    2316:	e9c4 0100 	strd	r0, r1, [r4]
				buf += size;
    231a:	3408      	adds	r4, #8
				parsing = false;
    231c:	2600      	movs	r6, #0
				continue;
    231e:	f04f 0808 	mov.w	r8, #8
    2322:	46c1      	mov	r9, r8
    2324:	e72f      	b.n	2186 <cbvprintf_package+0x136>
					v.ld = va_arg(ap, long double);
    2326:	991a      	ldr	r1, [sp, #104]	; 0x68
    2328:	3107      	adds	r1, #7
    232a:	f021 0107 	bic.w	r1, r1, #7
    232e:	f101 0008 	add.w	r0, r1, #8
    2332:	901a      	str	r0, [sp, #104]	; 0x68
    2334:	e9d1 0100 	ldrd	r0, r1, [r1]
					size = sizeof(long double);
    2338:	e7e2      	b.n	2300 <cbvprintf_package+0x2b0>
						return -ENOSPC;
    233a:	f06f 001b 	mvn.w	r0, #27
    233e:	e0b7      	b.n	24b0 <cbvprintf_package+0x460>
						*(long double *)buf = v.ld;
    2340:	e9c4 0100 	strd	r0, r1, [r4]
    2344:	e7e9      	b.n	231a <cbvprintf_package+0x2ca>
				parsing = false;
    2346:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
    2348:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
    234c:	46c1      	mov	r9, r8
    234e:	e799      	b.n	2284 <cbvprintf_package+0x234>
				is_str_arg = true;
    2350:	4632      	mov	r2, r6
				parsing = false;
    2352:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
    2354:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
    2358:	46c1      	mov	r9, r8
    235a:	e793      	b.n	2284 <cbvprintf_package+0x234>
			s = va_arg(ap, char *);
    235c:	4604      	mov	r4, r0
    235e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    2360:	1d11      	adds	r1, r2, #4
    2362:	911a      	str	r1, [sp, #104]	; 0x68
    2364:	6812      	ldr	r2, [r2, #0]
    2366:	9202      	str	r2, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    2368:	9a07      	ldr	r2, [sp, #28]
			if (*++fmt == '\0') {
    236a:	461d      	mov	r5, r3
    236c:	e698      	b.n	20a0 <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    236e:	4b5f      	ldr	r3, [pc, #380]	; (24ec <cbvprintf_package+0x49c>)
    2370:	9a02      	ldr	r2, [sp, #8]
    2372:	429a      	cmp	r2, r3
    2374:	d304      	bcc.n	2380 <cbvprintf_package+0x330>
    2376:	4b5e      	ldr	r3, [pc, #376]	; (24f0 <cbvprintf_package+0x4a0>)
    2378:	429a      	cmp	r2, r3
    237a:	d30a      	bcc.n	2392 <cbvprintf_package+0x342>
    237c:	2300      	movs	r3, #0
    237e:	e000      	b.n	2382 <cbvprintf_package+0x332>
    2380:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    2382:	2b00      	cmp	r3, #0
    2384:	f47f ae94 	bne.w	20b0 <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
    2388:	9b05      	ldr	r3, [sp, #20]
    238a:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    238e:	2000      	movs	r0, #0
    2390:	e693      	b.n	20ba <cbvprintf_package+0x6a>
    2392:	2301      	movs	r3, #1
    2394:	e7f5      	b.n	2382 <cbvprintf_package+0x332>
						s_rw_cnt++;
    2396:	9b06      	ldr	r3, [sp, #24]
    2398:	3301      	adds	r3, #1
    239a:	9306      	str	r3, [sp, #24]
    239c:	e6b0      	b.n	2100 <cbvprintf_package+0xb0>
				} else if (is_ro) {
    239e:	b110      	cbz	r0, 23a6 <cbvprintf_package+0x356>
					len += 1;
    23a0:	f10a 0a01 	add.w	sl, sl, #1
    23a4:	e6ac      	b.n	2100 <cbvprintf_package+0xb0>
				} else if (rws_pos_en) {
    23a6:	9b00      	ldr	r3, [sp, #0]
    23a8:	b113      	cbz	r3, 23b0 <cbvprintf_package+0x360>
					len += 2;
    23aa:	f10a 0a02 	add.w	sl, sl, #2
    23ae:	e6a7      	b.n	2100 <cbvprintf_package+0xb0>
					len += strlen(s) + 1 + 1;
    23b0:	9802      	ldr	r0, [sp, #8]
    23b2:	f010 fc94 	bl	12cde <strlen>
    23b6:	1c83      	adds	r3, r0, #2
    23b8:	449a      	add	sl, r3
    23ba:	e6a1      	b.n	2100 <cbvprintf_package+0xb0>
			int v = va_arg(ap, int);
    23bc:	991a      	ldr	r1, [sp, #104]	; 0x68
    23be:	1d08      	adds	r0, r1, #4
    23c0:	901a      	str	r0, [sp, #104]	; 0x68
    23c2:	6809      	ldr	r1, [r1, #0]
			if (buf0 != NULL) {
    23c4:	b107      	cbz	r7, 23c8 <cbvprintf_package+0x378>
				*(int *)buf = v;
    23c6:	6021      	str	r1, [r4, #0]
			buf += sizeof(int);
    23c8:	3404      	adds	r4, #4
    23ca:	e6dc      	b.n	2186 <cbvprintf_package+0x136>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
    23cc:	1be3      	subs	r3, r4, r7
    23ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    23d2:	f080 8082 	bcs.w	24da <cbvprintf_package+0x48a>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
    23d6:	b197      	cbz	r7, 23fe <cbvprintf_package+0x3ae>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
    23d8:	2200      	movs	r2, #0
    23da:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    23dc:	089b      	lsrs	r3, r3, #2
    23de:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
    23e0:	9b00      	ldr	r3, [sp, #0]
    23e2:	b183      	cbz	r3, 2406 <cbvprintf_package+0x3b6>
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    23e4:	9b06      	ldr	r3, [sp, #24]
    23e6:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    23e8:	9b04      	ldr	r3, [sp, #16]
    23ea:	70bb      	strb	r3, [r7, #2]
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
    23ec:	bb1b      	cbnz	r3, 2436 <cbvprintf_package+0x3e6>
			/* retrieve the string pointer */
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
			/* clear the in-buffer pointer (less entropy if compressed) */
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
    23ee:	9d01      	ldr	r5, [sp, #4]
    23f0:	f8dd 900c 	ldr.w	r9, [sp, #12]
    23f4:	f8dd b010 	ldr.w	fp, [sp, #16]
    23f8:	f8dd 8008 	ldr.w	r8, [sp, #8]
    23fc:	e03b      	b.n	2476 <cbvprintf_package+0x426>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    23fe:	4453      	add	r3, sl
    2400:	f1a3 0008 	sub.w	r0, r3, #8
    2404:	e054      	b.n	24b0 <cbvprintf_package+0x460>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    2406:	9b06      	ldr	r3, [sp, #24]
    2408:	707b      	strb	r3, [r7, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    240a:	e7ed      	b.n	23e8 <cbvprintf_package+0x398>
		for (i = 0; i < s_idx; i++) {
    240c:	3301      	adds	r3, #1
    240e:	4298      	cmp	r0, r3
    2410:	d9ed      	bls.n	23ee <cbvprintf_package+0x39e>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    2412:	f103 0240 	add.w	r2, r3, #64	; 0x40
    2416:	446a      	add	r2, sp
    2418:	f812 1c10 	ldrb.w	r1, [r2, #-16]
    241c:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
    2420:	2a00      	cmp	r2, #0
    2422:	daf3      	bge.n	240c <cbvprintf_package+0x3bc>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    2424:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    2428:	1be2      	subs	r2, r4, r7
    242a:	3201      	adds	r2, #1
    242c:	4552      	cmp	r2, sl
    242e:	d857      	bhi.n	24e0 <cbvprintf_package+0x490>
			*buf++ = pos;
    2430:	f804 1b01 	strb.w	r1, [r4], #1
    2434:	e7ea      	b.n	240c <cbvprintf_package+0x3bc>
		for (i = 0; i < s_idx; i++) {
    2436:	9b01      	ldr	r3, [sp, #4]
    2438:	9803      	ldr	r0, [sp, #12]
    243a:	e7e8      	b.n	240e <cbvprintf_package+0x3be>
		if (rws_pos_en) {
    243c:	9b00      	ldr	r3, [sp, #0]
    243e:	b33b      	cbz	r3, 2490 <cbvprintf_package+0x440>
			*buf++ = str_ptr_arg[i];
    2440:	f105 0340 	add.w	r3, r5, #64	; 0x40
    2444:	446b      	add	r3, sp
    2446:	f813 3c20 	ldrb.w	r3, [r3, #-32]
    244a:	f804 3b01 	strb.w	r3, [r4], #1
			size = 0;
    244e:	9e01      	ldr	r6, [sp, #4]
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
    2450:	1be3      	subs	r3, r4, r7
    2452:	4433      	add	r3, r6
    2454:	3301      	adds	r3, #1
    2456:	4553      	cmp	r3, sl
    2458:	d845      	bhi.n	24e6 <cbvprintf_package+0x496>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
    245a:	f105 0340 	add.w	r3, r5, #64	; 0x40
    245e:	446b      	add	r3, sp
    2460:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    2464:	f804 3b01 	strb.w	r3, [r4], #1
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
    2468:	4632      	mov	r2, r6
    246a:	4641      	mov	r1, r8
    246c:	4620      	mov	r0, r4
    246e:	f010 fc8c 	bl	12d8a <memcpy>
		buf += size;
    2472:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
    2474:	3501      	adds	r5, #1
    2476:	45a9      	cmp	r9, r5
    2478:	d919      	bls.n	24ae <cbvprintf_package+0x45e>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    247a:	f1bb 0f00 	cmp.w	fp, #0
    247e:	d0dd      	beq.n	243c <cbvprintf_package+0x3ec>
    2480:	f105 0340 	add.w	r3, r5, #64	; 0x40
    2484:	446b      	add	r3, sp
    2486:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
    248a:	2b00      	cmp	r3, #0
    248c:	dad6      	bge.n	243c <cbvprintf_package+0x3ec>
    248e:	e7f1      	b.n	2474 <cbvprintf_package+0x424>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    2490:	f105 0340 	add.w	r3, r5, #64	; 0x40
    2494:	446b      	add	r3, sp
    2496:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    249a:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    249e:	2200      	movs	r2, #0
    24a0:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
    24a4:	4640      	mov	r0, r8
    24a6:	f010 fc1a 	bl	12cde <strlen>
    24aa:	1c46      	adds	r6, r0, #1
    24ac:	e7d0      	b.n	2450 <cbvprintf_package+0x400>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
    24ae:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    24b0:	b011      	add	sp, #68	; 0x44
    24b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
    24b6:	f06f 000d 	mvn.w	r0, #13
    24ba:	e7f9      	b.n	24b0 <cbvprintf_package+0x460>
		return -ENOSPC;
    24bc:	f06f 001b 	mvn.w	r0, #27
    24c0:	e7f6      	b.n	24b0 <cbvprintf_package+0x460>
			return -ENOSPC;
    24c2:	f06f 001b 	mvn.w	r0, #27
    24c6:	e7f3      	b.n	24b0 <cbvprintf_package+0x460>
					return -EINVAL;
    24c8:	f06f 0015 	mvn.w	r0, #21
    24cc:	e7f0      	b.n	24b0 <cbvprintf_package+0x460>
					return -EINVAL;
    24ce:	f06f 0015 	mvn.w	r0, #21
    24d2:	e7ed      	b.n	24b0 <cbvprintf_package+0x460>
			return -EINVAL;
    24d4:	f06f 0015 	mvn.w	r0, #21
    24d8:	e7ea      	b.n	24b0 <cbvprintf_package+0x460>
		return -EINVAL;
    24da:	f06f 0015 	mvn.w	r0, #21
    24de:	e7e7      	b.n	24b0 <cbvprintf_package+0x460>
				return -ENOSPC;
    24e0:	f06f 001b 	mvn.w	r0, #27
    24e4:	e7e4      	b.n	24b0 <cbvprintf_package+0x460>
			return -ENOSPC;
    24e6:	f06f 001b 	mvn.w	r0, #27
    24ea:	e7e1      	b.n	24b0 <cbvprintf_package+0x460>
    24ec:	00015078 	.word	0x00015078
    24f0:	00018de0 	.word	0x00018de0

000024f4 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    24f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    24f8:	b097      	sub	sp, #92	; 0x5c
    24fa:	af00      	add	r7, sp, #0
    24fc:	4683      	mov	fp, r0
    24fe:	61ba      	str	r2, [r7, #24]
    2500:	613b      	str	r3, [r7, #16]
	__ASSERT_NO_MSG(in_packaged != NULL);

	uint8_t *buf = in_packaged;
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
    2502:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    2506:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    250a:	623b      	str	r3, [r7, #32]
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    250c:	60f9      	str	r1, [r7, #12]
    250e:	b151      	cbz	r1, 2526 <cbprintf_package_convert+0x32>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
    2510:	f89b 6002 	ldrb.w	r6, [fp, #2]
    2514:	46b1      	mov	r9, r6
	ro_cpy = ros_nbr &&
    2516:	b156      	cbz	r6, 252e <cbprintf_package_convert+0x3a>
    2518:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    251c:	f013 0f01 	tst.w	r3, #1
    2520:	d111      	bne.n	2546 <cbprintf_package_convert+0x52>
    2522:	2300      	movs	r3, #0
    2524:	e004      	b.n	2530 <cbprintf_package_convert+0x3c>
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    2526:	f00c fc4b 	bl	edc0 <get_package_len>
    252a:	60f8      	str	r0, [r7, #12]
    252c:	e7f0      	b.n	2510 <cbprintf_package_convert+0x1c>
	ro_cpy = ros_nbr &&
    252e:	2300      	movs	r3, #0
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
    2530:	f89b 2003 	ldrb.w	r2, [fp, #3]
    2534:	627a      	str	r2, [r7, #36]	; 0x24
	rw_cpy = rws_nbr > 0 &&
    2536:	b142      	cbz	r2, 254a <cbprintf_package_convert+0x56>
    2538:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    253c:	f012 0f02 	tst.w	r2, #2
    2540:	d122      	bne.n	2588 <cbprintf_package_convert+0x94>
    2542:	2200      	movs	r2, #0
    2544:	e002      	b.n	254c <cbprintf_package_convert+0x58>
	ro_cpy = ros_nbr &&
    2546:	2301      	movs	r3, #1
    2548:	e7f2      	b.n	2530 <cbprintf_package_convert+0x3c>
	rw_cpy = rws_nbr > 0 &&
    254a:	2200      	movs	r2, #0

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
    254c:	b902      	cbnz	r2, 2550 <cbprintf_package_convert+0x5c>
    254e:	b1eb      	cbz	r3, 258c <cbprintf_package_convert+0x98>

	/* If we got here, it means that coping will be more complex and will be
	 * done with strings appending.
	 * Retrieve the size of the arg list.
	 */
	args_size = in_desc->len * sizeof(int);
    2550:	f89b 5000 	ldrb.w	r5, [fp]
    2554:	00aa      	lsls	r2, r5, #2
    2556:	60ba      	str	r2, [r7, #8]
	int out_len;

	/* Pointer to array with string locations. Array starts with read-only
	 * string locations.
	 */
	const char *fmt = *(const char **)(buf + sizeof(void *));
    2558:	f8db 2004 	ldr.w	r2, [fp, #4]
    255c:	617a      	str	r2, [r7, #20]
	uint8_t *str_pos = &buf[args_size];
    255e:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
	size_t strl_cnt = 0;

	/* If null destination, just calculate output length. */
	if (cb == NULL) {
    2562:	69ba      	ldr	r2, [r7, #24]
    2564:	b1f2      	cbz	r2, 25a4 <cbprintf_package_convert+0xb0>

	/* If read-only strings shall be appended to the output package copy
	 * their indexes to the local array, otherwise indicate that indexes
	 * shall remain in the output package.
	 */
	if (ro_cpy) {
    2566:	2b00      	cmp	r3, #0
    2568:	f040 810f 	bne.w	278a <cbprintf_package_convert+0x296>
		scpy_cnt = ros_nbr;
		keep_cnt = 0;
		dst = cpy_str_pos;
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    256c:	f1b9 0f00 	cmp.w	r9, #0
    2570:	f000 811a 	beq.w	27a8 <cbprintf_package_convert+0x2b4>
    2574:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    2578:	f013 0f04 	tst.w	r3, #4
    257c:	f040 8118 	bne.w	27b0 <cbprintf_package_convert+0x2bc>
		keep_cnt = ros_nbr;
		dst = keep_str_pos;
	} else {
		scpy_cnt = 0;
		keep_cnt = 0;
		dst = NULL;
    2580:	2000      	movs	r0, #0
		keep_cnt = 0;
    2582:	61f8      	str	r0, [r7, #28]
		scpy_cnt = 0;
    2584:	4606      	mov	r6, r0
    2586:	e104      	b.n	2792 <cbprintf_package_convert+0x29e>
	rw_cpy = rws_nbr > 0 &&
    2588:	2201      	movs	r2, #1
    258a:	e7df      	b.n	254c <cbprintf_package_convert+0x58>
		if (cb) {
    258c:	69bb      	ldr	r3, [r7, #24]
    258e:	b11b      	cbz	r3, 2598 <cbprintf_package_convert+0xa4>
			cb(in_packaged, in_len, ctx);
    2590:	693a      	ldr	r2, [r7, #16]
    2592:	68f9      	ldr	r1, [r7, #12]
    2594:	4658      	mov	r0, fp
    2596:	4798      	blx	r3
		return in_len;
    2598:	68fc      	ldr	r4, [r7, #12]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    259a:	4620      	mov	r0, r4
    259c:	375c      	adds	r7, #92	; 0x5c
    259e:	46bd      	mov	sp, r7
    25a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_len = (int)in_len;
    25a4:	68fc      	ldr	r4, [r7, #12]
		if (ro_cpy) {
    25a6:	bb23      	cbnz	r3, 25f2 <cbprintf_package_convert+0xfe>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    25a8:	f1b9 0f00 	cmp.w	r9, #0
    25ac:	d026      	beq.n	25fc <cbprintf_package_convert+0x108>
    25ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    25b2:	f013 0804 	ands.w	r8, r3, #4
    25b6:	d022      	beq.n	25fe <cbprintf_package_convert+0x10a>
				str_pos += ros_nbr;
    25b8:	444d      	add	r5, r9
	size_t strl_cnt = 0;
    25ba:	f04f 0800 	mov.w	r8, #0
    25be:	e01e      	b.n	25fe <cbprintf_package_convert+0x10a>
				out_len += len;
    25c0:	4404      	add	r4, r0
				str_pos++;
    25c2:	3501      	adds	r5, #1
			for (unsigned int i = 0; i < ros_nbr; i++) {
    25c4:	3601      	adds	r6, #1
    25c6:	454e      	cmp	r6, r9
    25c8:	d219      	bcs.n	25fe <cbprintf_package_convert+0x10a>
				const char *str = *(const char **)&buf32[*str_pos];
    25ca:	782a      	ldrb	r2, [r5, #0]
				int len = append_string(cb, NULL, str, 0);
    25cc:	2300      	movs	r3, #0
    25ce:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
    25d2:	4619      	mov	r1, r3
    25d4:	69b8      	ldr	r0, [r7, #24]
    25d6:	f00c fc08 	bl	edea <append_string>
				if (strl && strl_cnt < strl_len) {
    25da:	f1ba 0f00 	cmp.w	sl, #0
    25de:	d0ef      	beq.n	25c0 <cbprintf_package_convert+0xcc>
    25e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    25e4:	4598      	cmp	r8, r3
    25e6:	d2eb      	bcs.n	25c0 <cbprintf_package_convert+0xcc>
					strl[strl_cnt++] = (uint16_t)len;
    25e8:	f82a 0018 	strh.w	r0, [sl, r8, lsl #1]
    25ec:	f108 0801 	add.w	r8, r8, #1
    25f0:	e7e6      	b.n	25c0 <cbprintf_package_convert+0xcc>
			for (unsigned int i = 0; i < ros_nbr; i++) {
    25f2:	2600      	movs	r6, #0
	size_t strl_cnt = 0;
    25f4:	46b0      	mov	r8, r6
    25f6:	f8d7 a084 	ldr.w	sl, [r7, #132]	; 0x84
    25fa:	e7e4      	b.n	25c6 <cbprintf_package_convert+0xd2>
    25fc:	46c8      	mov	r8, r9
		bool drop_ro_str_pos = !(flags &
    25fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    2602:	f003 0305 	and.w	r3, r3, #5
    2606:	60fb      	str	r3, [r7, #12]
		for (unsigned int i = 0; i < rws_nbr; i++) {
    2608:	f04f 0a00 	mov.w	sl, #0
    260c:	f8c7 8010 	str.w	r8, [r7, #16]
    2610:	46a0      	mov	r8, r4
    2612:	f8c7 b01c 	str.w	fp, [r7, #28]
    2616:	f8d7 b004 	ldr.w	fp, [r7, #4]
    261a:	e0a0      	b.n	275e <cbprintf_package_convert+0x26a>
    261c:	2500      	movs	r5, #0
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    261e:	6a3b      	ldr	r3, [r7, #32]
    2620:	b97b      	cbnz	r3, 2642 <cbprintf_package_convert+0x14e>
			if (is_ro) {
    2622:	2d00      	cmp	r5, #0
    2624:	d07d      	beq.n	2722 <cbprintf_package_convert+0x22e>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    2626:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    262a:	f013 0f01 	tst.w	r3, #1
    262e:	d17d      	bne.n	272c <cbprintf_package_convert+0x238>
					out_len -= drop_ro_str_pos ? 2 : 1;
    2630:	68fb      	ldr	r3, [r7, #12]
    2632:	2b00      	cmp	r3, #0
    2634:	d173      	bne.n	271e <cbprintf_package_convert+0x22a>
    2636:	2302      	movs	r3, #2
    2638:	eba8 0803 	sub.w	r8, r8, r3
    263c:	e08c      	b.n	2758 <cbprintf_package_convert+0x264>
    263e:	2501      	movs	r5, #1
    2640:	e7ed      	b.n	261e <cbprintf_package_convert+0x12a>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    2642:	4649      	mov	r1, r9
    2644:	6978      	ldr	r0, [r7, #20]
    2646:	f00c fc17 	bl	ee78 <is_ptr>
    264a:	2800      	cmp	r0, #0
    264c:	d0e9      	beq.n	2622 <cbprintf_package_convert+0x12e>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    264e:	4bbb      	ldr	r3, [pc, #748]	; (293c <cbprintf_package_convert+0x448>)
    2650:	681b      	ldr	r3, [r3, #0]
    2652:	f013 0f06 	tst.w	r3, #6
    2656:	d040      	beq.n	26da <cbprintf_package_convert+0x1e6>
    2658:	466c      	mov	r4, sp
    265a:	2300      	movs	r3, #0
    265c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    2660:	2302      	movs	r3, #2
    2662:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    2666:	b08a      	sub	sp, #40	; 0x28
    2668:	4669      	mov	r1, sp
    266a:	f111 0210 	adds.w	r2, r1, #16
    266e:	d037      	beq.n	26e0 <cbprintf_package_convert+0x1ec>
    2670:	2512      	movs	r5, #18
    2672:	b11a      	cbz	r2, 267c <cbprintf_package_convert+0x188>
    2674:	2d04      	cmp	r5, #4
    2676:	dd01      	ble.n	267c <cbprintf_package_convert+0x188>
    2678:	4bb1      	ldr	r3, [pc, #708]	; (2940 <cbprintf_package_convert+0x44c>)
    267a:	614b      	str	r3, [r1, #20]
    267c:	2300      	movs	r3, #0
    267e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    2682:	2302      	movs	r3, #2
    2684:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    2688:	bb6a      	cbnz	r2, 26e6 <cbprintf_package_convert+0x1f2>
    268a:	2d11      	cmp	r5, #17
    268c:	dd44      	ble.n	2718 <cbprintf_package_convert+0x224>
    268e:	2312      	movs	r3, #18
    2690:	b162      	cbz	r2, 26ac <cbprintf_package_convert+0x1b8>
    2692:	2004      	movs	r0, #4
    2694:	f887 002c 	strb.w	r0, [r7, #44]	; 0x2c
    2698:	2000      	movs	r0, #0
    269a:	f887 002d 	strb.w	r0, [r7, #45]	; 0x2d
    269e:	f887 002e 	strb.w	r0, [r7, #46]	; 0x2e
    26a2:	2001      	movs	r0, #1
    26a4:	f887 002f 	strb.w	r0, [r7, #47]	; 0x2f
    26a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    26aa:	6108      	str	r0, [r1, #16]
    26ac:	f36f 0b00 	bfc	fp, #0, #1
    26b0:	f36f 0b41 	bfc	fp, #1, #1
    26b4:	f36f 0b82 	bfc	fp, #2, #1
    26b8:	f36f 0bc5 	bfc	fp, #3, #3
    26bc:	2102      	movs	r1, #2
    26be:	f361 1b88 	bfi	fp, r1, #6, #3
    26c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
    26c6:	f363 2b53 	bfi	fp, r3, #9, #11
    26ca:	f36f 5b1f 	bfc	fp, #20, #12
    26ce:	2300      	movs	r3, #0
    26d0:	4659      	mov	r1, fp
    26d2:	489a      	ldr	r0, [pc, #616]	; (293c <cbprintf_package_convert+0x448>)
    26d4:	f002 f922 	bl	491c <z_impl_z_log_msg_static_create>
    26d8:	46a5      	mov	sp, r4
				out_len -= 2;
    26da:	f1a8 0802 	sub.w	r8, r8, #2
				continue;
    26de:	e03b      	b.n	2758 <cbprintf_package_convert+0x264>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    26e0:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    26e4:	e7c5      	b.n	2672 <cbprintf_package_convert+0x17e>
    26e6:	462b      	mov	r3, r5
    26e8:	2d08      	cmp	r5, #8
    26ea:	dd01      	ble.n	26f0 <cbprintf_package_convert+0x1fc>
    26ec:	6978      	ldr	r0, [r7, #20]
    26ee:	6188      	str	r0, [r1, #24]
    26f0:	2b0c      	cmp	r3, #12
    26f2:	dd01      	ble.n	26f8 <cbprintf_package_convert+0x204>
    26f4:	f8c1 901c 	str.w	r9, [r1, #28]
    26f8:	f101 0320 	add.w	r3, r1, #32
    26fc:	2000      	movs	r0, #0
    26fe:	2801      	cmp	r0, #1
    2700:	d8c3      	bhi.n	268a <cbprintf_package_convert+0x196>
    2702:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    2706:	f107 0e28 	add.w	lr, r7, #40	; 0x28
    270a:	44f4      	add	ip, lr
    270c:	f81c cc30 	ldrb.w	ip, [ip, #-48]
    2710:	f803 cb01 	strb.w	ip, [r3], #1
    2714:	3001      	adds	r0, #1
    2716:	e7f2      	b.n	26fe <cbprintf_package_convert+0x20a>
    2718:	f06f 031b 	mvn.w	r3, #27
    271c:	e7b8      	b.n	2690 <cbprintf_package_convert+0x19c>
					out_len -= drop_ro_str_pos ? 2 : 1;
    271e:	2301      	movs	r3, #1
    2720:	e78a      	b.n	2638 <cbprintf_package_convert+0x144>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    2722:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    2726:	f013 0f02 	tst.w	r3, #2
    272a:	d015      	beq.n	2758 <cbprintf_package_convert+0x264>
				len = append_string(cb, NULL, str, 0);
    272c:	2300      	movs	r3, #0
    272e:	4622      	mov	r2, r4
    2730:	4619      	mov	r1, r3
    2732:	69b8      	ldr	r0, [r7, #24]
    2734:	f00c fb59 	bl	edea <append_string>
				if (strl && strl_cnt < strl_len) {
    2738:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    273c:	b153      	cbz	r3, 2754 <cbprintf_package_convert+0x260>
    273e:	693b      	ldr	r3, [r7, #16]
    2740:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
    2744:	4293      	cmp	r3, r2
    2746:	d205      	bcs.n	2754 <cbprintf_package_convert+0x260>
					strl[strl_cnt++] = (uint16_t)len;
    2748:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    274c:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
    2750:	3301      	adds	r3, #1
    2752:	613b      	str	r3, [r7, #16]
				out_len += (len - 1);
    2754:	3801      	subs	r0, #1
    2756:	4480      	add	r8, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
    2758:	f10a 0a01 	add.w	sl, sl, #1
			uint8_t arg_pos = *str_pos++;
    275c:	4635      	mov	r5, r6
		for (unsigned int i = 0; i < rws_nbr; i++) {
    275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2760:	459a      	cmp	sl, r3
    2762:	d210      	bcs.n	2786 <cbprintf_package_convert+0x292>
			uint8_t arg_idx = *str_pos++;
    2764:	462e      	mov	r6, r5
    2766:	f816 9b02 	ldrb.w	r9, [r6], #2
			uint8_t arg_pos = *str_pos++;
    276a:	786b      	ldrb	r3, [r5, #1]
			const char *str = *(const char **)&buf32[arg_pos];
    276c:	69fa      	ldr	r2, [r7, #28]
    276e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    2772:	4b74      	ldr	r3, [pc, #464]	; (2944 <cbprintf_package_convert+0x450>)
    2774:	429c      	cmp	r4, r3
    2776:	f4ff af51 	bcc.w	261c <cbprintf_package_convert+0x128>
    277a:	4b73      	ldr	r3, [pc, #460]	; (2948 <cbprintf_package_convert+0x454>)
    277c:	429c      	cmp	r4, r3
    277e:	f4ff af5e 	bcc.w	263e <cbprintf_package_convert+0x14a>
    2782:	2500      	movs	r5, #0
    2784:	e74b      	b.n	261e <cbprintf_package_convert+0x12a>
    2786:	4644      	mov	r4, r8
    2788:	e707      	b.n	259a <cbprintf_package_convert+0xa6>
		dst = cpy_str_pos;
    278a:	f107 0044 	add.w	r0, r7, #68	; 0x44
		keep_cnt = 0;
    278e:	2300      	movs	r3, #0
    2790:	61fb      	str	r3, [r7, #28]
	if (dst) {
    2792:	b118      	cbz	r0, 279c <cbprintf_package_convert+0x2a8>
		memcpy(dst, str_pos, ros_nbr);
    2794:	464a      	mov	r2, r9
    2796:	4629      	mov	r1, r5
    2798:	f010 faf7 	bl	12d8a <memcpy>
	str_pos += ros_nbr;
    279c:	444d      	add	r5, r9
	for (unsigned int i = 0; i < rws_nbr; i++) {
    279e:	f04f 0800 	mov.w	r8, #0
    27a2:	f8c7 9004 	str.w	r9, [r7, #4]
    27a6:	e01e      	b.n	27e6 <cbprintf_package_convert+0x2f2>
		dst = NULL;
    27a8:	2000      	movs	r0, #0
		keep_cnt = 0;
    27aa:	61f8      	str	r0, [r7, #28]
		scpy_cnt = 0;
    27ac:	4606      	mov	r6, r0
    27ae:	e7f0      	b.n	2792 <cbprintf_package_convert+0x29e>
		keep_cnt = ros_nbr;
    27b0:	61fe      	str	r6, [r7, #28]
		dst = keep_str_pos;
    27b2:	f107 0034 	add.w	r0, r7, #52	; 0x34
		scpy_cnt = 0;
    27b6:	2600      	movs	r6, #0
    27b8:	e7eb      	b.n	2792 <cbprintf_package_convert+0x29e>
    27ba:	2500      	movs	r5, #0
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    27bc:	6a3b      	ldr	r3, [r7, #32]
    27be:	bb33      	cbnz	r3, 280e <cbprintf_package_convert+0x31a>
		if (is_ro) {
    27c0:	2d00      	cmp	r5, #0
    27c2:	d03b      	beq.n	283c <cbprintf_package_convert+0x348>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    27c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    27c8:	f013 0f01 	tst.w	r3, #1
    27cc:	d026      	beq.n	281c <cbprintf_package_convert+0x328>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    27ce:	1c73      	adds	r3, r6, #1
    27d0:	f106 0230 	add.w	r2, r6, #48	; 0x30
    27d4:	f107 0128 	add.w	r1, r7, #40	; 0x28
    27d8:	1856      	adds	r6, r2, r1
    27da:	f806 9c14 	strb.w	r9, [r6, #-20]
    27de:	b2de      	uxtb	r6, r3
	for (unsigned int i = 0; i < rws_nbr; i++) {
    27e0:	f108 0801 	add.w	r8, r8, #1
		uint8_t arg_pos = *str_pos++;
    27e4:	4625      	mov	r5, r4
	for (unsigned int i = 0; i < rws_nbr; i++) {
    27e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    27e8:	4598      	cmp	r8, r3
    27ea:	d24a      	bcs.n	2882 <cbprintf_package_convert+0x38e>
		uint8_t arg_idx = *str_pos++;
    27ec:	462c      	mov	r4, r5
    27ee:	f814 ab02 	ldrb.w	sl, [r4], #2
		uint8_t arg_pos = *str_pos++;
    27f2:	f895 9001 	ldrb.w	r9, [r5, #1]
		const char *str = *(const char **)&buf32[arg_pos];
    27f6:	f85b 3029 	ldr.w	r3, [fp, r9, lsl #2]
    27fa:	4a52      	ldr	r2, [pc, #328]	; (2944 <cbprintf_package_convert+0x450>)
    27fc:	4293      	cmp	r3, r2
    27fe:	d3dc      	bcc.n	27ba <cbprintf_package_convert+0x2c6>
    2800:	4a51      	ldr	r2, [pc, #324]	; (2948 <cbprintf_package_convert+0x454>)
    2802:	4293      	cmp	r3, r2
    2804:	d301      	bcc.n	280a <cbprintf_package_convert+0x316>
    2806:	2500      	movs	r5, #0
    2808:	e7d8      	b.n	27bc <cbprintf_package_convert+0x2c8>
    280a:	2501      	movs	r5, #1
    280c:	e7d6      	b.n	27bc <cbprintf_package_convert+0x2c8>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    280e:	4651      	mov	r1, sl
    2810:	6978      	ldr	r0, [r7, #20]
    2812:	f00c fb31 	bl	ee78 <is_ptr>
    2816:	2800      	cmp	r0, #0
    2818:	d0d2      	beq.n	27c0 <cbprintf_package_convert+0x2cc>
    281a:	e7e1      	b.n	27e0 <cbprintf_package_convert+0x2ec>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    281c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    2820:	f013 0f04 	tst.w	r3, #4
    2824:	d0dc      	beq.n	27e0 <cbprintf_package_convert+0x2ec>
				keep_str_pos[keep_cnt++] = arg_pos;
    2826:	69fa      	ldr	r2, [r7, #28]
    2828:	1c53      	adds	r3, r2, #1
    282a:	3230      	adds	r2, #48	; 0x30
    282c:	f107 0128 	add.w	r1, r7, #40	; 0x28
    2830:	440a      	add	r2, r1
    2832:	f802 9c24 	strb.w	r9, [r2, #-36]
    2836:	b2db      	uxtb	r3, r3
    2838:	61fb      	str	r3, [r7, #28]
    283a:	e7d1      	b.n	27e0 <cbprintf_package_convert+0x2ec>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    283c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    2840:	f013 0f02 	tst.w	r3, #2
    2844:	d009      	beq.n	285a <cbprintf_package_convert+0x366>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    2846:	1c73      	adds	r3, r6, #1
    2848:	f106 0230 	add.w	r2, r6, #48	; 0x30
    284c:	f107 0128 	add.w	r1, r7, #40	; 0x28
    2850:	1856      	adds	r6, r2, r1
    2852:	f806 9c14 	strb.w	r9, [r6, #-20]
    2856:	b2de      	uxtb	r6, r3
    2858:	e7c2      	b.n	27e0 <cbprintf_package_convert+0x2ec>
				keep_str_pos[keep_cnt++] = arg_idx;
    285a:	69f8      	ldr	r0, [r7, #28]
    285c:	1c43      	adds	r3, r0, #1
    285e:	f100 0130 	add.w	r1, r0, #48	; 0x30
    2862:	f107 0228 	add.w	r2, r7, #40	; 0x28
    2866:	188a      	adds	r2, r1, r2
    2868:	f802 ac24 	strb.w	sl, [r2, #-36]
				keep_str_pos[keep_cnt++] = arg_pos;
    286c:	4602      	mov	r2, r0
    286e:	3202      	adds	r2, #2
    2870:	b2d2      	uxtb	r2, r2
    2872:	61fa      	str	r2, [r7, #28]
    2874:	f107 0258 	add.w	r2, r7, #88	; 0x58
    2878:	fa52 f383 	uxtab	r3, r2, r3
    287c:	f803 9c24 	strb.w	r9, [r3, #-36]
    2880:	e7ae      	b.n	27e0 <cbprintf_package_convert+0x2ec>
	out_desc.len = in_desc->len;
    2882:	f8d7 9004 	ldr.w	r9, [r7, #4]
    2886:	f89b 3000 	ldrb.w	r3, [fp]
    288a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    288e:	f89b 3001 	ldrb.w	r3, [fp, #1]
    2892:	4433      	add	r3, r6
    2894:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    2898:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    289c:	f013 0f02 	tst.w	r3, #2
    28a0:	d10e      	bne.n	28c0 <cbprintf_package_convert+0x3cc>
    28a2:	69fb      	ldr	r3, [r7, #28]
    28a4:	f3c3 0347 	ubfx	r3, r3, #1, #8
    28a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    28ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    28b0:	f013 0f01 	tst.w	r3, #1
    28b4:	d106      	bne.n	28c4 <cbprintf_package_convert+0x3d0>
    28b6:	f013 0f04 	tst.w	r3, #4
    28ba:	d147      	bne.n	294c <cbprintf_package_convert+0x458>
    28bc:	2300      	movs	r3, #0
    28be:	e002      	b.n	28c6 <cbprintf_package_convert+0x3d2>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    28c0:	2300      	movs	r3, #0
    28c2:	e7f1      	b.n	28a8 <cbprintf_package_convert+0x3b4>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    28c4:	2300      	movs	r3, #0
    28c6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	struct cbprintf_package_desc in_desc_backup = *in_desc;
    28ca:	f8db 0000 	ldr.w	r0, [fp]
    28ce:	6338      	str	r0, [r7, #48]	; 0x30
	*in_desc = out_desc;
    28d0:	6d78      	ldr	r0, [r7, #84]	; 0x54
    28d2:	f8cb 0000 	str.w	r0, [fp]
	rv = cb(in_packaged, args_size, ctx);
    28d6:	f8d7 8010 	ldr.w	r8, [r7, #16]
    28da:	4642      	mov	r2, r8
    28dc:	68b9      	ldr	r1, [r7, #8]
    28de:	4658      	mov	r0, fp
    28e0:	f8d7 a018 	ldr.w	sl, [r7, #24]
    28e4:	47d0      	blx	sl
	if (rv < 0) {
    28e6:	1e04      	subs	r4, r0, #0
    28e8:	f6ff ae57 	blt.w	259a <cbprintf_package_convert+0xa6>
	*in_desc = in_desc_backup;
    28ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
    28ee:	f8cb 0000 	str.w	r0, [fp]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    28f2:	f8c7 8010 	str.w	r8, [r7, #16]
    28f6:	4642      	mov	r2, r8
    28f8:	69f9      	ldr	r1, [r7, #28]
    28fa:	f107 0034 	add.w	r0, r7, #52	; 0x34
    28fe:	47d0      	blx	sl
	if (rv < 0) {
    2900:	2800      	cmp	r0, #0
    2902:	db56      	blt.n	29b2 <cbprintf_package_convert+0x4be>
	out_len += rv;
    2904:	eb04 0800 	add.w	r8, r4, r0
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    2908:	68b9      	ldr	r1, [r7, #8]
    290a:	4449      	add	r1, r9
    290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    290e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
	rv = cb(str_pos, strs_len, ctx);
    2912:	f8d7 9010 	ldr.w	r9, [r7, #16]
    2916:	464a      	mov	r2, r9
    2918:	68fb      	ldr	r3, [r7, #12]
    291a:	1a59      	subs	r1, r3, r1
    291c:	4628      	mov	r0, r5
    291e:	47d0      	blx	sl
	if (rv < 0) {
    2920:	1e04      	subs	r4, r0, #0
    2922:	f6ff ae3a 	blt.w	259a <cbprintf_package_convert+0xa6>
	out_len += rv;
    2926:	eb08 0504 	add.w	r5, r8, r4
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    292a:	f04f 0800 	mov.w	r8, #0
    292e:	627e      	str	r6, [r7, #36]	; 0x24
    2930:	f8c7 b020 	str.w	fp, [r7, #32]
    2934:	4656      	mov	r6, sl
    2936:	f8d7 b084 	ldr.w	fp, [r7, #132]	; 0x84
    293a:	e01e      	b.n	297a <cbprintf_package_convert+0x486>
    293c:	200002c0 	.word	0x200002c0
    2940:	00015a70 	.word	0x00015a70
    2944:	00015078 	.word	0x00015078
    2948:	00018de0 	.word	0x00018de0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    294c:	69fb      	ldr	r3, [r7, #28]
    294e:	e7ba      	b.n	28c6 <cbprintf_package_convert+0x3d2>
		uint16_t str_len = strl ? strl[i] : 0;
    2950:	f04f 0a00 	mov.w	sl, #0
		rv = cb(&loc, 1, ctx);
    2954:	464a      	mov	r2, r9
    2956:	2101      	movs	r1, #1
    2958:	f107 002c 	add.w	r0, r7, #44	; 0x2c
    295c:	47b0      	blx	r6
		if (rv < 0) {
    295e:	2800      	cmp	r0, #0
    2960:	db29      	blt.n	29b6 <cbprintf_package_convert+0x4c2>
		out_len += rv;
    2962:	4405      	add	r5, r0
		rv = append_string(cb, ctx, str, str_len);
    2964:	4653      	mov	r3, sl
    2966:	4622      	mov	r2, r4
    2968:	4649      	mov	r1, r9
    296a:	4630      	mov	r0, r6
    296c:	f00c fa3d 	bl	edea <append_string>
		if (rv < 0) {
    2970:	2800      	cmp	r0, #0
    2972:	db22      	blt.n	29ba <cbprintf_package_convert+0x4c6>
		out_len += rv;
    2974:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    2976:	f108 0801 	add.w	r8, r8, #1
    297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    297c:	4598      	cmp	r8, r3
    297e:	d211      	bcs.n	29a4 <cbprintf_package_convert+0x4b0>
		uint8_t loc = cpy_str_pos[i];
    2980:	f108 0330 	add.w	r3, r8, #48	; 0x30
    2984:	f107 0228 	add.w	r2, r7, #40	; 0x28
    2988:	4413      	add	r3, r2
    298a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    298e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		const char *str = *(const char **)&buf32[loc];
    2992:	6a3a      	ldr	r2, [r7, #32]
    2994:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
    2998:	f1bb 0f00 	cmp.w	fp, #0
    299c:	d0d8      	beq.n	2950 <cbprintf_package_convert+0x45c>
    299e:	f83b a018 	ldrh.w	sl, [fp, r8, lsl #1]
    29a2:	e7d7      	b.n	2954 <cbprintf_package_convert+0x460>
	(void)cb(NULL, 0, ctx);
    29a4:	693a      	ldr	r2, [r7, #16]
    29a6:	2100      	movs	r1, #0
    29a8:	4608      	mov	r0, r1
    29aa:	69bb      	ldr	r3, [r7, #24]
    29ac:	4798      	blx	r3
	return out_len;
    29ae:	462c      	mov	r4, r5
    29b0:	e5f3      	b.n	259a <cbprintf_package_convert+0xa6>
		return rv;
    29b2:	4604      	mov	r4, r0
    29b4:	e5f1      	b.n	259a <cbprintf_package_convert+0xa6>
    29b6:	4604      	mov	r4, r0
    29b8:	e5ef      	b.n	259a <cbprintf_package_convert+0xa6>
    29ba:	4604      	mov	r4, r0
    29bc:	e5ed      	b.n	259a <cbprintf_package_convert+0xa6>
    29be:	bf00      	nop

000029c0 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    29c0:	4b01      	ldr	r3, [pc, #4]	; (29c8 <__printk_hook_install+0x8>)
    29c2:	6018      	str	r0, [r3, #0]
}
    29c4:	4770      	bx	lr
    29c6:	bf00      	nop
    29c8:	2000003c 	.word	0x2000003c

000029cc <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    29cc:	b510      	push	{r4, lr}
    29ce:	b086      	sub	sp, #24
    29d0:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    29d2:	9003      	str	r0, [sp, #12]
    29d4:	9104      	str	r1, [sp, #16]
    29d6:	2100      	movs	r1, #0
    29d8:	9105      	str	r1, [sp, #20]
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    29da:	9100      	str	r1, [sp, #0]
    29dc:	a903      	add	r1, sp, #12
    29de:	4806      	ldr	r0, [pc, #24]	; (29f8 <vsnprintk+0x2c>)
    29e0:	f000 fb56 	bl	3090 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    29e4:	9b05      	ldr	r3, [sp, #20]
    29e6:	9a04      	ldr	r2, [sp, #16]
    29e8:	4293      	cmp	r3, r2
    29ea:	da01      	bge.n	29f0 <vsnprintk+0x24>
		str[ctx.count] = '\0';
    29ec:	2200      	movs	r2, #0
    29ee:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    29f0:	9805      	ldr	r0, [sp, #20]
    29f2:	b006      	add	sp, #24
    29f4:	bd10      	pop	{r4, pc}
    29f6:	bf00      	nop
    29f8:	0000eecb 	.word	0x0000eecb

000029fc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    29fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2a00:	b083      	sub	sp, #12
    2a02:	4604      	mov	r4, r0
    2a04:	4608      	mov	r0, r1
    2a06:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2a08:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    2a0a:	f013 0f08 	tst.w	r3, #8
    2a0e:	d105      	bne.n	2a1c <process_event+0x20>
    2a10:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    2a14:	2300      	movs	r3, #0
    2a16:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    2a18:	9301      	str	r3, [sp, #4]
}
    2a1a:	e055      	b.n	2ac8 <process_event+0xcc>
		if (evt == EVT_COMPLETE) {
    2a1c:	2901      	cmp	r1, #1
    2a1e:	d009      	beq.n	2a34 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    2a20:	f043 0320 	orr.w	r3, r3, #32
    2a24:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    2a26:	f385 8811 	msr	BASEPRI, r5
    2a2a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    2a2e:	b003      	add	sp, #12
    2a30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    2a34:	f043 0310 	orr.w	r3, r3, #16
    2a38:	8323      	strh	r3, [r4, #24]
    2a3a:	e7f4      	b.n	2a26 <process_event+0x2a>
			evt = process_recheck(mgr);
    2a3c:	4620      	mov	r0, r4
    2a3e:	f00c fab0 	bl	efa2 <process_recheck>
    2a42:	e043      	b.n	2acc <process_event+0xd0>
			res = mgr->last_res;
    2a44:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
    2a48:	464a      	mov	r2, r9
    2a4a:	4669      	mov	r1, sp
    2a4c:	4620      	mov	r0, r4
    2a4e:	f00c fac1 	bl	efd4 <process_complete>
		onoff_transition_fn transit = NULL;
    2a52:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2a56:	8b23      	ldrh	r3, [r4, #24]
    2a58:	f003 0707 	and.w	r7, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    2a5c:	42b7      	cmp	r7, r6
    2a5e:	d069      	beq.n	2b34 <process_event+0x138>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    2a60:	68a2      	ldr	r2, [r4, #8]
    2a62:	2a00      	cmp	r2, #0
    2a64:	d066      	beq.n	2b34 <process_event+0x138>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2a66:	2201      	movs	r2, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    2a68:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    2a6c:	8323      	strh	r3, [r4, #24]
    2a6e:	f385 8811 	msr	BASEPRI, r5
    2a72:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    2a76:	2a00      	cmp	r2, #0
    2a78:	d164      	bne.n	2b44 <process_event+0x148>
    2a7a:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    2a7c:	b12b      	cbz	r3, 2a8a <process_event+0x8e>
				notify_all(mgr, &clients, state, res);
    2a7e:	464b      	mov	r3, r9
    2a80:	463a      	mov	r2, r7
    2a82:	4669      	mov	r1, sp
    2a84:	4620      	mov	r0, r4
    2a86:	f00c fb1e 	bl	f0c6 <notify_all>
			if (transit != NULL) {
    2a8a:	f1b8 0f00 	cmp.w	r8, #0
    2a8e:	d002      	beq.n	2a96 <process_event+0x9a>
				transit(mgr, transition_complete);
    2a90:	4934      	ldr	r1, [pc, #208]	; (2b64 <process_event+0x168>)
    2a92:	4620      	mov	r0, r4
    2a94:	47c0      	blx	r8
	__asm__ volatile(
    2a96:	f04f 0320 	mov.w	r3, #32
    2a9a:	f3ef 8511 	mrs	r5, BASEPRI
    2a9e:	f383 8812 	msr	BASEPRI_MAX, r3
    2aa2:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    2aa6:	8b23      	ldrh	r3, [r4, #24]
    2aa8:	f023 0308 	bic.w	r3, r3, #8
    2aac:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    2aae:	8b23      	ldrh	r3, [r4, #24]
    2ab0:	f013 0f10 	tst.w	r3, #16
    2ab4:	d04c      	beq.n	2b50 <process_event+0x154>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    2ab6:	f023 0310 	bic.w	r3, r3, #16
    2aba:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    2abc:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    2abe:	8b26      	ldrh	r6, [r4, #24]
    2ac0:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    2ac4:	2800      	cmp	r0, #0
    2ac6:	d0ae      	beq.n	2a26 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    2ac8:	2802      	cmp	r0, #2
    2aca:	d0b7      	beq.n	2a3c <process_event+0x40>
		if (evt == EVT_NOP) {
    2acc:	2800      	cmp	r0, #0
    2ace:	d0aa      	beq.n	2a26 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    2ad0:	3801      	subs	r0, #1
    2ad2:	2804      	cmp	r0, #4
    2ad4:	d82a      	bhi.n	2b2c <process_event+0x130>
    2ad6:	a301      	add	r3, pc, #4	; (adr r3, 2adc <process_event+0xe0>)
    2ad8:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
    2adc:	00002a45 	.word	0x00002a45
    2ae0:	00002b2d 	.word	0x00002b2d
    2ae4:	00002af1 	.word	0x00002af1
    2ae8:	00002b05 	.word	0x00002b05
    2aec:	00002b19 	.word	0x00002b19
			transit = mgr->transitions->start;
    2af0:	6923      	ldr	r3, [r4, #16]
    2af2:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
    2af6:	2106      	movs	r1, #6
    2af8:	4620      	mov	r0, r4
    2afa:	f00c fa28 	bl	ef4e <set_state>
		res = 0;
    2afe:	f04f 0900 	mov.w	r9, #0
    2b02:	e7a8      	b.n	2a56 <process_event+0x5a>
			transit = mgr->transitions->stop;
    2b04:	6923      	ldr	r3, [r4, #16]
    2b06:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    2b0a:	2104      	movs	r1, #4
    2b0c:	4620      	mov	r0, r4
    2b0e:	f00c fa1e 	bl	ef4e <set_state>
		res = 0;
    2b12:	f04f 0900 	mov.w	r9, #0
    2b16:	e79e      	b.n	2a56 <process_event+0x5a>
			transit = mgr->transitions->reset;
    2b18:	6923      	ldr	r3, [r4, #16]
    2b1a:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    2b1e:	2105      	movs	r1, #5
    2b20:	4620      	mov	r0, r4
    2b22:	f00c fa14 	bl	ef4e <set_state>
		res = 0;
    2b26:	f04f 0900 	mov.w	r9, #0
    2b2a:	e794      	b.n	2a56 <process_event+0x5a>
		if (evt == EVT_NOP) {
    2b2c:	f04f 0800 	mov.w	r8, #0
    2b30:	46c1      	mov	r9, r8
    2b32:	e790      	b.n	2a56 <process_event+0x5a>
    2b34:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    2b36:	b10a      	cbz	r2, 2b3c <process_event+0x140>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2b38:	2200      	movs	r2, #0
    2b3a:	e795      	b.n	2a68 <process_event+0x6c>
		    || (transit != NULL)) {
    2b3c:	f1b8 0f00 	cmp.w	r8, #0
    2b40:	d192      	bne.n	2a68 <process_event+0x6c>
    2b42:	e7b4      	b.n	2aae <process_event+0xb2>
				notify_monitors(mgr, state, res);
    2b44:	464a      	mov	r2, r9
    2b46:	4639      	mov	r1, r7
    2b48:	4620      	mov	r0, r4
    2b4a:	f00c fa08 	bl	ef5e <notify_monitors>
    2b4e:	e794      	b.n	2a7a <process_event+0x7e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    2b50:	f013 0f20 	tst.w	r3, #32
    2b54:	d004      	beq.n	2b60 <process_event+0x164>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    2b56:	f023 0320 	bic.w	r3, r3, #32
    2b5a:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
    2b5c:	2002      	movs	r0, #2
    2b5e:	e7ae      	b.n	2abe <process_event+0xc2>
		evt = EVT_NOP;
    2b60:	2000      	movs	r0, #0
    2b62:	e7ac      	b.n	2abe <process_event+0xc2>
    2b64:	0000f0f5 	.word	0x0000f0f5

00002b68 <crc32_ieee_update>:
		0x76dc4190U, 0x6b6b51f4U, 0x4db26158U, 0x5005713cU,
		0xedb88320U, 0xf00f9344U, 0xd6d6a3e8U, 0xcb61b38cU,
		0x9b64c2b0U, 0x86d3d2d4U, 0xa00ae278U, 0xbdbdf21cU,
	};

	crc = ~crc;
    2b68:	43c0      	mvns	r0, r0

	for (size_t i = 0; i < len; i++) {
    2b6a:	f04f 0c00 	mov.w	ip, #0
    2b6e:	4594      	cmp	ip, r2
    2b70:	d219      	bcs.n	2ba6 <crc32_ieee_update+0x3e>
{
    2b72:	b530      	push	{r4, r5, lr}
		uint8_t byte = data[i];
    2b74:	f811 300c 	ldrb.w	r3, [r1, ip]

		crc = (crc >> 4) ^ table[(crc ^ byte) & 0x0f];
    2b78:	ea83 0e00 	eor.w	lr, r3, r0
    2b7c:	f00e 0e0f 	and.w	lr, lr, #15
    2b80:	4c0a      	ldr	r4, [pc, #40]	; (2bac <crc32_ieee_update+0x44>)
    2b82:	f854 502e 	ldr.w	r5, [r4, lr, lsl #2]
    2b86:	ea85 1010 	eor.w	r0, r5, r0, lsr #4
		crc = (crc >> 4) ^ table[(crc ^ ((uint32_t)byte >> 4)) & 0x0f];
    2b8a:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
    2b8e:	f003 030f 	and.w	r3, r3, #15
    2b92:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    2b96:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
	for (size_t i = 0; i < len; i++) {
    2b9a:	f10c 0c01 	add.w	ip, ip, #1
    2b9e:	4594      	cmp	ip, r2
    2ba0:	d3e8      	bcc.n	2b74 <crc32_ieee_update+0xc>
	}

	return (~crc);
}
    2ba2:	43c0      	mvns	r0, r0
    2ba4:	bd30      	pop	{r4, r5, pc}
    2ba6:	43c0      	mvns	r0, r0
    2ba8:	4770      	bx	lr
    2baa:	bf00      	nop
    2bac:	00015b28 	.word	0x00015b28

00002bb0 <crc8_ccitt>:
uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
    2bb0:	f04f 0c00 	mov.w	ip, #0
    2bb4:	4594      	cmp	ip, r2
    2bb6:	d215      	bcs.n	2be4 <crc8_ccitt+0x34>
{
    2bb8:	b510      	push	{r4, lr}
		val ^= p[i];
    2bba:	f811 300c 	ldrb.w	r3, [r1, ip]
    2bbe:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    2bc0:	0903      	lsrs	r3, r0, #4
    2bc2:	4c09      	ldr	r4, [pc, #36]	; (2be8 <crc8_ccitt+0x38>)
    2bc4:	5ce3      	ldrb	r3, [r4, r3]
    2bc6:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
    2bca:	fa5f fe83 	uxtb.w	lr, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    2bce:	f3c3 1303 	ubfx	r3, r3, #4, #4
    2bd2:	5ce0      	ldrb	r0, [r4, r3]
    2bd4:	ea80 100e 	eor.w	r0, r0, lr, lsl #4
    2bd8:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
    2bda:	f10c 0c01 	add.w	ip, ip, #1
    2bde:	4594      	cmp	ip, r2
    2be0:	d3eb      	bcc.n	2bba <crc8_ccitt+0xa>
	}
	return val;
}
    2be2:	bd10      	pop	{r4, pc}
    2be4:	4770      	bx	lr
    2be6:	bf00      	nop
    2be8:	00015b68 	.word	0x00015b68

00002bec <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
    2bec:	4684      	mov	ip, r0
    2bee:	4608      	mov	r0, r1
	bool loop = true;
    2bf0:	2201      	movs	r2, #1
    2bf2:	e026      	b.n	2c42 <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
    2bf4:	f89c 3000 	ldrb.w	r3, [ip]
    2bf8:	f043 0304 	orr.w	r3, r3, #4
    2bfc:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
    2c00:	b1f2      	cbz	r2, 2c40 <extract_flags+0x54>
			++sp;
    2c02:	3001      	adds	r0, #1
    2c04:	e01c      	b.n	2c40 <extract_flags+0x54>
			conv->flag_plus = true;
    2c06:	f89c 3000 	ldrb.w	r3, [ip]
    2c0a:	f043 0308 	orr.w	r3, r3, #8
    2c0e:	f88c 3000 	strb.w	r3, [ip]
			break;
    2c12:	e7f5      	b.n	2c00 <extract_flags+0x14>
			conv->flag_space = true;
    2c14:	f89c 3000 	ldrb.w	r3, [ip]
    2c18:	f043 0310 	orr.w	r3, r3, #16
    2c1c:	f88c 3000 	strb.w	r3, [ip]
			break;
    2c20:	e7ee      	b.n	2c00 <extract_flags+0x14>
			conv->flag_hash = true;
    2c22:	f89c 3000 	ldrb.w	r3, [ip]
    2c26:	f043 0320 	orr.w	r3, r3, #32
    2c2a:	f88c 3000 	strb.w	r3, [ip]
			break;
    2c2e:	e7e7      	b.n	2c00 <extract_flags+0x14>
			conv->flag_zero = true;
    2c30:	f89c 3000 	ldrb.w	r3, [ip]
    2c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2c38:	f88c 3000 	strb.w	r3, [ip]
			break;
    2c3c:	e7e0      	b.n	2c00 <extract_flags+0x14>
		switch (*sp) {
    2c3e:	2200      	movs	r2, #0
		}
	} while (loop);
    2c40:	b342      	cbz	r2, 2c94 <extract_flags+0xa8>
		switch (*sp) {
    2c42:	7803      	ldrb	r3, [r0, #0]
    2c44:	3b20      	subs	r3, #32
    2c46:	2b10      	cmp	r3, #16
    2c48:	d8f9      	bhi.n	2c3e <extract_flags+0x52>
    2c4a:	a101      	add	r1, pc, #4	; (adr r1, 2c50 <extract_flags+0x64>)
    2c4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    2c50:	00002c15 	.word	0x00002c15
    2c54:	00002c3f 	.word	0x00002c3f
    2c58:	00002c3f 	.word	0x00002c3f
    2c5c:	00002c23 	.word	0x00002c23
    2c60:	00002c3f 	.word	0x00002c3f
    2c64:	00002c3f 	.word	0x00002c3f
    2c68:	00002c3f 	.word	0x00002c3f
    2c6c:	00002c3f 	.word	0x00002c3f
    2c70:	00002c3f 	.word	0x00002c3f
    2c74:	00002c3f 	.word	0x00002c3f
    2c78:	00002c3f 	.word	0x00002c3f
    2c7c:	00002c07 	.word	0x00002c07
    2c80:	00002c3f 	.word	0x00002c3f
    2c84:	00002bf5 	.word	0x00002bf5
    2c88:	00002c3f 	.word	0x00002c3f
    2c8c:	00002c3f 	.word	0x00002c3f
    2c90:	00002c31 	.word	0x00002c31

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
    2c94:	f89c 3000 	ldrb.w	r3, [ip]
    2c98:	f003 0344 	and.w	r3, r3, #68	; 0x44
    2c9c:	2b44      	cmp	r3, #68	; 0x44
    2c9e:	d000      	beq.n	2ca2 <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
    2ca0:	4770      	bx	lr
		conv->flag_zero = false;
    2ca2:	f89c 3000 	ldrb.w	r3, [ip]
    2ca6:	f36f 1386 	bfc	r3, #6, #1
    2caa:	f88c 3000 	strb.w	r3, [ip]
    2cae:	e7f7      	b.n	2ca0 <extract_flags+0xb4>

00002cb0 <encode_float>:
			  struct conversion *conv,
			  int precision,
			  char *sign,
			  char *bps,
			  const char **bpe)
{
    2cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cb4:	b087      	sub	sp, #28
    2cb6:	4617      	mov	r7, r2
    2cb8:	461e      	mov	r6, r3
    2cba:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
	char *buf = bps;

	/* Prepend the sign: '-' if negative, flags control
	 * non-negative behavior.
	 */
	if ((u.u64 & SIGN_MASK) != 0U) {
    2cbe:	4602      	mov	r2, r0
    2cc0:	1e0b      	subs	r3, r1, #0
    2cc2:	db07      	blt.n	2cd4 <encode_float+0x24>
		*sign = '-';
	} else if (conv->flag_plus) {
    2cc4:	7839      	ldrb	r1, [r7, #0]
    2cc6:	f011 0f08 	tst.w	r1, #8
    2cca:	d014      	beq.n	2cf6 <encode_float+0x46>
		*sign = '+';
    2ccc:	212b      	movs	r1, #43	; 0x2b
    2cce:	9810      	ldr	r0, [sp, #64]	; 0x40
    2cd0:	7001      	strb	r1, [r0, #0]
    2cd2:	e002      	b.n	2cda <encode_float+0x2a>
		*sign = '-';
    2cd4:	212d      	movs	r1, #45	; 0x2d
    2cd6:	9810      	ldr	r0, [sp, #64]	; 0x40
    2cd8:	7001      	strb	r1, [r0, #0]
	}

	/* Extract the non-negative offset exponent and fraction.  Record
	 * whether the value is subnormal.
	 */
	char c = conv->specifier;
    2cda:	f897 8003 	ldrb.w	r8, [r7, #3]
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    2cde:	f3c3 540a 	ubfx	r4, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    2ce2:	f3c3 0313 	ubfx	r3, r3, #0, #20
    2ce6:	9204      	str	r2, [sp, #16]
    2ce8:	9305      	str	r3, [sp, #20]
	bool is_subnormal = (expo == 0) && (fract != 0);
    2cea:	b95c      	cbnz	r4, 2d04 <encode_float+0x54>
    2cec:	ea52 0103 	orrs.w	r1, r2, r3
    2cf0:	d128      	bne.n	2d44 <encode_float+0x94>
    2cf2:	2100      	movs	r1, #0
    2cf4:	e007      	b.n	2d06 <encode_float+0x56>
	} else if (conv->flag_space) {
    2cf6:	f011 0f10 	tst.w	r1, #16
    2cfa:	d0ee      	beq.n	2cda <encode_float+0x2a>
		*sign = ' ';
    2cfc:	2120      	movs	r1, #32
    2cfe:	9810      	ldr	r0, [sp, #64]	; 0x40
    2d00:	7001      	strb	r1, [r0, #0]
    2d02:	e7ea      	b.n	2cda <encode_float+0x2a>
	bool is_subnormal = (expo == 0) && (fract != 0);
    2d04:	2100      	movs	r1, #0

	/* Exponent of all-ones signals infinity or NaN, which are
	 * text constants regardless of specifier.
	 */
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    2d06:	f240 70ff 	movw	r0, #2047	; 0x7ff
    2d0a:	4284      	cmp	r4, r0
    2d0c:	d01c      	beq.n	2d48 <encode_float+0x98>
		*bpe = buf;
		return bps;
	}

	/* The case of an F specifier is no longer relevant. */
	if (c == 'F') {
    2d0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
    2d12:	d059      	beq.n	2dc8 <encode_float+0x118>

	/* Remainder of code operates on a 64-bit fraction, so shift up (and
	 * discard garbage from the exponent where the implicit 1 would be
	 * stored).
	 */
	fract <<= EXPONENT_BITS;
    2d14:	02db      	lsls	r3, r3, #11
    2d16:	ea43 5352 	orr.w	r3, r3, r2, lsr #21
    2d1a:	02d2      	lsls	r2, r2, #11
    2d1c:	9204      	str	r2, [sp, #16]
    2d1e:	9305      	str	r3, [sp, #20]
	fract &= ~SIGN_MASK;
    2d20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    2d24:	9305      	str	r3, [sp, #20]

	/* Non-zero values need normalization. */
	if ((expo | fract) != 0) {
    2d26:	4322      	orrs	r2, r4
    2d28:	ea43 73e4 	orr.w	r3, r3, r4, asr #31
    2d2c:	431a      	orrs	r2, r3
    2d2e:	d007      	beq.n	2d40 <encode_float+0x90>
		if (is_subnormal) {
    2d30:	2900      	cmp	r1, #0
    2d32:	d14d      	bne.n	2dd0 <encode_float+0x120>
		}
		/* Adjust the offset exponent to be signed rather than offset,
		 * and set the implicit 1 bit in the (shifted) 53-bit
		 * fraction.
		 */
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    2d34:	f2a4 34fe 	subw	r4, r4, #1022	; 0x3fe
		fract |= BIT_63;
    2d38:	9b05      	ldr	r3, [sp, #20]
    2d3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    2d3e:	9305      	str	r3, [sp, #20]
		c = 'f';
    2d40:	2500      	movs	r5, #0
    2d42:	e066      	b.n	2e12 <encode_float+0x162>
	bool is_subnormal = (expo == 0) && (fract != 0);
    2d44:	2101      	movs	r1, #1
    2d46:	e7de      	b.n	2d06 <encode_float+0x56>
		if (fract == 0) {
    2d48:	4313      	orrs	r3, r2
    2d4a:	d122      	bne.n	2d92 <encode_float+0xe2>
extern "C" {
#endif

static inline int isupper(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    2d4c:	f1a8 0841 	sub.w	r8, r8, #65	; 0x41
			if (isupper((unsigned char)c) != 0) {
    2d50:	f1b8 0f19 	cmp.w	r8, #25
    2d54:	d811      	bhi.n	2d7a <encode_float+0xca>
				*buf++ = 'I';
    2d56:	2349      	movs	r3, #73	; 0x49
    2d58:	f889 3000 	strb.w	r3, [r9]
				*buf++ = 'N';
    2d5c:	234e      	movs	r3, #78	; 0x4e
    2d5e:	f889 3001 	strb.w	r3, [r9, #1]
				*buf++ = 'F';
    2d62:	f109 0203 	add.w	r2, r9, #3
    2d66:	2346      	movs	r3, #70	; 0x46
    2d68:	f889 3002 	strb.w	r3, [r9, #2]
		conv->flag_zero = false;
    2d6c:	783b      	ldrb	r3, [r7, #0]
    2d6e:	f36f 1386 	bfc	r3, #6, #1
    2d72:	703b      	strb	r3, [r7, #0]
		*bpe = buf;
    2d74:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2d76:	601a      	str	r2, [r3, #0]
		return bps;
    2d78:	e174      	b.n	3064 <encode_float+0x3b4>
				*buf++ = 'i';
    2d7a:	2369      	movs	r3, #105	; 0x69
    2d7c:	f889 3000 	strb.w	r3, [r9]
				*buf++ = 'n';
    2d80:	236e      	movs	r3, #110	; 0x6e
    2d82:	f889 3001 	strb.w	r3, [r9, #1]
				*buf++ = 'f';
    2d86:	f109 0203 	add.w	r2, r9, #3
    2d8a:	2366      	movs	r3, #102	; 0x66
    2d8c:	f889 3002 	strb.w	r3, [r9, #2]
    2d90:	e7ec      	b.n	2d6c <encode_float+0xbc>
    2d92:	f1a8 0841 	sub.w	r8, r8, #65	; 0x41
			if (isupper((unsigned char)c) != 0) {
    2d96:	f1b8 0f19 	cmp.w	r8, #25
    2d9a:	d80a      	bhi.n	2db2 <encode_float+0x102>
				*buf++ = 'N';
    2d9c:	234e      	movs	r3, #78	; 0x4e
    2d9e:	f889 3000 	strb.w	r3, [r9]
				*buf++ = 'A';
    2da2:	2241      	movs	r2, #65	; 0x41
    2da4:	f889 2001 	strb.w	r2, [r9, #1]
				*buf++ = 'N';
    2da8:	f109 0203 	add.w	r2, r9, #3
    2dac:	f889 3002 	strb.w	r3, [r9, #2]
    2db0:	e7dc      	b.n	2d6c <encode_float+0xbc>
				*buf++ = 'n';
    2db2:	236e      	movs	r3, #110	; 0x6e
    2db4:	f889 3000 	strb.w	r3, [r9]
				*buf++ = 'a';
    2db8:	2261      	movs	r2, #97	; 0x61
    2dba:	f889 2001 	strb.w	r2, [r9, #1]
				*buf++ = 'n';
    2dbe:	f109 0203 	add.w	r2, r9, #3
    2dc2:	f889 3002 	strb.w	r3, [r9, #2]
    2dc6:	e7d1      	b.n	2d6c <encode_float+0xbc>
		c = 'f';
    2dc8:	f04f 0866 	mov.w	r8, #102	; 0x66
    2dcc:	e7a2      	b.n	2d14 <encode_float+0x64>
				expo--;
    2dce:	3c01      	subs	r4, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    2dd0:	9b04      	ldr	r3, [sp, #16]
    2dd2:	9a05      	ldr	r2, [sp, #20]
    2dd4:	18db      	adds	r3, r3, r3
    2dd6:	4152      	adcs	r2, r2
    2dd8:	9304      	str	r3, [sp, #16]
    2dda:	9205      	str	r2, [sp, #20]
    2ddc:	2a00      	cmp	r2, #0
    2dde:	daf6      	bge.n	2dce <encode_float+0x11e>
    2de0:	e7a8      	b.n	2d34 <encode_float+0x84>
		/*
		 * Make room to allow a multiplication by 5 without overflow.
		 * We test only the top part for faster code.
		 */
		do {
			fract >>= 1;
    2de2:	9b05      	ldr	r3, [sp, #20]
    2de4:	9a04      	ldr	r2, [sp, #16]
    2de6:	0852      	lsrs	r2, r2, #1
    2de8:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
    2dec:	085b      	lsrs	r3, r3, #1
    2dee:	9204      	str	r2, [sp, #16]
    2df0:	9305      	str	r3, [sp, #20]
			expo++;
    2df2:	4621      	mov	r1, r4
    2df4:	3401      	adds	r4, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    2df6:	f1b3 3f33 	cmp.w	r3, #858993459	; 0x33333333
    2dfa:	d2f2      	bcs.n	2de2 <encode_float+0x132>

		/* Perform fract * 5 * 2 / 10 */
		fract *= 5U;
    2dfc:	009c      	lsls	r4, r3, #2
    2dfe:	ea44 7492 	orr.w	r4, r4, r2, lsr #30
    2e02:	0090      	lsls	r0, r2, #2
    2e04:	1880      	adds	r0, r0, r2
    2e06:	eb43 0304 	adc.w	r3, r3, r4
    2e0a:	9004      	str	r0, [sp, #16]
    2e0c:	9305      	str	r3, [sp, #20]
		expo++;
    2e0e:	1c8c      	adds	r4, r1, #2
		decexp--;
    2e10:	3d01      	subs	r5, #1
	while (expo < -2) {
    2e12:	f114 0f02 	cmn.w	r4, #2
    2e16:	dbe4      	blt.n	2de2 <encode_float+0x132>
    2e18:	e014      	b.n	2e44 <encode_float+0x194>
		/*
		 * Perform fract / 5 / 2 * 10.
		 * The +2 is there to do round the result of the division
		 * by 5 not to lose too much precision in extreme cases.
		 */
		fract += 2;
    2e1a:	9b04      	ldr	r3, [sp, #16]
    2e1c:	3302      	adds	r3, #2
    2e1e:	9a05      	ldr	r2, [sp, #20]
    2e20:	f142 0200 	adc.w	r2, r2, #0
    2e24:	9304      	str	r3, [sp, #16]
    2e26:	9205      	str	r2, [sp, #20]
		_ldiv5(&fract);
    2e28:	a804      	add	r0, sp, #16
    2e2a:	f00c fbe8 	bl	f5fe <_ldiv5>
		expo--;
    2e2e:	3c01      	subs	r4, #1
		decexp++;
    2e30:	3501      	adds	r5, #1

		/* Bring back our fractional number to full scale */
		do {
			fract <<= 1;
    2e32:	9904      	ldr	r1, [sp, #16]
    2e34:	9b05      	ldr	r3, [sp, #20]
    2e36:	1849      	adds	r1, r1, r1
    2e38:	415b      	adcs	r3, r3
    2e3a:	9104      	str	r1, [sp, #16]
    2e3c:	9305      	str	r3, [sp, #20]
			expo--;
    2e3e:	3c01      	subs	r4, #1
		} while (!(fract & BIT_63));
    2e40:	2b00      	cmp	r3, #0
    2e42:	daf6      	bge.n	2e32 <encode_float+0x182>
	while (expo > 0) {
    2e44:	2c00      	cmp	r4, #0
    2e46:	dce8      	bgt.n	2e1a <encode_float+0x16a>
	/*
	 * The binary fractional point is located somewhere above bit 63.
	 * Move it between bits 59 and 60 to give 4 bits of room to the
	 * integer part.
	 */
	fract >>= (4 - expo);
    2e48:	f1c4 0104 	rsb	r1, r4, #4
    2e4c:	9a05      	ldr	r2, [sp, #20]
    2e4e:	341c      	adds	r4, #28
    2e50:	f1a1 0020 	sub.w	r0, r1, #32
    2e54:	9b04      	ldr	r3, [sp, #16]
    2e56:	40cb      	lsrs	r3, r1
    2e58:	fa02 f404 	lsl.w	r4, r2, r4
    2e5c:	4323      	orrs	r3, r4
    2e5e:	fa22 f000 	lsr.w	r0, r2, r0
    2e62:	4303      	orrs	r3, r0
    2e64:	40ca      	lsrs	r2, r1
    2e66:	9304      	str	r3, [sp, #16]
    2e68:	9205      	str	r2, [sp, #20]

	if ((c == 'g') || (c == 'G')) {
    2e6a:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
    2e6e:	d014      	beq.n	2e9a <encode_float+0x1ea>
    2e70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
    2e74:	d011      	beq.n	2e9a <encode_float+0x1ea>
	bool prune_zero = false;
    2e76:	f04f 0b00 	mov.w	fp, #0
			prune_zero = true;
		}
	}

	int decimals;
	if (c == 'f') {
    2e7a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
    2e7e:	d02a      	beq.n	2ed6 <encode_float+0x226>
		decimals = precision + decexp;
		if (decimals < 0) {
			decimals = 0;
		}
	} else {
		decimals = precision + 1;
    2e80:	f106 0a01 	add.w	sl, r6, #1
	}

	int digit_count = 16;
    2e84:	2310      	movs	r3, #16
    2e86:	9303      	str	r3, [sp, #12]

	if (decimals > 16) {
    2e88:	459a      	cmp	sl, r3
    2e8a:	dd00      	ble.n	2e8e <encode_float+0x1de>
		decimals = 16;
    2e8c:	469a      	mov	sl, r3
	}

	/* Round the value to the last digit being printed. */
	uint64_t round = BIT64(59); /* 0.5 */
    2e8e:	2200      	movs	r2, #0
    2e90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    2e94:	e9cd 2300 	strd	r2, r3, [sp]
	while (decimals--) {
    2e98:	e029      	b.n	2eee <encode_float+0x23e>
		if (decexp < (-4 + 1) || decexp > precision) {
    2e9a:	f115 0f03 	cmn.w	r5, #3
    2e9e:	db01      	blt.n	2ea4 <encode_float+0x1f4>
    2ea0:	42b5      	cmp	r5, r6
    2ea2:	dd11      	ble.n	2ec8 <encode_float+0x218>
			c += 'e' - 'g';  /* e or E */
    2ea4:	f1a8 0802 	sub.w	r8, r8, #2
    2ea8:	fa5f f888 	uxtb.w	r8, r8
			if (precision > 0) {
    2eac:	2e00      	cmp	r6, #0
    2eae:	dd00      	ble.n	2eb2 <encode_float+0x202>
				precision--;
    2eb0:	3e01      	subs	r6, #1
		if (!conv->flag_hash && (precision > 0)) {
    2eb2:	783b      	ldrb	r3, [r7, #0]
    2eb4:	f3c3 1b40 	ubfx	fp, r3, #5, #1
    2eb8:	f013 0f20 	tst.w	r3, #32
    2ebc:	d108      	bne.n	2ed0 <encode_float+0x220>
    2ebe:	2e00      	cmp	r6, #0
    2ec0:	dddb      	ble.n	2e7a <encode_float+0x1ca>
			prune_zero = true;
    2ec2:	f04f 0b01 	mov.w	fp, #1
    2ec6:	e7d8      	b.n	2e7a <encode_float+0x1ca>
			precision -= decexp;
    2ec8:	1b76      	subs	r6, r6, r5
			c = 'f';
    2eca:	f04f 0866 	mov.w	r8, #102	; 0x66
    2ece:	e7f0      	b.n	2eb2 <encode_float+0x202>
	bool prune_zero = false;
    2ed0:	f04f 0b00 	mov.w	fp, #0
    2ed4:	e7d1      	b.n	2e7a <encode_float+0x1ca>
		if (decimals < 0) {
    2ed6:	eb15 0a06 	adds.w	sl, r5, r6
    2eda:	d5d3      	bpl.n	2e84 <encode_float+0x1d4>
	int digit_count = 16;
    2edc:	2310      	movs	r3, #16
    2ede:	9303      	str	r3, [sp, #12]
			decimals = 0;
    2ee0:	f04f 0a00 	mov.w	sl, #0
    2ee4:	e7d3      	b.n	2e8e <encode_float+0x1de>
		_ldiv10(&round);
    2ee6:	4668      	mov	r0, sp
    2ee8:	f00c fba5 	bl	f636 <_ldiv10>
	while (decimals--) {
    2eec:	46a2      	mov	sl, r4
    2eee:	f10a 34ff 	add.w	r4, sl, #4294967295
    2ef2:	f1ba 0f00 	cmp.w	sl, #0
    2ef6:	d1f6      	bne.n	2ee6 <encode_float+0x236>
	}
	fract += round;
    2ef8:	9b04      	ldr	r3, [sp, #16]
    2efa:	9a00      	ldr	r2, [sp, #0]
    2efc:	189b      	adds	r3, r3, r2
    2efe:	9a05      	ldr	r2, [sp, #20]
    2f00:	9901      	ldr	r1, [sp, #4]
    2f02:	eb42 0201 	adc.w	r2, r2, r1
    2f06:	9304      	str	r3, [sp, #16]
    2f08:	9205      	str	r2, [sp, #20]
	/* Make sure rounding didn't make fract >= 1.0 */
	if (fract >= BIT64(60)) {
    2f0a:	f04f 31ff 	mov.w	r1, #4294967295
    2f0e:	4299      	cmp	r1, r3
    2f10:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    2f14:	4193      	sbcs	r3, r2
    2f16:	d306      	bcc.n	2f26 <encode_float+0x276>
		_ldiv10(&fract);
		decexp++;
	}

	if (c == 'f') {
    2f18:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
    2f1c:	d138      	bne.n	2f90 <encode_float+0x2e0>
		if (decexp > 0) {
    2f1e:	2d00      	cmp	r5, #0
    2f20:	dd31      	ble.n	2f86 <encode_float+0x2d6>
	char *buf = bps;
    2f22:	464c      	mov	r4, r9
    2f24:	e00b      	b.n	2f3e <encode_float+0x28e>
		_ldiv10(&fract);
    2f26:	a804      	add	r0, sp, #16
    2f28:	f00c fb85 	bl	f636 <_ldiv10>
		decexp++;
    2f2c:	3501      	adds	r5, #1
    2f2e:	e7f3      	b.n	2f18 <encode_float+0x268>
			/* Emit the digits above the decimal point. */
			while (decexp > 0 && digit_count > 0) {
				*buf++ = _get_digit(&fract, &digit_count);
    2f30:	a903      	add	r1, sp, #12
    2f32:	a804      	add	r0, sp, #16
    2f34:	f00c fb8b 	bl	f64e <_get_digit>
    2f38:	f804 0b01 	strb.w	r0, [r4], #1
				decexp--;
    2f3c:	3d01      	subs	r5, #1
			while (decexp > 0 && digit_count > 0) {
    2f3e:	2d00      	cmp	r5, #0
    2f40:	dd02      	ble.n	2f48 <encode_float+0x298>
    2f42:	9b03      	ldr	r3, [sp, #12]
    2f44:	2b00      	cmp	r3, #0
    2f46:	dcf3      	bgt.n	2f30 <encode_float+0x280>
			}

			conv->pad0_value = decexp;
    2f48:	607d      	str	r5, [r7, #4]

			decexp = 0;
    2f4a:	4655      	mov	r5, sl
		}

		/* Emit the decimal point only if required by the alternative
		 * format, or if more digits are to follow.
		 */
		if (conv->flag_hash || (precision > 0)) {
    2f4c:	783b      	ldrb	r3, [r7, #0]
    2f4e:	f013 0f20 	tst.w	r3, #32
    2f52:	d101      	bne.n	2f58 <encode_float+0x2a8>
    2f54:	2e00      	cmp	r6, #0
    2f56:	dd02      	ble.n	2f5e <encode_float+0x2ae>
			*buf++ = '.';
    2f58:	232e      	movs	r3, #46	; 0x2e
    2f5a:	f804 3b01 	strb.w	r3, [r4], #1
		}

		if (decexp < 0 && precision > 0) {
    2f5e:	2d00      	cmp	r5, #0
    2f60:	da33      	bge.n	2fca <encode_float+0x31a>
    2f62:	2e00      	cmp	r6, #0
    2f64:	dd31      	ble.n	2fca <encode_float+0x31a>
			conv->pad0_value = -decexp;
    2f66:	426b      	negs	r3, r5
    2f68:	607b      	str	r3, [r7, #4]
			if (conv->pad0_value > precision) {
    2f6a:	429e      	cmp	r6, r3
    2f6c:	da00      	bge.n	2f70 <encode_float+0x2c0>
				conv->pad0_value = precision;
    2f6e:	607e      	str	r6, [r7, #4]
			}

			precision -= conv->pad0_value;
    2f70:	687b      	ldr	r3, [r7, #4]
    2f72:	1af6      	subs	r6, r6, r3
			conv->pad_postdp = (conv->pad0_value > 0);
    2f74:	2b00      	cmp	r3, #0
    2f76:	bfd4      	ite	le
    2f78:	2300      	movle	r3, #0
    2f7a:	2301      	movgt	r3, #1
    2f7c:	78ba      	ldrb	r2, [r7, #2]
    2f7e:	f363 1245 	bfi	r2, r3, #5, #1
    2f82:	70ba      	strb	r2, [r7, #2]
    2f84:	e021      	b.n	2fca <encode_float+0x31a>
			*buf++ = '0';
    2f86:	464c      	mov	r4, r9
    2f88:	2330      	movs	r3, #48	; 0x30
    2f8a:	f804 3b01 	strb.w	r3, [r4], #1
    2f8e:	e7dd      	b.n	2f4c <encode_float+0x29c>
		}
	} else { /* e or E */
		/* Emit the one digit before the decimal.  If it's not zero,
		 * this is significant so reduce the base-10 exponent.
		 */
		*buf = _get_digit(&fract, &digit_count);
    2f90:	a903      	add	r1, sp, #12
    2f92:	a804      	add	r0, sp, #16
    2f94:	f00c fb5b 	bl	f64e <_get_digit>
    2f98:	464c      	mov	r4, r9
    2f9a:	f804 0b01 	strb.w	r0, [r4], #1
		if (*buf++ != '0') {
    2f9e:	2830      	cmp	r0, #48	; 0x30
    2fa0:	d000      	beq.n	2fa4 <encode_float+0x2f4>
			decexp--;
    2fa2:	3d01      	subs	r5, #1
		}

		/* Emit the decimal point only if required by the alternative
		 * format, or if more digits are to follow.
		 */
		if (conv->flag_hash || (precision > 0)) {
    2fa4:	783b      	ldrb	r3, [r7, #0]
    2fa6:	f013 0f20 	tst.w	r3, #32
    2faa:	d101      	bne.n	2fb0 <encode_float+0x300>
    2fac:	2e00      	cmp	r6, #0
    2fae:	dd0c      	ble.n	2fca <encode_float+0x31a>
			*buf++ = '.';
    2fb0:	f109 0402 	add.w	r4, r9, #2
    2fb4:	232e      	movs	r3, #46	; 0x2e
    2fb6:	f889 3001 	strb.w	r3, [r9, #1]
    2fba:	e006      	b.n	2fca <encode_float+0x31a>
		}
	}

	while (precision > 0 && digit_count > 0) {
		*buf++ = _get_digit(&fract, &digit_count);
    2fbc:	a903      	add	r1, sp, #12
    2fbe:	a804      	add	r0, sp, #16
    2fc0:	f00c fb45 	bl	f64e <_get_digit>
    2fc4:	f804 0b01 	strb.w	r0, [r4], #1
		precision--;
    2fc8:	3e01      	subs	r6, #1
	while (precision > 0 && digit_count > 0) {
    2fca:	2e00      	cmp	r6, #0
    2fcc:	dd02      	ble.n	2fd4 <encode_float+0x324>
    2fce:	9b03      	ldr	r3, [sp, #12]
    2fd0:	2b00      	cmp	r3, #0
    2fd2:	dcf3      	bgt.n	2fbc <encode_float+0x30c>
	}

	conv->pad0_pre_exp = precision;
    2fd4:	60be      	str	r6, [r7, #8]

	if (prune_zero) {
    2fd6:	f1bb 0f00 	cmp.w	fp, #0
    2fda:	d009      	beq.n	2ff0 <encode_float+0x340>
		conv->pad0_pre_exp = 0;
    2fdc:	2300      	movs	r3, #0
    2fde:	60bb      	str	r3, [r7, #8]
		while (*--buf == '0') {
    2fe0:	4623      	mov	r3, r4
    2fe2:	461c      	mov	r4, r3
    2fe4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    2fe8:	2a30      	cmp	r2, #48	; 0x30
    2fea:	d0fa      	beq.n	2fe2 <encode_float+0x332>
			;
		}
		if (*buf != '.') {
    2fec:	2a2e      	cmp	r2, #46	; 0x2e
    2fee:	d03d      	beq.n	306c <encode_float+0x3bc>
			buf++;
		}
	}

	/* Emit the explicit exponent, if format requires it. */
	if ((c == 'e') || (c == 'E')) {
    2ff0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
    2ff4:	d002      	beq.n	2ffc <encode_float+0x34c>
    2ff6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
    2ffa:	d126      	bne.n	304a <encode_float+0x39a>
		*buf++ = c;
    2ffc:	f884 8000 	strb.w	r8, [r4]
		if (decexp < 0) {
    3000:	2d00      	cmp	r5, #0
    3002:	db35      	blt.n	3070 <encode_float+0x3c0>
			decexp = -decexp;
			*buf++ = '-';
		} else {
			*buf++ = '+';
    3004:	1ca2      	adds	r2, r4, #2
    3006:	232b      	movs	r3, #43	; 0x2b
    3008:	7063      	strb	r3, [r4, #1]
		}

		/* At most 3 digits to the decimal.  Spit them out. */
		if (decexp >= 100) {
    300a:	2d63      	cmp	r5, #99	; 0x63
    300c:	dd0c      	ble.n	3028 <encode_float+0x378>
			*buf++ = (decexp / 100) + '0';
    300e:	491e      	ldr	r1, [pc, #120]	; (3088 <encode_float+0x3d8>)
    3010:	fb81 3105 	smull	r3, r1, r1, r5
    3014:	17eb      	asrs	r3, r5, #31
    3016:	ebc3 1361 	rsb	r3, r3, r1, asr #5
    301a:	f103 0130 	add.w	r1, r3, #48	; 0x30
    301e:	f802 1b01 	strb.w	r1, [r2], #1
			decexp %= 100;
    3022:	2164      	movs	r1, #100	; 0x64
    3024:	fb01 5513 	mls	r5, r1, r3, r5
		}

		*buf++ = (decexp / 10) + '0';
    3028:	4918      	ldr	r1, [pc, #96]	; (308c <encode_float+0x3dc>)
    302a:	fb81 3105 	smull	r3, r1, r1, r5
    302e:	17eb      	asrs	r3, r5, #31
    3030:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
    3034:	f103 0130 	add.w	r1, r3, #48	; 0x30
    3038:	4614      	mov	r4, r2
    303a:	f804 1b02 	strb.w	r1, [r4], #2
		*buf++ = (decexp % 10) + '0';
    303e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3042:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
    3046:	3330      	adds	r3, #48	; 0x30
    3048:	7053      	strb	r3, [r2, #1]
	}

	/* Cache whether there's padding required */
	conv->pad_fp = (conv->pad0_value > 0)
    304a:	687b      	ldr	r3, [r7, #4]
		|| (conv->pad0_pre_exp > 0);
    304c:	2b00      	cmp	r3, #0
    304e:	dd14      	ble.n	307a <encode_float+0x3ca>
    3050:	f04f 0a01 	mov.w	sl, #1
	conv->pad_fp = (conv->pad0_value > 0)
    3054:	78bb      	ldrb	r3, [r7, #2]
    3056:	f36a 1386 	bfi	r3, sl, #6, #1
    305a:	70bb      	strb	r3, [r7, #2]

	/* Set the end of the encoded sequence, and return its start.  Also
	 * store EOS as a non-digit/non-decimal value so we don't have to
	 * check against bpe when iterating in multiple places.
	 */
	*bpe = buf;
    305c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    305e:	601c      	str	r4, [r3, #0]
	*buf = 0;
    3060:	2300      	movs	r3, #0
    3062:	7023      	strb	r3, [r4, #0]
	return bps;
}
    3064:	4648      	mov	r0, r9
    3066:	b007      	add	sp, #28
    3068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (*--buf == '0') {
    306c:	461c      	mov	r4, r3
    306e:	e7bf      	b.n	2ff0 <encode_float+0x340>
			decexp = -decexp;
    3070:	426d      	negs	r5, r5
			*buf++ = '-';
    3072:	1ca2      	adds	r2, r4, #2
    3074:	232d      	movs	r3, #45	; 0x2d
    3076:	7063      	strb	r3, [r4, #1]
    3078:	e7c7      	b.n	300a <encode_float+0x35a>
		|| (conv->pad0_pre_exp > 0);
    307a:	68bb      	ldr	r3, [r7, #8]
    307c:	2b00      	cmp	r3, #0
    307e:	dde9      	ble.n	3054 <encode_float+0x3a4>
    3080:	f04f 0a01 	mov.w	sl, #1
    3084:	e7e6      	b.n	3054 <encode_float+0x3a4>
    3086:	bf00      	nop
    3088:	51eb851f 	.word	0x51eb851f
    308c:	66666667 	.word	0x66666667

00003090 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    3090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3094:	b097      	sub	sp, #92	; 0x5c
    3096:	4606      	mov	r6, r0
    3098:	460d      	mov	r5, r1
    309a:	4690      	mov	r8, r2
    309c:	9305      	str	r3, [sp, #20]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    309e:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    30a0:	f898 0000 	ldrb.w	r0, [r8]
    30a4:	2800      	cmp	r0, #0
    30a6:	f000 8345 	beq.w	3734 <z_cbvprintf_impl+0x6a4>
		if (*fp != '%') {
    30aa:	2825      	cmp	r0, #37	; 0x25
    30ac:	d008      	beq.n	30c0 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
    30ae:	f108 0801 	add.w	r8, r8, #1
    30b2:	4629      	mov	r1, r5
    30b4:	47b0      	blx	r6
    30b6:	2800      	cmp	r0, #0
    30b8:	f2c0 833d 	blt.w	3736 <z_cbvprintf_impl+0x6a6>
    30bc:	3401      	adds	r4, #1
			continue;
    30be:	e7ef      	b.n	30a0 <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    30c0:	2300      	movs	r3, #0
    30c2:	9308      	str	r3, [sp, #32]
    30c4:	9309      	str	r3, [sp, #36]	; 0x24
    30c6:	930a      	str	r3, [sp, #40]	; 0x28
    30c8:	930b      	str	r3, [sp, #44]	; 0x2c
    30ca:	930c      	str	r3, [sp, #48]	; 0x30
    30cc:	930d      	str	r3, [sp, #52]	; 0x34
		union argument_value *const value = &state.value;
		const char *sp = fp;
		int width = -1;
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
    30ce:	f10d 0255 	add.w	r2, sp, #85	; 0x55
    30d2:	9207      	str	r2, [sp, #28]
		char sign = 0;
    30d4:	f88d 301b 	strb.w	r3, [sp, #27]

		fp = extract_conversion(conv, sp);
    30d8:	4641      	mov	r1, r8
    30da:	a80a      	add	r0, sp, #40	; 0x28
    30dc:	f00c fa6d 	bl	f5ba <extract_conversion>
    30e0:	4681      	mov	r9, r0

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    30e2:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    30e6:	f013 0f01 	tst.w	r3, #1
    30ea:	f000 809e 	beq.w	322a <z_cbvprintf_impl+0x19a>
			width = va_arg(ap, int);
    30ee:	9b05      	ldr	r3, [sp, #20]
    30f0:	1d1a      	adds	r2, r3, #4
    30f2:	9205      	str	r2, [sp, #20]
    30f4:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    30f6:	2f00      	cmp	r7, #0
    30f8:	f2c0 808f 	blt.w	321a <z_cbvprintf_impl+0x18a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    30fc:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    3100:	f013 0f04 	tst.w	r3, #4
    3104:	f000 80a3 	beq.w	324e <z_cbvprintf_impl+0x1be>
			int arg = va_arg(ap, int);
    3108:	9b05      	ldr	r3, [sp, #20]
    310a:	1d1a      	adds	r2, r3, #4
    310c:	9205      	str	r2, [sp, #20]
    310e:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    3112:	f1ba 0f00 	cmp.w	sl, #0
    3116:	f2c0 8091 	blt.w	323c <z_cbvprintf_impl+0x1ac>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    311a:	2300      	movs	r3, #0
    311c:	930b      	str	r3, [sp, #44]	; 0x2c
		conv->pad0_pre_exp = 0;
    311e:	930c      	str	r3, [sp, #48]	; 0x30

		/* FP conversion requires knowing the precision. */
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
		    && (conv->specifier_cat == SPECIFIER_FP)
    3120:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    3124:	f003 0307 	and.w	r3, r3, #7
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    3128:	2b04      	cmp	r3, #4
    312a:	f000 8099 	beq.w	3260 <z_cbvprintf_impl+0x1d0>
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    312e:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    3132:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    3136:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
    313a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    313e:	2b01      	cmp	r3, #1
    3140:	f000 809e 	beq.w	3280 <z_cbvprintf_impl+0x1f0>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    3144:	2b02      	cmp	r3, #2
    3146:	f000 80e3 	beq.w	3310 <z_cbvprintf_impl+0x280>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    314a:	2b04      	cmp	r3, #4
    314c:	f000 8134 	beq.w	33b8 <z_cbvprintf_impl+0x328>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    3150:	2b03      	cmp	r3, #3
    3152:	f000 814b 	beq.w	33ec <z_cbvprintf_impl+0x35c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    3156:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
    315a:	f012 0f03 	tst.w	r2, #3
    315e:	f040 814b 	bne.w	33f8 <z_cbvprintf_impl+0x368>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    3162:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    3166:	3b25      	subs	r3, #37	; 0x25
    3168:	2b53      	cmp	r3, #83	; 0x53
    316a:	f200 81fc 	bhi.w	3566 <z_cbvprintf_impl+0x4d6>
    316e:	e8df f013 	tbh	[pc, r3, lsl #1]
    3172:	014f      	.short	0x014f
    3174:	01fa01fa 	.word	0x01fa01fa
    3178:	01fa01fa 	.word	0x01fa01fa
    317c:	01fa01fa 	.word	0x01fa01fa
    3180:	01fa01fa 	.word	0x01fa01fa
    3184:	01fa01fa 	.word	0x01fa01fa
    3188:	01fa01fa 	.word	0x01fa01fa
    318c:	01fa01fa 	.word	0x01fa01fa
    3190:	01fa01fa 	.word	0x01fa01fa
    3194:	01fa01fa 	.word	0x01fa01fa
    3198:	01fa01fa 	.word	0x01fa01fa
    319c:	01fa01fa 	.word	0x01fa01fa
    31a0:	01fa01fa 	.word	0x01fa01fa
    31a4:	01fa01fa 	.word	0x01fa01fa
    31a8:	01fc01fa 	.word	0x01fc01fa
    31ac:	01fa01fa 	.word	0x01fa01fa
    31b0:	01fc01fa 	.word	0x01fc01fa
    31b4:	01fc01fc 	.word	0x01fc01fc
    31b8:	01fa01fa 	.word	0x01fa01fa
    31bc:	01fa01fa 	.word	0x01fa01fa
    31c0:	01fa01fa 	.word	0x01fa01fa
    31c4:	01fa01fa 	.word	0x01fa01fa
    31c8:	01fa01fa 	.word	0x01fa01fa
    31cc:	01fa01fa 	.word	0x01fa01fa
    31d0:	01fa01fa 	.word	0x01fa01fa
    31d4:	01fa01fa 	.word	0x01fa01fa
    31d8:	01fa01b1 	.word	0x01fa01b1
    31dc:	01fa01fa 	.word	0x01fa01fa
    31e0:	01fa01fa 	.word	0x01fa01fa
    31e4:	01fa01fa 	.word	0x01fa01fa
    31e8:	01fc01fa 	.word	0x01fc01fa
    31ec:	019c01fa 	.word	0x019c01fa
    31f0:	01fc01a5 	.word	0x01fc01a5
    31f4:	01fc01fc 	.word	0x01fc01fc
    31f8:	01a501fa 	.word	0x01a501fa
    31fc:	01fa01fa 	.word	0x01fa01fa
    3200:	01fa01fa 	.word	0x01fa01fa
    3204:	01b101f5 	.word	0x01b101f5
    3208:	01fa01dc 	.word	0x01fa01dc
    320c:	015701fa 	.word	0x015701fa
    3210:	01b101fa 	.word	0x01b101fa
    3214:	01fa01fa 	.word	0x01fa01fa
    3218:	01b1      	.short	0x01b1
				conv->flag_dash = true;
    321a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    321e:	f043 0304 	orr.w	r3, r3, #4
    3222:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
				width = -width;
    3226:	427f      	negs	r7, r7
    3228:	e768      	b.n	30fc <z_cbvprintf_impl+0x6c>
		} else if (conv->width_present) {
    322a:	f99d 3028 	ldrsb.w	r3, [sp, #40]	; 0x28
    322e:	2b00      	cmp	r3, #0
    3230:	db02      	blt.n	3238 <z_cbvprintf_impl+0x1a8>
		int width = -1;
    3232:	f04f 37ff 	mov.w	r7, #4294967295
    3236:	e761      	b.n	30fc <z_cbvprintf_impl+0x6c>
			width = conv->width_value;
    3238:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    323a:	e75f      	b.n	30fc <z_cbvprintf_impl+0x6c>
				conv->prec_present = false;
    323c:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    3240:	f36f 0341 	bfc	r3, #1, #1
    3244:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
		int precision = -1;
    3248:	f04f 3aff 	mov.w	sl, #4294967295
    324c:	e765      	b.n	311a <z_cbvprintf_impl+0x8a>
		} else if (conv->prec_present) {
    324e:	f013 0f02 	tst.w	r3, #2
    3252:	d002      	beq.n	325a <z_cbvprintf_impl+0x1ca>
			precision = conv->prec_value;
    3254:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    3258:	e75f      	b.n	311a <z_cbvprintf_impl+0x8a>
		int precision = -1;
    325a:	f04f 3aff 	mov.w	sl, #4294967295
    325e:	e75c      	b.n	311a <z_cbvprintf_impl+0x8a>
		    && !conv->prec_present) {
    3260:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    3264:	f013 0f02 	tst.w	r3, #2
    3268:	f47f af61 	bne.w	312e <z_cbvprintf_impl+0x9e>
			if (conv->specifier_a) {
    326c:	f99d 3029 	ldrsb.w	r3, [sp, #41]	; 0x29
    3270:	2b00      	cmp	r3, #0
    3272:	db02      	blt.n	327a <z_cbvprintf_impl+0x1ea>
				precision = 6;
    3274:	f04f 0a06 	mov.w	sl, #6
    3278:	e759      	b.n	312e <z_cbvprintf_impl+0x9e>
				precision = FRACTION_HEX;
    327a:	f04f 0a0d 	mov.w	sl, #13
    327e:	e756      	b.n	312e <z_cbvprintf_impl+0x9e>
			switch (length_mod) {
    3280:	1ecb      	subs	r3, r1, #3
    3282:	2b04      	cmp	r3, #4
    3284:	d804      	bhi.n	3290 <z_cbvprintf_impl+0x200>
    3286:	e8df f003 	tbb	[pc, r3]
    328a:	1d0b      	.short	0x1d0b
    328c:	3529      	.short	0x3529
    328e:	35          	.byte	0x35
    328f:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    3290:	9b05      	ldr	r3, [sp, #20]
    3292:	1d1a      	adds	r2, r3, #4
    3294:	9205      	str	r2, [sp, #20]
    3296:	681b      	ldr	r3, [r3, #0]
    3298:	17da      	asrs	r2, r3, #31
    329a:	9308      	str	r3, [sp, #32]
    329c:	9209      	str	r2, [sp, #36]	; 0x24
				break;
    329e:	e006      	b.n	32ae <z_cbvprintf_impl+0x21e>
					value->sint = va_arg(ap, long);
    32a0:	9b05      	ldr	r3, [sp, #20]
    32a2:	1d1a      	adds	r2, r3, #4
    32a4:	9205      	str	r2, [sp, #20]
    32a6:	681b      	ldr	r3, [r3, #0]
    32a8:	17da      	asrs	r2, r3, #31
    32aa:	9308      	str	r3, [sp, #32]
    32ac:	9209      	str	r2, [sp, #36]	; 0x24
			if (length_mod == LENGTH_HH) {
    32ae:	2901      	cmp	r1, #1
    32b0:	d028      	beq.n	3304 <z_cbvprintf_impl+0x274>
			} else if (length_mod == LENGTH_H) {
    32b2:	2902      	cmp	r1, #2
    32b4:	f47f af4f 	bne.w	3156 <z_cbvprintf_impl+0xc6>
				value->sint = (short)value->sint;
    32b8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
    32bc:	17da      	asrs	r2, r3, #31
    32be:	9308      	str	r3, [sp, #32]
    32c0:	9209      	str	r2, [sp, #36]	; 0x24
    32c2:	e748      	b.n	3156 <z_cbvprintf_impl+0xc6>
					(sint_value_type)va_arg(ap, long long);
    32c4:	9b05      	ldr	r3, [sp, #20]
    32c6:	3307      	adds	r3, #7
    32c8:	f023 0307 	bic.w	r3, r3, #7
    32cc:	f103 0208 	add.w	r2, r3, #8
    32d0:	9205      	str	r2, [sp, #20]
    32d2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    32d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
				break;
    32da:	e7e8      	b.n	32ae <z_cbvprintf_impl+0x21e>
					(sint_value_type)va_arg(ap, intmax_t);
    32dc:	9b05      	ldr	r3, [sp, #20]
    32de:	3307      	adds	r3, #7
    32e0:	f023 0307 	bic.w	r3, r3, #7
    32e4:	f103 0208 	add.w	r2, r3, #8
    32e8:	9205      	str	r2, [sp, #20]
    32ea:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    32ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
				break;
    32f2:	e7dc      	b.n	32ae <z_cbvprintf_impl+0x21e>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    32f4:	9b05      	ldr	r3, [sp, #20]
    32f6:	1d1a      	adds	r2, r3, #4
    32f8:	9205      	str	r2, [sp, #20]
    32fa:	681b      	ldr	r3, [r3, #0]
    32fc:	17da      	asrs	r2, r3, #31
				value->sint =
    32fe:	9308      	str	r3, [sp, #32]
    3300:	9209      	str	r2, [sp, #36]	; 0x24
				break;
    3302:	e7d4      	b.n	32ae <z_cbvprintf_impl+0x21e>
				value->sint = (signed char)value->sint;
    3304:	f99d 3020 	ldrsb.w	r3, [sp, #32]
    3308:	17da      	asrs	r2, r3, #31
    330a:	9308      	str	r3, [sp, #32]
    330c:	9209      	str	r2, [sp, #36]	; 0x24
    330e:	e722      	b.n	3156 <z_cbvprintf_impl+0xc6>
			switch (length_mod) {
    3310:	1ecb      	subs	r3, r1, #3
    3312:	2b04      	cmp	r3, #4
    3314:	d804      	bhi.n	3320 <z_cbvprintf_impl+0x290>
    3316:	e8df f003 	tbb	[pc, r3]
    331a:	1f0b      	.short	0x1f0b
    331c:	4135      	.short	0x4135
    331e:	41          	.byte	0x41
    331f:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    3320:	9b05      	ldr	r3, [sp, #20]
    3322:	1d1a      	adds	r2, r3, #4
    3324:	9205      	str	r2, [sp, #20]
    3326:	681b      	ldr	r3, [r3, #0]
    3328:	9308      	str	r3, [sp, #32]
    332a:	2300      	movs	r3, #0
    332c:	9309      	str	r3, [sp, #36]	; 0x24
				break;
    332e:	e01e      	b.n	336e <z_cbvprintf_impl+0x2de>
				    && (conv->specifier == 'c')) {
    3330:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
				if ((!WCHAR_IS_SIGNED)
    3334:	2b63      	cmp	r3, #99	; 0x63
    3336:	d007      	beq.n	3348 <z_cbvprintf_impl+0x2b8>
					value->uint = va_arg(ap, unsigned long);
    3338:	9b05      	ldr	r3, [sp, #20]
    333a:	1d1a      	adds	r2, r3, #4
    333c:	9205      	str	r2, [sp, #20]
    333e:	681b      	ldr	r3, [r3, #0]
    3340:	9308      	str	r3, [sp, #32]
    3342:	2300      	movs	r3, #0
    3344:	9309      	str	r3, [sp, #36]	; 0x24
    3346:	e012      	b.n	336e <z_cbvprintf_impl+0x2de>
					value->uint = (wchar_t)va_arg(ap,
    3348:	9b05      	ldr	r3, [sp, #20]
    334a:	1d1a      	adds	r2, r3, #4
    334c:	9205      	str	r2, [sp, #20]
    334e:	681b      	ldr	r3, [r3, #0]
    3350:	9308      	str	r3, [sp, #32]
    3352:	2300      	movs	r3, #0
    3354:	9309      	str	r3, [sp, #36]	; 0x24
    3356:	e00a      	b.n	336e <z_cbvprintf_impl+0x2de>
					(uint_value_type)va_arg(ap,
    3358:	9b05      	ldr	r3, [sp, #20]
    335a:	3307      	adds	r3, #7
    335c:	f023 0307 	bic.w	r3, r3, #7
    3360:	f103 0208 	add.w	r2, r3, #8
    3364:	9205      	str	r2, [sp, #20]
    3366:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    336a:	e9cd 2308 	strd	r2, r3, [sp, #32]
			if (length_mod == LENGTH_HH) {
    336e:	2901      	cmp	r1, #1
    3370:	d01c      	beq.n	33ac <z_cbvprintf_impl+0x31c>
			} else if (length_mod == LENGTH_H) {
    3372:	2902      	cmp	r1, #2
    3374:	f47f aeef 	bne.w	3156 <z_cbvprintf_impl+0xc6>
				value->uint = (unsigned short)value->uint;
    3378:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    337c:	9308      	str	r3, [sp, #32]
    337e:	2300      	movs	r3, #0
    3380:	9309      	str	r3, [sp, #36]	; 0x24
    3382:	e6e8      	b.n	3156 <z_cbvprintf_impl+0xc6>
					(uint_value_type)va_arg(ap,
    3384:	9b05      	ldr	r3, [sp, #20]
    3386:	3307      	adds	r3, #7
    3388:	f023 0307 	bic.w	r3, r3, #7
    338c:	f103 0208 	add.w	r2, r3, #8
    3390:	9205      	str	r2, [sp, #20]
    3392:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    3396:	e9cd 2308 	strd	r2, r3, [sp, #32]
				break;
    339a:	e7e8      	b.n	336e <z_cbvprintf_impl+0x2de>
					(uint_value_type)va_arg(ap, size_t);
    339c:	9b05      	ldr	r3, [sp, #20]
    339e:	1d1a      	adds	r2, r3, #4
    33a0:	9205      	str	r2, [sp, #20]
    33a2:	681b      	ldr	r3, [r3, #0]
				value->uint =
    33a4:	9308      	str	r3, [sp, #32]
    33a6:	2300      	movs	r3, #0
    33a8:	9309      	str	r3, [sp, #36]	; 0x24
				break;
    33aa:	e7e0      	b.n	336e <z_cbvprintf_impl+0x2de>
				value->uint = (unsigned char)value->uint;
    33ac:	f89d 3020 	ldrb.w	r3, [sp, #32]
    33b0:	9308      	str	r3, [sp, #32]
    33b2:	2300      	movs	r3, #0
    33b4:	9309      	str	r3, [sp, #36]	; 0x24
    33b6:	e6ce      	b.n	3156 <z_cbvprintf_impl+0xc6>
			if (length_mod == LENGTH_UPPER_L) {
    33b8:	2908      	cmp	r1, #8
    33ba:	d00b      	beq.n	33d4 <z_cbvprintf_impl+0x344>
				value->dbl = va_arg(ap, double);
    33bc:	9b05      	ldr	r3, [sp, #20]
    33be:	3307      	adds	r3, #7
    33c0:	f023 0307 	bic.w	r3, r3, #7
    33c4:	f103 0208 	add.w	r2, r3, #8
    33c8:	9205      	str	r2, [sp, #20]
    33ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    33ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
    33d2:	e6c0      	b.n	3156 <z_cbvprintf_impl+0xc6>
				value->ldbl = va_arg(ap, long double);
    33d4:	9b05      	ldr	r3, [sp, #20]
    33d6:	3307      	adds	r3, #7
    33d8:	f023 0307 	bic.w	r3, r3, #7
    33dc:	f103 0208 	add.w	r2, r3, #8
    33e0:	9205      	str	r2, [sp, #20]
    33e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    33e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
    33ea:	e6b4      	b.n	3156 <z_cbvprintf_impl+0xc6>
			value->ptr = va_arg(ap, void *);
    33ec:	9b05      	ldr	r3, [sp, #20]
    33ee:	1d1a      	adds	r2, r3, #4
    33f0:	9205      	str	r2, [sp, #20]
    33f2:	681b      	ldr	r3, [r3, #0]
    33f4:	9308      	str	r3, [sp, #32]
    33f6:	e6ae      	b.n	3156 <z_cbvprintf_impl+0xc6>
			OUTS(sp, fp);
    33f8:	464b      	mov	r3, r9
    33fa:	4642      	mov	r2, r8
    33fc:	4629      	mov	r1, r5
    33fe:	4630      	mov	r0, r6
    3400:	f00c f9c7 	bl	f792 <outs>
    3404:	2800      	cmp	r0, #0
    3406:	f2c0 8196 	blt.w	3736 <z_cbvprintf_impl+0x6a6>
    340a:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    340c:	46c8      	mov	r8, r9
			continue;
    340e:	e647      	b.n	30a0 <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
    3410:	4629      	mov	r1, r5
    3412:	2025      	movs	r0, #37	; 0x25
    3414:	47b0      	blx	r6
    3416:	2800      	cmp	r0, #0
    3418:	f2c0 818d 	blt.w	3736 <z_cbvprintf_impl+0x6a6>
    341c:	3401      	adds	r4, #1
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    341e:	e0a2      	b.n	3566 <z_cbvprintf_impl+0x4d6>
			bps = (const char *)value->ptr;
    3420:	f8dd 8020 	ldr.w	r8, [sp, #32]
			if (precision >= 0) {
    3424:	f1ba 0f00 	cmp.w	sl, #0
    3428:	db3b      	blt.n	34a2 <z_cbvprintf_impl+0x412>
				len = strnlen(bps, precision);
    342a:	4651      	mov	r1, sl
    342c:	4640      	mov	r0, r8
    342e:	f00f fc5f 	bl	12cf0 <strnlen>
			bpe = bps + len;
    3432:	4440      	add	r0, r8
    3434:	9007      	str	r0, [sp, #28]
		if (bps == NULL) {
    3436:	f1b8 0f00 	cmp.w	r8, #0
    343a:	f000 8094 	beq.w	3566 <z_cbvprintf_impl+0x4d6>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    343e:	9b07      	ldr	r3, [sp, #28]
    3440:	eba3 0308 	sub.w	r3, r3, r8
		int pad_len = 0;

		if (sign != 0) {
    3444:	f89d 001b 	ldrb.w	r0, [sp, #27]
    3448:	b100      	cbz	r0, 344c <z_cbvprintf_impl+0x3bc>
			nj_len += 1U;
    344a:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
    344c:	f89d 102a 	ldrb.w	r1, [sp, #42]	; 0x2a
    3450:	f011 0f10 	tst.w	r1, #16
    3454:	f000 8098 	beq.w	3588 <z_cbvprintf_impl+0x4f8>
			nj_len += 2U;
    3458:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    345a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    345c:	4413      	add	r3, r2
		if (conv->pad_fp) {
    345e:	f011 0f40 	tst.w	r1, #64	; 0x40
    3462:	d001      	beq.n	3468 <z_cbvprintf_impl+0x3d8>
			nj_len += conv->pad0_pre_exp;
    3464:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3466:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    3468:	2f00      	cmp	r7, #0
    346a:	f340 80a5 	ble.w	35b8 <z_cbvprintf_impl+0x528>
			width -= (int)nj_len;
    346e:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    3470:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    3474:	f013 0f04 	tst.w	r3, #4
    3478:	f040 809e 	bne.w	35b8 <z_cbvprintf_impl+0x528>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    347c:	f013 0f40 	tst.w	r3, #64	; 0x40
    3480:	f000 8093 	beq.w	35aa <z_cbvprintf_impl+0x51a>
					if (sign != 0) {
    3484:	2800      	cmp	r0, #0
    3486:	f000 8093 	beq.w	35b0 <z_cbvprintf_impl+0x520>
						OUTC(sign);
    348a:	4629      	mov	r1, r5
    348c:	47b0      	blx	r6
    348e:	2800      	cmp	r0, #0
    3490:	f2c0 8151 	blt.w	3736 <z_cbvprintf_impl+0x6a6>
    3494:	3401      	adds	r4, #1
						sign = 0;
    3496:	2300      	movs	r3, #0
    3498:	f88d 301b 	strb.w	r3, [sp, #27]
					}
					pad = '0';
    349c:	f04f 0a30 	mov.w	sl, #48	; 0x30
    34a0:	e088      	b.n	35b4 <z_cbvprintf_impl+0x524>
				len = strlen(bps);
    34a2:	4640      	mov	r0, r8
    34a4:	f00f fc1b 	bl	12cde <strlen>
    34a8:	e7c3      	b.n	3432 <z_cbvprintf_impl+0x3a2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    34aa:	9b08      	ldr	r3, [sp, #32]
    34ac:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
			bpe = buf + 1;
    34b0:	f10d 033d 	add.w	r3, sp, #61	; 0x3d
    34b4:	9307      	str	r3, [sp, #28]
			bps = buf;
    34b6:	f10d 083c 	add.w	r8, sp, #60	; 0x3c
    34ba:	e7c0      	b.n	343e <z_cbvprintf_impl+0x3ae>
			if (conv->flag_plus) {
    34bc:	f012 0f08 	tst.w	r2, #8
    34c0:	d023      	beq.n	350a <z_cbvprintf_impl+0x47a>
				sign = '+';
    34c2:	232b      	movs	r3, #43	; 0x2b
    34c4:	f88d 301b 	strb.w	r3, [sp, #27]
			sint = value->sint;
    34c8:	9a08      	ldr	r2, [sp, #32]
    34ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
			if (sint < 0) {
    34cc:	2b00      	cmp	r3, #0
    34ce:	db23      	blt.n	3518 <z_cbvprintf_impl+0x488>
				value->uint = (uint_value_type)sint;
    34d0:	9208      	str	r2, [sp, #32]
    34d2:	9309      	str	r3, [sp, #36]	; 0x24
			bps = encode_uint(value->uint, conv, buf, bpe);
    34d4:	9b07      	ldr	r3, [sp, #28]
    34d6:	9300      	str	r3, [sp, #0]
    34d8:	ab0f      	add	r3, sp, #60	; 0x3c
    34da:	aa0a      	add	r2, sp, #40	; 0x28
    34dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    34e0:	f00c f8e8 	bl	f6b4 <encode_uint>
    34e4:	4680      	mov	r8, r0
			if (precision >= 0) {
    34e6:	f1ba 0f00 	cmp.w	sl, #0
    34ea:	dba4      	blt.n	3436 <z_cbvprintf_impl+0x3a6>
				size_t len = bpe - bps;
    34ec:	9b07      	ldr	r3, [sp, #28]
    34ee:	eba3 0308 	sub.w	r3, r3, r8
				conv->flag_zero = false;
    34f2:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
    34f6:	f36f 1286 	bfc	r2, #6, #1
    34fa:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
				if (len < (size_t)precision) {
    34fe:	459a      	cmp	sl, r3
    3500:	d999      	bls.n	3436 <z_cbvprintf_impl+0x3a6>
					conv->pad0_value = precision - (int)len;
    3502:	ebaa 0303 	sub.w	r3, sl, r3
    3506:	930b      	str	r3, [sp, #44]	; 0x2c
    3508:	e795      	b.n	3436 <z_cbvprintf_impl+0x3a6>
			} else if (conv->flag_space) {
    350a:	f012 0f10 	tst.w	r2, #16
    350e:	d0db      	beq.n	34c8 <z_cbvprintf_impl+0x438>
				sign = ' ';
    3510:	2320      	movs	r3, #32
    3512:	f88d 301b 	strb.w	r3, [sp, #27]
    3516:	e7d7      	b.n	34c8 <z_cbvprintf_impl+0x438>
				sign = '-';
    3518:	212d      	movs	r1, #45	; 0x2d
    351a:	f88d 101b 	strb.w	r1, [sp, #27]
				value->uint = (uint_value_type)-sint;
    351e:	4252      	negs	r2, r2
    3520:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    3524:	9208      	str	r2, [sp, #32]
    3526:	9309      	str	r3, [sp, #36]	; 0x24
    3528:	e7d4      	b.n	34d4 <z_cbvprintf_impl+0x444>
			if (value->ptr != NULL) {
    352a:	9808      	ldr	r0, [sp, #32]
    352c:	b920      	cbnz	r0, 3538 <z_cbvprintf_impl+0x4a8>
			bpe = bps + 5;
    352e:	4b83      	ldr	r3, [pc, #524]	; (373c <z_cbvprintf_impl+0x6ac>)
    3530:	9307      	str	r3, [sp, #28]
			bps = "(nil)";
    3532:	f1a3 0805 	sub.w	r8, r3, #5
    3536:	e782      	b.n	343e <z_cbvprintf_impl+0x3ae>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3538:	9b07      	ldr	r3, [sp, #28]
    353a:	9300      	str	r3, [sp, #0]
    353c:	ab0f      	add	r3, sp, #60	; 0x3c
    353e:	aa0a      	add	r2, sp, #40	; 0x28
    3540:	2100      	movs	r1, #0
    3542:	f00c f8b7 	bl	f6b4 <encode_uint>
    3546:	4680      	mov	r8, r0
				conv->altform_0c = true;
    3548:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    354c:	f043 0310 	orr.w	r3, r3, #16
    3550:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
				conv->specifier = 'x';
    3554:	2378      	movs	r3, #120	; 0x78
    3556:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
				goto prec_int_pad0;
    355a:	e7c4      	b.n	34e6 <z_cbvprintf_impl+0x456>
				store_count(conv, value->ptr, count);
    355c:	4622      	mov	r2, r4
    355e:	9908      	ldr	r1, [sp, #32]
    3560:	a80a      	add	r0, sp, #40	; 0x28
    3562:	f00c f8f7 	bl	f754 <store_count>
		fp = extract_conversion(conv, sp);
    3566:	46c8      	mov	r8, r9
			continue;
    3568:	e59a      	b.n	30a0 <z_cbvprintf_impl+0x10>
				bps = encode_float(value->dbl, conv, precision,
    356a:	ab07      	add	r3, sp, #28
    356c:	9302      	str	r3, [sp, #8]
    356e:	ab0f      	add	r3, sp, #60	; 0x3c
    3570:	9301      	str	r3, [sp, #4]
    3572:	f10d 031b 	add.w	r3, sp, #27
    3576:	9300      	str	r3, [sp, #0]
    3578:	4653      	mov	r3, sl
    357a:	aa0a      	add	r2, sp, #40	; 0x28
    357c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    3580:	f7ff fb96 	bl	2cb0 <encode_float>
    3584:	4680      	mov	r8, r0
			break;
    3586:	e756      	b.n	3436 <z_cbvprintf_impl+0x3a6>
		} else if (conv->altform_0) {
    3588:	f011 0f08 	tst.w	r1, #8
    358c:	f43f af65 	beq.w	345a <z_cbvprintf_impl+0x3ca>
			nj_len += 1U;
    3590:	3301      	adds	r3, #1
    3592:	e762      	b.n	345a <z_cbvprintf_impl+0x3ca>
				}

				while (width-- > 0) {
					OUTC(pad);
    3594:	3401      	adds	r4, #1
				while (width-- > 0) {
    3596:	463b      	mov	r3, r7
    3598:	1e5f      	subs	r7, r3, #1
    359a:	2b00      	cmp	r3, #0
    359c:	dd0c      	ble.n	35b8 <z_cbvprintf_impl+0x528>
					OUTC(pad);
    359e:	4629      	mov	r1, r5
    35a0:	4650      	mov	r0, sl
    35a2:	47b0      	blx	r6
    35a4:	2800      	cmp	r0, #0
    35a6:	daf5      	bge.n	3594 <z_cbvprintf_impl+0x504>
    35a8:	e0c5      	b.n	3736 <z_cbvprintf_impl+0x6a6>
				char pad = ' ';
    35aa:	f04f 0a20 	mov.w	sl, #32
    35ae:	e001      	b.n	35b4 <z_cbvprintf_impl+0x524>
					pad = '0';
    35b0:	f04f 0a30 	mov.w	sl, #48	; 0x30
    35b4:	463b      	mov	r3, r7
    35b6:	e7ef      	b.n	3598 <z_cbvprintf_impl+0x508>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    35b8:	f89d 001b 	ldrb.w	r0, [sp, #27]
    35bc:	b128      	cbz	r0, 35ca <z_cbvprintf_impl+0x53a>
			OUTC(sign);
    35be:	4629      	mov	r1, r5
    35c0:	47b0      	blx	r6
    35c2:	2800      	cmp	r0, #0
    35c4:	f2c0 80b7 	blt.w	3736 <z_cbvprintf_impl+0x6a6>
    35c8:	3401      	adds	r4, #1
		}

		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    35ca:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    35ce:	f013 0f40 	tst.w	r3, #64	; 0x40
    35d2:	d072      	beq.n	36ba <z_cbvprintf_impl+0x62a>
			const char *cp = bps;

			if (conv->specifier_a) {
    35d4:	f99d 3029 	ldrsb.w	r3, [sp, #41]	; 0x29
    35d8:	2b00      	cmp	r3, #0
    35da:	db0e      	blt.n	35fa <z_cbvprintf_impl+0x56a>
				/* Only padding is pre_exp */
				while (*cp != 'p') {
					OUTC(*cp++);
				}
			} else {
				while (isdigit((unsigned char)*cp) != 0) {
    35dc:	f898 0000 	ldrb.w	r0, [r8]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    35e0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    35e4:	2b09      	cmp	r3, #9
    35e6:	d815      	bhi.n	3614 <z_cbvprintf_impl+0x584>
					OUTC(*cp++);
    35e8:	f108 0801 	add.w	r8, r8, #1
    35ec:	4629      	mov	r1, r5
    35ee:	47b0      	blx	r6
    35f0:	2800      	cmp	r0, #0
    35f2:	f2c0 80a0 	blt.w	3736 <z_cbvprintf_impl+0x6a6>
    35f6:	3401      	adds	r4, #1
    35f8:	e7f0      	b.n	35dc <z_cbvprintf_impl+0x54c>
				while (*cp != 'p') {
    35fa:	f898 0000 	ldrb.w	r0, [r8]
    35fe:	2870      	cmp	r0, #112	; 0x70
    3600:	d044      	beq.n	368c <z_cbvprintf_impl+0x5fc>
					OUTC(*cp++);
    3602:	f108 0801 	add.w	r8, r8, #1
    3606:	4629      	mov	r1, r5
    3608:	47b0      	blx	r6
    360a:	2800      	cmp	r0, #0
    360c:	f2c0 8093 	blt.w	3736 <z_cbvprintf_impl+0x6a6>
    3610:	3401      	adds	r4, #1
    3612:	e7f2      	b.n	35fa <z_cbvprintf_impl+0x56a>
				}

				pad_len = conv->pad0_value;
    3614:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
				if (!conv->pad_postdp) {
    3618:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    361c:	f013 0f20 	tst.w	r3, #32
    3620:	d011      	beq.n	3646 <z_cbvprintf_impl+0x5b6>
					while (pad_len-- > 0) {
						OUTC('0');
					}
				}

				if (*cp == '.') {
    3622:	f898 0000 	ldrb.w	r0, [r8]
    3626:	282e      	cmp	r0, #46	; 0x2e
    3628:	d01c      	beq.n	3664 <z_cbvprintf_impl+0x5d4>
					 */
					while (pad_len-- > 0) {
						OUTC('0');
					}
				}
				while (isdigit((unsigned char)*cp) != 0) {
    362a:	f898 0000 	ldrb.w	r0, [r8]
    362e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    3632:	2b09      	cmp	r3, #9
    3634:	d82a      	bhi.n	368c <z_cbvprintf_impl+0x5fc>
					OUTC(*cp++);
    3636:	f108 0801 	add.w	r8, r8, #1
    363a:	4629      	mov	r1, r5
    363c:	47b0      	blx	r6
    363e:	2800      	cmp	r0, #0
    3640:	db79      	blt.n	3736 <z_cbvprintf_impl+0x6a6>
    3642:	3401      	adds	r4, #1
    3644:	e7f1      	b.n	362a <z_cbvprintf_impl+0x59a>
					while (pad_len-- > 0) {
    3646:	f10a 3bff 	add.w	fp, sl, #4294967295
    364a:	f1ba 0f00 	cmp.w	sl, #0
    364e:	dd07      	ble.n	3660 <z_cbvprintf_impl+0x5d0>
						OUTC('0');
    3650:	4629      	mov	r1, r5
    3652:	2030      	movs	r0, #48	; 0x30
    3654:	47b0      	blx	r6
    3656:	2800      	cmp	r0, #0
    3658:	db6d      	blt.n	3736 <z_cbvprintf_impl+0x6a6>
    365a:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
    365c:	46da      	mov	sl, fp
    365e:	e7f2      	b.n	3646 <z_cbvprintf_impl+0x5b6>
    3660:	46da      	mov	sl, fp
    3662:	e7de      	b.n	3622 <z_cbvprintf_impl+0x592>
					OUTC(*cp++);
    3664:	f108 0801 	add.w	r8, r8, #1
    3668:	4629      	mov	r1, r5
    366a:	47b0      	blx	r6
    366c:	2800      	cmp	r0, #0
    366e:	db62      	blt.n	3736 <z_cbvprintf_impl+0x6a6>
    3670:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
    3672:	f10a 3bff 	add.w	fp, sl, #4294967295
    3676:	f1ba 0f00 	cmp.w	sl, #0
    367a:	ddd6      	ble.n	362a <z_cbvprintf_impl+0x59a>
						OUTC('0');
    367c:	4629      	mov	r1, r5
    367e:	2030      	movs	r0, #48	; 0x30
    3680:	47b0      	blx	r6
    3682:	2800      	cmp	r0, #0
    3684:	db57      	blt.n	3736 <z_cbvprintf_impl+0x6a6>
    3686:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
    3688:	46da      	mov	sl, fp
    368a:	e7f2      	b.n	3672 <z_cbvprintf_impl+0x5e2>
				}
			}

			pad_len = conv->pad0_pre_exp;
    368c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			while (pad_len-- > 0) {
    368e:	f103 3aff 	add.w	sl, r3, #4294967295
    3692:	2b00      	cmp	r3, #0
    3694:	dd07      	ble.n	36a6 <z_cbvprintf_impl+0x616>
				OUTC('0');
    3696:	4629      	mov	r1, r5
    3698:	2030      	movs	r0, #48	; 0x30
    369a:	47b0      	blx	r6
    369c:	2800      	cmp	r0, #0
    369e:	db4a      	blt.n	3736 <z_cbvprintf_impl+0x6a6>
    36a0:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    36a2:	4653      	mov	r3, sl
    36a4:	e7f3      	b.n	368e <z_cbvprintf_impl+0x5fe>
			}

			OUTS(cp, bpe);
    36a6:	9b07      	ldr	r3, [sp, #28]
    36a8:	4642      	mov	r2, r8
    36aa:	4629      	mov	r1, r5
    36ac:	4630      	mov	r0, r6
    36ae:	f00c f870 	bl	f792 <outs>
    36b2:	2800      	cmp	r0, #0
    36b4:	db3f      	blt.n	3736 <z_cbvprintf_impl+0x6a6>
    36b6:	4404      	add	r4, r0
    36b8:	e032      	b.n	3720 <z_cbvprintf_impl+0x690>
		} else {
			if (conv->altform_0c | conv->altform_0) {
    36ba:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    36be:	f3c3 1200 	ubfx	r2, r3, #4, #1
    36c2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    36c6:	431a      	orrs	r2, r3
    36c8:	d005      	beq.n	36d6 <z_cbvprintf_impl+0x646>
				OUTC('0');
    36ca:	4629      	mov	r1, r5
    36cc:	2030      	movs	r0, #48	; 0x30
    36ce:	47b0      	blx	r6
    36d0:	2800      	cmp	r0, #0
    36d2:	db30      	blt.n	3736 <z_cbvprintf_impl+0x6a6>
    36d4:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    36d6:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    36da:	f013 0f10 	tst.w	r3, #16
    36de:	d006      	beq.n	36ee <z_cbvprintf_impl+0x65e>
				OUTC(conv->specifier);
    36e0:	4629      	mov	r1, r5
    36e2:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
    36e6:	47b0      	blx	r6
    36e8:	2800      	cmp	r0, #0
    36ea:	db24      	blt.n	3736 <z_cbvprintf_impl+0x6a6>
    36ec:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    36ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			while (pad_len-- > 0) {
    36f0:	f103 3aff 	add.w	sl, r3, #4294967295
    36f4:	2b00      	cmp	r3, #0
    36f6:	dd07      	ble.n	3708 <z_cbvprintf_impl+0x678>
				OUTC('0');
    36f8:	4629      	mov	r1, r5
    36fa:	2030      	movs	r0, #48	; 0x30
    36fc:	47b0      	blx	r6
    36fe:	2800      	cmp	r0, #0
    3700:	db19      	blt.n	3736 <z_cbvprintf_impl+0x6a6>
    3702:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    3704:	4653      	mov	r3, sl
    3706:	e7f3      	b.n	36f0 <z_cbvprintf_impl+0x660>
			}

			OUTS(bps, bpe);
    3708:	9b07      	ldr	r3, [sp, #28]
    370a:	4642      	mov	r2, r8
    370c:	4629      	mov	r1, r5
    370e:	4630      	mov	r0, r6
    3710:	f00c f83f 	bl	f792 <outs>
    3714:	2800      	cmp	r0, #0
    3716:	db0e      	blt.n	3736 <z_cbvprintf_impl+0x6a6>
    3718:	4404      	add	r4, r0
    371a:	e001      	b.n	3720 <z_cbvprintf_impl+0x690>
		}

		/* Finish left justification */
		while (width > 0) {
			OUTC(' ');
    371c:	3401      	adds	r4, #1
			--width;
    371e:	3f01      	subs	r7, #1
		while (width > 0) {
    3720:	2f00      	cmp	r7, #0
    3722:	dd05      	ble.n	3730 <z_cbvprintf_impl+0x6a0>
			OUTC(' ');
    3724:	4629      	mov	r1, r5
    3726:	2020      	movs	r0, #32
    3728:	47b0      	blx	r6
    372a:	2800      	cmp	r0, #0
    372c:	daf6      	bge.n	371c <z_cbvprintf_impl+0x68c>
    372e:	e002      	b.n	3736 <z_cbvprintf_impl+0x6a6>
		fp = extract_conversion(conv, sp);
    3730:	46c8      	mov	r8, r9
    3732:	e4b5      	b.n	30a0 <z_cbvprintf_impl+0x10>
		}
	}

	return count;
    3734:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    3736:	b017      	add	sp, #92	; 0x5c
    3738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    373c:	00015b7d 	.word	0x00015b7d

00003740 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    3740:	b508      	push	{r3, lr}
    3742:	4604      	mov	r4, r0
    3744:	f04f 0220 	mov.w	r2, #32
    3748:	f3ef 8311 	mrs	r3, BASEPRI
    374c:	f382 8812 	msr	BASEPRI_MAX, r2
    3750:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
    3754:	f008 fb10 	bl	bd78 <sys_clock_disable>
	}

	sys_arch_reboot(type);
    3758:	4620      	mov	r0, r4
    375a:	f00f fd3c 	bl	131d6 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    375e:	4803      	ldr	r0, [pc, #12]	; (376c <sys_reboot+0x2c>)
    3760:	f00b fbcf 	bl	ef02 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    3764:	f004 fa12 	bl	7b8c <arch_cpu_idle>
    3768:	e7fc      	b.n	3764 <sys_reboot+0x24>
    376a:	bf00      	nop
    376c:	00015b80 	.word	0x00015b80

00003770 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    3770:	f008 bb6e 	b.w	be50 <SystemInit>

00003774 <nvs_startup>:
	}
	return 0;
}

static int nvs_startup(struct nvs_fs *fs)
{
    3774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3778:	b093      	sub	sp, #76	; 0x4c
    377a:	4604      	mov	r4, r0
	size_t ate_size, empty_len;
	/* Initialize addr to 0 for the case fs->sector_count == 0. This
	 * should never happen as this is verified in nvs_mount() but both
	 * Coverity and GCC believe the contrary.
	 */
	uint32_t addr = 0U;
    377c:	2300      	movs	r3, #0
    377e:	9303      	str	r3, [sp, #12]
	uint16_t i, closed_sectors = 0;
	uint8_t erase_value = fs->flash_parameters->erase_value;
    3780:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    3782:	791e      	ldrb	r6, [r3, #4]

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    3784:	f100 0914 	add.w	r9, r0, #20
	return z_impl_k_mutex_lock(mutex, timeout);
    3788:	f04f 32ff 	mov.w	r2, #4294967295
    378c:	f04f 33ff 	mov.w	r3, #4294967295
    3790:	4648      	mov	r0, r9
    3792:	f009 ff89 	bl	d6a8 <z_impl_k_mutex_lock>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
    3796:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3798:	681b      	ldr	r3, [r3, #0]
    379a:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
    379c:	2a01      	cmp	r2, #1
    379e:	d906      	bls.n	37ae <nvs_startup+0x3a>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
    37a0:	1dd7      	adds	r7, r2, #7
    37a2:	4253      	negs	r3, r2
    37a4:	401f      	ands	r7, r3
	uint16_t i, closed_sectors = 0;
    37a6:	f04f 0800 	mov.w	r8, #0

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
	/* step through the sectors to find a open sector following
	 * a closed sector, this is where NVS can write.
	 */
	for (i = 0; i < fs->sector_count; i++) {
    37aa:	4645      	mov	r5, r8
    37ac:	e003      	b.n	37b6 <nvs_startup+0x42>
		return len;
    37ae:	2708      	movs	r7, #8
    37b0:	e7f9      	b.n	37a6 <nvs_startup+0x32>
	for (i = 0; i < fs->sector_count; i++) {
    37b2:	3501      	adds	r5, #1
    37b4:	b2ad      	uxth	r5, r5
    37b6:	89e3      	ldrh	r3, [r4, #14]
    37b8:	42ab      	cmp	r3, r5
    37ba:	d91c      	bls.n	37f6 <nvs_startup+0x82>
		addr = (i << ADDR_SECT_SHIFT) +
		       (uint16_t)(fs->sector_size - ate_size);
    37bc:	89a1      	ldrh	r1, [r4, #12]
    37be:	1bc9      	subs	r1, r1, r7
    37c0:	b289      	uxth	r1, r1
		addr = (i << ADDR_SECT_SHIFT) +
    37c2:	eb01 4105 	add.w	r1, r1, r5, lsl #16
    37c6:	9103      	str	r1, [sp, #12]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    37c8:	2308      	movs	r3, #8
    37ca:	4632      	mov	r2, r6
    37cc:	4620      	mov	r0, r4
    37ce:	f00c fc1d 	bl	1000c <nvs_flash_cmp_const>
					 sizeof(struct nvs_ate));
		if (rc) {
    37d2:	2800      	cmp	r0, #0
    37d4:	d0ed      	beq.n	37b2 <nvs_startup+0x3e>
			/* closed sector */
			closed_sectors++;
    37d6:	f108 0801 	add.w	r8, r8, #1
    37da:	fa1f f888 	uxth.w	r8, r8
			nvs_sector_advance(fs, &addr);
    37de:	a903      	add	r1, sp, #12
    37e0:	4620      	mov	r0, r4
    37e2:	f00c fbda 	bl	ff9a <nvs_sector_advance>
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    37e6:	2308      	movs	r3, #8
    37e8:	4632      	mov	r2, r6
    37ea:	9903      	ldr	r1, [sp, #12]
    37ec:	4620      	mov	r0, r4
    37ee:	f00c fc0d 	bl	1000c <nvs_flash_cmp_const>
						 sizeof(struct nvs_ate));
			if (!rc) {
    37f2:	2800      	cmp	r0, #0
    37f4:	d1dd      	bne.n	37b2 <nvs_startup+0x3e>
				break;
			}
		}
	}
	/* all sectors are closed, this is not a nvs fs */
	if (closed_sectors == fs->sector_count) {
    37f6:	89e3      	ldrh	r3, [r4, #14]
    37f8:	4543      	cmp	r3, r8
    37fa:	f000 8143 	beq.w	3a84 <nvs_startup+0x310>
		rc = -EDEADLK;
		goto end;
	}

	if (i == fs->sector_count) {
    37fe:	42ab      	cmp	r3, r5
    3800:	d00d      	beq.n	381e <nvs_startup+0xaa>

	/* addr contains address of closing ate in the most recent sector,
	 * search for the last valid ate using the recover_last_ate routine
	 */

	rc = nvs_recover_last_ate(fs, &addr);
    3802:	a903      	add	r1, sp, #12
    3804:	4620      	mov	r0, r4
    3806:	f00c fc6f 	bl	100e8 <nvs_recover_last_ate>
	if (rc) {
    380a:	4605      	mov	r5, r0
    380c:	2800      	cmp	r0, #0
    380e:	f040 811e 	bne.w	3a4e <nvs_startup+0x2da>

	/* addr contains address of the last valid ate in the most recent sector
	 * search for the first ate containing all cells erased, in the process
	 * also update fs->data_wra.
	 */
	fs->ate_wra = addr;
    3812:	9b03      	ldr	r3, [sp, #12]
    3814:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    3816:	0c1b      	lsrs	r3, r3, #16
    3818:	041b      	lsls	r3, r3, #16
    381a:	60a3      	str	r3, [r4, #8]

	while (fs->ate_wra >= fs->data_wra) {
    381c:	e010      	b.n	3840 <nvs_startup+0xcc>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    381e:	2308      	movs	r3, #8
    3820:	4632      	mov	r2, r6
    3822:	9903      	ldr	r1, [sp, #12]
    3824:	1bc9      	subs	r1, r1, r7
    3826:	4620      	mov	r0, r4
    3828:	f00c fbf0 	bl	1000c <nvs_flash_cmp_const>
		if (!rc) {
    382c:	2800      	cmp	r0, #0
    382e:	d1e8      	bne.n	3802 <nvs_startup+0x8e>
			nvs_sector_advance(fs, &addr);
    3830:	a903      	add	r1, sp, #12
    3832:	4620      	mov	r0, r4
    3834:	f00c fbb1 	bl	ff9a <nvs_sector_advance>
    3838:	e7e3      	b.n	3802 <nvs_startup+0x8e>
				rc = -ESPIPE;
				goto end;
			}
		}

		fs->ate_wra -= ate_size;
    383a:	6863      	ldr	r3, [r4, #4]
    383c:	1bdb      	subs	r3, r3, r7
    383e:	6063      	str	r3, [r4, #4]
	while (fs->ate_wra >= fs->data_wra) {
    3840:	6861      	ldr	r1, [r4, #4]
    3842:	68a3      	ldr	r3, [r4, #8]
    3844:	4299      	cmp	r1, r3
    3846:	d32e      	bcc.n	38a6 <nvs_startup+0x132>
		rc = nvs_flash_ate_rd(fs, fs->ate_wra, &last_ate);
    3848:	aa04      	add	r2, sp, #16
    384a:	4620      	mov	r0, r4
    384c:	f00c fb94 	bl	ff78 <nvs_flash_ate_rd>
		if (rc) {
    3850:	4605      	mov	r5, r0
    3852:	2800      	cmp	r0, #0
    3854:	f040 80f4 	bne.w	3a40 <nvs_startup+0x2cc>
		rc = nvs_ate_cmp_const(&last_ate, erase_value);
    3858:	4631      	mov	r1, r6
    385a:	a804      	add	r0, sp, #16
    385c:	f00c fb91 	bl	ff82 <nvs_ate_cmp_const>
		if (!rc) {
    3860:	b308      	cbz	r0, 38a6 <nvs_startup+0x132>
		if (nvs_ate_valid(fs, &last_ate)) {
    3862:	a904      	add	r1, sp, #16
    3864:	4620      	mov	r0, r4
    3866:	f00c fc23 	bl	100b0 <nvs_ate_valid>
    386a:	2800      	cmp	r0, #0
    386c:	d0e5      	beq.n	383a <nvs_startup+0xc6>
			fs->data_wra = addr & ADDR_SECT_MASK;
    386e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    3872:	0419      	lsls	r1, r3, #16
    3874:	60a1      	str	r1, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    3876:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    387a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    387e:	4403      	add	r3, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
    3880:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3882:	6812      	ldr	r2, [r2, #0]
    3884:	b2d5      	uxtb	r5, r2
	if (write_block_size <= 1U) {
    3886:	2d01      	cmp	r5, #1
    3888:	d903      	bls.n	3892 <nvs_startup+0x11e>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
    388a:	442b      	add	r3, r5
    388c:	3b01      	subs	r3, #1
    388e:	426a      	negs	r2, r5
    3890:	4013      	ands	r3, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    3892:	440b      	add	r3, r1
    3894:	60a3      	str	r3, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    3896:	6862      	ldr	r2, [r4, #4]
    3898:	4293      	cmp	r3, r2
    389a:	d1ce      	bne.n	383a <nvs_startup+0xc6>
    389c:	2800      	cmp	r0, #0
    389e:	d0cc      	beq.n	383a <nvs_startup+0xc6>
				rc = -ESPIPE;
    38a0:	f06f 051c 	mvn.w	r5, #28
    38a4:	e0d3      	b.n	3a4e <nvs_startup+0x2da>
	 * we might need to restart gc if it has not yet finished. Otherwise
	 * just erase the sector.
	 * When gc needs to be restarted, first erase the sector otherwise the
	 * data might not fit into the sector.
	 */
	addr = fs->ate_wra & ADDR_SECT_MASK;
    38a6:	88e3      	ldrh	r3, [r4, #6]
    38a8:	041b      	lsls	r3, r3, #16
    38aa:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &addr);
    38ac:	a903      	add	r1, sp, #12
    38ae:	4620      	mov	r0, r4
    38b0:	f00c fb73 	bl	ff9a <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    38b4:	89a3      	ldrh	r3, [r4, #12]
    38b6:	4632      	mov	r2, r6
    38b8:	9903      	ldr	r1, [sp, #12]
    38ba:	4620      	mov	r0, r4
    38bc:	f00c fba6 	bl	1000c <nvs_flash_cmp_const>
	if (rc < 0) {
    38c0:	1e05      	subs	r5, r0, #0
    38c2:	f2c0 80c4 	blt.w	3a4e <nvs_startup+0x2da>
		goto end;
	}
	if (rc) {
    38c6:	2d00      	cmp	r5, #0
    38c8:	f000 80a7 	beq.w	3a1a <nvs_startup+0x2a6>
		 * (gc_done_ate) that indicates that gc was finished.
		 */
		bool gc_done_marker = false;
		struct nvs_ate gc_done_ate;

		addr = fs->ate_wra + ate_size;
    38cc:	6863      	ldr	r3, [r4, #4]
    38ce:	443b      	add	r3, r7
    38d0:	9303      	str	r3, [sp, #12]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    38d2:	e002      	b.n	38da <nvs_startup+0x166>
			    (gc_done_ate.id == 0xffff) &&
			    (gc_done_ate.len == 0U)) {
				gc_done_marker = true;
				break;
			}
			addr += ate_size;
    38d4:	9b03      	ldr	r3, [sp, #12]
    38d6:	443b      	add	r3, r7
    38d8:	9303      	str	r3, [sp, #12]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    38da:	9903      	ldr	r1, [sp, #12]
    38dc:	b28a      	uxth	r2, r1
    38de:	89a3      	ldrh	r3, [r4, #12]
    38e0:	1bdb      	subs	r3, r3, r7
    38e2:	429a      	cmp	r2, r3
    38e4:	d219      	bcs.n	391a <nvs_startup+0x1a6>
			rc = nvs_flash_ate_rd(fs, addr, &gc_done_ate);
    38e6:	aa01      	add	r2, sp, #4
    38e8:	4620      	mov	r0, r4
    38ea:	f00c fb45 	bl	ff78 <nvs_flash_ate_rd>
			if (rc) {
    38ee:	4605      	mov	r5, r0
    38f0:	2800      	cmp	r0, #0
    38f2:	f040 80a5 	bne.w	3a40 <nvs_startup+0x2cc>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
    38f6:	a901      	add	r1, sp, #4
    38f8:	4620      	mov	r0, r4
    38fa:	f00c fbd9 	bl	100b0 <nvs_ate_valid>
    38fe:	2800      	cmp	r0, #0
    3900:	d0e8      	beq.n	38d4 <nvs_startup+0x160>
			    (gc_done_ate.id == 0xffff) &&
    3902:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			if (nvs_ate_valid(fs, &gc_done_ate) &&
    3906:	f64f 73ff 	movw	r3, #65535	; 0xffff
    390a:	429a      	cmp	r2, r3
    390c:	d1e2      	bne.n	38d4 <nvs_startup+0x160>
			    (gc_done_ate.len == 0U)) {
    390e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
			    (gc_done_ate.id == 0xffff) &&
    3912:	2b00      	cmp	r3, #0
    3914:	d1de      	bne.n	38d4 <nvs_startup+0x160>
				gc_done_marker = true;
    3916:	2301      	movs	r3, #1
    3918:	e000      	b.n	391c <nvs_startup+0x1a8>
		bool gc_done_marker = false;
    391a:	2300      	movs	r3, #0
		}

		if (gc_done_marker) {
    391c:	b9eb      	cbnz	r3, 395a <nvs_startup+0x1e6>
			addr = fs->ate_wra & ADDR_SECT_MASK;
			nvs_sector_advance(fs, &addr);
			rc = nvs_flash_erase_sector(fs, addr);
			goto end;
		}
		LOG_INF("No GC Done marker found: restarting gc");
    391e:	4b5b      	ldr	r3, [pc, #364]	; (3a8c <nvs_startup+0x318>)
    3920:	681b      	ldr	r3, [r3, #0]
    3922:	f003 0307 	and.w	r3, r3, #7
    3926:	2b02      	cmp	r3, #2
    3928:	d84e      	bhi.n	39c8 <nvs_startup+0x254>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    392a:	6861      	ldr	r1, [r4, #4]
    392c:	4620      	mov	r0, r4
    392e:	f00c fb94 	bl	1005a <nvs_flash_erase_sector>
		if (rc) {
    3932:	4605      	mov	r5, r0
    3934:	2800      	cmp	r0, #0
    3936:	f040 808a 	bne.w	3a4e <nvs_startup+0x2da>
			goto end;
		}
		fs->ate_wra &= ADDR_SECT_MASK;
    393a:	88e3      	ldrh	r3, [r4, #6]
    393c:	041b      	lsls	r3, r3, #16
    393e:	6063      	str	r3, [r4, #4]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    3940:	89a2      	ldrh	r2, [r4, #12]
    3942:	eba2 0247 	sub.w	r2, r2, r7, lsl #1
    3946:	4413      	add	r3, r2
    3948:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    394a:	0c1b      	lsrs	r3, r3, #16
    394c:	041b      	lsls	r3, r3, #16
    394e:	60a3      	str	r3, [r4, #8]
		 **/
		for (int i = 0; i < CONFIG_NVS_LOOKUP_CACHE_SIZE; i++) {
			fs->lookup_cache[i] = fs->ate_wra;
		}
#endif
		rc = nvs_gc(fs);
    3950:	4620      	mov	r0, r4
    3952:	f00c fd2f 	bl	103b4 <nvs_gc>
    3956:	4605      	mov	r5, r0
		goto end;
    3958:	e072      	b.n	3a40 <nvs_startup+0x2cc>
			LOG_INF("GC Done marker found");
    395a:	4b4c      	ldr	r3, [pc, #304]	; (3a8c <nvs_startup+0x318>)
    395c:	681b      	ldr	r3, [r3, #0]
    395e:	f003 0307 	and.w	r3, r3, #7
    3962:	2b02      	cmp	r3, #2
    3964:	d80c      	bhi.n	3980 <nvs_startup+0x20c>
			addr = fs->ate_wra & ADDR_SECT_MASK;
    3966:	88e3      	ldrh	r3, [r4, #6]
    3968:	041b      	lsls	r3, r3, #16
    396a:	9303      	str	r3, [sp, #12]
			nvs_sector_advance(fs, &addr);
    396c:	a903      	add	r1, sp, #12
    396e:	4620      	mov	r0, r4
    3970:	f00c fb13 	bl	ff9a <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
    3974:	9903      	ldr	r1, [sp, #12]
    3976:	4620      	mov	r0, r4
    3978:	f00c fb6f 	bl	1005a <nvs_flash_erase_sector>
    397c:	4605      	mov	r5, r0
			goto end;
    397e:	e05f      	b.n	3a40 <nvs_startup+0x2cc>
			LOG_INF("GC Done marker found");
    3980:	4b43      	ldr	r3, [pc, #268]	; (3a90 <nvs_startup+0x31c>)
    3982:	9311      	str	r3, [sp, #68]	; 0x44
    3984:	2302      	movs	r3, #2
    3986:	f88d 3000 	strb.w	r3, [sp]
    398a:	2300      	movs	r3, #0
    398c:	f88d 3001 	strb.w	r3, [sp, #1]
    3990:	f88d 3002 	strb.w	r3, [sp, #2]
    3994:	f88d 3003 	strb.w	r3, [sp, #3]
    3998:	9a00      	ldr	r2, [sp, #0]
    399a:	9210      	str	r2, [sp, #64]	; 0x40
    399c:	4619      	mov	r1, r3
    399e:	f363 0100 	bfi	r1, r3, #0, #1
    39a2:	f363 0141 	bfi	r1, r3, #1, #1
    39a6:	f363 0182 	bfi	r1, r3, #2, #1
    39aa:	f363 01c5 	bfi	r1, r3, #3, #3
    39ae:	2203      	movs	r2, #3
    39b0:	f362 1188 	bfi	r1, r2, #6, #3
    39b4:	2208      	movs	r2, #8
    39b6:	f362 2153 	bfi	r1, r2, #9, #11
    39ba:	f363 511f 	bfi	r1, r3, #20, #12
    39be:	aa10      	add	r2, sp, #64	; 0x40
    39c0:	4832      	ldr	r0, [pc, #200]	; (3a8c <nvs_startup+0x318>)
    39c2:	f000 ffab 	bl	491c <z_impl_z_log_msg_static_create>
    39c6:	e7ce      	b.n	3966 <nvs_startup+0x1f2>
		LOG_INF("No GC Done marker found: restarting gc");
    39c8:	4b32      	ldr	r3, [pc, #200]	; (3a94 <nvs_startup+0x320>)
    39ca:	930b      	str	r3, [sp, #44]	; 0x2c
    39cc:	2302      	movs	r3, #2
    39ce:	f88d 3000 	strb.w	r3, [sp]
    39d2:	2300      	movs	r3, #0
    39d4:	f88d 3001 	strb.w	r3, [sp, #1]
    39d8:	f88d 3002 	strb.w	r3, [sp, #2]
    39dc:	f88d 3003 	strb.w	r3, [sp, #3]
    39e0:	9a00      	ldr	r2, [sp, #0]
    39e2:	920a      	str	r2, [sp, #40]	; 0x28
    39e4:	4619      	mov	r1, r3
    39e6:	f363 0100 	bfi	r1, r3, #0, #1
    39ea:	f363 0141 	bfi	r1, r3, #1, #1
    39ee:	f363 0182 	bfi	r1, r3, #2, #1
    39f2:	f363 01c5 	bfi	r1, r3, #3, #3
    39f6:	2203      	movs	r2, #3
    39f8:	f362 1188 	bfi	r1, r2, #6, #3
    39fc:	2208      	movs	r2, #8
    39fe:	f362 2153 	bfi	r1, r2, #9, #11
    3a02:	f363 511f 	bfi	r1, r3, #20, #12
    3a06:	aa0a      	add	r2, sp, #40	; 0x28
    3a08:	4820      	ldr	r0, [pc, #128]	; (3a8c <nvs_startup+0x318>)
    3a0a:	f000 ff87 	bl	491c <z_impl_z_log_msg_static_create>
    3a0e:	e78c      	b.n	392a <nvs_startup+0x1b6>
		}
		if (!rc) {
			break;
		}

		fs->data_wra += fs->flash_parameters->write_block_size;
    3a10:	68a3      	ldr	r3, [r4, #8]
    3a12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3a14:	6812      	ldr	r2, [r2, #0]
    3a16:	4413      	add	r3, r2
    3a18:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
    3a1a:	6863      	ldr	r3, [r4, #4]
    3a1c:	68a1      	ldr	r1, [r4, #8]
    3a1e:	428b      	cmp	r3, r1
    3a20:	d908      	bls.n	3a34 <nvs_startup+0x2c0>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    3a22:	1a5b      	subs	r3, r3, r1
    3a24:	4632      	mov	r2, r6
    3a26:	4620      	mov	r0, r4
    3a28:	f00c faf0 	bl	1000c <nvs_flash_cmp_const>
		if (rc < 0) {
    3a2c:	1e05      	subs	r5, r0, #0
    3a2e:	db07      	blt.n	3a40 <nvs_startup+0x2cc>
		if (!rc) {
    3a30:	2d00      	cmp	r5, #0
    3a32:	d1ed      	bne.n	3a10 <nvs_startup+0x29c>

	/* If the ate_wra is pointing to the first ate write location in a
	 * sector and data_wra is not 0, erase the sector as it contains no
	 * valid data (this also avoids closing a sector without any data).
	 */
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    3a34:	6861      	ldr	r1, [r4, #4]
    3a36:	eb01 0247 	add.w	r2, r1, r7, lsl #1
    3a3a:	89a3      	ldrh	r3, [r4, #12]
    3a3c:	429a      	cmp	r2, r3
    3a3e:	d00d      	beq.n	3a5c <nvs_startup+0x2e8>
	}
#endif
	/* If the sector is empty add a gc done ate to avoid having insufficient
	 * space when doing gc.
	 */
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    3a40:	b92d      	cbnz	r5, 3a4e <nvs_startup+0x2da>
    3a42:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
    3a44:	89a3      	ldrh	r3, [r4, #12]
    3a46:	eba3 0347 	sub.w	r3, r3, r7, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    3a4a:	429a      	cmp	r2, r3
    3a4c:	d015      	beq.n	3a7a <nvs_startup+0x306>
	return z_impl_k_mutex_unlock(mutex);
    3a4e:	4648      	mov	r0, r9
    3a50:	f009 feae 	bl	d7b0 <z_impl_k_mutex_unlock>

		rc = nvs_add_gc_done_ate(fs);
	}
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    3a54:	4628      	mov	r0, r5
    3a56:	b013      	add	sp, #76	; 0x4c
    3a58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    3a5c:	68a2      	ldr	r2, [r4, #8]
    3a5e:	0c0b      	lsrs	r3, r1, #16
    3a60:	041b      	lsls	r3, r3, #16
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    3a62:	429a      	cmp	r2, r3
    3a64:	d0ec      	beq.n	3a40 <nvs_startup+0x2cc>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    3a66:	4620      	mov	r0, r4
    3a68:	f00c faf7 	bl	1005a <nvs_flash_erase_sector>
		if (rc) {
    3a6c:	4605      	mov	r5, r0
    3a6e:	2800      	cmp	r0, #0
    3a70:	d1ed      	bne.n	3a4e <nvs_startup+0x2da>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    3a72:	88e3      	ldrh	r3, [r4, #6]
    3a74:	041b      	lsls	r3, r3, #16
    3a76:	60a3      	str	r3, [r4, #8]
    3a78:	e7e2      	b.n	3a40 <nvs_startup+0x2cc>
		rc = nvs_add_gc_done_ate(fs);
    3a7a:	4620      	mov	r0, r4
    3a7c:	f00c fc84 	bl	10388 <nvs_add_gc_done_ate>
    3a80:	4605      	mov	r5, r0
    3a82:	e7e4      	b.n	3a4e <nvs_startup+0x2da>
		rc = -EDEADLK;
    3a84:	f06f 052c 	mvn.w	r5, #44	; 0x2c
    3a88:	e7e1      	b.n	3a4e <nvs_startup+0x2da>
    3a8a:	bf00      	nop
    3a8c:	200002e0 	.word	0x200002e0
    3a90:	00015bac 	.word	0x00015bac
    3a94:	00015bc4 	.word	0x00015bc4

00003a98 <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
    3a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a9c:	b0a2      	sub	sp, #136	; 0x88
    3a9e:	af00      	add	r7, sp, #0
    3aa0:	4604      	mov	r4, r0

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    3aa2:	3014      	adds	r0, #20
	return z_impl_k_mutex_init(mutex);
    3aa4:	f010 fe85 	bl	147b2 <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    3aa8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 */
__syscall const struct flash_parameters *flash_get_parameters(const struct device *dev);

static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
    3aaa:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    3aac:	68db      	ldr	r3, [r3, #12]
    3aae:	4798      	blx	r3
    3ab0:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    3ab2:	2800      	cmp	r0, #0
    3ab4:	d052      	beq.n	3b5c <nvs_mount+0xc4>
		LOG_ERR("Could not obtain flash parameters");
		return -EINVAL;
	}

	write_block_size = flash_get_write_block_size(fs->flash_device);
    3ab6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	const struct flash_driver_api *api =
    3ab8:	6883      	ldr	r3, [r0, #8]
	return api->get_parameters(dev)->write_block_size;
    3aba:	68db      	ldr	r3, [r3, #12]
    3abc:	4798      	blx	r3
    3abe:	6803      	ldr	r3, [r0, #0]

	/* check that the write block size is supported */
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    3ac0:	3b01      	subs	r3, #1
    3ac2:	2b1f      	cmp	r3, #31
    3ac4:	d875      	bhi.n	3bb2 <nvs_mount+0x11a>
		LOG_ERR("Unsupported write block size");
		return -EINVAL;
	}

	/* check that sector size is a multiple of pagesize */
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    3ac6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    3ac8:	6821      	ldr	r1, [r4, #0]
    3aca:	1d3a      	adds	r2, r7, #4
    3acc:	f00f fd57 	bl	1357e <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    3ad0:	2800      	cmp	r0, #0
    3ad2:	f040 8097 	bne.w	3c04 <nvs_mount+0x16c>
		LOG_ERR("Unable to get page info");
		return -EINVAL;
	}
	if (!fs->sector_size || fs->sector_size % info.size) {
    3ad6:	89a3      	ldrh	r3, [r4, #12]
    3ad8:	2b00      	cmp	r3, #0
    3ada:	f000 80bc 	beq.w	3c56 <nvs_mount+0x1be>
    3ade:	68ba      	ldr	r2, [r7, #8]
    3ae0:	fbb3 f1f2 	udiv	r1, r3, r2
    3ae4:	fb02 3311 	mls	r3, r2, r1, r3
    3ae8:	2b00      	cmp	r3, #0
    3aea:	f040 80b4 	bne.w	3c56 <nvs_mount+0x1be>
		LOG_ERR("Invalid sector size");
		return -EINVAL;
	}

	/* check the number of sectors, it should be at least 2 */
	if (fs->sector_count < 2) {
    3aee:	89e3      	ldrh	r3, [r4, #14]
    3af0:	2b01      	cmp	r3, #1
    3af2:	f240 80d9 	bls.w	3ca8 <nvs_mount+0x210>
		LOG_ERR("Configuration error - sector count");
		return -EINVAL;
	}

	rc = nvs_startup(fs);
    3af6:	4620      	mov	r0, r4
    3af8:	f7ff fe3c 	bl	3774 <nvs_startup>
	if (rc) {
    3afc:	4605      	mov	r5, r0
    3afe:	2800      	cmp	r0, #0
    3b00:	f040 81cd 	bne.w	3e9e <nvs_mount+0x406>
		return rc;
	}

	/* nvs is ready for use */
	fs->ready = true;
    3b04:	2301      	movs	r3, #1
    3b06:	7423      	strb	r3, [r4, #16]

	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    3b08:	4ba5      	ldr	r3, [pc, #660]	; (3da0 <nvs_mount+0x308>)
    3b0a:	681b      	ldr	r3, [r3, #0]
    3b0c:	f003 0307 	and.w	r3, r3, #7
    3b10:	2b02      	cmp	r3, #2
    3b12:	f240 8117 	bls.w	3d44 <nvs_mount+0x2ac>
    3b16:	f8b4 e00e 	ldrh.w	lr, [r4, #14]
    3b1a:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
    3b1e:	466e      	mov	r6, sp
    3b20:	b088      	sub	sp, #32
    3b22:	466b      	mov	r3, sp
    3b24:	f113 0210 	adds.w	r2, r3, #16
    3b28:	f000 80e7 	beq.w	3cfa <nvs_mount+0x262>
    3b2c:	2110      	movs	r1, #16
    3b2e:	b17a      	cbz	r2, 3b50 <nvs_mount+0xb8>
    3b30:	4608      	mov	r0, r1
    3b32:	2904      	cmp	r1, #4
    3b34:	dd03      	ble.n	3b3e <nvs_mount+0xa6>
    3b36:	f8df 826c 	ldr.w	r8, [pc, #620]	; 3da4 <nvs_mount+0x30c>
    3b3a:	f8c3 8014 	str.w	r8, [r3, #20]
    3b3e:	2808      	cmp	r0, #8
    3b40:	dd01      	ble.n	3b46 <nvs_mount+0xae>
    3b42:	f8c3 e018 	str.w	lr, [r3, #24]
    3b46:	280c      	cmp	r0, #12
    3b48:	f340 80da 	ble.w	3d00 <nvs_mount+0x268>
    3b4c:	f8c3 c01c 	str.w	ip, [r3, #28]
    3b50:	290f      	cmp	r1, #15
    3b52:	f340 811e 	ble.w	3d92 <nvs_mount+0x2fa>
    3b56:	f04f 0c10 	mov.w	ip, #16
    3b5a:	e0d3      	b.n	3d04 <nvs_mount+0x26c>
		LOG_ERR("Could not obtain flash parameters");
    3b5c:	4b90      	ldr	r3, [pc, #576]	; (3da0 <nvs_mount+0x308>)
    3b5e:	681b      	ldr	r3, [r3, #0]
    3b60:	f013 0f07 	tst.w	r3, #7
    3b64:	d102      	bne.n	3b6c <nvs_mount+0xd4>
		return -EINVAL;
    3b66:	f06f 0515 	mvn.w	r5, #21
    3b6a:	e198      	b.n	3e9e <nvs_mount+0x406>
		LOG_ERR("Could not obtain flash parameters");
    3b6c:	4b8e      	ldr	r3, [pc, #568]	; (3da8 <nvs_mount+0x310>)
    3b6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    3b72:	2302      	movs	r3, #2
    3b74:	703b      	strb	r3, [r7, #0]
    3b76:	2300      	movs	r3, #0
    3b78:	707b      	strb	r3, [r7, #1]
    3b7a:	70bb      	strb	r3, [r7, #2]
    3b7c:	70fb      	strb	r3, [r7, #3]
    3b7e:	683a      	ldr	r2, [r7, #0]
    3b80:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
    3b84:	4619      	mov	r1, r3
    3b86:	f363 0100 	bfi	r1, r3, #0, #1
    3b8a:	f363 0141 	bfi	r1, r3, #1, #1
    3b8e:	f363 0182 	bfi	r1, r3, #2, #1
    3b92:	f363 01c5 	bfi	r1, r3, #3, #3
    3b96:	2201      	movs	r2, #1
    3b98:	f362 1188 	bfi	r1, r2, #6, #3
    3b9c:	2208      	movs	r2, #8
    3b9e:	f362 2153 	bfi	r1, r2, #9, #11
    3ba2:	f363 511f 	bfi	r1, r3, #20, #12
    3ba6:	f107 0280 	add.w	r2, r7, #128	; 0x80
    3baa:	487d      	ldr	r0, [pc, #500]	; (3da0 <nvs_mount+0x308>)
    3bac:	f000 feb6 	bl	491c <z_impl_z_log_msg_static_create>
    3bb0:	e7d9      	b.n	3b66 <nvs_mount+0xce>
		LOG_ERR("Unsupported write block size");
    3bb2:	4b7b      	ldr	r3, [pc, #492]	; (3da0 <nvs_mount+0x308>)
    3bb4:	681b      	ldr	r3, [r3, #0]
    3bb6:	f013 0f07 	tst.w	r3, #7
    3bba:	d102      	bne.n	3bc2 <nvs_mount+0x12a>
		return -EINVAL;
    3bbc:	f06f 0515 	mvn.w	r5, #21
    3bc0:	e16d      	b.n	3e9e <nvs_mount+0x406>
		LOG_ERR("Unsupported write block size");
    3bc2:	4b7a      	ldr	r3, [pc, #488]	; (3dac <nvs_mount+0x314>)
    3bc4:	66fb      	str	r3, [r7, #108]	; 0x6c
    3bc6:	2302      	movs	r3, #2
    3bc8:	703b      	strb	r3, [r7, #0]
    3bca:	2300      	movs	r3, #0
    3bcc:	707b      	strb	r3, [r7, #1]
    3bce:	70bb      	strb	r3, [r7, #2]
    3bd0:	70fb      	strb	r3, [r7, #3]
    3bd2:	683a      	ldr	r2, [r7, #0]
    3bd4:	66ba      	str	r2, [r7, #104]	; 0x68
    3bd6:	4619      	mov	r1, r3
    3bd8:	f363 0100 	bfi	r1, r3, #0, #1
    3bdc:	f363 0141 	bfi	r1, r3, #1, #1
    3be0:	f363 0182 	bfi	r1, r3, #2, #1
    3be4:	f363 01c5 	bfi	r1, r3, #3, #3
    3be8:	2201      	movs	r2, #1
    3bea:	f362 1188 	bfi	r1, r2, #6, #3
    3bee:	2208      	movs	r2, #8
    3bf0:	f362 2153 	bfi	r1, r2, #9, #11
    3bf4:	f363 511f 	bfi	r1, r3, #20, #12
    3bf8:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3bfc:	4868      	ldr	r0, [pc, #416]	; (3da0 <nvs_mount+0x308>)
    3bfe:	f000 fe8d 	bl	491c <z_impl_z_log_msg_static_create>
    3c02:	e7db      	b.n	3bbc <nvs_mount+0x124>
		LOG_ERR("Unable to get page info");
    3c04:	4b66      	ldr	r3, [pc, #408]	; (3da0 <nvs_mount+0x308>)
    3c06:	681b      	ldr	r3, [r3, #0]
    3c08:	f013 0f07 	tst.w	r3, #7
    3c0c:	d102      	bne.n	3c14 <nvs_mount+0x17c>
		return -EINVAL;
    3c0e:	f06f 0515 	mvn.w	r5, #21
    3c12:	e144      	b.n	3e9e <nvs_mount+0x406>
		LOG_ERR("Unable to get page info");
    3c14:	4b66      	ldr	r3, [pc, #408]	; (3db0 <nvs_mount+0x318>)
    3c16:	657b      	str	r3, [r7, #84]	; 0x54
    3c18:	2302      	movs	r3, #2
    3c1a:	703b      	strb	r3, [r7, #0]
    3c1c:	2300      	movs	r3, #0
    3c1e:	707b      	strb	r3, [r7, #1]
    3c20:	70bb      	strb	r3, [r7, #2]
    3c22:	70fb      	strb	r3, [r7, #3]
    3c24:	683a      	ldr	r2, [r7, #0]
    3c26:	653a      	str	r2, [r7, #80]	; 0x50
    3c28:	4619      	mov	r1, r3
    3c2a:	f363 0100 	bfi	r1, r3, #0, #1
    3c2e:	f363 0141 	bfi	r1, r3, #1, #1
    3c32:	f363 0182 	bfi	r1, r3, #2, #1
    3c36:	f363 01c5 	bfi	r1, r3, #3, #3
    3c3a:	2201      	movs	r2, #1
    3c3c:	f362 1188 	bfi	r1, r2, #6, #3
    3c40:	2208      	movs	r2, #8
    3c42:	f362 2153 	bfi	r1, r2, #9, #11
    3c46:	f363 511f 	bfi	r1, r3, #20, #12
    3c4a:	f107 0250 	add.w	r2, r7, #80	; 0x50
    3c4e:	4854      	ldr	r0, [pc, #336]	; (3da0 <nvs_mount+0x308>)
    3c50:	f000 fe64 	bl	491c <z_impl_z_log_msg_static_create>
    3c54:	e7db      	b.n	3c0e <nvs_mount+0x176>
		LOG_ERR("Invalid sector size");
    3c56:	4b52      	ldr	r3, [pc, #328]	; (3da0 <nvs_mount+0x308>)
    3c58:	681b      	ldr	r3, [r3, #0]
    3c5a:	f013 0f07 	tst.w	r3, #7
    3c5e:	d102      	bne.n	3c66 <nvs_mount+0x1ce>
		return -EINVAL;
    3c60:	f06f 0515 	mvn.w	r5, #21
    3c64:	e11b      	b.n	3e9e <nvs_mount+0x406>
		LOG_ERR("Invalid sector size");
    3c66:	4b53      	ldr	r3, [pc, #332]	; (3db4 <nvs_mount+0x31c>)
    3c68:	63fb      	str	r3, [r7, #60]	; 0x3c
    3c6a:	2302      	movs	r3, #2
    3c6c:	703b      	strb	r3, [r7, #0]
    3c6e:	2300      	movs	r3, #0
    3c70:	707b      	strb	r3, [r7, #1]
    3c72:	70bb      	strb	r3, [r7, #2]
    3c74:	70fb      	strb	r3, [r7, #3]
    3c76:	683a      	ldr	r2, [r7, #0]
    3c78:	63ba      	str	r2, [r7, #56]	; 0x38
    3c7a:	4619      	mov	r1, r3
    3c7c:	f363 0100 	bfi	r1, r3, #0, #1
    3c80:	f363 0141 	bfi	r1, r3, #1, #1
    3c84:	f363 0182 	bfi	r1, r3, #2, #1
    3c88:	f363 01c5 	bfi	r1, r3, #3, #3
    3c8c:	2201      	movs	r2, #1
    3c8e:	f362 1188 	bfi	r1, r2, #6, #3
    3c92:	2208      	movs	r2, #8
    3c94:	f362 2153 	bfi	r1, r2, #9, #11
    3c98:	f363 511f 	bfi	r1, r3, #20, #12
    3c9c:	f107 0238 	add.w	r2, r7, #56	; 0x38
    3ca0:	483f      	ldr	r0, [pc, #252]	; (3da0 <nvs_mount+0x308>)
    3ca2:	f000 fe3b 	bl	491c <z_impl_z_log_msg_static_create>
    3ca6:	e7db      	b.n	3c60 <nvs_mount+0x1c8>
		LOG_ERR("Configuration error - sector count");
    3ca8:	4b3d      	ldr	r3, [pc, #244]	; (3da0 <nvs_mount+0x308>)
    3caa:	681b      	ldr	r3, [r3, #0]
    3cac:	f013 0f07 	tst.w	r3, #7
    3cb0:	d102      	bne.n	3cb8 <nvs_mount+0x220>
		return -EINVAL;
    3cb2:	f06f 0515 	mvn.w	r5, #21
    3cb6:	e0f2      	b.n	3e9e <nvs_mount+0x406>
		LOG_ERR("Configuration error - sector count");
    3cb8:	4b3f      	ldr	r3, [pc, #252]	; (3db8 <nvs_mount+0x320>)
    3cba:	627b      	str	r3, [r7, #36]	; 0x24
    3cbc:	2302      	movs	r3, #2
    3cbe:	703b      	strb	r3, [r7, #0]
    3cc0:	2300      	movs	r3, #0
    3cc2:	707b      	strb	r3, [r7, #1]
    3cc4:	70bb      	strb	r3, [r7, #2]
    3cc6:	70fb      	strb	r3, [r7, #3]
    3cc8:	683a      	ldr	r2, [r7, #0]
    3cca:	623a      	str	r2, [r7, #32]
    3ccc:	4619      	mov	r1, r3
    3cce:	f363 0100 	bfi	r1, r3, #0, #1
    3cd2:	f363 0141 	bfi	r1, r3, #1, #1
    3cd6:	f363 0182 	bfi	r1, r3, #2, #1
    3cda:	f363 01c5 	bfi	r1, r3, #3, #3
    3cde:	2201      	movs	r2, #1
    3ce0:	f362 1188 	bfi	r1, r2, #6, #3
    3ce4:	2208      	movs	r2, #8
    3ce6:	f362 2153 	bfi	r1, r2, #9, #11
    3cea:	f363 511f 	bfi	r1, r3, #20, #12
    3cee:	f107 0220 	add.w	r2, r7, #32
    3cf2:	482b      	ldr	r0, [pc, #172]	; (3da0 <nvs_mount+0x308>)
    3cf4:	f000 fe12 	bl	491c <z_impl_z_log_msg_static_create>
    3cf8:	e7db      	b.n	3cb2 <nvs_mount+0x21a>
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    3cfa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3cfe:	e716      	b.n	3b2e <nvs_mount+0x96>
    3d00:	f06f 0c1b 	mvn.w	ip, #27
    3d04:	b13a      	cbz	r2, 3d16 <nvs_mount+0x27e>
    3d06:	2104      	movs	r1, #4
    3d08:	7039      	strb	r1, [r7, #0]
    3d0a:	2100      	movs	r1, #0
    3d0c:	7079      	strb	r1, [r7, #1]
    3d0e:	70b9      	strb	r1, [r7, #2]
    3d10:	70f9      	strb	r1, [r7, #3]
    3d12:	6838      	ldr	r0, [r7, #0]
    3d14:	6118      	str	r0, [r3, #16]
    3d16:	2100      	movs	r1, #0
    3d18:	f36f 0100 	bfc	r1, #0, #1
    3d1c:	f36f 0141 	bfc	r1, #1, #1
    3d20:	f36f 0182 	bfc	r1, #2, #1
    3d24:	f36f 01c5 	bfc	r1, #3, #3
    3d28:	2303      	movs	r3, #3
    3d2a:	f363 1188 	bfi	r1, r3, #6, #3
    3d2e:	f3cc 030a 	ubfx	r3, ip, #0, #11
    3d32:	f363 2153 	bfi	r1, r3, #9, #11
    3d36:	f36f 511f 	bfc	r1, #20, #12
    3d3a:	2300      	movs	r3, #0
    3d3c:	4818      	ldr	r0, [pc, #96]	; (3da0 <nvs_mount+0x308>)
    3d3e:	f000 fded 	bl	491c <z_impl_z_log_msg_static_create>
    3d42:	46b5      	mov	sp, r6
	LOG_INF("alloc wra: %d, %x",
    3d44:	4b16      	ldr	r3, [pc, #88]	; (3da0 <nvs_mount+0x308>)
    3d46:	681b      	ldr	r3, [r3, #0]
    3d48:	f003 0307 	and.w	r3, r3, #7
    3d4c:	2b02      	cmp	r3, #2
    3d4e:	d959      	bls.n	3e04 <nvs_mount+0x36c>
    3d50:	6863      	ldr	r3, [r4, #4]
    3d52:	ea4f 4e13 	mov.w	lr, r3, lsr #16
    3d56:	b299      	uxth	r1, r3
    3d58:	466e      	mov	r6, sp
    3d5a:	b088      	sub	sp, #32
    3d5c:	466b      	mov	r3, sp
    3d5e:	f113 0210 	adds.w	r2, r3, #16
    3d62:	d019      	beq.n	3d98 <nvs_mount+0x300>
    3d64:	2010      	movs	r0, #16
    3d66:	b17a      	cbz	r2, 3d88 <nvs_mount+0x2f0>
    3d68:	4684      	mov	ip, r0
    3d6a:	2804      	cmp	r0, #4
    3d6c:	dd03      	ble.n	3d76 <nvs_mount+0x2de>
    3d6e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 3dbc <nvs_mount+0x324>
    3d72:	f8c3 8014 	str.w	r8, [r3, #20]
    3d76:	f1bc 0f08 	cmp.w	ip, #8
    3d7a:	dd01      	ble.n	3d80 <nvs_mount+0x2e8>
    3d7c:	f8c3 e018 	str.w	lr, [r3, #24]
    3d80:	f1bc 0f0c 	cmp.w	ip, #12
    3d84:	dd1c      	ble.n	3dc0 <nvs_mount+0x328>
    3d86:	61d9      	str	r1, [r3, #28]
    3d88:	280f      	cmp	r0, #15
    3d8a:	dd60      	ble.n	3e4e <nvs_mount+0x3b6>
    3d8c:	f04f 0c10 	mov.w	ip, #16
    3d90:	e018      	b.n	3dc4 <nvs_mount+0x32c>
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    3d92:	f06f 0c1b 	mvn.w	ip, #27
    3d96:	e7b5      	b.n	3d04 <nvs_mount+0x26c>
	LOG_INF("alloc wra: %d, %x",
    3d98:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    3d9c:	e7e3      	b.n	3d66 <nvs_mount+0x2ce>
    3d9e:	bf00      	nop
    3da0:	200002e0 	.word	0x200002e0
    3da4:	00015c94 	.word	0x00015c94
    3da8:	00015c00 	.word	0x00015c00
    3dac:	00015c24 	.word	0x00015c24
    3db0:	00015c44 	.word	0x00015c44
    3db4:	00015c5c 	.word	0x00015c5c
    3db8:	00015c70 	.word	0x00015c70
    3dbc:	00015cac 	.word	0x00015cac
    3dc0:	f06f 0c1b 	mvn.w	ip, #27
    3dc4:	b13a      	cbz	r2, 3dd6 <nvs_mount+0x33e>
    3dc6:	2104      	movs	r1, #4
    3dc8:	7039      	strb	r1, [r7, #0]
    3dca:	2100      	movs	r1, #0
    3dcc:	7079      	strb	r1, [r7, #1]
    3dce:	70b9      	strb	r1, [r7, #2]
    3dd0:	70f9      	strb	r1, [r7, #3]
    3dd2:	6838      	ldr	r0, [r7, #0]
    3dd4:	6118      	str	r0, [r3, #16]
    3dd6:	2100      	movs	r1, #0
    3dd8:	f36f 0100 	bfc	r1, #0, #1
    3ddc:	f36f 0141 	bfc	r1, #1, #1
    3de0:	f36f 0182 	bfc	r1, #2, #1
    3de4:	f36f 01c5 	bfc	r1, #3, #3
    3de8:	2303      	movs	r3, #3
    3dea:	f363 1188 	bfi	r1, r3, #6, #3
    3dee:	f3cc 030a 	ubfx	r3, ip, #0, #11
    3df2:	f363 2153 	bfi	r1, r3, #9, #11
    3df6:	f36f 511f 	bfc	r1, #20, #12
    3dfa:	2300      	movs	r3, #0
    3dfc:	482c      	ldr	r0, [pc, #176]	; (3eb0 <nvs_mount+0x418>)
    3dfe:	f000 fd8d 	bl	491c <z_impl_z_log_msg_static_create>
    3e02:	46b5      	mov	sp, r6
		(fs->ate_wra >> ADDR_SECT_SHIFT),
		(fs->ate_wra & ADDR_OFFS_MASK));
	LOG_INF("data wra: %d, %x",
    3e04:	4b2a      	ldr	r3, [pc, #168]	; (3eb0 <nvs_mount+0x418>)
    3e06:	681b      	ldr	r3, [r3, #0]
    3e08:	f003 0307 	and.w	r3, r3, #7
    3e0c:	2b02      	cmp	r3, #2
    3e0e:	d946      	bls.n	3e9e <nvs_mount+0x406>
    3e10:	68a1      	ldr	r1, [r4, #8]
    3e12:	ea4f 4c11 	mov.w	ip, r1, lsr #16
    3e16:	b289      	uxth	r1, r1
    3e18:	466c      	mov	r4, sp
    3e1a:	b088      	sub	sp, #32
    3e1c:	466b      	mov	r3, sp
    3e1e:	f113 0210 	adds.w	r2, r3, #16
    3e22:	d017      	beq.n	3e54 <nvs_mount+0x3bc>
    3e24:	2010      	movs	r0, #16
    3e26:	b16a      	cbz	r2, 3e44 <nvs_mount+0x3ac>
    3e28:	4606      	mov	r6, r0
    3e2a:	2804      	cmp	r0, #4
    3e2c:	dd03      	ble.n	3e36 <nvs_mount+0x39e>
    3e2e:	f8df e084 	ldr.w	lr, [pc, #132]	; 3eb4 <nvs_mount+0x41c>
    3e32:	f8c3 e014 	str.w	lr, [r3, #20]
    3e36:	2e08      	cmp	r6, #8
    3e38:	dd01      	ble.n	3e3e <nvs_mount+0x3a6>
    3e3a:	f8c3 c018 	str.w	ip, [r3, #24]
    3e3e:	2e0c      	cmp	r6, #12
    3e40:	dd0b      	ble.n	3e5a <nvs_mount+0x3c2>
    3e42:	61d9      	str	r1, [r3, #28]
    3e44:	280f      	cmp	r0, #15
    3e46:	dd2f      	ble.n	3ea8 <nvs_mount+0x410>
    3e48:	f04f 0c10 	mov.w	ip, #16
    3e4c:	e007      	b.n	3e5e <nvs_mount+0x3c6>
	LOG_INF("alloc wra: %d, %x",
    3e4e:	f06f 0c1b 	mvn.w	ip, #27
    3e52:	e7b7      	b.n	3dc4 <nvs_mount+0x32c>
	LOG_INF("data wra: %d, %x",
    3e54:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    3e58:	e7e5      	b.n	3e26 <nvs_mount+0x38e>
    3e5a:	f06f 0c1b 	mvn.w	ip, #27
    3e5e:	b13a      	cbz	r2, 3e70 <nvs_mount+0x3d8>
    3e60:	2104      	movs	r1, #4
    3e62:	7039      	strb	r1, [r7, #0]
    3e64:	2100      	movs	r1, #0
    3e66:	7079      	strb	r1, [r7, #1]
    3e68:	70b9      	strb	r1, [r7, #2]
    3e6a:	70f9      	strb	r1, [r7, #3]
    3e6c:	6838      	ldr	r0, [r7, #0]
    3e6e:	6118      	str	r0, [r3, #16]
    3e70:	2100      	movs	r1, #0
    3e72:	f36f 0100 	bfc	r1, #0, #1
    3e76:	f36f 0141 	bfc	r1, #1, #1
    3e7a:	f36f 0182 	bfc	r1, #2, #1
    3e7e:	f36f 01c5 	bfc	r1, #3, #3
    3e82:	2303      	movs	r3, #3
    3e84:	f363 1188 	bfi	r1, r3, #6, #3
    3e88:	f3cc 030a 	ubfx	r3, ip, #0, #11
    3e8c:	f363 2153 	bfi	r1, r3, #9, #11
    3e90:	f36f 511f 	bfc	r1, #20, #12
    3e94:	2300      	movs	r3, #0
    3e96:	4806      	ldr	r0, [pc, #24]	; (3eb0 <nvs_mount+0x418>)
    3e98:	f000 fd40 	bl	491c <z_impl_z_log_msg_static_create>
    3e9c:	46a5      	mov	sp, r4
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    3e9e:	4628      	mov	r0, r5
    3ea0:	3788      	adds	r7, #136	; 0x88
    3ea2:	46bd      	mov	sp, r7
    3ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_INF("data wra: %d, %x",
    3ea8:	f06f 0c1b 	mvn.w	ip, #27
    3eac:	e7d7      	b.n	3e5e <nvs_mount+0x3c6>
    3eae:	bf00      	nop
    3eb0:	200002e0 	.word	0x200002e0
    3eb4:	00015cc0 	.word	0x00015cc0

00003eb8 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    3eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ebc:	b08d      	sub	sp, #52	; 0x34
    3ebe:	9201      	str	r2, [sp, #4]
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    3ec0:	f890 b010 	ldrb.w	fp, [r0, #16]
    3ec4:	f1bb 0f00 	cmp.w	fp, #0
    3ec8:	d026      	beq.n	3f18 <nvs_write+0x60>
    3eca:	4604      	mov	r4, r0
    3ecc:	460e      	mov	r6, r1
    3ece:	4699      	mov	r9, r3
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
    3ed0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    3ed2:	681b      	ldr	r3, [r3, #0]
    3ed4:	b2d9      	uxtb	r1, r3
	if (write_block_size <= 1U) {
    3ed6:	2901      	cmp	r1, #1
    3ed8:	d94a      	bls.n	3f70 <nvs_write+0xb8>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
    3eda:	f101 0a07 	add.w	sl, r1, #7
    3ede:	424a      	negs	r2, r1
    3ee0:	ea0a 0a02 	and.w	sl, sl, r2
	if (write_block_size <= 1U) {
    3ee4:	2901      	cmp	r1, #1
    3ee6:	d946      	bls.n	3f76 <nvs_write+0xbe>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
    3ee8:	b2db      	uxtb	r3, r3
    3eea:	eb09 0803 	add.w	r8, r9, r3
    3eee:	f108 38ff 	add.w	r8, r8, #4294967295
    3ef2:	425b      	negs	r3, r3
    3ef4:	ea08 0803 	and.w	r8, r8, r3

	/* The maximum data size is sector size - 4 ate
	 * where: 1 ate for data, 1 ate for sector close, 1 ate for gc done,
	 * and 1 ate to always allow a delete.
	 */
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    3ef8:	89a3      	ldrh	r3, [r4, #12]
    3efa:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
    3efe:	454b      	cmp	r3, r9
    3f00:	f0c0 80ae 	bcc.w	4060 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x60>
    3f04:	f1b9 0f00 	cmp.w	r9, #0
    3f08:	d003      	beq.n	3f12 <nvs_write+0x5a>
	    ((len > 0) && (data == NULL))) {
    3f0a:	9b01      	ldr	r3, [sp, #4]
    3f0c:	2b00      	cmp	r3, #0
    3f0e:	f000 80aa 	beq.w	4066 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x66>

	if (wlk_addr == NVS_LOOKUP_CACHE_NO_ADDR) {
		goto no_cached_entry;
	}
#else
	wlk_addr = fs->ate_wra;
    3f12:	6863      	ldr	r3, [r4, #4]
    3f14:	9303      	str	r3, [sp, #12]
#endif
	rd_addr = wlk_addr;
    3f16:	e034      	b.n	3f82 <nvs_write+0xca>
		LOG_ERR("NVS not initialized");
    3f18:	4b54      	ldr	r3, [pc, #336]	; (406c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6c>)
    3f1a:	681b      	ldr	r3, [r3, #0]
    3f1c:	f013 0f07 	tst.w	r3, #7
    3f20:	d102      	bne.n	3f28 <nvs_write+0x70>
		return -EACCES;
    3f22:	f06f 050c 	mvn.w	r5, #12
    3f26:	e093      	b.n	4050 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x50>
		LOG_ERR("NVS not initialized");
    3f28:	4b51      	ldr	r3, [pc, #324]	; (4070 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x70>)
    3f2a:	930b      	str	r3, [sp, #44]	; 0x2c
    3f2c:	2302      	movs	r3, #2
    3f2e:	f88d 3008 	strb.w	r3, [sp, #8]
    3f32:	2300      	movs	r3, #0
    3f34:	f88d 3009 	strb.w	r3, [sp, #9]
    3f38:	f88d 300a 	strb.w	r3, [sp, #10]
    3f3c:	f88d 300b 	strb.w	r3, [sp, #11]
    3f40:	9a02      	ldr	r2, [sp, #8]
    3f42:	920a      	str	r2, [sp, #40]	; 0x28
    3f44:	4619      	mov	r1, r3
    3f46:	f363 0100 	bfi	r1, r3, #0, #1
    3f4a:	f363 0141 	bfi	r1, r3, #1, #1
    3f4e:	f363 0182 	bfi	r1, r3, #2, #1
    3f52:	f363 01c5 	bfi	r1, r3, #3, #3
    3f56:	2201      	movs	r2, #1
    3f58:	f362 1188 	bfi	r1, r2, #6, #3
    3f5c:	2208      	movs	r2, #8
    3f5e:	f362 2153 	bfi	r1, r2, #9, #11
    3f62:	f363 511f 	bfi	r1, r3, #20, #12
    3f66:	aa0a      	add	r2, sp, #40	; 0x28
    3f68:	4840      	ldr	r0, [pc, #256]	; (406c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6c>)
    3f6a:	f000 fcd7 	bl	491c <z_impl_z_log_msg_static_create>
    3f6e:	e7d8      	b.n	3f22 <nvs_write+0x6a>
		return len;
    3f70:	f04f 0a08 	mov.w	sl, #8
    3f74:	e7b6      	b.n	3ee4 <nvs_write+0x2c>
    3f76:	46c8      	mov	r8, r9
    3f78:	e7be      	b.n	3ef8 <nvs_write+0x40>
		}
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
			prev_found = true;
			break;
		}
		if (wlk_addr == fs->ate_wra) {
    3f7a:	6862      	ldr	r2, [r4, #4]
    3f7c:	9b03      	ldr	r3, [sp, #12]
    3f7e:	429a      	cmp	r2, r3
    3f80:	d013      	beq.n	3faa <nvs_write+0xf2>
		rd_addr = wlk_addr;
    3f82:	9f03      	ldr	r7, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    3f84:	aa04      	add	r2, sp, #16
    3f86:	a903      	add	r1, sp, #12
    3f88:	4620      	mov	r0, r4
    3f8a:	f00c f90d 	bl	101a8 <nvs_prev_ate>
		if (rc) {
    3f8e:	4605      	mov	r5, r0
    3f90:	2800      	cmp	r0, #0
    3f92:	d15d      	bne.n	4050 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x50>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    3f94:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    3f98:	42b3      	cmp	r3, r6
    3f9a:	d1ee      	bne.n	3f7a <nvs_write+0xc2>
    3f9c:	a904      	add	r1, sp, #16
    3f9e:	4620      	mov	r0, r4
    3fa0:	f00c f886 	bl	100b0 <nvs_ate_valid>
    3fa4:	2800      	cmp	r0, #0
    3fa6:	d0e8      	beq.n	3f7a <nvs_write+0xc2>
    3fa8:	e001      	b.n	3fae <nvs_write+0xf6>
	bool prev_found = false;
    3faa:	f04f 0b00 	mov.w	fp, #0

#ifdef CONFIG_NVS_LOOKUP_CACHE
no_cached_entry:
#endif

	if (prev_found) {
    3fae:	f1bb 0f00 	cmp.w	fp, #0
    3fb2:	d018      	beq.n	3fe6 <nvs_write+0x12e>
		/* previous entry found */
		rd_addr &= ADDR_SECT_MASK;
    3fb4:	0c3f      	lsrs	r7, r7, #16
    3fb6:	043f      	lsls	r7, r7, #16
		rd_addr += wlk_ate.offset;
    3fb8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    3fbc:	4439      	add	r1, r7

		if (len == 0) {
    3fbe:	f1b9 0f00 	cmp.w	r9, #0
    3fc2:	d103      	bne.n	3fcc <nvs_write+0x114>
			/* do not try to compare with empty data */
			if (wlk_ate.len == 0U) {
    3fc4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    3fc8:	b983      	cbnz	r3, 3fec <nvs_write+0x134>
    3fca:	e041      	b.n	4050 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x50>
				/* skip delete entry as it is already the
				 * last one
				 */
				return 0;
			}
		} else if (len == wlk_ate.len) {
    3fcc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    3fd0:	454b      	cmp	r3, r9
    3fd2:	d10b      	bne.n	3fec <nvs_write+0x134>
			/* do not try to compare if lengths are not equal */
			/* compare the data and if equal return 0 */
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    3fd4:	464b      	mov	r3, r9
    3fd6:	9a01      	ldr	r2, [sp, #4]
    3fd8:	4620      	mov	r0, r4
    3fda:	f00b ffeb 	bl	ffb4 <nvs_flash_block_cmp>
			if (rc <= 0) {
    3fde:	2800      	cmp	r0, #0
    3fe0:	dc04      	bgt.n	3fec <nvs_write+0x134>
				return rc;
    3fe2:	4605      	mov	r5, r0
    3fe4:	e034      	b.n	4050 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x50>
			}
		}
	} else {
		/* skip delete entry for non-existing entry */
		if (len == 0) {
    3fe6:	f1b9 0f00 	cmp.w	r9, #0
    3fea:	d031      	beq.n	4050 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x50>
			return 0;
		}
	}

	/* calculate required space if the entry contains data */
	if (data_size) {
    3fec:	f1b8 0f00 	cmp.w	r8, #0
    3ff0:	d01d      	beq.n	402e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2e>
		/* Leave space for delete ate */
		required_space = data_size + ate_size;
    3ff2:	fa1a f788 	uxtah	r7, sl, r8
    3ff6:	b2bf      	uxth	r7, r7
	}

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    3ff8:	f104 0814 	add.w	r8, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
    3ffc:	f04f 32ff 	mov.w	r2, #4294967295
    4000:	f04f 33ff 	mov.w	r3, #4294967295
    4004:	4640      	mov	r0, r8
    4006:	f009 fb4f 	bl	d6a8 <z_impl_k_mutex_lock>

	gc_count = 0;
	while (1) {
		if (gc_count == fs->sector_count) {
    400a:	89e3      	ldrh	r3, [r4, #14]
    400c:	429d      	cmp	r5, r3
    400e:	d01a      	beq.n	4046 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x46>
			 */
			rc = -ENOSPC;
			goto end;
		}

		if (fs->ate_wra >= (fs->data_wra + required_space)) {
    4010:	6862      	ldr	r2, [r4, #4]
    4012:	68a3      	ldr	r3, [r4, #8]
    4014:	443b      	add	r3, r7
    4016:	429a      	cmp	r2, r3
    4018:	d20b      	bcs.n	4032 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x32>
			}
			break;
		}


		rc = nvs_sector_close(fs);
    401a:	4620      	mov	r0, r4
    401c:	f00c fa89 	bl	10532 <nvs_sector_close>
		if (rc) {
    4020:	b9d0      	cbnz	r0, 4058 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x58>
			goto end;
		}

		rc = nvs_gc(fs);
    4022:	4620      	mov	r0, r4
    4024:	f00c f9c6 	bl	103b4 <nvs_gc>
		if (rc) {
    4028:	b9c0      	cbnz	r0, 405c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5c>
			goto end;
		}
		gc_count++;
    402a:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
    402c:	e7ed      	b.n	400a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa>
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
    402e:	2700      	movs	r7, #0
    4030:	e7e2      	b.n	3ff8 <nvs_write+0x140>
			rc = nvs_flash_wrt_entry(fs, id, data, len);
    4032:	464b      	mov	r3, r9
    4034:	9a01      	ldr	r2, [sp, #4]
    4036:	4631      	mov	r1, r6
    4038:	4620      	mov	r0, r4
    403a:	f00c fa5b 	bl	104f4 <nvs_flash_wrt_entry>
			if (rc) {
    403e:	4605      	mov	r5, r0
    4040:	b918      	cbnz	r0, 404a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4a>
	}
	rc = len;
    4042:	464d      	mov	r5, r9
    4044:	e001      	b.n	404a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4a>
			rc = -ENOSPC;
    4046:	f06f 051b 	mvn.w	r5, #27
	return z_impl_k_mutex_unlock(mutex);
    404a:	4640      	mov	r0, r8
    404c:	f009 fbb0 	bl	d7b0 <z_impl_k_mutex_unlock>
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    4050:	4628      	mov	r0, r5
    4052:	b00d      	add	sp, #52	; 0x34
    4054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = nvs_sector_close(fs);
    4058:	4605      	mov	r5, r0
    405a:	e7f6      	b.n	404a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4a>
		rc = nvs_gc(fs);
    405c:	4605      	mov	r5, r0
    405e:	e7f4      	b.n	404a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4a>
		return -EINVAL;
    4060:	f06f 0515 	mvn.w	r5, #21
    4064:	e7f4      	b.n	4050 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x50>
    4066:	f06f 0515 	mvn.w	r5, #21
    406a:	e7f1      	b.n	4050 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x50>
    406c:	200002e0 	.word	0x200002e0
    4070:	00015bec 	.word	0x00015bec

00004074 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
    4074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4078:	b08a      	sub	sp, #40	; 0x28
    407a:	4699      	mov	r9, r3
    407c:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    4080:	7c03      	ldrb	r3, [r0, #16]
    4082:	b1a3      	cbz	r3, 40ae <nvs_read_hist+0x3a>
    4084:	4604      	mov	r4, r0
    4086:	460f      	mov	r7, r1
    4088:	4692      	mov	sl, r2
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
    408a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    408c:	681b      	ldr	r3, [r3, #0]
    408e:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
    4090:	2a01      	cmp	r2, #1
    4092:	d938      	bls.n	4106 <nvs_read_hist+0x92>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
    4094:	4613      	mov	r3, r2
    4096:	3207      	adds	r2, #7
    4098:	425b      	negs	r3, r3
    409a:	401a      	ands	r2, r3
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));

	if (len > (fs->sector_size - 2 * ate_size)) {
    409c:	89a3      	ldrh	r3, [r4, #12]
    409e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
    40a2:	454b      	cmp	r3, r9
    40a4:	d370      	bcc.n	4188 <nvs_read_hist+0x114>
	if (wlk_addr == NVS_LOOKUP_CACHE_NO_ADDR) {
		rc = -ENOENT;
		goto err;
	}
#else
	wlk_addr = fs->ate_wra;
    40a6:	6866      	ldr	r6, [r4, #4]
    40a8:	9603      	str	r6, [sp, #12]
	cnt_his = 0U;
    40aa:	2500      	movs	r5, #0
#endif
	rd_addr = wlk_addr;

	while (cnt_his <= cnt) {
    40ac:	e031      	b.n	4112 <nvs_read_hist+0x9e>
		LOG_ERR("NVS not initialized");
    40ae:	4b3b      	ldr	r3, [pc, #236]	; (419c <nvs_read_hist+0x128>)
    40b0:	681b      	ldr	r3, [r3, #0]
    40b2:	f013 0f07 	tst.w	r3, #7
    40b6:	d102      	bne.n	40be <nvs_read_hist+0x4a>
		return -EACCES;
    40b8:	f06f 030c 	mvn.w	r3, #12
    40bc:	e059      	b.n	4172 <nvs_read_hist+0xfe>
		LOG_ERR("NVS not initialized");
    40be:	4b38      	ldr	r3, [pc, #224]	; (41a0 <nvs_read_hist+0x12c>)
    40c0:	9309      	str	r3, [sp, #36]	; 0x24
    40c2:	2302      	movs	r3, #2
    40c4:	f88d 3000 	strb.w	r3, [sp]
    40c8:	2300      	movs	r3, #0
    40ca:	f88d 3001 	strb.w	r3, [sp, #1]
    40ce:	f88d 3002 	strb.w	r3, [sp, #2]
    40d2:	f88d 3003 	strb.w	r3, [sp, #3]
    40d6:	9a00      	ldr	r2, [sp, #0]
    40d8:	9208      	str	r2, [sp, #32]
    40da:	4619      	mov	r1, r3
    40dc:	f363 0100 	bfi	r1, r3, #0, #1
    40e0:	f363 0141 	bfi	r1, r3, #1, #1
    40e4:	f363 0182 	bfi	r1, r3, #2, #1
    40e8:	f363 01c5 	bfi	r1, r3, #3, #3
    40ec:	2201      	movs	r2, #1
    40ee:	f362 1188 	bfi	r1, r2, #6, #3
    40f2:	2208      	movs	r2, #8
    40f4:	f362 2153 	bfi	r1, r2, #9, #11
    40f8:	f363 511f 	bfi	r1, r3, #20, #12
    40fc:	aa08      	add	r2, sp, #32
    40fe:	4827      	ldr	r0, [pc, #156]	; (419c <nvs_read_hist+0x128>)
    4100:	f000 fc0c 	bl	491c <z_impl_z_log_msg_static_create>
    4104:	e7d8      	b.n	40b8 <nvs_read_hist+0x44>
		return len;
    4106:	2208      	movs	r2, #8
    4108:	e7c8      	b.n	409c <nvs_read_hist+0x28>
			goto err;
		}
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
			cnt_his++;
		}
		if (wlk_addr == fs->ate_wra) {
    410a:	6862      	ldr	r2, [r4, #4]
    410c:	9b03      	ldr	r3, [sp, #12]
    410e:	429a      	cmp	r2, r3
    4110:	d016      	beq.n	4140 <nvs_read_hist+0xcc>
	while (cnt_his <= cnt) {
    4112:	4545      	cmp	r5, r8
    4114:	d814      	bhi.n	4140 <nvs_read_hist+0xcc>
		rd_addr = wlk_addr;
    4116:	9e03      	ldr	r6, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    4118:	aa01      	add	r2, sp, #4
    411a:	a903      	add	r1, sp, #12
    411c:	4620      	mov	r0, r4
    411e:	f00c f843 	bl	101a8 <nvs_prev_ate>
		if (rc) {
    4122:	4603      	mov	r3, r0
    4124:	bb28      	cbnz	r0, 4172 <nvs_read_hist+0xfe>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
    4126:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    412a:	42bb      	cmp	r3, r7
    412c:	d1ed      	bne.n	410a <nvs_read_hist+0x96>
    412e:	a901      	add	r1, sp, #4
    4130:	4620      	mov	r0, r4
    4132:	f00b ffbd 	bl	100b0 <nvs_ate_valid>
    4136:	2800      	cmp	r0, #0
    4138:	d0e7      	beq.n	410a <nvs_read_hist+0x96>
			cnt_his++;
    413a:	3501      	adds	r5, #1
    413c:	b2ad      	uxth	r5, r5
    413e:	e7e4      	b.n	410a <nvs_read_hist+0x96>
			break;
		}
	}

	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    4140:	6862      	ldr	r2, [r4, #4]
    4142:	9b03      	ldr	r3, [sp, #12]
    4144:	429a      	cmp	r2, r3
    4146:	d018      	beq.n	417a <nvs_read_hist+0x106>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    4148:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    414c:	b1fb      	cbz	r3, 418e <nvs_read_hist+0x11a>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    414e:	4545      	cmp	r5, r8
    4150:	d320      	bcc.n	4194 <nvs_read_hist+0x120>
		return -ENOENT;
	}

	rd_addr &= ADDR_SECT_MASK;
    4152:	0c36      	lsrs	r6, r6, #16
    4154:	0436      	lsls	r6, r6, #16
	rd_addr += wlk_ate.offset;
    4156:	f8bd 1006 	ldrh.w	r1, [sp, #6]
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    415a:	454b      	cmp	r3, r9
    415c:	bf28      	it	cs
    415e:	464b      	movcs	r3, r9
    4160:	4652      	mov	r2, sl
    4162:	4431      	add	r1, r6
    4164:	4620      	mov	r0, r4
    4166:	f00b fef8 	bl	ff5a <nvs_flash_rd>
	if (rc) {
    416a:	4603      	mov	r3, r0
    416c:	b908      	cbnz	r0, 4172 <nvs_read_hist+0xfe>
		goto err;
	}

	return wlk_ate.len;
    416e:	f8bd 3008 	ldrh.w	r3, [sp, #8]

err:
	return rc;
}
    4172:	4618      	mov	r0, r3
    4174:	b00a      	add	sp, #40	; 0x28
    4176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    417a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    417e:	42bb      	cmp	r3, r7
    4180:	d0e2      	beq.n	4148 <nvs_read_hist+0xd4>
		return -ENOENT;
    4182:	f06f 0301 	mvn.w	r3, #1
    4186:	e7f4      	b.n	4172 <nvs_read_hist+0xfe>
		return -EINVAL;
    4188:	f06f 0315 	mvn.w	r3, #21
    418c:	e7f1      	b.n	4172 <nvs_read_hist+0xfe>
		return -ENOENT;
    418e:	f06f 0301 	mvn.w	r3, #1
    4192:	e7ee      	b.n	4172 <nvs_read_hist+0xfe>
    4194:	f06f 0301 	mvn.w	r3, #1
    4198:	e7eb      	b.n	4172 <nvs_read_hist+0xfe>
    419a:	bf00      	nop
    419c:	200002e0 	.word	0x200002e0
    41a0:	00015bec 	.word	0x00015bec

000041a4 <log_backend_notify_all>:
	return mpsc_pbuf_get_max_utilization(&log_buffer, max);
}

static void log_backend_notify_all(enum log_backend_evt event,
				   union log_backend_evt_arg *arg)
{
    41a4:	b570      	push	{r4, r5, r6, lr}
    41a6:	4606      	mov	r6, r0
    41a8:	460d      	mov	r5, r1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    41aa:	4c08      	ldr	r4, [pc, #32]	; (41cc <log_backend_notify_all+0x28>)
    41ac:	e004      	b.n	41b8 <log_backend_notify_all+0x14>
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
		backend->api->notify(backend, event, arg);
    41ae:	462a      	mov	r2, r5
    41b0:	4631      	mov	r1, r6
    41b2:	4620      	mov	r0, r4
    41b4:	4798      	blx	r3
    41b6:	3410      	adds	r4, #16
    41b8:	4b05      	ldr	r3, [pc, #20]	; (41d0 <log_backend_notify_all+0x2c>)
    41ba:	429c      	cmp	r4, r3
    41bc:	d204      	bcs.n	41c8 <log_backend_notify_all+0x24>
	if (backend->api->notify) {
    41be:	6823      	ldr	r3, [r4, #0]
    41c0:	699b      	ldr	r3, [r3, #24]
    41c2:	2b00      	cmp	r3, #0
    41c4:	d1f3      	bne.n	41ae <log_backend_notify_all+0xa>
    41c6:	e7f6      	b.n	41b6 <log_backend_notify_all+0x12>
		log_backend_notify(backend, event, arg);
	}
}
    41c8:	bd70      	pop	{r4, r5, r6, pc}
    41ca:	bf00      	nop
    41cc:	000153cc 	.word	0x000153cc
    41d0:	000153ec 	.word	0x000153ec

000041d4 <activate_foreach_backend>:
{
    41d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    41d8:	4607      	mov	r7, r0
	uint32_t mask_cpy = mask;
    41da:	4605      	mov	r5, r0
	while (mask_cpy) {
    41dc:	e00a      	b.n	41f4 <activate_foreach_backend+0x20>
			mask &= ~BIT(i);
    41de:	ea07 0708 	and.w	r7, r7, r8
					   backend->cb->ctx,
    41e2:	4b14      	ldr	r3, [pc, #80]	; (4234 <activate_foreach_backend+0x60>)
    41e4:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    41e8:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    41ea:	2204      	movs	r2, #4
    41ec:	6819      	ldr	r1, [r3, #0]
    41ee:	4620      	mov	r0, r4
    41f0:	f000 fb64 	bl	48bc <log_backend_enable>
	while (mask_cpy) {
    41f4:	b1d5      	cbz	r5, 422c <activate_foreach_backend+0x58>
		uint32_t i = __builtin_ctz(mask_cpy);
    41f6:	fa95 f6a5 	rbit	r6, r5
    41fa:	fab6 f686 	clz	r6, r6
	STRUCT_SECTION_GET(log_backend, idx, &backend);
    41fe:	4c0d      	ldr	r4, [pc, #52]	; (4234 <activate_foreach_backend+0x60>)
    4200:	eb04 1406 	add.w	r4, r4, r6, lsl #4
		mask_cpy &= ~BIT(i);
    4204:	2301      	movs	r3, #1
    4206:	40b3      	lsls	r3, r6
    4208:	ea6f 0803 	mvn.w	r8, r3
    420c:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    4210:	7b23      	ldrb	r3, [r4, #12]
    4212:	2b00      	cmp	r3, #0
    4214:	d0ee      	beq.n	41f4 <activate_foreach_backend+0x20>
	if (backend->api->is_ready != NULL) {
    4216:	0133      	lsls	r3, r6, #4
    4218:	4a06      	ldr	r2, [pc, #24]	; (4234 <activate_foreach_backend+0x60>)
    421a:	58d3      	ldr	r3, [r2, r3]
    421c:	691b      	ldr	r3, [r3, #16]
    421e:	2b00      	cmp	r3, #0
    4220:	d0dd      	beq.n	41de <activate_foreach_backend+0xa>
		return backend->api->is_ready(backend);
    4222:	4620      	mov	r0, r4
    4224:	4798      	blx	r3
    4226:	2800      	cmp	r0, #0
    4228:	d1e4      	bne.n	41f4 <activate_foreach_backend+0x20>
    422a:	e7d8      	b.n	41de <activate_foreach_backend+0xa>
}
    422c:	4638      	mov	r0, r7
    422e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4232:	bf00      	nop
    4234:	000153cc 	.word	0x000153cc

00004238 <z_log_init>:
{
    4238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    423c:	4680      	mov	r8, r0
    423e:	460f      	mov	r7, r1
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    4240:	4b20      	ldr	r3, [pc, #128]	; (42c4 <z_log_init+0x8c>)
    4242:	f3bf 8f5b 	dmb	ish
    4246:	e853 5f00 	ldrex	r5, [r3]
    424a:	1c6a      	adds	r2, r5, #1
    424c:	e843 2100 	strex	r1, r2, [r3]
    4250:	2900      	cmp	r1, #0
    4252:	d1f8      	bne.n	4246 <z_log_init+0xe>
    4254:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    4258:	2d00      	cmp	r5, #0
    425a:	d12f      	bne.n	42bc <z_log_init+0x84>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    425c:	4c1a      	ldr	r4, [pc, #104]	; (42c8 <z_log_init+0x90>)
	int i = 0;
    425e:	2600      	movs	r6, #0
    4260:	e007      	b.n	4272 <z_log_init+0x3a>
						   backend->cb->ctx,
    4262:	6863      	ldr	r3, [r4, #4]
				log_backend_enable(backend,
    4264:	2204      	movs	r2, #4
    4266:	6819      	ldr	r1, [r3, #0]
    4268:	4620      	mov	r0, r4
    426a:	f000 fb27 	bl	48bc <log_backend_enable>
			i++;
    426e:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    4270:	3410      	adds	r4, #16
    4272:	4b16      	ldr	r3, [pc, #88]	; (42cc <z_log_init+0x94>)
    4274:	429c      	cmp	r4, r3
    4276:	d213      	bcs.n	42a0 <z_log_init+0x68>
		if (backend->autostart) {
    4278:	7b23      	ldrb	r3, [r4, #12]
    427a:	2b00      	cmp	r3, #0
    427c:	d0f8      	beq.n	4270 <z_log_init+0x38>
	if (backend->api->init) {
    427e:	6823      	ldr	r3, [r4, #0]
    4280:	68db      	ldr	r3, [r3, #12]
    4282:	b10b      	cbz	r3, 4288 <z_log_init+0x50>
		backend->api->init(backend);
    4284:	4620      	mov	r0, r4
    4286:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    4288:	6823      	ldr	r3, [r4, #0]
    428a:	691b      	ldr	r3, [r3, #16]
    428c:	2b00      	cmp	r3, #0
    428e:	d0e8      	beq.n	4262 <z_log_init+0x2a>
		return backend->api->is_ready(backend);
    4290:	4620      	mov	r0, r4
    4292:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    4294:	2800      	cmp	r0, #0
    4296:	d0e4      	beq.n	4262 <z_log_init+0x2a>
				mask |= BIT(i);
    4298:	2301      	movs	r3, #1
    429a:	40b3      	lsls	r3, r6
    429c:	431d      	orrs	r5, r3
    429e:	e7e6      	b.n	426e <z_log_init+0x36>
	if (blocking) {
    42a0:	f1b8 0f00 	cmp.w	r8, #0
    42a4:	d00b      	beq.n	42be <z_log_init+0x86>
		while (mask) {
    42a6:	b155      	cbz	r5, 42be <z_log_init+0x86>
			mask = activate_foreach_backend(mask);
    42a8:	4628      	mov	r0, r5
    42aa:	f7ff ff93 	bl	41d4 <activate_foreach_backend>
    42ae:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    42b0:	2f00      	cmp	r7, #0
    42b2:	d0f8      	beq.n	42a6 <z_log_init+0x6e>
				k_msleep(10);
    42b4:	200a      	movs	r0, #10
    42b6:	f00c f991 	bl	105dc <k_msleep>
    42ba:	e7f4      	b.n	42a6 <z_log_init+0x6e>
		return 0;
    42bc:	2500      	movs	r5, #0
}
    42be:	4628      	mov	r0, r5
    42c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    42c4:	20001164 	.word	0x20001164
    42c8:	000153cc 	.word	0x000153cc
    42cc:	000153ec 	.word	0x000153ec

000042d0 <thread_set>:
{
    42d0:	b508      	push	{r3, lr}
	proc_tid = process_tid;
    42d2:	4b06      	ldr	r3, [pc, #24]	; (42ec <thread_set+0x1c>)
    42d4:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    42d6:	b118      	cbz	r0, 42e0 <thread_set+0x10>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    42d8:	4b05      	ldr	r3, [pc, #20]	; (42f0 <thread_set+0x20>)
    42da:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
    42dc:	2b09      	cmp	r3, #9
    42de:	dc00      	bgt.n	42e2 <thread_set+0x12>
}
    42e0:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
    42e2:	4804      	ldr	r0, [pc, #16]	; (42f4 <thread_set+0x24>)
    42e4:	f009 faa2 	bl	d82c <z_impl_k_sem_give>
}
    42e8:	e7fa      	b.n	42e0 <thread_set+0x10>
    42ea:	bf00      	nop
    42ec:	20001158 	.word	0x20001158
    42f0:	20001160 	.word	0x20001160
    42f4:	20000330 	.word	0x20000330

000042f8 <log_process_thread_timer_expiry_fn>:

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
    42f8:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    42fa:	4802      	ldr	r0, [pc, #8]	; (4304 <log_process_thread_timer_expiry_fn+0xc>)
    42fc:	f009 fa96 	bl	d82c <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
    4300:	bd08      	pop	{r3, pc}
    4302:	bf00      	nop
    4304:	20000330 	.word	0x20000330

00004308 <msg_filter_check>:
	va_end(ap);
}

static inline bool z_log_item_is_msg(const union log_msg_generic *msg)
{
	return msg->generic.type == Z_LOG_MSG_LOG;
    4308:	780b      	ldrb	r3, [r1, #0]
	if (!z_log_item_is_msg(msg)) {
    430a:	f013 0f04 	tst.w	r3, #4
    430e:	d117      	bne.n	4340 <msg_filter_check+0x38>
{
    4310:	b510      	push	{r4, lr}
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    4312:	684a      	ldr	r2, [r1, #4]
	return msg->hdr.desc.level;
    4314:	880b      	ldrh	r3, [r1, #0]
    4316:	f3c3 1482 	ubfx	r4, r3, #6, #3
	return msg->hdr.desc.domain;
    431a:	7809      	ldrb	r1, [r1, #0]
    431c:	f3c1 01c2 	ubfx	r1, r1, #3, #3
	if (level == LOG_LEVEL_NONE) {
    4320:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
    4324:	d00e      	beq.n	4344 <msg_filter_check+0x3c>
	if (source) {
    4326:	b17a      	cbz	r2, 4348 <msg_filter_check+0x40>
 *
 * @return Source ID.
 */
static inline uint32_t log_dynamic_source_id(struct log_source_dynamic_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
    4328:	4b08      	ldr	r3, [pc, #32]	; (434c <msg_filter_check+0x44>)
    432a:	1ad2      	subs	r2, r2, r3
		backend_level = log_filter_get(backend, domain_id, source_id, true);
    432c:	2301      	movs	r3, #1
    432e:	f342 028f 	sbfx	r2, r2, #2, #16
    4332:	f00c f9e3 	bl	106fc <log_filter_get>
		return (level <= backend_level);
    4336:	4284      	cmp	r4, r0
    4338:	bf8c      	ite	hi
    433a:	2000      	movhi	r0, #0
    433c:	2001      	movls	r0, #1
}
    433e:	bd10      	pop	{r4, pc}
		return true;
    4340:	2001      	movs	r0, #1
}
    4342:	4770      	bx	lr
		return true;
    4344:	2001      	movs	r0, #1
    4346:	e7fa      	b.n	433e <msg_filter_check+0x36>
		return true;
    4348:	2001      	movs	r0, #1
    434a:	e7f8      	b.n	433e <msg_filter_check+0x36>
    434c:	200002b0 	.word	0x200002b0

00004350 <msg_process>:
{
    4350:	b538      	push	{r3, r4, r5, lr}
    4352:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    4354:	4c0b      	ldr	r4, [pc, #44]	; (4384 <msg_process+0x34>)
    4356:	e000      	b.n	435a <msg_process+0xa>
    4358:	3410      	adds	r4, #16
    435a:	4b0b      	ldr	r3, [pc, #44]	; (4388 <msg_process+0x38>)
    435c:	429c      	cmp	r4, r3
    435e:	d20f      	bcs.n	4380 <msg_process+0x30>
	return backend->cb->active;
    4360:	6863      	ldr	r3, [r4, #4]
    4362:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend) &&
    4364:	2b00      	cmp	r3, #0
    4366:	d0f7      	beq.n	4358 <msg_process+0x8>
		    msg_filter_check(backend, msg)) {
    4368:	4629      	mov	r1, r5
    436a:	4620      	mov	r0, r4
    436c:	f7ff ffcc 	bl	4308 <msg_filter_check>
		if (log_backend_is_active(backend) &&
    4370:	2800      	cmp	r0, #0
    4372:	d0f1      	beq.n	4358 <msg_process+0x8>
	backend->api->process(backend, msg);
    4374:	6823      	ldr	r3, [r4, #0]
    4376:	681b      	ldr	r3, [r3, #0]
    4378:	4629      	mov	r1, r5
    437a:	4620      	mov	r0, r4
    437c:	4798      	blx	r3
}
    437e:	e7eb      	b.n	4358 <msg_process+0x8>
}
    4380:	bd38      	pop	{r3, r4, r5, pc}
    4382:	bf00      	nop
    4384:	000153cc 	.word	0x000153cc
    4388:	000153ec 	.word	0x000153ec

0000438c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
    438c:	b530      	push	{r4, r5, lr}
    438e:	b089      	sub	sp, #36	; 0x24
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    4390:	2200      	movs	r2, #0
    4392:	490f      	ldr	r1, [pc, #60]	; (43d0 <enable_logger+0x44>)
    4394:	480f      	ldr	r0, [pc, #60]	; (43d4 <enable_logger+0x48>)
    4396:	f010 fc30 	bl	14bfa <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    439a:	4d0f      	ldr	r5, [pc, #60]	; (43d8 <enable_logger+0x4c>)
    439c:	2200      	movs	r2, #0
    439e:	2300      	movs	r3, #0
    43a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    43a4:	2400      	movs	r4, #0
    43a6:	9404      	str	r4, [sp, #16]
    43a8:	230e      	movs	r3, #14
    43aa:	9303      	str	r3, [sp, #12]
    43ac:	9402      	str	r4, [sp, #8]
    43ae:	9401      	str	r4, [sp, #4]
    43b0:	9400      	str	r4, [sp, #0]
    43b2:	4b0a      	ldr	r3, [pc, #40]	; (43dc <enable_logger+0x50>)
    43b4:	f44f 7240 	mov.w	r2, #768	; 0x300
    43b8:	4909      	ldr	r1, [pc, #36]	; (43e0 <enable_logger+0x54>)
    43ba:	4628      	mov	r0, r5
    43bc:	f010 f9a1 	bl	14702 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    43c0:	4908      	ldr	r1, [pc, #32]	; (43e4 <enable_logger+0x58>)
    43c2:	4628      	mov	r0, r5
    43c4:	f009 f840 	bl	d448 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    43c8:	4620      	mov	r0, r4
    43ca:	b009      	add	sp, #36	; 0x24
    43cc:	bd30      	pop	{r4, r5, pc}
    43ce:	bf00      	nop
    43d0:	000042f9 	.word	0x000042f9
    43d4:	20000820 	.word	0x20000820
    43d8:	20000360 	.word	0x20000360
    43dc:	0000472d 	.word	0x0000472d
    43e0:	20003eb8 	.word	0x20003eb8
    43e4:	00015cdc 	.word	0x00015cdc

000043e8 <log_format_func_t_get>:
}
    43e8:	4b01      	ldr	r3, [pc, #4]	; (43f0 <log_format_func_t_get+0x8>)
    43ea:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    43ee:	4770      	bx	lr
    43f0:	00015cf8 	.word	0x00015cf8

000043f4 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    43f4:	b148      	cbz	r0, 440a <log_set_timestamp_func+0x16>
{
    43f6:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    43f8:	4a05      	ldr	r2, [pc, #20]	; (4410 <log_set_timestamp_func+0x1c>)
    43fa:	6010      	str	r0, [r2, #0]
	timestamp_freq = freq;
    43fc:	4b05      	ldr	r3, [pc, #20]	; (4414 <log_set_timestamp_func+0x20>)
    43fe:	6019      	str	r1, [r3, #0]
		log_output_timestamp_freq_set(freq);
    4400:	4608      	mov	r0, r1
    4402:	f000 fd31 	bl	4e68 <log_output_timestamp_freq_set>
	return 0;
    4406:	2000      	movs	r0, #0
}
    4408:	bd08      	pop	{r3, pc}
		return -EINVAL;
    440a:	f06f 0015 	mvn.w	r0, #21
}
    440e:	4770      	bx	lr
    4410:	20000040 	.word	0x20000040
    4414:	20001154 	.word	0x20001154

00004418 <z_log_notify_backend_enabled>:
{
    4418:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    441a:	4b05      	ldr	r3, [pc, #20]	; (4430 <z_log_notify_backend_enabled+0x18>)
    441c:	781b      	ldrb	r3, [r3, #0]
    441e:	b11b      	cbz	r3, 4428 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
    4420:	4b03      	ldr	r3, [pc, #12]	; (4430 <z_log_notify_backend_enabled+0x18>)
    4422:	2201      	movs	r2, #1
    4424:	701a      	strb	r2, [r3, #0]
}
    4426:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
    4428:	4802      	ldr	r0, [pc, #8]	; (4434 <z_log_notify_backend_enabled+0x1c>)
    442a:	f009 f9ff 	bl	d82c <z_impl_k_sem_give>
}
    442e:	e7f7      	b.n	4420 <z_log_notify_backend_enabled+0x8>
    4430:	20003cb0 	.word	0x20003cb0
    4434:	20000330 	.word	0x20000330

00004438 <z_log_dropped>:
    4438:	4b0d      	ldr	r3, [pc, #52]	; (4470 <z_log_dropped+0x38>)
    443a:	f3bf 8f5b 	dmb	ish
    443e:	e853 1f00 	ldrex	r1, [r3]
    4442:	3101      	adds	r1, #1
    4444:	e843 1200 	strex	r2, r1, [r3]
    4448:	2a00      	cmp	r2, #0
    444a:	d1f8      	bne.n	443e <z_log_dropped+0x6>
    444c:	f3bf 8f5b 	dmb	ish
	if (buffered) {
    4450:	b900      	cbnz	r0, 4454 <z_log_dropped+0x1c>
}
    4452:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    4454:	4b07      	ldr	r3, [pc, #28]	; (4474 <z_log_dropped+0x3c>)
    4456:	f3bf 8f5b 	dmb	ish
    445a:	e853 1f00 	ldrex	r1, [r3]
    445e:	3901      	subs	r1, #1
    4460:	e843 1200 	strex	r2, r1, [r3]
    4464:	2a00      	cmp	r2, #0
    4466:	d1f8      	bne.n	445a <z_log_dropped+0x22>
    4468:	f3bf 8f5b 	dmb	ish
    446c:	e7f1      	b.n	4452 <z_log_dropped+0x1a>
    446e:	bf00      	nop
    4470:	2000115c 	.word	0x2000115c
    4474:	20001160 	.word	0x20001160

00004478 <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4478:	4b06      	ldr	r3, [pc, #24]	; (4494 <z_log_dropped_read_and_clear+0x1c>)
}
    447a:	2000      	movs	r0, #0
    447c:	4601      	mov	r1, r0
    447e:	f3bf 8f5b 	dmb	ish
    4482:	e853 0f00 	ldrex	r0, [r3]
    4486:	e843 1200 	strex	r2, r1, [r3]
    448a:	2a00      	cmp	r2, #0
    448c:	d1f9      	bne.n	4482 <z_log_dropped_read_and_clear+0xa>
    448e:	f3bf 8f5b 	dmb	ish
    4492:	4770      	bx	lr
    4494:	2000115c 	.word	0x2000115c

00004498 <dropped_notify>:
{
    4498:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    449a:	f7ff ffed 	bl	4478 <z_log_dropped_read_and_clear>
    449e:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    44a0:	4c09      	ldr	r4, [pc, #36]	; (44c8 <dropped_notify+0x30>)
    44a2:	e000      	b.n	44a6 <dropped_notify+0xe>
    44a4:	3410      	adds	r4, #16
    44a6:	4b09      	ldr	r3, [pc, #36]	; (44cc <dropped_notify+0x34>)
    44a8:	429c      	cmp	r4, r3
    44aa:	d20b      	bcs.n	44c4 <dropped_notify+0x2c>
	return backend->cb->active;
    44ac:	6863      	ldr	r3, [r4, #4]
    44ae:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    44b0:	2b00      	cmp	r3, #0
    44b2:	d0f7      	beq.n	44a4 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
    44b4:	6823      	ldr	r3, [r4, #0]
    44b6:	685b      	ldr	r3, [r3, #4]
    44b8:	2b00      	cmp	r3, #0
    44ba:	d0f3      	beq.n	44a4 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
    44bc:	4629      	mov	r1, r5
    44be:	4620      	mov	r0, r4
    44c0:	4798      	blx	r3
    44c2:	e7ef      	b.n	44a4 <dropped_notify+0xc>
}
    44c4:	bd38      	pop	{r3, r4, r5, pc}
    44c6:	bf00      	nop
    44c8:	000153cc 	.word	0x000153cc
    44cc:	000153ec 	.word	0x000153ec

000044d0 <z_log_dropped_pending>:
	return dropped_cnt > 0;
    44d0:	4b03      	ldr	r3, [pc, #12]	; (44e0 <z_log_dropped_pending+0x10>)
    44d2:	6818      	ldr	r0, [r3, #0]
}
    44d4:	2800      	cmp	r0, #0
    44d6:	bfd4      	ite	le
    44d8:	2000      	movle	r0, #0
    44da:	2001      	movgt	r0, #1
    44dc:	4770      	bx	lr
    44de:	bf00      	nop
    44e0:	2000115c 	.word	0x2000115c

000044e4 <z_log_msg_init>:
{
    44e4:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    44e6:	4c04      	ldr	r4, [pc, #16]	; (44f8 <z_log_msg_init+0x14>)
    44e8:	4904      	ldr	r1, [pc, #16]	; (44fc <z_log_msg_init+0x18>)
    44ea:	4620      	mov	r0, r4
    44ec:	f00b fb7f 	bl	fbee <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    44f0:	4b03      	ldr	r3, [pc, #12]	; (4500 <z_log_msg_init+0x1c>)
    44f2:	601c      	str	r4, [r3, #0]
}
    44f4:	bd10      	pop	{r4, pc}
    44f6:	bf00      	nop
    44f8:	2000026c 	.word	0x2000026c
    44fc:	00015ce4 	.word	0x00015ce4
    4500:	20001150 	.word	0x20001150

00004504 <log_core_init>:
{
    4504:	b508      	push	{r3, lr}
	panic_mode = false;
    4506:	2300      	movs	r3, #0
    4508:	4a07      	ldr	r2, [pc, #28]	; (4528 <log_core_init+0x24>)
    450a:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    450c:	4a07      	ldr	r2, [pc, #28]	; (452c <log_core_init+0x28>)
    450e:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    4510:	4a07      	ldr	r2, [pc, #28]	; (4530 <log_core_init+0x2c>)
    4512:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    4514:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    4518:	4806      	ldr	r0, [pc, #24]	; (4534 <log_core_init+0x30>)
    451a:	f7ff ff6b 	bl	43f4 <log_set_timestamp_func>
		z_log_msg_init();
    451e:	f7ff ffe1 	bl	44e4 <z_log_msg_init>
		z_log_runtime_filters_init();
    4522:	f000 f97b 	bl	481c <z_log_runtime_filters_init>
}
    4526:	bd08      	pop	{r3, pc}
    4528:	20003cb1 	.word	0x20003cb1
    452c:	2000115c 	.word	0x2000115c
    4530:	20001160 	.word	0x20001160
    4534:	000105d5 	.word	0x000105d5

00004538 <z_log_msg_alloc>:
{
    4538:	b508      	push	{r3, lr}
    453a:	4601      	mov	r1, r0
	return msg_alloc(&log_buffer, wlen);
    453c:	4801      	ldr	r0, [pc, #4]	; (4544 <z_log_msg_alloc+0xc>)
    453e:	f00c f863 	bl	10608 <msg_alloc>
}
    4542:	bd08      	pop	{r3, pc}
    4544:	2000026c 	.word	0x2000026c

00004548 <z_log_msg_local_claim>:
{
    4548:	b508      	push	{r3, lr}
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    454a:	4802      	ldr	r0, [pc, #8]	; (4554 <z_log_msg_local_claim+0xc>)
    454c:	f00b fc33 	bl	fdb6 <mpsc_pbuf_claim>
}
    4550:	bd08      	pop	{r3, pc}
    4552:	bf00      	nop
    4554:	2000026c 	.word	0x2000026c

00004558 <z_log_msg_free>:
{
    4558:	b508      	push	{r3, lr}
    455a:	4601      	mov	r1, r0
	msg_free(curr_log_buffer, msg);
    455c:	4b02      	ldr	r3, [pc, #8]	; (4568 <z_log_msg_free+0x10>)
    455e:	6818      	ldr	r0, [r3, #0]
    4560:	f00c f858 	bl	10614 <msg_free>
}
    4564:	bd08      	pop	{r3, pc}
    4566:	bf00      	nop
    4568:	20001150 	.word	0x20001150

0000456c <z_log_msg_pending>:
{
    456c:	b508      	push	{r3, lr}
		return msg_pending(&log_buffer);
    456e:	4802      	ldr	r0, [pc, #8]	; (4578 <z_log_msg_pending+0xc>)
    4570:	f00c f854 	bl	1061c <msg_pending>
}
    4574:	bd08      	pop	{r3, pc}
    4576:	bf00      	nop
    4578:	2000026c 	.word	0x2000026c

0000457c <z_impl_log_process>:
{
    457c:	b510      	push	{r4, lr}
    457e:	b082      	sub	sp, #8
	k_timeout_t backoff = K_NO_WAIT;
    4580:	2200      	movs	r2, #0
    4582:	2300      	movs	r3, #0
    4584:	e9cd 2300 	strd	r2, r3, [sp]
	if (!backend_attached) {
    4588:	4b28      	ldr	r3, [pc, #160]	; (462c <z_impl_log_process+0xb0>)
    458a:	7818      	ldrb	r0, [r3, #0]
    458c:	b908      	cbnz	r0, 4592 <z_impl_log_process+0x16>
}
    458e:	b002      	add	sp, #8
    4590:	bd10      	pop	{r4, pc}
	msg = z_log_msg_claim(&backoff);
    4592:	4668      	mov	r0, sp
    4594:	f00c f85a 	bl	1064c <z_log_msg_claim>
	if (msg) {
    4598:	4604      	mov	r4, r0
    459a:	b188      	cbz	r0, 45c0 <z_impl_log_process+0x44>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    459c:	4b24      	ldr	r3, [pc, #144]	; (4630 <z_impl_log_process+0xb4>)
    459e:	f3bf 8f5b 	dmb	ish
    45a2:	e853 1f00 	ldrex	r1, [r3]
    45a6:	3901      	subs	r1, #1
    45a8:	e843 1200 	strex	r2, r1, [r3]
    45ac:	2a00      	cmp	r2, #0
    45ae:	d1f8      	bne.n	45a2 <z_impl_log_process+0x26>
    45b0:	f3bf 8f5b 	dmb	ish
		msg_process(msg);
    45b4:	4620      	mov	r0, r4
    45b6:	f7ff fecb 	bl	4350 <msg_process>
		z_log_msg_free(msg);
    45ba:	4620      	mov	r0, r4
    45bc:	f7ff ffcc 	bl	4558 <z_log_msg_free>
		bool dropped_pend = z_log_dropped_pending();
    45c0:	f7ff ff86 	bl	44d0 <z_log_dropped_pending>
		if ((dropped_pend || unordered_pend) &&
    45c4:	b958      	cbnz	r0, 45de <z_impl_log_process+0x62>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    45c6:	4a1b      	ldr	r2, [pc, #108]	; (4634 <z_impl_log_process+0xb8>)
    45c8:	6813      	ldr	r3, [r2, #0]
    45ca:	6851      	ldr	r1, [r2, #4]
    45cc:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    45d0:	f141 0100 	adc.w	r1, r1, #0
    45d4:	6013      	str	r3, [r2, #0]
    45d6:	6051      	str	r1, [r2, #4]
	return z_log_msg_pending();
    45d8:	f7ff ffc8 	bl	456c <z_log_msg_pending>
    45dc:	e7d7      	b.n	458e <z_impl_log_process+0x12>
	return z_impl_k_uptime_ticks();
    45de:	f010 faf6 	bl	14bce <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    45e2:	014a      	lsls	r2, r1, #5
    45e4:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    45e8:	0143      	lsls	r3, r0, #5
    45ea:	1a1b      	subs	r3, r3, r0
    45ec:	eb62 0201 	sbc.w	r2, r2, r1
    45f0:	0092      	lsls	r2, r2, #2
    45f2:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    45f6:	009b      	lsls	r3, r3, #2
    45f8:	181b      	adds	r3, r3, r0
    45fa:	eb42 0201 	adc.w	r2, r2, r1
    45fe:	00d2      	lsls	r2, r2, #3
    4600:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    4604:	f3c3 3310 	ubfx	r3, r3, #12, #17
    4608:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
    460c:	0bd2      	lsrs	r2, r2, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    460e:	4809      	ldr	r0, [pc, #36]	; (4634 <z_impl_log_process+0xb8>)
    4610:	6801      	ldr	r1, [r0, #0]
    4612:	6840      	ldr	r0, [r0, #4]
    4614:	1a5b      	subs	r3, r3, r1
    4616:	eb62 0200 	sbc.w	r2, r2, r0
		if ((dropped_pend || unordered_pend) &&
    461a:	f240 31e9 	movw	r1, #1001	; 0x3e9
    461e:	428b      	cmp	r3, r1
    4620:	f172 0200 	sbcs.w	r2, r2, #0
    4624:	d3cf      	bcc.n	45c6 <z_impl_log_process+0x4a>
				dropped_notify();
    4626:	f7ff ff37 	bl	4498 <dropped_notify>
			if (unordered_pend) {
    462a:	e7cc      	b.n	45c6 <z_impl_log_process+0x4a>
    462c:	20003cb0 	.word	0x20003cb0
    4630:	20001160 	.word	0x20001160
    4634:	20000818 	.word	0x20000818

00004638 <z_impl_log_panic>:
	if (panic_mode) {
    4638:	4b0f      	ldr	r3, [pc, #60]	; (4678 <z_impl_log_panic+0x40>)
    463a:	781b      	ldrb	r3, [r3, #0]
    463c:	b103      	cbz	r3, 4640 <z_impl_log_panic+0x8>
    463e:	4770      	bx	lr
{
    4640:	b510      	push	{r4, lr}
	(void)z_log_init(true, false);
    4642:	2100      	movs	r1, #0
    4644:	2001      	movs	r0, #1
    4646:	f7ff fdf7 	bl	4238 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    464a:	4c0c      	ldr	r4, [pc, #48]	; (467c <z_impl_log_panic+0x44>)
    464c:	e000      	b.n	4650 <z_impl_log_panic+0x18>
    464e:	3410      	adds	r4, #16
    4650:	4b0b      	ldr	r3, [pc, #44]	; (4680 <z_impl_log_panic+0x48>)
    4652:	429c      	cmp	r4, r3
    4654:	d208      	bcs.n	4668 <z_impl_log_panic+0x30>
	return backend->cb->active;
    4656:	6863      	ldr	r3, [r4, #4]
    4658:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    465a:	2b00      	cmp	r3, #0
    465c:	d0f7      	beq.n	464e <z_impl_log_panic+0x16>
	backend->api->panic(backend);
    465e:	6823      	ldr	r3, [r4, #0]
    4660:	689b      	ldr	r3, [r3, #8]
    4662:	4620      	mov	r0, r4
    4664:	4798      	blx	r3
}
    4666:	e7f2      	b.n	464e <z_impl_log_panic+0x16>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    4668:	f7ff ff88 	bl	457c <z_impl_log_process>
		while (log_process() == true) {
    466c:	2800      	cmp	r0, #0
    466e:	d1fb      	bne.n	4668 <z_impl_log_panic+0x30>
	panic_mode = true;
    4670:	4b01      	ldr	r3, [pc, #4]	; (4678 <z_impl_log_panic+0x40>)
    4672:	2201      	movs	r2, #1
    4674:	701a      	strb	r2, [r3, #0]
}
    4676:	bd10      	pop	{r4, pc}
    4678:	20003cb1 	.word	0x20003cb1
    467c:	000153cc 	.word	0x000153cc
    4680:	000153ec 	.word	0x000153ec

00004684 <z_log_msg_post_finalize>:
{
    4684:	b510      	push	{r4, lr}
    4686:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    4688:	4b1b      	ldr	r3, [pc, #108]	; (46f8 <z_log_msg_post_finalize+0x74>)
    468a:	f3bf 8f5b 	dmb	ish
    468e:	e853 2f00 	ldrex	r2, [r3]
    4692:	1c51      	adds	r1, r2, #1
    4694:	e843 1000 	strex	r0, r1, [r3]
    4698:	2800      	cmp	r0, #0
    469a:	d1f8      	bne.n	468e <z_log_msg_post_finalize+0xa>
    469c:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    46a0:	4b16      	ldr	r3, [pc, #88]	; (46fc <z_log_msg_post_finalize+0x78>)
    46a2:	781b      	ldrb	r3, [r3, #0]
    46a4:	b963      	cbnz	r3, 46c0 <z_log_msg_post_finalize+0x3c>
	} else if (proc_tid != NULL) {
    46a6:	4b16      	ldr	r3, [pc, #88]	; (4700 <z_log_msg_post_finalize+0x7c>)
    46a8:	681b      	ldr	r3, [r3, #0]
    46aa:	b1bb      	cbz	r3, 46dc <z_log_msg_post_finalize+0x58>
		if (cnt == 0) {
    46ac:	b1c2      	cbz	r2, 46e0 <z_log_msg_post_finalize+0x5c>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    46ae:	2a0a      	cmp	r2, #10
    46b0:	d114      	bne.n	46dc <z_log_msg_post_finalize+0x58>
	z_impl_k_timer_stop(timer);
    46b2:	4814      	ldr	r0, [pc, #80]	; (4704 <z_log_msg_post_finalize+0x80>)
    46b4:	f010 faad 	bl	14c12 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    46b8:	4813      	ldr	r0, [pc, #76]	; (4708 <z_log_msg_post_finalize+0x84>)
    46ba:	f009 f8b7 	bl	d82c <z_impl_k_sem_give>
}
    46be:	e00d      	b.n	46dc <z_log_msg_post_finalize+0x58>
    46c0:	f04f 0320 	mov.w	r3, #32
    46c4:	f3ef 8411 	mrs	r4, BASEPRI
    46c8:	f383 8812 	msr	BASEPRI_MAX, r3
    46cc:	f3bf 8f6f 	isb	sy
    46d0:	f7ff ff54 	bl	457c <z_impl_log_process>
	__asm__ volatile(
    46d4:	f384 8811 	msr	BASEPRI, r4
    46d8:	f3bf 8f6f 	isb	sy
    46dc:	b002      	add	sp, #8
    46de:	bd10      	pop	{r4, pc}
	z_impl_k_timer_start(timer, duration, period);
    46e0:	2200      	movs	r2, #0
    46e2:	2300      	movs	r3, #0
    46e4:	e9cd 2300 	strd	r2, r3, [sp]
    46e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    46ec:	2300      	movs	r3, #0
    46ee:	4805      	ldr	r0, [pc, #20]	; (4704 <z_log_msg_post_finalize+0x80>)
    46f0:	f009 fea8 	bl	e444 <z_impl_k_timer_start>
    46f4:	e7f2      	b.n	46dc <z_log_msg_post_finalize+0x58>
    46f6:	bf00      	nop
    46f8:	20001160 	.word	0x20001160
    46fc:	20003cb1 	.word	0x20003cb1
    4700:	20001158 	.word	0x20001158
    4704:	20000820 	.word	0x20000820
    4708:	20000330 	.word	0x20000330

0000470c <z_log_msg_commit>:
{
    470c:	b510      	push	{r4, lr}
    470e:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    4710:	4b04      	ldr	r3, [pc, #16]	; (4724 <z_log_msg_commit+0x18>)
    4712:	681b      	ldr	r3, [r3, #0]
    4714:	4798      	blx	r3
    4716:	60a0      	str	r0, [r4, #8]
	msg_commit(&log_buffer, msg);
    4718:	4621      	mov	r1, r4
    471a:	4803      	ldr	r0, [pc, #12]	; (4728 <z_log_msg_commit+0x1c>)
    471c:	f00b ff9a 	bl	10654 <msg_commit>
}
    4720:	bd10      	pop	{r4, pc}
    4722:	bf00      	nop
    4724:	20000040 	.word	0x20000040
    4728:	2000026c 	.word	0x2000026c

0000472c <log_process_thread_func>:
{
    472c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t activate_mask = z_log_init(false, false);
    4730:	2100      	movs	r1, #0
    4732:	4608      	mov	r0, r1
    4734:	f7ff fd80 	bl	4238 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    4738:	4680      	mov	r8, r0
    473a:	b140      	cbz	r0, 474e <log_process_thread_func+0x22>
    473c:	f240 6667 	movw	r6, #1639	; 0x667
    4740:	2700      	movs	r7, #0
	return z_impl_z_current_get();
    4742:	f009 fc6d 	bl	e020 <z_impl_z_current_get>
	thread_set(k_current_get());
    4746:	f7ff fdc3 	bl	42d0 <thread_set>
	bool processed_any = false;
    474a:	2500      	movs	r5, #0
    474c:	e015      	b.n	477a <log_process_thread_func+0x4e>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    474e:	f04f 36ff 	mov.w	r6, #4294967295
    4752:	f04f 37ff 	mov.w	r7, #4294967295
    4756:	e7f4      	b.n	4742 <log_process_thread_func+0x16>
			activate_mask = activate_foreach_backend(activate_mask);
    4758:	4640      	mov	r0, r8
    475a:	f7ff fd3b 	bl	41d4 <activate_foreach_backend>
			if (!activate_mask) {
    475e:	4680      	mov	r8, r0
    4760:	b970      	cbnz	r0, 4780 <log_process_thread_func+0x54>
				timeout = K_FOREVER;
    4762:	f04f 36ff 	mov.w	r6, #4294967295
    4766:	f04f 37ff 	mov.w	r7, #4294967295
    476a:	e009      	b.n	4780 <log_process_thread_func+0x54>
    476c:	462c      	mov	r4, r5
	return z_impl_k_sem_take(sem, timeout);
    476e:	4632      	mov	r2, r6
    4770:	463b      	mov	r3, r7
    4772:	4809      	ldr	r0, [pc, #36]	; (4798 <log_process_thread_func+0x6c>)
    4774:	f009 f882 	bl	d87c <z_impl_k_sem_take>
{
    4778:	4625      	mov	r5, r4
		if (activate_mask) {
    477a:	f1b8 0f00 	cmp.w	r8, #0
    477e:	d1eb      	bne.n	4758 <log_process_thread_func+0x2c>
    4780:	f7ff fefc 	bl	457c <z_impl_log_process>
		if (log_process() == false) {
    4784:	4604      	mov	r4, r0
    4786:	2800      	cmp	r0, #0
    4788:	d1f6      	bne.n	4778 <log_process_thread_func+0x4c>
			if (processed_any) {
    478a:	2d00      	cmp	r5, #0
    478c:	d0ee      	beq.n	476c <log_process_thread_func+0x40>
				log_backend_notify_all(LOG_BACKEND_EVT_PROCESS_THREAD_DONE, NULL);
    478e:	2100      	movs	r1, #0
    4790:	4608      	mov	r0, r1
    4792:	f7ff fd07 	bl	41a4 <log_backend_notify_all>
    4796:	e7ea      	b.n	476e <log_process_thread_func+0x42>
    4798:	20000330 	.word	0x20000330

0000479c <log_mem_get_usage>:
{
    479c:	b508      	push	{r3, lr}
    479e:	460a      	mov	r2, r1
	mpsc_pbuf_get_utilization(&log_buffer, buf_size, usage);
    47a0:	4601      	mov	r1, r0
    47a2:	4802      	ldr	r0, [pc, #8]	; (47ac <log_mem_get_usage+0x10>)
    47a4:	f00b fbc1 	bl	ff2a <mpsc_pbuf_get_utilization>
}
    47a8:	2000      	movs	r0, #0
    47aa:	bd08      	pop	{r3, pc}
    47ac:	2000026c 	.word	0x2000026c

000047b0 <log_mem_get_max_usage>:
{
    47b0:	b508      	push	{r3, lr}
    47b2:	4601      	mov	r1, r0
	return mpsc_pbuf_get_max_utilization(&log_buffer, max);
    47b4:	4801      	ldr	r0, [pc, #4]	; (47bc <log_mem_get_max_usage+0xc>)
    47b6:	f00b fbc3 	bl	ff40 <mpsc_pbuf_get_max_utilization>
}
    47ba:	bd08      	pop	{r3, pc}
    47bc:	2000026c 	.word	0x2000026c

000047c0 <get_dynamic_filter>:
	if (z_log_is_local_domain(domain_id)) {
		return &__log_dynamic_start[source_id].filters;
	}

	return z_log_link_get_dynamic_filter(domain_id, source_id);
}
    47c0:	4801      	ldr	r0, [pc, #4]	; (47c8 <get_dynamic_filter+0x8>)
    47c2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    47c6:	4770      	bx	lr
    47c8:	200002b0 	.word	0x200002b0

000047cc <log_src_cnt_get>:
}
    47cc:	4802      	ldr	r0, [pc, #8]	; (47d8 <log_src_cnt_get+0xc>)
    47ce:	4b03      	ldr	r3, [pc, #12]	; (47dc <log_src_cnt_get+0x10>)
    47d0:	1ac0      	subs	r0, r0, r3
    47d2:	08c0      	lsrs	r0, r0, #3
    47d4:	4770      	bx	lr
    47d6:	bf00      	nop
    47d8:	000153cc 	.word	0x000153cc
    47dc:	000152f4 	.word	0x000152f4

000047e0 <log_source_name_get>:
{
    47e0:	b510      	push	{r4, lr}
    47e2:	460c      	mov	r4, r1
		if (source_id < log_src_cnt_get(domain_id)) {
    47e4:	f7ff fff2 	bl	47cc <log_src_cnt_get>
    47e8:	42a0      	cmp	r0, r4
    47ea:	d903      	bls.n	47f4 <log_source_name_get+0x14>
			return __log_const_start[source_id].name;
    47ec:	4b02      	ldr	r3, [pc, #8]	; (47f8 <log_source_name_get+0x18>)
    47ee:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
}
    47f2:	bd10      	pop	{r4, pc}
			return NULL;
    47f4:	2000      	movs	r0, #0
    47f6:	e7fc      	b.n	47f2 <log_source_name_get+0x12>
    47f8:	000152f4 	.word	0x000152f4

000047fc <log_compiled_level_get>:
{
    47fc:	b510      	push	{r4, lr}
    47fe:	460c      	mov	r4, r1
		if (source_id < log_src_cnt_get(domain_id)) {
    4800:	f7ff ffe4 	bl	47cc <log_src_cnt_get>
    4804:	42a0      	cmp	r0, r4
    4806:	d904      	bls.n	4812 <log_compiled_level_get+0x16>
			return __log_const_start[source_id].level;
    4808:	4b03      	ldr	r3, [pc, #12]	; (4818 <log_compiled_level_get+0x1c>)
    480a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    480e:	7918      	ldrb	r0, [r3, #4]
}
    4810:	bd10      	pop	{r4, pc}
			return LOG_LEVEL_NONE;
    4812:	2000      	movs	r0, #0
    4814:	e7fc      	b.n	4810 <log_compiled_level_get+0x14>
    4816:	bf00      	nop
    4818:	000152f4 	.word	0x000152f4

0000481c <z_log_runtime_filters_init>:

void z_log_runtime_filters_init(void)
{
    481c:	b510      	push	{r4, lr}
	 *
	 * Each log source's aggregated runtime level is set to match its
	 * compile-time level. When backends are attached later on in
	 * log_init(), they'll be initialized to the same value.
	 */
	for (int i = 0; i < z_log_sources_count(); i++) {
    481e:	2400      	movs	r4, #0
    4820:	e010      	b.n	4844 <z_log_runtime_filters_init+0x28>
		uint32_t *filters = z_log_dynamic_filters_get(i);
		uint8_t level = log_compiled_level_get(Z_LOG_LOCAL_DOMAIN_ID, i);
    4822:	4621      	mov	r1, r4
    4824:	2000      	movs	r0, #0
    4826:	f7ff ffe9 	bl	47fc <log_compiled_level_get>

		level = MAX(level, CONFIG_LOG_OVERRIDE_LEVEL);
		LOG_FILTER_SLOT_SET(filters,
    482a:	4a0a      	ldr	r2, [pc, #40]	; (4854 <z_log_runtime_filters_init+0x38>)
    482c:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    4830:	f023 0307 	bic.w	r3, r3, #7
    4834:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    4838:	f000 0007 	and.w	r0, r0, #7
    483c:	4303      	orrs	r3, r0
    483e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (int i = 0; i < z_log_sources_count(); i++) {
    4842:	3401      	adds	r4, #1
    4844:	4b04      	ldr	r3, [pc, #16]	; (4858 <z_log_runtime_filters_init+0x3c>)
    4846:	4a05      	ldr	r2, [pc, #20]	; (485c <z_log_runtime_filters_init+0x40>)
    4848:	1a9b      	subs	r3, r3, r2
    484a:	ebb4 0fd3 	cmp.w	r4, r3, lsr #3
    484e:	d3e8      	bcc.n	4822 <z_log_runtime_filters_init+0x6>
				    LOG_FILTER_AGGR_SLOT_IDX,
				    level);
	}
}
    4850:	bd10      	pop	{r4, pc}
    4852:	bf00      	nop
    4854:	200002b0 	.word	0x200002b0
    4858:	000153cc 	.word	0x000153cc
    485c:	000152f4 	.word	0x000152f4

00004860 <z_impl_log_filter_set>:
}

uint32_t z_impl_log_filter_set(struct log_backend const *const backend,
			       uint32_t domain_id, int16_t source_id,
			       uint32_t level)
{
    4860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4864:	460e      	mov	r6, r1
    4866:	4617      	mov	r7, r2
    4868:	4698      	mov	r8, r3
	}

	__ASSERT_NO_MSG(source_id < log_src_cnt_get(domain_id));


	if (backend == NULL) {
    486a:	b300      	cbz	r0, 48ae <z_impl_log_filter_set+0x4e>
    486c:	4605      	mov	r5, r0
		}

		return max;
	}

	level = MIN(level, MAX(log_filter_get(backend, domain_id, source_id, false),
    486e:	2300      	movs	r3, #0
    4870:	f00b ff44 	bl	106fc <log_filter_get>
    4874:	4604      	mov	r4, r0
    4876:	b110      	cbz	r0, 487e <z_impl_log_filter_set+0x1e>
    4878:	4540      	cmp	r0, r8
    487a:	d900      	bls.n	487e <z_impl_log_filter_set+0x1e>
    487c:	4644      	mov	r4, r8
	return backend->cb->id;
    487e:	6868      	ldr	r0, [r5, #4]
			       CONFIG_LOG_OVERRIDE_LEVEL));
	set_runtime_filter(log_backend_id_get(backend), domain_id, source_id, level);
    4880:	4623      	mov	r3, r4
    4882:	463a      	mov	r2, r7
    4884:	b2f1      	uxtb	r1, r6
    4886:	7900      	ldrb	r0, [r0, #4]
    4888:	f00b fefe 	bl	10688 <set_runtime_filter>

	return level;
}
    488c:	4620      	mov	r0, r4
    488e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uint32_t current = log_filter_set(iter_backend,
    4892:	4643      	mov	r3, r8
    4894:	463a      	mov	r2, r7
    4896:	4631      	mov	r1, r6
    4898:	4628      	mov	r0, r5
    489a:	f00b ff48 	bl	1072e <log_filter_set>
			max = MAX(current, max);
    489e:	4284      	cmp	r4, r0
    48a0:	bf38      	it	cc
    48a2:	4604      	movcc	r4, r0
		STRUCT_SECTION_FOREACH(log_backend, iter_backend) {
    48a4:	3510      	adds	r5, #16
    48a6:	4b03      	ldr	r3, [pc, #12]	; (48b4 <z_impl_log_filter_set+0x54>)
    48a8:	429d      	cmp	r5, r3
    48aa:	d3f2      	bcc.n	4892 <z_impl_log_filter_set+0x32>
    48ac:	e7ee      	b.n	488c <z_impl_log_filter_set+0x2c>
    48ae:	4d02      	ldr	r5, [pc, #8]	; (48b8 <z_impl_log_filter_set+0x58>)
		uint32_t max = 0U;
    48b0:	2400      	movs	r4, #0
    48b2:	e7f8      	b.n	48a6 <z_impl_log_filter_set+0x46>
    48b4:	000153ec 	.word	0x000153ec
    48b8:	000153cc 	.word	0x000153cc

000048bc <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    48bc:	b538      	push	{r3, r4, r5, lr}
    48be:	4604      	mov	r4, r0
    48c0:	460d      	mov	r5, r1
    48c2:	4611      	mov	r1, r2
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    48c4:	4b08      	ldr	r3, [pc, #32]	; (48e8 <log_backend_enable+0x2c>)
    48c6:	1ac3      	subs	r3, r0, r3
    48c8:	111b      	asrs	r3, r3, #4
    48ca:	3301      	adds	r3, #1
	backend->cb->id = id;
    48cc:	6842      	ldr	r2, [r0, #4]
    48ce:	7113      	strb	r3, [r2, #4]

	log_backend_id_set(backend, id);
	backend->cb->level = level;
    48d0:	6843      	ldr	r3, [r0, #4]
    48d2:	7199      	strb	r1, [r3, #6]
	backend_filter_set(backend, level);
    48d4:	f00b ff2f 	bl	10736 <backend_filter_set>
	backend->cb->ctx = ctx;
    48d8:	6863      	ldr	r3, [r4, #4]
    48da:	601d      	str	r5, [r3, #0]
	backend->cb->active = true;
    48dc:	6863      	ldr	r3, [r4, #4]
    48de:	2201      	movs	r2, #1
    48e0:	715a      	strb	r2, [r3, #5]
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    48e2:	f7ff fd99 	bl	4418 <z_log_notify_backend_enabled>
}
    48e6:	bd38      	pop	{r3, r4, r5, pc}
    48e8:	000153cc 	.word	0x000153cc

000048ec <cbprintf_package_copy>:
{
    48ec:	b500      	push	{lr}
    48ee:	b089      	sub	sp, #36	; 0x24
	struct z_cbprintf_buf_desc buf_desc = {
    48f0:	9205      	str	r2, [sp, #20]
    48f2:	9306      	str	r3, [sp, #24]
    48f4:	2300      	movs	r3, #0
    48f6:	9307      	str	r3, [sp, #28]
	return cbprintf_package_convert(in_packaged, in_len,
    48f8:	b162      	cbz	r2, 4914 <cbprintf_package_copy+0x28>
    48fa:	4a07      	ldr	r2, [pc, #28]	; (4918 <cbprintf_package_copy+0x2c>)
    48fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    48fe:	9302      	str	r3, [sp, #8]
    4900:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4902:	9301      	str	r3, [sp, #4]
    4904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4906:	9300      	str	r3, [sp, #0]
    4908:	ab05      	add	r3, sp, #20
    490a:	f7fd fdf3 	bl	24f4 <cbprintf_package_convert>
}
    490e:	b009      	add	sp, #36	; 0x24
    4910:	f85d fb04 	ldr.w	pc, [sp], #4
	return cbprintf_package_convert(in_packaged, in_len,
    4914:	2200      	movs	r2, #0
    4916:	e7f1      	b.n	48fc <cbprintf_package_copy+0x10>
    4918:	00010777 	.word	0x00010777

0000491c <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    491c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4920:	b08b      	sub	sp, #44	; 0x2c
    4922:	af04      	add	r7, sp, #16
    4924:	4605      	mov	r5, r0
    4926:	461e      	mov	r6, r3

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
    4928:	4688      	mov	r8, r1
	int inlen = desc.package_len;
    492a:	f3c1 244a 	ubfx	r4, r1, #9, #11
	struct log_msg *msg;

	if (inlen > 0) {
    492e:	2c00      	cmp	r4, #0
    4930:	f000 808f 	beq.w	4a52 <z_impl_z_log_msg_static_create+0x136>
    4934:	4691      	mov	r9, r2
	struct z_cbprintf_buf_desc buf_desc = {
    4936:	2200      	movs	r2, #0
    4938:	60fa      	str	r2, [r7, #12]
    493a:	613a      	str	r2, [r7, #16]
    493c:	617a      	str	r2, [r7, #20]
	return cbprintf_package_convert(in_packaged, in_len,
    493e:	2304      	movs	r3, #4
    4940:	9302      	str	r3, [sp, #8]
    4942:	18fb      	adds	r3, r7, r3
    4944:	9301      	str	r3, [sp, #4]
    4946:	230a      	movs	r3, #10
    4948:	9300      	str	r3, [sp, #0]
    494a:	f107 030c 	add.w	r3, r7, #12
    494e:	4621      	mov	r1, r4
    4950:	4648      	mov	r0, r9
    4952:	f7fd fdcf 	bl	24f4 <cbprintf_package_convert>

		len = cbprintf_package_copy(package, inlen,
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
    4956:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    495a:	d35e      	bcc.n	4a1a <z_impl_z_log_msg_static_create+0xfe>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
    495c:	4b46      	ldr	r3, [pc, #280]	; (4a78 <z_impl_z_log_msg_static_create+0x15c>)
    495e:	681b      	ldr	r3, [r3, #0]
    4960:	f013 0f06 	tst.w	r3, #6
    4964:	f000 8084 	beq.w	4a70 <z_impl_z_log_msg_static_create+0x154>
    4968:	f8d9 1004 	ldr.w	r1, [r9, #4]
    496c:	466d      	mov	r5, sp
    496e:	2300      	movs	r3, #0
    4970:	733b      	strb	r3, [r7, #12]
    4972:	2302      	movs	r3, #2
    4974:	737b      	strb	r3, [r7, #13]
    4976:	b08a      	sub	sp, #40	; 0x28
    4978:	ac04      	add	r4, sp, #16
    497a:	f114 0210 	adds.w	r2, r4, #16
    497e:	d021      	beq.n	49c4 <z_impl_z_log_msg_static_create+0xa8>
    4980:	2012      	movs	r0, #18
    4982:	b11a      	cbz	r2, 498c <z_impl_z_log_msg_static_create+0x70>
    4984:	2804      	cmp	r0, #4
    4986:	dd01      	ble.n	498c <z_impl_z_log_msg_static_create+0x70>
    4988:	4b3c      	ldr	r3, [pc, #240]	; (4a7c <z_impl_z_log_msg_static_create+0x160>)
    498a:	6163      	str	r3, [r4, #20]
    498c:	2300      	movs	r3, #0
    498e:	703b      	strb	r3, [r7, #0]
    4990:	2302      	movs	r3, #2
    4992:	707b      	strb	r3, [r7, #1]
    4994:	b1ca      	cbz	r2, 49ca <z_impl_z_log_msg_static_create+0xae>
    4996:	4603      	mov	r3, r0
    4998:	2808      	cmp	r0, #8
    499a:	dd00      	ble.n	499e <z_impl_z_log_msg_static_create+0x82>
    499c:	61a1      	str	r1, [r4, #24]
    499e:	2b0c      	cmp	r3, #12
    49a0:	dd02      	ble.n	49a8 <z_impl_z_log_msg_static_create+0x8c>
    49a2:	f240 73ff 	movw	r3, #2047	; 0x7ff
    49a6:	61e3      	str	r3, [r4, #28]
    49a8:	f104 0320 	add.w	r3, r4, #32
    49ac:	2100      	movs	r1, #0
    49ae:	2901      	cmp	r1, #1
    49b0:	d80b      	bhi.n	49ca <z_impl_z_log_msg_static_create+0xae>
    49b2:	f101 0618 	add.w	r6, r1, #24
    49b6:	443e      	add	r6, r7
    49b8:	f816 6c18 	ldrb.w	r6, [r6, #-24]
    49bc:	f803 6b01 	strb.w	r6, [r3], #1
    49c0:	3101      	adds	r1, #1
    49c2:	e7f4      	b.n	49ae <z_impl_z_log_msg_static_create+0x92>
    49c4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    49c8:	e7db      	b.n	4982 <z_impl_z_log_msg_static_create+0x66>
    49ca:	2811      	cmp	r0, #17
    49cc:	dd22      	ble.n	4a14 <z_impl_z_log_msg_static_create+0xf8>
    49ce:	2312      	movs	r3, #18
    49d0:	b142      	cbz	r2, 49e4 <z_impl_z_log_msg_static_create+0xc8>
    49d2:	2104      	movs	r1, #4
    49d4:	7339      	strb	r1, [r7, #12]
    49d6:	2100      	movs	r1, #0
    49d8:	7379      	strb	r1, [r7, #13]
    49da:	73b9      	strb	r1, [r7, #14]
    49dc:	2101      	movs	r1, #1
    49de:	73f9      	strb	r1, [r7, #15]
    49e0:	68f8      	ldr	r0, [r7, #12]
    49e2:	6120      	str	r0, [r4, #16]
    49e4:	2100      	movs	r1, #0
    49e6:	f36f 0100 	bfc	r1, #0, #1
    49ea:	f36f 0141 	bfc	r1, #1, #1
    49ee:	f36f 0182 	bfc	r1, #2, #1
    49f2:	f36f 01c5 	bfc	r1, #3, #3
    49f6:	2002      	movs	r0, #2
    49f8:	f360 1188 	bfi	r1, r0, #6, #3
    49fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
    4a00:	f363 2153 	bfi	r1, r3, #9, #11
    4a04:	2300      	movs	r3, #0
    4a06:	f3c1 0113 	ubfx	r1, r1, #0, #20
    4a0a:	481b      	ldr	r0, [pc, #108]	; (4a78 <z_impl_z_log_msg_static_create+0x15c>)
    4a0c:	f00b fee0 	bl	107d0 <z_log_msg_static_create>
    4a10:	46ad      	mov	sp, r5
				pkg->fmt, (uint32_t)Z_LOG_MSG_MAX_PACKAGE);
			return;
    4a12:	e02d      	b.n	4a70 <z_impl_z_log_msg_static_create+0x154>
			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
    4a14:	f06f 031b 	mvn.w	r3, #27
    4a18:	e7da      	b.n	49d0 <z_impl_z_log_msg_static_create+0xb4>
		}
		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    4a1a:	f360 2853 	bfi	r8, r0, #9, #11
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    4a1e:	f3c0 0a0a 	ubfx	sl, r0, #0, #11
    4a22:	eb0a 5018 	add.w	r0, sl, r8, lsr #20
    4a26:	3017      	adds	r0, #23
    4a28:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    4a2c:	0880      	lsrs	r0, r0, #2
    4a2e:	f7ff fd83 	bl	4538 <z_log_msg_alloc>
		if (msg) {
    4a32:	4683      	mov	fp, r0
    4a34:	b1b0      	cbz	r0, 4a64 <z_impl_z_log_msg_static_create+0x148>
			len = cbprintf_package_copy(package, inlen,
    4a36:	2304      	movs	r3, #4
    4a38:	9302      	str	r3, [sp, #8]
    4a3a:	18fb      	adds	r3, r7, r3
    4a3c:	9301      	str	r3, [sp, #4]
    4a3e:	230a      	movs	r3, #10
    4a40:	9300      	str	r3, [sp, #0]
    4a42:	4653      	mov	r3, sl
    4a44:	f100 0210 	add.w	r2, r0, #16
    4a48:	4621      	mov	r1, r4
    4a4a:	4648      	mov	r0, r9
    4a4c:	f7ff ff4e 	bl	48ec <cbprintf_package_copy>
						    msg->data, out_desc.package_len,
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
    4a50:	e008      	b.n	4a64 <z_impl_z_log_msg_static_create+0x148>
    4a52:	eb04 5411 	add.w	r4, r4, r1, lsr #20
    4a56:	3417      	adds	r4, #23
    4a58:	f024 0407 	bic.w	r4, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    4a5c:	08a0      	lsrs	r0, r4, #2
    4a5e:	f7ff fd6b 	bl	4538 <z_log_msg_alloc>
    4a62:	4683      	mov	fp, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
    4a64:	4633      	mov	r3, r6
    4a66:	4642      	mov	r2, r8
    4a68:	4629      	mov	r1, r5
    4a6a:	4658      	mov	r0, fp
    4a6c:	f00b fe99 	bl	107a2 <z_log_msg_finalize>
}
    4a70:	371c      	adds	r7, #28
    4a72:	46bd      	mov	sp, r7
    4a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4a78:	200002e8 	.word	0x200002e8
    4a7c:	00015d18 	.word	0x00015d18

00004a80 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    4a80:	b40e      	push	{r1, r2, r3}
    4a82:	b500      	push	{lr}
    4a84:	b084      	sub	sp, #16
    4a86:	4601      	mov	r1, r0
    4a88:	ab05      	add	r3, sp, #20
    4a8a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    4a8e:	9303      	str	r3, [sp, #12]
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    4a90:	2000      	movs	r0, #0
    4a92:	9000      	str	r0, [sp, #0]
    4a94:	4803      	ldr	r0, [pc, #12]	; (4aa4 <print_formatted+0x24>)
    4a96:	f7fe fafb 	bl	3090 <z_cbvprintf_impl>
	length = cbvprintf(out_func, (void *)output, fmt, args);
	va_end(args);

	return length;
}
    4a9a:	b004      	add	sp, #16
    4a9c:	f85d eb04 	ldr.w	lr, [sp], #4
    4aa0:	b003      	add	sp, #12
    4aa2:	4770      	bx	lr
    4aa4:	00010907 	.word	0x00010907

00004aa8 <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
    4aa8:	b530      	push	{r4, r5, lr}
    4aaa:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_CUSTOM_TIMESTAMP);


	if (!format) {
    4aac:	f011 0f44 	tst.w	r1, #68	; 0x44
    4ab0:	d005      	beq.n	4abe <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
    4ab2:	4b1a      	ldr	r3, [pc, #104]	; (4b1c <timestamp_print+0x74>)
    4ab4:	681c      	ldr	r4, [r3, #0]
    4ab6:	b934      	cbnz	r4, 4ac6 <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
    4ab8:	2000      	movs	r0, #0
	}

	return length;
}
    4aba:	b005      	add	sp, #20
    4abc:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    4abe:	4918      	ldr	r1, [pc, #96]	; (4b20 <timestamp_print+0x78>)
    4ac0:	f7ff ffde 	bl	4a80 <print_formatted>
    4ac4:	e7f9      	b.n	4aba <timestamp_print+0x12>
		timestamp /= timestamp_div;
    4ac6:	4b17      	ldr	r3, [pc, #92]	; (4b24 <timestamp_print+0x7c>)
    4ac8:	6819      	ldr	r1, [r3, #0]
    4aca:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    4ace:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
    4ad2:	4a15      	ldr	r2, [pc, #84]	; (4b28 <timestamp_print+0x80>)
    4ad4:	fba2 320c 	umull	r3, r2, r2, ip
    4ad8:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    4ada:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    4ade:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
    4ae2:	4b12      	ldr	r3, [pc, #72]	; (4b2c <timestamp_print+0x84>)
    4ae4:	fba3 530e 	umull	r5, r3, r3, lr
    4ae8:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    4aea:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
    4aee:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    4af2:	fb0c f101 	mul.w	r1, ip, r1
    4af6:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    4afa:	fb04 1115 	mls	r1, r4, r5, r1
    4afe:	fb0c f101 	mul.w	r1, ip, r1
    4b02:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
    4b06:	9102      	str	r1, [sp, #8]
    4b08:	9501      	str	r5, [sp, #4]
    4b0a:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    4b0e:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
    4b12:	9100      	str	r1, [sp, #0]
    4b14:	4906      	ldr	r1, [pc, #24]	; (4b30 <timestamp_print+0x88>)
    4b16:	f7ff ffb3 	bl	4a80 <print_formatted>
    4b1a:	e7ce      	b.n	4aba <timestamp_print+0x12>
    4b1c:	2000116c 	.word	0x2000116c
    4b20:	00015d58 	.word	0x00015d58
    4b24:	20001168 	.word	0x20001168
    4b28:	91a2b3c5 	.word	0x91a2b3c5
    4b2c:	88888889 	.word	0x88888889
    4b30:	00015d64 	.word	0x00015d64

00004b34 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    4b34:	b161      	cbz	r1, 4b50 <color_print+0x1c>
{
    4b36:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    4b38:	b12a      	cbz	r2, 4b46 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    4b3a:	4a06      	ldr	r2, [pc, #24]	; (4b54 <color_print+0x20>)
    4b3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4b40:	b912      	cbnz	r2, 4b48 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    4b42:	4a05      	ldr	r2, [pc, #20]	; (4b58 <color_print+0x24>)
    4b44:	e000      	b.n	4b48 <color_print+0x14>
    4b46:	4a04      	ldr	r2, [pc, #16]	; (4b58 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    4b48:	4904      	ldr	r1, [pc, #16]	; (4b5c <color_print+0x28>)
    4b4a:	f7ff ff99 	bl	4a80 <print_formatted>
	}
}
    4b4e:	bd08      	pop	{r3, pc}
    4b50:	4770      	bx	lr
    4b52:	bf00      	nop
    4b54:	00015e00 	.word	0x00015e00
    4b58:	00015d80 	.word	0x00015d80
    4b5c:	00015864 	.word	0x00015864

00004b60 <ids_print>:
		     bool level_on,
		     bool func_on,
		     const char *domain,
		     const char *source,
		     uint32_t level)
{
    4b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b64:	4605      	mov	r5, r0
    4b66:	4690      	mov	r8, r2
    4b68:	461e      	mov	r6, r3
    4b6a:	9f06      	ldr	r7, [sp, #24]
	int total = 0;

	if (level_on) {
    4b6c:	b981      	cbnz	r1, 4b90 <ids_print+0x30>
	int total = 0;
    4b6e:	2400      	movs	r4, #0
		total += print_formatted(output, "<%s> ", severity[level]);
	}

	if (domain) {
    4b70:	b12e      	cbz	r6, 4b7e <ids_print+0x1e>
		total += print_formatted(output, "%s/", domain);
    4b72:	4632      	mov	r2, r6
    4b74:	4910      	ldr	r1, [pc, #64]	; (4bb8 <ids_print+0x58>)
    4b76:	4628      	mov	r0, r5
    4b78:	f7ff ff82 	bl	4a80 <print_formatted>
    4b7c:	4404      	add	r4, r0
	}

	if (source) {
    4b7e:	b1b7      	cbz	r7, 4bae <ids_print+0x4e>
		total += print_formatted(output,
    4b80:	f1b8 0f00 	cmp.w	r8, #0
    4b84:	d00d      	beq.n	4ba2 <ids_print+0x42>
				(func_on &&
    4b86:	9b07      	ldr	r3, [sp, #28]
    4b88:	2b04      	cmp	r3, #4
    4b8a:	d013      	beq.n	4bb4 <ids_print+0x54>
		total += print_formatted(output,
    4b8c:	490b      	ldr	r1, [pc, #44]	; (4bbc <ids_print+0x5c>)
    4b8e:	e009      	b.n	4ba4 <ids_print+0x44>
		total += print_formatted(output, "<%s> ", severity[level]);
    4b90:	4b0b      	ldr	r3, [pc, #44]	; (4bc0 <ids_print+0x60>)
    4b92:	9a07      	ldr	r2, [sp, #28]
    4b94:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4b98:	490a      	ldr	r1, [pc, #40]	; (4bc4 <ids_print+0x64>)
    4b9a:	f7ff ff71 	bl	4a80 <print_formatted>
    4b9e:	4604      	mov	r4, r0
    4ba0:	e7e6      	b.n	4b70 <ids_print+0x10>
		total += print_formatted(output,
    4ba2:	4906      	ldr	r1, [pc, #24]	; (4bbc <ids_print+0x5c>)
    4ba4:	463a      	mov	r2, r7
    4ba6:	4628      	mov	r0, r5
    4ba8:	f7ff ff6a 	bl	4a80 <print_formatted>
    4bac:	4404      	add	r4, r0
				"%s." : "%s: ",
				source);
	}

	return total;
}
    4bae:	4620      	mov	r0, r4
    4bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    4bb4:	4904      	ldr	r1, [pc, #16]	; (4bc8 <ids_print+0x68>)
    4bb6:	e7f5      	b.n	4ba4 <ids_print+0x44>
    4bb8:	00015d9c 	.word	0x00015d9c
    4bbc:	00015d8c 	.word	0x00015d8c
    4bc0:	00015e14 	.word	0x00015e14
    4bc4:	00015d94 	.word	0x00015d94
    4bc8:	00015d88 	.word	0x00015d88

00004bcc <prefix_print>:
			     bool func_on,
			     log_timestamp_t timestamp,
			     const char *domain,
			     const char *source,
			     uint8_t level)
{
    4bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4bd0:	b085      	sub	sp, #20
    4bd2:	4605      	mov	r5, r0
    4bd4:	460c      	mov	r4, r1
    4bd6:	4616      	mov	r6, r2
    4bd8:	9303      	str	r3, [sp, #12]
    4bda:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    4bde:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    4be2:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    4be6:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    4bea:	f00b fd39 	bl	10660 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    4bee:	b1d8      	cbz	r0, 4c28 <prefix_print+0x5c>
    4bf0:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    4bf2:	4912      	ldr	r1, [pc, #72]	; (4c3c <prefix_print+0x70>)
    4bf4:	4628      	mov	r0, r5
    4bf6:	f7ff ff43 	bl	4a80 <print_formatted>
    4bfa:	4607      	mov	r7, r0
	}

	if (stamp) {
    4bfc:	f1bb 0f00 	cmp.w	fp, #0
    4c00:	d114      	bne.n	4c2c <prefix_print+0x60>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    4c02:	4642      	mov	r2, r8
    4c04:	4651      	mov	r1, sl
    4c06:	4628      	mov	r0, r5
    4c08:	f00b fe3d 	bl	10886 <color_prefix>
	}

	length += ids_print(output, level_on, func_on, domain, source, level);
    4c0c:	f8cd 8004 	str.w	r8, [sp, #4]
    4c10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4c12:	9300      	str	r3, [sp, #0]
    4c14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4c16:	4632      	mov	r2, r6
    4c18:	4649      	mov	r1, r9
    4c1a:	4628      	mov	r0, r5
    4c1c:	f7ff ffa0 	bl	4b60 <ids_print>

	return length;
}
    4c20:	4438      	add	r0, r7
    4c22:	b005      	add	sp, #20
    4c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    4c28:	2700      	movs	r7, #0
    4c2a:	e7e7      	b.n	4bfc <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    4c2c:	9a03      	ldr	r2, [sp, #12]
    4c2e:	4621      	mov	r1, r4
    4c30:	4628      	mov	r0, r5
    4c32:	f7ff ff39 	bl	4aa8 <timestamp_print>
    4c36:	4407      	add	r7, r0
    4c38:	e7e3      	b.n	4c02 <prefix_print+0x36>
    4c3a:	bf00      	nop
    4c3c:	00015da0 	.word	0x00015da0

00004c40 <newline_print>:
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    4c40:	f011 0f10 	tst.w	r1, #16
    4c44:	d10b      	bne.n	4c5e <newline_print+0x1e>
{
    4c46:	b508      	push	{r3, lr}
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    4c48:	f011 0f20 	tst.w	r1, #32
    4c4c:	d003      	beq.n	4c56 <newline_print+0x16>
		print_formatted(ctx, "\n");
    4c4e:	4904      	ldr	r1, [pc, #16]	; (4c60 <newline_print+0x20>)
    4c50:	f7ff ff16 	bl	4a80 <print_formatted>
}
    4c54:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    4c56:	4903      	ldr	r1, [pc, #12]	; (4c64 <newline_print+0x24>)
    4c58:	f7ff ff12 	bl	4a80 <print_formatted>
    4c5c:	e7fa      	b.n	4c54 <newline_print+0x14>
    4c5e:	4770      	bx	lr
    4c60:	00015ec0 	.word	0x00015ec0
    4c64:	00015da4 	.word	0x00015da4

00004c68 <hexdump_line_print>:
{
    4c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c6c:	4605      	mov	r5, r0
    4c6e:	460f      	mov	r7, r1
    4c70:	4616      	mov	r6, r2
    4c72:	4698      	mov	r8, r3
	newline_print(output, flags);
    4c74:	9906      	ldr	r1, [sp, #24]
    4c76:	f7ff ffe3 	bl	4c40 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    4c7a:	2400      	movs	r4, #0
    4c7c:	4544      	cmp	r4, r8
    4c7e:	da05      	bge.n	4c8c <hexdump_line_print+0x24>
		print_formatted(output, " ");
    4c80:	4923      	ldr	r1, [pc, #140]	; (4d10 <hexdump_line_print+0xa8>)
    4c82:	4628      	mov	r0, r5
    4c84:	f7ff fefc 	bl	4a80 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    4c88:	3401      	adds	r4, #1
    4c8a:	e7f7      	b.n	4c7c <hexdump_line_print+0x14>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4c8c:	2400      	movs	r4, #0
    4c8e:	e009      	b.n	4ca4 <hexdump_line_print+0x3c>
			print_formatted(output, " ");
    4c90:	491f      	ldr	r1, [pc, #124]	; (4d10 <hexdump_line_print+0xa8>)
    4c92:	4628      	mov	r0, r5
    4c94:	f7ff fef4 	bl	4a80 <print_formatted>
    4c98:	e00b      	b.n	4cb2 <hexdump_line_print+0x4a>
			print_formatted(output, "   ");
    4c9a:	491e      	ldr	r1, [pc, #120]	; (4d14 <hexdump_line_print+0xac>)
    4c9c:	4628      	mov	r0, r5
    4c9e:	f7ff feef 	bl	4a80 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4ca2:	3401      	adds	r4, #1
    4ca4:	2c0f      	cmp	r4, #15
    4ca6:	dc0c      	bgt.n	4cc2 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    4ca8:	2c00      	cmp	r4, #0
    4caa:	dd02      	ble.n	4cb2 <hexdump_line_print+0x4a>
    4cac:	f014 0f07 	tst.w	r4, #7
    4cb0:	d0ee      	beq.n	4c90 <hexdump_line_print+0x28>
		if (i < length) {
    4cb2:	42b4      	cmp	r4, r6
    4cb4:	d2f1      	bcs.n	4c9a <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    4cb6:	5d3a      	ldrb	r2, [r7, r4]
    4cb8:	4917      	ldr	r1, [pc, #92]	; (4d18 <hexdump_line_print+0xb0>)
    4cba:	4628      	mov	r0, r5
    4cbc:	f7ff fee0 	bl	4a80 <print_formatted>
    4cc0:	e7ef      	b.n	4ca2 <hexdump_line_print+0x3a>
	print_formatted(output, "|");
    4cc2:	4916      	ldr	r1, [pc, #88]	; (4d1c <hexdump_line_print+0xb4>)
    4cc4:	4628      	mov	r0, r5
    4cc6:	f7ff fedb 	bl	4a80 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4cca:	2400      	movs	r4, #0
    4ccc:	e009      	b.n	4ce2 <hexdump_line_print+0x7a>
			print_formatted(output, " ");
    4cce:	4910      	ldr	r1, [pc, #64]	; (4d10 <hexdump_line_print+0xa8>)
    4cd0:	4628      	mov	r0, r5
    4cd2:	f7ff fed5 	bl	4a80 <print_formatted>
    4cd6:	e00b      	b.n	4cf0 <hexdump_line_print+0x88>
			print_formatted(output, "%c",
    4cd8:	4911      	ldr	r1, [pc, #68]	; (4d20 <hexdump_line_print+0xb8>)
    4cda:	4628      	mov	r0, r5
    4cdc:	f7ff fed0 	bl	4a80 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4ce0:	3401      	adds	r4, #1
    4ce2:	2c0f      	cmp	r4, #15
    4ce4:	dc12      	bgt.n	4d0c <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    4ce6:	2c00      	cmp	r4, #0
    4ce8:	dd02      	ble.n	4cf0 <hexdump_line_print+0x88>
    4cea:	f014 0f07 	tst.w	r4, #7
    4cee:	d0ee      	beq.n	4cce <hexdump_line_print+0x66>
		if (i < length) {
    4cf0:	42b4      	cmp	r4, r6
    4cf2:	d206      	bcs.n	4d02 <hexdump_line_print+0x9a>
			unsigned char c = (unsigned char)data[i];
    4cf4:	5d3a      	ldrb	r2, [r7, r4]
	return (int)((((unsigned)c) >= ' ') &&
    4cf6:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    4cfa:	2b5e      	cmp	r3, #94	; 0x5e
    4cfc:	d9ec      	bls.n	4cd8 <hexdump_line_print+0x70>
    4cfe:	222e      	movs	r2, #46	; 0x2e
    4d00:	e7ea      	b.n	4cd8 <hexdump_line_print+0x70>
			print_formatted(output, " ");
    4d02:	4903      	ldr	r1, [pc, #12]	; (4d10 <hexdump_line_print+0xa8>)
    4d04:	4628      	mov	r0, r5
    4d06:	f7ff febb 	bl	4a80 <print_formatted>
    4d0a:	e7e9      	b.n	4ce0 <hexdump_line_print+0x78>
}
    4d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d10:	00015d98 	.word	0x00015d98
    4d14:	00015db0 	.word	0x00015db0
    4d18:	00015da8 	.word	0x00015da8
    4d1c:	00015db4 	.word	0x00015db4
    4d20:	00017154 	.word	0x00017154

00004d24 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    4d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d28:	b084      	sub	sp, #16
    4d2a:	4604      	mov	r4, r0
    4d2c:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
    4d30:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    4d32:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    4d34:	b995      	cbnz	r5, 4d5c <log_output_process+0x38>
		prefix_offset = 0;
		/* source set to 1 indicates raw string and contrary to printk
		 * case it should not append anything to the output (printk is
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    4d36:	2b01      	cmp	r3, #1
    4d38:	d01b      	beq.n	4d72 <log_output_process+0x4e>
    4d3a:	4817      	ldr	r0, [pc, #92]	; (4d98 <log_output_process+0x74>)
		prefix_offset = 0;
    4d3c:	f04f 0800 	mov.w	r8, #0
	}

	if (package) {
    4d40:	b127      	cbz	r7, 4d4c <log_output_process+0x28>
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    4d42:	463b      	mov	r3, r7
    4d44:	4622      	mov	r2, r4
    4d46:	4915      	ldr	r1, [pc, #84]	; (4d9c <log_output_process+0x78>)
    4d48:	f00a f866 	bl	ee18 <cbpprintf_external>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    4d4c:	b9ae      	cbnz	r6, 4d7a <log_output_process+0x56>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    4d4e:	b9ed      	cbnz	r5, 4d8c <log_output_process+0x68>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    4d50:	4620      	mov	r0, r4
    4d52:	f00b fdcb 	bl	108ec <log_output_flush>
}
    4d56:	b004      	add	sp, #16
    4d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
    4d5c:	9502      	str	r5, [sp, #8]
    4d5e:	9301      	str	r3, [sp, #4]
    4d60:	9200      	str	r2, [sp, #0]
    4d62:	460b      	mov	r3, r1
    4d64:	2200      	movs	r2, #0
    4d66:	990e      	ldr	r1, [sp, #56]	; 0x38
    4d68:	f7ff ff30 	bl	4bcc <prefix_print>
    4d6c:	4680      	mov	r8, r0
		cb = out_func;
    4d6e:	480c      	ldr	r0, [pc, #48]	; (4da0 <log_output_process+0x7c>)
    4d70:	e7e6      	b.n	4d40 <log_output_process+0x1c>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    4d72:	480b      	ldr	r0, [pc, #44]	; (4da0 <log_output_process+0x7c>)
		prefix_offset = 0;
    4d74:	f04f 0800 	mov.w	r8, #0
    4d78:	e7e2      	b.n	4d40 <log_output_process+0x1c>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
    4d7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4d7c:	9300      	str	r3, [sp, #0]
    4d7e:	4643      	mov	r3, r8
    4d80:	4632      	mov	r2, r6
    4d82:	990c      	ldr	r1, [sp, #48]	; 0x30
    4d84:	4620      	mov	r0, r4
    4d86:	f00b fd96 	bl	108b6 <log_msg_hexdump>
    4d8a:	e7e0      	b.n	4d4e <log_output_process+0x2a>
		postfix_print(output, flags, level);
    4d8c:	462a      	mov	r2, r5
    4d8e:	990e      	ldr	r1, [sp, #56]	; 0x38
    4d90:	4620      	mov	r0, r4
    4d92:	f00b fd84 	bl	1089e <postfix_print>
    4d96:	e7db      	b.n	4d50 <log_output_process+0x2c>
    4d98:	0001093f 	.word	0x0001093f
    4d9c:	00010877 	.word	0x00010877
    4da0:	00010907 	.word	0x00010907

00004da4 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    4da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4da8:	b086      	sub	sp, #24
    4daa:	4605      	mov	r5, r0
    4dac:	460c      	mov	r4, r1
    4dae:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    4db0:	f8d1 8008 	ldr.w	r8, [r1, #8]
	return msg->hdr.desc.level;
    4db4:	880e      	ldrh	r6, [r1, #0]
    4db6:	f3c6 1682 	ubfx	r6, r6, #6, #3
	return msg->hdr.desc.domain;
    4dba:	7808      	ldrb	r0, [r1, #0]
    4dbc:	f3c0 00c2 	ubfx	r0, r0, #3, #3
	return msg->hdr.source;
    4dc0:	684b      	ldr	r3, [r1, #4]
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    4dc2:	b133      	cbz	r3, 4dd2 <log_output_msg_process+0x2e>
    4dc4:	4a11      	ldr	r2, [pc, #68]	; (4e0c <log_output_msg_process+0x68>)
    4dc6:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    4dc8:	f343 018f 	sbfx	r1, r3, #2, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    4dcc:	2900      	cmp	r1, #0
    4dce:	da18      	bge.n	4e02 <log_output_msg_process+0x5e>
    4dd0:	2300      	movs	r3, #0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    4dd2:	4622      	mov	r2, r4
    4dd4:	f852 1b10 	ldr.w	r1, [r2], #16
    4dd8:	f3c1 214a 	ubfx	r1, r1, #9, #11
	*len = msg->hdr.desc.data_len;
    4ddc:	8860      	ldrh	r0, [r4, #2]
    4dde:	f3c0 100b 	ubfx	r0, r0, #4, #12
	return msg->data + msg->hdr.desc.package_len;
    4de2:	1854      	adds	r4, r2, r1
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    4de4:	b901      	cbnz	r1, 4de8 <log_output_msg_process+0x44>
    4de6:	2200      	movs	r2, #0
    4de8:	9704      	str	r7, [sp, #16]
    4dea:	9003      	str	r0, [sp, #12]
    4dec:	9402      	str	r4, [sp, #8]
    4dee:	9201      	str	r2, [sp, #4]
    4df0:	9600      	str	r6, [sp, #0]
    4df2:	2200      	movs	r2, #0
    4df4:	4641      	mov	r1, r8
    4df6:	4628      	mov	r0, r5
    4df8:	f7ff ff94 	bl	4d24 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    4dfc:	b006      	add	sp, #24
    4dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    4e02:	f7ff fced 	bl	47e0 <log_source_name_get>
    4e06:	4603      	mov	r3, r0
    4e08:	e7e3      	b.n	4dd2 <log_output_msg_process+0x2e>
    4e0a:	bf00      	nop
    4e0c:	200002b0 	.word	0x200002b0

00004e10 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    4e10:	b570      	push	{r4, r5, r6, lr}
    4e12:	b082      	sub	sp, #8
    4e14:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
    4e16:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    4e18:	f242 730f 	movw	r3, #9999	; 0x270f
    4e1c:	428b      	cmp	r3, r1
    4e1e:	bf28      	it	cs
    4e20:	460b      	movcs	r3, r1
    4e22:	4a0e      	ldr	r2, [pc, #56]	; (4e5c <log_output_dropped_process+0x4c>)
    4e24:	2105      	movs	r1, #5
    4e26:	4668      	mov	r0, sp
    4e28:	f00a f879 	bl	ef1e <snprintk>
    4e2c:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
    4e2e:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    4e30:	685b      	ldr	r3, [r3, #4]
    4e32:	220b      	movs	r2, #11
    4e34:	490a      	ldr	r1, [pc, #40]	; (4e60 <log_output_dropped_process+0x50>)
    4e36:	4628      	mov	r0, r5
    4e38:	f00b fd10 	bl	1085c <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
    4e3c:	6863      	ldr	r3, [r4, #4]
    4e3e:	685b      	ldr	r3, [r3, #4]
    4e40:	4632      	mov	r2, r6
    4e42:	4669      	mov	r1, sp
    4e44:	4628      	mov	r0, r5
    4e46:	f00b fd09 	bl	1085c <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
    4e4a:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    4e4c:	685b      	ldr	r3, [r3, #4]
    4e4e:	221b      	movs	r2, #27
    4e50:	4904      	ldr	r1, [pc, #16]	; (4e64 <log_output_dropped_process+0x54>)
    4e52:	4628      	mov	r0, r5
    4e54:	f00b fd02 	bl	1085c <buffer_write>
}
    4e58:	b002      	add	sp, #8
    4e5a:	bd70      	pop	{r4, r5, r6, pc}
    4e5c:	000157b0 	.word	0x000157b0
    4e60:	00015dd4 	.word	0x00015dd4
    4e64:	00015db8 	.word	0x00015db8

00004e68 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    4e68:	4b07      	ldr	r3, [pc, #28]	; (4e88 <log_output_timestamp_freq_set+0x20>)
    4e6a:	2201      	movs	r2, #1
    4e6c:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    4e6e:	e004      	b.n	4e7a <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
    4e70:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    4e72:	4a05      	ldr	r2, [pc, #20]	; (4e88 <log_output_timestamp_freq_set+0x20>)
    4e74:	6813      	ldr	r3, [r2, #0]
    4e76:	005b      	lsls	r3, r3, #1
    4e78:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    4e7a:	4b04      	ldr	r3, [pc, #16]	; (4e8c <log_output_timestamp_freq_set+0x24>)
    4e7c:	4298      	cmp	r0, r3
    4e7e:	d8f7      	bhi.n	4e70 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
    4e80:	4b03      	ldr	r3, [pc, #12]	; (4e90 <log_output_timestamp_freq_set+0x28>)
    4e82:	6018      	str	r0, [r3, #0]
}
    4e84:	4770      	bx	lr
    4e86:	bf00      	nop
    4e88:	20001168 	.word	0x20001168
    4e8c:	000f4240 	.word	0x000f4240
    4e90:	2000116c 	.word	0x2000116c

00004e94 <severity_lvl_get>:
}


static void severity_lvl_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
    4e94:	2300      	movs	r3, #0
    4e96:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
    4e98:	604b      	str	r3, [r1, #4]
	entry->subcmd = &dsub_module_name;
    4e9a:	4b05      	ldr	r3, [pc, #20]	; (4eb0 <severity_lvl_get+0x1c>)
    4e9c:	608b      	str	r3, [r1, #8]
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
					severity_lvls_sorted[idx] : NULL;
    4e9e:	2804      	cmp	r0, #4
    4ea0:	d804      	bhi.n	4eac <severity_lvl_get+0x18>
    4ea2:	4b04      	ldr	r3, [pc, #16]	; (4eb4 <severity_lvl_get+0x20>)
    4ea4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
    4ea8:	600b      	str	r3, [r1, #0]
}
    4eaa:	4770      	bx	lr
					severity_lvls_sorted[idx] : NULL;
    4eac:	2300      	movs	r3, #0
    4eae:	e7fb      	b.n	4ea8 <severity_lvl_get+0x14>
    4eb0:	000154ac 	.word	0x000154ac
    4eb4:	00016394 	.word	0x00016394

00004eb8 <backend_name_get>:

static void backend_name_get(size_t idx, struct shell_static_entry *entry)
{
	uint32_t section_count = 0;

	entry->handler = NULL;
    4eb8:	2300      	movs	r3, #0
    4eba:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
    4ebc:	604b      	str	r3, [r1, #4]
	entry->subcmd = &sub_log_backend;
    4ebe:	4a07      	ldr	r2, [pc, #28]	; (4edc <backend_name_get+0x24>)
    4ec0:	608a      	str	r2, [r1, #8]
	entry->syntax  = NULL;
    4ec2:	600b      	str	r3, [r1, #0]

	STRUCT_SECTION_COUNT(log_backend, &section_count);
    4ec4:	4b06      	ldr	r3, [pc, #24]	; (4ee0 <backend_name_get+0x28>)
    4ec6:	4a07      	ldr	r2, [pc, #28]	; (4ee4 <backend_name_get+0x2c>)

	if (idx < section_count) {
    4ec8:	1a9b      	subs	r3, r3, r2
    4eca:	ebb0 1f13 	cmp.w	r0, r3, lsr #4
    4ece:	d203      	bcs.n	4ed8 <backend_name_get+0x20>
		struct log_backend *backend = NULL;

		STRUCT_SECTION_GET(log_backend, idx, &backend);
		__ASSERT_NO_MSG(backend != NULL);
		entry->syntax = backend->name;
    4ed0:	eb02 1300 	add.w	r3, r2, r0, lsl #4
    4ed4:	689b      	ldr	r3, [r3, #8]
    4ed6:	600b      	str	r3, [r1, #0]
	}
}
    4ed8:	4770      	bx	lr
    4eda:	bf00      	nop
    4edc:	00016318 	.word	0x00016318
    4ee0:	000153ec 	.word	0x000153ec
    4ee4:	000153cc 	.word	0x000153cc

00004ee8 <module_name_get>:
{
    4ee8:	b510      	push	{r4, lr}
    4eea:	460c      	mov	r4, r1
	entry->handler = NULL;
    4eec:	2300      	movs	r3, #0
    4eee:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
    4ef0:	604b      	str	r3, [r1, #4]
	entry->subcmd = &dsub_module_name;
    4ef2:	4a04      	ldr	r2, [pc, #16]	; (4f04 <module_name_get+0x1c>)
    4ef4:	608a      	str	r2, [r1, #8]
	entry->syntax = log_source_name_get(Z_LOG_LOCAL_DOMAIN_ID, idx);
    4ef6:	4601      	mov	r1, r0
    4ef8:	4618      	mov	r0, r3
    4efa:	f7ff fc71 	bl	47e0 <log_source_name_get>
    4efe:	6020      	str	r0, [r4, #0]
}
    4f00:	bd10      	pop	{r4, pc}
    4f02:	bf00      	nop
    4f04:	000154ac 	.word	0x000154ac

00004f08 <shell_state_precheck>:
{
    4f08:	b508      	push	{r3, lr}
	if (sh->log_backend->control_block->state
    4f0a:	69c3      	ldr	r3, [r0, #28]
    4f0c:	689b      	ldr	r3, [r3, #8]
    4f0e:	791b      	ldrb	r3, [r3, #4]
    4f10:	b10b      	cbz	r3, 4f16 <shell_state_precheck+0xe>
	return true;
    4f12:	2001      	movs	r0, #1
}
    4f14:	bd08      	pop	{r3, pc}
		shell_error(sh, "Shell log backend not initialized.");
    4f16:	4a03      	ldr	r2, [pc, #12]	; (4f24 <shell_state_precheck+0x1c>)
    4f18:	2101      	movs	r1, #1
    4f1a:	f00c fb87 	bl	1162c <shell_fprintf>
		return false;
    4f1e:	2000      	movs	r0, #0
    4f20:	e7f8      	b.n	4f14 <shell_state_precheck+0xc>
    4f22:	bf00      	nop
    4f24:	00015e28 	.word	0x00015e28

00004f28 <cmd_log_backends_list>:
{
    4f28:	b530      	push	{r4, r5, lr}
    4f2a:	b083      	sub	sp, #12
    4f2c:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    4f2e:	4c0c      	ldr	r4, [pc, #48]	; (4f60 <cmd_log_backends_list+0x38>)
    4f30:	e009      	b.n	4f46 <cmd_log_backends_list+0x1e>
		shell_fprintf(sh, SHELL_NORMAL,
    4f32:	490c      	ldr	r1, [pc, #48]	; (4f64 <cmd_log_backends_list+0x3c>)
			      backend->cb->id);
    4f34:	7912      	ldrb	r2, [r2, #4]
		shell_fprintf(sh, SHELL_NORMAL,
    4f36:	9201      	str	r2, [sp, #4]
    4f38:	9100      	str	r1, [sp, #0]
    4f3a:	4a0b      	ldr	r2, [pc, #44]	; (4f68 <cmd_log_backends_list+0x40>)
    4f3c:	2108      	movs	r1, #8
    4f3e:	4628      	mov	r0, r5
    4f40:	f00c fb74 	bl	1162c <shell_fprintf>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    4f44:	3410      	adds	r4, #16
    4f46:	4b09      	ldr	r3, [pc, #36]	; (4f6c <cmd_log_backends_list+0x44>)
    4f48:	429c      	cmp	r4, r3
    4f4a:	d206      	bcs.n	4f5a <cmd_log_backends_list+0x32>
		shell_fprintf(sh, SHELL_NORMAL,
    4f4c:	68a3      	ldr	r3, [r4, #8]
			      backend->cb->active ? "enabled" : "disabled",
    4f4e:	6862      	ldr	r2, [r4, #4]
    4f50:	7951      	ldrb	r1, [r2, #5]
		shell_fprintf(sh, SHELL_NORMAL,
    4f52:	2900      	cmp	r1, #0
    4f54:	d0ed      	beq.n	4f32 <cmd_log_backends_list+0xa>
    4f56:	4906      	ldr	r1, [pc, #24]	; (4f70 <cmd_log_backends_list+0x48>)
    4f58:	e7ec      	b.n	4f34 <cmd_log_backends_list+0xc>
}
    4f5a:	2000      	movs	r0, #0
    4f5c:	b003      	add	sp, #12
    4f5e:	bd30      	pop	{r4, r5, pc}
    4f60:	000153cc 	.word	0x000153cc
    4f64:	00015e54 	.word	0x00015e54
    4f68:	00015e60 	.word	0x00015e60
    4f6c:	000153ec 	.word	0x000153ec
    4f70:	00015e4c 	.word	0x00015e4c

00004f74 <log_status>:
{
    4f74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4f78:	b083      	sub	sp, #12
    4f7a:	4680      	mov	r8, r0
    4f7c:	460f      	mov	r7, r1
	uint32_t modules_cnt = log_src_cnt_get(Z_LOG_LOCAL_DOMAIN_ID);
    4f7e:	2000      	movs	r0, #0
    4f80:	f7ff fc24 	bl	47cc <log_src_cnt_get>
    4f84:	4681      	mov	r9, r0
	return backend->cb->active;
    4f86:	687b      	ldr	r3, [r7, #4]
    4f88:	795b      	ldrb	r3, [r3, #5]
	if (!log_backend_is_active(backend)) {
    4f8a:	b163      	cbz	r3, 4fa6 <log_status+0x32>
	shell_fprintf(sh, SHELL_NORMAL, "%-40s | current | built-in \r\n",
    4f8c:	4b1c      	ldr	r3, [pc, #112]	; (5000 <log_status+0x8c>)
    4f8e:	4a1d      	ldr	r2, [pc, #116]	; (5004 <log_status+0x90>)
    4f90:	2108      	movs	r1, #8
    4f92:	4640      	mov	r0, r8
    4f94:	f00c fb4a 	bl	1162c <shell_fprintf>
	shell_fprintf(sh, SHELL_NORMAL,
    4f98:	4a1b      	ldr	r2, [pc, #108]	; (5008 <log_status+0x94>)
    4f9a:	2108      	movs	r1, #8
    4f9c:	4640      	mov	r0, r8
    4f9e:	f00c fb45 	bl	1162c <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
    4fa2:	2400      	movs	r4, #0
    4fa4:	e026      	b.n	4ff4 <log_status+0x80>
		shell_warn(sh, "Logs are halted!");
    4fa6:	4a19      	ldr	r2, [pc, #100]	; (500c <log_status+0x98>)
    4fa8:	2103      	movs	r1, #3
    4faa:	4640      	mov	r0, r8
    4fac:	f00c fb3e 	bl	1162c <shell_fprintf>
    4fb0:	e7ec      	b.n	4f8c <log_status+0x18>
		dynamic_lvl = log_filter_get(backend, Z_LOG_LOCAL_DOMAIN_ID,
    4fb2:	2301      	movs	r3, #1
    4fb4:	4622      	mov	r2, r4
    4fb6:	2100      	movs	r1, #0
    4fb8:	4638      	mov	r0, r7
    4fba:	f00b fb9f 	bl	106fc <log_filter_get>
    4fbe:	4605      	mov	r5, r0
		compiled_lvl = log_filter_get(backend, Z_LOG_LOCAL_DOMAIN_ID,
    4fc0:	2300      	movs	r3, #0
    4fc2:	4622      	mov	r2, r4
    4fc4:	4619      	mov	r1, r3
    4fc6:	4638      	mov	r0, r7
    4fc8:	f00b fb98 	bl	106fc <log_filter_get>
    4fcc:	4606      	mov	r6, r0
		shell_fprintf(sh, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    4fce:	4621      	mov	r1, r4
    4fd0:	2000      	movs	r0, #0
    4fd2:	f7ff fc05 	bl	47e0 <log_source_name_get>
    4fd6:	4603      	mov	r3, r0
			      severity_lvls[dynamic_lvl],
    4fd8:	4a0d      	ldr	r2, [pc, #52]	; (5010 <log_status+0x9c>)
    4fda:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
			      severity_lvls[compiled_lvl]);
    4fde:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
		shell_fprintf(sh, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    4fe2:	9201      	str	r2, [sp, #4]
    4fe4:	9100      	str	r1, [sp, #0]
    4fe6:	4a0b      	ldr	r2, [pc, #44]	; (5014 <log_status+0xa0>)
    4fe8:	2108      	movs	r1, #8
    4fea:	4640      	mov	r0, r8
    4fec:	f00c fb1e 	bl	1162c <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
    4ff0:	3401      	adds	r4, #1
    4ff2:	b224      	sxth	r4, r4
    4ff4:	454c      	cmp	r4, r9
    4ff6:	d3dc      	bcc.n	4fb2 <log_status+0x3e>
}
    4ff8:	2000      	movs	r0, #0
    4ffa:	b003      	add	sp, #12
    4ffc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5000:	00015e98 	.word	0x00015e98
    5004:	00015ea4 	.word	0x00015ea4
    5008:	00015ec4 	.word	0x00015ec4
    500c:	00015e84 	.word	0x00015e84
    5010:	000163a8 	.word	0x000163a8
    5014:	00015f04 	.word	0x00015f04

00005018 <backend_find>:
{
    5018:	b570      	push	{r4, r5, r6, lr}
    501a:	4606      	mov	r6, r0
	size_t slen = strlen(name);
    501c:	f00d fe5f 	bl	12cde <strlen>
    5020:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    5022:	4c08      	ldr	r4, [pc, #32]	; (5044 <backend_find+0x2c>)
    5024:	e000      	b.n	5028 <backend_find+0x10>
    5026:	3410      	adds	r4, #16
    5028:	4b07      	ldr	r3, [pc, #28]	; (5048 <backend_find+0x30>)
    502a:	429c      	cmp	r4, r3
    502c:	d207      	bcs.n	503e <backend_find+0x26>
		if (strncmp(name, backend->name, slen) == 0) {
    502e:	462a      	mov	r2, r5
    5030:	68a1      	ldr	r1, [r4, #8]
    5032:	4630      	mov	r0, r6
    5034:	f00d fe71 	bl	12d1a <strncmp>
    5038:	2800      	cmp	r0, #0
    503a:	d1f4      	bne.n	5026 <backend_find+0xe>
    503c:	e000      	b.n	5040 <backend_find+0x28>
	return NULL;
    503e:	2400      	movs	r4, #0
}
    5040:	4620      	mov	r0, r4
    5042:	bd70      	pop	{r4, r5, r6, pc}
    5044:	000153cc 	.word	0x000153cc
    5048:	000153ec 	.word	0x000153ec

0000504c <shell_backend_cmd_execute>:
{
    504c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5050:	4605      	mov	r5, r0
    5052:	4688      	mov	r8, r1
    5054:	4614      	mov	r4, r2
    5056:	461e      	mov	r6, r3
	char const *name = argv[-1];
    5058:	f852 7c04 	ldr.w	r7, [r2, #-4]
	const struct log_backend *backend = backend_find(name);
    505c:	4638      	mov	r0, r7
    505e:	f7ff ffdb 	bl	5018 <backend_find>
	if (backend != NULL) {
    5062:	b138      	cbz	r0, 5074 <shell_backend_cmd_execute+0x28>
    5064:	4601      	mov	r1, r0
		func(sh, backend, argc, argv);
    5066:	4623      	mov	r3, r4
    5068:	4642      	mov	r2, r8
    506a:	4628      	mov	r0, r5
    506c:	47b0      	blx	r6
	return 0;
    506e:	2000      	movs	r0, #0
}
    5070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		shell_error(sh, "Invalid backend: %s", name);
    5074:	463b      	mov	r3, r7
    5076:	4a04      	ldr	r2, [pc, #16]	; (5088 <shell_backend_cmd_execute+0x3c>)
    5078:	2101      	movs	r1, #1
    507a:	4628      	mov	r0, r5
    507c:	f00c fad6 	bl	1162c <shell_fprintf>
		return -ENOEXEC;
    5080:	f06f 0007 	mvn.w	r0, #7
    5084:	e7f4      	b.n	5070 <shell_backend_cmd_execute+0x24>
    5086:	bf00      	nop
    5088:	00015f18 	.word	0x00015f18

0000508c <cmd_log_backend_status>:
{
    508c:	b508      	push	{r3, lr}
	shell_backend_cmd_execute(sh, argc, argv, log_status);
    508e:	4b02      	ldr	r3, [pc, #8]	; (5098 <cmd_log_backend_status+0xc>)
    5090:	f7ff ffdc 	bl	504c <shell_backend_cmd_execute>
}
    5094:	2000      	movs	r0, #0
    5096:	bd08      	pop	{r3, pc}
    5098:	00004f75 	.word	0x00004f75

0000509c <cmd_log_backend_halt>:
{
    509c:	b508      	push	{r3, lr}
	return shell_backend_cmd_execute(sh, argc, argv, log_halt);
    509e:	4b02      	ldr	r3, [pc, #8]	; (50a8 <cmd_log_backend_halt+0xc>)
    50a0:	f7ff ffd4 	bl	504c <shell_backend_cmd_execute>
}
    50a4:	bd08      	pop	{r3, pc}
    50a6:	bf00      	nop
    50a8:	0001095d 	.word	0x0001095d

000050ac <cmd_log_backend_go>:
{
    50ac:	b508      	push	{r3, lr}
	return shell_backend_cmd_execute(sh, argc, argv, log_go);
    50ae:	4b02      	ldr	r3, [pc, #8]	; (50b8 <cmd_log_backend_go+0xc>)
    50b0:	f7ff ffcc 	bl	504c <shell_backend_cmd_execute>
}
    50b4:	bd08      	pop	{r3, pc}
    50b6:	bf00      	nop
    50b8:	00010965 	.word	0x00010965

000050bc <cmd_log_backend_enable>:
{
    50bc:	b508      	push	{r3, lr}
	return shell_backend_cmd_execute(sh, argc, argv, log_enable);
    50be:	4b02      	ldr	r3, [pc, #8]	; (50c8 <cmd_log_backend_enable+0xc>)
    50c0:	f7ff ffc4 	bl	504c <shell_backend_cmd_execute>
}
    50c4:	bd08      	pop	{r3, pc}
    50c6:	bf00      	nop
    50c8:	000051b9 	.word	0x000051b9

000050cc <cmd_log_backend_disable>:
{
    50cc:	b508      	push	{r3, lr}
	return shell_backend_cmd_execute(sh, argc, argv, log_disable);
    50ce:	4b02      	ldr	r3, [pc, #8]	; (50d8 <cmd_log_backend_disable+0xc>)
    50d0:	f7ff ffbc 	bl	504c <shell_backend_cmd_execute>
}
    50d4:	bd08      	pop	{r3, pc}
    50d6:	bf00      	nop
    50d8:	00010a2b 	.word	0x00010a2b

000050dc <severity_level_get>:
{
    50dc:	b538      	push	{r3, r4, r5, lr}
    50de:	4605      	mov	r5, r0
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
    50e0:	2400      	movs	r4, #0
    50e2:	2c04      	cmp	r4, #4
    50e4:	d809      	bhi.n	50fa <severity_level_get+0x1e>
		if (strncmp(str, severity_lvls[i], 4) == 0) {
    50e6:	2204      	movs	r2, #4
    50e8:	4b06      	ldr	r3, [pc, #24]	; (5104 <severity_level_get+0x28>)
    50ea:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
    50ee:	4628      	mov	r0, r5
    50f0:	f00d fe13 	bl	12d1a <strncmp>
    50f4:	b118      	cbz	r0, 50fe <severity_level_get+0x22>
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
    50f6:	3401      	adds	r4, #1
    50f8:	e7f3      	b.n	50e2 <severity_level_get+0x6>
	return -1;
    50fa:	f04f 34ff 	mov.w	r4, #4294967295
}
    50fe:	4620      	mov	r0, r4
    5100:	bd38      	pop	{r3, r4, r5, pc}
    5102:	bf00      	nop
    5104:	000163a8 	.word	0x000163a8

00005108 <filters_set>:
{
    5108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    510c:	b083      	sub	sp, #12
    510e:	4681      	mov	r9, r0
    5110:	468a      	mov	sl, r1
    5112:	461e      	mov	r6, r3
    5114:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	int cnt = all ? log_src_cnt_get(Z_LOG_LOCAL_DOMAIN_ID) : argc;
    5118:	4615      	mov	r5, r2
    511a:	b132      	cbz	r2, 512a <filters_set+0x22>
    511c:	4617      	mov	r7, r2
	if (!backend->cb->active) {
    511e:	f8da 3004 	ldr.w	r3, [sl, #4]
    5122:	795b      	ldrb	r3, [r3, #5]
    5124:	b133      	cbz	r3, 5134 <filters_set+0x2c>
		id = all ? i : module_id_get(argv[i]);
    5126:	2400      	movs	r4, #0
    5128:	e01d      	b.n	5166 <filters_set+0x5e>
	int cnt = all ? log_src_cnt_get(Z_LOG_LOCAL_DOMAIN_ID) : argc;
    512a:	2000      	movs	r0, #0
    512c:	f7ff fb4e 	bl	47cc <log_src_cnt_get>
    5130:	4607      	mov	r7, r0
    5132:	e7f4      	b.n	511e <filters_set+0x16>
		shell_warn(sh, "Backend not active.");
    5134:	4a1c      	ldr	r2, [pc, #112]	; (51a8 <filters_set+0xa0>)
    5136:	2103      	movs	r1, #3
    5138:	4648      	mov	r0, r9
    513a:	f00c fa77 	bl	1162c <shell_fprintf>
    513e:	e7f2      	b.n	5126 <filters_set+0x1e>
		id = all ? i : module_id_get(argv[i]);
    5140:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    5144:	f00b fc46 	bl	109d4 <module_id_get>
    5148:	e012      	b.n	5170 <filters_set+0x68>
					log_source_name_get(Z_LOG_LOCAL_DOMAIN_ID, i) :
    514a:	4621      	mov	r1, r4
    514c:	2000      	movs	r0, #0
    514e:	f7ff fb47 	bl	47e0 <log_source_name_get>
    5152:	4603      	mov	r3, r0
    5154:	e01b      	b.n	518e <filters_set+0x86>
			shell_error(sh, "%s: unknown source name.", argv[i]);
    5156:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    515a:	4a14      	ldr	r2, [pc, #80]	; (51ac <filters_set+0xa4>)
    515c:	2101      	movs	r1, #1
    515e:	4648      	mov	r0, r9
    5160:	f00c fa64 	bl	1162c <shell_fprintf>
	for (i = 0; i < cnt; i++) {
    5164:	3401      	adds	r4, #1
    5166:	42bc      	cmp	r4, r7
    5168:	da1b      	bge.n	51a2 <filters_set+0x9a>
		id = all ? i : module_id_get(argv[i]);
    516a:	2d00      	cmp	r5, #0
    516c:	d1e8      	bne.n	5140 <filters_set+0x38>
    516e:	4620      	mov	r0, r4
		if (id >= 0) {
    5170:	2800      	cmp	r0, #0
    5172:	dbf0      	blt.n	5156 <filters_set+0x4e>
			uint32_t set_lvl = log_filter_set(backend,
    5174:	b202      	sxth	r2, r0
		union { uintptr_t x; uint32_t val; } parm3 = { .val = level };
		return (uint32_t) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_LOG_FILTER_SET);
	}
#endif
	compiler_barrier();
	return z_impl_log_filter_set(backend, domain_id, source_id, level);
    5176:	4643      	mov	r3, r8
    5178:	2100      	movs	r1, #0
    517a:	4650      	mov	r0, sl
    517c:	f7ff fb70 	bl	4860 <z_impl_log_filter_set>
    5180:	4683      	mov	fp, r0
			if (set_lvl != level) {
    5182:	4580      	cmp	r8, r0
    5184:	d0ee      	beq.n	5164 <filters_set+0x5c>
					log_source_name_get(Z_LOG_LOCAL_DOMAIN_ID, i) :
    5186:	2d00      	cmp	r5, #0
    5188:	d0df      	beq.n	514a <filters_set+0x42>
    518a:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
				shell_warn(sh, "%s: level set to %s.",
    518e:	4a08      	ldr	r2, [pc, #32]	; (51b0 <filters_set+0xa8>)
    5190:	f852 202b 	ldr.w	r2, [r2, fp, lsl #2]
    5194:	9200      	str	r2, [sp, #0]
    5196:	4a07      	ldr	r2, [pc, #28]	; (51b4 <filters_set+0xac>)
    5198:	2103      	movs	r1, #3
    519a:	4648      	mov	r0, r9
    519c:	f00c fa46 	bl	1162c <shell_fprintf>
    51a0:	e7e0      	b.n	5164 <filters_set+0x5c>
}
    51a2:	b003      	add	sp, #12
    51a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    51a8:	00015f30 	.word	0x00015f30
    51ac:	00015f60 	.word	0x00015f60
    51b0:	000163a8 	.word	0x000163a8
    51b4:	00015f48 	.word	0x00015f48

000051b8 <log_enable>:
{
    51b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    51ba:	b083      	sub	sp, #12
    51bc:	4605      	mov	r5, r0
    51be:	460e      	mov	r6, r1
    51c0:	4617      	mov	r7, r2
    51c2:	461c      	mov	r4, r3
	severity_level = severity_level_get(argv[1]);
    51c4:	6858      	ldr	r0, [r3, #4]
    51c6:	f7ff ff89 	bl	50dc <severity_level_get>
	if (severity_level < 0) {
    51ca:	2800      	cmp	r0, #0
    51cc:	db0a      	blt.n	51e4 <log_enable+0x2c>
	filters_set(sh, backend, argc - 2, &argv[2], severity_level);
    51ce:	9000      	str	r0, [sp, #0]
    51d0:	f104 0308 	add.w	r3, r4, #8
    51d4:	1eba      	subs	r2, r7, #2
    51d6:	4631      	mov	r1, r6
    51d8:	4628      	mov	r0, r5
    51da:	f7ff ff95 	bl	5108 <filters_set>
	return 0;
    51de:	2000      	movs	r0, #0
}
    51e0:	b003      	add	sp, #12
    51e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		shell_error(sh, "Invalid severity: %s", argv[1]);
    51e4:	6863      	ldr	r3, [r4, #4]
    51e6:	4a04      	ldr	r2, [pc, #16]	; (51f8 <log_enable+0x40>)
    51e8:	2101      	movs	r1, #1
    51ea:	4628      	mov	r0, r5
    51ec:	f00c fa1e 	bl	1162c <shell_fprintf>
		return -ENOEXEC;
    51f0:	f06f 0007 	mvn.w	r0, #7
    51f4:	e7f4      	b.n	51e0 <log_enable+0x28>
    51f6:	bf00      	nop
    51f8:	00015f7c 	.word	0x00015f7c

000051fc <cmd_log_mem>:
{
    51fc:	b510      	push	{r4, lr}
    51fe:	b084      	sub	sp, #16
    5200:	4604      	mov	r4, r0
	err = log_mem_get_usage(&size, &used);
    5202:	a902      	add	r1, sp, #8
    5204:	a803      	add	r0, sp, #12
    5206:	f7ff fac9 	bl	479c <log_mem_get_usage>
	if (err < 0) {
    520a:	2800      	cmp	r0, #0
    520c:	db1e      	blt.n	524c <cmd_log_mem+0x50>
	shell_print(sh, "Log message buffer utilization report:");
    520e:	4a17      	ldr	r2, [pc, #92]	; (526c <cmd_log_mem+0x70>)
    5210:	2108      	movs	r1, #8
    5212:	4620      	mov	r0, r4
    5214:	f00c fa0a 	bl	1162c <shell_fprintf>
	shell_print(sh, "\tCapacity: %u bytes", size);
    5218:	9b03      	ldr	r3, [sp, #12]
    521a:	4a15      	ldr	r2, [pc, #84]	; (5270 <cmd_log_mem+0x74>)
    521c:	2108      	movs	r1, #8
    521e:	4620      	mov	r0, r4
    5220:	f00c fa04 	bl	1162c <shell_fprintf>
	shell_print(sh, "\tCurrently in use: %u bytes", used);
    5224:	9b02      	ldr	r3, [sp, #8]
    5226:	4a13      	ldr	r2, [pc, #76]	; (5274 <cmd_log_mem+0x78>)
    5228:	2108      	movs	r1, #8
    522a:	4620      	mov	r0, r4
    522c:	f00c f9fe 	bl	1162c <shell_fprintf>
	err = log_mem_get_max_usage(&max);
    5230:	a801      	add	r0, sp, #4
    5232:	f7ff fabd 	bl	47b0 <log_mem_get_max_usage>
	if (err < 0) {
    5236:	2800      	cmp	r0, #0
    5238:	db10      	blt.n	525c <cmd_log_mem+0x60>
	shell_print(sh, "\tMaximum usage: %u bytes", max);
    523a:	9b01      	ldr	r3, [sp, #4]
    523c:	4a0e      	ldr	r2, [pc, #56]	; (5278 <cmd_log_mem+0x7c>)
    523e:	2108      	movs	r1, #8
    5240:	4620      	mov	r0, r4
    5242:	f00c f9f3 	bl	1162c <shell_fprintf>
	return 0;
    5246:	2000      	movs	r0, #0
}
    5248:	b004      	add	sp, #16
    524a:	bd10      	pop	{r4, pc}
		shell_error(sh, "Failed to get usage (mode does not support it?)");
    524c:	4a0b      	ldr	r2, [pc, #44]	; (527c <cmd_log_mem+0x80>)
    524e:	2101      	movs	r1, #1
    5250:	4620      	mov	r0, r4
    5252:	f00c f9eb 	bl	1162c <shell_fprintf>
		return -ENOEXEC;
    5256:	f06f 0007 	mvn.w	r0, #7
    525a:	e7f5      	b.n	5248 <cmd_log_mem+0x4c>
		shell_print(sh, "Enable CONFIG_LOG_MEM_UTILIZATION to get maximum usage");
    525c:	4a08      	ldr	r2, [pc, #32]	; (5280 <cmd_log_mem+0x84>)
    525e:	2108      	movs	r1, #8
    5260:	4620      	mov	r0, r4
    5262:	f00c f9e3 	bl	1162c <shell_fprintf>
		return 0;
    5266:	2000      	movs	r0, #0
    5268:	e7ee      	b.n	5248 <cmd_log_mem+0x4c>
    526a:	bf00      	nop
    526c:	00015fc8 	.word	0x00015fc8
    5270:	00015ff0 	.word	0x00015ff0
    5274:	00016008 	.word	0x00016008
    5278:	00016060 	.word	0x00016060
    527c:	00015f94 	.word	0x00015f94
    5280:	00016028 	.word	0x00016028

00005284 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    5284:	4b03      	ldr	r3, [pc, #12]	; (5294 <log_backend_rtt_init+0x10>)
    5286:	2201      	movs	r2, #1
    5288:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
    528a:	4b03      	ldr	r3, [pc, #12]	; (5298 <log_backend_rtt_init+0x14>)
    528c:	4a03      	ldr	r2, [pc, #12]	; (529c <log_backend_rtt_init+0x18>)
    528e:	601a      	str	r2, [r3, #0]
}
    5290:	4770      	bx	lr
    5292:	bf00      	nop
    5294:	20003cb2 	.word	0x20003cb2
    5298:	20001198 	.word	0x20001198
    529c:	2000119c 	.word	0x2000119c

000052a0 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    52a0:	4b01      	ldr	r3, [pc, #4]	; (52a8 <format_set+0x8>)
    52a2:	6019      	str	r1, [r3, #0]
	return 0;
}
    52a4:	2000      	movs	r0, #0
    52a6:	4770      	bx	lr
    52a8:	20001184 	.word	0x20001184

000052ac <on_failed_write>:
{
    52ac:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    52ae:	b918      	cbnz	r0, 52b8 <on_failed_write+0xc>
		host_present = false;
    52b0:	4b07      	ldr	r3, [pc, #28]	; (52d0 <on_failed_write+0x24>)
    52b2:	2200      	movs	r2, #0
    52b4:	701a      	strb	r2, [r3, #0]
}
    52b6:	bd08      	pop	{r3, pc}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    52b8:	4b06      	ldr	r3, [pc, #24]	; (52d4 <on_failed_write+0x28>)
    52ba:	781b      	ldrb	r3, [r3, #0]
	} else if (is_sync_mode()) {
    52bc:	b123      	cbz	r3, 52c8 <on_failed_write+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
    52be:	f241 3088 	movw	r0, #5000	; 0x1388
    52c2:	f00f fc88 	bl	14bd6 <z_impl_k_busy_wait>
}
    52c6:	e7f6      	b.n	52b6 <on_failed_write+0xa>
		k_msleep(CONFIG_LOG_BACKEND_RTT_RETRY_DELAY_MS);
    52c8:	2005      	movs	r0, #5
    52ca:	f00b fbca 	bl	10a62 <k_msleep>
}
    52ce:	e7f2      	b.n	52b6 <on_failed_write+0xa>
    52d0:	20003cb2 	.word	0x20003cb2
    52d4:	20003cb3 	.word	0x20003cb3

000052d8 <on_write>:
{
    52d8:	b538      	push	{r3, r4, r5, lr}
    52da:	4604      	mov	r4, r0
	host_present = true;
    52dc:	4b0a      	ldr	r3, [pc, #40]	; (5308 <on_write+0x30>)
    52de:	2201      	movs	r2, #1
    52e0:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    52e2:	4b0a      	ldr	r3, [pc, #40]	; (530c <on_write+0x34>)
    52e4:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    52e6:	b92b      	cbnz	r3, 52f4 <on_write+0x1c>
}
    52e8:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
    52ea:	1e65      	subs	r5, r4, #1
    52ec:	4620      	mov	r0, r4
    52ee:	f7ff ffdd 	bl	52ac <on_failed_write>
    52f2:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    52f4:	2000      	movs	r0, #0
    52f6:	f007 fd4f 	bl	cd98 <SEGGER_RTT_HasDataUp>
    52fa:	2800      	cmp	r0, #0
    52fc:	d0f4      	beq.n	52e8 <on_write+0x10>
    52fe:	4b02      	ldr	r3, [pc, #8]	; (5308 <on_write+0x30>)
    5300:	781b      	ldrb	r3, [r3, #0]
    5302:	2b00      	cmp	r3, #0
    5304:	d1f1      	bne.n	52ea <on_write+0x12>
    5306:	e7ef      	b.n	52e8 <on_write+0x10>
    5308:	20003cb2 	.word	0x20003cb2
    530c:	20003cb3 	.word	0x20003cb3

00005310 <data_out_block_mode>:
{
    5310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5312:	4606      	mov	r6, r0
    5314:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    5316:	2704      	movs	r7, #4
    5318:	e00d      	b.n	5336 <data_out_block_mode+0x26>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    531a:	462a      	mov	r2, r5
    531c:	4631      	mov	r1, r6
    531e:	2000      	movs	r0, #0
    5320:	f007 fca0 	bl	cc64 <SEGGER_RTT_WriteSkipNoLock>
    5324:	4604      	mov	r4, r0
    5326:	e014      	b.n	5352 <data_out_block_mode+0x42>
			on_write(retry_cnt);
    5328:	4638      	mov	r0, r7
    532a:	f7ff ffd5 	bl	52d8 <on_write>
	} while ((ret == 0) && host_present);
    532e:	b9dc      	cbnz	r4, 5368 <data_out_block_mode+0x58>
    5330:	4b11      	ldr	r3, [pc, #68]	; (5378 <data_out_block_mode+0x68>)
    5332:	781b      	ldrb	r3, [r3, #0]
    5334:	b1c3      	cbz	r3, 5368 <data_out_block_mode+0x58>
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    5336:	4b11      	ldr	r3, [pc, #68]	; (537c <data_out_block_mode+0x6c>)
    5338:	781b      	ldrb	r3, [r3, #0]
		if (!is_sync_mode()) {
    533a:	2b00      	cmp	r3, #0
    533c:	d1ed      	bne.n	531a <data_out_block_mode+0xa>
			RTT_LOCK();
    533e:	f007 fd3b 	bl	cdb8 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    5342:	462a      	mov	r2, r5
    5344:	4631      	mov	r1, r6
    5346:	2000      	movs	r0, #0
    5348:	f007 fc8c 	bl	cc64 <SEGGER_RTT_WriteSkipNoLock>
    534c:	4604      	mov	r4, r0
			RTT_UNLOCK();
    534e:	f007 fd3f 	bl	cdd0 <zephyr_rtt_mutex_unlock>
		if (ret) {
    5352:	2c00      	cmp	r4, #0
    5354:	d1e8      	bne.n	5328 <data_out_block_mode+0x18>
		} else if (host_present) {
    5356:	4b08      	ldr	r3, [pc, #32]	; (5378 <data_out_block_mode+0x68>)
    5358:	781b      	ldrb	r3, [r3, #0]
    535a:	2b00      	cmp	r3, #0
    535c:	d0e7      	beq.n	532e <data_out_block_mode+0x1e>
			retry_cnt--;
    535e:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    5360:	4638      	mov	r0, r7
    5362:	f7ff ffa3 	bl	52ac <on_failed_write>
    5366:	e7e2      	b.n	532e <data_out_block_mode+0x1e>
	return ((ret == 0) && host_present) ? 0 : length;
    5368:	b914      	cbnz	r4, 5370 <data_out_block_mode+0x60>
    536a:	4b03      	ldr	r3, [pc, #12]	; (5378 <data_out_block_mode+0x68>)
    536c:	781b      	ldrb	r3, [r3, #0]
    536e:	b903      	cbnz	r3, 5372 <data_out_block_mode+0x62>
    5370:	462c      	mov	r4, r5
}
    5372:	4620      	mov	r0, r4
    5374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5376:	bf00      	nop
    5378:	20003cb2 	.word	0x20003cb2
    537c:	20003cb3 	.word	0x20003cb3

00005380 <panic>:
{
    5380:	b508      	push	{r3, lr}
	panic_mode = true;
    5382:	4b03      	ldr	r3, [pc, #12]	; (5390 <panic+0x10>)
    5384:	2201      	movs	r2, #1
    5386:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    5388:	4802      	ldr	r0, [pc, #8]	; (5394 <panic+0x14>)
    538a:	f00b faaf 	bl	108ec <log_output_flush>
}
    538e:	bd08      	pop	{r3, pc}
    5390:	20003cb3 	.word	0x20003cb3
    5394:	000163e8 	.word	0x000163e8

00005398 <dropped>:
{
    5398:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    539a:	4802      	ldr	r0, [pc, #8]	; (53a4 <dropped+0xc>)
    539c:	f7ff fd38 	bl	4e10 <log_output_dropped_process>
}
    53a0:	bd08      	pop	{r3, pc}
    53a2:	bf00      	nop
    53a4:	000163e8 	.word	0x000163e8

000053a8 <process>:
{
    53a8:	b510      	push	{r4, lr}
    53aa:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    53ac:	4b04      	ldr	r3, [pc, #16]	; (53c0 <process+0x18>)
    53ae:	6818      	ldr	r0, [r3, #0]
    53b0:	f7ff f81a 	bl	43e8 <log_format_func_t_get>
    53b4:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    53b6:	220f      	movs	r2, #15
    53b8:	4621      	mov	r1, r4
    53ba:	4802      	ldr	r0, [pc, #8]	; (53c4 <process+0x1c>)
    53bc:	4798      	blx	r3
}
    53be:	bd10      	pop	{r4, pc}
    53c0:	20001184 	.word	0x20001184
    53c4:	000163e8 	.word	0x000163e8

000053c8 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    53c8:	b570      	push	{r4, r5, r6, lr}
    53ca:	4605      	mov	r5, r0
	__asm__ volatile(
    53cc:	f04f 0320 	mov.w	r3, #32
    53d0:	f3ef 8611 	mrs	r6, BASEPRI
    53d4:	f383 8812 	msr	BASEPRI_MAX, r3
    53d8:	f3bf 8f6f 	isb	sy
    53dc:	4b0e      	ldr	r3, [pc, #56]	; (5418 <pm_state_notify+0x50>)
    53de:	681c      	ldr	r4, [r3, #0]
    53e0:	e00d      	b.n	53fe <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
    53e2:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
    53e4:	b13a      	cbz	r2, 53f6 <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    53e6:	4b0d      	ldr	r3, [pc, #52]	; (541c <pm_state_notify+0x54>)
    53e8:	7c1b      	ldrb	r3, [r3, #16]
    53ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    53ee:	490c      	ldr	r1, [pc, #48]	; (5420 <pm_state_notify+0x58>)
    53f0:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    53f4:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    53f6:	4623      	mov	r3, r4
	return node->next;
    53f8:	6824      	ldr	r4, [r4, #0]
    53fa:	b104      	cbz	r4, 53fe <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    53fc:	b123      	cbz	r3, 5408 <pm_state_notify+0x40>
    53fe:	b12c      	cbz	r4, 540c <pm_state_notify+0x44>
		if (entering_state) {
    5400:	2d00      	cmp	r5, #0
    5402:	d0ee      	beq.n	53e2 <pm_state_notify+0x1a>
			callback = notifier->state_entry;
    5404:	6862      	ldr	r2, [r4, #4]
    5406:	e7ed      	b.n	53e4 <pm_state_notify+0x1c>
    5408:	461c      	mov	r4, r3
    540a:	e7f8      	b.n	53fe <pm_state_notify+0x36>
	__asm__ volatile(
    540c:	f386 8811 	msr	BASEPRI, r6
    5410:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    5414:	bd70      	pop	{r4, r5, r6, pc}
    5416:	bf00      	nop
    5418:	200011d0 	.word	0x200011d0
    541c:	20003c6c 	.word	0x20003c6c
    5420:	200011c4 	.word	0x200011c4

00005424 <pm_exit_pos_ops>:
{
    5424:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
    5426:	4b06      	ldr	r3, [pc, #24]	; (5440 <pm_exit_pos_ops+0x1c>)
    5428:	b123      	cbz	r3, 5434 <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
    542a:	7841      	ldrb	r1, [r0, #1]
    542c:	7800      	ldrb	r0, [r0, #0]
    542e:	f00d fee9 	bl	13204 <pm_state_exit_post_ops>
}
    5432:	bd08      	pop	{r3, pc}
    5434:	2300      	movs	r3, #0
    5436:	f383 8811 	msr	BASEPRI, r3
    543a:	f3bf 8f6f 	isb	sy
    543e:	e7f8      	b.n	5432 <pm_exit_pos_ops+0xe>
    5440:	00013205 	.word	0x00013205

00005444 <pm_resume_devices>:
{
    5444:	b510      	push	{r4, lr}
	for (int i = (num_susp - 1); i >= 0; i--) {
    5446:	4b08      	ldr	r3, [pc, #32]	; (5468 <pm_resume_devices+0x24>)
    5448:	681c      	ldr	r4, [r3, #0]
    544a:	3c01      	subs	r4, #1
    544c:	e006      	b.n	545c <pm_resume_devices+0x18>
		pm_device_action_run(__pm_device_slots_start[i],
    544e:	2101      	movs	r1, #1
    5450:	4b06      	ldr	r3, [pc, #24]	; (546c <pm_resume_devices+0x28>)
    5452:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    5456:	f000 fa27 	bl	58a8 <pm_device_action_run>
	for (int i = (num_susp - 1); i >= 0; i--) {
    545a:	3c01      	subs	r4, #1
    545c:	2c00      	cmp	r4, #0
    545e:	daf6      	bge.n	544e <pm_resume_devices+0xa>
	num_susp = 0;
    5460:	4b01      	ldr	r3, [pc, #4]	; (5468 <pm_resume_devices+0x24>)
    5462:	2200      	movs	r2, #0
    5464:	601a      	str	r2, [r3, #0]
}
    5466:	bd10      	pop	{r4, pc}
    5468:	200011b4 	.word	0x200011b4
    546c:	20000260 	.word	0x20000260

00005470 <pm_suspend_devices>:
{
    5470:	b5f0      	push	{r4, r5, r6, r7, lr}
    5472:	b085      	sub	sp, #20
    5474:	af00      	add	r7, sp, #0
	devc = z_device_get_all_static(&devs);
    5476:	f107 000c 	add.w	r0, r7, #12
    547a:	f007 fcef 	bl	ce5c <z_device_get_all_static>
	num_susp = 0;
    547e:	4b5d      	ldr	r3, [pc, #372]	; (55f4 <pm_suspend_devices+0x184>)
    5480:	2200      	movs	r2, #0
    5482:	601a      	str	r2, [r3, #0]
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
    5484:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    5488:	0083      	lsls	r3, r0, #2
    548a:	3b1c      	subs	r3, #28
    548c:	68fc      	ldr	r4, [r7, #12]
    548e:	441c      	add	r4, r3
    5490:	e07a      	b.n	5588 <pm_suspend_devices+0x118>
			LOG_ERR("Device %s did not enter %s state (%d)",
    5492:	4b59      	ldr	r3, [pc, #356]	; (55f8 <pm_suspend_devices+0x188>)
    5494:	681b      	ldr	r3, [r3, #0]
    5496:	f013 0f07 	tst.w	r3, #7
    549a:	f000 80a6 	beq.w	55ea <pm_suspend_devices+0x17a>
    549e:	6826      	ldr	r6, [r4, #0]
    54a0:	2001      	movs	r0, #1
    54a2:	f000 f9eb 	bl	587c <pm_device_state_str>
    54a6:	466c      	mov	r4, sp
    54a8:	2300      	movs	r3, #0
    54aa:	723b      	strb	r3, [r7, #8]
    54ac:	2302      	movs	r3, #2
    54ae:	727b      	strb	r3, [r7, #9]
    54b0:	2301      	movs	r3, #1
    54b2:	72bb      	strb	r3, [r7, #10]
    54b4:	2303      	movs	r3, #3
    54b6:	72fb      	strb	r3, [r7, #11]
    54b8:	b08a      	sub	sp, #40	; 0x28
    54ba:	466b      	mov	r3, sp
    54bc:	f113 0210 	adds.w	r2, r3, #16
    54c0:	d029      	beq.n	5516 <pm_suspend_devices+0xa6>
    54c2:	2118      	movs	r1, #24
    54c4:	b12a      	cbz	r2, 54d2 <pm_suspend_devices+0x62>
    54c6:	2904      	cmp	r1, #4
    54c8:	dd03      	ble.n	54d2 <pm_suspend_devices+0x62>
    54ca:	f8df c130 	ldr.w	ip, [pc, #304]	; 55fc <pm_suspend_devices+0x18c>
    54ce:	f8c3 c014 	str.w	ip, [r3, #20]
    54d2:	f04f 0c00 	mov.w	ip, #0
    54d6:	f887 c004 	strb.w	ip, [r7, #4]
    54da:	f04f 0c02 	mov.w	ip, #2
    54de:	f887 c005 	strb.w	ip, [r7, #5]
    54e2:	b112      	cbz	r2, 54ea <pm_suspend_devices+0x7a>
    54e4:	2908      	cmp	r1, #8
    54e6:	dd00      	ble.n	54ea <pm_suspend_devices+0x7a>
    54e8:	619e      	str	r6, [r3, #24]
    54ea:	f04f 0c01 	mov.w	ip, #1
    54ee:	f887 c006 	strb.w	ip, [r7, #6]
    54f2:	f04f 0c03 	mov.w	ip, #3
    54f6:	f887 c007 	strb.w	ip, [r7, #7]
    54fa:	b1da      	cbz	r2, 5534 <pm_suspend_devices+0xc4>
    54fc:	468c      	mov	ip, r1
    54fe:	290c      	cmp	r1, #12
    5500:	dd00      	ble.n	5504 <pm_suspend_devices+0x94>
    5502:	61d8      	str	r0, [r3, #28]
    5504:	f1bc 0f10 	cmp.w	ip, #16
    5508:	dd00      	ble.n	550c <pm_suspend_devices+0x9c>
    550a:	621d      	str	r5, [r3, #32]
    550c:	f103 0024 	add.w	r0, r3, #36	; 0x24
    5510:	f04f 0c00 	mov.w	ip, #0
    5514:	e00b      	b.n	552e <pm_suspend_devices+0xbe>
    5516:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    551a:	e7d3      	b.n	54c4 <pm_suspend_devices+0x54>
    551c:	f10c 0610 	add.w	r6, ip, #16
    5520:	443e      	add	r6, r7
    5522:	f816 6c0c 	ldrb.w	r6, [r6, #-12]
    5526:	f800 6b01 	strb.w	r6, [r0], #1
    552a:	f10c 0c01 	add.w	ip, ip, #1
    552e:	f1bc 0f03 	cmp.w	ip, #3
    5532:	d9f3      	bls.n	551c <pm_suspend_devices+0xac>
    5534:	2917      	cmp	r1, #23
    5536:	dd23      	ble.n	5580 <pm_suspend_devices+0x110>
    5538:	f04f 0c18 	mov.w	ip, #24
    553c:	b142      	cbz	r2, 5550 <pm_suspend_devices+0xe0>
    553e:	2105      	movs	r1, #5
    5540:	7239      	strb	r1, [r7, #8]
    5542:	2100      	movs	r1, #0
    5544:	7279      	strb	r1, [r7, #9]
    5546:	72b9      	strb	r1, [r7, #10]
    5548:	2102      	movs	r1, #2
    554a:	72f9      	strb	r1, [r7, #11]
    554c:	68b8      	ldr	r0, [r7, #8]
    554e:	6118      	str	r0, [r3, #16]
    5550:	2100      	movs	r1, #0
    5552:	f36f 0100 	bfc	r1, #0, #1
    5556:	f36f 0141 	bfc	r1, #1, #1
    555a:	f36f 0182 	bfc	r1, #2, #1
    555e:	f36f 01c5 	bfc	r1, #3, #3
    5562:	2301      	movs	r3, #1
    5564:	f363 1188 	bfi	r1, r3, #6, #3
    5568:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    556c:	f36c 2153 	bfi	r1, ip, #9, #11
    5570:	f36f 511f 	bfc	r1, #20, #12
    5574:	2300      	movs	r3, #0
    5576:	4820      	ldr	r0, [pc, #128]	; (55f8 <pm_suspend_devices+0x188>)
    5578:	f7ff f9d0 	bl	491c <z_impl_z_log_msg_static_create>
    557c:	46a5      	mov	sp, r4
			return ret;
    557e:	e034      	b.n	55ea <pm_suspend_devices+0x17a>
			LOG_ERR("Device %s did not enter %s state (%d)",
    5580:	f06f 0c1b 	mvn.w	ip, #27
    5584:	e7da      	b.n	553c <pm_suspend_devices+0xcc>
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
    5586:	3c1c      	subs	r4, #28
    5588:	68fb      	ldr	r3, [r7, #12]
    558a:	429c      	cmp	r4, r3
    558c:	d32c      	bcc.n	55e8 <pm_suspend_devices+0x178>
    558e:	4620      	mov	r0, r4
    5590:	f00f f84e 	bl	14630 <z_device_is_ready>
		if (!device_is_ready(dev) || pm_device_is_busy(dev) ||
    5594:	2800      	cmp	r0, #0
    5596:	d0f6      	beq.n	5586 <pm_suspend_devices+0x116>
    5598:	4620      	mov	r0, r4
    559a:	f00b fabf 	bl	10b1c <pm_device_is_busy>
    559e:	2800      	cmp	r0, #0
    55a0:	d1f1      	bne.n	5586 <pm_suspend_devices+0x116>
		    pm_device_state_is_locked(dev) ||
    55a2:	4620      	mov	r0, r4
    55a4:	f00b faee 	bl	10b84 <pm_device_state_is_locked>
		if (!device_is_ready(dev) || pm_device_is_busy(dev) ||
    55a8:	2800      	cmp	r0, #0
    55aa:	d1ec      	bne.n	5586 <pm_suspend_devices+0x116>
		    pm_device_wakeup_is_enabled(dev) ||
    55ac:	4620      	mov	r0, r4
    55ae:	f00b fadf 	bl	10b70 <pm_device_wakeup_is_enabled>
		    pm_device_state_is_locked(dev) ||
    55b2:	2800      	cmp	r0, #0
    55b4:	d1e7      	bne.n	5586 <pm_suspend_devices+0x116>
		ret = pm_device_action_run(dev, PM_DEVICE_ACTION_SUSPEND);
    55b6:	2100      	movs	r1, #0
    55b8:	4620      	mov	r0, r4
    55ba:	f000 f975 	bl	58a8 <pm_device_action_run>
    55be:	4605      	mov	r5, r0
		if ((ret == -ENOSYS) || (ret == -ENOTSUP) || (ret == -EALREADY)) {
    55c0:	f110 0f58 	cmn.w	r0, #88	; 0x58
    55c4:	d0df      	beq.n	5586 <pm_suspend_devices+0x116>
    55c6:	f110 0f86 	cmn.w	r0, #134	; 0x86
    55ca:	d0dc      	beq.n	5586 <pm_suspend_devices+0x116>
    55cc:	f110 0f78 	cmn.w	r0, #120	; 0x78
    55d0:	d0d9      	beq.n	5586 <pm_suspend_devices+0x116>
		} else if (ret < 0) {
    55d2:	2800      	cmp	r0, #0
    55d4:	f6ff af5d 	blt.w	5492 <pm_suspend_devices+0x22>
		__pm_device_slots_start[num_susp] = dev;
    55d8:	4a06      	ldr	r2, [pc, #24]	; (55f4 <pm_suspend_devices+0x184>)
    55da:	6813      	ldr	r3, [r2, #0]
    55dc:	4908      	ldr	r1, [pc, #32]	; (5600 <pm_suspend_devices+0x190>)
    55de:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
		num_susp++;
    55e2:	3301      	adds	r3, #1
    55e4:	6013      	str	r3, [r2, #0]
    55e6:	e7ce      	b.n	5586 <pm_suspend_devices+0x116>
	return 0;
    55e8:	2500      	movs	r5, #0
}
    55ea:	4628      	mov	r0, r5
    55ec:	3714      	adds	r7, #20
    55ee:	46bd      	mov	sp, r7
    55f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    55f2:	bf00      	nop
    55f4:	200011b4 	.word	0x200011b4
    55f8:	200002fc 	.word	0x200002fc
    55fc:	000163f8 	.word	0x000163f8
    5600:	20000260 	.word	0x20000260

00005604 <pm_system_resume>:

void pm_system_resume(void)
{
    5604:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    5606:	4b0e      	ldr	r3, [pc, #56]	; (5640 <pm_system_resume+0x3c>)
    5608:	7c1c      	ldrb	r4, [r3, #16]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    560a:	4621      	mov	r1, r4
    560c:	480d      	ldr	r0, [pc, #52]	; (5644 <pm_system_resume+0x40>)
    560e:	f00b fa3e 	bl	10a8e <atomic_test_and_clear_bit>
    5612:	b900      	cbnz	r0, 5616 <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    5614:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    5616:	0065      	lsls	r5, r4, #1
    5618:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    561c:	4e0a      	ldr	r6, [pc, #40]	; (5648 <pm_system_resume+0x44>)
    561e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    5622:	f7ff feff 	bl	5424 <pm_exit_pos_ops>
		pm_state_notify(false);
    5626:	2000      	movs	r0, #0
    5628:	f7ff fece 	bl	53c8 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    562c:	192b      	adds	r3, r5, r4
    562e:	0099      	lsls	r1, r3, #2
    5630:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    5634:	2200      	movs	r2, #0
    5636:	5072      	str	r2, [r6, r1]
    5638:	605a      	str	r2, [r3, #4]
    563a:	609a      	str	r2, [r3, #8]
}
    563c:	e7ea      	b.n	5614 <pm_system_resume+0x10>
    563e:	bf00      	nop
    5640:	20003c6c 	.word	0x20003c6c
    5644:	200011d8 	.word	0x200011d8
    5648:	200011c4 	.word	0x200011c4

0000564c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    564c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    564e:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
    5650:	4b58      	ldr	r3, [pc, #352]	; (57b4 <pm_system_suspend+0x168>)
    5652:	7c1c      	ldrb	r4, [r3, #16]
	__asm__ volatile(
    5654:	f04f 0320 	mov.w	r3, #32
    5658:	f3ef 8611 	mrs	r6, BASEPRI
    565c:	f383 8812 	msr	BASEPRI_MAX, r3
    5660:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    5664:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    5668:	4b53      	ldr	r3, [pc, #332]	; (57b8 <pm_system_suspend+0x16c>)
    566a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
    566e:	2b00      	cmp	r3, #0
    5670:	d05c      	beq.n	572c <pm_system_suspend+0xe0>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    5672:	4b52      	ldr	r3, [pc, #328]	; (57bc <pm_system_suspend+0x170>)
    5674:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
    5678:	4f4f      	ldr	r7, [pc, #316]	; (57b8 <pm_system_suspend+0x16c>)
    567a:	ea4f 0e82 	mov.w	lr, r2, lsl #2
    567e:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    5682:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    5686:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    568a:	2300      	movs	r3, #0
    568c:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
    5690:	f386 8811 	msr	BASEPRI, r6
    5694:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    5698:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    569c:	4a47      	ldr	r2, [pc, #284]	; (57bc <pm_system_suspend+0x170>)
    569e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    56a2:	2b00      	cmp	r3, #0
    56a4:	f000 8083 	beq.w	57ae <pm_system_suspend+0x162>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    56a8:	f1b5 3fff 	cmp.w	r5, #4294967295
    56ac:	d14d      	bne.n	574a <pm_system_suspend+0xfe>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    56ae:	4b44      	ldr	r3, [pc, #272]	; (57c0 <pm_system_suspend+0x174>)
    56b0:	f3bf 8f5b 	dmb	ish
    56b4:	e853 2f00 	ldrex	r2, [r3]
    56b8:	3a01      	subs	r2, #1
    56ba:	e843 2100 	strex	r1, r2, [r3]
    56be:	2900      	cmp	r1, #0
    56c0:	d1f8      	bne.n	56b4 <pm_system_suspend+0x68>
    56c2:	f3bf 8f5b 	dmb	ish
			     z_cpus_pm_state[id].exit_latency_us),
				     true);
	}

#if defined(CONFIG_PM_DEVICE) && !defined(CONFIG_PM_DEVICE_RUNTIME_EXCLUSIVE)
	if (atomic_sub(&z_cpus_active, 1) == 1) {
    56c6:	b932      	cbnz	r2, 56d6 <pm_system_suspend+0x8a>
		if (z_cpus_pm_state[id].state != PM_STATE_RUNTIME_IDLE) {
    56c8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    56cc:	4a3b      	ldr	r2, [pc, #236]	; (57bc <pm_system_suspend+0x170>)
    56ce:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    56d2:	2b01      	cmp	r3, #1
    56d4:	d14f      	bne.n	5776 <pm_system_suspend+0x12a>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    56d6:	f008 f9a1 	bl	da1c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    56da:	2001      	movs	r0, #1
    56dc:	f7ff fe74 	bl	53c8 <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
    56e0:	4621      	mov	r1, r4
    56e2:	4838      	ldr	r0, [pc, #224]	; (57c4 <pm_system_suspend+0x178>)
    56e4:	f00b f9ef 	bl	10ac6 <atomic_set_bit>
	if (pm_state_set != NULL) {
    56e8:	4b37      	ldr	r3, [pc, #220]	; (57c8 <pm_system_suspend+0x17c>)
    56ea:	b15b      	cbz	r3, 5704 <pm_system_suspend+0xb8>
		pm_state_set(info->state, info->substate_id);
    56ec:	4a33      	ldr	r2, [pc, #204]	; (57bc <pm_system_suspend+0x170>)
    56ee:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    56f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    56f6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    56fa:	7859      	ldrb	r1, [r3, #1]
    56fc:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
    5700:	f00d fd78 	bl	131f4 <pm_state_set>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    5704:	4b2e      	ldr	r3, [pc, #184]	; (57c0 <pm_system_suspend+0x174>)
    5706:	f3bf 8f5b 	dmb	ish
    570a:	e853 2f00 	ldrex	r2, [r3]
    570e:	1c51      	adds	r1, r2, #1
    5710:	e843 1000 	strex	r0, r1, [r3]
    5714:	2800      	cmp	r0, #0
    5716:	d1f8      	bne.n	570a <pm_system_suspend+0xbe>
    5718:	f3bf 8f5b 	dmb	ish
	state_set(&z_cpus_pm_state[id]);
	pm_stats_stop();

	/* Wake up sequence starts here */
#if defined(CONFIG_PM_DEVICE) && !defined(CONFIG_PM_DEVICE_RUNTIME_EXCLUSIVE)
	if (atomic_add(&z_cpus_active, 1) == 0) {
    571c:	2a00      	cmp	r2, #0
    571e:	d043      	beq.n	57a8 <pm_system_suspend+0x15c>
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    5720:	f7ff ff70 	bl	5604 <pm_system_resume>
	k_sched_unlock();
    5724:	f008 fb66 	bl	ddf4 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    5728:	2001      	movs	r0, #1
}
    572a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
    572c:	4601      	mov	r1, r0
    572e:	4620      	mov	r0, r4
    5730:	f000 f850 	bl	57d4 <pm_policy_next_state>
		if (info != NULL) {
    5734:	2800      	cmp	r0, #0
    5736:	d0ab      	beq.n	5690 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    5738:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    573c:	4b1f      	ldr	r3, [pc, #124]	; (57bc <pm_system_suspend+0x170>)
    573e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    5742:	c807      	ldmia	r0, {r0, r1, r2}
    5744:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    5748:	e7a2      	b.n	5690 <pm_system_suspend+0x44>
		     k_us_to_ticks_ceil32(
    574a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    574e:	4b1b      	ldr	r3, [pc, #108]	; (57bc <pm_system_suspend+0x170>)
    5750:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5754:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
    5756:	0c41      	lsrs	r1, r0, #17
    5758:	03c0      	lsls	r0, r0, #15
    575a:	4b1c      	ldr	r3, [pc, #112]	; (57cc <pm_system_suspend+0x180>)
    575c:	18c0      	adds	r0, r0, r3
    575e:	4a1c      	ldr	r2, [pc, #112]	; (57d0 <pm_system_suspend+0x184>)
    5760:	f04f 0300 	mov.w	r3, #0
    5764:	f141 0100 	adc.w	r1, r1, #0
    5768:	f7fa fcb8 	bl	dc <__aeabi_uldivmod>
		sys_clock_set_timeout(ticks -
    576c:	2101      	movs	r1, #1
    576e:	1a28      	subs	r0, r5, r0
    5770:	f006 fabc 	bl	bcec <sys_clock_set_timeout>
    5774:	e79b      	b.n	56ae <pm_system_suspend+0x62>
			if (pm_suspend_devices()) {
    5776:	f7ff fe7b 	bl	5470 <pm_suspend_devices>
    577a:	2800      	cmp	r0, #0
    577c:	d0ab      	beq.n	56d6 <pm_system_suspend+0x8a>
				pm_resume_devices();
    577e:	f7ff fe61 	bl	5444 <pm_resume_devices>
				z_cpus_pm_state[id].state = PM_STATE_ACTIVE;
    5782:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    5786:	00a4      	lsls	r4, r4, #2
    5788:	2000      	movs	r0, #0
    578a:	4b0c      	ldr	r3, [pc, #48]	; (57bc <pm_system_suspend+0x170>)
    578c:	5518      	strb	r0, [r3, r4]
    578e:	4b0c      	ldr	r3, [pc, #48]	; (57c0 <pm_system_suspend+0x174>)
    5790:	f3bf 8f5b 	dmb	ish
    5794:	e853 1f00 	ldrex	r1, [r3]
    5798:	3101      	adds	r1, #1
    579a:	e843 1200 	strex	r2, r1, [r3]
    579e:	2a00      	cmp	r2, #0
    57a0:	d1f8      	bne.n	5794 <pm_system_suspend+0x148>
    57a2:	f3bf 8f5b 	dmb	ish
				return false;
    57a6:	e7c0      	b.n	572a <pm_system_suspend+0xde>
		pm_resume_devices();
    57a8:	f7ff fe4c 	bl	5444 <pm_resume_devices>
    57ac:	e7b8      	b.n	5720 <pm_system_suspend+0xd4>
		return false;
    57ae:	2000      	movs	r0, #0
    57b0:	e7bb      	b.n	572a <pm_system_suspend+0xde>
    57b2:	bf00      	nop
    57b4:	20003c6c 	.word	0x20003c6c
    57b8:	200011b8 	.word	0x200011b8
    57bc:	200011c4 	.word	0x200011c4
    57c0:	20000044 	.word	0x20000044
    57c4:	200011d8 	.word	0x200011d8
    57c8:	000131f5 	.word	0x000131f5
    57cc:	000f423f 	.word	0x000f423f
    57d0:	000f4240 	.word	0x000f4240

000057d4 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    57d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    57d8:	b082      	sub	sp, #8
    57da:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    57dc:	a901      	add	r1, sp, #4
    57de:	f000 f845 	bl	586c <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    57e2:	1e44      	subs	r4, r0, #1
    57e4:	b224      	sxth	r4, r4
    57e6:	e007      	b.n	57f8 <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
    57e8:	f1b6 3fff 	cmp.w	r6, #4294967295
    57ec:	d033      	beq.n	5856 <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
    57ee:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
    57f0:	45b0      	cmp	r8, r6
    57f2:	d930      	bls.n	5856 <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    57f4:	3c01      	subs	r4, #1
    57f6:	b224      	sxth	r4, r4
    57f8:	2c00      	cmp	r4, #0
    57fa:	db2b      	blt.n	5854 <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
    57fc:	9b01      	ldr	r3, [sp, #4]
    57fe:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    5802:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
    5806:	7869      	ldrb	r1, [r5, #1]
    5808:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    580c:	f00b f96e 	bl	10aec <pm_policy_state_lock_is_active>
    5810:	2800      	cmp	r0, #0
    5812:	d1ef      	bne.n	57f4 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    5814:	6868      	ldr	r0, [r5, #4]
    5816:	0c41      	lsrs	r1, r0, #17
    5818:	03c0      	lsls	r0, r0, #15
    581a:	4f11      	ldr	r7, [pc, #68]	; (5860 <pm_policy_next_state+0x8c>)
    581c:	19c0      	adds	r0, r0, r7
    581e:	4a11      	ldr	r2, [pc, #68]	; (5864 <pm_policy_next_state+0x90>)
    5820:	f04f 0300 	mov.w	r3, #0
    5824:	f141 0100 	adc.w	r1, r1, #0
    5828:	f7fa fc58 	bl	dc <__aeabi_uldivmod>
    582c:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    582e:	68ab      	ldr	r3, [r5, #8]
    5830:	0c59      	lsrs	r1, r3, #17
    5832:	03db      	lsls	r3, r3, #15
    5834:	19d8      	adds	r0, r3, r7
    5836:	4a0b      	ldr	r2, [pc, #44]	; (5864 <pm_policy_next_state+0x90>)
    5838:	f04f 0300 	mov.w	r3, #0
    583c:	f141 0100 	adc.w	r1, r1, #0
    5840:	f7fa fc4c 	bl	dc <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    5844:	4b08      	ldr	r3, [pc, #32]	; (5868 <pm_policy_next_state+0x94>)
    5846:	681b      	ldr	r3, [r3, #0]
    5848:	f1b3 3fff 	cmp.w	r3, #4294967295
    584c:	d0cc      	beq.n	57e8 <pm_policy_next_state+0x14>
    584e:	4283      	cmp	r3, r0
    5850:	d8ca      	bhi.n	57e8 <pm_policy_next_state+0x14>
    5852:	e7cf      	b.n	57f4 <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
    5854:	2500      	movs	r5, #0
}
    5856:	4628      	mov	r0, r5
    5858:	b002      	add	sp, #8
    585a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    585e:	bf00      	nop
    5860:	000f423f 	.word	0x000f423f
    5864:	000f4240 	.word	0x000f4240
    5868:	20000048 	.word	0x20000048

0000586c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    586c:	b908      	cbnz	r0, 5872 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    586e:	4b02      	ldr	r3, [pc, #8]	; (5878 <pm_state_cpu_get_all+0xc>)
    5870:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    5872:	2000      	movs	r0, #0
    5874:	4770      	bx	lr
    5876:	bf00      	nop
    5878:	00016424 	.word	0x00016424

0000587c <pm_device_state_str>:
	[PM_DEVICE_ACTION_TURN_ON] = PM_DEVICE_STATE_OFF,
};

const char *pm_device_state_str(enum pm_device_state state)
{
	switch (state) {
    587c:	2801      	cmp	r0, #1
    587e:	d006      	beq.n	588e <pm_device_state_str+0x12>
    5880:	2803      	cmp	r0, #3
    5882:	d006      	beq.n	5892 <pm_device_state_str+0x16>
    5884:	b108      	cbz	r0, 588a <pm_device_state_str+0xe>
	case PM_DEVICE_STATE_SUSPENDED:
		return "suspended";
	case PM_DEVICE_STATE_OFF:
		return "off";
	default:
		return "";
    5886:	4804      	ldr	r0, [pc, #16]	; (5898 <pm_device_state_str+0x1c>)
	}
}
    5888:	4770      	bx	lr
	switch (state) {
    588a:	4804      	ldr	r0, [pc, #16]	; (589c <pm_device_state_str+0x20>)
    588c:	4770      	bx	lr
		return "suspended";
    588e:	4804      	ldr	r0, [pc, #16]	; (58a0 <pm_device_state_str+0x24>)
    5890:	4770      	bx	lr
		return "off";
    5892:	4804      	ldr	r0, [pc, #16]	; (58a4 <pm_device_state_str+0x28>)
    5894:	4770      	bx	lr
    5896:	bf00      	nop
    5898:	000165a8 	.word	0x000165a8
    589c:	00016424 	.word	0x00016424
    58a0:	0001642c 	.word	0x0001642c
    58a4:	00016438 	.word	0x00016438

000058a8 <pm_device_action_run>:

int pm_device_action_run(const struct device *dev,
			 enum pm_device_action action)
{
    58a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct pm_device *pm = dev->pm;
    58aa:	6987      	ldr	r7, [r0, #24]
	int ret;

	if (pm == NULL) {
    58ac:	2f00      	cmp	r7, #0
    58ae:	d03e      	beq.n	592e <pm_device_action_run+0x86>
    58b0:	4605      	mov	r5, r0
    58b2:	460c      	mov	r4, r1
		return -ENOSYS;
	}

	if (pm_device_state_is_locked(dev)) {
    58b4:	f00b f966 	bl	10b84 <pm_device_state_is_locked>
    58b8:	2800      	cmp	r0, #0
    58ba:	d13b      	bne.n	5934 <pm_device_action_run+0x8c>
		return -EPERM;
	}

	/* Validate action against current state */
	if (pm->state == action_target_state[action]) {
    58bc:	7a3b      	ldrb	r3, [r7, #8]
    58be:	4a22      	ldr	r2, [pc, #136]	; (5948 <pm_device_action_run+0xa0>)
    58c0:	5d16      	ldrb	r6, [r2, r4]
    58c2:	42b3      	cmp	r3, r6
    58c4:	d039      	beq.n	593a <pm_device_action_run+0x92>
		return -EALREADY;
	}
	if (pm->state != action_expected_state[action]) {
    58c6:	4a21      	ldr	r2, [pc, #132]	; (594c <pm_device_action_run+0xa4>)
    58c8:	5d12      	ldrb	r2, [r2, r4]
    58ca:	4293      	cmp	r3, r2
    58cc:	d138      	bne.n	5940 <pm_device_action_run+0x98>
		return -ENOTSUP;
	}

	ret = pm->action_cb(dev, action);
    58ce:	68fb      	ldr	r3, [r7, #12]
    58d0:	4621      	mov	r1, r4
    58d2:	4628      	mov	r0, r5
    58d4:	4798      	blx	r3
	if (ret < 0) {
    58d6:	2800      	cmp	r0, #0
    58d8:	db04      	blt.n	58e4 <pm_device_action_run+0x3c>
			break;
		}
		return ret;
	}

	pm->state = action_target_state[action];
    58da:	723e      	strb	r6, [r7, #8]
	/* Power up failure flag is no longer relevant */
	if (action == PM_DEVICE_ACTION_TURN_OFF) {
    58dc:	2c02      	cmp	r4, #2
    58de:	d017      	beq.n	5910 <pm_device_action_run+0x68>
		atomic_clear_bit(&pm->flags, PM_DEVICE_FLAG_TURN_ON_FAILED);
	}

	return 0;
    58e0:	2000      	movs	r0, #0
}
    58e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (action) {
    58e4:	2c02      	cmp	r4, #2
    58e6:	d011      	beq.n	590c <pm_device_action_run+0x64>
    58e8:	2c03      	cmp	r4, #3
    58ea:	d1fa      	bne.n	58e2 <pm_device_action_run+0x3a>
			if (ret != -ENOTSUP) {
    58ec:	f110 0f86 	cmn.w	r0, #134	; 0x86
    58f0:	d00c      	beq.n	590c <pm_device_action_run+0x64>
				atomic_set_bit(&pm->flags, PM_DEVICE_FLAG_TURN_ON_FAILED);
    58f2:	1d3b      	adds	r3, r7, #4
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    58f4:	f3bf 8f5b 	dmb	ish
    58f8:	e853 1f00 	ldrex	r1, [r3]
    58fc:	f041 0102 	orr.w	r1, r1, #2
    5900:	e843 1200 	strex	r2, r1, [r3]
    5904:	2a00      	cmp	r2, #0
    5906:	d1f7      	bne.n	58f8 <pm_device_action_run+0x50>
    5908:	f3bf 8f5b 	dmb	ish
			pm->state = action_target_state[action];
    590c:	723e      	strb	r6, [r7, #8]
		return ret;
    590e:	e7e8      	b.n	58e2 <pm_device_action_run+0x3a>
		atomic_clear_bit(&pm->flags, PM_DEVICE_FLAG_TURN_ON_FAILED);
    5910:	1d3b      	adds	r3, r7, #4
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5912:	f3bf 8f5b 	dmb	ish
    5916:	e853 1f00 	ldrex	r1, [r3]
    591a:	f021 0102 	bic.w	r1, r1, #2
    591e:	e843 1200 	strex	r2, r1, [r3]
    5922:	2a00      	cmp	r2, #0
    5924:	d1f7      	bne.n	5916 <pm_device_action_run+0x6e>
    5926:	f3bf 8f5b 	dmb	ish
	return 0;
    592a:	2000      	movs	r0, #0
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
}
    592c:	e7d9      	b.n	58e2 <pm_device_action_run+0x3a>
		return -ENOSYS;
    592e:	f06f 0057 	mvn.w	r0, #87	; 0x57
    5932:	e7d6      	b.n	58e2 <pm_device_action_run+0x3a>
		return -EPERM;
    5934:	f04f 30ff 	mov.w	r0, #4294967295
    5938:	e7d3      	b.n	58e2 <pm_device_action_run+0x3a>
		return -EALREADY;
    593a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    593e:	e7d0      	b.n	58e2 <pm_device_action_run+0x3a>
		return -ENOTSUP;
    5940:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5944:	e7cd      	b.n	58e2 <pm_device_action_run+0x3a>
    5946:	bf00      	nop
    5948:	00016440 	.word	0x00016440
    594c:	0001643c 	.word	0x0001643c

00005950 <cmd_kernel_log_level_set>:
}

#if defined(CONFIG_LOG_RUNTIME_FILTERING)
static int cmd_kernel_log_level_set(const struct shell *sh,
				    size_t argc, char **argv)
{
    5950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5954:	b082      	sub	sp, #8
    5956:	4606      	mov	r6, r0
    5958:	4615      	mov	r5, r2
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	int err = 0;
    595a:	2300      	movs	r3, #0
    595c:	9301      	str	r3, [sp, #4]

	uint8_t severity = shell_strtoul(argv[2], 10, &err);
    595e:	aa01      	add	r2, sp, #4
    5960:	210a      	movs	r1, #10
    5962:	68a8      	ldr	r0, [r5, #8]
    5964:	f00c f915 	bl	11b92 <shell_strtoul>

	if (err) {
    5968:	9c01      	ldr	r4, [sp, #4]
    596a:	b99c      	cbnz	r4, 5994 <cmd_kernel_log_level_set+0x44>
    596c:	4680      	mov	r8, r0
    596e:	b2c3      	uxtb	r3, r0
		shell_error(sh, "Unable to parse log severity (err %d)", err);

		return err;
	}

	if (severity > LOG_LEVEL_DBG) {
    5970:	2b04      	cmp	r3, #4
    5972:	d817      	bhi.n	59a4 <cmd_kernel_log_level_set+0x54>
		shell_error(sh, "Invalid log level: %d", severity);
		shell_help(sh);
		return SHELL_CMD_HELP_PRINTED;
	}

	int source_id = log_source_id_get(argv[1]);
    5974:	6868      	ldr	r0, [r5, #4]
    5976:	f00a fea7 	bl	106c8 <log_source_id_get>

	/* log_filter_set() takes an int16_t for the source ID */
	if (source_id < 0) {
    597a:	1e07      	subs	r7, r0, #0
    597c:	db1d      	blt.n	59ba <cmd_kernel_log_level_set+0x6a>
		shell_error(sh, "Unable to find log source: %s", argv[1]);
	}

	log_filter_set(NULL, 0, (int16_t)source_id, severity);
    597e:	b23a      	sxth	r2, r7
    5980:	fa5f f388 	uxtb.w	r3, r8
    5984:	2100      	movs	r1, #0
    5986:	4608      	mov	r0, r1
    5988:	f7fe ff6a 	bl	4860 <z_impl_log_filter_set>

	return 0;
}
    598c:	4620      	mov	r0, r4
    598e:	b002      	add	sp, #8
    5990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		shell_error(sh, "Unable to parse log severity (err %d)", err);
    5994:	4623      	mov	r3, r4
    5996:	4a0c      	ldr	r2, [pc, #48]	; (59c8 <cmd_kernel_log_level_set+0x78>)
    5998:	2101      	movs	r1, #1
    599a:	4630      	mov	r0, r6
    599c:	f00b fe46 	bl	1162c <shell_fprintf>
		return err;
    59a0:	9c01      	ldr	r4, [sp, #4]
    59a2:	e7f3      	b.n	598c <cmd_kernel_log_level_set+0x3c>
		shell_error(sh, "Invalid log level: %d", severity);
    59a4:	b2c3      	uxtb	r3, r0
    59a6:	4a09      	ldr	r2, [pc, #36]	; (59cc <cmd_kernel_log_level_set+0x7c>)
    59a8:	2101      	movs	r1, #1
    59aa:	4630      	mov	r0, r6
    59ac:	f00b fe3e 	bl	1162c <shell_fprintf>
		shell_help(sh);
    59b0:	4630      	mov	r0, r6
    59b2:	f00b fe49 	bl	11648 <shell_help>
		return SHELL_CMD_HELP_PRINTED;
    59b6:	2401      	movs	r4, #1
    59b8:	e7e8      	b.n	598c <cmd_kernel_log_level_set+0x3c>
		shell_error(sh, "Unable to find log source: %s", argv[1]);
    59ba:	686b      	ldr	r3, [r5, #4]
    59bc:	4a04      	ldr	r2, [pc, #16]	; (59d0 <cmd_kernel_log_level_set+0x80>)
    59be:	2101      	movs	r1, #1
    59c0:	4630      	mov	r0, r6
    59c2:	f00b fe33 	bl	1162c <shell_fprintf>
    59c6:	e7da      	b.n	597e <cmd_kernel_log_level_set+0x2e>
    59c8:	00016450 	.word	0x00016450
    59cc:	00016478 	.word	0x00016478
    59d0:	00016490 	.word	0x00016490

000059d4 <cmd_kernel_sleep>:
{
    59d4:	b530      	push	{r4, r5, lr}
    59d6:	b083      	sub	sp, #12
    59d8:	4605      	mov	r5, r0
    59da:	4613      	mov	r3, r2
	int err = 0;
    59dc:	2200      	movs	r2, #0
    59de:	9201      	str	r2, [sp, #4]
	ms = shell_strtoul(argv[1], 10, &err);
    59e0:	aa01      	add	r2, sp, #4
    59e2:	210a      	movs	r1, #10
    59e4:	6858      	ldr	r0, [r3, #4]
    59e6:	f00c f8d4 	bl	11b92 <shell_strtoul>
	if (!err) {
    59ea:	9c01      	ldr	r4, [sp, #4]
    59ec:	b924      	cbnz	r4, 59f8 <cmd_kernel_sleep+0x24>
		k_msleep(ms);
    59ee:	f00b f8d3 	bl	10b98 <k_msleep>
}
    59f2:	4620      	mov	r0, r4
    59f4:	b003      	add	sp, #12
    59f6:	bd30      	pop	{r4, r5, pc}
		shell_error(sh, "Unable to parse input (err %d)", err);
    59f8:	4623      	mov	r3, r4
    59fa:	4a03      	ldr	r2, [pc, #12]	; (5a08 <cmd_kernel_sleep+0x34>)
    59fc:	2101      	movs	r1, #1
    59fe:	4628      	mov	r0, r5
    5a00:	f00b fe14 	bl	1162c <shell_fprintf>
		return err;
    5a04:	9c01      	ldr	r4, [sp, #4]
    5a06:	e7f4      	b.n	59f2 <cmd_kernel_sleep+0x1e>
    5a08:	000164b0 	.word	0x000164b0

00005a0c <cmd_kernel_version>:
{
    5a0c:	b510      	push	{r4, lr}
    5a0e:	b082      	sub	sp, #8
    5a10:	4604      	mov	r4, r0
	uint32_t version = sys_kernel_version_get();
    5a12:	f007 fe27 	bl	d664 <sys_kernel_version_get>
	shell_print(sh, "Zephyr version %d.%d.%d",
    5a16:	f3c0 2307 	ubfx	r3, r0, #8, #8
    5a1a:	9301      	str	r3, [sp, #4]
    5a1c:	f3c0 4307 	ubfx	r3, r0, #16, #8
    5a20:	9300      	str	r3, [sp, #0]
    5a22:	0e03      	lsrs	r3, r0, #24
    5a24:	4a03      	ldr	r2, [pc, #12]	; (5a34 <cmd_kernel_version+0x28>)
    5a26:	2108      	movs	r1, #8
    5a28:	4620      	mov	r0, r4
    5a2a:	f00b fdff 	bl	1162c <shell_fprintf>
}
    5a2e:	2000      	movs	r0, #0
    5a30:	b002      	add	sp, #8
    5a32:	bd10      	pop	{r4, pc}
    5a34:	000164d0 	.word	0x000164d0

00005a38 <cmd_kernel_uptime>:
{
    5a38:	b510      	push	{r4, lr}
    5a3a:	4604      	mov	r4, r0
	shell_print(sh, "Uptime: %u ms", k_uptime_get_32());
    5a3c:	f00b f8c2 	bl	10bc4 <k_uptime_get_32>
    5a40:	4603      	mov	r3, r0
    5a42:	4a03      	ldr	r2, [pc, #12]	; (5a50 <cmd_kernel_uptime+0x18>)
    5a44:	2108      	movs	r1, #8
    5a46:	4620      	mov	r0, r4
    5a48:	f00b fdf0 	bl	1162c <shell_fprintf>
}
    5a4c:	2000      	movs	r0, #0
    5a4e:	bd10      	pop	{r4, pc}
    5a50:	000164ec 	.word	0x000164ec

00005a54 <cmd_kernel_threads>:
{
    5a54:	b510      	push	{r4, lr}
    5a56:	4604      	mov	r4, r0
	shell_print(sh, "Scheduler: %u since last call", sys_clock_elapsed());
    5a58:	f006 f984 	bl	bd64 <sys_clock_elapsed>
    5a5c:	4603      	mov	r3, r0
    5a5e:	4a08      	ldr	r2, [pc, #32]	; (5a80 <cmd_kernel_threads+0x2c>)
    5a60:	2108      	movs	r1, #8
    5a62:	4620      	mov	r0, r4
    5a64:	f00b fde2 	bl	1162c <shell_fprintf>
	shell_print(sh, "Threads:");
    5a68:	4a06      	ldr	r2, [pc, #24]	; (5a84 <cmd_kernel_threads+0x30>)
    5a6a:	2108      	movs	r1, #8
    5a6c:	4620      	mov	r0, r4
    5a6e:	f00b fddd 	bl	1162c <shell_fprintf>
	k_thread_foreach(shell_tdata_dump, (void *)sh);
    5a72:	4621      	mov	r1, r4
    5a74:	4804      	ldr	r0, [pc, #16]	; (5a88 <cmd_kernel_threads+0x34>)
    5a76:	f007 fcab 	bl	d3d0 <k_thread_foreach>
}
    5a7a:	2000      	movs	r0, #0
    5a7c:	bd10      	pop	{r4, pc}
    5a7e:	bf00      	nop
    5a80:	000164fc 	.word	0x000164fc
    5a84:	0001651c 	.word	0x0001651c
    5a88:	00005a8d 	.word	0x00005a8d

00005a8c <shell_tdata_dump>:
{
    5a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a8e:	b08f      	sub	sp, #60	; 0x3c
    5a90:	4604      	mov	r4, r0
    5a92:	460d      	mov	r5, r1
	size_t size = thread->stack_info.size;
    5a94:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
	tname = k_thread_name_get(thread);
    5a98:	f00e fe22 	bl	146e0 <k_thread_name_get>
    5a9c:	4606      	mov	r6, r0
	return z_impl_z_current_get();
    5a9e:	f008 fabf 	bl	e020 <z_impl_z_current_get>
	shell_print(sh, "%s%p %-10s",
    5aa2:	4284      	cmp	r4, r0
    5aa4:	d030      	beq.n	5b08 <shell_tdata_dump+0x7c>
    5aa6:	4b23      	ldr	r3, [pc, #140]	; (5b34 <shell_tdata_dump+0xa8>)
    5aa8:	2e00      	cmp	r6, #0
    5aaa:	d02f      	beq.n	5b0c <shell_tdata_dump+0x80>
    5aac:	9601      	str	r6, [sp, #4]
    5aae:	9400      	str	r4, [sp, #0]
    5ab0:	4a21      	ldr	r2, [pc, #132]	; (5b38 <shell_tdata_dump+0xac>)
    5ab2:	2108      	movs	r1, #8
    5ab4:	4628      	mov	r0, r5
    5ab6:	f00b fdb9 	bl	1162c <shell_fprintf>
	shell_print(sh, "\toptions: 0x%x, priority: %d timeout: %" PRId64,
    5aba:	f994 100e 	ldrsb.w	r1, [r4, #14]
    5abe:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    5ac2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    5ac6:	9100      	str	r1, [sp, #0]
    5ac8:	7b23      	ldrb	r3, [r4, #12]
    5aca:	4a1c      	ldr	r2, [pc, #112]	; (5b3c <shell_tdata_dump+0xb0>)
    5acc:	2108      	movs	r1, #8
    5ace:	4628      	mov	r0, r5
    5ad0:	f00b fdac 	bl	1162c <shell_fprintf>
	shell_print(sh, "\tstate: %s, entry: %p",
    5ad4:	2220      	movs	r2, #32
    5ad6:	a905      	add	r1, sp, #20
    5ad8:	4620      	mov	r0, r4
    5ada:	f007 fcc7 	bl	d46c <k_thread_state_str>
    5ade:	4603      	mov	r3, r0
    5ae0:	6e62      	ldr	r2, [r4, #100]	; 0x64
    5ae2:	9200      	str	r2, [sp, #0]
    5ae4:	4a16      	ldr	r2, [pc, #88]	; (5b40 <shell_tdata_dump+0xb4>)
    5ae6:	2108      	movs	r1, #8
    5ae8:	4628      	mov	r0, r5
    5aea:	f00b fd9f 	bl	1162c <shell_fprintf>
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
    5aee:	a90d      	add	r1, sp, #52	; 0x34
    5af0:	4620      	mov	r0, r4
    5af2:	f00e fe39 	bl	14768 <z_impl_k_thread_stack_space_get>
	if (ret) {
    5af6:	4603      	mov	r3, r0
    5af8:	b150      	cbz	r0, 5b10 <shell_tdata_dump+0x84>
		shell_print(sh,
    5afa:	4a12      	ldr	r2, [pc, #72]	; (5b44 <shell_tdata_dump+0xb8>)
    5afc:	2108      	movs	r1, #8
    5afe:	4628      	mov	r0, r5
    5b00:	f00b fd94 	bl	1162c <shell_fprintf>
}
    5b04:	b00f      	add	sp, #60	; 0x3c
    5b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	shell_print(sh, "%s%p %-10s",
    5b08:	4b0f      	ldr	r3, [pc, #60]	; (5b48 <shell_tdata_dump+0xbc>)
    5b0a:	e7cd      	b.n	5aa8 <shell_tdata_dump+0x1c>
    5b0c:	4e0f      	ldr	r6, [pc, #60]	; (5b4c <shell_tdata_dump+0xc0>)
    5b0e:	e7cd      	b.n	5aac <shell_tdata_dump+0x20>
		pcnt = ((size - unused) * 100U) / size;
    5b10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5b12:	1ab9      	subs	r1, r7, r2
    5b14:	2364      	movs	r3, #100	; 0x64
    5b16:	fb01 f303 	mul.w	r3, r1, r3
    5b1a:	fbb3 f3f7 	udiv	r3, r3, r7
		shell_print(sh,
    5b1e:	9303      	str	r3, [sp, #12]
    5b20:	9702      	str	r7, [sp, #8]
    5b22:	9101      	str	r1, [sp, #4]
    5b24:	9200      	str	r2, [sp, #0]
    5b26:	463b      	mov	r3, r7
    5b28:	4a09      	ldr	r2, [pc, #36]	; (5b50 <shell_tdata_dump+0xc4>)
    5b2a:	2108      	movs	r1, #8
    5b2c:	4628      	mov	r0, r5
    5b2e:	f00b fd7d 	bl	1162c <shell_fprintf>
}
    5b32:	e7e7      	b.n	5b04 <shell_tdata_dump+0x78>
    5b34:	00015d98 	.word	0x00015d98
    5b38:	0001652c 	.word	0x0001652c
    5b3c:	00016538 	.word	0x00016538
    5b40:	00016564 	.word	0x00016564
    5b44:	0001657c 	.word	0x0001657c
    5b48:	00017b24 	.word	0x00017b24
    5b4c:	00016528 	.word	0x00016528
    5b50:	000165ac 	.word	0x000165ac

00005b54 <shell_stack_dump>:
{
    5b54:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b56:	b089      	sub	sp, #36	; 0x24
    5b58:	4604      	mov	r4, r0
    5b5a:	460d      	mov	r5, r1
	size_t size = thread->stack_info.size;
    5b5c:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
    5b60:	a907      	add	r1, sp, #28
    5b62:	f00e fe01 	bl	14768 <z_impl_k_thread_stack_space_get>
	if (ret) {
    5b66:	b9c8      	cbnz	r0, 5b9c <shell_stack_dump+0x48>
	tname = k_thread_name_get((struct k_thread *)thread);
    5b68:	4620      	mov	r0, r4
    5b6a:	f00e fdb9 	bl	146e0 <k_thread_name_get>
	pcnt = ((size - unused) * 100U) / size;
    5b6e:	9a07      	ldr	r2, [sp, #28]
    5b70:	1ab1      	subs	r1, r6, r2
    5b72:	2364      	movs	r3, #100	; 0x64
    5b74:	fb01 f303 	mul.w	r3, r1, r3
    5b78:	fbb3 f3f6 	udiv	r3, r3, r6
	shell_print(
    5b7c:	4607      	mov	r7, r0
    5b7e:	b1a0      	cbz	r0, 5baa <shell_stack_dump+0x56>
    5b80:	9305      	str	r3, [sp, #20]
    5b82:	9604      	str	r6, [sp, #16]
    5b84:	9103      	str	r1, [sp, #12]
    5b86:	9202      	str	r2, [sp, #8]
    5b88:	9601      	str	r6, [sp, #4]
    5b8a:	9700      	str	r7, [sp, #0]
    5b8c:	4623      	mov	r3, r4
    5b8e:	4a08      	ldr	r2, [pc, #32]	; (5bb0 <shell_stack_dump+0x5c>)
    5b90:	2108      	movs	r1, #8
    5b92:	4628      	mov	r0, r5
    5b94:	f00b fd4a 	bl	1162c <shell_fprintf>
}
    5b98:	b009      	add	sp, #36	; 0x24
    5b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b9c:	4603      	mov	r3, r0
		shell_print(sh,
    5b9e:	4a05      	ldr	r2, [pc, #20]	; (5bb4 <shell_stack_dump+0x60>)
    5ba0:	2108      	movs	r1, #8
    5ba2:	4628      	mov	r0, r5
    5ba4:	f00b fd42 	bl	1162c <shell_fprintf>
		return;
    5ba8:	e7f6      	b.n	5b98 <shell_stack_dump+0x44>
	shell_print(
    5baa:	4f03      	ldr	r7, [pc, #12]	; (5bb8 <shell_stack_dump+0x64>)
    5bac:	e7e8      	b.n	5b80 <shell_stack_dump+0x2c>
    5bae:	bf00      	nop
    5bb0:	000165e4 	.word	0x000165e4
    5bb4:	0001657c 	.word	0x0001657c
    5bb8:	00016528 	.word	0x00016528

00005bbc <cmd_kernel_stacks>:
{
    5bbc:	b570      	push	{r4, r5, r6, lr}
    5bbe:	b092      	sub	sp, #72	; 0x48
    5bc0:	4605      	mov	r5, r0
	char pad[THREAD_MAX_NAM_LEN] = { 0 };
    5bc2:	2300      	movs	r3, #0
    5bc4:	930a      	str	r3, [sp, #40]	; 0x28
    5bc6:	930b      	str	r3, [sp, #44]	; 0x2c
    5bc8:	930c      	str	r3, [sp, #48]	; 0x30
    5bca:	930d      	str	r3, [sp, #52]	; 0x34
    5bcc:	930e      	str	r3, [sp, #56]	; 0x38
    5bce:	930f      	str	r3, [sp, #60]	; 0x3c
    5bd0:	9310      	str	r3, [sp, #64]	; 0x40
    5bd2:	9311      	str	r3, [sp, #68]	; 0x44
	memset(pad, ' ', MAX((THREAD_MAX_NAM_LEN - strlen("IRQ 00")), 1));
    5bd4:	481e      	ldr	r0, [pc, #120]	; (5c50 <cmd_kernel_stacks+0x94>)
    5bd6:	f00d f882 	bl	12cde <strlen>
    5bda:	f1c0 0020 	rsb	r0, r0, #32
    5bde:	2801      	cmp	r0, #1
    5be0:	d80d      	bhi.n	5bfe <cmd_kernel_stacks+0x42>
    5be2:	2201      	movs	r2, #1
    5be4:	2120      	movs	r1, #32
    5be6:	a80a      	add	r0, sp, #40	; 0x28
    5be8:	f00d f8fe 	bl	12de8 <memset>
	k_thread_foreach(shell_stack_dump, (void *)sh);
    5bec:	4629      	mov	r1, r5
    5bee:	4819      	ldr	r0, [pc, #100]	; (5c54 <cmd_kernel_stacks+0x98>)
    5bf0:	f007 fbee 	bl	d3d0 <k_thread_foreach>
	for (int i = 0; i < num_cpus; i++) {
    5bf4:	2400      	movs	r4, #0
    5bf6:	b144      	cbz	r4, 5c0a <cmd_kernel_stacks+0x4e>
}
    5bf8:	2000      	movs	r0, #0
    5bfa:	b012      	add	sp, #72	; 0x48
    5bfc:	bd70      	pop	{r4, r5, r6, pc}
	memset(pad, ' ', MAX((THREAD_MAX_NAM_LEN - strlen("IRQ 00")), 1));
    5bfe:	4814      	ldr	r0, [pc, #80]	; (5c50 <cmd_kernel_stacks+0x94>)
    5c00:	f00d f86d 	bl	12cde <strlen>
    5c04:	f1c0 0220 	rsb	r2, r0, #32
    5c08:	e7ec      	b.n	5be4 <cmd_kernel_stacks+0x28>
		const uint8_t *buf = Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]);
    5c0a:	4e13      	ldr	r6, [pc, #76]	; (5c58 <cmd_kernel_stacks+0x9c>)
    5c0c:	eb06 26c4 	add.w	r6, r6, r4, lsl #11
		int err = z_stack_space_get(buf, size, &unused);
    5c10:	aa09      	add	r2, sp, #36	; 0x24
    5c12:	f44f 6100 	mov.w	r1, #2048	; 0x800
    5c16:	4630      	mov	r0, r6
    5c18:	f00e fd95 	bl	14746 <z_stack_space_get>
		shell_print(sh,
    5c1c:	9909      	ldr	r1, [sp, #36]	; 0x24
    5c1e:	f5c1 6000 	rsb	r0, r1, #2048	; 0x800
    5c22:	2264      	movs	r2, #100	; 0x64
    5c24:	fb00 f202 	mul.w	r2, r0, r2
    5c28:	0ad2      	lsrs	r2, r2, #11
    5c2a:	9206      	str	r2, [sp, #24]
    5c2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    5c30:	9305      	str	r3, [sp, #20]
    5c32:	9004      	str	r0, [sp, #16]
    5c34:	9103      	str	r1, [sp, #12]
    5c36:	9302      	str	r3, [sp, #8]
    5c38:	ab0a      	add	r3, sp, #40	; 0x28
    5c3a:	9301      	str	r3, [sp, #4]
    5c3c:	9400      	str	r4, [sp, #0]
    5c3e:	4633      	mov	r3, r6
    5c40:	4a06      	ldr	r2, [pc, #24]	; (5c5c <cmd_kernel_stacks+0xa0>)
    5c42:	2108      	movs	r1, #8
    5c44:	4628      	mov	r0, r5
    5c46:	f00b fcf1 	bl	1162c <shell_fprintf>
	for (int i = 0; i < num_cpus; i++) {
    5c4a:	3401      	adds	r4, #1
    5c4c:	e7d3      	b.n	5bf6 <cmd_kernel_stacks+0x3a>
    5c4e:	bf00      	nop
    5c50:	00016628 	.word	0x00016628
    5c54:	00005b55 	.word	0x00005b55
    5c58:	200049b8 	.word	0x200049b8
    5c5c:	00016630 	.word	0x00016630

00005c60 <cmd_kernel_cycles>:
{
    5c60:	b510      	push	{r4, lr}
    5c62:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    5c64:	f00e f83a 	bl	13cdc <sys_clock_cycle_get_32>
    5c68:	4603      	mov	r3, r0
	shell_print(sh, "cycles: %u hw cycles", k_cycle_get_32());
    5c6a:	4a03      	ldr	r2, [pc, #12]	; (5c78 <cmd_kernel_cycles+0x18>)
    5c6c:	2108      	movs	r1, #8
    5c6e:	4620      	mov	r0, r4
    5c70:	f00b fcdc 	bl	1162c <shell_fprintf>
}
    5c74:	2000      	movs	r0, #0
    5c76:	bd10      	pop	{r4, pc}
    5c78:	0001667c 	.word	0x0001667c

00005c7c <get_device_name>:
};

static const char *get_device_name(const struct device *dev,
				   char *buf,
				   size_t len)
{
    5c7c:	b510      	push	{r4, lr}
    5c7e:	4603      	mov	r3, r0
    5c80:	460c      	mov	r4, r1
    5c82:	4611      	mov	r1, r2
	const char *name = dev->name;
    5c84:	6800      	ldr	r0, [r0, #0]

	if ((name == NULL) || (name[0] == 0)) {
    5c86:	b108      	cbz	r0, 5c8c <get_device_name+0x10>
    5c88:	7802      	ldrb	r2, [r0, #0]
    5c8a:	b922      	cbnz	r2, 5c96 <get_device_name+0x1a>
		snprintf(buf, len, "[%p]", dev);
    5c8c:	4a02      	ldr	r2, [pc, #8]	; (5c98 <get_device_name+0x1c>)
    5c8e:	4620      	mov	r0, r4
    5c90:	f003 fb08 	bl	92a4 <snprintf>
		name = buf;
    5c94:	4620      	mov	r0, r4
	}

	return name;
}
    5c96:	bd10      	pop	{r4, pc}
    5c98:	000168bc 	.word	0x000168bc

00005c9c <cmd_device_list_visitor>:
	size_t buf_size;
};

static int cmd_device_list_visitor(const struct device *dev,
				   void *context)
{
    5c9c:	b510      	push	{r4, lr}
	const struct cmd_device_list_visitor_context *ctx = context;

	shell_fprintf(ctx->sh, SHELL_NORMAL, "  requires: %s\n",
    5c9e:	680c      	ldr	r4, [r1, #0]
    5ca0:	688a      	ldr	r2, [r1, #8]
    5ca2:	6849      	ldr	r1, [r1, #4]
    5ca4:	f7ff ffea 	bl	5c7c <get_device_name>
    5ca8:	4603      	mov	r3, r0
    5caa:	4a03      	ldr	r2, [pc, #12]	; (5cb8 <cmd_device_list_visitor+0x1c>)
    5cac:	2108      	movs	r1, #8
    5cae:	4620      	mov	r0, r4
    5cb0:	f00b fcbc 	bl	1162c <shell_fprintf>
		      get_device_name(dev, ctx->buf, ctx->buf_size));

	return 0;
}
    5cb4:	2000      	movs	r0, #0
    5cb6:	bd10      	pop	{r4, pc}
    5cb8:	000168c4 	.word	0x000168c4

00005cbc <cmd_device_list>:

static int cmd_device_list(const struct shell *sh,
			   size_t argc, char **argv)
{
    5cbc:	b570      	push	{r4, r5, r6, lr}
    5cbe:	b08a      	sub	sp, #40	; 0x28
    5cc0:	4605      	mov	r5, r0
	const struct device *devlist;
	size_t devcnt = z_device_get_all_static(&devlist);
    5cc2:	a809      	add	r0, sp, #36	; 0x24
    5cc4:	f007 f8ca 	bl	ce5c <z_device_get_all_static>
	const struct device *devlist_end = devlist + devcnt;
    5cc8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    5ccc:	9e09      	ldr	r6, [sp, #36]	; 0x24
    5cce:	eb06 0680 	add.w	r6, r6, r0, lsl #2
	const struct device *dev;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(sh, SHELL_NORMAL, "devices:\n");
    5cd2:	4a1e      	ldr	r2, [pc, #120]	; (5d4c <cmd_device_list+0x90>)
    5cd4:	2108      	movs	r1, #8
    5cd6:	4628      	mov	r0, r5
    5cd8:	f00b fca8 	bl	1162c <shell_fprintf>

	for (dev = devlist; dev < devlist_end; dev++) {
    5cdc:	9c09      	ldr	r4, [sp, #36]	; 0x24
    5cde:	e018      	b.n	5d12 <cmd_device_list+0x56>
		shell_fprintf(sh, SHELL_NORMAL, "- %s", name);
		if (!device_is_ready(dev)) {
			state = "DISABLED";
		} else {
#ifdef CONFIG_PM_DEVICE
			enum pm_device_state st = PM_DEVICE_STATE_ACTIVE;
    5ce0:	2300      	movs	r3, #0
    5ce2:	f88d 3004 	strb.w	r3, [sp, #4]
			int err = pm_device_state_get(dev, &st);
    5ce6:	a901      	add	r1, sp, #4
    5ce8:	4620      	mov	r0, r4
    5cea:	f00a ff0e 	bl	10b0a <pm_device_state_get>

			if (!err) {
    5cee:	b320      	cbz	r0, 5d3a <cmd_device_list+0x7e>
		const char *state = "READY";
    5cf0:	4b17      	ldr	r3, [pc, #92]	; (5d50 <cmd_device_list+0x94>)
				state = pm_device_state_str(st);
			}
#endif /* CONFIG_PM_DEVICE */
		}

		shell_fprintf(sh, SHELL_NORMAL, " (%s)\n", state);
    5cf2:	4a18      	ldr	r2, [pc, #96]	; (5d54 <cmd_device_list+0x98>)
    5cf4:	2108      	movs	r1, #8
    5cf6:	4628      	mov	r0, r5
    5cf8:	f00b fc98 	bl	1162c <shell_fprintf>
		if (!k_is_user_context()) {
			struct cmd_device_list_visitor_context ctx = {
    5cfc:	9501      	str	r5, [sp, #4]
    5cfe:	ab04      	add	r3, sp, #16
    5d00:	9302      	str	r3, [sp, #8]
    5d02:	2314      	movs	r3, #20
    5d04:	9303      	str	r3, [sp, #12]
				.sh = sh,
				.buf = buf,
				.buf_size = sizeof(buf),
			};

			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    5d06:	aa01      	add	r2, sp, #4
    5d08:	4913      	ldr	r1, [pc, #76]	; (5d58 <cmd_device_list+0x9c>)
    5d0a:	4620      	mov	r0, r4
    5d0c:	f00e fca0 	bl	14650 <device_required_foreach>
	for (dev = devlist; dev < devlist_end; dev++) {
    5d10:	341c      	adds	r4, #28
    5d12:	42b4      	cmp	r4, r6
    5d14:	d217      	bcs.n	5d46 <cmd_device_list+0x8a>
		const char *name = get_device_name(dev, buf, sizeof(buf));
    5d16:	2214      	movs	r2, #20
    5d18:	a904      	add	r1, sp, #16
    5d1a:	4620      	mov	r0, r4
    5d1c:	f7ff ffae 	bl	5c7c <get_device_name>
    5d20:	4603      	mov	r3, r0
		shell_fprintf(sh, SHELL_NORMAL, "- %s", name);
    5d22:	4a0e      	ldr	r2, [pc, #56]	; (5d5c <cmd_device_list+0xa0>)
    5d24:	2108      	movs	r1, #8
    5d26:	4628      	mov	r0, r5
    5d28:	f00b fc80 	bl	1162c <shell_fprintf>
    5d2c:	4620      	mov	r0, r4
    5d2e:	f00e fc7f 	bl	14630 <z_device_is_ready>
		if (!device_is_ready(dev)) {
    5d32:	2800      	cmp	r0, #0
    5d34:	d1d4      	bne.n	5ce0 <cmd_device_list+0x24>
			state = "DISABLED";
    5d36:	4b0a      	ldr	r3, [pc, #40]	; (5d60 <cmd_device_list+0xa4>)
    5d38:	e7db      	b.n	5cf2 <cmd_device_list+0x36>
				state = pm_device_state_str(st);
    5d3a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    5d3e:	f7ff fd9d 	bl	587c <pm_device_state_str>
    5d42:	4603      	mov	r3, r0
    5d44:	e7d5      	b.n	5cf2 <cmd_device_list+0x36>
		}
	}

	return 0;
}
    5d46:	2000      	movs	r0, #0
    5d48:	b00a      	add	sp, #40	; 0x28
    5d4a:	bd70      	pop	{r4, r5, r6, pc}
    5d4c:	000168e8 	.word	0x000168e8
    5d50:	000168d4 	.word	0x000168d4
    5d54:	000168fc 	.word	0x000168fc
    5d58:	00005c9d 	.word	0x00005c9d
    5d5c:	000168f4 	.word	0x000168f4
    5d60:	000168dc 	.word	0x000168dc

00005d64 <device_get_config_level>:
{
    5d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d68:	b086      	sub	sp, #24
    5d6a:	4606      	mov	r6, r0
    5d6c:	460d      	mov	r5, r1
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    5d6e:	4b11      	ldr	r3, [pc, #68]	; (5db4 <device_get_config_level+0x50>)
    5d70:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
	bool devices = false;
    5d74:	2700      	movs	r7, #0
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    5d76:	e000      	b.n	5d7a <device_get_config_level+0x16>
    5d78:	341c      	adds	r4, #28
    5d7a:	1c6b      	adds	r3, r5, #1
    5d7c:	4a0d      	ldr	r2, [pc, #52]	; (5db4 <device_get_config_level+0x50>)
    5d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5d82:	42a3      	cmp	r3, r4
    5d84:	d912      	bls.n	5dac <device_get_config_level+0x48>
    5d86:	4620      	mov	r0, r4
    5d88:	f00e fc52 	bl	14630 <z_device_is_ready>
		if (device_is_ready(dev)) {
    5d8c:	4680      	mov	r8, r0
    5d8e:	2800      	cmp	r0, #0
    5d90:	d0f2      	beq.n	5d78 <device_get_config_level+0x14>
			shell_fprintf(sh, SHELL_NORMAL, "- %s\n",
    5d92:	2214      	movs	r2, #20
    5d94:	a901      	add	r1, sp, #4
    5d96:	4620      	mov	r0, r4
    5d98:	f7ff ff70 	bl	5c7c <get_device_name>
    5d9c:	4603      	mov	r3, r0
    5d9e:	4a06      	ldr	r2, [pc, #24]	; (5db8 <device_get_config_level+0x54>)
    5da0:	2108      	movs	r1, #8
    5da2:	4630      	mov	r0, r6
    5da4:	f00b fc42 	bl	1162c <shell_fprintf>
			devices = true;
    5da8:	4647      	mov	r7, r8
    5daa:	e7e5      	b.n	5d78 <device_get_config_level+0x14>
}
    5dac:	4638      	mov	r0, r7
    5dae:	b006      	add	sp, #24
    5db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5db4:	00016a14 	.word	0x00016a14
    5db8:	00016904 	.word	0x00016904

00005dbc <cmd_device_levels>:
{
    5dbc:	b510      	push	{r4, lr}
    5dbe:	4604      	mov	r4, r0
	shell_fprintf(sh, SHELL_NORMAL, "EARLY:\n");
    5dc0:	4a28      	ldr	r2, [pc, #160]	; (5e64 <cmd_device_levels+0xa8>)
    5dc2:	2108      	movs	r1, #8
    5dc4:	f00b fc32 	bl	1162c <shell_fprintf>
	ret = device_get_config_level(sh, INIT_LEVEL_EARLY);
    5dc8:	2100      	movs	r1, #0
    5dca:	4620      	mov	r0, r4
    5dcc:	f7ff ffca 	bl	5d64 <device_get_config_level>
	if (ret == false) {
    5dd0:	b348      	cbz	r0, 5e26 <cmd_device_levels+0x6a>
	shell_fprintf(sh, SHELL_NORMAL, "PRE KERNEL 1:\n");
    5dd2:	4a25      	ldr	r2, [pc, #148]	; (5e68 <cmd_device_levels+0xac>)
    5dd4:	2108      	movs	r1, #8
    5dd6:	4620      	mov	r0, r4
    5dd8:	f00b fc28 	bl	1162c <shell_fprintf>
	ret = device_get_config_level(sh, INIT_LEVEL_PRE_KERNEL_1);
    5ddc:	2101      	movs	r1, #1
    5dde:	4620      	mov	r0, r4
    5de0:	f7ff ffc0 	bl	5d64 <device_get_config_level>
	if (ret == false) {
    5de4:	b328      	cbz	r0, 5e32 <cmd_device_levels+0x76>
	shell_fprintf(sh, SHELL_NORMAL, "PRE KERNEL 2:\n");
    5de6:	4a21      	ldr	r2, [pc, #132]	; (5e6c <cmd_device_levels+0xb0>)
    5de8:	2108      	movs	r1, #8
    5dea:	4620      	mov	r0, r4
    5dec:	f00b fc1e 	bl	1162c <shell_fprintf>
	ret = device_get_config_level(sh, INIT_LEVEL_PRE_KERNEL_2);
    5df0:	2102      	movs	r1, #2
    5df2:	4620      	mov	r0, r4
    5df4:	f7ff ffb6 	bl	5d64 <device_get_config_level>
	if (ret == false) {
    5df8:	b308      	cbz	r0, 5e3e <cmd_device_levels+0x82>
	shell_fprintf(sh, SHELL_NORMAL, "POST_KERNEL:\n");
    5dfa:	4a1d      	ldr	r2, [pc, #116]	; (5e70 <cmd_device_levels+0xb4>)
    5dfc:	2108      	movs	r1, #8
    5dfe:	4620      	mov	r0, r4
    5e00:	f00b fc14 	bl	1162c <shell_fprintf>
	ret = device_get_config_level(sh, INIT_LEVEL_POST_KERNEL);
    5e04:	2103      	movs	r1, #3
    5e06:	4620      	mov	r0, r4
    5e08:	f7ff ffac 	bl	5d64 <device_get_config_level>
	if (ret == false) {
    5e0c:	b1e8      	cbz	r0, 5e4a <cmd_device_levels+0x8e>
	shell_fprintf(sh, SHELL_NORMAL, "APPLICATION:\n");
    5e0e:	4a19      	ldr	r2, [pc, #100]	; (5e74 <cmd_device_levels+0xb8>)
    5e10:	2108      	movs	r1, #8
    5e12:	4620      	mov	r0, r4
    5e14:	f00b fc0a 	bl	1162c <shell_fprintf>
	ret = device_get_config_level(sh, INIT_LEVEL_APPLICATION);
    5e18:	2104      	movs	r1, #4
    5e1a:	4620      	mov	r0, r4
    5e1c:	f7ff ffa2 	bl	5d64 <device_get_config_level>
	if (ret == false) {
    5e20:	b1c8      	cbz	r0, 5e56 <cmd_device_levels+0x9a>
}
    5e22:	2000      	movs	r0, #0
    5e24:	bd10      	pop	{r4, pc}
		shell_fprintf(sh, SHELL_NORMAL, "- None\n");
    5e26:	4a14      	ldr	r2, [pc, #80]	; (5e78 <cmd_device_levels+0xbc>)
    5e28:	2108      	movs	r1, #8
    5e2a:	4620      	mov	r0, r4
    5e2c:	f00b fbfe 	bl	1162c <shell_fprintf>
    5e30:	e7cf      	b.n	5dd2 <cmd_device_levels+0x16>
		shell_fprintf(sh, SHELL_NORMAL, "- None\n");
    5e32:	4a11      	ldr	r2, [pc, #68]	; (5e78 <cmd_device_levels+0xbc>)
    5e34:	2108      	movs	r1, #8
    5e36:	4620      	mov	r0, r4
    5e38:	f00b fbf8 	bl	1162c <shell_fprintf>
    5e3c:	e7d3      	b.n	5de6 <cmd_device_levels+0x2a>
		shell_fprintf(sh, SHELL_NORMAL, "- None\n");
    5e3e:	4a0e      	ldr	r2, [pc, #56]	; (5e78 <cmd_device_levels+0xbc>)
    5e40:	2108      	movs	r1, #8
    5e42:	4620      	mov	r0, r4
    5e44:	f00b fbf2 	bl	1162c <shell_fprintf>
    5e48:	e7d7      	b.n	5dfa <cmd_device_levels+0x3e>
		shell_fprintf(sh, SHELL_NORMAL, "- None\n");
    5e4a:	4a0b      	ldr	r2, [pc, #44]	; (5e78 <cmd_device_levels+0xbc>)
    5e4c:	2108      	movs	r1, #8
    5e4e:	4620      	mov	r0, r4
    5e50:	f00b fbec 	bl	1162c <shell_fprintf>
    5e54:	e7db      	b.n	5e0e <cmd_device_levels+0x52>
		shell_fprintf(sh, SHELL_NORMAL, "- None\n");
    5e56:	4a08      	ldr	r2, [pc, #32]	; (5e78 <cmd_device_levels+0xbc>)
    5e58:	2108      	movs	r1, #8
    5e5a:	4620      	mov	r0, r4
    5e5c:	f00b fbe6 	bl	1162c <shell_fprintf>
    5e60:	e7df      	b.n	5e22 <cmd_device_levels+0x66>
    5e62:	bf00      	nop
    5e64:	0001690c 	.word	0x0001690c
    5e68:	0001691c 	.word	0x0001691c
    5e6c:	0001692c 	.word	0x0001692c
    5e70:	0001693c 	.word	0x0001693c
    5e74:	0001694c 	.word	0x0001694c
    5e78:	00016914 	.word	0x00016914

00005e7c <memory_read>:
	set_bypass(sh, bypass_cb);
	return 0;
}

static int memory_read(const struct shell *sh, mem_addr_t addr, uint8_t width)
{
    5e7c:	b508      	push	{r3, lr}
	uint32_t value;
	int err = 0;

	switch (width) {
    5e7e:	2a10      	cmp	r2, #16
    5e80:	d012      	beq.n	5ea8 <memory_read+0x2c>
    5e82:	2a20      	cmp	r2, #32
    5e84:	d013      	beq.n	5eae <memory_read+0x32>
    5e86:	2a08      	cmp	r2, #8
    5e88:	d006      	beq.n	5e98 <memory_read+0x1c>
		break;
	case 32:
		value = sys_read32(addr);
		break;
	default:
		shell_fprintf(sh, SHELL_NORMAL, "Incorrect data width\n");
    5e8a:	4a0a      	ldr	r2, [pc, #40]	; (5eb4 <memory_read+0x38>)
    5e8c:	2108      	movs	r1, #8
    5e8e:	f00b fbcd 	bl	1162c <shell_fprintf>
		err = -EINVAL;
    5e92:	f06f 0015 	mvn.w	r0, #21
    5e96:	e006      	b.n	5ea6 <memory_read+0x2a>
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
    5e98:	780b      	ldrb	r3, [r1, #0]
    5e9a:	b2db      	uxtb	r3, r3
		break;
	}

	if (err == 0) {
		shell_fprintf(sh, SHELL_NORMAL, "Read value 0x%x\n", value);
    5e9c:	4a06      	ldr	r2, [pc, #24]	; (5eb8 <memory_read+0x3c>)
    5e9e:	2108      	movs	r1, #8
    5ea0:	f00b fbc4 	bl	1162c <shell_fprintf>
    5ea4:	2000      	movs	r0, #0
	}

	return err;
}
    5ea6:	bd08      	pop	{r3, pc}
	*(volatile uint8_t *)addr = data;
}

static ALWAYS_INLINE uint16_t sys_read16(mem_addr_t addr)
{
	return *(volatile uint16_t *)addr;
    5ea8:	880b      	ldrh	r3, [r1, #0]
    5eaa:	b29b      	uxth	r3, r3
	if (err == 0) {
    5eac:	e7f6      	b.n	5e9c <memory_read+0x20>
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
    5eae:	680b      	ldr	r3, [r1, #0]
    5eb0:	e7f4      	b.n	5e9c <memory_read+0x20>
    5eb2:	bf00      	nop
    5eb4:	00016a2c 	.word	0x00016a2c
    5eb8:	00016a44 	.word	0x00016a44

00005ebc <memory_write>:

static int memory_write(const struct shell *sh, mem_addr_t addr, uint8_t width, uint64_t value)
{
    5ebc:	b508      	push	{r3, lr}
    5ebe:	9b02      	ldr	r3, [sp, #8]
	int err = 0;

	switch (width) {
    5ec0:	2a10      	cmp	r2, #16
    5ec2:	d00e      	beq.n	5ee2 <memory_write+0x26>
    5ec4:	2a20      	cmp	r2, #32
    5ec6:	d010      	beq.n	5eea <memory_write+0x2e>
    5ec8:	2a08      	cmp	r2, #8
    5eca:	d006      	beq.n	5eda <memory_write+0x1e>
		break;
	case 32:
		sys_write32(value, addr);
		break;
	default:
		shell_fprintf(sh, SHELL_NORMAL, "Incorrect data width\n");
    5ecc:	4a08      	ldr	r2, [pc, #32]	; (5ef0 <memory_write+0x34>)
    5ece:	2108      	movs	r1, #8
    5ed0:	f00b fbac 	bl	1162c <shell_fprintf>
		err = -EINVAL;
    5ed4:	f06f 0015 	mvn.w	r0, #21
		break;
	}

	return err;
    5ed8:	e002      	b.n	5ee0 <memory_write+0x24>
		sys_write8(value, addr);
    5eda:	b2db      	uxtb	r3, r3
	*(volatile uint8_t *)addr = data;
    5edc:	700b      	strb	r3, [r1, #0]
	int err = 0;
    5ede:	2000      	movs	r0, #0
}
    5ee0:	bd08      	pop	{r3, pc}
		sys_write16(value, addr);
    5ee2:	b29b      	uxth	r3, r3
	*(volatile uint16_t *)addr = data;
    5ee4:	800b      	strh	r3, [r1, #0]
	int err = 0;
    5ee6:	2000      	movs	r0, #0
}
    5ee8:	e7fa      	b.n	5ee0 <memory_write+0x24>
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
    5eea:	600b      	str	r3, [r1, #0]
    5eec:	2000      	movs	r0, #0
}
    5eee:	e7f7      	b.n	5ee0 <memory_write+0x24>
    5ef0:	00016a2c 	.word	0x00016a2c

00005ef4 <cmd_devmem>:
{
	mem_addr_t phys_addr, addr;
	uint32_t value = 0;
	uint8_t width;

	if (argc < 2 || argc > 4) {
    5ef4:	1e8b      	subs	r3, r1, #2
    5ef6:	2b02      	cmp	r3, #2
    5ef8:	d83a      	bhi.n	5f70 <cmd_devmem+0x7c>
{
    5efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5efe:	b082      	sub	sp, #8
    5f00:	4605      	mov	r5, r0
    5f02:	460c      	mov	r4, r1
    5f04:	4616      	mov	r6, r2
		return -EINVAL;
	}

	phys_addr = strtoul(argv[1], NULL, 16);
    5f06:	2210      	movs	r2, #16
    5f08:	2100      	movs	r1, #0
    5f0a:	6870      	ldr	r0, [r6, #4]
    5f0c:	f00c fe0d 	bl	12b2a <strtoul>
    5f10:	4680      	mov	r8, r0
	shell_print(sh, "Mapped 0x%lx to 0x%lx\n", phys_addr, addr);
#else
	addr = phys_addr;
#endif /* defined(CONFIG_MMU) || defined(CONFIG_PCIE) */

	if (argc < 3) {
    5f12:	2c02      	cmp	r4, #2
    5f14:	d81f      	bhi.n	5f56 <cmd_devmem+0x62>
		width = 32;
    5f16:	2720      	movs	r7, #32
	} else {
		width = strtoul(argv[2], NULL, 10);
	}

	shell_fprintf(sh, SHELL_NORMAL, "Using data width %d\n", width);
    5f18:	463b      	mov	r3, r7
    5f1a:	4a17      	ldr	r2, [pc, #92]	; (5f78 <cmd_devmem+0x84>)
    5f1c:	2108      	movs	r1, #8
    5f1e:	4628      	mov	r0, r5
    5f20:	f00b fb84 	bl	1162c <shell_fprintf>

	if (argc <= 3) {
    5f24:	2c03      	cmp	r4, #3
    5f26:	d91d      	bls.n	5f64 <cmd_devmem+0x70>

	/* If there are more then 3 arguments, that means we are going to write
	 * this value at the address provided
	 */

	value = strtoul(argv[3], NULL, 16);
    5f28:	2210      	movs	r2, #16
    5f2a:	2100      	movs	r1, #0
    5f2c:	68f0      	ldr	r0, [r6, #12]
    5f2e:	f00c fdfc 	bl	12b2a <strtoul>
    5f32:	4604      	mov	r4, r0

	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
    5f34:	4603      	mov	r3, r0
    5f36:	4a11      	ldr	r2, [pc, #68]	; (5f7c <cmd_devmem+0x88>)
    5f38:	2108      	movs	r1, #8
    5f3a:	4628      	mov	r0, r5
    5f3c:	f00b fb76 	bl	1162c <shell_fprintf>

	return memory_write(sh, addr, width, value);
    5f40:	9400      	str	r4, [sp, #0]
    5f42:	2300      	movs	r3, #0
    5f44:	9301      	str	r3, [sp, #4]
    5f46:	463a      	mov	r2, r7
    5f48:	4641      	mov	r1, r8
    5f4a:	4628      	mov	r0, r5
    5f4c:	f7ff ffb6 	bl	5ebc <memory_write>
}
    5f50:	b002      	add	sp, #8
    5f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		width = strtoul(argv[2], NULL, 10);
    5f56:	220a      	movs	r2, #10
    5f58:	2100      	movs	r1, #0
    5f5a:	68b0      	ldr	r0, [r6, #8]
    5f5c:	f00c fde5 	bl	12b2a <strtoul>
    5f60:	b2c7      	uxtb	r7, r0
    5f62:	e7d9      	b.n	5f18 <cmd_devmem+0x24>
		return memory_read(sh, addr, width);
    5f64:	463a      	mov	r2, r7
    5f66:	4641      	mov	r1, r8
    5f68:	4628      	mov	r0, r5
    5f6a:	f7ff ff87 	bl	5e7c <memory_read>
    5f6e:	e7ef      	b.n	5f50 <cmd_devmem+0x5c>
		return -EINVAL;
    5f70:	f06f 0015 	mvn.w	r0, #21
}
    5f74:	4770      	bx	lr
    5f76:	bf00      	nop
    5f78:	00016a58 	.word	0x00016a58
    5f7c:	00016a70 	.word	0x00016a70

00005f80 <set_bypass>:
{
    5f80:	b538      	push	{r3, r4, r5, lr}
    5f82:	4604      	mov	r4, r0
	if (bypass && in_use) {
    5f84:	460d      	mov	r5, r1
    5f86:	b111      	cbz	r1, 5f8e <set_bypass+0xe>
    5f88:	4b0f      	ldr	r3, [pc, #60]	; (5fc8 <set_bypass+0x48>)
    5f8a:	781b      	ldrb	r3, [r3, #0]
    5f8c:	b95b      	cbnz	r3, 5fa6 <set_bypass+0x26>
	in_use = !in_use;
    5f8e:	4a0e      	ldr	r2, [pc, #56]	; (5fc8 <set_bypass+0x48>)
    5f90:	7813      	ldrb	r3, [r2, #0]
    5f92:	f083 0301 	eor.w	r3, r3, #1
    5f96:	7013      	strb	r3, [r2, #0]
	if (in_use) {
    5f98:	b963      	cbnz	r3, 5fb4 <set_bypass+0x34>
	shell_set_bypass(sh, bypass);
    5f9a:	4629      	mov	r1, r5
    5f9c:	4620      	mov	r0, r4
    5f9e:	f00b fb67 	bl	11670 <shell_set_bypass>
	return 0;
    5fa2:	2000      	movs	r0, #0
}
    5fa4:	bd38      	pop	{r3, r4, r5, pc}
		shell_error(sh, "devmem load supports setting bypass on a single instance.");
    5fa6:	4a09      	ldr	r2, [pc, #36]	; (5fcc <set_bypass+0x4c>)
    5fa8:	2101      	movs	r1, #1
    5faa:	f00b fb3f 	bl	1162c <shell_fprintf>
		return -EBUSY;
    5fae:	f06f 000f 	mvn.w	r0, #15
    5fb2:	e7f7      	b.n	5fa4 <set_bypass+0x24>
		shell_print(sh, "Loading...\npress ctrl-x ctrl-q to escape");
    5fb4:	4a06      	ldr	r2, [pc, #24]	; (5fd0 <set_bypass+0x50>)
    5fb6:	2108      	movs	r1, #8
    5fb8:	4620      	mov	r0, r4
    5fba:	f00b fb37 	bl	1162c <shell_fprintf>
		in_use = true;
    5fbe:	4b02      	ldr	r3, [pc, #8]	; (5fc8 <set_bypass+0x48>)
    5fc0:	2201      	movs	r2, #1
    5fc2:	701a      	strb	r2, [r3, #0]
    5fc4:	e7e9      	b.n	5f9a <set_bypass+0x1a>
    5fc6:	bf00      	nop
    5fc8:	20003cb4 	.word	0x20003cb4
    5fcc:	00016a84 	.word	0x00016a84
    5fd0:	00016ac0 	.word	0x00016ac0

00005fd4 <cmd_load>:
{
    5fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5fd6:	4607      	mov	r7, r0
    5fd8:	460e      	mov	r6, r1
    5fda:	4615      	mov	r5, r2
	littleendian = false;
    5fdc:	2300      	movs	r3, #0
    5fde:	4a25      	ldr	r2, [pc, #148]	; (6074 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x74>)
    5fe0:	7013      	strb	r3, [r2, #0]
	chunk_element = 0;
    5fe2:	4a25      	ldr	r2, [pc, #148]	; (6078 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x78>)
    5fe4:	6013      	str	r3, [r2, #0]
	sum = 0;
    5fe6:	4a25      	ldr	r2, [pc, #148]	; (607c <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x7c>)
    5fe8:	6013      	str	r3, [r2, #0]
	while (argc >= 2) {
    5fea:	e00c      	b.n	6006 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x6>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    5fec:	2300      	movs	r3, #0
    5fee:	441c      	add	r4, r3
		if (!strncmp(arg, "-e", 2)) {
    5ff0:	2202      	movs	r2, #2
    5ff2:	4923      	ldr	r1, [pc, #140]	; (6080 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x80>)
    5ff4:	4620      	mov	r0, r4
    5ff6:	f00c fe90 	bl	12d1a <strncmp>
    5ffa:	b9a0      	cbnz	r0, 6026 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x26>
			littleendian = true;
    5ffc:	4b1d      	ldr	r3, [pc, #116]	; (6074 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x74>)
    5ffe:	2201      	movs	r2, #1
    6000:	701a      	strb	r2, [r3, #0]
		argv++;
    6002:	3504      	adds	r5, #4
		argc--;
    6004:	3e01      	subs	r6, #1
	while (argc >= 2) {
    6006:	2e01      	cmp	r6, #1
    6008:	d91f      	bls.n	604a <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x4a>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    600a:	686c      	ldr	r4, [r5, #4]
    600c:	2202      	movs	r2, #2
    600e:	491d      	ldr	r1, [pc, #116]	; (6084 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x84>)
    6010:	4620      	mov	r0, r4
    6012:	f00c fe82 	bl	12d1a <strncmp>
    6016:	2800      	cmp	r0, #0
    6018:	d1e8      	bne.n	5fec <cmd_load+0x18>
    601a:	686b      	ldr	r3, [r5, #4]
    601c:	789b      	ldrb	r3, [r3, #2]
    601e:	2b00      	cmp	r3, #0
    6020:	d0e5      	beq.n	5fee <cmd_load+0x1a>
    6022:	2301      	movs	r3, #1
    6024:	e7e3      	b.n	5fee <cmd_load+0x1a>
		} else if (!strcmp(arg, "--")) {
    6026:	4917      	ldr	r1, [pc, #92]	; (6084 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x84>)
    6028:	4620      	mov	r0, r4
    602a:	f00c fe6b 	bl	12d04 <strcmp>
    602e:	b158      	cbz	r0, 6048 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x48>
		} else if (arg[0] == '-' && arg[1]) {
    6030:	7823      	ldrb	r3, [r4, #0]
    6032:	2b2d      	cmp	r3, #45	; 0x2d
    6034:	d109      	bne.n	604a <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x4a>
    6036:	7863      	ldrb	r3, [r4, #1]
    6038:	b13b      	cbz	r3, 604a <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x4a>
			shell_print(sh, "Unknown option \"%s\"", arg);
    603a:	4623      	mov	r3, r4
    603c:	4a12      	ldr	r2, [pc, #72]	; (6088 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x88>)
    603e:	2108      	movs	r1, #8
    6040:	4638      	mov	r0, r7
    6042:	f00b faf3 	bl	1162c <shell_fprintf>
    6046:	e7dc      	b.n	6002 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x2>
			argv++;
    6048:	3504      	adds	r5, #4
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
    604a:	2200      	movs	r2, #0
    604c:	4611      	mov	r1, r2
    604e:	6868      	ldr	r0, [r5, #4]
    6050:	f00c fcdf 	bl	12a12 <strtol>
    6054:	4b0d      	ldr	r3, [pc, #52]	; (608c <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x8c>)
    6056:	6018      	str	r0, [r3, #0]
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    6058:	2200      	movs	r2, #0
    605a:	4611      	mov	r1, r2
    605c:	6868      	ldr	r0, [r5, #4]
    605e:	f00c fcd8 	bl	12a12 <strtol>
    6062:	4b0b      	ldr	r3, [pc, #44]	; (6090 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x90>)
    6064:	6018      	str	r0, [r3, #0]
	set_bypass(sh, bypass_cb);
    6066:	490b      	ldr	r1, [pc, #44]	; (6094 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x94>)
    6068:	4638      	mov	r0, r7
    606a:	f7ff ff89 	bl	5f80 <set_bypass>
}
    606e:	2000      	movs	r0, #0
    6070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6072:	bf00      	nop
    6074:	20003cb6 	.word	0x20003cb6
    6078:	200011e0 	.word	0x200011e0
    607c:	200011e4 	.word	0x200011e4
    6080:	00016af0 	.word	0x00016af0
    6084:	00016aec 	.word	0x00016aec
    6088:	00016af4 	.word	0x00016af4
    608c:	200011ec 	.word	0x200011ec
    6090:	200011e8 	.word	0x200011e8
    6094:	00006099 	.word	0x00006099

00006098 <bypass_cb>:
{
    6098:	b538      	push	{r3, r4, r5, lr}
    609a:	4605      	mov	r5, r0
	if (tail == CHAR_CAN && recv[0] == CHAR_DC1) {
    609c:	4b55      	ldr	r3, [pc, #340]	; (61f4 <bypass_cb+0x15c>)
    609e:	781b      	ldrb	r3, [r3, #0]
    60a0:	2b18      	cmp	r3, #24
    60a2:	d001      	beq.n	60a8 <bypass_cb+0x10>
    60a4:	2300      	movs	r3, #0
    60a6:	e005      	b.n	60b4 <bypass_cb+0x1c>
    60a8:	780b      	ldrb	r3, [r1, #0]
    60aa:	2b11      	cmp	r3, #17
    60ac:	d032      	beq.n	6114 <bypass_cb+0x7c>
    60ae:	2300      	movs	r3, #0
    60b0:	e000      	b.n	60b4 <bypass_cb+0x1c>
		for (int i = 0; i < (len - 1); i++) {
    60b2:	3301      	adds	r3, #1
    60b4:	f102 3cff 	add.w	ip, r2, #4294967295
    60b8:	469e      	mov	lr, r3
    60ba:	459c      	cmp	ip, r3
    60bc:	d909      	bls.n	60d2 <bypass_cb+0x3a>
			if (recv[i] == CHAR_CAN && recv[i + 1] == CHAR_DC1) {
    60be:	5ccc      	ldrb	r4, [r1, r3]
    60c0:	2c18      	cmp	r4, #24
    60c2:	d1f6      	bne.n	60b2 <bypass_cb+0x1a>
    60c4:	448e      	add	lr, r1
    60c6:	f89e 0001 	ldrb.w	r0, [lr, #1]
    60ca:	2811      	cmp	r0, #17
    60cc:	d1f1      	bne.n	60b2 <bypass_cb+0x1a>
				escape = true;
    60ce:	2301      	movs	r3, #1
    60d0:	e000      	b.n	60d4 <bypass_cb+0x3c>
	bool escape = false;
    60d2:	2300      	movs	r3, #0
	if (escape) {
    60d4:	b9f3      	cbnz	r3, 6114 <bypass_cb+0x7c>
	tail = recv[len - 1];
    60d6:	f811 200c 	ldrb.w	r2, [r1, ip]
    60da:	4b46      	ldr	r3, [pc, #280]	; (61f4 <bypass_cb+0x15c>)
    60dc:	701a      	strb	r2, [r3, #0]
	if (is_ascii(*recv)) {
    60de:	780a      	ldrb	r2, [r1, #0]
	return (data >= 0x30 && data <= 0x39) || (data >= 0x61 && data <= 0x66) ||
    60e0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    60e4:	b2db      	uxtb	r3, r3
    60e6:	2b09      	cmp	r3, #9
    60e8:	d909      	bls.n	60fe <bypass_cb+0x66>
    60ea:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    60ee:	b2db      	uxtb	r3, r3
    60f0:	2b05      	cmp	r3, #5
    60f2:	d904      	bls.n	60fe <bypass_cb+0x66>
	       (data >= 0x41 && data <= 0x46);
    60f4:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
    60f8:	b2db      	uxtb	r3, r3
	return (data >= 0x30 && data <= 0x39) || (data >= 0x61 && data <= 0x66) ||
    60fa:	2b05      	cmp	r3, #5
    60fc:	d805      	bhi.n	610a <bypass_cb+0x72>
		chunk[chunk_element] = *recv;
    60fe:	493e      	ldr	r1, [pc, #248]	; (61f8 <bypass_cb+0x160>)
    6100:	680b      	ldr	r3, [r1, #0]
    6102:	483e      	ldr	r0, [pc, #248]	; (61fc <bypass_cb+0x164>)
    6104:	54c2      	strb	r2, [r0, r3]
		chunk_element++;
    6106:	3301      	adds	r3, #1
    6108:	600b      	str	r3, [r1, #0]
	if (chunk_element == 2) {
    610a:	4b3b      	ldr	r3, [pc, #236]	; (61f8 <bypass_cb+0x160>)
    610c:	681b      	ldr	r3, [r3, #0]
    610e:	2b02      	cmp	r3, #2
    6110:	d05e      	beq.n	61d0 <bypass_cb+0x138>
}
    6112:	bd38      	pop	{r3, r4, r5, pc}
		shell_print(sh, "Number of bytes read: %d", sum);
    6114:	4b3a      	ldr	r3, [pc, #232]	; (6200 <bypass_cb+0x168>)
    6116:	681b      	ldr	r3, [r3, #0]
    6118:	4a3a      	ldr	r2, [pc, #232]	; (6204 <bypass_cb+0x16c>)
    611a:	2108      	movs	r1, #8
    611c:	4628      	mov	r0, r5
    611e:	f00b fa85 	bl	1162c <shell_fprintf>
		set_bypass(sh, NULL);
    6122:	2100      	movs	r1, #0
    6124:	4628      	mov	r0, r5
    6126:	f7ff ff2b 	bl	5f80 <set_bypass>
		if (!littleendian) {
    612a:	4b37      	ldr	r3, [pc, #220]	; (6208 <bypass_cb+0x170>)
    612c:	781b      	ldrb	r3, [r3, #0]
    612e:	2b00      	cmp	r3, #0
    6130:	d1ef      	bne.n	6112 <bypass_cb+0x7a>
    6132:	e013      	b.n	615c <bypass_cb+0xc4>
				*data = __bswap_32(*data);
    6134:	4d35      	ldr	r5, [pc, #212]	; (620c <bypass_cb+0x174>)
    6136:	682a      	ldr	r2, [r5, #0]
    6138:	6810      	ldr	r0, [r2, #0]
    613a:	0a03      	lsrs	r3, r0, #8
    613c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    6140:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
    6144:	0204      	lsls	r4, r0, #8
    6146:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
    614a:	4323      	orrs	r3, r4
    614c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
    6150:	f842 3b04 	str.w	r3, [r2], #4
				data++;
    6154:	602a      	str	r2, [r5, #0]
				sum = sum - 4;
    6156:	3904      	subs	r1, #4
    6158:	4b29      	ldr	r3, [pc, #164]	; (6200 <bypass_cb+0x168>)
    615a:	6019      	str	r1, [r3, #0]
			while (sum > 4) {
    615c:	4b28      	ldr	r3, [pc, #160]	; (6200 <bypass_cb+0x168>)
    615e:	6819      	ldr	r1, [r3, #0]
    6160:	2904      	cmp	r1, #4
    6162:	dce7      	bgt.n	6134 <bypass_cb+0x9c>
			if (sum % 4 == 0) {
    6164:	f011 0f03 	tst.w	r1, #3
    6168:	d10f      	bne.n	618a <bypass_cb+0xf2>
				*data = __bswap_32(*data);
    616a:	4b28      	ldr	r3, [pc, #160]	; (620c <bypass_cb+0x174>)
    616c:	6818      	ldr	r0, [r3, #0]
    616e:	6802      	ldr	r2, [r0, #0]
    6170:	0a13      	lsrs	r3, r2, #8
    6172:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    6176:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    617a:	0211      	lsls	r1, r2, #8
    617c:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    6180:	430b      	orrs	r3, r1
    6182:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    6186:	6003      	str	r3, [r0, #0]
    6188:	e7c3      	b.n	6112 <bypass_cb+0x7a>
			} else if (sum % 4 == 2) {
    618a:	424b      	negs	r3, r1
    618c:	f001 0103 	and.w	r1, r1, #3
    6190:	f003 0303 	and.w	r3, r3, #3
    6194:	bf58      	it	pl
    6196:	4259      	negpl	r1, r3
    6198:	2902      	cmp	r1, #2
    619a:	d00f      	beq.n	61bc <bypass_cb+0x124>
			} else if (sum % 4 == 3) {
    619c:	2903      	cmp	r1, #3
    619e:	d1b8      	bne.n	6112 <bypass_cb+0x7a>
				*data = __bswap_24(*data);
    61a0:	4b1a      	ldr	r3, [pc, #104]	; (620c <bypass_cb+0x174>)
    61a2:	6819      	ldr	r1, [r3, #0]
    61a4:	680b      	ldr	r3, [r1, #0]
    61a6:	f3c3 4207 	ubfx	r2, r3, #16, #8
    61aa:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
    61ae:	4302      	orrs	r2, r0
    61b0:	041b      	lsls	r3, r3, #16
    61b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    61b6:	4313      	orrs	r3, r2
    61b8:	600b      	str	r3, [r1, #0]
		return;
    61ba:	e7aa      	b.n	6112 <bypass_cb+0x7a>
				*data = __bswap_16(*data);
    61bc:	4b13      	ldr	r3, [pc, #76]	; (620c <bypass_cb+0x174>)
    61be:	6819      	ldr	r1, [r3, #0]
    61c0:	680b      	ldr	r3, [r1, #0]
    61c2:	f3c3 2207 	ubfx	r2, r3, #8, #8
    61c6:	021b      	lsls	r3, r3, #8
    61c8:	b29b      	uxth	r3, r3
    61ca:	4313      	orrs	r3, r2
    61cc:	600b      	str	r3, [r1, #0]
    61ce:	e7a0      	b.n	6112 <bypass_cb+0x7a>
		byte = (uint8_t)strtoul(chunk, NULL, 16);
    61d0:	2210      	movs	r2, #16
    61d2:	2100      	movs	r1, #0
    61d4:	4809      	ldr	r0, [pc, #36]	; (61fc <bypass_cb+0x164>)
    61d6:	f00c fca8 	bl	12b2a <strtoul>
		*bytes = byte;
    61da:	4a0d      	ldr	r2, [pc, #52]	; (6210 <bypass_cb+0x178>)
    61dc:	6813      	ldr	r3, [r2, #0]
    61de:	f803 0b01 	strb.w	r0, [r3], #1
		bytes++;
    61e2:	6013      	str	r3, [r2, #0]
		sum++;
    61e4:	4a06      	ldr	r2, [pc, #24]	; (6200 <bypass_cb+0x168>)
    61e6:	6813      	ldr	r3, [r2, #0]
    61e8:	3301      	adds	r3, #1
    61ea:	6013      	str	r3, [r2, #0]
		chunk_element = 0;
    61ec:	4b02      	ldr	r3, [pc, #8]	; (61f8 <bypass_cb+0x160>)
    61ee:	2200      	movs	r2, #0
    61f0:	601a      	str	r2, [r3, #0]
    61f2:	e78e      	b.n	6112 <bypass_cb+0x7a>
    61f4:	20003cb5 	.word	0x20003cb5
    61f8:	200011e0 	.word	0x200011e0
    61fc:	200011dc 	.word	0x200011dc
    6200:	200011e4 	.word	0x200011e4
    6204:	00016b0c 	.word	0x00016b0c
    6208:	20003cb6 	.word	0x20003cb6
    620c:	200011e8 	.word	0x200011e8
    6210:	200011ec 	.word	0x200011ec

00006214 <memory_dump>:
{
    6214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6218:	b085      	sub	sp, #20
    621a:	4680      	mov	r8, r0
    621c:	460f      	mov	r7, r1
    621e:	4615      	mov	r5, r2
    6220:	461c      	mov	r4, r3
	const size_t vsize = width / BITS_PER_BYTE;
    6222:	08de      	lsrs	r6, r3, #3
	for (; size > 0;
    6224:	2d00      	cmp	r5, #0
    6226:	d05d      	beq.n	62e4 <memory_dump+0xd0>
		for (data_offset = 0;
    6228:	f04f 0c00 	mov.w	ip, #0
    622c:	e008      	b.n	6240 <memory_dump+0x2c>
	return *(volatile uint8_t *)addr;
    622e:	f81c 3007 	ldrb.w	r3, [ip, r7]
				data[data_offset] = value;
    6232:	f10c 0110 	add.w	r1, ip, #16
    6236:	eb0d 0c01 	add.w	ip, sp, r1
    623a:	f80c 3c10 	strb.w	r3, [ip, #-16]
{
    623e:	4694      	mov	ip, r2
		     size >= vsize && data_offset + vsize <= SHELL_HEXDUMP_BYTES_IN_LINE;
    6240:	42ae      	cmp	r6, r5
    6242:	d840      	bhi.n	62c6 <memory_dump+0xb2>
    6244:	eb06 020c 	add.w	r2, r6, ip
    6248:	2a10      	cmp	r2, #16
    624a:	d83c      	bhi.n	62c6 <memory_dump+0xb2>
			switch (width) {
    624c:	2c10      	cmp	r4, #16
    624e:	d00d      	beq.n	626c <memory_dump+0x58>
    6250:	2c20      	cmp	r4, #32
    6252:	d01b      	beq.n	628c <memory_dump+0x78>
    6254:	2c08      	cmp	r4, #8
    6256:	d0ea      	beq.n	622e <memory_dump+0x1a>
				shell_fprintf(sh, SHELL_NORMAL, "Incorrect data width\n");
    6258:	4a23      	ldr	r2, [pc, #140]	; (62e8 <memory_dump+0xd4>)
    625a:	2108      	movs	r1, #8
    625c:	4640      	mov	r0, r8
    625e:	f00b f9e5 	bl	1162c <shell_fprintf>
				return -EINVAL;
    6262:	f06f 0015 	mvn.w	r0, #21
}
    6266:	b005      	add	sp, #20
    6268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return *(volatile uint16_t *)addr;
    626c:	f83c 3007 	ldrh.w	r3, [ip, r7]
				data[data_offset] = (uint8_t)value;
    6270:	f10c 0110 	add.w	r1, ip, #16
    6274:	4469      	add	r1, sp
    6276:	f801 3c10 	strb.w	r3, [r1, #-16]
				data[data_offset + 1] = (uint8_t)value;
    627a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    627e:	f10c 0111 	add.w	r1, ip, #17
    6282:	eb0d 0c01 	add.w	ip, sp, r1
    6286:	f80c 3c10 	strb.w	r3, [ip, #-16]
				break;
    628a:	e7d8      	b.n	623e <memory_dump+0x2a>
	return *(volatile uint32_t *)addr;
    628c:	f85c 3007 	ldr.w	r3, [ip, r7]
				data[data_offset] = (uint8_t)value;
    6290:	f10c 0110 	add.w	r1, ip, #16
    6294:	4469      	add	r1, sp
    6296:	f801 3c10 	strb.w	r3, [r1, #-16]
				data[data_offset + 1] = (uint8_t)value;
    629a:	f3c3 2007 	ubfx	r0, r3, #8, #8
    629e:	f10c 0111 	add.w	r1, ip, #17
    62a2:	4469      	add	r1, sp
    62a4:	f801 0c10 	strb.w	r0, [r1, #-16]
				data[data_offset + 2] = (uint8_t)value;
    62a8:	f3c3 4007 	ubfx	r0, r3, #16, #8
    62ac:	f10c 0112 	add.w	r1, ip, #18
    62b0:	4469      	add	r1, sp
    62b2:	f801 0c10 	strb.w	r0, [r1, #-16]
				data[data_offset + 3] = (uint8_t)value;
    62b6:	0e1b      	lsrs	r3, r3, #24
    62b8:	f10c 0113 	add.w	r1, ip, #19
    62bc:	eb0d 0c01 	add.w	ip, sp, r1
    62c0:	f80c 3c10 	strb.w	r3, [ip, #-16]
				break;
    62c4:	e7bb      	b.n	623e <memory_dump+0x2a>
		shell_hexdump_line(sh, addr, data, MIN(size, SHELL_HEXDUMP_BYTES_IN_LINE));
    62c6:	46a9      	mov	r9, r5
    62c8:	2d10      	cmp	r5, #16
    62ca:	bf28      	it	cs
    62cc:	f04f 0910 	movcs.w	r9, #16
    62d0:	464b      	mov	r3, r9
    62d2:	466a      	mov	r2, sp
    62d4:	4639      	mov	r1, r7
    62d6:	4640      	mov	r0, r8
    62d8:	f000 ff06 	bl	70e8 <shell_hexdump_line>
	     addr += SHELL_HEXDUMP_BYTES_IN_LINE, size -= MIN(size, SHELL_HEXDUMP_BYTES_IN_LINE)) {
    62dc:	3710      	adds	r7, #16
    62de:	eba5 0509 	sub.w	r5, r5, r9
    62e2:	e79f      	b.n	6224 <memory_dump+0x10>
	return 0;
    62e4:	2000      	movs	r0, #0
    62e6:	e7be      	b.n	6266 <memory_dump+0x52>
    62e8:	00016a2c 	.word	0x00016a2c

000062ec <cmd_dump>:
{
    62ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    62f0:	4606      	mov	r6, r0
    62f2:	460d      	mov	r5, r1
    62f4:	4614      	mov	r4, r2
	optind = 1;
    62f6:	4b40      	ldr	r3, [pc, #256]	; (63f8 <cmd_dump+0x10c>)
    62f8:	2201      	movs	r2, #1
    62fa:	601a      	str	r2, [r3, #0]
	mem_addr_t addr = -1;
    62fc:	f04f 37ff 	mov.w	r7, #4294967295
	size_t width = 32;
    6300:	f04f 0920 	mov.w	r9, #32
	size_t size = -1;
    6304:	46b8      	mov	r8, r7
	while ((rv = getopt(argc, argv, "a:s:w:")) != -1) {
    6306:	4a3d      	ldr	r2, [pc, #244]	; (63fc <cmd_dump+0x110>)
    6308:	4621      	mov	r1, r4
    630a:	4628      	mov	r0, r5
    630c:	f7fb fd58 	bl	1dc0 <getopt>
    6310:	f1b0 3fff 	cmp.w	r0, #4294967295
    6314:	d051      	beq.n	63ba <cmd_dump+0xce>
		switch (rv) {
    6316:	2873      	cmp	r0, #115	; 0x73
    6318:	d01f      	beq.n	635a <cmd_dump+0x6e>
    631a:	2877      	cmp	r0, #119	; 0x77
    631c:	d035      	beq.n	638a <cmd_dump+0x9e>
    631e:	2861      	cmp	r0, #97	; 0x61
    6320:	d003      	beq.n	632a <cmd_dump+0x3e>
    6322:	f06f 0015 	mvn.w	r0, #21
}
    6326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			addr = (mem_addr_t)strtoul(optarg, NULL, 16);
    632a:	2210      	movs	r2, #16
    632c:	2100      	movs	r1, #0
    632e:	4b34      	ldr	r3, [pc, #208]	; (6400 <cmd_dump+0x114>)
    6330:	6818      	ldr	r0, [r3, #0]
    6332:	f00c fbfa 	bl	12b2a <strtoul>
			if (addr == 0 && errno == EINVAL) {
    6336:	4607      	mov	r7, r0
    6338:	2800      	cmp	r0, #0
    633a:	d1e4      	bne.n	6306 <cmd_dump+0x1a>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    633c:	f006 fdd0 	bl	cee0 <z_impl_z_errno>
    6340:	6803      	ldr	r3, [r0, #0]
    6342:	2b16      	cmp	r3, #22
    6344:	d1df      	bne.n	6306 <cmd_dump+0x1a>
				shell_error(sh, "invalid addr '%s'", optarg);
    6346:	4b2e      	ldr	r3, [pc, #184]	; (6400 <cmd_dump+0x114>)
    6348:	681b      	ldr	r3, [r3, #0]
    634a:	4a2e      	ldr	r2, [pc, #184]	; (6404 <cmd_dump+0x118>)
    634c:	2101      	movs	r1, #1
    634e:	4630      	mov	r0, r6
    6350:	f00b f96c 	bl	1162c <shell_fprintf>
				return -EINVAL;
    6354:	f06f 0015 	mvn.w	r0, #21
    6358:	e7e5      	b.n	6326 <cmd_dump+0x3a>
			size = (size_t)strtoul(optarg, NULL, 0);
    635a:	2200      	movs	r2, #0
    635c:	4611      	mov	r1, r2
    635e:	4b28      	ldr	r3, [pc, #160]	; (6400 <cmd_dump+0x114>)
    6360:	6818      	ldr	r0, [r3, #0]
    6362:	f00c fbe2 	bl	12b2a <strtoul>
			if (size == 0 && errno == EINVAL) {
    6366:	4680      	mov	r8, r0
    6368:	2800      	cmp	r0, #0
    636a:	d1cc      	bne.n	6306 <cmd_dump+0x1a>
    636c:	f006 fdb8 	bl	cee0 <z_impl_z_errno>
    6370:	6803      	ldr	r3, [r0, #0]
    6372:	2b16      	cmp	r3, #22
    6374:	d1c7      	bne.n	6306 <cmd_dump+0x1a>
				shell_error(sh, "invalid size '%s'", optarg);
    6376:	4b22      	ldr	r3, [pc, #136]	; (6400 <cmd_dump+0x114>)
    6378:	681b      	ldr	r3, [r3, #0]
    637a:	4a23      	ldr	r2, [pc, #140]	; (6408 <cmd_dump+0x11c>)
    637c:	2101      	movs	r1, #1
    637e:	4630      	mov	r0, r6
    6380:	f00b f954 	bl	1162c <shell_fprintf>
				return -EINVAL;
    6384:	f06f 0015 	mvn.w	r0, #21
    6388:	e7cd      	b.n	6326 <cmd_dump+0x3a>
			width = (size_t)strtoul(optarg, NULL, 0);
    638a:	2200      	movs	r2, #0
    638c:	4611      	mov	r1, r2
    638e:	4b1c      	ldr	r3, [pc, #112]	; (6400 <cmd_dump+0x114>)
    6390:	6818      	ldr	r0, [r3, #0]
    6392:	f00c fbca 	bl	12b2a <strtoul>
			if (width == 0 && errno == EINVAL) {
    6396:	4681      	mov	r9, r0
    6398:	2800      	cmp	r0, #0
    639a:	d1b4      	bne.n	6306 <cmd_dump+0x1a>
    639c:	f006 fda0 	bl	cee0 <z_impl_z_errno>
    63a0:	6803      	ldr	r3, [r0, #0]
    63a2:	2b16      	cmp	r3, #22
    63a4:	d1af      	bne.n	6306 <cmd_dump+0x1a>
				shell_error(sh, "invalid width '%s'", optarg);
    63a6:	4b16      	ldr	r3, [pc, #88]	; (6400 <cmd_dump+0x114>)
    63a8:	681b      	ldr	r3, [r3, #0]
    63aa:	4a18      	ldr	r2, [pc, #96]	; (640c <cmd_dump+0x120>)
    63ac:	2101      	movs	r1, #1
    63ae:	4630      	mov	r0, r6
    63b0:	f00b f93c 	bl	1162c <shell_fprintf>
				return -EINVAL;
    63b4:	f06f 0015 	mvn.w	r0, #21
    63b8:	e7b5      	b.n	6326 <cmd_dump+0x3a>
	if (addr == -1) {
    63ba:	f1b7 3fff 	cmp.w	r7, #4294967295
    63be:	d00a      	beq.n	63d6 <cmd_dump+0xea>
	if (size == -1) {
    63c0:	f1b8 3fff 	cmp.w	r8, #4294967295
    63c4:	d00f      	beq.n	63e6 <cmd_dump+0xfa>
	return memory_dump(sh, addr, size, width);
    63c6:	fa5f f389 	uxtb.w	r3, r9
    63ca:	4642      	mov	r2, r8
    63cc:	4639      	mov	r1, r7
    63ce:	4630      	mov	r0, r6
    63d0:	f7ff ff20 	bl	6214 <memory_dump>
    63d4:	e7a7      	b.n	6326 <cmd_dump+0x3a>
		shell_error(sh, "'-a <address>' is mandatory");
    63d6:	4a0e      	ldr	r2, [pc, #56]	; (6410 <cmd_dump+0x124>)
    63d8:	2101      	movs	r1, #1
    63da:	4630      	mov	r0, r6
    63dc:	f00b f926 	bl	1162c <shell_fprintf>
		return -EINVAL;
    63e0:	f06f 0015 	mvn.w	r0, #21
    63e4:	e79f      	b.n	6326 <cmd_dump+0x3a>
		shell_error(sh, "'-s <size>' is mandatory");
    63e6:	4a0b      	ldr	r2, [pc, #44]	; (6414 <cmd_dump+0x128>)
    63e8:	2101      	movs	r1, #1
    63ea:	4630      	mov	r0, r6
    63ec:	f00b f91e 	bl	1162c <shell_fprintf>
		return -EINVAL;
    63f0:	f06f 0015 	mvn.w	r0, #21
    63f4:	e797      	b.n	6326 <cmd_dump+0x3a>
    63f6:	bf00      	nop
    63f8:	20000034 	.word	0x20000034
    63fc:	00016b64 	.word	0x00016b64
    6400:	20001144 	.word	0x20001144
    6404:	00016b28 	.word	0x00016b28
    6408:	00016b3c 	.word	0x00016b3c
    640c:	00016b50 	.word	0x00016b50
    6410:	00016b6c 	.word	0x00016b6c
    6414:	00016b8c 	.word	0x00016b8c

00006418 <uart_irq_init>:
	}
}
#endif /* CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN */

static void uart_irq_init(const struct shell_uart *sh_uart)
{
    6418:	b510      	push	{r4, lr}
    641a:	4602      	mov	r2, r0
#ifdef CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN
	const struct device *dev = sh_uart->ctrl_blk->dev;
    641c:	6803      	ldr	r3, [r0, #0]
    641e:	681c      	ldr	r4, [r3, #0]

	ring_buf_reset(sh_uart->tx_ringbuf);
    6420:	68c1      	ldr	r1, [r0, #12]
 *
 * Any value other than 0 makes sense only in validation testing context.
 */
static inline void ring_buf_internal_reset(struct ring_buf *buf, int32_t value)
{
	buf->put_head = buf->put_tail = buf->put_base = value;
    6422:	2300      	movs	r3, #0
    6424:	60cb      	str	r3, [r1, #12]
    6426:	608b      	str	r3, [r1, #8]
    6428:	604b      	str	r3, [r1, #4]
	buf->get_head = buf->get_tail = buf->get_base = value;
    642a:	618b      	str	r3, [r1, #24]
    642c:	614b      	str	r3, [r1, #20]
    642e:	610b      	str	r3, [r1, #16]
	ring_buf_reset(sh_uart->rx_ringbuf);
    6430:	6901      	ldr	r1, [r0, #16]
	buf->put_head = buf->put_tail = buf->put_base = value;
    6432:	60cb      	str	r3, [r1, #12]
    6434:	608b      	str	r3, [r1, #8]
    6436:	604b      	str	r3, [r1, #4]
	buf->get_head = buf->get_tail = buf->get_base = value;
    6438:	618b      	str	r3, [r1, #24]
    643a:	614b      	str	r3, [r1, #20]
    643c:	610b      	str	r3, [r1, #16]
	sh_uart->ctrl_blk->tx_busy = 0;
    643e:	6801      	ldr	r1, [r0, #0]
    6440:	60cb      	str	r3, [r1, #12]
	uart_irq_callback_user_data_set(dev, uart_callback, (void *)sh_uart);
    6442:	4904      	ldr	r1, [pc, #16]	; (6454 <uart_irq_init+0x3c>)
    6444:	4620      	mov	r0, r4
    6446:	f00a fbef 	bl	10c28 <uart_irq_callback_user_data_set>
	uart_irq_rx_enable(dev);
    644a:	4620      	mov	r0, r4
    644c:	f00a fc06 	bl	10c5c <uart_irq_rx_enable>
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_CHECK_DTR)) {
		k_timer_init(sh_uart->dtr_timer, dtr_timer_handler, NULL);
		k_timer_user_data_set(sh_uart->dtr_timer, (void *)sh_uart);
	}
#endif
}
    6450:	bd10      	pop	{r4, pc}
    6452:	bf00      	nop
    6454:	00010ddd 	.word	0x00010ddd

00006458 <uart_rx_handle>:
{
    6458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    645c:	b089      	sub	sp, #36	; 0x24
    645e:	4605      	mov	r5, r0
    6460:	460e      	mov	r6, r1
	bool new_data = false;
    6462:	f04f 0800 	mov.w	r8, #0
    6466:	e00b      	b.n	6480 <uart_rx_handle+0x28>
			rd_len = uart_fifo_read(dev, data, len);
    6468:	f06f 0457 	mvn.w	r4, #87	; 0x57
				new_data = true;
    646c:	f04f 0801 	mov.w	r8, #1
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    6470:	4621      	mov	r1, r4
    6472:	6930      	ldr	r0, [r6, #16]
    6474:	f009 f9c8 	bl	f808 <ring_buf_put_finish>
	} while (rd_len && (rd_len == len));
    6478:	2c00      	cmp	r4, #0
    647a:	d04a      	beq.n	6512 <uart_rx_handle+0xba>
    647c:	454c      	cmp	r4, r9
    647e:	d148      	bne.n	6512 <uart_rx_handle+0xba>
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
    6480:	6930      	ldr	r0, [r6, #16]
    6482:	69c2      	ldr	r2, [r0, #28]
    6484:	a901      	add	r1, sp, #4
    6486:	f009 f99e 	bl	f7c6 <ring_buf_put_claim>
		if (len > 0) {
    648a:	4681      	mov	r9, r0
    648c:	b168      	cbz	r0, 64aa <uart_rx_handle+0x52>
			rd_len = uart_fifo_read(dev, data, len);
    648e:	9901      	ldr	r1, [sp, #4]
 */
static inline int uart_fifo_read(const struct device *dev, uint8_t *rx_data,
				 const int size)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    6490:	68ab      	ldr	r3, [r5, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->fifo_read == NULL) {
    6492:	699b      	ldr	r3, [r3, #24]
    6494:	2b00      	cmp	r3, #0
    6496:	d0e7      	beq.n	6468 <uart_rx_handle+0x10>
		return -ENOSYS;
	}

	return api->fifo_read(dev, rx_data, size);
    6498:	4602      	mov	r2, r0
    649a:	4628      	mov	r0, r5
    649c:	4798      	blx	r3
			if (rd_len > 0) {
    649e:	4604      	mov	r4, r0
    64a0:	2800      	cmp	r0, #0
    64a2:	d0e5      	beq.n	6470 <uart_rx_handle+0x18>
				new_data = true;
    64a4:	f04f 0801 	mov.w	r8, #1
    64a8:	e7e2      	b.n	6470 <uart_rx_handle+0x18>
			LOG_WRN("RX ring buffer full.");
    64aa:	4b1f      	ldr	r3, [pc, #124]	; (6528 <uart_rx_handle+0xd0>)
    64ac:	681b      	ldr	r3, [r3, #0]
    64ae:	f013 0f06 	tst.w	r3, #6
    64b2:	d108      	bne.n	64c6 <uart_rx_handle+0x6e>
	const struct uart_driver_api *api =
    64b4:	68ab      	ldr	r3, [r5, #8]
	if (api->fifo_read == NULL) {
    64b6:	699b      	ldr	r3, [r3, #24]
    64b8:	b343      	cbz	r3, 650c <uart_rx_handle+0xb4>
	return api->fifo_read(dev, rx_data, size);
    64ba:	2201      	movs	r2, #1
    64bc:	4669      	mov	r1, sp
    64be:	4628      	mov	r0, r5
    64c0:	4798      	blx	r3
    64c2:	4604      	mov	r4, r0
    64c4:	e7d8      	b.n	6478 <uart_rx_handle+0x20>
    64c6:	4b19      	ldr	r3, [pc, #100]	; (652c <uart_rx_handle+0xd4>)
    64c8:	9307      	str	r3, [sp, #28]
    64ca:	2202      	movs	r2, #2
    64cc:	f88d 2000 	strb.w	r2, [sp]
    64d0:	2300      	movs	r3, #0
    64d2:	f88d 3001 	strb.w	r3, [sp, #1]
    64d6:	f88d 3002 	strb.w	r3, [sp, #2]
    64da:	f88d 3003 	strb.w	r3, [sp, #3]
    64de:	9900      	ldr	r1, [sp, #0]
    64e0:	9106      	str	r1, [sp, #24]
    64e2:	f363 0700 	bfi	r7, r3, #0, #1
    64e6:	f363 0741 	bfi	r7, r3, #1, #1
    64ea:	f363 0782 	bfi	r7, r3, #2, #1
    64ee:	f363 07c5 	bfi	r7, r3, #3, #3
    64f2:	f362 1788 	bfi	r7, r2, #6, #3
    64f6:	2208      	movs	r2, #8
    64f8:	f362 2753 	bfi	r7, r2, #9, #11
    64fc:	f363 571f 	bfi	r7, r3, #20, #12
    6500:	aa06      	add	r2, sp, #24
    6502:	4639      	mov	r1, r7
    6504:	4808      	ldr	r0, [pc, #32]	; (6528 <uart_rx_handle+0xd0>)
    6506:	f7fe fa09 	bl	491c <z_impl_z_log_msg_static_create>
    650a:	e7d3      	b.n	64b4 <uart_rx_handle+0x5c>
			rd_len = uart_fifo_read(dev, &dummy, 1);
    650c:	f06f 0457 	mvn.w	r4, #87	; 0x57
    6510:	e7b4      	b.n	647c <uart_rx_handle+0x24>
	if (new_data) {
    6512:	f1b8 0f00 	cmp.w	r8, #0
    6516:	d004      	beq.n	6522 <uart_rx_handle+0xca>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
    6518:	6833      	ldr	r3, [r6, #0]
    651a:	685a      	ldr	r2, [r3, #4]
    651c:	6899      	ldr	r1, [r3, #8]
    651e:	2000      	movs	r0, #0
    6520:	4790      	blx	r2
}
    6522:	b009      	add	sp, #36	; 0x24
    6524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6528:	20000308 	.word	0x20000308
    652c:	00016d48 	.word	0x00016d48

00006530 <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_TRANSPORT_SHELL */
};

static int enable_shell_uart(void)
{
    6530:	b500      	push	{lr}
    6532:	b083      	sub	sp, #12
    6534:	4809      	ldr	r0, [pc, #36]	; (655c <enable_shell_uart+0x2c>)
    6536:	f00e f87b 	bl	14630 <z_device_is_ready>
		(CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > LOG_LEVEL_DBG) ?
		CONFIG_LOG_MAX_LEVEL : CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL;
	static const struct shell_backend_config_flags cfg_flags =
					SHELL_DEFAULT_BACKEND_CONFIG_FLAGS;

	if (!device_is_ready(dev)) {
    653a:	b160      	cbz	r0, 6556 <enable_shell_uart+0x26>

	if (IS_ENABLED(CONFIG_MCUMGR_TRANSPORT_SHELL)) {
		smp_shell_init();
	}

	shell_init(&shell_uart, dev, cfg_flags, log_backend, level);
    653c:	2304      	movs	r3, #4
    653e:	9300      	str	r3, [sp, #0]
    6540:	2301      	movs	r3, #1
    6542:	4a07      	ldr	r2, [pc, #28]	; (6560 <enable_shell_uart+0x30>)
    6544:	6812      	ldr	r2, [r2, #0]
    6546:	4905      	ldr	r1, [pc, #20]	; (655c <enable_shell_uart+0x2c>)
    6548:	4806      	ldr	r0, [pc, #24]	; (6564 <enable_shell_uart+0x34>)
    654a:	f000 fce5 	bl	6f18 <shell_init>

	return 0;
    654e:	2000      	movs	r0, #0
}
    6550:	b003      	add	sp, #12
    6552:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENODEV;
    6556:	f06f 0012 	mvn.w	r0, #18
    655a:	e7f9      	b.n	6550 <enable_shell_uart+0x20>
    655c:	00015120 	.word	0x00015120
    6560:	00016d60 	.word	0x00016d60
    6564:	0001542c 	.word	0x0001542c

00006568 <state_set>:
	return 0;
}

static inline void state_set(const struct shell *sh, enum shell_state state)
{
	sh->ctx->state = state;
    6568:	6883      	ldr	r3, [r0, #8]
    656a:	7119      	strb	r1, [r3, #4]

	if (state == SHELL_STATE_ACTIVE && !sh->ctx->bypass) {
    656c:	2902      	cmp	r1, #2
    656e:	d000      	beq.n	6572 <state_set+0xa>
    6570:	4770      	bx	lr
{
    6572:	b510      	push	{r4, lr}
    6574:	4604      	mov	r4, r0
	if (state == SHELL_STATE_ACTIVE && !sh->ctx->bypass) {
    6576:	6883      	ldr	r3, [r0, #8]
    6578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    657a:	b103      	cbz	r3, 657e <state_set+0x16>
					SHELL_MSG_BACKEND_NOT_ACTIVE);
			z_flag_print_noinit_set(sh, false);
		}
		z_shell_print_prompt_and_cmd(sh);
	}
}
    657c:	bd10      	pop	{r4, pc}
		cmd_buffer_clear(sh);
    657e:	f00a fc47 	bl	10e10 <cmd_buffer_clear>
	sh->ctx->ctx.flags.last_nl = val;
}

static inline bool z_flag_print_noinit_get(const struct shell *sh)
{
	return sh->ctx->ctx.flags.print_noinit == 1;
    6582:	68a3      	ldr	r3, [r4, #8]
    6584:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (z_flag_print_noinit_get(sh)) {
    6588:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    658c:	d103      	bne.n	6596 <state_set+0x2e>
		z_shell_print_prompt_and_cmd(sh);
    658e:	4620      	mov	r0, r4
    6590:	f00b fd58 	bl	12044 <z_shell_print_prompt_and_cmd>
}
    6594:	e7f2      	b.n	657c <state_set+0x14>
			z_shell_fprintf(sh, SHELL_WARNING, "%s",
    6596:	4b05      	ldr	r3, [pc, #20]	; (65ac <state_set+0x44>)
    6598:	4a05      	ldr	r2, [pc, #20]	; (65b0 <state_set+0x48>)
    659a:	2103      	movs	r1, #3
    659c:	4620      	mov	r0, r4
    659e:	f00b fcc3 	bl	11f28 <z_shell_fprintf>
			z_flag_print_noinit_set(sh, false);
    65a2:	2100      	movs	r1, #0
    65a4:	4620      	mov	r0, r4
    65a6:	f00a fce5 	bl	10f74 <z_flag_print_noinit_set>
    65aa:	e7f0      	b.n	658e <state_set+0x26>
    65ac:	00016e20 	.word	0x00016e20
    65b0:	00015864 	.word	0x00015864

000065b4 <instance_init>:
}

static int instance_init(const struct shell *sh,
			 const void *transport_config,
			 struct shell_backend_config_flags cfg_flags)
{
    65b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    65b8:	4605      	mov	r5, r0
    65ba:	4688      	mov	r8, r1
    65bc:	4617      	mov	r7, r2
	__ASSERT_NO_MSG((sh->shell_flag == SHELL_FLAG_CRLF_DEFAULT) ||
			(sh->shell_flag == SHELL_FLAG_OLF_CRLF));

	memset(sh->ctx, 0, sizeof(*sh->ctx));
    65be:	f44f 7244 	mov.w	r2, #784	; 0x310
    65c2:	2100      	movs	r1, #0
    65c4:	6880      	ldr	r0, [r0, #8]
    65c6:	f00c fc0f 	bl	12de8 <memset>
	sh->ctx->prompt = sh->default_prompt;
    65ca:	68ab      	ldr	r3, [r5, #8]
    65cc:	682a      	ldr	r2, [r5, #0]
    65ce:	601a      	str	r2, [r3, #0]
	if (CONFIG_SHELL_CMD_ROOT[0]) {
		sh->ctx->selected_cmd = root_cmd_find(CONFIG_SHELL_CMD_ROOT);
	}

	history_init(sh);
    65d0:	4628      	mov	r0, r5
    65d2:	f00a fdc7 	bl	11164 <history_init>

	k_mutex_init(&sh->ctx->wr_mtx);
    65d6:	68a8      	ldr	r0, [r5, #8]
    65d8:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_init(mutex);
    65dc:	f00e f8e9 	bl	147b2 <z_impl_k_mutex_init>

	for (int i = 0; i < SHELL_SIGNALS; i++) {
    65e0:	2400      	movs	r4, #0
    65e2:	e015      	b.n	6610 <instance_init+0x5c>
		k_poll_signal_init(&sh->ctx->signals[i]);
    65e4:	68a8      	ldr	r0, [r5, #8]
    65e6:	0126      	lsls	r6, r4, #4
    65e8:	f506 761a 	add.w	r6, r6, #616	; 0x268
    65ec:	4430      	add	r0, r6
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
    65ee:	f00e fcce 	bl	14f8e <z_impl_k_poll_signal_init>
		k_poll_event_init(&sh->ctx->events[i],
    65f2:	f8d5 c008 	ldr.w	ip, [r5, #8]
    65f6:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    65fa:	0080      	lsls	r0, r0, #2
    65fc:	f500 702a 	add.w	r0, r0, #680	; 0x2a8
    6600:	eb0c 0306 	add.w	r3, ip, r6
    6604:	2200      	movs	r2, #0
    6606:	2101      	movs	r1, #1
    6608:	4460      	add	r0, ip
    660a:	f00e fc99 	bl	14f40 <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
    660e:	3401      	adds	r4, #1
    6610:	2c03      	cmp	r4, #3
    6612:	dde7      	ble.n	65e4 <instance_init+0x30>
				  K_POLL_MODE_NOTIFY_ONLY,
				  &sh->ctx->signals[i]);
	}

	if (IS_ENABLED(CONFIG_SHELL_STATS)) {
		sh->stats->log_lost_cnt = 0;
    6614:	69ab      	ldr	r3, [r5, #24]
    6616:	2200      	movs	r2, #0
    6618:	601a      	str	r2, [r3, #0]
	}

	z_flag_tx_rdy_set(sh, true);
    661a:	2101      	movs	r1, #1
    661c:	4628      	mov	r0, r5
    661e:	f00a fcc9 	bl	10fb4 <z_flag_tx_rdy_set>

	sh->ctx->vt100_ctx.cons.terminal_wid =
    6622:	68ab      	ldr	r3, [r5, #8]
    6624:	2250      	movs	r2, #80	; 0x50
    6626:	855a      	strh	r2, [r3, #42]	; 0x2a
					CONFIG_SHELL_DEFAULT_TERMINAL_WIDTH;
	sh->ctx->vt100_ctx.cons.terminal_hei =
    6628:	68ab      	ldr	r3, [r5, #8]
    662a:	2218      	movs	r2, #24
    662c:	851a      	strh	r2, [r3, #40]	; 0x28
					CONFIG_SHELL_DEFAULT_TERMINAL_HEIGHT;
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
    662e:	68ab      	ldr	r3, [r5, #8]
    6630:	6818      	ldr	r0, [r3, #0]
void z_shell_multiline_data_calc(struct shell_multiline_cons *cons,
				 uint16_t buff_pos, uint16_t buff_len);

static inline uint16_t z_shell_strlen(const char *str)
{
	return str == NULL ? 0U : (uint16_t)strlen(str);
    6632:	b1b8      	cbz	r0, 6664 <instance_init+0xb0>
    6634:	f00c fb53 	bl	12cde <strlen>
    6638:	b280      	uxth	r0, r0
    663a:	68ab      	ldr	r3, [r5, #8]
    663c:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c

	/* Configure backend according to enabled shell features and backend
	 * specific settings.
	 */
	cfg_flags.obscure     &= IS_ENABLED(CONFIG_SHELL_START_OBSCURED);
    6640:	f36f 0782 	bfc	r7, #2, #1
	cfg_flags.use_colors  &= IS_ENABLED(CONFIG_SHELL_VT100_COLORS);
	cfg_flags.use_vt100   &= IS_ENABLED(CONFIG_SHELL_VT100_COMMANDS);
	cfg_flags.echo        &= IS_ENABLED(CONFIG_SHELL_ECHO_STATUS);
	cfg_flags.mode_delete &= IS_ENABLED(CONFIG_SHELL_BACKSPACE_MODE_DELETE);
	sh->ctx->cfg.flags = cfg_flags;
    6644:	68ab      	ldr	r3, [r5, #8]
    6646:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260

	int ret = sh->iface->api->init(sh->iface, transport_config,
    664a:	6868      	ldr	r0, [r5, #4]
    664c:	6803      	ldr	r3, [r0, #0]
    664e:	681c      	ldr	r4, [r3, #0]
    6650:	462b      	mov	r3, r5
    6652:	4a05      	ldr	r2, [pc, #20]	; (6668 <instance_init+0xb4>)
    6654:	4641      	mov	r1, r8
    6656:	47a0      	blx	r4
				       transport_evt_handler,
				       (void *)sh);
	if (ret == 0) {
    6658:	b910      	cbnz	r0, 6660 <instance_init+0xac>
	sh->ctx->state = state;
    665a:	68ab      	ldr	r3, [r5, #8]
    665c:	2201      	movs	r2, #1
    665e:	711a      	strb	r2, [r3, #4]
		state_set(sh, SHELL_STATE_INITIALIZED);
	}

	return ret;
}
    6660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6664:	2000      	movs	r0, #0
    6666:	e7e8      	b.n	663a <instance_init+0x86>
    6668:	0001114b 	.word	0x0001114b

0000666c <z_clear_eos>:

/* Function sends VT100 command to clear the screen from cursor position to
 * end of the screen.
 */
static inline void z_clear_eos(const struct shell *sh)
{
    666c:	b508      	push	{r3, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
    666e:	6883      	ldr	r3, [r0, #8]
    6670:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    6674:	f013 0f20 	tst.w	r3, #32
    6678:	d100      	bne.n	667c <z_clear_eos+0x10>
}
    667a:	bd08      	pop	{r3, pc}
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    667c:	4902      	ldr	r1, [pc, #8]	; (6688 <z_clear_eos+0x1c>)
    667e:	6940      	ldr	r0, [r0, #20]
    6680:	f00a fd75 	bl	1116e <z_shell_raw_fprintf>
}
    6684:	e7f9      	b.n	667a <z_clear_eos+0xe>
    6686:	bf00      	nop
    6688:	000154d4 	.word	0x000154d4

0000668c <shell_internal_help_print>:
{
    668c:	b510      	push	{r4, lr}
    668e:	4604      	mov	r4, r0
	z_shell_help_cmd_print(sh, &sh->ctx->active_cmd);
    6690:	6881      	ldr	r1, [r0, #8]
    6692:	3108      	adds	r1, #8
    6694:	f001 f84a 	bl	772c <z_shell_help_cmd_print>
	z_shell_help_subcmd_print(sh, &sh->ctx->active_cmd,
    6698:	68a1      	ldr	r1, [r4, #8]
    669a:	4a03      	ldr	r2, [pc, #12]	; (66a8 <shell_internal_help_print+0x1c>)
    669c:	3108      	adds	r1, #8
    669e:	4620      	mov	r0, r4
    66a0:	f00b fea2 	bl	123e8 <z_shell_help_subcmd_print>
}
    66a4:	bd10      	pop	{r4, pc}
    66a6:	bf00      	nop
    66a8:	00016e64 	.word	0x00016e64

000066ac <cmd_precheck>:
	if (!arg_cnt_ok) {
    66ac:	b109      	cbz	r1, 66b2 <cmd_precheck+0x6>
	return 0;
    66ae:	2000      	movs	r0, #0
}
    66b0:	4770      	bx	lr
{
    66b2:	b510      	push	{r4, lr}
    66b4:	4604      	mov	r4, r0
				sh->ctx->active_cmd.syntax);
    66b6:	6883      	ldr	r3, [r0, #8]
		z_shell_fprintf(sh, SHELL_ERROR,
    66b8:	689b      	ldr	r3, [r3, #8]
    66ba:	4a05      	ldr	r2, [pc, #20]	; (66d0 <cmd_precheck+0x24>)
    66bc:	2101      	movs	r1, #1
    66be:	f00b fc33 	bl	11f28 <z_shell_fprintf>
			shell_internal_help_print(sh);
    66c2:	4620      	mov	r0, r4
    66c4:	f7ff ffe2 	bl	668c <shell_internal_help_print>
		return -EINVAL;
    66c8:	f06f 0015 	mvn.w	r0, #21
}
    66cc:	bd10      	pop	{r4, pc}
    66ce:	bf00      	nop
    66d0:	00016e74 	.word	0x00016e74

000066d4 <exec_cmd>:
{
    66d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    66d6:	4604      	mov	r4, r0
    66d8:	4616      	mov	r6, r2
	if (sh->ctx->active_cmd.handler == NULL) {
    66da:	6880      	ldr	r0, [r0, #8]
    66dc:	6942      	ldr	r2, [r0, #20]
    66de:	b162      	cbz	r2, 66fa <exec_cmd+0x26>
    66e0:	460d      	mov	r5, r1
	if (sh->ctx->active_cmd.args.mandatory) {
    66e2:	7e02      	ldrb	r2, [r0, #24]
    66e4:	b38a      	cbz	r2, 674a <exec_cmd+0x76>
		uint8_t opt8 = sh->ctx->active_cmd.args.optional;
    66e6:	7e43      	ldrb	r3, [r0, #25]
				UINT16_MAX : opt8;
    66e8:	2bff      	cmp	r3, #255	; 0xff
    66ea:	d025      	beq.n	6738 <exec_cmd+0x64>
		const bool in_range = IN_RANGE(argc, mand, mand + opt);
    66ec:	42aa      	cmp	r2, r5
    66ee:	d826      	bhi.n	673e <exec_cmd+0x6a>
    66f0:	4413      	add	r3, r2
    66f2:	42ab      	cmp	r3, r5
    66f4:	d248      	bcs.n	6788 <exec_cmd+0xb4>
    66f6:	2100      	movs	r1, #0
    66f8:	e022      	b.n	6740 <exec_cmd+0x6c>
		if ((help_entry != NULL) && IS_ENABLED(CONFIG_SHELL_HELP)) {
    66fa:	b1ab      	cbz	r3, 6728 <exec_cmd+0x54>
			if (help_entry->help == NULL) {
    66fc:	685a      	ldr	r2, [r3, #4]
    66fe:	2a00      	cmp	r2, #0
    6700:	d044      	beq.n	678c <exec_cmd+0xb8>
			if (help_entry->help != sh->ctx->active_cmd.help) {
    6702:	68c1      	ldr	r1, [r0, #12]
    6704:	428a      	cmp	r2, r1
    6706:	d00a      	beq.n	671e <exec_cmd+0x4a>
				sh->ctx->active_cmd = *help_entry;
    6708:	f100 0e08 	add.w	lr, r0, #8
    670c:	469c      	mov	ip, r3
    670e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    6712:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    6716:	f8dc 3000 	ldr.w	r3, [ip]
    671a:	f8ce 3000 	str.w	r3, [lr]
			shell_internal_help_print(sh);
    671e:	4620      	mov	r0, r4
    6720:	f7ff ffb4 	bl	668c <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
    6724:	2701      	movs	r7, #1
    6726:	e02d      	b.n	6784 <exec_cmd+0xb0>
			z_shell_fprintf(sh, SHELL_ERROR,
    6728:	4a1a      	ldr	r2, [pc, #104]	; (6794 <exec_cmd+0xc0>)
    672a:	2101      	movs	r1, #1
    672c:	4620      	mov	r0, r4
    672e:	f00b fbfb 	bl	11f28 <z_shell_fprintf>
			return -ENOEXEC;
    6732:	f06f 0707 	mvn.w	r7, #7
    6736:	e025      	b.n	6784 <exec_cmd+0xb0>
				UINT16_MAX : opt8;
    6738:	f64f 73ff 	movw	r3, #65535	; 0xffff
    673c:	e7d6      	b.n	66ec <exec_cmd+0x18>
		const bool in_range = IN_RANGE(argc, mand, mand + opt);
    673e:	2100      	movs	r1, #0
		ret_val = cmd_precheck(sh, in_range);
    6740:	4620      	mov	r0, r4
    6742:	f7ff ffb3 	bl	66ac <cmd_precheck>
	if (!ret_val) {
    6746:	4607      	mov	r7, r0
    6748:	b9e0      	cbnz	r0, 6784 <exec_cmd+0xb0>
		z_flag_cmd_ctx_set(sh, true);
    674a:	2101      	movs	r1, #1
    674c:	4620      	mov	r0, r4
    674e:	f00a fc51 	bl	10ff4 <z_flag_cmd_ctx_set>
		k_mutex_unlock(&sh->ctx->wr_mtx);
    6752:	68a0      	ldr	r0, [r4, #8]
    6754:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_unlock(mutex);
    6758:	f007 f82a 	bl	d7b0 <z_impl_k_mutex_unlock>
		ret_val = sh->ctx->active_cmd.handler(sh, argc,
    675c:	68a3      	ldr	r3, [r4, #8]
    675e:	695b      	ldr	r3, [r3, #20]
    6760:	4632      	mov	r2, r6
    6762:	4629      	mov	r1, r5
    6764:	4620      	mov	r0, r4
    6766:	4798      	blx	r3
    6768:	4607      	mov	r7, r0
		k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
    676a:	68a0      	ldr	r0, [r4, #8]
    676c:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_lock(mutex, timeout);
    6770:	f04f 32ff 	mov.w	r2, #4294967295
    6774:	f04f 33ff 	mov.w	r3, #4294967295
    6778:	f006 ff96 	bl	d6a8 <z_impl_k_mutex_lock>
		z_flag_cmd_ctx_set(sh, false);
    677c:	2100      	movs	r1, #0
    677e:	4620      	mov	r0, r4
    6780:	f00a fc38 	bl	10ff4 <z_flag_cmd_ctx_set>
}
    6784:	4638      	mov	r0, r7
    6786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		const bool in_range = IN_RANGE(argc, mand, mand + opt);
    6788:	2101      	movs	r1, #1
    678a:	e7d9      	b.n	6740 <exec_cmd+0x6c>
				return -ENOEXEC;
    678c:	f06f 0707 	mvn.w	r7, #7
    6790:	e7f8      	b.n	6784 <exec_cmd+0xb0>
    6792:	bf00      	nop
    6794:	00016e90 	.word	0x00016e90

00006798 <wildcard_check_report>:
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && found && entry->handler) {
    6798:	b191      	cbz	r1, 67c0 <wildcard_check_report+0x28>
{
    679a:	b510      	push	{r4, lr}
    679c:	4604      	mov	r4, r0
    679e:	4608      	mov	r0, r1
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && found && entry->handler) {
    67a0:	68d3      	ldr	r3, [r2, #12]
    67a2:	b903      	cbnz	r3, 67a6 <wildcard_check_report+0xe>
}
    67a4:	bd10      	pop	{r4, pc}
		z_shell_op_cursor_end_move(sh);
    67a6:	4620      	mov	r0, r4
    67a8:	f00b fb21 	bl	11dee <z_shell_op_cursor_end_move>
		z_shell_op_cond_next_line(sh);
    67ac:	4620      	mov	r0, r4
    67ae:	f000 fdfb 	bl	73a8 <z_shell_op_cond_next_line>
		z_shell_fprintf(sh, SHELL_ERROR,
    67b2:	4a04      	ldr	r2, [pc, #16]	; (67c4 <wildcard_check_report+0x2c>)
    67b4:	2101      	movs	r1, #1
    67b6:	4620      	mov	r0, r4
    67b8:	f00b fbb6 	bl	11f28 <z_shell_fprintf>
		return false;
    67bc:	2000      	movs	r0, #0
    67be:	e7f1      	b.n	67a4 <wildcard_check_report+0xc>
	return true;
    67c0:	2001      	movs	r0, #1
}
    67c2:	4770      	bx	lr
    67c4:	00016eb0 	.word	0x00016eb0

000067c8 <execute>:
{
    67c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    67cc:	b0a6      	sub	sp, #152	; 0x98
    67ce:	4606      	mov	r6, r0
	const char *argv[CONFIG_SHELL_ARGC_MAX + 1] = {0}; /* +1 reserved for NULL */
    67d0:	2254      	movs	r2, #84	; 0x54
    67d2:	2100      	movs	r1, #0
    67d4:	a80c      	add	r0, sp, #48	; 0x30
    67d6:	f00c fb07 	bl	12de8 <memset>
	size_t cmd_lvl = 0;
    67da:	2300      	movs	r3, #0
    67dc:	9306      	str	r3, [sp, #24]
	size_t cmd_with_handler_lvl = 0;
    67de:	9305      	str	r3, [sp, #20]
	size_t argc = 0, args_left = SIZE_MAX;
    67e0:	9304      	str	r3, [sp, #16]
    67e2:	f04f 33ff 	mov.w	r3, #4294967295
    67e6:	9303      	str	r3, [sp, #12]
	char *cmd_buf = sh->ctx->cmd_buff;
    67e8:	68b3      	ldr	r3, [r6, #8]
    67ea:	f103 0a42 	add.w	sl, r3, #66	; 0x42
	z_shell_op_cursor_end_move(sh);
    67ee:	4630      	mov	r0, r6
    67f0:	f00b fafd 	bl	11dee <z_shell_op_cursor_end_move>
	if (!z_shell_cursor_in_empty_line(sh)) {
    67f4:	4630      	mov	r0, r6
    67f6:	f00b fa93 	bl	11d20 <z_shell_cursor_in_empty_line>
    67fa:	b1c0      	cbz	r0, 682e <execute+0x66>
	memset(&sh->ctx->active_cmd, 0, sizeof(sh->ctx->active_cmd));
    67fc:	68b0      	ldr	r0, [r6, #8]
    67fe:	2214      	movs	r2, #20
    6800:	2100      	movs	r1, #0
    6802:	3008      	adds	r0, #8
    6804:	f00c faf0 	bl	12de8 <memset>
		z_shell_cmd_trim(sh);
    6808:	4630      	mov	r0, r6
    680a:	f00b f97c 	bl	11b06 <z_shell_cmd_trim>
		history_put(sh, sh->ctx->cmd_buff,
    680e:	68b1      	ldr	r1, [r6, #8]
    6810:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
    6812:	3142      	adds	r1, #66	; 0x42
    6814:	4630      	mov	r0, r6
    6816:	f00a fcc1 	bl	1119c <history_put>
		z_shell_wildcard_prepare(sh);
    681a:	4630      	mov	r0, r6
    681c:	f00c f829 	bl	12872 <z_shell_wildcard_prepare>
		help_entry.help = NULL;
    6820:	2700      	movs	r7, #0
    6822:	9708      	str	r7, [sp, #32]
    6824:	46b8      	mov	r8, r7
    6826:	ac0c      	add	r4, sp, #48	; 0x30
    6828:	46b9      	mov	r9, r7
    682a:	463d      	mov	r5, r7
    682c:	e05b      	b.n	68e6 <execute+0x11e>
/* Function forcing new line - cannot be replaced with function
 * cursor_down_move.
 */
static inline void z_cursor_next_line_move(const struct shell *sh)
{
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    682e:	496d      	ldr	r1, [pc, #436]	; (69e4 <execute+0x21c>)
    6830:	6970      	ldr	r0, [r6, #20]
    6832:	f00a fc9c 	bl	1116e <z_shell_raw_fprintf>
}
    6836:	e7e1      	b.n	67fc <execute+0x34>
		} else if ((argc == 1) && (quote != 0)) {
    6838:	2800      	cmp	r0, #0
    683a:	d06a      	beq.n	6912 <execute+0x14a>
			z_shell_fprintf(sh, SHELL_ERROR,
    683c:	4603      	mov	r3, r0
    683e:	4a6a      	ldr	r2, [pc, #424]	; (69e8 <execute+0x220>)
    6840:	2101      	movs	r1, #1
    6842:	4630      	mov	r0, r6
    6844:	f00b fb70 	bl	11f28 <z_shell_fprintf>
			return -ENOEXEC;
    6848:	f06f 0007 	mvn.w	r0, #7
    684c:	e0a1      	b.n	6992 <execute+0x1ca>
		    z_shell_help_request(argvp[0])) {
    684e:	6820      	ldr	r0, [r4, #0]
    6850:	f000 ff92 	bl	7778 <z_shell_help_request>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    6854:	2800      	cmp	r0, #0
    6856:	d05f      	beq.n	6918 <execute+0x150>
			if (help_entry.help) {
    6858:	9b08      	ldr	r3, [sp, #32]
    685a:	b15b      	cbz	r3, 6874 <execute+0xac>
				sh->ctx->active_cmd = help_entry;
    685c:	68b4      	ldr	r4, [r6, #8]
    685e:	3408      	adds	r4, #8
    6860:	ad07      	add	r5, sp, #28
    6862:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6864:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6866:	682b      	ldr	r3, [r5, #0]
    6868:	6023      	str	r3, [r4, #0]
				shell_internal_help_print(sh);
    686a:	4630      	mov	r0, r6
    686c:	f7ff ff0e 	bl	668c <shell_internal_help_print>
				return SHELL_CMD_HELP_PRINTED;
    6870:	2001      	movs	r0, #1
    6872:	e08e      	b.n	6992 <execute+0x1ca>
			z_shell_fprintf(sh, SHELL_ERROR,
    6874:	4a5d      	ldr	r2, [pc, #372]	; (69ec <execute+0x224>)
    6876:	2101      	movs	r1, #1
    6878:	4630      	mov	r0, r6
    687a:	f00b fb55 	bl	11f28 <z_shell_fprintf>
			return -ENOEXEC;
    687e:	f06f 0007 	mvn.w	r0, #7
    6882:	e086      	b.n	6992 <execute+0x1ca>
			status = z_shell_wildcard_process(sh, entry,
    6884:	6822      	ldr	r2, [r4, #0]
    6886:	4629      	mov	r1, r5
    6888:	4630      	mov	r0, r6
    688a:	f00c f817 	bl	128bc <z_shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
    688e:	2802      	cmp	r0, #2
    6890:	d068      	beq.n	6964 <execute+0x19c>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
    6892:	2803      	cmp	r0, #3
    6894:	d043      	beq.n	691e <execute+0x156>
				++cmd_lvl;
    6896:	9b06      	ldr	r3, [sp, #24]
    6898:	3301      	adds	r3, #1
    689a:	9306      	str	r3, [sp, #24]
				wildcard_found = true;
    689c:	f04f 0901 	mov.w	r9, #1
				continue;
    68a0:	e021      	b.n	68e6 <execute+0x11e>
			entry = z_shell_find_cmd(parent, argvp[0], &dloc);
    68a2:	aa21      	add	r2, sp, #132	; 0x84
    68a4:	6821      	ldr	r1, [r4, #0]
    68a6:	4638      	mov	r0, r7
    68a8:	f00b f8a6 	bl	119f8 <z_shell_find_cmd>
    68ac:	4605      	mov	r5, r0
    68ae:	e039      	b.n	6924 <execute+0x15c>
			if (cmd_lvl == 0 &&
    68b0:	9b06      	ldr	r3, [sp, #24]
    68b2:	b993      	cbnz	r3, 68da <execute+0x112>
	z_shell_fprintf_buffer_flush(sh->fprintf_ctx);
}

static inline bool z_shell_in_select_mode(const struct shell *sh)
{
	return sh->ctx->selected_cmd == NULL ? false : true;
    68b4:	68b3      	ldr	r3, [r6, #8]
    68b6:	69db      	ldr	r3, [r3, #28]
    68b8:	b123      	cbz	r3, 68c4 <execute+0xfc>
				 sh->ctx->selected_cmd->handler == NULL)) {
    68ba:	68db      	ldr	r3, [r3, #12]
				(!z_shell_in_select_mode(sh) ||
    68bc:	b113      	cbz	r3, 68c4 <execute+0xfc>
			has_last_handler = true;
    68be:	f04f 0801 	mov.w	r8, #1
    68c2:	e048      	b.n	6956 <execute+0x18e>
				z_shell_fprintf(sh, SHELL_ERROR,
    68c4:	4b4a      	ldr	r3, [pc, #296]	; (69f0 <execute+0x228>)
    68c6:	9300      	str	r3, [sp, #0]
    68c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    68ca:	4a4a      	ldr	r2, [pc, #296]	; (69f4 <execute+0x22c>)
    68cc:	2101      	movs	r1, #1
    68ce:	4630      	mov	r0, r6
    68d0:	f00b fb2a 	bl	11f28 <z_shell_fprintf>
			has_last_handler = true;
    68d4:	f04f 0801 	mov.w	r8, #1
    68d8:	e03d      	b.n	6956 <execute+0x18e>
    68da:	f04f 0801 	mov.w	r8, #1
    68de:	e03a      	b.n	6956 <execute+0x18e>
			cmd_lvl++;
    68e0:	9b06      	ldr	r3, [sp, #24]
    68e2:	3301      	adds	r3, #1
    68e4:	9306      	str	r3, [sp, #24]
	while ((argc != 1) && (cmd_lvl < CONFIG_SHELL_ARGC_MAX)
    68e6:	9b04      	ldr	r3, [sp, #16]
		&& args_left > 0) {
    68e8:	2b01      	cmp	r3, #1
    68ea:	d03b      	beq.n	6964 <execute+0x19c>
	while ((argc != 1) && (cmd_lvl < CONFIG_SHELL_ARGC_MAX)
    68ec:	9b06      	ldr	r3, [sp, #24]
    68ee:	2b13      	cmp	r3, #19
    68f0:	d838      	bhi.n	6964 <execute+0x19c>
		&& args_left > 0) {
    68f2:	9b03      	ldr	r3, [sp, #12]
    68f4:	2b00      	cmp	r3, #0
    68f6:	d035      	beq.n	6964 <execute+0x19c>
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
    68f8:	2302      	movs	r3, #2
    68fa:	4652      	mov	r2, sl
    68fc:	4621      	mov	r1, r4
    68fe:	a804      	add	r0, sp, #16
    6900:	f00b f829 	bl	11956 <z_shell_make_argv>
		cmd_buf = (char *)argvp[1];
    6904:	f8d4 a004 	ldr.w	sl, [r4, #4]
		if (argc == 0) {
    6908:	9b04      	ldr	r3, [sp, #16]
    690a:	2b00      	cmp	r3, #0
    690c:	d063      	beq.n	69d6 <execute+0x20e>
		} else if ((argc == 1) && (quote != 0)) {
    690e:	2b01      	cmp	r3, #1
    6910:	d092      	beq.n	6838 <execute+0x70>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    6912:	9b06      	ldr	r3, [sp, #24]
    6914:	2b00      	cmp	r3, #0
    6916:	d19a      	bne.n	684e <execute+0x86>
		if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && (cmd_lvl > 0)) {
    6918:	9b06      	ldr	r3, [sp, #24]
    691a:	2b00      	cmp	r3, #0
    691c:	d1b2      	bne.n	6884 <execute+0xbc>
		if (has_last_handler == false) {
    691e:	f1b8 0f00 	cmp.w	r8, #0
    6922:	d0be      	beq.n	68a2 <execute+0xda>
		argvp++;
    6924:	3404      	adds	r4, #4
		args_left--;
    6926:	9b03      	ldr	r3, [sp, #12]
    6928:	3b01      	subs	r3, #1
    692a:	9303      	str	r3, [sp, #12]
		if (entry) {
    692c:	2d00      	cmp	r5, #0
    692e:	d0bf      	beq.n	68b0 <execute+0xe8>
			if (wildcard_check_report(sh, wildcard_found, entry)
    6930:	462a      	mov	r2, r5
    6932:	4649      	mov	r1, r9
    6934:	4630      	mov	r0, r6
    6936:	f7ff ff2f 	bl	6798 <wildcard_check_report>
    693a:	2800      	cmp	r0, #0
    693c:	d04e      	beq.n	69dc <execute+0x214>
			active_cmd_prepare(entry, &sh->ctx->active_cmd,
    693e:	68b1      	ldr	r1, [r6, #8]
    6940:	ab03      	add	r3, sp, #12
    6942:	9301      	str	r3, [sp, #4]
    6944:	ab05      	add	r3, sp, #20
    6946:	9300      	str	r3, [sp, #0]
    6948:	ab06      	add	r3, sp, #24
    694a:	aa07      	add	r2, sp, #28
    694c:	3108      	adds	r1, #8
    694e:	4628      	mov	r0, r5
    6950:	f00a fa7a 	bl	10e48 <active_cmd_prepare>
			parent = entry;
    6954:	462f      	mov	r7, r5
		if (args_left || (argc == 2)) {
    6956:	9b03      	ldr	r3, [sp, #12]
    6958:	2b00      	cmp	r3, #0
    695a:	d1c1      	bne.n	68e0 <execute+0x118>
    695c:	9b04      	ldr	r3, [sp, #16]
    695e:	2b02      	cmp	r3, #2
    6960:	d1c1      	bne.n	68e6 <execute+0x11e>
    6962:	e7bd      	b.n	68e0 <execute+0x118>
	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
    6964:	9b06      	ldr	r3, [sp, #24]
    6966:	2b13      	cmp	r3, #19
    6968:	d902      	bls.n	6970 <execute+0x1a8>
    696a:	9b04      	ldr	r3, [sp, #16]
    696c:	2b02      	cmp	r3, #2
    696e:	d013      	beq.n	6998 <execute+0x1d0>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
    6970:	f1b9 0f00 	cmp.w	r9, #0
    6974:	d119      	bne.n	69aa <execute+0x1e2>
	if (parent != NULL) {
    6976:	b117      	cbz	r7, 697e <execute+0x1b6>
		if (parent->args.optional == SHELL_OPT_ARG_RAW && argv[cmd_lvl] != NULL) {
    6978:	7c7b      	ldrb	r3, [r7, #17]
    697a:	2bfe      	cmp	r3, #254	; 0xfe
    697c:	d020      	beq.n	69c0 <execute+0x1f8>
	return exec_cmd(sh, cmd_lvl - cmd_with_handler_lvl,
    697e:	9905      	ldr	r1, [sp, #20]
    6980:	ab07      	add	r3, sp, #28
    6982:	aa0c      	add	r2, sp, #48	; 0x30
    6984:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    6988:	9806      	ldr	r0, [sp, #24]
    698a:	1a41      	subs	r1, r0, r1
    698c:	4630      	mov	r0, r6
    698e:	f7ff fea1 	bl	66d4 <exec_cmd>
}
    6992:	b026      	add	sp, #152	; 0x98
    6994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		z_shell_fprintf(sh, SHELL_ERROR, "%s\n",
    6998:	4b17      	ldr	r3, [pc, #92]	; (69f8 <execute+0x230>)
    699a:	4a18      	ldr	r2, [pc, #96]	; (69fc <execute+0x234>)
    699c:	2101      	movs	r1, #1
    699e:	4630      	mov	r0, r6
    69a0:	f00b fac2 	bl	11f28 <z_shell_fprintf>
		return -ENOEXEC;
    69a4:	f06f 0007 	mvn.w	r0, #7
    69a8:	e7f3      	b.n	6992 <execute+0x1ca>
		z_shell_wildcard_finalize(sh);
    69aa:	4630      	mov	r0, r6
    69ac:	f00b ff99 	bl	128e2 <z_shell_wildcard_finalize>
					sh->ctx->cmd_buff,
    69b0:	68b2      	ldr	r2, [r6, #8]
		(void)z_shell_make_argv(&cmd_lvl,
    69b2:	2314      	movs	r3, #20
    69b4:	3242      	adds	r2, #66	; 0x42
    69b6:	a90c      	add	r1, sp, #48	; 0x30
    69b8:	a806      	add	r0, sp, #24
    69ba:	f00a ffcc 	bl	11956 <z_shell_make_argv>
		if (selected_cmd_get(sh)) {
    69be:	e7da      	b.n	6976 <execute+0x1ae>
		if (parent->args.optional == SHELL_OPT_ARG_RAW && argv[cmd_lvl] != NULL) {
    69c0:	9b06      	ldr	r3, [sp, #24]
    69c2:	aa26      	add	r2, sp, #152	; 0x98
    69c4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    69c8:	f852 2c68 	ldr.w	r2, [r2, #-104]
    69cc:	2a00      	cmp	r2, #0
    69ce:	d0d6      	beq.n	697e <execute+0x1b6>
			cmd_lvl++;
    69d0:	3301      	adds	r3, #1
    69d2:	9306      	str	r3, [sp, #24]
    69d4:	e7d3      	b.n	697e <execute+0x1b6>
			return -ENOEXEC;
    69d6:	f06f 0007 	mvn.w	r0, #7
    69da:	e7da      	b.n	6992 <execute+0x1ca>
				return -ENOEXEC;
    69dc:	f06f 0007 	mvn.w	r0, #7
    69e0:	e7d7      	b.n	6992 <execute+0x1ca>
    69e2:	bf00      	nop
    69e4:	00015ec0 	.word	0x00015ec0
    69e8:	00016ee0 	.word	0x00016ee0
    69ec:	00016e90 	.word	0x00016e90
    69f0:	00016efc 	.word	0x00016efc
    69f4:	00016ef4 	.word	0x00016ef4
    69f8:	00016f10 	.word	0x00016f10
    69fc:	000168d0 	.word	0x000168d0

00006a00 <tab_item_print>:
{
    6a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a04:	b082      	sub	sp, #8
    6a06:	4606      	mov	r6, r0
	if (option == NULL) {
    6a08:	b389      	cbz	r1, 6a6e <tab_item_print+0x6e>
    6a0a:	4614      	mov	r4, r2
    6a0c:	460f      	mov	r7, r1
	return str == NULL ? 0U : (uint16_t)strlen(str);
    6a0e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 6a84 <tab_item_print+0x84>
    6a12:	4640      	mov	r0, r8
    6a14:	f00c f963 	bl	12cde <strlen>
	longest_option += z_shell_strlen(tab);
    6a18:	fa14 f480 	uxtah	r4, r4, r0
    6a1c:	b2a4      	uxth	r4, r4
	columns = (sh->ctx->vt100_ctx.cons.terminal_wid
    6a1e:	68b3      	ldr	r3, [r6, #8]
    6a20:	8d5d      	ldrh	r5, [r3, #42]	; 0x2a
    6a22:	4640      	mov	r0, r8
    6a24:	f00c f95b 	bl	12cde <strlen>
    6a28:	b280      	uxth	r0, r0
			- z_shell_strlen(tab)) / longest_option;
    6a2a:	1a2d      	subs	r5, r5, r0
    6a2c:	fb95 f5f4 	sdiv	r5, r5, r4
	columns = (sh->ctx->vt100_ctx.cons.terminal_wid
    6a30:	b2ad      	uxth	r5, r5
    6a32:	4638      	mov	r0, r7
    6a34:	f00c f953 	bl	12cde <strlen>
    6a38:	b280      	uxth	r0, r0
	diff = longest_option - z_shell_strlen(option);
    6a3a:	1a24      	subs	r4, r4, r0
    6a3c:	b2a4      	uxth	r4, r4
	if (sh->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    6a3e:	68b2      	ldr	r2, [r6, #8]
    6a40:	8e13      	ldrh	r3, [r2, #48]	; 0x30
    6a42:	1c59      	adds	r1, r3, #1
    6a44:	8611      	strh	r1, [r2, #48]	; 0x30
    6a46:	fbb3 f2f5 	udiv	r2, r3, r5
    6a4a:	fb05 3312 	mls	r3, r5, r2, r3
    6a4e:	b29b      	uxth	r3, r3
    6a50:	b98b      	cbnz	r3, 6a76 <tab_item_print+0x76>
		z_shell_fprintf(sh, SHELL_OPTION, "\n%s%s", tab, option);
    6a52:	9700      	str	r7, [sp, #0]
    6a54:	4643      	mov	r3, r8
    6a56:	4a0c      	ldr	r2, [pc, #48]	; (6a88 <tab_item_print+0x88>)
    6a58:	2106      	movs	r1, #6
    6a5a:	4630      	mov	r0, r6
    6a5c:	f00b fa64 	bl	11f28 <z_shell_fprintf>
	z_shell_op_cursor_horiz_move(sh, diff);
    6a60:	4621      	mov	r1, r4
    6a62:	4630      	mov	r0, r6
    6a64:	f000 fc5e 	bl	7324 <z_shell_op_cursor_horiz_move>
}
    6a68:	b002      	add	sp, #8
    6a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sh->ctx->vt100_ctx.printed_cmd = 0;
    6a6e:	6883      	ldr	r3, [r0, #8]
    6a70:	2200      	movs	r2, #0
    6a72:	861a      	strh	r2, [r3, #48]	; 0x30
		return;
    6a74:	e7f8      	b.n	6a68 <tab_item_print+0x68>
		z_shell_fprintf(sh, SHELL_OPTION, "%s", option);
    6a76:	463b      	mov	r3, r7
    6a78:	4a04      	ldr	r2, [pc, #16]	; (6a8c <tab_item_print+0x8c>)
    6a7a:	2106      	movs	r1, #6
    6a7c:	4630      	mov	r0, r6
    6a7e:	f00b fa53 	bl	11f28 <z_shell_fprintf>
    6a82:	e7ed      	b.n	6a60 <tab_item_print+0x60>
    6a84:	00016f34 	.word	0x00016f34
    6a88:	00016f38 	.word	0x00016f38
    6a8c:	00015864 	.word	0x00015864

00006a90 <tab_options_print>:
{
    6a90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6a94:	4607      	mov	r7, r0
    6a96:	4689      	mov	r9, r1
    6a98:	461d      	mov	r5, r3
    6a9a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    6a9c:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
    6aa0:	4690      	mov	r8, r2
    6aa2:	b152      	cbz	r2, 6aba <tab_options_print+0x2a>
    6aa4:	4610      	mov	r0, r2
    6aa6:	f00c f91a 	bl	12cde <strlen>
    6aaa:	fa1f fb80 	uxth.w	fp, r0
	tab_item_print(sh, SHELL_INIT_OPTION_PRINTER, longest);
    6aae:	4652      	mov	r2, sl
    6ab0:	2100      	movs	r1, #0
    6ab2:	4638      	mov	r0, r7
    6ab4:	f7ff ffa4 	bl	6a00 <tab_item_print>
	while (cnt) {
    6ab8:	e008      	b.n	6acc <tab_options_print+0x3c>
    6aba:	f04f 0b00 	mov.w	fp, #0
    6abe:	e7f6      	b.n	6aae <tab_options_print+0x1e>
		tab_item_print(sh, match->syntax, longest);
    6ac0:	4652      	mov	r2, sl
    6ac2:	6821      	ldr	r1, [r4, #0]
    6ac4:	4638      	mov	r0, r7
    6ac6:	f7ff ff9b 	bl	6a00 <tab_item_print>
		cnt--;
    6aca:	3e01      	subs	r6, #1
	while (cnt) {
    6acc:	b1a6      	cbz	r6, 6af8 <tab_options_print+0x68>
		match = z_shell_cmd_get(cmd, idx, &sh->ctx->active_cmd);
    6ace:	68ba      	ldr	r2, [r7, #8]
    6ad0:	3208      	adds	r2, #8
    6ad2:	4629      	mov	r1, r5
    6ad4:	4648      	mov	r0, r9
    6ad6:	f000 fb81 	bl	71dc <z_shell_cmd_get>
    6ada:	4604      	mov	r4, r0
		idx++;
    6adc:	3501      	adds	r5, #1
		if (str && match->syntax &&
    6ade:	f1b8 0f00 	cmp.w	r8, #0
    6ae2:	d0ed      	beq.n	6ac0 <tab_options_print+0x30>
    6ae4:	6800      	ldr	r0, [r0, #0]
    6ae6:	2800      	cmp	r0, #0
    6ae8:	d0ea      	beq.n	6ac0 <tab_options_print+0x30>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    6aea:	465a      	mov	r2, fp
    6aec:	4641      	mov	r1, r8
    6aee:	f00c f914 	bl	12d1a <strncmp>
		if (str && match->syntax &&
    6af2:	2800      	cmp	r0, #0
    6af4:	d0e4      	beq.n	6ac0 <tab_options_print+0x30>
    6af6:	e7e9      	b.n	6acc <tab_options_print+0x3c>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    6af8:	4904      	ldr	r1, [pc, #16]	; (6b0c <tab_options_print+0x7c>)
    6afa:	6978      	ldr	r0, [r7, #20]
    6afc:	f00a fb37 	bl	1116e <z_shell_raw_fprintf>
	z_shell_print_prompt_and_cmd(sh);
    6b00:	4638      	mov	r0, r7
    6b02:	f00b fa9f 	bl	12044 <z_shell_print_prompt_and_cmd>
}
    6b06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6b0a:	bf00      	nop
    6b0c:	00015ec0 	.word	0x00015ec0

00006b10 <ctrl_metakeys_handle>:
{
    6b10:	b510      	push	{r4, lr}
    6b12:	4604      	mov	r4, r0
	switch (data) {
    6b14:	3901      	subs	r1, #1
    6b16:	2916      	cmp	r1, #22
    6b18:	d80f      	bhi.n	6b3a <ctrl_metakeys_handle+0x2a>
    6b1a:	e8df f001 	tbb	[pc, r1]
    6b1e:	0f0c      	.short	0x0f0c
    6b20:	2c292612 	.word	0x2c292612
    6b24:	0e0e0e0e 	.word	0x0e0e0e0e
    6b28:	4c0e322f 	.word	0x4c0e322f
    6b2c:	0e0e500e 	.word	0x0e0e500e
    6b30:	0e540e0e 	.word	0x0e540e0e
    6b34:	61          	.byte	0x61
    6b35:	00          	.byte	0x00
		z_shell_op_cursor_home_move(sh);
    6b36:	f00b f952 	bl	11dde <z_shell_op_cursor_home_move>
}
    6b3a:	bd10      	pop	{r4, pc}
		z_shell_op_left_arrow(sh);
    6b3c:	f00b f960 	bl	11e00 <z_shell_op_left_arrow>
		break;
    6b40:	e7fb      	b.n	6b3a <ctrl_metakeys_handle+0x2a>
		z_shell_op_cursor_end_move(sh);
    6b42:	f00b f954 	bl	11dee <z_shell_op_cursor_end_move>
		if (!z_shell_cursor_in_empty_line(sh)) {
    6b46:	4620      	mov	r0, r4
    6b48:	f00b f8ea 	bl	11d20 <z_shell_cursor_in_empty_line>
    6b4c:	b140      	cbz	r0, 6b60 <ctrl_metakeys_handle+0x50>
		z_flag_history_exit_set(sh, true);
    6b4e:	2101      	movs	r1, #1
    6b50:	4620      	mov	r0, r4
    6b52:	f00a fa6f 	bl	11034 <z_flag_history_exit_set>
		state_set(sh, SHELL_STATE_ACTIVE);
    6b56:	2102      	movs	r1, #2
    6b58:	4620      	mov	r0, r4
    6b5a:	f7ff fd05 	bl	6568 <state_set>
		break;
    6b5e:	e7ec      	b.n	6b3a <ctrl_metakeys_handle+0x2a>
    6b60:	4923      	ldr	r1, [pc, #140]	; (6bf0 <ctrl_metakeys_handle+0xe0>)
    6b62:	6960      	ldr	r0, [r4, #20]
    6b64:	f00a fb03 	bl	1116e <z_shell_raw_fprintf>
}
    6b68:	e7f1      	b.n	6b4e <ctrl_metakeys_handle+0x3e>
		z_shell_op_char_delete(sh);
    6b6a:	f00b fa3f 	bl	11fec <z_shell_op_char_delete>
		break;
    6b6e:	e7e4      	b.n	6b3a <ctrl_metakeys_handle+0x2a>
		z_shell_op_cursor_end_move(sh);
    6b70:	f00b f93d 	bl	11dee <z_shell_op_cursor_end_move>
		break;
    6b74:	e7e1      	b.n	6b3a <ctrl_metakeys_handle+0x2a>
		z_shell_op_right_arrow(sh);
    6b76:	f00b f94d 	bl	11e14 <z_shell_op_right_arrow>
		break;
    6b7a:	e7de      	b.n	6b3a <ctrl_metakeys_handle+0x2a>
		z_shell_op_delete_from_cursor(sh);
    6b7c:	f00b f955 	bl	11e2a <z_shell_op_delete_from_cursor>
		break;
    6b80:	e7db      	b.n	6b3a <ctrl_metakeys_handle+0x2a>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    6b82:	6883      	ldr	r3, [r0, #8]
    6b84:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
		Z_SHELL_VT100_CMD(sh, SHELL_VT100_CURSORHOME);
    6b88:	f013 0f20 	tst.w	r3, #32
    6b8c:	d109      	bne.n	6ba2 <ctrl_metakeys_handle+0x92>
    6b8e:	68a3      	ldr	r3, [r4, #8]
    6b90:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
		Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEARSCREEN);
    6b94:	f013 0f20 	tst.w	r3, #32
    6b98:	d108      	bne.n	6bac <ctrl_metakeys_handle+0x9c>
		z_shell_print_prompt_and_cmd(sh);
    6b9a:	4620      	mov	r0, r4
    6b9c:	f00b fa52 	bl	12044 <z_shell_print_prompt_and_cmd>
		break;
    6ba0:	e7cb      	b.n	6b3a <ctrl_metakeys_handle+0x2a>
		Z_SHELL_VT100_CMD(sh, SHELL_VT100_CURSORHOME);
    6ba2:	4914      	ldr	r1, [pc, #80]	; (6bf4 <ctrl_metakeys_handle+0xe4>)
    6ba4:	6940      	ldr	r0, [r0, #20]
    6ba6:	f00a fae2 	bl	1116e <z_shell_raw_fprintf>
    6baa:	e7f0      	b.n	6b8e <ctrl_metakeys_handle+0x7e>
		Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEARSCREEN);
    6bac:	4912      	ldr	r1, [pc, #72]	; (6bf8 <ctrl_metakeys_handle+0xe8>)
    6bae:	6960      	ldr	r0, [r4, #20]
    6bb0:	f00a fadd 	bl	1116e <z_shell_raw_fprintf>
    6bb4:	e7f1      	b.n	6b9a <ctrl_metakeys_handle+0x8a>
		history_handle(sh, false);
    6bb6:	2100      	movs	r1, #0
    6bb8:	f00a fc91 	bl	114de <history_handle>
		break;
    6bbc:	e7bd      	b.n	6b3a <ctrl_metakeys_handle+0x2a>
		history_handle(sh, true);
    6bbe:	2101      	movs	r1, #1
    6bc0:	f00a fc8d 	bl	114de <history_handle>
		break;
    6bc4:	e7b9      	b.n	6b3a <ctrl_metakeys_handle+0x2a>
		z_shell_op_cursor_home_move(sh);
    6bc6:	f00b f90a 	bl	11dde <z_shell_op_cursor_home_move>
		cmd_buffer_clear(sh);
    6bca:	4620      	mov	r0, r4
    6bcc:	f00a f920 	bl	10e10 <cmd_buffer_clear>
		z_flag_history_exit_set(sh, true);
    6bd0:	2101      	movs	r1, #1
    6bd2:	4620      	mov	r0, r4
    6bd4:	f00a fa2e 	bl	11034 <z_flag_history_exit_set>
		z_clear_eos(sh);
    6bd8:	4620      	mov	r0, r4
    6bda:	f7ff fd47 	bl	666c <z_clear_eos>
		break;
    6bde:	e7ac      	b.n	6b3a <ctrl_metakeys_handle+0x2a>
		z_shell_op_word_remove(sh);
    6be0:	f000 fc52 	bl	7488 <z_shell_op_word_remove>
		z_flag_history_exit_set(sh, true);
    6be4:	2101      	movs	r1, #1
    6be6:	4620      	mov	r0, r4
    6be8:	f00a fa24 	bl	11034 <z_flag_history_exit_set>
		break;
    6bec:	e7a5      	b.n	6b3a <ctrl_metakeys_handle+0x2a>
    6bee:	bf00      	nop
    6bf0:	00015ec0 	.word	0x00015ec0
    6bf4:	000154dc 	.word	0x000154dc
    6bf8:	000154e4 	.word	0x000154e4

00006bfc <state_collect>:
{
    6bfc:	b570      	push	{r4, r5, r6, lr}
    6bfe:	b086      	sub	sp, #24
    6c00:	4604      	mov	r4, r0
	size_t count = 0;
    6c02:	2300      	movs	r3, #0
    6c04:	9305      	str	r3, [sp, #20]
		shell_bypass_cb_t bypass = sh->ctx->bypass;
    6c06:	68a3      	ldr	r3, [r4, #8]
    6c08:	6b9d      	ldr	r5, [r3, #56]	; 0x38
		if (bypass) {
    6c0a:	b1f5      	cbz	r5, 6c4a <state_collect+0x4e>
			(void)sh->iface->api->read(sh->iface, buf,
    6c0c:	6860      	ldr	r0, [r4, #4]
    6c0e:	6803      	ldr	r3, [r0, #0]
    6c10:	691e      	ldr	r6, [r3, #16]
    6c12:	ab05      	add	r3, sp, #20
    6c14:	2210      	movs	r2, #16
    6c16:	4669      	mov	r1, sp
    6c18:	47b0      	blx	r6
			if (count) {
    6c1a:	9b05      	ldr	r3, [sp, #20]
    6c1c:	b19b      	cbz	r3, 6c46 <state_collect+0x4a>
				z_flag_cmd_ctx_set(sh, true);
    6c1e:	2101      	movs	r1, #1
    6c20:	4620      	mov	r0, r4
    6c22:	f00a f9e7 	bl	10ff4 <z_flag_cmd_ctx_set>
				bypass(sh, buf, count);
    6c26:	9a05      	ldr	r2, [sp, #20]
    6c28:	4669      	mov	r1, sp
    6c2a:	4620      	mov	r0, r4
    6c2c:	47a8      	blx	r5
				z_flag_cmd_ctx_set(sh, false);
    6c2e:	2100      	movs	r1, #0
    6c30:	4620      	mov	r0, r4
    6c32:	f00a f9df 	bl	10ff4 <z_flag_cmd_ctx_set>
				if (!(volatile shell_bypass_cb_t *)sh->ctx->bypass) {
    6c36:	68a3      	ldr	r3, [r4, #8]
    6c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6c3a:	2b00      	cmp	r3, #0
    6c3c:	d1e3      	bne.n	6c06 <state_collect+0xa>
					state_set(sh, SHELL_STATE_ACTIVE);
    6c3e:	2102      	movs	r1, #2
    6c40:	4620      	mov	r0, r4
    6c42:	f7ff fc91 	bl	6568 <state_set>
}
    6c46:	b006      	add	sp, #24
    6c48:	bd70      	pop	{r4, r5, r6, pc}
		(void)sh->iface->api->read(sh->iface, &data,
    6c4a:	6860      	ldr	r0, [r4, #4]
    6c4c:	6803      	ldr	r3, [r0, #0]
    6c4e:	691d      	ldr	r5, [r3, #16]
    6c50:	ab05      	add	r3, sp, #20
    6c52:	2201      	movs	r2, #1
    6c54:	f10d 0113 	add.w	r1, sp, #19
    6c58:	47a8      	blx	r5
		if (count == 0) {
    6c5a:	9b05      	ldr	r3, [sp, #20]
    6c5c:	2b00      	cmp	r3, #0
    6c5e:	d0f2      	beq.n	6c46 <state_collect+0x4a>
		if (ascii_filter(data) != 0) {
    6c60:	f89d 1013 	ldrb.w	r1, [sp, #19]
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
    6c64:	f99d 3013 	ldrsb.w	r3, [sp, #19]
    6c68:	2b00      	cmp	r3, #0
    6c6a:	dbcc      	blt.n	6c06 <state_collect+0xa>
		switch (sh->ctx->receive_state) {
    6c6c:	68a2      	ldr	r2, [r4, #8]
    6c6e:	7953      	ldrb	r3, [r2, #5]
    6c70:	2b03      	cmp	r3, #3
    6c72:	f200 814c 	bhi.w	6f0e <state_collect+0x312>
    6c76:	e8df f013 	tbh	[pc, r3, lsl #1]
    6c7a:	0004      	.short	0x0004
    6c7c:	00c600b4 	.word	0x00c600b4
    6c80:	0147      	.short	0x0147
			if (process_nl(sh, data)) {
    6c82:	4620      	mov	r0, r4
    6c84:	f00a f90a 	bl	10e9c <process_nl>
    6c88:	2800      	cmp	r0, #0
    6c8a:	d141      	bne.n	6d10 <state_collect+0x114>
			switch (data) {
    6c8c:	f89d 1013 	ldrb.w	r1, [sp, #19]
    6c90:	291b      	cmp	r1, #27
    6c92:	d850      	bhi.n	6d36 <state_collect+0x13a>
    6c94:	291b      	cmp	r1, #27
    6c96:	f200 808b 	bhi.w	6db0 <state_collect+0x1b4>
    6c9a:	a301      	add	r3, pc, #4	; (adr r3, 6ca0 <state_collect+0xa4>)
    6c9c:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    6ca0:	00006c07 	.word	0x00006c07
    6ca4:	00006db1 	.word	0x00006db1
    6ca8:	00006db1 	.word	0x00006db1
    6cac:	00006db1 	.word	0x00006db1
    6cb0:	00006db1 	.word	0x00006db1
    6cb4:	00006db1 	.word	0x00006db1
    6cb8:	00006db1 	.word	0x00006db1
    6cbc:	00006db1 	.word	0x00006db1
    6cc0:	00006d8b 	.word	0x00006d8b
    6cc4:	00006d6d 	.word	0x00006d6d
    6cc8:	00006db1 	.word	0x00006db1
    6ccc:	00006db1 	.word	0x00006db1
    6cd0:	00006db1 	.word	0x00006db1
    6cd4:	00006db1 	.word	0x00006db1
    6cd8:	00006db1 	.word	0x00006db1
    6cdc:	00006db1 	.word	0x00006db1
    6ce0:	00006db1 	.word	0x00006db1
    6ce4:	00006db1 	.word	0x00006db1
    6ce8:	00006db1 	.word	0x00006db1
    6cec:	00006db1 	.word	0x00006db1
    6cf0:	00006db1 	.word	0x00006db1
    6cf4:	00006db1 	.word	0x00006db1
    6cf8:	00006db1 	.word	0x00006db1
    6cfc:	00006db1 	.word	0x00006db1
    6d00:	00006db1 	.word	0x00006db1
    6d04:	00006db1 	.word	0x00006db1
    6d08:	00006db1 	.word	0x00006db1
    6d0c:	00006d65 	.word	0x00006d65
				if (!sh->ctx->cmd_buff_len) {
    6d10:	68a3      	ldr	r3, [r4, #8]
    6d12:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    6d14:	b95b      	cbnz	r3, 6d2e <state_collect+0x132>
					history_mode_exit(sh);
    6d16:	4620      	mov	r0, r4
    6d18:	f00a fa37 	bl	1118a <history_mode_exit>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    6d1c:	497d      	ldr	r1, [pc, #500]	; (6f14 <state_collect+0x318>)
    6d1e:	6960      	ldr	r0, [r4, #20]
    6d20:	f00a fa25 	bl	1116e <z_shell_raw_fprintf>
				state_set(sh, SHELL_STATE_ACTIVE);
    6d24:	2102      	movs	r1, #2
    6d26:	4620      	mov	r0, r4
    6d28:	f7ff fc1e 	bl	6568 <state_set>
				continue;
    6d2c:	e76b      	b.n	6c06 <state_collect+0xa>
					(void)execute(sh);
    6d2e:	4620      	mov	r0, r4
    6d30:	f7ff fd4a 	bl	67c8 <execute>
    6d34:	e7f6      	b.n	6d24 <state_collect+0x128>
    6d36:	297f      	cmp	r1, #127	; 0x7f
    6d38:	d13a      	bne.n	6db0 <state_collect+0x1b4>
	return sh->ctx->cfg.flags.echo == 1;
    6d3a:	68a3      	ldr	r3, [r4, #8]
    6d3c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
				if (z_flag_echo_get(sh)) {
    6d40:	f013 0f02 	tst.w	r3, #2
    6d44:	f43f af5f 	beq.w	6c06 <state_collect+0xa>
					z_flag_history_exit_set(sh, true);
    6d48:	2101      	movs	r1, #1
    6d4a:	4620      	mov	r0, r4
    6d4c:	f00a f972 	bl	11034 <z_flag_history_exit_set>
	return sh->ctx->cfg.flags.mode_delete == 1;
    6d50:	68a3      	ldr	r3, [r4, #8]
    6d52:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
					if (z_flag_mode_delete_get(sh)) {
    6d56:	f013 0f08 	tst.w	r3, #8
    6d5a:	d025      	beq.n	6da8 <state_collect+0x1ac>
						z_shell_op_char_backspace(sh);
    6d5c:	4620      	mov	r0, r4
    6d5e:	f00b f960 	bl	12022 <z_shell_op_char_backspace>
    6d62:	e750      	b.n	6c06 <state_collect+0xa>
	sh->ctx->receive_state = state;
    6d64:	68a3      	ldr	r3, [r4, #8]
    6d66:	2201      	movs	r2, #1
    6d68:	715a      	strb	r2, [r3, #5]
}
    6d6a:	e74c      	b.n	6c06 <state_collect+0xa>
	return sh->ctx->cfg.flags.echo == 1;
    6d6c:	68a3      	ldr	r3, [r4, #8]
    6d6e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
				if (z_flag_echo_get(sh) &&
    6d72:	f013 0f02 	tst.w	r3, #2
    6d76:	f43f af46 	beq.w	6c06 <state_collect+0xa>
					z_flag_history_exit_set(sh, true);
    6d7a:	2101      	movs	r1, #1
    6d7c:	4620      	mov	r0, r4
    6d7e:	f00a f959 	bl	11034 <z_flag_history_exit_set>
					tab_handle(sh);
    6d82:	4620      	mov	r0, r4
    6d84:	f00a fb53 	bl	1142e <tab_handle>
    6d88:	e73d      	b.n	6c06 <state_collect+0xa>
    6d8a:	68a3      	ldr	r3, [r4, #8]
    6d8c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
				if (z_flag_echo_get(sh)) {
    6d90:	f013 0f02 	tst.w	r3, #2
    6d94:	f43f af37 	beq.w	6c06 <state_collect+0xa>
					z_flag_history_exit_set(sh, true);
    6d98:	2101      	movs	r1, #1
    6d9a:	4620      	mov	r0, r4
    6d9c:	f00a f94a 	bl	11034 <z_flag_history_exit_set>
					z_shell_op_char_backspace(sh);
    6da0:	4620      	mov	r0, r4
    6da2:	f00b f93e 	bl	12022 <z_shell_op_char_backspace>
    6da6:	e72e      	b.n	6c06 <state_collect+0xa>
						z_shell_op_char_delete(sh);
    6da8:	4620      	mov	r0, r4
    6daa:	f00b f91f 	bl	11fec <z_shell_op_char_delete>
    6dae:	e72a      	b.n	6c06 <state_collect+0xa>
    6db0:	f1a1 0320 	sub.w	r3, r1, #32
				if (isprint((int) data) != 0) {
    6db4:	2b5e      	cmp	r3, #94	; 0x5e
    6db6:	d90a      	bls.n	6dce <state_collect+0x1d2>
    6db8:	68a3      	ldr	r3, [r4, #8]
    6dba:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
				} else if (z_flag_echo_get(sh)) {
    6dbe:	f013 0f02 	tst.w	r3, #2
    6dc2:	f43f af20 	beq.w	6c06 <state_collect+0xa>
					ctrl_metakeys_handle(sh, data);
    6dc6:	4620      	mov	r0, r4
    6dc8:	f7ff fea2 	bl	6b10 <ctrl_metakeys_handle>
    6dcc:	e71b      	b.n	6c06 <state_collect+0xa>
					z_flag_history_exit_set(sh, true);
    6dce:	2101      	movs	r1, #1
    6dd0:	4620      	mov	r0, r4
    6dd2:	f00a f92f 	bl	11034 <z_flag_history_exit_set>
					z_shell_op_char_insert(sh, data);
    6dd6:	f89d 1013 	ldrb.w	r1, [sp, #19]
    6dda:	4620      	mov	r0, r4
    6ddc:	f00b f8e8 	bl	11fb0 <z_shell_op_char_insert>
    6de0:	e711      	b.n	6c06 <state_collect+0xa>
			if (data == '[') {
    6de2:	295b      	cmp	r1, #91	; 0x5b
    6de4:	d008      	beq.n	6df8 <state_collect+0x1fc>
    6de6:	f8d2 3260 	ldr.w	r3, [r2, #608]	; 0x260
			} else if (z_flag_echo_get(sh)) {
    6dea:	f013 0f02 	tst.w	r3, #2
    6dee:	d106      	bne.n	6dfe <state_collect+0x202>
	sh->ctx->receive_state = state;
    6df0:	68a3      	ldr	r3, [r4, #8]
    6df2:	2200      	movs	r2, #0
    6df4:	715a      	strb	r2, [r3, #5]
}
    6df6:	e706      	b.n	6c06 <state_collect+0xa>
	sh->ctx->receive_state = state;
    6df8:	2302      	movs	r3, #2
    6dfa:	7153      	strb	r3, [r2, #5]
}
    6dfc:	e703      	b.n	6c06 <state_collect+0xa>
				alt_metakeys_handle(sh, data);
    6dfe:	4620      	mov	r0, r4
    6e00:	f00a fb5e 	bl	114c0 <alt_metakeys_handle>
    6e04:	e7f4      	b.n	6df0 <state_collect+0x1f4>
	sh->ctx->receive_state = state;
    6e06:	2300      	movs	r3, #0
    6e08:	7153      	strb	r3, [r2, #5]
    6e0a:	68a3      	ldr	r3, [r4, #8]
    6e0c:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
			if (!z_flag_echo_get(sh)) {
    6e10:	f012 0f02 	tst.w	r2, #2
    6e14:	f43f aef7 	beq.w	6c06 <state_collect+0xa>
			switch (data) {
    6e18:	3931      	subs	r1, #49	; 0x31
    6e1a:	291b      	cmp	r1, #27
    6e1c:	f63f aef3 	bhi.w	6c06 <state_collect+0xa>
    6e20:	a201      	add	r2, pc, #4	; (adr r2, 6e28 <state_collect+0x22c>)
    6e22:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
    6e26:	bf00      	nop
    6e28:	00006ec9 	.word	0x00006ec9
    6e2c:	00006ed5 	.word	0x00006ed5
    6e30:	00006eef 	.word	0x00006eef
    6e34:	00006ebd 	.word	0x00006ebd
    6e38:	00006c07 	.word	0x00006c07
    6e3c:	00006c07 	.word	0x00006c07
    6e40:	00006c07 	.word	0x00006c07
    6e44:	00006c07 	.word	0x00006c07
    6e48:	00006c07 	.word	0x00006c07
    6e4c:	00006c07 	.word	0x00006c07
    6e50:	00006c07 	.word	0x00006c07
    6e54:	00006c07 	.word	0x00006c07
    6e58:	00006c07 	.word	0x00006c07
    6e5c:	00006c07 	.word	0x00006c07
    6e60:	00006c07 	.word	0x00006c07
    6e64:	00006c07 	.word	0x00006c07
    6e68:	00006e99 	.word	0x00006e99
    6e6c:	00006ea3 	.word	0x00006ea3
    6e70:	00006ead 	.word	0x00006ead
    6e74:	00006eb5 	.word	0x00006eb5
    6e78:	00006c07 	.word	0x00006c07
    6e7c:	00006ec1 	.word	0x00006ec1
    6e80:	00006c07 	.word	0x00006c07
    6e84:	00006ecd 	.word	0x00006ecd
    6e88:	00006c07 	.word	0x00006c07
    6e8c:	00006c07 	.word	0x00006c07
    6e90:	00006c07 	.word	0x00006c07
    6e94:	00006ed9 	.word	0x00006ed9
				history_handle(sh, true);
    6e98:	2101      	movs	r1, #1
    6e9a:	4620      	mov	r0, r4
    6e9c:	f00a fb1f 	bl	114de <history_handle>
				break;
    6ea0:	e6b1      	b.n	6c06 <state_collect+0xa>
				history_handle(sh, false);
    6ea2:	2100      	movs	r1, #0
    6ea4:	4620      	mov	r0, r4
    6ea6:	f00a fb1a 	bl	114de <history_handle>
				break;
    6eaa:	e6ac      	b.n	6c06 <state_collect+0xa>
				z_shell_op_right_arrow(sh);
    6eac:	4620      	mov	r0, r4
    6eae:	f00a ffb1 	bl	11e14 <z_shell_op_right_arrow>
				break;
    6eb2:	e6a8      	b.n	6c06 <state_collect+0xa>
				z_shell_op_left_arrow(sh);
    6eb4:	4620      	mov	r0, r4
    6eb6:	f00a ffa3 	bl	11e00 <z_shell_op_left_arrow>
				break;
    6eba:	e6a4      	b.n	6c06 <state_collect+0xa>
	sh->ctx->receive_state = state;
    6ebc:	2203      	movs	r2, #3
    6ebe:	715a      	strb	r2, [r3, #5]
				z_shell_op_cursor_end_move(sh);
    6ec0:	4620      	mov	r0, r4
    6ec2:	f00a ff94 	bl	11dee <z_shell_op_cursor_end_move>
				break;
    6ec6:	e69e      	b.n	6c06 <state_collect+0xa>
	sh->ctx->receive_state = state;
    6ec8:	2203      	movs	r2, #3
    6eca:	715a      	strb	r2, [r3, #5]
				z_shell_op_cursor_home_move(sh);
    6ecc:	4620      	mov	r0, r4
    6ece:	f00a ff86 	bl	11dde <z_shell_op_cursor_home_move>
				break;
    6ed2:	e698      	b.n	6c06 <state_collect+0xa>
	sh->ctx->receive_state = state;
    6ed4:	2203      	movs	r2, #3
    6ed6:	715a      	strb	r2, [r3, #5]
	return sh->ctx->cfg.flags.insert_mode == 1;
    6ed8:	68a3      	ldr	r3, [r4, #8]
    6eda:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
    6ede:	f001 0101 	and.w	r1, r1, #1
				z_flag_insert_mode_set(sh, !status);
    6ee2:	f081 0101 	eor.w	r1, r1, #1
    6ee6:	4620      	mov	r0, r4
    6ee8:	f00a f8c4 	bl	11074 <z_flag_insert_mode_set>
				break;
    6eec:	e68b      	b.n	6c06 <state_collect+0xa>
	sh->ctx->receive_state = state;
    6eee:	2203      	movs	r2, #3
    6ef0:	715a      	strb	r2, [r3, #5]
	return sh->ctx->cfg.flags.echo == 1;
    6ef2:	68a3      	ldr	r3, [r4, #8]
    6ef4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
				if (z_flag_echo_get(sh)) {
    6ef8:	f013 0f02 	tst.w	r3, #2
    6efc:	f43f ae83 	beq.w	6c06 <state_collect+0xa>
					z_shell_op_char_delete(sh);
    6f00:	4620      	mov	r0, r4
    6f02:	f00b f873 	bl	11fec <z_shell_op_char_delete>
    6f06:	e67e      	b.n	6c06 <state_collect+0xa>
	sh->ctx->receive_state = state;
    6f08:	2300      	movs	r3, #0
    6f0a:	7153      	strb	r3, [r2, #5]
}
    6f0c:	e67b      	b.n	6c06 <state_collect+0xa>
	sh->ctx->receive_state = state;
    6f0e:	2300      	movs	r3, #0
    6f10:	7153      	strb	r3, [r2, #5]
}
    6f12:	e678      	b.n	6c06 <state_collect+0xa>
    6f14:	00015ec0 	.word	0x00015ec0

00006f18 <shell_init>:
}

int shell_init(const struct shell *sh, const void *transport_config,
	       struct shell_backend_config_flags cfg_flags,
	       bool log_backend, uint32_t init_log_level)
{
    6f18:	b570      	push	{r4, r5, r6, lr}
    6f1a:	b088      	sub	sp, #32
    6f1c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(sh);
	__ASSERT_NO_MSG(sh->ctx && sh->iface && sh->default_prompt);

	if (sh->ctx->tid) {
    6f1e:	6880      	ldr	r0, [r0, #8]
    6f20:	f8d0 030c 	ldr.w	r0, [r0, #780]	; 0x30c
    6f24:	bb10      	cbnz	r0, 6f6c <shell_init+0x54>
    6f26:	461d      	mov	r5, r3
		return -EALREADY;
	}

	int err = instance_init(sh, transport_config, cfg_flags);
    6f28:	4620      	mov	r0, r4
    6f2a:	f7ff fb43 	bl	65b4 <instance_init>

	if (err != 0) {
    6f2e:	4606      	mov	r6, r0
    6f30:	b110      	cbz	r0, 6f38 <shell_init+0x20>

	sh->ctx->tid = tid;
	k_thread_name_set(tid, sh->thread_name);

	return 0;
}
    6f32:	4630      	mov	r0, r6
    6f34:	b008      	add	sp, #32
    6f36:	bd70      	pop	{r4, r5, r6, pc}
	k_tid_t tid = k_thread_create(sh->thread,
    6f38:	6aa0      	ldr	r0, [r4, #40]	; 0x28
				  sh->stack, CONFIG_SHELL_STACK_SIZE,
    6f3a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    6f3c:	2200      	movs	r2, #0
    6f3e:	2300      	movs	r3, #0
    6f40:	e9cd 2306 	strd	r2, r3, [sp, #24]
    6f44:	2300      	movs	r3, #0
    6f46:	9304      	str	r3, [sp, #16]
    6f48:	230e      	movs	r3, #14
    6f4a:	9303      	str	r3, [sp, #12]
    6f4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6f4e:	9302      	str	r3, [sp, #8]
    6f50:	9501      	str	r5, [sp, #4]
    6f52:	9400      	str	r4, [sp, #0]
    6f54:	4b07      	ldr	r3, [pc, #28]	; (6f74 <shell_init+0x5c>)
    6f56:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6f5a:	f00d fbd2 	bl	14702 <z_impl_k_thread_create>
	sh->ctx->tid = tid;
    6f5e:	68a3      	ldr	r3, [r4, #8]
    6f60:	f8c3 030c 	str.w	r0, [r3, #780]	; 0x30c
	k_thread_name_set(tid, sh->thread_name);
    6f64:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return z_impl_k_thread_name_set(thread, str);
    6f66:	f006 fa6f 	bl	d448 <z_impl_k_thread_name_set>
	return 0;
    6f6a:	e7e2      	b.n	6f32 <shell_init+0x1a>
		return -EALREADY;
    6f6c:	f06f 0677 	mvn.w	r6, #119	; 0x77
    6f70:	e7df      	b.n	6f32 <shell_init+0x1a>
    6f72:	bf00      	nop
    6f74:	00006fd5 	.word	0x00006fd5

00006f78 <shell_start>:
		__ASSERT_NO_MSG(0);
	}
}

int shell_start(const struct shell *sh)
{
    6f78:	b510      	push	{r4, lr}
    6f7a:	4604      	mov	r4, r0
	return sh->ctx->state;
    6f7c:	6880      	ldr	r0, [r0, #8]
    6f7e:	7903      	ldrb	r3, [r0, #4]
	__ASSERT_NO_MSG(sh);
	__ASSERT_NO_MSG(sh->ctx && sh->iface && sh->default_prompt);

	if (state_get(sh) != SHELL_STATE_INITIALIZED) {
    6f80:	2b01      	cmp	r3, #1
    6f82:	d121      	bne.n	6fc8 <shell_start+0x50>
		return -ENOTSUP;
	}

	k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
    6f84:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_lock(mutex, timeout);
    6f88:	f04f 32ff 	mov.w	r2, #4294967295
    6f8c:	f04f 33ff 	mov.w	r3, #4294967295
    6f90:	f006 fb8a 	bl	d6a8 <z_impl_k_mutex_lock>

	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		z_shell_vt100_color_set(sh, SHELL_NORMAL);
    6f94:	2108      	movs	r1, #8
    6f96:	4620      	mov	r0, r4
    6f98:	f000 fa4c 	bl	7434 <z_shell_vt100_color_set>
	}

	if (z_shell_strlen(sh->default_prompt) > 0) {
    6f9c:	6820      	ldr	r0, [r4, #0]
    6f9e:	b118      	cbz	r0, 6fa8 <shell_start+0x30>
    6fa0:	f00b fe9d 	bl	12cde <strlen>
    6fa4:	b280      	uxth	r0, r0
    6fa6:	b950      	cbnz	r0, 6fbe <shell_start+0x46>
		z_shell_raw_fprintf(sh->fprintf_ctx, "\n\n");
	}
	state_set(sh, SHELL_STATE_ACTIVE);
    6fa8:	2102      	movs	r1, #2
    6faa:	4620      	mov	r0, r4
    6fac:	f7ff fadc 	bl	6568 <state_set>

	k_mutex_unlock(&sh->ctx->wr_mtx);
    6fb0:	68a0      	ldr	r0, [r4, #8]
    6fb2:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_unlock(mutex);
    6fb6:	f006 fbfb 	bl	d7b0 <z_impl_k_mutex_unlock>

	return 0;
    6fba:	2000      	movs	r0, #0
}
    6fbc:	bd10      	pop	{r4, pc}
		z_shell_raw_fprintf(sh->fprintf_ctx, "\n\n");
    6fbe:	4904      	ldr	r1, [pc, #16]	; (6fd0 <shell_start+0x58>)
    6fc0:	6960      	ldr	r0, [r4, #20]
    6fc2:	f00a f8d4 	bl	1116e <z_shell_raw_fprintf>
    6fc6:	e7ef      	b.n	6fa8 <shell_start+0x30>
		return -ENOTSUP;
    6fc8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6fcc:	e7f6      	b.n	6fbc <shell_start+0x44>
    6fce:	bf00      	nop
    6fd0:	000165e0 	.word	0x000165e0

00006fd4 <shell_thread>:
{
    6fd4:	b570      	push	{r4, r5, r6, lr}
    6fd6:	4604      	mov	r4, r0
    6fd8:	460d      	mov	r5, r1
    6fda:	4616      	mov	r6, r2
	err = sh->iface->api->enable(sh->iface, false);
    6fdc:	6840      	ldr	r0, [r0, #4]
    6fde:	6803      	ldr	r3, [r0, #0]
    6fe0:	689b      	ldr	r3, [r3, #8]
    6fe2:	2100      	movs	r1, #0
    6fe4:	4798      	blx	r3
	if (err != 0) {
    6fe6:	b9f0      	cbnz	r0, 7026 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26>
	if (IS_ENABLED(CONFIG_SHELL_LOG_BACKEND) && log_backend
    6fe8:	b125      	cbz	r5, 6ff4 <shell_thread+0x20>
		z_shell_log_backend_enable(sh->log_backend, (void *)sh,
    6fea:	4632      	mov	r2, r6
    6fec:	4621      	mov	r1, r4
    6fee:	69e0      	ldr	r0, [r4, #28]
    6ff0:	f00b f96f 	bl	122d2 <z_shell_log_backend_enable>
		err = shell_start(sh);
    6ff4:	4620      	mov	r0, r4
    6ff6:	f7ff ffbf 	bl	6f78 <shell_start>
		if (err != 0) {
    6ffa:	b9a0      	cbnz	r0, 7026 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26>
    6ffc:	e019      	b.n	7032 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x32>
			k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
    6ffe:	68a0      	ldr	r0, [r4, #8]
    7000:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_lock(mutex, timeout);
    7004:	f04f 32ff 	mov.w	r2, #4294967295
    7008:	f04f 33ff 	mov.w	r3, #4294967295
    700c:	f006 fb4c 	bl	d6a8 <z_impl_k_mutex_lock>
			z_shell_fprintf(sh, SHELL_ERROR,
    7010:	462b      	mov	r3, r5
    7012:	4a1e      	ldr	r2, [pc, #120]	; (708c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>)
    7014:	2101      	movs	r1, #1
    7016:	4620      	mov	r0, r4
    7018:	f00a ff86 	bl	11f28 <z_shell_fprintf>
			k_mutex_unlock(&sh->ctx->wr_mtx);
    701c:	68a0      	ldr	r0, [r4, #8]
    701e:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_unlock(mutex);
    7022:	f006 fbc5 	bl	d7b0 <z_impl_k_mutex_unlock>
}
    7026:	bd70      	pop	{r4, r5, r6, pc}
		k_mutex_unlock(&sh->ctx->wr_mtx);
    7028:	68a0      	ldr	r0, [r4, #8]
    702a:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    702e:	f006 fbbf 	bl	d7b0 <z_impl_k_mutex_unlock>
		err = k_poll(sh->ctx->events, SHELL_SIGNAL_TXDONE,
    7032:	68a0      	ldr	r0, [r4, #8]
    7034:	f500 702a 	add.w	r0, r0, #680	; 0x2a8
	return z_impl_k_poll(events, num_events, timeout);
    7038:	f04f 32ff 	mov.w	r2, #4294967295
    703c:	f04f 33ff 	mov.w	r3, #4294967295
    7040:	2103      	movs	r1, #3
    7042:	f007 fa2f 	bl	e4a4 <z_impl_k_poll>
		if (err != 0) {
    7046:	4605      	mov	r5, r0
    7048:	2800      	cmp	r0, #0
    704a:	d1d8      	bne.n	6ffe <shell_thread+0x2a>
		k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
    704c:	68a0      	ldr	r0, [r4, #8]
    704e:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_lock(mutex, timeout);
    7052:	f04f 32ff 	mov.w	r2, #4294967295
    7056:	f04f 33ff 	mov.w	r3, #4294967295
    705a:	f006 fb25 	bl	d6a8 <z_impl_k_mutex_lock>
		shell_signal_handle(sh, SHELL_SIGNAL_KILL, kill_handler);
    705e:	4a0c      	ldr	r2, [pc, #48]	; (7090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>)
    7060:	2102      	movs	r1, #2
    7062:	4620      	mov	r0, r4
    7064:	f00a f859 	bl	1111a <shell_signal_handle>
		shell_signal_handle(sh, SHELL_SIGNAL_RXRDY, shell_process);
    7068:	4a0a      	ldr	r2, [pc, #40]	; (7094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>)
    706a:	2100      	movs	r1, #0
    706c:	4620      	mov	r0, r4
    706e:	f00a f854 	bl	1111a <shell_signal_handle>
			shell_signal_handle(sh, SHELL_SIGNAL_LOG_MSG,
    7072:	4a09      	ldr	r2, [pc, #36]	; (7098 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x98>)
    7074:	2101      	movs	r1, #1
    7076:	4620      	mov	r0, r4
    7078:	f00a f84f 	bl	1111a <shell_signal_handle>
		if (sh->iface->api->update) {
    707c:	6860      	ldr	r0, [r4, #4]
    707e:	6803      	ldr	r3, [r0, #0]
    7080:	695b      	ldr	r3, [r3, #20]
    7082:	2b00      	cmp	r3, #0
    7084:	d0d0      	beq.n	7028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
			sh->iface->api->update(sh->iface);
    7086:	4798      	blx	r3
    7088:	e7ce      	b.n	7028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    708a:	bf00      	nop
    708c:	00016f40 	.word	0x00016f40
    7090:	000110f5 	.word	0x000110f5
    7094:	0001158f 	.word	0x0001158f
    7098:	00010ee3 	.word	0x00010ee3

0000709c <cmd_help>:

	return state_get(sh) ==	SHELL_STATE_ACTIVE;
}

static int cmd_help(const struct shell *sh, size_t argc, char **argv)
{
    709c:	b510      	push	{r4, lr}
    709e:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

#if defined(CONFIG_SHELL_TAB)
	shell_print(sh, "Please press the <Tab> button to see all available "
    70a0:	4a0c      	ldr	r2, [pc, #48]	; (70d4 <cmd_help+0x38>)
    70a2:	2108      	movs	r1, #8
    70a4:	f00a fac2 	bl	1162c <shell_fprintf>
			   "commands.");
#endif

#if defined(CONFIG_SHELL_TAB_AUTOCOMPLETION)
	shell_print(sh,
    70a8:	4a0b      	ldr	r2, [pc, #44]	; (70d8 <cmd_help+0x3c>)
    70aa:	2108      	movs	r1, #8
    70ac:	4620      	mov	r0, r4
    70ae:	f00a fabd 	bl	1162c <shell_fprintf>
		"You can also use the <Tab> button to prompt or auto-complete"
		" all commands or its subcommands.");
#endif

#if defined(CONFIG_SHELL_HELP)
	shell_print(sh,
    70b2:	4a0a      	ldr	r2, [pc, #40]	; (70dc <cmd_help+0x40>)
    70b4:	2108      	movs	r1, #8
    70b6:	4620      	mov	r0, r4
    70b8:	f00a fab8 	bl	1162c <shell_fprintf>
		"You can try to call commands with <-h> or <--help> parameter"
		" for more information.");
#endif

#if defined(CONFIG_SHELL_METAKEYS)
	shell_print(sh,
    70bc:	4a08      	ldr	r2, [pc, #32]	; (70e0 <cmd_help+0x44>)
    70be:	2108      	movs	r1, #8
    70c0:	4620      	mov	r0, r4
    70c2:	f00a fab3 	bl	1162c <shell_fprintf>
		"Please refer to shell documentation for more details.");
#endif

	if (IS_ENABLED(CONFIG_SHELL_HELP)) {
		/* For NULL argument function will print all root commands */
		z_shell_help_subcmd_print(sh, NULL,
    70c6:	4a07      	ldr	r2, [pc, #28]	; (70e4 <cmd_help+0x48>)
    70c8:	2100      	movs	r1, #0
    70ca:	4620      	mov	r0, r4
    70cc:	f00b f98c 	bl	123e8 <z_shell_help_subcmd_print>
			shell_print(sh, "  %s", entry->syntax);
		}
	}

	return 0;
}
    70d0:	2000      	movs	r0, #0
    70d2:	bd10      	pop	{r4, pc}
    70d4:	00016f58 	.word	0x00016f58
    70d8:	00016f98 	.word	0x00016f98
    70dc:	00016ff8 	.word	0x00016ff8
    70e0:	0001704c 	.word	0x0001704c
    70e4:	000170e8 	.word	0x000170e8

000070e8 <shell_hexdump_line>:
{
    70e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    70ea:	4605      	mov	r5, r0
    70ec:	4617      	mov	r7, r2
    70ee:	461e      	mov	r6, r3
	shell_fprintf(sh, SHELL_NORMAL, "%08X: ", offset);
    70f0:	460b      	mov	r3, r1
    70f2:	4a28      	ldr	r2, [pc, #160]	; (7194 <shell_hexdump_line+0xac>)
    70f4:	2108      	movs	r1, #8
    70f6:	f00a fa99 	bl	1162c <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    70fa:	2400      	movs	r4, #0
    70fc:	e00b      	b.n	7116 <shell_hexdump_line+0x2e>
			shell_fprintf(sh, SHELL_NORMAL, " ");
    70fe:	4a26      	ldr	r2, [pc, #152]	; (7198 <shell_hexdump_line+0xb0>)
    7100:	2108      	movs	r1, #8
    7102:	4628      	mov	r0, r5
    7104:	f00a fa92 	bl	1162c <shell_fprintf>
    7108:	e00c      	b.n	7124 <shell_hexdump_line+0x3c>
			shell_fprintf(sh, SHELL_NORMAL, "   ");
    710a:	4a24      	ldr	r2, [pc, #144]	; (719c <shell_hexdump_line+0xb4>)
    710c:	2108      	movs	r1, #8
    710e:	4628      	mov	r0, r5
    7110:	f00a fa8c 	bl	1162c <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    7114:	3401      	adds	r4, #1
    7116:	2c0f      	cmp	r4, #15
    7118:	dc0d      	bgt.n	7136 <shell_hexdump_line+0x4e>
		if (i > 0 && !(i % 8)) {
    711a:	2c00      	cmp	r4, #0
    711c:	dd02      	ble.n	7124 <shell_hexdump_line+0x3c>
    711e:	f014 0f07 	tst.w	r4, #7
    7122:	d0ec      	beq.n	70fe <shell_hexdump_line+0x16>
		if (i < len) {
    7124:	42b4      	cmp	r4, r6
    7126:	d2f0      	bcs.n	710a <shell_hexdump_line+0x22>
			shell_fprintf(sh, SHELL_NORMAL, "%02x ",
    7128:	5d3b      	ldrb	r3, [r7, r4]
    712a:	4a1d      	ldr	r2, [pc, #116]	; (71a0 <shell_hexdump_line+0xb8>)
    712c:	2108      	movs	r1, #8
    712e:	4628      	mov	r0, r5
    7130:	f00a fa7c 	bl	1162c <shell_fprintf>
    7134:	e7ee      	b.n	7114 <shell_hexdump_line+0x2c>
	shell_fprintf(sh, SHELL_NORMAL, "|");
    7136:	4a1b      	ldr	r2, [pc, #108]	; (71a4 <shell_hexdump_line+0xbc>)
    7138:	2108      	movs	r1, #8
    713a:	4628      	mov	r0, r5
    713c:	f00a fa76 	bl	1162c <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    7140:	2400      	movs	r4, #0
    7142:	e00b      	b.n	715c <shell_hexdump_line+0x74>
			shell_fprintf(sh, SHELL_NORMAL, " ");
    7144:	4a14      	ldr	r2, [pc, #80]	; (7198 <shell_hexdump_line+0xb0>)
    7146:	2108      	movs	r1, #8
    7148:	4628      	mov	r0, r5
    714a:	f00a fa6f 	bl	1162c <shell_fprintf>
    714e:	e00c      	b.n	716a <shell_hexdump_line+0x82>
			shell_fprintf(sh, SHELL_NORMAL, "%c",
    7150:	4a15      	ldr	r2, [pc, #84]	; (71a8 <shell_hexdump_line+0xc0>)
    7152:	2108      	movs	r1, #8
    7154:	4628      	mov	r0, r5
    7156:	f00a fa69 	bl	1162c <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    715a:	3401      	adds	r4, #1
    715c:	2c0f      	cmp	r4, #15
    715e:	dc13      	bgt.n	7188 <shell_hexdump_line+0xa0>
		if (i > 0 && !(i % 8)) {
    7160:	2c00      	cmp	r4, #0
    7162:	dd02      	ble.n	716a <shell_hexdump_line+0x82>
    7164:	f014 0f07 	tst.w	r4, #7
    7168:	d0ec      	beq.n	7144 <shell_hexdump_line+0x5c>
		if (i < len) {
    716a:	42b4      	cmp	r4, r6
    716c:	d206      	bcs.n	717c <shell_hexdump_line+0x94>
			char c = data[i];
    716e:	5d3b      	ldrb	r3, [r7, r4]
    7170:	f1a3 0220 	sub.w	r2, r3, #32
			shell_fprintf(sh, SHELL_NORMAL, "%c",
    7174:	2a5e      	cmp	r2, #94	; 0x5e
    7176:	d9eb      	bls.n	7150 <shell_hexdump_line+0x68>
    7178:	232e      	movs	r3, #46	; 0x2e
    717a:	e7e9      	b.n	7150 <shell_hexdump_line+0x68>
			shell_fprintf(sh, SHELL_NORMAL, " ");
    717c:	4a06      	ldr	r2, [pc, #24]	; (7198 <shell_hexdump_line+0xb0>)
    717e:	2108      	movs	r1, #8
    7180:	4628      	mov	r0, r5
    7182:	f00a fa53 	bl	1162c <shell_fprintf>
    7186:	e7e8      	b.n	715a <shell_hexdump_line+0x72>
	shell_print(sh, "|");
    7188:	4a08      	ldr	r2, [pc, #32]	; (71ac <shell_hexdump_line+0xc4>)
    718a:	2108      	movs	r1, #8
    718c:	4628      	mov	r0, r5
    718e:	f00a fa4d 	bl	1162c <shell_fprintf>
}
    7192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7194:	00017100 	.word	0x00017100
    7198:	00015d98 	.word	0x00015d98
    719c:	00015db0 	.word	0x00015db0
    71a0:	00015da8 	.word	0x00015da8
    71a4:	00015db4 	.word	0x00015db4
    71a8:	00017154 	.word	0x00017154
    71ac:	00017108 	.word	0x00017108

000071b0 <z_shell_fprintf_fmt>:
	return 0;
}

void z_shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
			 const char *fmt, va_list args)
{
    71b0:	b510      	push	{r4, lr}
    71b2:	b082      	sub	sp, #8
    71b4:	4604      	mov	r4, r0
    71b6:	4613      	mov	r3, r2
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    71b8:	2200      	movs	r2, #0
    71ba:	9200      	str	r2, [sp, #0]
    71bc:	460a      	mov	r2, r1
    71be:	4601      	mov	r1, r0
    71c0:	4805      	ldr	r0, [pc, #20]	; (71d8 <z_shell_fprintf_fmt+0x28>)
    71c2:	f7fb ff65 	bl	3090 <z_cbvprintf_impl>
	(void)cbvprintf(out_func, (void *)sh_fprintf, fmt, args);

	if (sh_fprintf->ctrl_blk->autoflush) {
    71c6:	6923      	ldr	r3, [r4, #16]
    71c8:	791b      	ldrb	r3, [r3, #4]
    71ca:	b90b      	cbnz	r3, 71d0 <z_shell_fprintf_fmt+0x20>
		z_shell_fprintf_buffer_flush(sh_fprintf);
	}
}
    71cc:	b002      	add	sp, #8
    71ce:	bd10      	pop	{r4, pc}
		z_shell_fprintf_buffer_flush(sh_fprintf);
    71d0:	4620      	mov	r0, r4
    71d2:	f00a fa55 	bl	11680 <z_shell_fprintf_buffer_flush>
}
    71d6:	e7f9      	b.n	71cc <z_shell_fprintf_fmt+0x1c>
    71d8:	00011699 	.word	0x00011699

000071dc <z_shell_cmd_get>:

const struct shell_static_entry *z_shell_cmd_get(
					const struct shell_static_entry *parent,
					size_t idx,
					struct shell_static_entry *dloc)
{
    71dc:	468c      	mov	ip, r1
	const struct shell_static_entry *res = NULL;

	if (parent == NULL) {
    71de:	4603      	mov	r3, r0
    71e0:	b188      	cbz	r0, 7206 <z_shell_cmd_get+0x2a>
{
    71e2:	b510      	push	{r4, lr}
    71e4:	4614      	mov	r4, r2
				shell_root_cmd_get(idx)->entry : NULL;
	}

	__ASSERT_NO_MSG(dloc != NULL);

	if (parent->subcmd) {
    71e6:	6880      	ldr	r0, [r0, #8]
    71e8:	b320      	cbz	r0, 7234 <z_shell_cmd_get+0x58>
	return (entry >= __shell_dynamic_subcmds_start) &&
    71ea:	4b15      	ldr	r3, [pc, #84]	; (7240 <z_shell_cmd_get+0x64>)
    71ec:	4298      	cmp	r0, r3
    71ee:	d314      	bcc.n	721a <z_shell_cmd_get+0x3e>
    71f0:	4b14      	ldr	r3, [pc, #80]	; (7244 <z_shell_cmd_get+0x68>)
    71f2:	4298      	cmp	r0, r3
    71f4:	d211      	bcs.n	721a <z_shell_cmd_get+0x3e>
		if (is_dynamic_cmd(parent->subcmd)) {
			parent->subcmd->dynamic_get(idx, dloc);
    71f6:	6803      	ldr	r3, [r0, #0]
    71f8:	4611      	mov	r1, r2
    71fa:	4660      	mov	r0, ip
    71fc:	4798      	blx	r3
			if (dloc->syntax != NULL) {
    71fe:	6820      	ldr	r0, [r4, #0]
    7200:	b1c0      	cbz	r0, 7234 <z_shell_cmd_get+0x58>
				res = dloc;
    7202:	4620      	mov	r0, r4
    7204:	e016      	b.n	7234 <z_shell_cmd_get+0x58>
				shell_root_cmd_get(idx)->entry : NULL;
    7206:	4a10      	ldr	r2, [pc, #64]	; (7248 <z_shell_cmd_get+0x6c>)
    7208:	4910      	ldr	r1, [pc, #64]	; (724c <z_shell_cmd_get+0x70>)
    720a:	1a52      	subs	r2, r2, r1
    720c:	ebbc 0f92 	cmp.w	ip, r2, lsr #2
    7210:	d201      	bcs.n	7216 <z_shell_cmd_get+0x3a>
    7212:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
    7216:	4618      	mov	r0, r3
			}
		}
	}

	return res;
}
    7218:	4770      	bx	lr
	return (entry >= __shell_subcmds_start) &&
    721a:	4b0d      	ldr	r3, [pc, #52]	; (7250 <z_shell_cmd_get+0x74>)
    721c:	4298      	cmp	r0, r3
    721e:	d302      	bcc.n	7226 <z_shell_cmd_get+0x4a>
    7220:	4b0c      	ldr	r3, [pc, #48]	; (7254 <z_shell_cmd_get+0x78>)
    7222:	4298      	cmp	r0, r3
    7224:	d307      	bcc.n	7236 <z_shell_cmd_get+0x5a>
				entry_list = parent->subcmd->entry;
    7226:	6800      	ldr	r0, [r0, #0]
			if (entry_list[idx].syntax != NULL) {
    7228:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
    722c:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    7230:	6803      	ldr	r3, [r0, #0]
    7232:	b11b      	cbz	r3, 723c <z_shell_cmd_get+0x60>
}
    7234:	bd10      	pop	{r4, pc}
				idx++;
    7236:	f10c 0c01 	add.w	ip, ip, #1
    723a:	e7f5      	b.n	7228 <z_shell_cmd_get+0x4c>
	const struct shell_static_entry *res = NULL;
    723c:	4618      	mov	r0, r3
    723e:	e7f9      	b.n	7234 <z_shell_cmd_get+0x58>
    7240:	000154a4 	.word	0x000154a4
    7244:	000154b4 	.word	0x000154b4
    7248:	00015490 	.word	0x00015490
    724c:	0001545c 	.word	0x0001545c
    7250:	00015490 	.word	0x00015490
    7254:	000154a4 	.word	0x000154a4

00007258 <z_cursor_save>:
{
    7258:	b508      	push	{r3, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
    725a:	6883      	ldr	r3, [r0, #8]
    725c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
    7260:	f013 0f20 	tst.w	r3, #32
    7264:	d100      	bne.n	7268 <z_cursor_save+0x10>
}
    7266:	bd08      	pop	{r3, pc}
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
    7268:	4902      	ldr	r1, [pc, #8]	; (7274 <z_cursor_save+0x1c>)
    726a:	6940      	ldr	r0, [r0, #20]
    726c:	f00a fced 	bl	11c4a <z_shell_raw_fprintf>
}
    7270:	e7f9      	b.n	7266 <z_cursor_save+0xe>
    7272:	bf00      	nop
    7274:	000154ec 	.word	0x000154ec

00007278 <z_clear_eos>:
{
    7278:	b508      	push	{r3, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
    727a:	6883      	ldr	r3, [r0, #8]
    727c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    7280:	f013 0f20 	tst.w	r3, #32
    7284:	d100      	bne.n	7288 <z_clear_eos+0x10>
}
    7286:	bd08      	pop	{r3, pc}
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    7288:	4902      	ldr	r1, [pc, #8]	; (7294 <z_clear_eos+0x1c>)
    728a:	6940      	ldr	r0, [r0, #20]
    728c:	f00a fcdd 	bl	11c4a <z_shell_raw_fprintf>
}
    7290:	e7f9      	b.n	7286 <z_clear_eos+0xe>
    7292:	bf00      	nop
    7294:	000154f0 	.word	0x000154f0

00007298 <z_cursor_restore>:
{
    7298:	b508      	push	{r3, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
    729a:	6883      	ldr	r3, [r0, #8]
    729c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    72a0:	f013 0f20 	tst.w	r3, #32
    72a4:	d100      	bne.n	72a8 <z_cursor_restore+0x10>
}
    72a6:	bd08      	pop	{r3, pc}
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    72a8:	4902      	ldr	r1, [pc, #8]	; (72b4 <z_cursor_restore+0x1c>)
    72aa:	6940      	ldr	r0, [r0, #20]
    72ac:	f00a fccd 	bl	11c4a <z_shell_raw_fprintf>
}
    72b0:	e7f9      	b.n	72a6 <z_cursor_restore+0xe>
    72b2:	bf00      	nop
    72b4:	000154f8 	.word	0x000154f8

000072b8 <vt100_bgcolor_set>:
{
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	if (bgcolor >= VT100_COLOR_END) {
    72b8:	2908      	cmp	r1, #8
    72ba:	d815      	bhi.n	72e8 <vt100_bgcolor_set+0x30>
		return;
	}

	if ((bgcolor == SHELL_NORMAL) ||
    72bc:	d014      	beq.n	72e8 <vt100_bgcolor_set+0x30>
{
    72be:	b508      	push	{r3, lr}
	    (sh->ctx->vt100_ctx.col.bgcol == bgcolor)) {
    72c0:	6883      	ldr	r3, [r0, #8]
    72c2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
	if ((bgcolor == SHELL_NORMAL) ||
    72c6:	428a      	cmp	r2, r1
    72c8:	d007      	beq.n	72da <vt100_bgcolor_set+0x22>
		return;
	}

	sh->ctx->vt100_ctx.col.bgcol = bgcolor;
    72ca:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
	return sh->ctx->cfg.flags.use_vt100 == 1;
    72ce:	6883      	ldr	r3, [r0, #8]
    72d0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, "\e[403%dm", bgcolor);
    72d4:	f013 0f20 	tst.w	r3, #32
    72d8:	d100      	bne.n	72dc <vt100_bgcolor_set+0x24>
}
    72da:	bd08      	pop	{r3, pc}
	Z_SHELL_VT100_CMD(sh, "\e[403%dm", bgcolor);
    72dc:	460a      	mov	r2, r1
    72de:	4903      	ldr	r1, [pc, #12]	; (72ec <vt100_bgcolor_set+0x34>)
    72e0:	6940      	ldr	r0, [r0, #20]
    72e2:	f00a fcb2 	bl	11c4a <z_shell_raw_fprintf>
    72e6:	e7f8      	b.n	72da <vt100_bgcolor_set+0x22>
    72e8:	4770      	bx	lr
    72ea:	bf00      	nop
    72ec:	00017144 	.word	0x00017144

000072f0 <z_shell_op_cursor_vert_move>:
{
    72f0:	b508      	push	{r3, lr}
	char dir = delta > 0 ? 'A' : 'B';
    72f2:	1e0a      	subs	r2, r1, #0
    72f4:	dd09      	ble.n	730a <z_shell_op_cursor_vert_move+0x1a>
    72f6:	2341      	movs	r3, #65	; 0x41
	if (delta < 0) {
    72f8:	2a00      	cmp	r2, #0
    72fa:	db0a      	blt.n	7312 <z_shell_op_cursor_vert_move+0x22>
    72fc:	6881      	ldr	r1, [r0, #8]
    72fe:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, "\e[%d%c", delta, dir);
    7302:	f011 0f20 	tst.w	r1, #32
    7306:	d106      	bne.n	7316 <z_shell_op_cursor_vert_move+0x26>
}
    7308:	bd08      	pop	{r3, pc}
	if (delta == 0) {
    730a:	2a00      	cmp	r2, #0
    730c:	d0fc      	beq.n	7308 <z_shell_op_cursor_vert_move+0x18>
	char dir = delta > 0 ? 'A' : 'B';
    730e:	2342      	movs	r3, #66	; 0x42
    7310:	e7f2      	b.n	72f8 <z_shell_op_cursor_vert_move+0x8>
		delta = -delta;
    7312:	4252      	negs	r2, r2
    7314:	e7f2      	b.n	72fc <z_shell_op_cursor_vert_move+0xc>
	Z_SHELL_VT100_CMD(sh, "\e[%d%c", delta, dir);
    7316:	4902      	ldr	r1, [pc, #8]	; (7320 <z_shell_op_cursor_vert_move+0x30>)
    7318:	6940      	ldr	r0, [r0, #20]
    731a:	f00a fc96 	bl	11c4a <z_shell_raw_fprintf>
    731e:	e7f3      	b.n	7308 <z_shell_op_cursor_vert_move+0x18>
    7320:	00017150 	.word	0x00017150

00007324 <z_shell_op_cursor_horiz_move>:
{
    7324:	b508      	push	{r3, lr}
	char dir = delta > 0 ? 'C' : 'D';
    7326:	1e0a      	subs	r2, r1, #0
    7328:	dd09      	ble.n	733e <z_shell_op_cursor_horiz_move+0x1a>
    732a:	2343      	movs	r3, #67	; 0x43
	if (delta < 0) {
    732c:	2a00      	cmp	r2, #0
    732e:	db0a      	blt.n	7346 <z_shell_op_cursor_horiz_move+0x22>
    7330:	6881      	ldr	r1, [r0, #8]
    7332:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, "\e[%d%c", delta, dir);
    7336:	f011 0f20 	tst.w	r1, #32
    733a:	d106      	bne.n	734a <z_shell_op_cursor_horiz_move+0x26>
}
    733c:	bd08      	pop	{r3, pc}
	if (delta == 0) {
    733e:	2a00      	cmp	r2, #0
    7340:	d0fc      	beq.n	733c <z_shell_op_cursor_horiz_move+0x18>
	char dir = delta > 0 ? 'C' : 'D';
    7342:	2344      	movs	r3, #68	; 0x44
    7344:	e7f2      	b.n	732c <z_shell_op_cursor_horiz_move+0x8>
		delta = -delta;
    7346:	4252      	negs	r2, r2
    7348:	e7f2      	b.n	7330 <z_shell_op_cursor_horiz_move+0xc>
	Z_SHELL_VT100_CMD(sh, "\e[%d%c", delta, dir);
    734a:	4902      	ldr	r1, [pc, #8]	; (7354 <z_shell_op_cursor_horiz_move+0x30>)
    734c:	6940      	ldr	r0, [r0, #20]
    734e:	f00a fc7c 	bl	11c4a <z_shell_raw_fprintf>
    7352:	e7f3      	b.n	733c <z_shell_op_cursor_horiz_move+0x18>
    7354:	00017150 	.word	0x00017150

00007358 <char_replace>:
{
    7358:	b510      	push	{r4, lr}
    735a:	4604      	mov	r4, r0
    735c:	460a      	mov	r2, r1
	sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos++] = data;
    735e:	6883      	ldr	r3, [r0, #8]
    7360:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
    7362:	1c48      	adds	r0, r1, #1
    7364:	87d8      	strh	r0, [r3, #62]	; 0x3e
    7366:	440b      	add	r3, r1
    7368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	return sh->ctx->cfg.flags.echo == 1;
    736c:	68a3      	ldr	r3, [r4, #8]
    736e:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
	if (!z_flag_echo_get(sh)) {
    7372:	f011 0f02 	tst.w	r1, #2
    7376:	d00d      	beq.n	7394 <char_replace+0x3c>
	return sh->ctx->cfg.flags.obscure == 1;
    7378:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	if (z_flag_obscure_get(sh)) {
    737c:	f013 0f04 	tst.w	r3, #4
    7380:	d000      	beq.n	7384 <char_replace+0x2c>
		data = '*';
    7382:	222a      	movs	r2, #42	; 0x2a
	z_shell_raw_fprintf(sh->fprintf_ctx, "%c", data);
    7384:	4906      	ldr	r1, [pc, #24]	; (73a0 <char_replace+0x48>)
    7386:	6960      	ldr	r0, [r4, #20]
    7388:	f00a fc5f 	bl	11c4a <z_shell_raw_fprintf>
	if (z_shell_cursor_in_empty_line(sh)) {
    738c:	4620      	mov	r0, r4
    738e:	f00a fcc7 	bl	11d20 <z_shell_cursor_in_empty_line>
    7392:	b900      	cbnz	r0, 7396 <char_replace+0x3e>
}
    7394:	bd10      	pop	{r4, pc}
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    7396:	4903      	ldr	r1, [pc, #12]	; (73a4 <char_replace+0x4c>)
    7398:	6960      	ldr	r0, [r4, #20]
    739a:	f00a fc56 	bl	11c4a <z_shell_raw_fprintf>
}
    739e:	e7f9      	b.n	7394 <char_replace+0x3c>
    73a0:	00017154 	.word	0x00017154
    73a4:	00015ec0 	.word	0x00015ec0

000073a8 <z_shell_op_cond_next_line>:
{
    73a8:	b510      	push	{r4, lr}
    73aa:	4604      	mov	r4, r0
	if (z_shell_cursor_in_empty_line(sh) || full_line_cmd(sh)) {
    73ac:	f00a fcb8 	bl	11d20 <z_shell_cursor_in_empty_line>
    73b0:	b918      	cbnz	r0, 73ba <z_shell_op_cond_next_line+0x12>
    73b2:	4620      	mov	r0, r4
    73b4:	f00a fc57 	bl	11c66 <full_line_cmd>
    73b8:	b118      	cbz	r0, 73c2 <z_shell_op_cond_next_line+0x1a>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    73ba:	4902      	ldr	r1, [pc, #8]	; (73c4 <z_shell_op_cond_next_line+0x1c>)
    73bc:	6960      	ldr	r0, [r4, #20]
    73be:	f00a fc44 	bl	11c4a <z_shell_raw_fprintf>
}
    73c2:	bd10      	pop	{r4, pc}
    73c4:	00015ec0 	.word	0x00015ec0

000073c8 <z_shell_op_cursor_position_synchronize>:
{
    73c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    73ca:	4605      	mov	r5, r0
	struct shell_multiline_cons *cons = &sh->ctx->vt100_ctx.cons;
    73cc:	6884      	ldr	r4, [r0, #8]
	z_shell_multiline_data_calc(cons, sh->ctx->cmd_buff_pos,
    73ce:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    73d0:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
    73d2:	f104 0020 	add.w	r0, r4, #32
    73d6:	f00a faa2 	bl	1191e <z_shell_multiline_data_calc>
	last_line = (cons->cur_y == cons->cur_y_end);
    73da:	8ca7      	ldrh	r7, [r4, #36]	; 0x24
    73dc:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
	if (full_line_cmd(sh)) {
    73de:	4628      	mov	r0, r5
    73e0:	f00a fc41 	bl	11c66 <full_line_cmd>
    73e4:	b970      	cbnz	r0, 7404 <z_shell_op_cursor_position_synchronize+0x3c>
	if (last_line) {
    73e6:	42b7      	cmp	r7, r6
    73e8:	d011      	beq.n	740e <z_shell_op_cursor_position_synchronize+0x46>
		z_shell_op_cursor_vert_move(sh, cons->cur_y_end - cons->cur_y);
    73ea:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
    73ec:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    73ee:	1ac9      	subs	r1, r1, r3
    73f0:	4628      	mov	r0, r5
    73f2:	f7ff ff7d 	bl	72f0 <z_shell_op_cursor_vert_move>
		z_shell_op_cursor_horiz_move(sh, cons->cur_x -
    73f6:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
    73f8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		z_shell_op_cursor_horiz_move(sh, cons->cur_x -
    73fa:	1ac9      	subs	r1, r1, r3
    73fc:	4628      	mov	r0, r5
    73fe:	f7ff ff91 	bl	7324 <z_shell_op_cursor_horiz_move>
}
    7402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7404:	4905      	ldr	r1, [pc, #20]	; (741c <z_shell_op_cursor_position_synchronize+0x54>)
    7406:	6968      	ldr	r0, [r5, #20]
    7408:	f00a fc1f 	bl	11c4a <z_shell_raw_fprintf>
}
    740c:	e7eb      	b.n	73e6 <z_shell_op_cursor_position_synchronize+0x1e>
		z_shell_op_cursor_horiz_move(sh, cons->cur_x -
    740e:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
    7410:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		z_shell_op_cursor_horiz_move(sh, cons->cur_x -
    7412:	1ac9      	subs	r1, r1, r3
    7414:	4628      	mov	r0, r5
    7416:	f7ff ff85 	bl	7324 <z_shell_op_cursor_horiz_move>
    741a:	e7f2      	b.n	7402 <z_shell_op_cursor_position_synchronize+0x3a>
    741c:	00015ec0 	.word	0x00015ec0

00007420 <z_shell_print_cmd>:
{
    7420:	b508      	push	{r3, lr}
	z_shell_raw_fprintf(sh->fprintf_ctx, "%s", sh->ctx->cmd_buff);
    7422:	6882      	ldr	r2, [r0, #8]
    7424:	3242      	adds	r2, #66	; 0x42
    7426:	4902      	ldr	r1, [pc, #8]	; (7430 <z_shell_print_cmd+0x10>)
    7428:	6940      	ldr	r0, [r0, #20]
    742a:	f00a fc0e 	bl	11c4a <z_shell_raw_fprintf>
}
    742e:	bd08      	pop	{r3, pc}
    7430:	00015864 	.word	0x00015864

00007434 <z_shell_vt100_color_set>:
{
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	if (color >= VT100_COLOR_END) {
    7434:	2908      	cmp	r1, #8
    7436:	d821      	bhi.n	747c <z_shell_vt100_color_set+0x48>
{
    7438:	b508      	push	{r3, lr}
		return;
	}

	if (sh->ctx->vt100_ctx.col.col == color) {
    743a:	6883      	ldr	r3, [r0, #8]
    743c:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
    7440:	428a      	cmp	r2, r1
    7442:	d009      	beq.n	7458 <z_shell_vt100_color_set+0x24>
		return;
	}

	sh->ctx->vt100_ctx.col.col = color;
    7444:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e

	if (color != SHELL_NORMAL) {
    7448:	2908      	cmp	r1, #8
    744a:	d00c      	beq.n	7466 <z_shell_vt100_color_set+0x32>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    744c:	6883      	ldr	r3, [r0, #8]
    744e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
		Z_SHELL_VT100_CMD(sh, "\e[1;3%dm", color);
    7452:	f013 0f20 	tst.w	r3, #32
    7456:	d100      	bne.n	745a <z_shell_vt100_color_set+0x26>
	} else {
		Z_SHELL_VT100_CMD(sh, SHELL_VT100_MODESOFF);
	}
}
    7458:	bd08      	pop	{r3, pc}
		Z_SHELL_VT100_CMD(sh, "\e[1;3%dm", color);
    745a:	460a      	mov	r2, r1
    745c:	4908      	ldr	r1, [pc, #32]	; (7480 <z_shell_vt100_color_set+0x4c>)
    745e:	6940      	ldr	r0, [r0, #20]
    7460:	f00a fbf3 	bl	11c4a <z_shell_raw_fprintf>
    7464:	e7f8      	b.n	7458 <z_shell_vt100_color_set+0x24>
    7466:	6883      	ldr	r3, [r0, #8]
    7468:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
		Z_SHELL_VT100_CMD(sh, SHELL_VT100_MODESOFF);
    746c:	f013 0f20 	tst.w	r3, #32
    7470:	d0f2      	beq.n	7458 <z_shell_vt100_color_set+0x24>
    7472:	4904      	ldr	r1, [pc, #16]	; (7484 <z_shell_vt100_color_set+0x50>)
    7474:	6940      	ldr	r0, [r0, #20]
    7476:	f00a fbe8 	bl	11c4a <z_shell_raw_fprintf>
    747a:	e7ed      	b.n	7458 <z_shell_vt100_color_set+0x24>
    747c:	4770      	bx	lr
    747e:	bf00      	nop
    7480:	00017158 	.word	0x00017158
    7484:	000154fc 	.word	0x000154fc

00007488 <z_shell_op_word_remove>:
	char *str = &sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos - 1];
    7488:	6882      	ldr	r2, [r0, #8]
    748a:	8fd1      	ldrh	r1, [r2, #62]	; 0x3e
    748c:	f101 033f 	add.w	r3, r1, #63	; 0x3f
    7490:	4413      	add	r3, r2
	char *str_start = &sh->ctx->cmd_buff[0];
    7492:	f102 0c42 	add.w	ip, r2, #66	; 0x42
	if ((sh->ctx->cmd_buff_len == 0) ||
    7496:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
    7498:	2a00      	cmp	r2, #0
    749a:	d03d      	beq.n	7518 <z_shell_op_word_remove+0x90>
{
    749c:	b570      	push	{r4, r5, r6, lr}
    749e:	4605      	mov	r5, r0
    74a0:	3302      	adds	r3, #2
	if ((sh->ctx->cmd_buff_len == 0) ||
    74a2:	2900      	cmp	r1, #0
    74a4:	d037      	beq.n	7516 <z_shell_op_word_remove+0x8e>
	chars_to_delete = 0U;
    74a6:	2400      	movs	r4, #0
    74a8:	e002      	b.n	74b0 <z_shell_op_word_remove+0x28>
		++chars_to_delete;
    74aa:	3401      	adds	r4, #1
    74ac:	b2a4      	uxth	r4, r4
		--str;
    74ae:	3b01      	subs	r3, #1
	while ((str >= str_start) && (*str == ' ')) {
    74b0:	4563      	cmp	r3, ip
    74b2:	d302      	bcc.n	74ba <z_shell_op_word_remove+0x32>
    74b4:	7819      	ldrb	r1, [r3, #0]
    74b6:	2920      	cmp	r1, #32
    74b8:	d0f7      	beq.n	74aa <z_shell_op_word_remove+0x22>
	while ((str >= str_start) && (*str != ' ')) {
    74ba:	4563      	cmp	r3, ip
    74bc:	d306      	bcc.n	74cc <z_shell_op_word_remove+0x44>
    74be:	7819      	ldrb	r1, [r3, #0]
    74c0:	2920      	cmp	r1, #32
    74c2:	d003      	beq.n	74cc <z_shell_op_word_remove+0x44>
		++chars_to_delete;
    74c4:	3401      	adds	r4, #1
    74c6:	b2a4      	uxth	r4, r4
		--str;
    74c8:	3b01      	subs	r3, #1
    74ca:	e7f6      	b.n	74ba <z_shell_op_word_remove+0x32>
	memmove(str + 1, str + 1 + chars_to_delete,
    74cc:	1c5e      	adds	r6, r3, #1
    74ce:	1c61      	adds	r1, r4, #1
    74d0:	1b12      	subs	r2, r2, r4
    74d2:	4419      	add	r1, r3
    74d4:	4630      	mov	r0, r6
    74d6:	f00b fc45 	bl	12d64 <memmove>
	sh->ctx->cmd_buff_len -= chars_to_delete;
    74da:	68aa      	ldr	r2, [r5, #8]
    74dc:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
    74de:	1b1b      	subs	r3, r3, r4
    74e0:	8793      	strh	r3, [r2, #60]	; 0x3c
	sh->ctx->cmd_buff[sh->ctx->cmd_buff_len] = '\0';
    74e2:	68ab      	ldr	r3, [r5, #8]
    74e4:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    74e6:	4413      	add	r3, r2
    74e8:	2200      	movs	r2, #0
    74ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	z_shell_op_cursor_move(sh, -chars_to_delete);
    74ee:	4261      	negs	r1, r4
    74f0:	b209      	sxth	r1, r1
    74f2:	4628      	mov	r0, r5
    74f4:	f00a fc30 	bl	11d58 <z_shell_op_cursor_move>
	z_cursor_save(sh);
    74f8:	4628      	mov	r0, r5
    74fa:	f7ff fead 	bl	7258 <z_cursor_save>
	z_shell_fprintf(sh, SHELL_NORMAL, "%s", str + 1);
    74fe:	4633      	mov	r3, r6
    7500:	4a06      	ldr	r2, [pc, #24]	; (751c <z_shell_op_word_remove+0x94>)
    7502:	2108      	movs	r1, #8
    7504:	4628      	mov	r0, r5
    7506:	f00a fd0f 	bl	11f28 <z_shell_fprintf>
	z_clear_eos(sh);
    750a:	4628      	mov	r0, r5
    750c:	f7ff feb4 	bl	7278 <z_clear_eos>
	z_cursor_restore(sh);
    7510:	4628      	mov	r0, r5
    7512:	f7ff fec1 	bl	7298 <z_cursor_restore>
}
    7516:	bd70      	pop	{r4, r5, r6, pc}
    7518:	4770      	bx	lr
    751a:	bf00      	nop
    751c:	00015864 	.word	0x00015864

00007520 <reprint_from_cursor>:
{
    7520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7522:	4604      	mov	r4, r0
    7524:	460e      	mov	r6, r1
	if (data_removed) {
    7526:	4617      	mov	r7, r2
    7528:	b962      	cbnz	r2, 7544 <reprint_from_cursor+0x24>
	return sh->ctx->cfg.flags.obscure == 1;
    752a:	68a3      	ldr	r3, [r4, #8]
    752c:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
	if (z_flag_obscure_get(sh)) {
    7530:	f012 0f04 	tst.w	r2, #4
    7534:	d024      	beq.n	7580 <reprint_from_cursor+0x60>
		int len = strlen(&sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos]);
    7536:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    7538:	3240      	adds	r2, #64	; 0x40
    753a:	4413      	add	r3, r2
    753c:	1c98      	adds	r0, r3, #2
    753e:	f00b fbce 	bl	12cde <strlen>
		while (len--) {
    7542:	e007      	b.n	7554 <reprint_from_cursor+0x34>
		z_clear_eos(sh);
    7544:	f7ff fe98 	bl	7278 <z_clear_eos>
    7548:	e7ef      	b.n	752a <reprint_from_cursor+0xa>
			z_shell_raw_fprintf(sh->fprintf_ctx, "*");
    754a:	4912      	ldr	r1, [pc, #72]	; (7594 <reprint_from_cursor+0x74>)
    754c:	6960      	ldr	r0, [r4, #20]
    754e:	f00a fb7c 	bl	11c4a <z_shell_raw_fprintf>
		while (len--) {
    7552:	4628      	mov	r0, r5
    7554:	1e45      	subs	r5, r0, #1
    7556:	2800      	cmp	r0, #0
    7558:	d1f7      	bne.n	754a <reprint_from_cursor+0x2a>
	sh->ctx->cmd_buff_pos = sh->ctx->cmd_buff_len;
    755a:	68a3      	ldr	r3, [r4, #8]
    755c:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    755e:	87da      	strh	r2, [r3, #62]	; 0x3e
	if (full_line_cmd(sh)) {
    7560:	4620      	mov	r0, r4
    7562:	f00a fb80 	bl	11c66 <full_line_cmd>
    7566:	b128      	cbz	r0, 7574 <reprint_from_cursor+0x54>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
    7568:	b107      	cbz	r7, 756c <reprint_from_cursor+0x4c>
    756a:	b11e      	cbz	r6, 7574 <reprint_from_cursor+0x54>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    756c:	490a      	ldr	r1, [pc, #40]	; (7598 <reprint_from_cursor+0x78>)
    756e:	6960      	ldr	r0, [r4, #20]
    7570:	f00a fb6b 	bl	11c4a <z_shell_raw_fprintf>
	z_shell_op_cursor_move(sh, -diff);
    7574:	4271      	negs	r1, r6
    7576:	b209      	sxth	r1, r1
    7578:	4620      	mov	r0, r4
    757a:	f00a fbed 	bl	11d58 <z_shell_op_cursor_move>
}
    757e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			      &sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos]);
    7580:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
		z_shell_fprintf(sh, SHELL_NORMAL, "%s",
    7582:	3240      	adds	r2, #64	; 0x40
    7584:	4413      	add	r3, r2
    7586:	3302      	adds	r3, #2
    7588:	4a04      	ldr	r2, [pc, #16]	; (759c <reprint_from_cursor+0x7c>)
    758a:	2108      	movs	r1, #8
    758c:	4620      	mov	r0, r4
    758e:	f00a fccb 	bl	11f28 <z_shell_fprintf>
    7592:	e7e2      	b.n	755a <reprint_from_cursor+0x3a>
    7594:	00017b24 	.word	0x00017b24
    7598:	00015ec0 	.word	0x00015ec0
    759c:	00015864 	.word	0x00015864

000075a0 <print_prompt>:
{
    75a0:	b508      	push	{r3, lr}
	z_shell_fprintf(sh, SHELL_INFO, "%s", sh->ctx->prompt);
    75a2:	6883      	ldr	r3, [r0, #8]
    75a4:	681b      	ldr	r3, [r3, #0]
    75a6:	4a02      	ldr	r2, [pc, #8]	; (75b0 <print_prompt+0x10>)
    75a8:	2102      	movs	r1, #2
    75aa:	f00a fcbd 	bl	11f28 <z_shell_fprintf>
}
    75ae:	bd08      	pop	{r3, pc}
    75b0:	00015864 	.word	0x00015864

000075b4 <formatted_text_print>:
				 size_t terminal_offset, bool offset_first_line)
{
	size_t offset = 0;
	size_t length;

	if (str == NULL) {
    75b4:	2900      	cmp	r1, #0
    75b6:	d079      	beq.n	76ac <formatted_text_print+0xf8>
{
    75b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    75bc:	4680      	mov	r8, r0
    75be:	4616      	mov	r6, r2
    75c0:	460d      	mov	r5, r1
		return;
	}

	if (offset_first_line) {
    75c2:	b90b      	cbnz	r3, 75c8 <formatted_text_print+0x14>
{
    75c4:	2400      	movs	r4, #0
    75c6:	e004      	b.n	75d2 <formatted_text_print+0x1e>
		z_shell_op_cursor_horiz_move(sh, terminal_offset);
    75c8:	4611      	mov	r1, r2
    75ca:	f7ff feab 	bl	7324 <z_shell_op_cursor_horiz_move>
    75ce:	e7f9      	b.n	75c4 <formatted_text_print+0x10>
	}


	/* Skipping whitespace. */
	while (isspace((int) *(str + offset)) != 0) {
		++offset;
    75d0:	3401      	adds	r4, #1
	while (isspace((int) *(str + offset)) != 0) {
    75d2:	5d2b      	ldrb	r3, [r5, r4]
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    75d4:	2b20      	cmp	r3, #32
    75d6:	d0fb      	beq.n	75d0 <formatted_text_print+0x1c>
    75d8:	3b09      	subs	r3, #9
    75da:	2b04      	cmp	r3, #4
    75dc:	d9f8      	bls.n	75d0 <formatted_text_print+0x1c>
    75de:	e056      	b.n	768e <formatted_text_print+0xda>
	z_shell_fprintf_buffer_flush(sh->fprintf_ctx);
    75e0:	f8d8 0014 	ldr.w	r0, [r8, #20]
    75e4:	f00a f84c 	bl	11680 <z_shell_fprintf_buffer_flush>
		if (length <=
		    sh->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
			for (idx = 0; idx < length; idx++) {
				if (*(str + offset + idx) == '\n') {
					z_transport_buffer_flush(sh);
					z_shell_write(sh, str + offset, idx);
    75e8:	463a      	mov	r2, r7
    75ea:	1929      	adds	r1, r5, r4
    75ec:	4640      	mov	r0, r8
    75ee:	f00a fc42 	bl	11e76 <z_shell_write>
					offset += idx + 1;
    75f2:	f109 0401 	add.w	r4, r9, #1
    75f6:	492e      	ldr	r1, [pc, #184]	; (76b0 <formatted_text_print+0xfc>)
    75f8:	f8d8 0014 	ldr.w	r0, [r8, #20]
    75fc:	f00a fee6 	bl	123cc <z_shell_raw_fprintf>
					z_cursor_next_line_move(sh);
					z_shell_op_cursor_horiz_move(sh,
    7600:	4631      	mov	r1, r6
    7602:	4640      	mov	r0, r8
    7604:	f7ff fe8e 	bl	7324 <z_shell_op_cursor_horiz_move>
					break;
				}
			}

			/* String will fit in one line. */
			z_shell_raw_fprintf(sh->fprintf_ctx, str + offset);
    7608:	1929      	adds	r1, r5, r4
    760a:	f8d8 0014 	ldr.w	r0, [r8, #20]
    760e:	f00a fedd 	bl	123cc <z_shell_raw_fprintf>
    7612:	4927      	ldr	r1, [pc, #156]	; (76b0 <formatted_text_print+0xfc>)
    7614:	f8d8 0014 	ldr.w	r0, [r8, #20]
    7618:	f00a fed8 	bl	123cc <z_shell_raw_fprintf>
		z_cursor_next_line_move(sh);
		z_shell_op_cursor_horiz_move(sh, terminal_offset);

	}
	z_cursor_next_line_move(sh);
}
    761c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			for (idx = 0; idx < length; idx++) {
    7620:	2700      	movs	r7, #0
    7622:	4287      	cmp	r7, r0
    7624:	d2f0      	bcs.n	7608 <formatted_text_print+0x54>
				if (*(str + offset + idx) == '\n') {
    7626:	eb04 0907 	add.w	r9, r4, r7
    762a:	f815 3009 	ldrb.w	r3, [r5, r9]
    762e:	2b0a      	cmp	r3, #10
    7630:	d0d6      	beq.n	75e0 <formatted_text_print+0x2c>
			for (idx = 0; idx < length; idx++) {
    7632:	3701      	adds	r7, #1
    7634:	e7f5      	b.n	7622 <formatted_text_print+0x6e>
				if (*(str + offset + idx) == '\n') {
    7636:	290a      	cmp	r1, #10
    7638:	d00d      	beq.n	7656 <formatted_text_print+0xa2>
				length = idx;
    763a:	461f      	mov	r7, r3
			if ((idx + terminal_offset) >=
    763c:	199a      	adds	r2, r3, r6
    763e:	4594      	cmp	ip, r2
    7640:	d90a      	bls.n	7658 <formatted_text_print+0xa4>
			++idx;
    7642:	3301      	adds	r3, #1
			if (isspace((int) (*(str + offset + idx))) != 0) {
    7644:	18e1      	adds	r1, r4, r3
    7646:	5c69      	ldrb	r1, [r5, r1]
    7648:	2920      	cmp	r1, #32
    764a:	d0f4      	beq.n	7636 <formatted_text_print+0x82>
    764c:	f1a1 0209 	sub.w	r2, r1, #9
    7650:	2a04      	cmp	r2, #4
    7652:	d8f3      	bhi.n	763c <formatted_text_print+0x88>
    7654:	e7ef      	b.n	7636 <formatted_text_print+0x82>
				length = idx;
    7656:	461f      	mov	r7, r3
    7658:	f8d8 0014 	ldr.w	r0, [r8, #20]
    765c:	f00a f810 	bl	11680 <z_shell_fprintf_buffer_flush>
		z_shell_write(sh, str + offset, length);
    7660:	463a      	mov	r2, r7
    7662:	1929      	adds	r1, r5, r4
    7664:	4640      	mov	r0, r8
    7666:	f00a fc06 	bl	11e76 <z_shell_write>
		offset += length;
    766a:	443c      	add	r4, r7
		while (isspace((int) (*(str + offset))) != 0) {
    766c:	e000      	b.n	7670 <formatted_text_print+0xbc>
			++offset;
    766e:	3401      	adds	r4, #1
		while (isspace((int) (*(str + offset))) != 0) {
    7670:	5d2b      	ldrb	r3, [r5, r4]
    7672:	2b20      	cmp	r3, #32
    7674:	d0fb      	beq.n	766e <formatted_text_print+0xba>
    7676:	3b09      	subs	r3, #9
    7678:	2b04      	cmp	r3, #4
    767a:	d9f8      	bls.n	766e <formatted_text_print+0xba>
    767c:	490c      	ldr	r1, [pc, #48]	; (76b0 <formatted_text_print+0xfc>)
    767e:	f8d8 0014 	ldr.w	r0, [r8, #20]
    7682:	f00a fea3 	bl	123cc <z_shell_raw_fprintf>
		z_shell_op_cursor_horiz_move(sh, terminal_offset);
    7686:	4631      	mov	r1, r6
    7688:	4640      	mov	r0, r8
    768a:	f7ff fe4b 	bl	7324 <z_shell_op_cursor_horiz_move>
	return str == NULL ? 0U : (uint16_t)strlen(str);
    768e:	4628      	mov	r0, r5
    7690:	f00b fb25 	bl	12cde <strlen>
		length = z_shell_strlen(str) - offset;
    7694:	b280      	uxth	r0, r0
    7696:	1b00      	subs	r0, r0, r4
		    sh->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
    7698:	f8d8 3008 	ldr.w	r3, [r8, #8]
    769c:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
    76a0:	ebac 0706 	sub.w	r7, ip, r6
		if (length <=
    76a4:	4287      	cmp	r7, r0
    76a6:	d2bb      	bcs.n	7620 <formatted_text_print+0x6c>
		size_t idx = 0;
    76a8:	2300      	movs	r3, #0
    76aa:	e7cb      	b.n	7644 <formatted_text_print+0x90>
    76ac:	4770      	bx	lr
    76ae:	bf00      	nop
    76b0:	00015ec0 	.word	0x00015ec0

000076b4 <help_item_print>:

static void help_item_print(const struct shell *sh, const char *item_name,
			    uint16_t item_name_width, const char *item_help)
{
    76b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    76b8:	b082      	sub	sp, #8
    76ba:	4606      	mov	r6, r0
    76bc:	460c      	mov	r4, r1
    76be:	4615      	mov	r5, r2
    76c0:	461f      	mov	r7, r3
	static const uint8_t tabulator[] = "  ";
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    76c2:	4816      	ldr	r0, [pc, #88]	; (771c <help_item_print+0x68>)
    76c4:	f00b fb0b 	bl	12cde <strlen>
    76c8:	eb05 0c40 	add.w	ip, r5, r0, lsl #1

	if ((item_name == NULL) || (item_name[0] == '\0')) {
    76cc:	b13c      	cbz	r4, 76de <help_item_print+0x2a>
    76ce:	fa1f fc8c 	uxth.w	ip, ip
    76d2:	f10c 0c01 	add.w	ip, ip, #1
    76d6:	fa1f f88c 	uxth.w	r8, ip
    76da:	7823      	ldrb	r3, [r4, #0]
    76dc:	b913      	cbnz	r3, 76e4 <help_item_print+0x30>
	} else {
		z_shell_fprintf(sh, SHELL_NORMAL, "%s:", tabulator);
	}
	/* print option help */
	formatted_text_print(sh, item_help, offset, false);
}
    76de:	b002      	add	sp, #8
    76e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		z_shell_fprintf(sh, SHELL_NORMAL, "%s%-*s", tabulator,
    76e4:	9401      	str	r4, [sp, #4]
    76e6:	9500      	str	r5, [sp, #0]
    76e8:	4b0c      	ldr	r3, [pc, #48]	; (771c <help_item_print+0x68>)
    76ea:	4a0d      	ldr	r2, [pc, #52]	; (7720 <help_item_print+0x6c>)
    76ec:	2108      	movs	r1, #8
    76ee:	4630      	mov	r0, r6
    76f0:	f00a fc1a 	bl	11f28 <z_shell_fprintf>
	if (item_help == NULL) {
    76f4:	b167      	cbz	r7, 7710 <help_item_print+0x5c>
		z_shell_fprintf(sh, SHELL_NORMAL, "%s:", tabulator);
    76f6:	4b09      	ldr	r3, [pc, #36]	; (771c <help_item_print+0x68>)
    76f8:	4a0a      	ldr	r2, [pc, #40]	; (7724 <help_item_print+0x70>)
    76fa:	2108      	movs	r1, #8
    76fc:	4630      	mov	r0, r6
    76fe:	f00a fc13 	bl	11f28 <z_shell_fprintf>
	formatted_text_print(sh, item_help, offset, false);
    7702:	2300      	movs	r3, #0
    7704:	4642      	mov	r2, r8
    7706:	4639      	mov	r1, r7
    7708:	4630      	mov	r0, r6
    770a:	f7ff ff53 	bl	75b4 <formatted_text_print>
    770e:	e7e6      	b.n	76de <help_item_print+0x2a>
    7710:	4905      	ldr	r1, [pc, #20]	; (7728 <help_item_print+0x74>)
    7712:	6970      	ldr	r0, [r6, #20]
    7714:	f00a fe5a 	bl	123cc <z_shell_raw_fprintf>
		return;
    7718:	e7e1      	b.n	76de <help_item_print+0x2a>
    771a:	bf00      	nop
    771c:	000171a4 	.word	0x000171a4
    7720:	00017180 	.word	0x00017180
    7724:	00017188 	.word	0x00017188
    7728:	00015ec0 	.word	0x00015ec0

0000772c <z_shell_help_cmd_print>:
	}
}

void z_shell_help_cmd_print(const struct shell *sh,
			    const struct shell_static_entry *cmd)
{
    772c:	b5f0      	push	{r4, r5, r6, r7, lr}
    772e:	b083      	sub	sp, #12
    7730:	4606      	mov	r6, r0
    7732:	460c      	mov	r4, r1
	static const char cmd_sep[] = " - "; /* commands separator */
	uint16_t field_width;

	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    7734:	6808      	ldr	r0, [r1, #0]
    7736:	b1c0      	cbz	r0, 776a <z_shell_help_cmd_print+0x3e>
    7738:	f00b fad1 	bl	12cde <strlen>
    773c:	b285      	uxth	r5, r0
    773e:	4f0c      	ldr	r7, [pc, #48]	; (7770 <z_shell_help_cmd_print+0x44>)
    7740:	4638      	mov	r0, r7
    7742:	f00b facc 	bl	12cde <strlen>
    7746:	fa15 f580 	uxtah	r5, r5, r0
    774a:	b2ad      	uxth	r5, r5

	z_shell_fprintf(sh, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
    774c:	9700      	str	r7, [sp, #0]
    774e:	6823      	ldr	r3, [r4, #0]
    7750:	4a08      	ldr	r2, [pc, #32]	; (7774 <z_shell_help_cmd_print+0x48>)
    7752:	2108      	movs	r1, #8
    7754:	4630      	mov	r0, r6
    7756:	f00a fbe7 	bl	11f28 <z_shell_fprintf>

	formatted_text_print(sh, cmd->help, field_width, false);
    775a:	2300      	movs	r3, #0
    775c:	462a      	mov	r2, r5
    775e:	6861      	ldr	r1, [r4, #4]
    7760:	4630      	mov	r0, r6
    7762:	f7ff ff27 	bl	75b4 <formatted_text_print>
}
    7766:	b003      	add	sp, #12
    7768:	bdf0      	pop	{r4, r5, r6, r7, pc}
    776a:	2500      	movs	r5, #0
    776c:	e7e7      	b.n	773e <z_shell_help_cmd_print+0x12>
    776e:	bf00      	nop
    7770:	000171a0 	.word	0x000171a0
    7774:	0001718c 	.word	0x0001718c

00007778 <z_shell_help_request>:

bool z_shell_help_request(const char *str)
{
    7778:	b510      	push	{r4, lr}
    777a:	4604      	mov	r4, r0
	if (!IS_ENABLED(CONFIG_SHELL_HELP_OPT_PARSE)) {
		return false;
	}

	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
    777c:	4906      	ldr	r1, [pc, #24]	; (7798 <z_shell_help_request+0x20>)
    777e:	f00b fac1 	bl	12d04 <strcmp>
    7782:	b908      	cbnz	r0, 7788 <z_shell_help_request+0x10>
		return true;
    7784:	2001      	movs	r0, #1
	}

	return false;
}
    7786:	bd10      	pop	{r4, pc}
	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
    7788:	4904      	ldr	r1, [pc, #16]	; (779c <z_shell_help_request+0x24>)
    778a:	4620      	mov	r0, r4
    778c:	f00b faba 	bl	12d04 <strcmp>
    7790:	2800      	cmp	r0, #0
    7792:	d0f7      	beq.n	7784 <z_shell_help_request+0xc>
	return false;
    7794:	2000      	movs	r0, #0
    7796:	e7f6      	b.n	7786 <z_shell_help_request+0xe>
    7798:	00017194 	.word	0x00017194
    779c:	00017198 	.word	0x00017198

000077a0 <cmd_clear>:
	z_cursor_restore(sh);
	return ret_val;
}

static int cmd_clear(const struct shell *sh, size_t argc, char **argv)
{
    77a0:	b510      	push	{r4, lr}
    77a2:	4604      	mov	r4, r0
	return sh->ctx->cfg.flags.use_vt100 == 1;
    77a4:	6883      	ldr	r3, [r0, #8]
    77a6:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	ARG_UNUSED(argv);

	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CURSORHOME);
    77aa:	f013 0f20 	tst.w	r3, #32
    77ae:	d107      	bne.n	77c0 <cmd_clear+0x20>
    77b0:	68a3      	ldr	r3, [r4, #8]
    77b2:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEARSCREEN);
    77b6:	f013 0f20 	tst.w	r3, #32
    77ba:	d106      	bne.n	77ca <cmd_clear+0x2a>

	return 0;
}
    77bc:	2000      	movs	r0, #0
    77be:	bd10      	pop	{r4, pc}
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CURSORHOME);
    77c0:	4904      	ldr	r1, [pc, #16]	; (77d4 <cmd_clear+0x34>)
    77c2:	6940      	ldr	r0, [r0, #20]
    77c4:	f00a fe4d 	bl	12462 <z_shell_raw_fprintf>
    77c8:	e7f2      	b.n	77b0 <cmd_clear+0x10>
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEARSCREEN);
    77ca:	4903      	ldr	r1, [pc, #12]	; (77d8 <cmd_clear+0x38>)
    77cc:	6960      	ldr	r0, [r4, #20]
    77ce:	f00a fe48 	bl	12462 <z_shell_raw_fprintf>
    77d2:	e7f3      	b.n	77bc <cmd_clear+0x1c>
    77d4:	00015504 	.word	0x00015504
    77d8:	0001550c 	.word	0x0001550c

000077dc <z_cursor_save>:
{
    77dc:	b508      	push	{r3, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
    77de:	6883      	ldr	r3, [r0, #8]
    77e0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
    77e4:	f013 0f20 	tst.w	r3, #32
    77e8:	d100      	bne.n	77ec <z_cursor_save+0x10>
}
    77ea:	bd08      	pop	{r3, pc}
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
    77ec:	4902      	ldr	r1, [pc, #8]	; (77f8 <z_cursor_save+0x1c>)
    77ee:	6940      	ldr	r0, [r0, #20]
    77f0:	f00a fe37 	bl	12462 <z_shell_raw_fprintf>
}
    77f4:	e7f9      	b.n	77ea <z_cursor_save+0xe>
    77f6:	bf00      	nop
    77f8:	00015514 	.word	0x00015514

000077fc <z_cursor_restore>:
{
    77fc:	b508      	push	{r3, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
    77fe:	6883      	ldr	r3, [r0, #8]
    7800:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    7804:	f013 0f20 	tst.w	r3, #32
    7808:	d100      	bne.n	780c <z_cursor_restore+0x10>
}
    780a:	bd08      	pop	{r3, pc}
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    780c:	4902      	ldr	r1, [pc, #8]	; (7818 <z_cursor_restore+0x1c>)
    780e:	6940      	ldr	r0, [r0, #20]
    7810:	f00a fe27 	bl	12462 <z_shell_raw_fprintf>
}
    7814:	e7f9      	b.n	780a <z_cursor_restore+0xe>
    7816:	bf00      	nop
    7818:	00015518 	.word	0x00015518

0000781c <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *sh,
			      size_t argc, char **argv)
{
    781c:	b510      	push	{r4, lr}
    781e:	4604      	mov	r4, r0
	return sh->ctx->cfg.flags.use_vt100 == 1;
    7820:	6883      	ldr	r3, [r0, #8]
    7822:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SETCOL_80);
    7826:	f013 0f20 	tst.w	r3, #32
    782a:	d107      	bne.n	783c <cmd_resize_default+0x20>
	sh->ctx->vt100_ctx.cons.terminal_wid = SHELL_DEFAULT_TERMINAL_WIDTH;
    782c:	68a3      	ldr	r3, [r4, #8]
    782e:	2250      	movs	r2, #80	; 0x50
    7830:	855a      	strh	r2, [r3, #42]	; 0x2a
	sh->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
    7832:	68a3      	ldr	r3, [r4, #8]
    7834:	2218      	movs	r2, #24
    7836:	851a      	strh	r2, [r3, #40]	; 0x28

	return 0;
}
    7838:	2000      	movs	r0, #0
    783a:	bd10      	pop	{r4, pc}
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SETCOL_80);
    783c:	4902      	ldr	r1, [pc, #8]	; (7848 <cmd_resize_default+0x2c>)
    783e:	6940      	ldr	r0, [r0, #20]
    7840:	f00a fe0f 	bl	12462 <z_shell_raw_fprintf>
    7844:	e7f2      	b.n	782c <cmd_resize_default+0x10>
    7846:	bf00      	nop
    7848:	0001551c 	.word	0x0001551c

0000784c <cmd_shell_stats_show>:
{
    784c:	b508      	push	{r3, lr}
	shell_print(sh, "Lost logs: %lu", sh->stats->log_lost_cnt);
    784e:	6983      	ldr	r3, [r0, #24]
    7850:	681b      	ldr	r3, [r3, #0]
    7852:	4a03      	ldr	r2, [pc, #12]	; (7860 <cmd_shell_stats_show+0x14>)
    7854:	2108      	movs	r1, #8
    7856:	f009 fee9 	bl	1162c <shell_fprintf>
}
    785a:	2000      	movs	r0, #0
    785c:	bd08      	pop	{r3, pc}
    785e:	bf00      	nop
    7860:	000171a8 	.word	0x000171a8

00007864 <cmd_echo>:
{
    7864:	b500      	push	{lr}
    7866:	b083      	sub	sp, #12
	if (argc == 2) {
    7868:	2902      	cmp	r1, #2
    786a:	d00e      	beq.n	788a <cmd_echo+0x26>
	return sh->ctx->cfg.flags.echo == 1;
    786c:	6883      	ldr	r3, [r0, #8]
    786e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	shell_print(sh, "Echo status: %s",
    7872:	f013 0f02 	tst.w	r3, #2
    7876:	d014      	beq.n	78a2 <cmd_echo+0x3e>
    7878:	4b0b      	ldr	r3, [pc, #44]	; (78a8 <cmd_echo+0x44>)
    787a:	4a0c      	ldr	r2, [pc, #48]	; (78ac <cmd_echo+0x48>)
    787c:	2108      	movs	r1, #8
    787e:	f009 fed5 	bl	1162c <shell_fprintf>
	return 0;
    7882:	2000      	movs	r0, #0
}
    7884:	b003      	add	sp, #12
    7886:	f85d fb04 	ldr.w	pc, [sp], #4
		shell_error(sh, "%s:%s%s", argv[0],
    788a:	6853      	ldr	r3, [r2, #4]
    788c:	9301      	str	r3, [sp, #4]
    788e:	4b08      	ldr	r3, [pc, #32]	; (78b0 <cmd_echo+0x4c>)
    7890:	9300      	str	r3, [sp, #0]
    7892:	6813      	ldr	r3, [r2, #0]
    7894:	4a07      	ldr	r2, [pc, #28]	; (78b4 <cmd_echo+0x50>)
    7896:	2101      	movs	r1, #1
    7898:	f009 fec8 	bl	1162c <shell_fprintf>
		return -EINVAL;
    789c:	f06f 0015 	mvn.w	r0, #21
    78a0:	e7f0      	b.n	7884 <cmd_echo+0x20>
	shell_print(sh, "Echo status: %s",
    78a2:	4b05      	ldr	r3, [pc, #20]	; (78b8 <cmd_echo+0x54>)
    78a4:	e7e9      	b.n	787a <cmd_echo+0x16>
    78a6:	bf00      	nop
    78a8:	00017adc 	.word	0x00017adc
    78ac:	000171dc 	.word	0x000171dc
    78b0:	000171c4 	.word	0x000171c4
    78b4:	000171b8 	.word	0x000171b8
    78b8:	00016438 	.word	0x00016438

000078bc <cmd_backends>:
{
    78bc:	b570      	push	{r4, r5, r6, lr}
    78be:	b082      	sub	sp, #8
    78c0:	4606      	mov	r6, r0
	shell_print(sh, "Active shell backends:");
    78c2:	4a0c      	ldr	r2, [pc, #48]	; (78f4 <cmd_backends+0x38>)
    78c4:	2108      	movs	r1, #8
    78c6:	f009 feb1 	bl	1162c <shell_fprintf>
	STRUCT_SECTION_FOREACH(shell, obj) {
    78ca:	4c0b      	ldr	r4, [pc, #44]	; (78f8 <cmd_backends+0x3c>)
	uint16_t cnt = 0;
    78cc:	2300      	movs	r3, #0
	STRUCT_SECTION_FOREACH(shell, obj) {
    78ce:	e00b      	b.n	78e8 <cmd_backends+0x2c>
		shell_print(sh, "  %2d. :%s", cnt++, obj->ctx->prompt);
    78d0:	1c5d      	adds	r5, r3, #1
    78d2:	b2ad      	uxth	r5, r5
    78d4:	68a2      	ldr	r2, [r4, #8]
    78d6:	6812      	ldr	r2, [r2, #0]
    78d8:	9200      	str	r2, [sp, #0]
    78da:	4a08      	ldr	r2, [pc, #32]	; (78fc <cmd_backends+0x40>)
    78dc:	2108      	movs	r1, #8
    78de:	4630      	mov	r0, r6
    78e0:	f009 fea4 	bl	1162c <shell_fprintf>
	STRUCT_SECTION_FOREACH(shell, obj) {
    78e4:	3430      	adds	r4, #48	; 0x30
		shell_print(sh, "  %2d. :%s", cnt++, obj->ctx->prompt);
    78e6:	462b      	mov	r3, r5
	STRUCT_SECTION_FOREACH(shell, obj) {
    78e8:	4a05      	ldr	r2, [pc, #20]	; (7900 <cmd_backends+0x44>)
    78ea:	4294      	cmp	r4, r2
    78ec:	d3f0      	bcc.n	78d0 <cmd_backends+0x14>
}
    78ee:	2000      	movs	r0, #0
    78f0:	b002      	add	sp, #8
    78f2:	bd70      	pop	{r4, r5, r6, pc}
    78f4:	000171f0 	.word	0x000171f0
    78f8:	0001542c 	.word	0x0001542c
    78fc:	00017208 	.word	0x00017208
    7900:	0001545c 	.word	0x0001545c

00007904 <cmd_history>:
{
    7904:	b570      	push	{r4, r5, r6, lr}
    7906:	b084      	sub	sp, #16
    7908:	4604      	mov	r4, r0
	size_t i = 0;
    790a:	2500      	movs	r5, #0
    790c:	e00b      	b.n	7926 <cmd_history+0x22>
			shell_print(sh, "[%3d] %s",
    790e:	1c6e      	adds	r6, r5, #1
    7910:	68a3      	ldr	r3, [r4, #8]
    7912:	f503 73a1 	add.w	r3, r3, #322	; 0x142
    7916:	9300      	str	r3, [sp, #0]
    7918:	462b      	mov	r3, r5
    791a:	4a0c      	ldr	r2, [pc, #48]	; (794c <cmd_history+0x48>)
    791c:	2108      	movs	r1, #8
    791e:	4620      	mov	r0, r4
    7920:	f009 fe84 	bl	1162c <shell_fprintf>
    7924:	4635      	mov	r5, r6
				    sh->ctx->temp_buff, &len);
    7926:	68a2      	ldr	r2, [r4, #8]
		z_shell_history_get(sh->history, true,
    7928:	f10d 030e 	add.w	r3, sp, #14
    792c:	f502 72a1 	add.w	r2, r2, #322	; 0x142
    7930:	2101      	movs	r1, #1
    7932:	68e0      	ldr	r0, [r4, #12]
    7934:	f00a fea9 	bl	1268a <z_shell_history_get>
		if (len) {
    7938:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    793c:	2b00      	cmp	r3, #0
    793e:	d1e6      	bne.n	790e <cmd_history+0xa>
	sh->ctx->temp_buff[0] = '\0';
    7940:	68a3      	ldr	r3, [r4, #8]
    7942:	2000      	movs	r0, #0
    7944:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
}
    7948:	b004      	add	sp, #16
    794a:	bd70      	pop	{r4, r5, r6, pc}
    794c:	00017214 	.word	0x00017214

00007950 <cursor_position_get>:
{
    7950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7954:	b083      	sub	sp, #12
    7956:	4604      	mov	r4, r0
    7958:	460e      	mov	r6, r1
    795a:	4615      	mov	r5, r2
	char c = 0;
    795c:	2700      	movs	r7, #0
    795e:	f88d 7003 	strb.w	r7, [sp, #3]
	*x = 0U;
    7962:	800f      	strh	r7, [r1, #0]
	*y = 0U;
    7964:	8017      	strh	r7, [r2, #0]
	memset(sh->ctx->temp_buff, 0, sizeof(sh->ctx->temp_buff));
    7966:	6880      	ldr	r0, [r0, #8]
    7968:	f44f 7280 	mov.w	r2, #256	; 0x100
    796c:	4639      	mov	r1, r7
    796e:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    7972:	f00b fa39 	bl	12de8 <memset>
	z_shell_raw_fprintf(sh->fprintf_ctx, cmd_get_terminal_size);
    7976:	4948      	ldr	r1, [pc, #288]	; (7a98 <cursor_position_get+0x148>)
    7978:	6960      	ldr	r0, [r4, #20]
    797a:	f00a fd72 	bl	12462 <z_shell_raw_fprintf>
	z_shell_fprintf_buffer_flush(sh->fprintf_ctx);
    797e:	6960      	ldr	r0, [r4, #20]
    7980:	f009 fe7e 	bl	11680 <z_shell_fprintf_buffer_flush>
	for (uint16_t i = 0; i < 1000; i++) {
    7984:	46b8      	mov	r8, r7
    7986:	f5b8 7f7a 	cmp.w	r8, #1000	; 0x3e8
    798a:	d315      	bcc.n	79b8 <cursor_position_get+0x68>
	return -ETIMEDOUT;
    798c:	f06f 0073 	mvn.w	r0, #115	; 0x73
    7990:	e07b      	b.n	7a8a <cursor_position_get+0x13a>
	z_impl_k_busy_wait(usec_to_wait);
    7992:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7996:	f00d f91e 	bl	14bd6 <z_impl_k_busy_wait>
	for (uint16_t i = 0; i < 1000; i++) {
    799a:	f108 0801 	add.w	r8, r8, #1
    799e:	fa1f f888 	uxth.w	r8, r8
    79a2:	e7f0      	b.n	7986 <cursor_position_get+0x36>
			if (c == 'R') { /* End of response from the terminal. */
    79a4:	2b52      	cmp	r3, #82	; 0x52
    79a6:	d01d      	beq.n	79e4 <cursor_position_get+0x94>
			sh->ctx->temp_buff[buff_idx] = c;
    79a8:	68a2      	ldr	r2, [r4, #8]
    79aa:	443a      	add	r2, r7
    79ac:	f882 3142 	strb.w	r3, [r2, #322]	; 0x142
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    79b0:	3701      	adds	r7, #1
    79b2:	b2bf      	uxth	r7, r7
    79b4:	2f09      	cmp	r7, #9
    79b6:	d862      	bhi.n	7a7e <cursor_position_get+0x12e>
			(void)sh->iface->api->read(sh->iface, &c,
    79b8:	6860      	ldr	r0, [r4, #4]
    79ba:	6803      	ldr	r3, [r0, #0]
    79bc:	f8d3 9010 	ldr.w	r9, [r3, #16]
    79c0:	ab01      	add	r3, sp, #4
    79c2:	2201      	movs	r2, #1
    79c4:	f10d 0103 	add.w	r1, sp, #3
    79c8:	47c8      	blx	r9
			if (cnt == 0) {
    79ca:	9b01      	ldr	r3, [sp, #4]
    79cc:	2b00      	cmp	r3, #0
    79ce:	d0e0      	beq.n	7992 <cursor_position_get+0x42>
			if ((c != SHELL_VT100_ASCII_ESC) &&
    79d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    79d4:	2b1b      	cmp	r3, #27
    79d6:	d0e5      	beq.n	79a4 <cursor_position_get+0x54>
			    (sh->ctx->temp_buff[0] !=
    79d8:	68a2      	ldr	r2, [r4, #8]
    79da:	f892 2142 	ldrb.w	r2, [r2, #322]	; 0x142
			if ((c != SHELL_VT100_ASCII_ESC) &&
    79de:	2a1b      	cmp	r2, #27
    79e0:	d0e0      	beq.n	79a4 <cursor_position_get+0x54>
    79e2:	e7e9      	b.n	79b8 <cursor_position_get+0x68>
				sh->ctx->temp_buff[buff_idx] = '\0';
    79e4:	68a3      	ldr	r3, [r4, #8]
    79e6:	443b      	add	r3, r7
    79e8:	2200      	movs	r2, #0
    79ea:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
				if (sh->ctx->temp_buff[1] != '[') {
    79ee:	68a3      	ldr	r3, [r4, #8]
    79f0:	f893 2143 	ldrb.w	r2, [r3, #323]	; 0x143
    79f4:	2a5b      	cmp	r2, #91	; 0x5b
    79f6:	d115      	bne.n	7a24 <cursor_position_get+0xd4>
				buff_idx = 2U;
    79f8:	2202      	movs	r2, #2
				while (sh->ctx->temp_buff[buff_idx] != ';') {
    79fa:	68a3      	ldr	r3, [r4, #8]
    79fc:	4413      	add	r3, r2
    79fe:	f893 1142 	ldrb.w	r1, [r3, #322]	; 0x142
    7a02:	293b      	cmp	r1, #59	; 0x3b
    7a04:	d014      	beq.n	7a30 <cursor_position_get+0xe0>
					*y = *y * 10U +
    7a06:	882b      	ldrh	r3, [r5, #0]
    7a08:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7a0c:	005b      	lsls	r3, r3, #1
    7a0e:	b29b      	uxth	r3, r3
					(sh->ctx->temp_buff[buff_idx++] -
    7a10:	3201      	adds	r2, #1
    7a12:	b292      	uxth	r2, r2
					*y = *y * 10U +
    7a14:	440b      	add	r3, r1
    7a16:	3b30      	subs	r3, #48	; 0x30
    7a18:	802b      	strh	r3, [r5, #0]
					if (buff_idx >=
    7a1a:	2aff      	cmp	r2, #255	; 0xff
    7a1c:	d9ed      	bls.n	79fa <cursor_position_get+0xaa>
						return -EMSGSIZE;
    7a1e:	f06f 0079 	mvn.w	r0, #121	; 0x79
    7a22:	e032      	b.n	7a8a <cursor_position_get+0x13a>
					sh->ctx->temp_buff[0] = 0;
    7a24:	2200      	movs	r2, #0
    7a26:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
					return -EIO;
    7a2a:	f06f 0004 	mvn.w	r0, #4
    7a2e:	e02c      	b.n	7a8a <cursor_position_get+0x13a>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    7a30:	3201      	adds	r2, #1
    7a32:	b292      	uxth	r2, r2
    7a34:	2aff      	cmp	r2, #255	; 0xff
    7a36:	d82b      	bhi.n	7a90 <cursor_position_get+0x140>
				while (sh->ctx->temp_buff[buff_idx]
    7a38:	68a3      	ldr	r3, [r4, #8]
    7a3a:	4413      	add	r3, r2
    7a3c:	f893 1142 	ldrb.w	r1, [r3, #322]	; 0x142
							     != '\0') {
    7a40:	b171      	cbz	r1, 7a60 <cursor_position_get+0x110>
					*x = *x * 10U +
    7a42:	8833      	ldrh	r3, [r6, #0]
    7a44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7a48:	005b      	lsls	r3, r3, #1
    7a4a:	b29b      	uxth	r3, r3
					(sh->ctx->temp_buff[buff_idx++] -
    7a4c:	3201      	adds	r2, #1
    7a4e:	b292      	uxth	r2, r2
					*x = *x * 10U +
    7a50:	440b      	add	r3, r1
    7a52:	3b30      	subs	r3, #48	; 0x30
    7a54:	8033      	strh	r3, [r6, #0]
					if (buff_idx >=
    7a56:	2aff      	cmp	r2, #255	; 0xff
    7a58:	d9ee      	bls.n	7a38 <cursor_position_get+0xe8>
						return -EMSGSIZE;
    7a5a:	f06f 0079 	mvn.w	r0, #121	; 0x79
    7a5e:	e014      	b.n	7a8a <cursor_position_get+0x13a>
				if (*x > SHELL_MAX_TERMINAL_SIZE) {
    7a60:	8833      	ldrh	r3, [r6, #0]
    7a62:	2bfa      	cmp	r3, #250	; 0xfa
    7a64:	d901      	bls.n	7a6a <cursor_position_get+0x11a>
					*x = SHELL_MAX_TERMINAL_SIZE;
    7a66:	23fa      	movs	r3, #250	; 0xfa
    7a68:	8033      	strh	r3, [r6, #0]
				if (*y > SHELL_MAX_TERMINAL_SIZE) {
    7a6a:	882b      	ldrh	r3, [r5, #0]
    7a6c:	2bfa      	cmp	r3, #250	; 0xfa
    7a6e:	d901      	bls.n	7a74 <cursor_position_get+0x124>
					*y = SHELL_MAX_TERMINAL_SIZE;
    7a70:	23fa      	movs	r3, #250	; 0xfa
    7a72:	802b      	strh	r3, [r5, #0]
				sh->ctx->temp_buff[0] = 0;
    7a74:	68a3      	ldr	r3, [r4, #8]
    7a76:	2000      	movs	r0, #0
    7a78:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
				return 0;
    7a7c:	e005      	b.n	7a8a <cursor_position_get+0x13a>
				sh->ctx->temp_buff[0] = 0;
    7a7e:	68a3      	ldr	r3, [r4, #8]
    7a80:	2200      	movs	r2, #0
    7a82:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
				return -ENOMEM;
    7a86:	f06f 000b 	mvn.w	r0, #11
}
    7a8a:	b003      	add	sp, #12
    7a8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					return -EIO;
    7a90:	f06f 0004 	mvn.w	r0, #4
    7a94:	e7f9      	b.n	7a8a <cursor_position_get+0x13a>
    7a96:	bf00      	nop
    7a98:	0001725c 	.word	0x0001725c

00007a9c <cmd_resize>:

static int cmd_resize(const struct shell *sh, size_t argc, char **argv)
{
    7a9c:	b510      	push	{r4, lr}
    7a9e:	b082      	sub	sp, #8
    7aa0:	4604      	mov	r4, r0
	int err;

	if (argc != 1) {
    7aa2:	2901      	cmp	r1, #1
    7aa4:	d104      	bne.n	7ab0 <cmd_resize+0x14>
		shell_error(sh, "%s:%s%s", argv[0],
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
	}

	err = terminal_size_get(sh);
    7aa6:	f00a fd9a 	bl	125de <terminal_size_get>
	if (err != 0) {
    7aaa:	b968      	cbnz	r0, 7ac8 <cmd_resize+0x2c>
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
    7aac:	b002      	add	sp, #8
    7aae:	bd10      	pop	{r4, pc}
		shell_error(sh, "%s:%s%s", argv[0],
    7ab0:	6853      	ldr	r3, [r2, #4]
    7ab2:	9301      	str	r3, [sp, #4]
    7ab4:	4b0b      	ldr	r3, [pc, #44]	; (7ae4 <cmd_resize+0x48>)
    7ab6:	9300      	str	r3, [sp, #0]
    7ab8:	6813      	ldr	r3, [r2, #0]
    7aba:	4a0b      	ldr	r2, [pc, #44]	; (7ae8 <cmd_resize+0x4c>)
    7abc:	2101      	movs	r1, #1
    7abe:	f009 fdb5 	bl	1162c <shell_fprintf>
		return -EINVAL;
    7ac2:	f06f 0015 	mvn.w	r0, #21
    7ac6:	e7f1      	b.n	7aac <cmd_resize+0x10>
		sh->ctx->vt100_ctx.cons.terminal_wid =
    7ac8:	68a3      	ldr	r3, [r4, #8]
    7aca:	2250      	movs	r2, #80	; 0x50
    7acc:	855a      	strh	r2, [r3, #42]	; 0x2a
		sh->ctx->vt100_ctx.cons.terminal_hei =
    7ace:	68a3      	ldr	r3, [r4, #8]
    7ad0:	2218      	movs	r2, #24
    7ad2:	851a      	strh	r2, [r3, #40]	; 0x28
		shell_warn(sh, "No response from the terminal, assumed 80x24"
    7ad4:	4a05      	ldr	r2, [pc, #20]	; (7aec <cmd_resize+0x50>)
    7ad6:	2103      	movs	r1, #3
    7ad8:	4620      	mov	r0, r4
    7ada:	f009 fda7 	bl	1162c <shell_fprintf>
		return -ENOEXEC;
    7ade:	f06f 0007 	mvn.w	r0, #7
    7ae2:	e7e3      	b.n	7aac <cmd_resize+0x10>
    7ae4:	000171c4 	.word	0x000171c4
    7ae8:	000171b8 	.word	0x000171b8
    7aec:	00017220 	.word	0x00017220

00007af0 <commands_expand>:
 * @retval WILDCARD_CMD_NO_MATCH_FOUND No matching command found.
 */
static enum shell_wildcard_status commands_expand(const struct shell *sh,
					const struct shell_static_entry *cmd,
					const char *pattern)
{
    7af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7af4:	b086      	sub	sp, #24
    7af6:	4681      	mov	r9, r0
    7af8:	460f      	mov	r7, r1
    7afa:	4616      	mov	r6, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
	struct shell_static_entry const *entry = NULL;
	struct shell_static_entry dloc;
	size_t cmd_idx = 0;
	size_t cnt = 0;
    7afc:	f04f 0800 	mov.w	r8, #0
	size_t cmd_idx = 0;
    7b00:	4641      	mov	r1, r8
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
    7b02:	2502      	movs	r5, #2

	while ((entry = z_shell_cmd_get(cmd, cmd_idx++, &dloc)) != NULL) {
    7b04:	e00d      	b.n	7b22 <commands_expand+0x32>
		if (fnmatch(pattern, entry->syntax, 0) == 0) {
			ret_val = command_add(sh->ctx->temp_buff,
					      &sh->ctx->cmd_tmp_buff_len,
					      entry->syntax, pattern);
			if (ret_val == SHELL_WILDCARD_CMD_MISSING_SPACE) {
				z_shell_fprintf(sh, SHELL_WARNING,
    7b06:	4633      	mov	r3, r6
    7b08:	4a1c      	ldr	r2, [pc, #112]	; (7b7c <commands_expand+0x8c>)
    7b0a:	2103      	movs	r1, #3
    7b0c:	4648      	mov	r0, r9
    7b0e:	f00a fa0b 	bl	11f28 <z_shell_fprintf>
			}
			cnt++;
		}
	}

	if (cnt > 0) {
    7b12:	f1b8 0f00 	cmp.w	r8, #0
    7b16:	d127      	bne.n	7b68 <commands_expand+0x78>
		z_shell_pattern_remove(sh->ctx->temp_buff,
				       &sh->ctx->cmd_tmp_buff_len, pattern);
	}

	return ret_val;
}
    7b18:	4628      	mov	r0, r5
    7b1a:	b006      	add	sp, #24
    7b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
{
    7b20:	4621      	mov	r1, r4
	while ((entry = z_shell_cmd_get(cmd, cmd_idx++, &dloc)) != NULL) {
    7b22:	1c4c      	adds	r4, r1, #1
    7b24:	aa01      	add	r2, sp, #4
    7b26:	4638      	mov	r0, r7
    7b28:	f7ff fb58 	bl	71dc <z_shell_cmd_get>
    7b2c:	4682      	mov	sl, r0
    7b2e:	2800      	cmp	r0, #0
    7b30:	d0ef      	beq.n	7b12 <commands_expand+0x22>
		if (fnmatch(pattern, entry->syntax, 0) == 0) {
    7b32:	2200      	movs	r2, #0
    7b34:	f8da 1000 	ldr.w	r1, [sl]
    7b38:	4630      	mov	r0, r6
    7b3a:	f00b fb47 	bl	131cc <fnmatch>
    7b3e:	2800      	cmp	r0, #0
    7b40:	d1ee      	bne.n	7b20 <commands_expand+0x30>
			ret_val = command_add(sh->ctx->temp_buff,
    7b42:	f8d9 0008 	ldr.w	r0, [r9, #8]
    7b46:	4633      	mov	r3, r6
    7b48:	f8da 2000 	ldr.w	r2, [sl]
    7b4c:	f100 0140 	add.w	r1, r0, #64	; 0x40
    7b50:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    7b54:	f00a fe43 	bl	127de <command_add>
    7b58:	4605      	mov	r5, r0
			if (ret_val == SHELL_WILDCARD_CMD_MISSING_SPACE) {
    7b5a:	2801      	cmp	r0, #1
    7b5c:	d0d3      	beq.n	7b06 <commands_expand+0x16>
			} else if (ret_val != SHELL_WILDCARD_CMD_ADDED) {
    7b5e:	2800      	cmp	r0, #0
    7b60:	d1d7      	bne.n	7b12 <commands_expand+0x22>
			cnt++;
    7b62:	f108 0801 	add.w	r8, r8, #1
    7b66:	e7db      	b.n	7b20 <commands_expand+0x30>
		z_shell_pattern_remove(sh->ctx->temp_buff,
    7b68:	f8d9 0008 	ldr.w	r0, [r9, #8]
    7b6c:	4632      	mov	r2, r6
    7b6e:	f100 0140 	add.w	r1, r0, #64	; 0x40
    7b72:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    7b76:	f009 ff15 	bl	119a4 <z_shell_pattern_remove>
    7b7a:	e7cd      	b.n	7b18 <commands_expand+0x28>
    7b7c:	00017910 	.word	0x00017910

00007b80 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    7b80:	4901      	ldr	r1, [pc, #4]	; (7b88 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    7b82:	2210      	movs	r2, #16
	str	r2, [r1]
    7b84:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    7b86:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    7b88:	e000ed10 	.word	0xe000ed10

00007b8c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    7b8c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    7b8e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    7b90:	f380 8811 	msr	BASEPRI, r0
	isb
    7b94:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    7b98:	f3bf 8f4f 	dsb	sy
    7b9c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    7b9e:	b662      	cpsie	i
	isb
    7ba0:	f3bf 8f6f 	isb	sy

	bx	lr
    7ba4:	4770      	bx	lr
    7ba6:	bf00      	nop

00007ba8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    7ba8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    7baa:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    7bac:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    7bb0:	f3bf 8f4f 	dsb	sy
    7bb4:	bf20      	wfe

	msr	BASEPRI, r0
    7bb6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    7bba:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    7bbc:	4770      	bx	lr
    7bbe:	bf00      	nop

00007bc0 <esf_dump>:
#include <kernel_arch_data.h>
#include <zephyr/logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    7bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7bc4:	b082      	sub	sp, #8
    7bc6:	af00      	add	r7, sp, #0
    7bc8:	4604      	mov	r4, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    7bca:	4b92      	ldr	r3, [pc, #584]	; (7e14 <esf_dump+0x254>)
    7bcc:	681b      	ldr	r3, [r3, #0]
    7bce:	f013 0f07 	tst.w	r3, #7
    7bd2:	d044      	beq.n	7c5e <esf_dump+0x9e>
    7bd4:	f8d0 e000 	ldr.w	lr, [r0]
    7bd8:	f8d0 c004 	ldr.w	ip, [r0, #4]
    7bdc:	6886      	ldr	r6, [r0, #8]
    7bde:	466d      	mov	r5, sp
    7be0:	b08a      	sub	sp, #40	; 0x28
    7be2:	466b      	mov	r3, sp
    7be4:	f113 0210 	adds.w	r2, r3, #16
    7be8:	f000 80fc 	beq.w	7de4 <esf_dump+0x224>
    7bec:	2114      	movs	r1, #20
    7bee:	b18a      	cbz	r2, 7c14 <esf_dump+0x54>
    7bf0:	4608      	mov	r0, r1
    7bf2:	2904      	cmp	r1, #4
    7bf4:	dd03      	ble.n	7bfe <esf_dump+0x3e>
    7bf6:	f8df 8220 	ldr.w	r8, [pc, #544]	; 7e18 <esf_dump+0x258>
    7bfa:	f8c3 8014 	str.w	r8, [r3, #20]
    7bfe:	2808      	cmp	r0, #8
    7c00:	dd01      	ble.n	7c06 <esf_dump+0x46>
    7c02:	f8c3 e018 	str.w	lr, [r3, #24]
    7c06:	280c      	cmp	r0, #12
    7c08:	dd01      	ble.n	7c0e <esf_dump+0x4e>
    7c0a:	f8c3 c01c 	str.w	ip, [r3, #28]
    7c0e:	2810      	cmp	r0, #16
    7c10:	dd00      	ble.n	7c14 <esf_dump+0x54>
    7c12:	621e      	str	r6, [r3, #32]
    7c14:	2913      	cmp	r1, #19
    7c16:	f340 80e8 	ble.w	7dea <esf_dump+0x22a>
    7c1a:	f04f 0c14 	mov.w	ip, #20
    7c1e:	b13a      	cbz	r2, 7c30 <esf_dump+0x70>
    7c20:	2105      	movs	r1, #5
    7c22:	7139      	strb	r1, [r7, #4]
    7c24:	2100      	movs	r1, #0
    7c26:	7179      	strb	r1, [r7, #5]
    7c28:	71b9      	strb	r1, [r7, #6]
    7c2a:	71f9      	strb	r1, [r7, #7]
    7c2c:	6878      	ldr	r0, [r7, #4]
    7c2e:	6118      	str	r0, [r3, #16]
    7c30:	2100      	movs	r1, #0
    7c32:	f36f 0100 	bfc	r1, #0, #1
    7c36:	f36f 0141 	bfc	r1, #1, #1
    7c3a:	f36f 0182 	bfc	r1, #2, #1
    7c3e:	f36f 01c5 	bfc	r1, #3, #3
    7c42:	2301      	movs	r3, #1
    7c44:	f363 1188 	bfi	r1, r3, #6, #3
    7c48:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    7c4c:	f36c 2153 	bfi	r1, ip, #9, #11
    7c50:	f36f 511f 	bfc	r1, #20, #12
    7c54:	2300      	movs	r3, #0
    7c56:	486f      	ldr	r0, [pc, #444]	; (7e14 <esf_dump+0x254>)
    7c58:	f7fc fe60 	bl	491c <z_impl_z_log_msg_static_create>
    7c5c:	46ad      	mov	sp, r5
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    7c5e:	4b6d      	ldr	r3, [pc, #436]	; (7e14 <esf_dump+0x254>)
    7c60:	681b      	ldr	r3, [r3, #0]
    7c62:	f013 0f07 	tst.w	r3, #7
    7c66:	d044      	beq.n	7cf2 <esf_dump+0x132>
    7c68:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    7c6c:	f8d4 c010 	ldr.w	ip, [r4, #16]
    7c70:	6966      	ldr	r6, [r4, #20]
    7c72:	466d      	mov	r5, sp
    7c74:	b08a      	sub	sp, #40	; 0x28
    7c76:	466b      	mov	r3, sp
    7c78:	f113 0210 	adds.w	r2, r3, #16
    7c7c:	f000 80b8 	beq.w	7df0 <esf_dump+0x230>
    7c80:	2114      	movs	r1, #20
    7c82:	b18a      	cbz	r2, 7ca8 <esf_dump+0xe8>
    7c84:	4608      	mov	r0, r1
    7c86:	2904      	cmp	r1, #4
    7c88:	dd03      	ble.n	7c92 <esf_dump+0xd2>
    7c8a:	f8df 8190 	ldr.w	r8, [pc, #400]	; 7e1c <esf_dump+0x25c>
    7c8e:	f8c3 8014 	str.w	r8, [r3, #20]
    7c92:	2808      	cmp	r0, #8
    7c94:	dd01      	ble.n	7c9a <esf_dump+0xda>
    7c96:	f8c3 e018 	str.w	lr, [r3, #24]
    7c9a:	280c      	cmp	r0, #12
    7c9c:	dd01      	ble.n	7ca2 <esf_dump+0xe2>
    7c9e:	f8c3 c01c 	str.w	ip, [r3, #28]
    7ca2:	2810      	cmp	r0, #16
    7ca4:	dd00      	ble.n	7ca8 <esf_dump+0xe8>
    7ca6:	621e      	str	r6, [r3, #32]
    7ca8:	2913      	cmp	r1, #19
    7caa:	f340 80a4 	ble.w	7df6 <esf_dump+0x236>
    7cae:	f04f 0c14 	mov.w	ip, #20
    7cb2:	b13a      	cbz	r2, 7cc4 <esf_dump+0x104>
    7cb4:	2105      	movs	r1, #5
    7cb6:	7139      	strb	r1, [r7, #4]
    7cb8:	2100      	movs	r1, #0
    7cba:	7179      	strb	r1, [r7, #5]
    7cbc:	71b9      	strb	r1, [r7, #6]
    7cbe:	71f9      	strb	r1, [r7, #7]
    7cc0:	6878      	ldr	r0, [r7, #4]
    7cc2:	6118      	str	r0, [r3, #16]
    7cc4:	2100      	movs	r1, #0
    7cc6:	f36f 0100 	bfc	r1, #0, #1
    7cca:	f36f 0141 	bfc	r1, #1, #1
    7cce:	f36f 0182 	bfc	r1, #2, #1
    7cd2:	f36f 01c5 	bfc	r1, #3, #3
    7cd6:	2301      	movs	r3, #1
    7cd8:	f363 1188 	bfi	r1, r3, #6, #3
    7cdc:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    7ce0:	f36c 2153 	bfi	r1, ip, #9, #11
    7ce4:	f36f 511f 	bfc	r1, #20, #12
    7ce8:	2300      	movs	r3, #0
    7cea:	484a      	ldr	r0, [pc, #296]	; (7e14 <esf_dump+0x254>)
    7cec:	f7fc fe16 	bl	491c <z_impl_z_log_msg_static_create>
    7cf0:	46ad      	mov	sp, r5
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    7cf2:	4b48      	ldr	r3, [pc, #288]	; (7e14 <esf_dump+0x254>)
    7cf4:	681b      	ldr	r3, [r3, #0]
    7cf6:	f013 0f07 	tst.w	r3, #7
    7cfa:	d036      	beq.n	7d6a <esf_dump+0x1aa>
    7cfc:	69e6      	ldr	r6, [r4, #28]
    7cfe:	466d      	mov	r5, sp
    7d00:	b088      	sub	sp, #32
    7d02:	466b      	mov	r3, sp
    7d04:	f113 0210 	adds.w	r2, r3, #16
    7d08:	d078      	beq.n	7dfc <esf_dump+0x23c>
    7d0a:	210c      	movs	r1, #12
    7d0c:	b14a      	cbz	r2, 7d22 <esf_dump+0x162>
    7d0e:	4608      	mov	r0, r1
    7d10:	2904      	cmp	r1, #4
    7d12:	dd03      	ble.n	7d1c <esf_dump+0x15c>
    7d14:	f8df c108 	ldr.w	ip, [pc, #264]	; 7e20 <esf_dump+0x260>
    7d18:	f8c3 c014 	str.w	ip, [r3, #20]
    7d1c:	2808      	cmp	r0, #8
    7d1e:	dd00      	ble.n	7d22 <esf_dump+0x162>
    7d20:	619e      	str	r6, [r3, #24]
    7d22:	290b      	cmp	r1, #11
    7d24:	dd6d      	ble.n	7e02 <esf_dump+0x242>
    7d26:	f04f 0c0c 	mov.w	ip, #12
    7d2a:	b13a      	cbz	r2, 7d3c <esf_dump+0x17c>
    7d2c:	2103      	movs	r1, #3
    7d2e:	7139      	strb	r1, [r7, #4]
    7d30:	2100      	movs	r1, #0
    7d32:	7179      	strb	r1, [r7, #5]
    7d34:	71b9      	strb	r1, [r7, #6]
    7d36:	71f9      	strb	r1, [r7, #7]
    7d38:	6878      	ldr	r0, [r7, #4]
    7d3a:	6118      	str	r0, [r3, #16]
    7d3c:	2100      	movs	r1, #0
    7d3e:	f36f 0100 	bfc	r1, #0, #1
    7d42:	f36f 0141 	bfc	r1, #1, #1
    7d46:	f36f 0182 	bfc	r1, #2, #1
    7d4a:	f36f 01c5 	bfc	r1, #3, #3
    7d4e:	2301      	movs	r3, #1
    7d50:	f363 1188 	bfi	r1, r3, #6, #3
    7d54:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
    7d58:	f36c 2153 	bfi	r1, ip, #9, #11
    7d5c:	f36f 511f 	bfc	r1, #20, #12
    7d60:	2300      	movs	r3, #0
    7d62:	482c      	ldr	r0, [pc, #176]	; (7e14 <esf_dump+0x254>)
    7d64:	f7fc fdda 	bl	491c <z_impl_z_log_msg_static_create>
    7d68:	46ad      	mov	sp, r5
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    7d6a:	4b2a      	ldr	r3, [pc, #168]	; (7e14 <esf_dump+0x254>)
    7d6c:	681b      	ldr	r3, [r3, #0]
    7d6e:	f013 0f07 	tst.w	r3, #7
    7d72:	d033      	beq.n	7ddc <esf_dump+0x21c>
    7d74:	69a4      	ldr	r4, [r4, #24]
    7d76:	466d      	mov	r5, sp
    7d78:	b088      	sub	sp, #32
    7d7a:	466b      	mov	r3, sp
    7d7c:	f113 0210 	adds.w	r2, r3, #16
    7d80:	d042      	beq.n	7e08 <esf_dump+0x248>
    7d82:	210c      	movs	r1, #12
    7d84:	b13a      	cbz	r2, 7d96 <esf_dump+0x1d6>
    7d86:	4608      	mov	r0, r1
    7d88:	2904      	cmp	r1, #4
    7d8a:	dd01      	ble.n	7d90 <esf_dump+0x1d0>
    7d8c:	4e25      	ldr	r6, [pc, #148]	; (7e24 <esf_dump+0x264>)
    7d8e:	615e      	str	r6, [r3, #20]
    7d90:	2808      	cmp	r0, #8
    7d92:	dd00      	ble.n	7d96 <esf_dump+0x1d6>
    7d94:	619c      	str	r4, [r3, #24]
    7d96:	290b      	cmp	r1, #11
    7d98:	dd39      	ble.n	7e0e <esf_dump+0x24e>
    7d9a:	240c      	movs	r4, #12
    7d9c:	b13a      	cbz	r2, 7dae <esf_dump+0x1ee>
    7d9e:	2103      	movs	r1, #3
    7da0:	7139      	strb	r1, [r7, #4]
    7da2:	2100      	movs	r1, #0
    7da4:	7179      	strb	r1, [r7, #5]
    7da6:	71b9      	strb	r1, [r7, #6]
    7da8:	71f9      	strb	r1, [r7, #7]
    7daa:	6878      	ldr	r0, [r7, #4]
    7dac:	6118      	str	r0, [r3, #16]
    7dae:	2100      	movs	r1, #0
    7db0:	f36f 0100 	bfc	r1, #0, #1
    7db4:	f36f 0141 	bfc	r1, #1, #1
    7db8:	f36f 0182 	bfc	r1, #2, #1
    7dbc:	f36f 01c5 	bfc	r1, #3, #3
    7dc0:	2301      	movs	r3, #1
    7dc2:	f363 1188 	bfi	r1, r3, #6, #3
    7dc6:	f3c4 040a 	ubfx	r4, r4, #0, #11
    7dca:	f364 2153 	bfi	r1, r4, #9, #11
    7dce:	f36f 511f 	bfc	r1, #20, #12
    7dd2:	2300      	movs	r3, #0
    7dd4:	480f      	ldr	r0, [pc, #60]	; (7e14 <esf_dump+0x254>)
    7dd6:	f7fc fda1 	bl	491c <z_impl_z_log_msg_static_create>
    7dda:	46ad      	mov	sp, r5
		esf->basic.pc);
}
    7ddc:	3708      	adds	r7, #8
    7dde:	46bd      	mov	sp, r7
    7de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    7de4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    7de8:	e701      	b.n	7bee <esf_dump+0x2e>
    7dea:	f06f 0c1b 	mvn.w	ip, #27
    7dee:	e716      	b.n	7c1e <esf_dump+0x5e>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    7df0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    7df4:	e745      	b.n	7c82 <esf_dump+0xc2>
    7df6:	f06f 0c1b 	mvn.w	ip, #27
    7dfa:	e75a      	b.n	7cb2 <esf_dump+0xf2>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    7dfc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    7e00:	e784      	b.n	7d0c <esf_dump+0x14c>
    7e02:	f06f 0c1b 	mvn.w	ip, #27
    7e06:	e790      	b.n	7d2a <esf_dump+0x16a>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    7e08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    7e0c:	e7ba      	b.n	7d84 <esf_dump+0x1c4>
    7e0e:	f06f 041b 	mvn.w	r4, #27
    7e12:	e7c3      	b.n	7d9c <esf_dump+0x1dc>
    7e14:	200002f8 	.word	0x200002f8
    7e18:	00017964 	.word	0x00017964
    7e1c:	00017994 	.word	0x00017994
    7e20:	000179c4 	.word	0x000179c4
    7e24:	000179d4 	.word	0x000179d4

00007e28 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    7e28:	2800      	cmp	r0, #0
    7e2a:	db07      	blt.n	7e3c <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7e2c:	f000 021f 	and.w	r2, r0, #31
    7e30:	0940      	lsrs	r0, r0, #5
    7e32:	2301      	movs	r3, #1
    7e34:	4093      	lsls	r3, r2
    7e36:	4a02      	ldr	r2, [pc, #8]	; (7e40 <__NVIC_EnableIRQ+0x18>)
    7e38:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
    7e3c:	4770      	bx	lr
    7e3e:	bf00      	nop
    7e40:	e000e100 	.word	0xe000e100

00007e44 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    7e44:	2800      	cmp	r0, #0
    7e46:	db0c      	blt.n	7e62 <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7e48:	f000 021f 	and.w	r2, r0, #31
    7e4c:	0940      	lsrs	r0, r0, #5
    7e4e:	2301      	movs	r3, #1
    7e50:	4093      	lsls	r3, r2
    7e52:	3020      	adds	r0, #32
    7e54:	4a03      	ldr	r2, [pc, #12]	; (7e64 <__NVIC_DisableIRQ+0x20>)
    7e56:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    7e5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7e5e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    7e62:	4770      	bx	lr
    7e64:	e000e100 	.word	0xe000e100

00007e68 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    7e68:	2800      	cmp	r0, #0
    7e6a:	db08      	blt.n	7e7e <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7e6c:	0149      	lsls	r1, r1, #5
    7e6e:	b2c9      	uxtb	r1, r1
    7e70:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    7e74:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    7e78:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    7e7c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7e7e:	f000 000f 	and.w	r0, r0, #15
    7e82:	0149      	lsls	r1, r1, #5
    7e84:	b2c9      	uxtb	r1, r1
    7e86:	4b01      	ldr	r3, [pc, #4]	; (7e8c <__NVIC_SetPriority+0x24>)
    7e88:	5419      	strb	r1, [r3, r0]
  }
}
    7e8a:	4770      	bx	lr
    7e8c:	e000ed14 	.word	0xe000ed14

00007e90 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    7e90:	0942      	lsrs	r2, r0, #5
    7e92:	4b05      	ldr	r3, [pc, #20]	; (7ea8 <arch_irq_is_enabled+0x18>)
    7e94:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    7e98:	f000 001f 	and.w	r0, r0, #31
    7e9c:	2301      	movs	r3, #1
    7e9e:	fa03 f000 	lsl.w	r0, r3, r0
}
    7ea2:	4010      	ands	r0, r2
    7ea4:	4770      	bx	lr
    7ea6:	bf00      	nop
    7ea8:	e000e100 	.word	0xe000e100

00007eac <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    7eac:	bf30      	wfi
    b z_SysNmiOnReset
    7eae:	f7ff bffd 	b.w	7eac <z_SysNmiOnReset>
    7eb2:	bf00      	nop

00007eb4 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    7eb4:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    7eb6:	4b0b      	ldr	r3, [pc, #44]	; (7ee4 <z_arm_prep_c+0x30>)
    7eb8:	4a0b      	ldr	r2, [pc, #44]	; (7ee8 <z_arm_prep_c+0x34>)
    7eba:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    7ebe:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    7ec0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7ec4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    7ec8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    7ecc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    7ed0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    7ed4:	f005 f9d8 	bl	d288 <z_bss_zero>
	z_data_copy();
    7ed8:	f006 f8f4 	bl	e0c4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    7edc:	f001 f810 	bl	8f00 <z_arm_interrupt_init>
	z_cstart();
    7ee0:	f005 fa2e 	bl	d340 <z_cstart>
    7ee4:	e000ed00 	.word	0xe000ed00
    7ee8:	00000000 	.word	0x00000000

00007eec <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    7eec:	4a0a      	ldr	r2, [pc, #40]	; (7f18 <arch_swap+0x2c>)
    7eee:	6893      	ldr	r3, [r2, #8]
    7ef0:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
    7ef4:	4909      	ldr	r1, [pc, #36]	; (7f1c <arch_swap+0x30>)
    7ef6:	6809      	ldr	r1, [r1, #0]
    7ef8:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    7efc:	4908      	ldr	r1, [pc, #32]	; (7f20 <arch_swap+0x34>)
    7efe:	684b      	ldr	r3, [r1, #4]
    7f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    7f04:	604b      	str	r3, [r1, #4]
    7f06:	2300      	movs	r3, #0
    7f08:	f383 8811 	msr	BASEPRI, r3
    7f0c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    7f10:	6893      	ldr	r3, [r2, #8]
}
    7f12:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
    7f16:	4770      	bx	lr
    7f18:	20003c6c 	.word	0x20003c6c
    7f1c:	00018c3c 	.word	0x00018c3c
    7f20:	e000ed00 	.word	0xe000ed00

00007f24 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    7f24:	4910      	ldr	r1, [pc, #64]	; (7f68 <z_arm_pendsv+0x44>)
    ldr r2, [r1, #_kernel_offset_to_current]
    7f26:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    7f28:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    7f2c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    7f2e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    7f32:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    7f36:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    7f38:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    7f3c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    7f40:	4f0a      	ldr	r7, [pc, #40]	; (7f6c <z_arm_pendsv+0x48>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    7f42:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    7f46:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    7f48:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    7f4a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    7f4c:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
    7f50:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    7f52:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    7f56:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    7f5a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    7f5e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    7f62:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    7f66:	4770      	bx	lr
    ldr r1, =_kernel
    7f68:	20003c6c 	.word	0x20003c6c
    ldr v4, =_SCS_ICSR
    7f6c:	e000ed04 	.word	0xe000ed04

00007f70 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    7f70:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    7f74:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    7f76:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    7f7a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    7f7e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    7f80:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    7f84:	2902      	cmp	r1, #2
    beq _oops
    7f86:	d0ff      	beq.n	7f88 <_oops>

00007f88 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    7f88:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    7f8a:	f00a fcc5 	bl	12918 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    7f8e:	bd01      	pop	{r0, pc}

00007f90 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    7f90:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    7f92:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    7f96:	490e      	ldr	r1, [pc, #56]	; (7fd0 <arch_new_thread+0x40>)
    7f98:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    7f9c:	f021 0101 	bic.w	r1, r1, #1
    7fa0:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    7fa4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    7fa8:	9b01      	ldr	r3, [sp, #4]
    7faa:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    7fae:	9b02      	ldr	r3, [sp, #8]
    7fb0:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    7fb4:	9b03      	ldr	r3, [sp, #12]
    7fb6:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    7fba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    7fbe:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
    7fc2:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    7fc4:	2300      	movs	r3, #0
    7fc6:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    7fca:	bc10      	pop	{r4}
    7fcc:	4770      	bx	lr
    7fce:	bf00      	nop
    7fd0:	0000ef3b 	.word	0x0000ef3b

00007fd4 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    7fd4:	4b07      	ldr	r3, [pc, #28]	; (7ff4 <arch_switch_to_main_thread+0x20>)
    7fd6:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    7fd8:	4610      	mov	r0, r2
    7fda:	f381 8809 	msr	PSP, r1
    7fde:	2100      	movs	r1, #0
    7fe0:	b663      	cpsie	if
    7fe2:	f381 8811 	msr	BASEPRI, r1
    7fe6:	f3bf 8f6f 	isb	sy
    7fea:	2200      	movs	r2, #0
    7fec:	2300      	movs	r3, #0
    7fee:	f006 ffa4 	bl	ef3a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    7ff2:	bf00      	nop
    7ff4:	20003c6c 	.word	0x20003c6c

00007ff8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    7ff8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    7ffa:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    7ffc:	4a0b      	ldr	r2, [pc, #44]	; (802c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    7ffe:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    8000:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    8002:	bf1e      	ittt	ne
	movne	r1, #0
    8004:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    8006:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    8008:	f00c fbb7 	blne	1477a <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    800c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    800e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    8012:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    8016:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    801a:	4905      	ldr	r1, [pc, #20]	; (8030 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    801c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    801e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    8020:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    8022:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    8026:	4903      	ldr	r1, [pc, #12]	; (8034 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x34>)
	bx r1
    8028:	4708      	bx	r1
    802a:	0000      	.short	0x0000
	ldr r2, =_kernel
    802c:	20003c6c 	.word	0x20003c6c
	ldr r1, =_sw_isr_table
    8030:	00015190 	.word	0x00015190
	ldr r1, =z_arm_int_exit
    8034:	00008039 	.word	0x00008039

00008038 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    8038:	4b04      	ldr	r3, [pc, #16]	; (804c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    803a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    803c:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    803e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    8040:	d003      	beq.n	804a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    8042:	4903      	ldr	r1, [pc, #12]	; (8050 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    8044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    8048:	600a      	str	r2, [r1, #0]

0000804a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    804a:	4770      	bx	lr
	ldr r3, =_kernel
    804c:	20003c6c 	.word	0x20003c6c
	ldr r1, =_SCS_ICSR
    8050:	e000ed04 	.word	0xe000ed04

00008054 <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    8054:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    8056:	4b0d      	ldr	r3, [pc, #52]	; (808c <z_arm_is_synchronous_svc+0x38>)
    8058:	695a      	ldr	r2, [r3, #20]
    805a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    805e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    8060:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8064:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
    8068:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    806c:	695a      	ldr	r2, [r3, #20]
    806e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    8072:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    8074:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8078:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    807c:	f64d 7302 	movw	r3, #57090	; 0xdf02
    8080:	4299      	cmp	r1, r3
    8082:	d001      	beq.n	8088 <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
    8084:	2000      	movs	r0, #0
    8086:	4770      	bx	lr
		return true;
    8088:	2001      	movs	r0, #1
}
    808a:	4770      	bx	lr
    808c:	e000ed00 	.word	0xe000ed00

00008090 <get_esf>:
	bool *nested_exc)
{
	bool alternative_state_exc = false;
	z_arch_esf_t *ptr_esf = NULL;

	*nested_exc = false;
    8090:	f04f 0c00 	mov.w	ip, #0
    8094:	f883 c000 	strb.w	ip, [r3]

	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    8098:	f002 4c7f 	and.w	ip, r2, #4278190080	; 0xff000000
    809c:	f1bc 4f7f 	cmp.w	ip, #4278190080	; 0xff000000
    80a0:	d13c      	bne.n	811c <get_esf+0x8c>
	}
#else
	/* The processor has a single execution state.
	 * We verify that the Thread mode is using PSP.
	 */
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    80a2:	f002 0c0c 	and.w	ip, r2, #12
    80a6:	f1bc 0f08 	cmp.w	ip, #8
    80aa:	d004      	beq.n	80b6 <get_esf+0x26>
		return NULL;
	}
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	if (!alternative_state_exc) {
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    80ac:	f012 0f08 	tst.w	r2, #8
    80b0:	d031      	beq.n	8116 <get_esf+0x86>
			/* Returning to thread mode */
			ptr_esf =  (z_arch_esf_t *)psp;
    80b2:	4608      	mov	r0, r1
    80b4:	4770      	bx	lr
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    80b6:	4b1a      	ldr	r3, [pc, #104]	; (8120 <get_esf+0x90>)
    80b8:	681b      	ldr	r3, [r3, #0]
    80ba:	f013 0f07 	tst.w	r3, #7
    80be:	d101      	bne.n	80c4 <get_esf+0x34>
		return NULL;
    80c0:	2000      	movs	r0, #0
			*nested_exc = true;
		}
	}

	return ptr_esf;
}
    80c2:	4770      	bx	lr
{
    80c4:	b500      	push	{lr}
    80c6:	b089      	sub	sp, #36	; 0x24
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    80c8:	4b16      	ldr	r3, [pc, #88]	; (8124 <get_esf+0x94>)
    80ca:	9307      	str	r3, [sp, #28]
    80cc:	2302      	movs	r3, #2
    80ce:	f88d 3004 	strb.w	r3, [sp, #4]
    80d2:	2300      	movs	r3, #0
    80d4:	f88d 3005 	strb.w	r3, [sp, #5]
    80d8:	f88d 3006 	strb.w	r3, [sp, #6]
    80dc:	f88d 3007 	strb.w	r3, [sp, #7]
    80e0:	9a01      	ldr	r2, [sp, #4]
    80e2:	9206      	str	r2, [sp, #24]
    80e4:	4619      	mov	r1, r3
    80e6:	f363 0100 	bfi	r1, r3, #0, #1
    80ea:	f363 0141 	bfi	r1, r3, #1, #1
    80ee:	f363 0182 	bfi	r1, r3, #2, #1
    80f2:	f363 01c5 	bfi	r1, r3, #3, #3
    80f6:	2201      	movs	r2, #1
    80f8:	f362 1188 	bfi	r1, r2, #6, #3
    80fc:	2208      	movs	r2, #8
    80fe:	f362 2153 	bfi	r1, r2, #9, #11
    8102:	f363 511f 	bfi	r1, r3, #20, #12
    8106:	aa06      	add	r2, sp, #24
    8108:	4805      	ldr	r0, [pc, #20]	; (8120 <get_esf+0x90>)
    810a:	f7fc fc07 	bl	491c <z_impl_z_log_msg_static_create>
		return NULL;
    810e:	2000      	movs	r0, #0
}
    8110:	b009      	add	sp, #36	; 0x24
    8112:	f85d fb04 	ldr.w	pc, [sp], #4
			*nested_exc = true;
    8116:	2201      	movs	r2, #1
    8118:	701a      	strb	r2, [r3, #0]
    811a:	4770      	bx	lr
		return NULL;
    811c:	2000      	movs	r0, #0
    811e:	4770      	bx	lr
    8120:	200002f8 	.word	0x200002f8
    8124:	00017a04 	.word	0x00017a04

00008128 <mem_manage_fault>:
{
    8128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    812c:	b0a6      	sub	sp, #152	; 0x98
    812e:	af00      	add	r7, sp, #0
    8130:	4606      	mov	r6, r0
    8132:	4688      	mov	r8, r1
    8134:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    8136:	4baf      	ldr	r3, [pc, #700]	; (83f4 <mem_manage_fault+0x2cc>)
    8138:	681b      	ldr	r3, [r3, #0]
    813a:	f013 0f07 	tst.w	r3, #7
    813e:	d10b      	bne.n	8158 <mem_manage_fault+0x30>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    8140:	4bad      	ldr	r3, [pc, #692]	; (83f8 <mem_manage_fault+0x2d0>)
    8142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8144:	f013 0f10 	tst.w	r3, #16
    8148:	d049      	beq.n	81de <mem_manage_fault+0xb6>
		PR_FAULT_INFO("  Stacking error (context area might be"
    814a:	4baa      	ldr	r3, [pc, #680]	; (83f4 <mem_manage_fault+0x2cc>)
    814c:	681b      	ldr	r3, [r3, #0]
    814e:	f013 0f07 	tst.w	r3, #7
    8152:	d122      	bne.n	819a <mem_manage_fault+0x72>
		reason = K_ERR_ARM_MEM_STACKING;
    8154:	2411      	movs	r4, #17
    8156:	e043      	b.n	81e0 <mem_manage_fault+0xb8>
	PR_FAULT_INFO("***** MPU FAULT *****");
    8158:	4ba8      	ldr	r3, [pc, #672]	; (83fc <mem_manage_fault+0x2d4>)
    815a:	61fb      	str	r3, [r7, #28]
    815c:	2302      	movs	r3, #2
    815e:	713b      	strb	r3, [r7, #4]
    8160:	2300      	movs	r3, #0
    8162:	717b      	strb	r3, [r7, #5]
    8164:	71bb      	strb	r3, [r7, #6]
    8166:	71fb      	strb	r3, [r7, #7]
    8168:	687a      	ldr	r2, [r7, #4]
    816a:	61ba      	str	r2, [r7, #24]
    816c:	4619      	mov	r1, r3
    816e:	f363 0100 	bfi	r1, r3, #0, #1
    8172:	f363 0141 	bfi	r1, r3, #1, #1
    8176:	f363 0182 	bfi	r1, r3, #2, #1
    817a:	f363 01c5 	bfi	r1, r3, #3, #3
    817e:	2201      	movs	r2, #1
    8180:	f362 1188 	bfi	r1, r2, #6, #3
    8184:	2208      	movs	r2, #8
    8186:	f362 2153 	bfi	r1, r2, #9, #11
    818a:	f363 511f 	bfi	r1, r3, #20, #12
    818e:	f107 0218 	add.w	r2, r7, #24
    8192:	4898      	ldr	r0, [pc, #608]	; (83f4 <mem_manage_fault+0x2cc>)
    8194:	f7fc fbc2 	bl	491c <z_impl_z_log_msg_static_create>
    8198:	e7d2      	b.n	8140 <mem_manage_fault+0x18>
		PR_FAULT_INFO("  Stacking error (context area might be"
    819a:	4b99      	ldr	r3, [pc, #612]	; (8400 <mem_manage_fault+0x2d8>)
    819c:	637b      	str	r3, [r7, #52]	; 0x34
    819e:	2302      	movs	r3, #2
    81a0:	713b      	strb	r3, [r7, #4]
    81a2:	2300      	movs	r3, #0
    81a4:	717b      	strb	r3, [r7, #5]
    81a6:	71bb      	strb	r3, [r7, #6]
    81a8:	71fb      	strb	r3, [r7, #7]
    81aa:	687a      	ldr	r2, [r7, #4]
    81ac:	633a      	str	r2, [r7, #48]	; 0x30
    81ae:	4619      	mov	r1, r3
    81b0:	f363 0100 	bfi	r1, r3, #0, #1
    81b4:	f363 0141 	bfi	r1, r3, #1, #1
    81b8:	f363 0182 	bfi	r1, r3, #2, #1
    81bc:	f363 01c5 	bfi	r1, r3, #3, #3
    81c0:	2201      	movs	r2, #1
    81c2:	f362 1188 	bfi	r1, r2, #6, #3
    81c6:	2208      	movs	r2, #8
    81c8:	f362 2153 	bfi	r1, r2, #9, #11
    81cc:	f363 511f 	bfi	r1, r3, #20, #12
    81d0:	f107 0230 	add.w	r2, r7, #48	; 0x30
    81d4:	4887      	ldr	r0, [pc, #540]	; (83f4 <mem_manage_fault+0x2cc>)
    81d6:	f7fc fba1 	bl	491c <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_MEM_STACKING;
    81da:	2411      	movs	r4, #17
    81dc:	e000      	b.n	81e0 <mem_manage_fault+0xb8>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    81de:	2410      	movs	r4, #16
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    81e0:	4b85      	ldr	r3, [pc, #532]	; (83f8 <mem_manage_fault+0x2d0>)
    81e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    81e4:	f013 0f08 	tst.w	r3, #8
    81e8:	d005      	beq.n	81f6 <mem_manage_fault+0xce>
		PR_FAULT_INFO("  Unstacking error");
    81ea:	4b82      	ldr	r3, [pc, #520]	; (83f4 <mem_manage_fault+0x2cc>)
    81ec:	681b      	ldr	r3, [r3, #0]
    81ee:	f013 0f07 	tst.w	r3, #7
    81f2:	d12f      	bne.n	8254 <mem_manage_fault+0x12c>
		reason = K_ERR_ARM_MEM_UNSTACKING;
    81f4:	2412      	movs	r4, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    81f6:	4b80      	ldr	r3, [pc, #512]	; (83f8 <mem_manage_fault+0x2d0>)
    81f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    81fa:	f013 0f02 	tst.w	r3, #2
    81fe:	f000 809f 	beq.w	8340 <mem_manage_fault+0x218>
		PR_FAULT_INFO("  Data Access Violation");
    8202:	4b7c      	ldr	r3, [pc, #496]	; (83f4 <mem_manage_fault+0x2cc>)
    8204:	681b      	ldr	r3, [r3, #0]
    8206:	f013 0f07 	tst.w	r3, #7
    820a:	d145      	bne.n	8298 <mem_manage_fault+0x170>
		uint32_t temp = SCB->MMFAR;
    820c:	4b7a      	ldr	r3, [pc, #488]	; (83f8 <mem_manage_fault+0x2d0>)
    820e:	6b59      	ldr	r1, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    8210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8212:	f013 0f80 	tst.w	r3, #128	; 0x80
    8216:	f000 8092 	beq.w	833e <mem_manage_fault+0x216>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    821a:	4b76      	ldr	r3, [pc, #472]	; (83f4 <mem_manage_fault+0x2cc>)
    821c:	681b      	ldr	r3, [r3, #0]
    821e:	f013 0f07 	tst.w	r3, #7
    8222:	d07f      	beq.n	8324 <mem_manage_fault+0x1fc>
    8224:	466c      	mov	r4, sp
    8226:	b088      	sub	sp, #32
    8228:	466b      	mov	r3, sp
    822a:	f113 0210 	adds.w	r2, r3, #16
    822e:	d054      	beq.n	82da <mem_manage_fault+0x1b2>
    8230:	200c      	movs	r0, #12
    8232:	b152      	cbz	r2, 824a <mem_manage_fault+0x122>
    8234:	4684      	mov	ip, r0
    8236:	2804      	cmp	r0, #4
    8238:	dd03      	ble.n	8242 <mem_manage_fault+0x11a>
    823a:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 8404 <mem_manage_fault+0x2dc>
    823e:	f8c3 e014 	str.w	lr, [r3, #20]
    8242:	f1bc 0f08 	cmp.w	ip, #8
    8246:	dd4b      	ble.n	82e0 <mem_manage_fault+0x1b8>
    8248:	6199      	str	r1, [r3, #24]
    824a:	280b      	cmp	r0, #11
    824c:	dd74      	ble.n	8338 <mem_manage_fault+0x210>
    824e:	f04f 0c0c 	mov.w	ip, #12
    8252:	e047      	b.n	82e4 <mem_manage_fault+0x1bc>
		PR_FAULT_INFO("  Unstacking error");
    8254:	4b6c      	ldr	r3, [pc, #432]	; (8408 <mem_manage_fault+0x2e0>)
    8256:	64fb      	str	r3, [r7, #76]	; 0x4c
    8258:	2302      	movs	r3, #2
    825a:	713b      	strb	r3, [r7, #4]
    825c:	2300      	movs	r3, #0
    825e:	717b      	strb	r3, [r7, #5]
    8260:	71bb      	strb	r3, [r7, #6]
    8262:	71fb      	strb	r3, [r7, #7]
    8264:	687a      	ldr	r2, [r7, #4]
    8266:	64ba      	str	r2, [r7, #72]	; 0x48
    8268:	4619      	mov	r1, r3
    826a:	f363 0100 	bfi	r1, r3, #0, #1
    826e:	f363 0141 	bfi	r1, r3, #1, #1
    8272:	f363 0182 	bfi	r1, r3, #2, #1
    8276:	f363 01c5 	bfi	r1, r3, #3, #3
    827a:	2201      	movs	r2, #1
    827c:	f362 1188 	bfi	r1, r2, #6, #3
    8280:	2208      	movs	r2, #8
    8282:	f362 2153 	bfi	r1, r2, #9, #11
    8286:	f363 511f 	bfi	r1, r3, #20, #12
    828a:	f107 0248 	add.w	r2, r7, #72	; 0x48
    828e:	4859      	ldr	r0, [pc, #356]	; (83f4 <mem_manage_fault+0x2cc>)
    8290:	f7fc fb44 	bl	491c <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_MEM_UNSTACKING;
    8294:	2412      	movs	r4, #18
    8296:	e7ae      	b.n	81f6 <mem_manage_fault+0xce>
		PR_FAULT_INFO("  Data Access Violation");
    8298:	4b5c      	ldr	r3, [pc, #368]	; (840c <mem_manage_fault+0x2e4>)
    829a:	667b      	str	r3, [r7, #100]	; 0x64
    829c:	2302      	movs	r3, #2
    829e:	713b      	strb	r3, [r7, #4]
    82a0:	2300      	movs	r3, #0
    82a2:	717b      	strb	r3, [r7, #5]
    82a4:	71bb      	strb	r3, [r7, #6]
    82a6:	71fb      	strb	r3, [r7, #7]
    82a8:	687a      	ldr	r2, [r7, #4]
    82aa:	663a      	str	r2, [r7, #96]	; 0x60
    82ac:	4619      	mov	r1, r3
    82ae:	f363 0100 	bfi	r1, r3, #0, #1
    82b2:	f363 0141 	bfi	r1, r3, #1, #1
    82b6:	f363 0182 	bfi	r1, r3, #2, #1
    82ba:	f363 01c5 	bfi	r1, r3, #3, #3
    82be:	2201      	movs	r2, #1
    82c0:	f362 1188 	bfi	r1, r2, #6, #3
    82c4:	2208      	movs	r2, #8
    82c6:	f362 2153 	bfi	r1, r2, #9, #11
    82ca:	f363 511f 	bfi	r1, r3, #20, #12
    82ce:	f107 0260 	add.w	r2, r7, #96	; 0x60
    82d2:	4848      	ldr	r0, [pc, #288]	; (83f4 <mem_manage_fault+0x2cc>)
    82d4:	f7fc fb22 	bl	491c <z_impl_z_log_msg_static_create>
    82d8:	e798      	b.n	820c <mem_manage_fault+0xe4>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    82da:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    82de:	e7a8      	b.n	8232 <mem_manage_fault+0x10a>
    82e0:	f06f 0c1b 	mvn.w	ip, #27
    82e4:	b13a      	cbz	r2, 82f6 <mem_manage_fault+0x1ce>
    82e6:	2103      	movs	r1, #3
    82e8:	7139      	strb	r1, [r7, #4]
    82ea:	2100      	movs	r1, #0
    82ec:	7179      	strb	r1, [r7, #5]
    82ee:	71b9      	strb	r1, [r7, #6]
    82f0:	71f9      	strb	r1, [r7, #7]
    82f2:	6878      	ldr	r0, [r7, #4]
    82f4:	6118      	str	r0, [r3, #16]
    82f6:	2100      	movs	r1, #0
    82f8:	f36f 0100 	bfc	r1, #0, #1
    82fc:	f36f 0141 	bfc	r1, #1, #1
    8300:	f36f 0182 	bfc	r1, #2, #1
    8304:	f36f 01c5 	bfc	r1, #3, #3
    8308:	2301      	movs	r3, #1
    830a:	f363 1188 	bfi	r1, r3, #6, #3
    830e:	f3cc 030a 	ubfx	r3, ip, #0, #11
    8312:	f363 2153 	bfi	r1, r3, #9, #11
    8316:	f36f 511f 	bfc	r1, #20, #12
    831a:	2300      	movs	r3, #0
    831c:	4835      	ldr	r0, [pc, #212]	; (83f4 <mem_manage_fault+0x2cc>)
    831e:	f7fc fafd 	bl	491c <z_impl_z_log_msg_static_create>
    8322:	46a5      	mov	sp, r4
			if (from_hard_fault != 0) {
    8324:	f1b8 0f00 	cmp.w	r8, #0
    8328:	d040      	beq.n	83ac <mem_manage_fault+0x284>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    832a:	4a33      	ldr	r2, [pc, #204]	; (83f8 <mem_manage_fault+0x2d0>)
    832c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    832e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    8332:	6293      	str	r3, [r2, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    8334:	2413      	movs	r4, #19
    8336:	e003      	b.n	8340 <mem_manage_fault+0x218>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    8338:	f06f 0c1b 	mvn.w	ip, #27
    833c:	e7d2      	b.n	82e4 <mem_manage_fault+0x1bc>
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    833e:	2413      	movs	r4, #19
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    8340:	4b2d      	ldr	r3, [pc, #180]	; (83f8 <mem_manage_fault+0x2d0>)
    8342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8344:	f013 0f01 	tst.w	r3, #1
    8348:	d005      	beq.n	8356 <mem_manage_fault+0x22e>
		PR_FAULT_INFO("  Instruction Access Violation");
    834a:	4b2a      	ldr	r3, [pc, #168]	; (83f4 <mem_manage_fault+0x2cc>)
    834c:	681b      	ldr	r3, [r3, #0]
    834e:	f013 0f07 	tst.w	r3, #7
    8352:	d12d      	bne.n	83b0 <mem_manage_fault+0x288>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    8354:	2414      	movs	r4, #20
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    8356:	4b28      	ldr	r3, [pc, #160]	; (83f8 <mem_manage_fault+0x2d0>)
    8358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    835a:	f013 0f20 	tst.w	r3, #32
    835e:	d005      	beq.n	836c <mem_manage_fault+0x244>
		PR_FAULT_INFO(
    8360:	4b24      	ldr	r3, [pc, #144]	; (83f4 <mem_manage_fault+0x2cc>)
    8362:	681b      	ldr	r3, [r3, #0]
    8364:	f013 0f07 	tst.w	r3, #7
    8368:	d154      	bne.n	8414 <mem_manage_fault+0x2ec>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    836a:	2415      	movs	r4, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    836c:	4b22      	ldr	r3, [pc, #136]	; (83f8 <mem_manage_fault+0x2d0>)
    836e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8370:	f013 0f10 	tst.w	r3, #16
    8374:	d101      	bne.n	837a <mem_manage_fault+0x252>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    8376:	4b20      	ldr	r3, [pc, #128]	; (83f8 <mem_manage_fault+0x2d0>)
    8378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    837a:	4b1f      	ldr	r3, [pc, #124]	; (83f8 <mem_manage_fault+0x2d0>)
    837c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    837e:	f013 0f20 	tst.w	r3, #32
    8382:	d004      	beq.n	838e <mem_manage_fault+0x266>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    8384:	4a1c      	ldr	r2, [pc, #112]	; (83f8 <mem_manage_fault+0x2d0>)
    8386:	6a53      	ldr	r3, [r2, #36]	; 0x24
    8388:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    838c:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    838e:	4a1a      	ldr	r2, [pc, #104]	; (83f8 <mem_manage_fault+0x2d0>)
    8390:	6a93      	ldr	r3, [r2, #40]	; 0x28
    8392:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    8396:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    8398:	2101      	movs	r1, #1
    839a:	4630      	mov	r0, r6
    839c:	f00a fade 	bl	1295c <memory_fault_recoverable>
    83a0:	7028      	strb	r0, [r5, #0]
}
    83a2:	4620      	mov	r0, r4
    83a4:	3798      	adds	r7, #152	; 0x98
    83a6:	46bd      	mov	sp, r7
    83a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    83ac:	2413      	movs	r4, #19
    83ae:	e7c7      	b.n	8340 <mem_manage_fault+0x218>
		PR_FAULT_INFO("  Instruction Access Violation");
    83b0:	4b17      	ldr	r3, [pc, #92]	; (8410 <mem_manage_fault+0x2e8>)
    83b2:	67fb      	str	r3, [r7, #124]	; 0x7c
    83b4:	2302      	movs	r3, #2
    83b6:	713b      	strb	r3, [r7, #4]
    83b8:	2300      	movs	r3, #0
    83ba:	717b      	strb	r3, [r7, #5]
    83bc:	71bb      	strb	r3, [r7, #6]
    83be:	71fb      	strb	r3, [r7, #7]
    83c0:	687a      	ldr	r2, [r7, #4]
    83c2:	67ba      	str	r2, [r7, #120]	; 0x78
    83c4:	4619      	mov	r1, r3
    83c6:	f363 0100 	bfi	r1, r3, #0, #1
    83ca:	f363 0141 	bfi	r1, r3, #1, #1
    83ce:	f363 0182 	bfi	r1, r3, #2, #1
    83d2:	f363 01c5 	bfi	r1, r3, #3, #3
    83d6:	2201      	movs	r2, #1
    83d8:	f362 1188 	bfi	r1, r2, #6, #3
    83dc:	2208      	movs	r2, #8
    83de:	f362 2153 	bfi	r1, r2, #9, #11
    83e2:	f363 511f 	bfi	r1, r3, #20, #12
    83e6:	f107 0278 	add.w	r2, r7, #120	; 0x78
    83ea:	4802      	ldr	r0, [pc, #8]	; (83f4 <mem_manage_fault+0x2cc>)
    83ec:	f7fc fa96 	bl	491c <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    83f0:	2414      	movs	r4, #20
    83f2:	e7b0      	b.n	8356 <mem_manage_fault+0x22e>
    83f4:	200002f8 	.word	0x200002f8
    83f8:	e000ed00 	.word	0xe000ed00
    83fc:	00017a30 	.word	0x00017a30
    8400:	00017a48 	.word	0x00017a48
    8404:	00017aa8 	.word	0x00017aa8
    8408:	00017a7c 	.word	0x00017a7c
    840c:	00017a90 	.word	0x00017a90
    8410:	00017ac0 	.word	0x00017ac0
		PR_FAULT_INFO(
    8414:	4b11      	ldr	r3, [pc, #68]	; (845c <mem_manage_fault+0x334>)
    8416:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    841a:	2302      	movs	r3, #2
    841c:	713b      	strb	r3, [r7, #4]
    841e:	2300      	movs	r3, #0
    8420:	717b      	strb	r3, [r7, #5]
    8422:	71bb      	strb	r3, [r7, #6]
    8424:	71fb      	strb	r3, [r7, #7]
    8426:	687a      	ldr	r2, [r7, #4]
    8428:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    842c:	4619      	mov	r1, r3
    842e:	f363 0100 	bfi	r1, r3, #0, #1
    8432:	f363 0141 	bfi	r1, r3, #1, #1
    8436:	f363 0182 	bfi	r1, r3, #2, #1
    843a:	f363 01c5 	bfi	r1, r3, #3, #3
    843e:	2201      	movs	r2, #1
    8440:	f362 1188 	bfi	r1, r2, #6, #3
    8444:	2208      	movs	r2, #8
    8446:	f362 2153 	bfi	r1, r2, #9, #11
    844a:	f363 511f 	bfi	r1, r3, #20, #12
    844e:	f107 0290 	add.w	r2, r7, #144	; 0x90
    8452:	4803      	ldr	r0, [pc, #12]	; (8460 <mem_manage_fault+0x338>)
    8454:	f7fc fa62 	bl	491c <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    8458:	2415      	movs	r4, #21
    845a:	e787      	b.n	836c <mem_manage_fault+0x244>
    845c:	00017ae0 	.word	0x00017ae0
    8460:	200002f8 	.word	0x200002f8

00008464 <bus_fault>:
{
    8464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8468:	b0ac      	sub	sp, #176	; 0xb0
    846a:	af00      	add	r7, sp, #0
    846c:	4606      	mov	r6, r0
    846e:	4688      	mov	r8, r1
    8470:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** BUS FAULT *****");
    8472:	4bbf      	ldr	r3, [pc, #764]	; (8770 <bus_fault+0x30c>)
    8474:	681b      	ldr	r3, [r3, #0]
    8476:	f013 0f07 	tst.w	r3, #7
    847a:	d10b      	bne.n	8494 <bus_fault+0x30>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    847c:	4bbd      	ldr	r3, [pc, #756]	; (8774 <bus_fault+0x310>)
    847e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8480:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    8484:	d049      	beq.n	851a <bus_fault+0xb6>
		PR_FAULT_INFO("  Stacking error");
    8486:	4bba      	ldr	r3, [pc, #744]	; (8770 <bus_fault+0x30c>)
    8488:	681b      	ldr	r3, [r3, #0]
    848a:	f013 0f07 	tst.w	r3, #7
    848e:	d122      	bne.n	84d6 <bus_fault+0x72>
		reason = K_ERR_ARM_BUS_STACKING;
    8490:	2417      	movs	r4, #23
    8492:	e043      	b.n	851c <bus_fault+0xb8>
	PR_FAULT_INFO("***** BUS FAULT *****");
    8494:	4bb8      	ldr	r3, [pc, #736]	; (8778 <bus_fault+0x314>)
    8496:	61fb      	str	r3, [r7, #28]
    8498:	2302      	movs	r3, #2
    849a:	713b      	strb	r3, [r7, #4]
    849c:	2300      	movs	r3, #0
    849e:	717b      	strb	r3, [r7, #5]
    84a0:	71bb      	strb	r3, [r7, #6]
    84a2:	71fb      	strb	r3, [r7, #7]
    84a4:	687a      	ldr	r2, [r7, #4]
    84a6:	61ba      	str	r2, [r7, #24]
    84a8:	4619      	mov	r1, r3
    84aa:	f363 0100 	bfi	r1, r3, #0, #1
    84ae:	f363 0141 	bfi	r1, r3, #1, #1
    84b2:	f363 0182 	bfi	r1, r3, #2, #1
    84b6:	f363 01c5 	bfi	r1, r3, #3, #3
    84ba:	2201      	movs	r2, #1
    84bc:	f362 1188 	bfi	r1, r2, #6, #3
    84c0:	2208      	movs	r2, #8
    84c2:	f362 2153 	bfi	r1, r2, #9, #11
    84c6:	f363 511f 	bfi	r1, r3, #20, #12
    84ca:	f107 0218 	add.w	r2, r7, #24
    84ce:	48a8      	ldr	r0, [pc, #672]	; (8770 <bus_fault+0x30c>)
    84d0:	f7fc fa24 	bl	491c <z_impl_z_log_msg_static_create>
    84d4:	e7d2      	b.n	847c <bus_fault+0x18>
		PR_FAULT_INFO("  Stacking error");
    84d6:	4ba9      	ldr	r3, [pc, #676]	; (877c <bus_fault+0x318>)
    84d8:	637b      	str	r3, [r7, #52]	; 0x34
    84da:	2302      	movs	r3, #2
    84dc:	713b      	strb	r3, [r7, #4]
    84de:	2300      	movs	r3, #0
    84e0:	717b      	strb	r3, [r7, #5]
    84e2:	71bb      	strb	r3, [r7, #6]
    84e4:	71fb      	strb	r3, [r7, #7]
    84e6:	687a      	ldr	r2, [r7, #4]
    84e8:	633a      	str	r2, [r7, #48]	; 0x30
    84ea:	4619      	mov	r1, r3
    84ec:	f363 0100 	bfi	r1, r3, #0, #1
    84f0:	f363 0141 	bfi	r1, r3, #1, #1
    84f4:	f363 0182 	bfi	r1, r3, #2, #1
    84f8:	f363 01c5 	bfi	r1, r3, #3, #3
    84fc:	2201      	movs	r2, #1
    84fe:	f362 1188 	bfi	r1, r2, #6, #3
    8502:	2208      	movs	r2, #8
    8504:	f362 2153 	bfi	r1, r2, #9, #11
    8508:	f363 511f 	bfi	r1, r3, #20, #12
    850c:	f107 0230 	add.w	r2, r7, #48	; 0x30
    8510:	4897      	ldr	r0, [pc, #604]	; (8770 <bus_fault+0x30c>)
    8512:	f7fc fa03 	bl	491c <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_BUS_STACKING;
    8516:	2417      	movs	r4, #23
    8518:	e000      	b.n	851c <bus_fault+0xb8>
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    851a:	2416      	movs	r4, #22
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    851c:	4b95      	ldr	r3, [pc, #596]	; (8774 <bus_fault+0x310>)
    851e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8520:	f413 6f00 	tst.w	r3, #2048	; 0x800
    8524:	d005      	beq.n	8532 <bus_fault+0xce>
		PR_FAULT_INFO("  Unstacking error");
    8526:	4b92      	ldr	r3, [pc, #584]	; (8770 <bus_fault+0x30c>)
    8528:	681b      	ldr	r3, [r3, #0]
    852a:	f013 0f07 	tst.w	r3, #7
    852e:	d12f      	bne.n	8590 <bus_fault+0x12c>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    8530:	2418      	movs	r4, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    8532:	4b90      	ldr	r3, [pc, #576]	; (8774 <bus_fault+0x310>)
    8534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8536:	f413 7f00 	tst.w	r3, #512	; 0x200
    853a:	f000 809f 	beq.w	867c <bus_fault+0x218>
		PR_FAULT_INFO("  Precise data bus error");
    853e:	4b8c      	ldr	r3, [pc, #560]	; (8770 <bus_fault+0x30c>)
    8540:	681b      	ldr	r3, [r3, #0]
    8542:	f013 0f07 	tst.w	r3, #7
    8546:	d145      	bne.n	85d4 <bus_fault+0x170>
		STORE_xFAR(bfar, SCB->BFAR);
    8548:	4b8a      	ldr	r3, [pc, #552]	; (8774 <bus_fault+0x310>)
    854a:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    854c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    854e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    8552:	f000 8092 	beq.w	867a <bus_fault+0x216>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    8556:	4b86      	ldr	r3, [pc, #536]	; (8770 <bus_fault+0x30c>)
    8558:	681b      	ldr	r3, [r3, #0]
    855a:	f013 0f07 	tst.w	r3, #7
    855e:	d07f      	beq.n	8660 <bus_fault+0x1fc>
    8560:	466c      	mov	r4, sp
    8562:	b088      	sub	sp, #32
    8564:	466b      	mov	r3, sp
    8566:	f113 0210 	adds.w	r2, r3, #16
    856a:	d054      	beq.n	8616 <bus_fault+0x1b2>
    856c:	200c      	movs	r0, #12
    856e:	b152      	cbz	r2, 8586 <bus_fault+0x122>
    8570:	4684      	mov	ip, r0
    8572:	2804      	cmp	r0, #4
    8574:	dd03      	ble.n	857e <bus_fault+0x11a>
    8576:	f8df e208 	ldr.w	lr, [pc, #520]	; 8780 <bus_fault+0x31c>
    857a:	f8c3 e014 	str.w	lr, [r3, #20]
    857e:	f1bc 0f08 	cmp.w	ip, #8
    8582:	dd4b      	ble.n	861c <bus_fault+0x1b8>
    8584:	6199      	str	r1, [r3, #24]
    8586:	280b      	cmp	r0, #11
    8588:	dd74      	ble.n	8674 <bus_fault+0x210>
    858a:	f04f 0c0c 	mov.w	ip, #12
    858e:	e047      	b.n	8620 <bus_fault+0x1bc>
		PR_FAULT_INFO("  Unstacking error");
    8590:	4b7c      	ldr	r3, [pc, #496]	; (8784 <bus_fault+0x320>)
    8592:	64fb      	str	r3, [r7, #76]	; 0x4c
    8594:	2302      	movs	r3, #2
    8596:	713b      	strb	r3, [r7, #4]
    8598:	2300      	movs	r3, #0
    859a:	717b      	strb	r3, [r7, #5]
    859c:	71bb      	strb	r3, [r7, #6]
    859e:	71fb      	strb	r3, [r7, #7]
    85a0:	687a      	ldr	r2, [r7, #4]
    85a2:	64ba      	str	r2, [r7, #72]	; 0x48
    85a4:	4619      	mov	r1, r3
    85a6:	f363 0100 	bfi	r1, r3, #0, #1
    85aa:	f363 0141 	bfi	r1, r3, #1, #1
    85ae:	f363 0182 	bfi	r1, r3, #2, #1
    85b2:	f363 01c5 	bfi	r1, r3, #3, #3
    85b6:	2201      	movs	r2, #1
    85b8:	f362 1188 	bfi	r1, r2, #6, #3
    85bc:	2208      	movs	r2, #8
    85be:	f362 2153 	bfi	r1, r2, #9, #11
    85c2:	f363 511f 	bfi	r1, r3, #20, #12
    85c6:	f107 0248 	add.w	r2, r7, #72	; 0x48
    85ca:	4869      	ldr	r0, [pc, #420]	; (8770 <bus_fault+0x30c>)
    85cc:	f7fc f9a6 	bl	491c <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    85d0:	2418      	movs	r4, #24
    85d2:	e7ae      	b.n	8532 <bus_fault+0xce>
		PR_FAULT_INFO("  Precise data bus error");
    85d4:	4b6c      	ldr	r3, [pc, #432]	; (8788 <bus_fault+0x324>)
    85d6:	667b      	str	r3, [r7, #100]	; 0x64
    85d8:	2302      	movs	r3, #2
    85da:	713b      	strb	r3, [r7, #4]
    85dc:	2300      	movs	r3, #0
    85de:	717b      	strb	r3, [r7, #5]
    85e0:	71bb      	strb	r3, [r7, #6]
    85e2:	71fb      	strb	r3, [r7, #7]
    85e4:	687a      	ldr	r2, [r7, #4]
    85e6:	663a      	str	r2, [r7, #96]	; 0x60
    85e8:	4619      	mov	r1, r3
    85ea:	f363 0100 	bfi	r1, r3, #0, #1
    85ee:	f363 0141 	bfi	r1, r3, #1, #1
    85f2:	f363 0182 	bfi	r1, r3, #2, #1
    85f6:	f363 01c5 	bfi	r1, r3, #3, #3
    85fa:	2201      	movs	r2, #1
    85fc:	f362 1188 	bfi	r1, r2, #6, #3
    8600:	2208      	movs	r2, #8
    8602:	f362 2153 	bfi	r1, r2, #9, #11
    8606:	f363 511f 	bfi	r1, r3, #20, #12
    860a:	f107 0260 	add.w	r2, r7, #96	; 0x60
    860e:	4858      	ldr	r0, [pc, #352]	; (8770 <bus_fault+0x30c>)
    8610:	f7fc f984 	bl	491c <z_impl_z_log_msg_static_create>
    8614:	e798      	b.n	8548 <bus_fault+0xe4>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    8616:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    861a:	e7a8      	b.n	856e <bus_fault+0x10a>
    861c:	f06f 0c1b 	mvn.w	ip, #27
    8620:	b13a      	cbz	r2, 8632 <bus_fault+0x1ce>
    8622:	2103      	movs	r1, #3
    8624:	7139      	strb	r1, [r7, #4]
    8626:	2100      	movs	r1, #0
    8628:	7179      	strb	r1, [r7, #5]
    862a:	71b9      	strb	r1, [r7, #6]
    862c:	71f9      	strb	r1, [r7, #7]
    862e:	6878      	ldr	r0, [r7, #4]
    8630:	6118      	str	r0, [r3, #16]
    8632:	2100      	movs	r1, #0
    8634:	f36f 0100 	bfc	r1, #0, #1
    8638:	f36f 0141 	bfc	r1, #1, #1
    863c:	f36f 0182 	bfc	r1, #2, #1
    8640:	f36f 01c5 	bfc	r1, #3, #3
    8644:	2301      	movs	r3, #1
    8646:	f363 1188 	bfi	r1, r3, #6, #3
    864a:	f3cc 030a 	ubfx	r3, ip, #0, #11
    864e:	f363 2153 	bfi	r1, r3, #9, #11
    8652:	f36f 511f 	bfc	r1, #20, #12
    8656:	2300      	movs	r3, #0
    8658:	4845      	ldr	r0, [pc, #276]	; (8770 <bus_fault+0x30c>)
    865a:	f7fc f95f 	bl	491c <z_impl_z_log_msg_static_create>
    865e:	46a5      	mov	sp, r4
			if (from_hard_fault != 0) {
    8660:	f1b8 0f00 	cmp.w	r8, #0
    8664:	d02f      	beq.n	86c6 <bus_fault+0x262>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    8666:	4a43      	ldr	r2, [pc, #268]	; (8774 <bus_fault+0x310>)
    8668:	6a93      	ldr	r3, [r2, #40]	; 0x28
    866a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    866e:	6293      	str	r3, [r2, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    8670:	2419      	movs	r4, #25
    8672:	e003      	b.n	867c <bus_fault+0x218>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    8674:	f06f 0c1b 	mvn.w	ip, #27
    8678:	e7d2      	b.n	8620 <bus_fault+0x1bc>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    867a:	2419      	movs	r4, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    867c:	4b3d      	ldr	r3, [pc, #244]	; (8774 <bus_fault+0x310>)
    867e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8680:	f413 6f80 	tst.w	r3, #1024	; 0x400
    8684:	d005      	beq.n	8692 <bus_fault+0x22e>
		PR_FAULT_INFO("  Imprecise data bus error");
    8686:	4b3a      	ldr	r3, [pc, #232]	; (8770 <bus_fault+0x30c>)
    8688:	681b      	ldr	r3, [r3, #0]
    868a:	f013 0f07 	tst.w	r3, #7
    868e:	d11c      	bne.n	86ca <bus_fault+0x266>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    8690:	241a      	movs	r4, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    8692:	4b38      	ldr	r3, [pc, #224]	; (8774 <bus_fault+0x310>)
    8694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8696:	f413 7f80 	tst.w	r3, #256	; 0x100
    869a:	d05c      	beq.n	8756 <bus_fault+0x2f2>
		PR_FAULT_INFO("  Instruction bus error");
    869c:	4b34      	ldr	r3, [pc, #208]	; (8770 <bus_fault+0x30c>)
    869e:	681b      	ldr	r3, [r3, #0]
    86a0:	f013 0f07 	tst.w	r3, #7
    86a4:	d133      	bne.n	870e <bus_fault+0x2aa>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    86a6:	241b      	movs	r4, #27
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    86a8:	4a32      	ldr	r2, [pc, #200]	; (8774 <bus_fault+0x310>)
    86aa:	6a93      	ldr	r3, [r2, #40]	; 0x28
    86ac:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    86b0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    86b2:	2101      	movs	r1, #1
    86b4:	4630      	mov	r0, r6
    86b6:	f00a f951 	bl	1295c <memory_fault_recoverable>
    86ba:	7028      	strb	r0, [r5, #0]
}
    86bc:	4620      	mov	r0, r4
    86be:	37b0      	adds	r7, #176	; 0xb0
    86c0:	46bd      	mov	sp, r7
    86c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    86c6:	2419      	movs	r4, #25
    86c8:	e7d8      	b.n	867c <bus_fault+0x218>
		PR_FAULT_INFO("  Imprecise data bus error");
    86ca:	4b30      	ldr	r3, [pc, #192]	; (878c <bus_fault+0x328>)
    86cc:	67fb      	str	r3, [r7, #124]	; 0x7c
    86ce:	2302      	movs	r3, #2
    86d0:	713b      	strb	r3, [r7, #4]
    86d2:	2300      	movs	r3, #0
    86d4:	717b      	strb	r3, [r7, #5]
    86d6:	71bb      	strb	r3, [r7, #6]
    86d8:	71fb      	strb	r3, [r7, #7]
    86da:	687a      	ldr	r2, [r7, #4]
    86dc:	67ba      	str	r2, [r7, #120]	; 0x78
    86de:	4619      	mov	r1, r3
    86e0:	f363 0100 	bfi	r1, r3, #0, #1
    86e4:	f363 0141 	bfi	r1, r3, #1, #1
    86e8:	f363 0182 	bfi	r1, r3, #2, #1
    86ec:	f363 01c5 	bfi	r1, r3, #3, #3
    86f0:	2201      	movs	r2, #1
    86f2:	f362 1188 	bfi	r1, r2, #6, #3
    86f6:	2208      	movs	r2, #8
    86f8:	f362 2153 	bfi	r1, r2, #9, #11
    86fc:	f363 511f 	bfi	r1, r3, #20, #12
    8700:	f107 0278 	add.w	r2, r7, #120	; 0x78
    8704:	481a      	ldr	r0, [pc, #104]	; (8770 <bus_fault+0x30c>)
    8706:	f7fc f909 	bl	491c <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    870a:	241a      	movs	r4, #26
    870c:	e7c1      	b.n	8692 <bus_fault+0x22e>
		PR_FAULT_INFO("  Instruction bus error");
    870e:	4b20      	ldr	r3, [pc, #128]	; (8790 <bus_fault+0x32c>)
    8710:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    8714:	2302      	movs	r3, #2
    8716:	713b      	strb	r3, [r7, #4]
    8718:	2300      	movs	r3, #0
    871a:	717b      	strb	r3, [r7, #5]
    871c:	71bb      	strb	r3, [r7, #6]
    871e:	71fb      	strb	r3, [r7, #7]
    8720:	687a      	ldr	r2, [r7, #4]
    8722:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    8726:	4619      	mov	r1, r3
    8728:	f363 0100 	bfi	r1, r3, #0, #1
    872c:	f363 0141 	bfi	r1, r3, #1, #1
    8730:	f363 0182 	bfi	r1, r3, #2, #1
    8734:	f363 01c5 	bfi	r1, r3, #3, #3
    8738:	2201      	movs	r2, #1
    873a:	f362 1188 	bfi	r1, r2, #6, #3
    873e:	2208      	movs	r2, #8
    8740:	f362 2153 	bfi	r1, r2, #9, #11
    8744:	f363 511f 	bfi	r1, r3, #20, #12
    8748:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
    874c:	4808      	ldr	r0, [pc, #32]	; (8770 <bus_fault+0x30c>)
    874e:	f7fc f8e5 	bl	491c <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    8752:	241b      	movs	r4, #27
    8754:	e7a8      	b.n	86a8 <bus_fault+0x244>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    8756:	4b07      	ldr	r3, [pc, #28]	; (8774 <bus_fault+0x310>)
    8758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    875a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    875e:	d0a3      	beq.n	86a8 <bus_fault+0x244>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    8760:	4b03      	ldr	r3, [pc, #12]	; (8770 <bus_fault+0x30c>)
    8762:	681b      	ldr	r3, [r3, #0]
    8764:	f013 0f07 	tst.w	r3, #7
    8768:	d114      	bne.n	8794 <bus_fault+0x330>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    876a:	241c      	movs	r4, #28
    876c:	e79c      	b.n	86a8 <bus_fault+0x244>
    876e:	bf00      	nop
    8770:	200002f8 	.word	0x200002f8
    8774:	e000ed00 	.word	0xe000ed00
    8778:	00017b10 	.word	0x00017b10
    877c:	00017b28 	.word	0x00017b28
    8780:	00017b58 	.word	0x00017b58
    8784:	00017a7c 	.word	0x00017a7c
    8788:	00017b3c 	.word	0x00017b3c
    878c:	00017b70 	.word	0x00017b70
    8790:	00017b8c 	.word	0x00017b8c
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    8794:	4b11      	ldr	r3, [pc, #68]	; (87dc <bus_fault+0x378>)
    8796:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    879a:	2302      	movs	r3, #2
    879c:	713b      	strb	r3, [r7, #4]
    879e:	2300      	movs	r3, #0
    87a0:	717b      	strb	r3, [r7, #5]
    87a2:	71bb      	strb	r3, [r7, #6]
    87a4:	71fb      	strb	r3, [r7, #7]
    87a6:	687a      	ldr	r2, [r7, #4]
    87a8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    87ac:	4619      	mov	r1, r3
    87ae:	f363 0100 	bfi	r1, r3, #0, #1
    87b2:	f363 0141 	bfi	r1, r3, #1, #1
    87b6:	f363 0182 	bfi	r1, r3, #2, #1
    87ba:	f363 01c5 	bfi	r1, r3, #3, #3
    87be:	2201      	movs	r2, #1
    87c0:	f362 1188 	bfi	r1, r2, #6, #3
    87c4:	2208      	movs	r2, #8
    87c6:	f362 2153 	bfi	r1, r2, #9, #11
    87ca:	f363 511f 	bfi	r1, r3, #20, #12
    87ce:	f107 0290 	add.w	r2, r7, #144	; 0x90
    87d2:	4803      	ldr	r0, [pc, #12]	; (87e0 <bus_fault+0x37c>)
    87d4:	f7fc f8a2 	bl	491c <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    87d8:	241c      	movs	r4, #28
    87da:	e765      	b.n	86a8 <bus_fault+0x244>
    87dc:	00017ae0 	.word	0x00017ae0
    87e0:	200002f8 	.word	0x200002f8

000087e4 <usage_fault>:
{
    87e4:	b500      	push	{lr}
    87e6:	b0ad      	sub	sp, #180	; 0xb4
	PR_FAULT_INFO("***** USAGE FAULT *****");
    87e8:	4bab      	ldr	r3, [pc, #684]	; (8a98 <usage_fault+0x2b4>)
    87ea:	681b      	ldr	r3, [r3, #0]
    87ec:	f013 0f07 	tst.w	r3, #7
    87f0:	d10b      	bne.n	880a <usage_fault+0x26>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    87f2:	4baa      	ldr	r3, [pc, #680]	; (8a9c <usage_fault+0x2b8>)
    87f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    87f6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    87fa:	d04f      	beq.n	889c <usage_fault+0xb8>
		PR_FAULT_INFO("  Division by zero");
    87fc:	4ba6      	ldr	r3, [pc, #664]	; (8a98 <usage_fault+0x2b4>)
    87fe:	681b      	ldr	r3, [r3, #0]
    8800:	f013 0f07 	tst.w	r3, #7
    8804:	d125      	bne.n	8852 <usage_fault+0x6e>
		reason = K_ERR_ARM_USAGE_DIV_0;
    8806:	201e      	movs	r0, #30
    8808:	e049      	b.n	889e <usage_fault+0xba>
	PR_FAULT_INFO("***** USAGE FAULT *****");
    880a:	4ba5      	ldr	r3, [pc, #660]	; (8aa0 <usage_fault+0x2bc>)
    880c:	9307      	str	r3, [sp, #28]
    880e:	2302      	movs	r3, #2
    8810:	f88d 3004 	strb.w	r3, [sp, #4]
    8814:	2300      	movs	r3, #0
    8816:	f88d 3005 	strb.w	r3, [sp, #5]
    881a:	f88d 3006 	strb.w	r3, [sp, #6]
    881e:	f88d 3007 	strb.w	r3, [sp, #7]
    8822:	9a01      	ldr	r2, [sp, #4]
    8824:	9206      	str	r2, [sp, #24]
    8826:	4619      	mov	r1, r3
    8828:	f363 0100 	bfi	r1, r3, #0, #1
    882c:	f363 0141 	bfi	r1, r3, #1, #1
    8830:	f363 0182 	bfi	r1, r3, #2, #1
    8834:	f363 01c5 	bfi	r1, r3, #3, #3
    8838:	2201      	movs	r2, #1
    883a:	f362 1188 	bfi	r1, r2, #6, #3
    883e:	2208      	movs	r2, #8
    8840:	f362 2153 	bfi	r1, r2, #9, #11
    8844:	f363 511f 	bfi	r1, r3, #20, #12
    8848:	aa06      	add	r2, sp, #24
    884a:	4893      	ldr	r0, [pc, #588]	; (8a98 <usage_fault+0x2b4>)
    884c:	f7fc f866 	bl	491c <z_impl_z_log_msg_static_create>
    8850:	e7cf      	b.n	87f2 <usage_fault+0xe>
		PR_FAULT_INFO("  Division by zero");
    8852:	4b94      	ldr	r3, [pc, #592]	; (8aa4 <usage_fault+0x2c0>)
    8854:	930d      	str	r3, [sp, #52]	; 0x34
    8856:	2302      	movs	r3, #2
    8858:	f88d 3004 	strb.w	r3, [sp, #4]
    885c:	2300      	movs	r3, #0
    885e:	f88d 3005 	strb.w	r3, [sp, #5]
    8862:	f88d 3006 	strb.w	r3, [sp, #6]
    8866:	f88d 3007 	strb.w	r3, [sp, #7]
    886a:	9a01      	ldr	r2, [sp, #4]
    886c:	920c      	str	r2, [sp, #48]	; 0x30
    886e:	4619      	mov	r1, r3
    8870:	f363 0100 	bfi	r1, r3, #0, #1
    8874:	f363 0141 	bfi	r1, r3, #1, #1
    8878:	f363 0182 	bfi	r1, r3, #2, #1
    887c:	f363 01c5 	bfi	r1, r3, #3, #3
    8880:	2201      	movs	r2, #1
    8882:	f362 1188 	bfi	r1, r2, #6, #3
    8886:	2208      	movs	r2, #8
    8888:	f362 2153 	bfi	r1, r2, #9, #11
    888c:	f363 511f 	bfi	r1, r3, #20, #12
    8890:	aa0c      	add	r2, sp, #48	; 0x30
    8892:	4881      	ldr	r0, [pc, #516]	; (8a98 <usage_fault+0x2b4>)
    8894:	f7fc f842 	bl	491c <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_USAGE_DIV_0;
    8898:	201e      	movs	r0, #30
    889a:	e000      	b.n	889e <usage_fault+0xba>
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    889c:	201d      	movs	r0, #29
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    889e:	4b7f      	ldr	r3, [pc, #508]	; (8a9c <usage_fault+0x2b8>)
    88a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    88a2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    88a6:	d005      	beq.n	88b4 <usage_fault+0xd0>
		PR_FAULT_INFO("  Unaligned memory access");
    88a8:	4b7b      	ldr	r3, [pc, #492]	; (8a98 <usage_fault+0x2b4>)
    88aa:	681b      	ldr	r3, [r3, #0]
    88ac:	f013 0f07 	tst.w	r3, #7
    88b0:	d138      	bne.n	8924 <usage_fault+0x140>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    88b2:	201f      	movs	r0, #31
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    88b4:	4b79      	ldr	r3, [pc, #484]	; (8a9c <usage_fault+0x2b8>)
    88b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    88b8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    88bc:	d005      	beq.n	88ca <usage_fault+0xe6>
		PR_FAULT_INFO("  No coprocessor instructions");
    88be:	4b76      	ldr	r3, [pc, #472]	; (8a98 <usage_fault+0x2b4>)
    88c0:	681b      	ldr	r3, [r3, #0]
    88c2:	f013 0f07 	tst.w	r3, #7
    88c6:	d152      	bne.n	896e <usage_fault+0x18a>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    88c8:	2021      	movs	r0, #33	; 0x21
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    88ca:	4b74      	ldr	r3, [pc, #464]	; (8a9c <usage_fault+0x2b8>)
    88cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    88ce:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    88d2:	d005      	beq.n	88e0 <usage_fault+0xfc>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    88d4:	4b70      	ldr	r3, [pc, #448]	; (8a98 <usage_fault+0x2b4>)
    88d6:	681b      	ldr	r3, [r3, #0]
    88d8:	f013 0f07 	tst.w	r3, #7
    88dc:	d16c      	bne.n	89b8 <usage_fault+0x1d4>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    88de:	2022      	movs	r0, #34	; 0x22
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    88e0:	4b6e      	ldr	r3, [pc, #440]	; (8a9c <usage_fault+0x2b8>)
    88e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    88e4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    88e8:	d006      	beq.n	88f8 <usage_fault+0x114>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    88ea:	4b6b      	ldr	r3, [pc, #428]	; (8a98 <usage_fault+0x2b4>)
    88ec:	681b      	ldr	r3, [r3, #0]
    88ee:	f013 0f07 	tst.w	r3, #7
    88f2:	f040 8086 	bne.w	8a02 <usage_fault+0x21e>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    88f6:	2023      	movs	r0, #35	; 0x23
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    88f8:	4b68      	ldr	r3, [pc, #416]	; (8a9c <usage_fault+0x2b8>)
    88fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    88fc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8900:	d006      	beq.n	8910 <usage_fault+0x12c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    8902:	4b65      	ldr	r3, [pc, #404]	; (8a98 <usage_fault+0x2b4>)
    8904:	681b      	ldr	r3, [r3, #0]
    8906:	f013 0f07 	tst.w	r3, #7
    890a:	f040 809f 	bne.w	8a4c <usage_fault+0x268>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    890e:	2024      	movs	r0, #36	; 0x24
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    8910:	4a62      	ldr	r2, [pc, #392]	; (8a9c <usage_fault+0x2b8>)
    8912:	6a93      	ldr	r3, [r2, #40]	; 0x28
    8914:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    8918:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    891c:	6293      	str	r3, [r2, #40]	; 0x28
}
    891e:	b02d      	add	sp, #180	; 0xb4
    8920:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Unaligned memory access");
    8924:	4b60      	ldr	r3, [pc, #384]	; (8aa8 <usage_fault+0x2c4>)
    8926:	9313      	str	r3, [sp, #76]	; 0x4c
    8928:	2302      	movs	r3, #2
    892a:	f88d 3004 	strb.w	r3, [sp, #4]
    892e:	2300      	movs	r3, #0
    8930:	f88d 3005 	strb.w	r3, [sp, #5]
    8934:	f88d 3006 	strb.w	r3, [sp, #6]
    8938:	f88d 3007 	strb.w	r3, [sp, #7]
    893c:	9a01      	ldr	r2, [sp, #4]
    893e:	9212      	str	r2, [sp, #72]	; 0x48
    8940:	4619      	mov	r1, r3
    8942:	f363 0100 	bfi	r1, r3, #0, #1
    8946:	f363 0141 	bfi	r1, r3, #1, #1
    894a:	f363 0182 	bfi	r1, r3, #2, #1
    894e:	f363 01c5 	bfi	r1, r3, #3, #3
    8952:	2201      	movs	r2, #1
    8954:	f362 1188 	bfi	r1, r2, #6, #3
    8958:	2208      	movs	r2, #8
    895a:	f362 2153 	bfi	r1, r2, #9, #11
    895e:	f363 511f 	bfi	r1, r3, #20, #12
    8962:	aa12      	add	r2, sp, #72	; 0x48
    8964:	484c      	ldr	r0, [pc, #304]	; (8a98 <usage_fault+0x2b4>)
    8966:	f7fb ffd9 	bl	491c <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    896a:	201f      	movs	r0, #31
    896c:	e7a2      	b.n	88b4 <usage_fault+0xd0>
		PR_FAULT_INFO("  No coprocessor instructions");
    896e:	4b4f      	ldr	r3, [pc, #316]	; (8aac <usage_fault+0x2c8>)
    8970:	9319      	str	r3, [sp, #100]	; 0x64
    8972:	2302      	movs	r3, #2
    8974:	f88d 3004 	strb.w	r3, [sp, #4]
    8978:	2300      	movs	r3, #0
    897a:	f88d 3005 	strb.w	r3, [sp, #5]
    897e:	f88d 3006 	strb.w	r3, [sp, #6]
    8982:	f88d 3007 	strb.w	r3, [sp, #7]
    8986:	9a01      	ldr	r2, [sp, #4]
    8988:	9218      	str	r2, [sp, #96]	; 0x60
    898a:	4619      	mov	r1, r3
    898c:	f363 0100 	bfi	r1, r3, #0, #1
    8990:	f363 0141 	bfi	r1, r3, #1, #1
    8994:	f363 0182 	bfi	r1, r3, #2, #1
    8998:	f363 01c5 	bfi	r1, r3, #3, #3
    899c:	2201      	movs	r2, #1
    899e:	f362 1188 	bfi	r1, r2, #6, #3
    89a2:	2208      	movs	r2, #8
    89a4:	f362 2153 	bfi	r1, r2, #9, #11
    89a8:	f363 511f 	bfi	r1, r3, #20, #12
    89ac:	aa18      	add	r2, sp, #96	; 0x60
    89ae:	483a      	ldr	r0, [pc, #232]	; (8a98 <usage_fault+0x2b4>)
    89b0:	f7fb ffb4 	bl	491c <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    89b4:	2021      	movs	r0, #33	; 0x21
    89b6:	e788      	b.n	88ca <usage_fault+0xe6>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    89b8:	4b3d      	ldr	r3, [pc, #244]	; (8ab0 <usage_fault+0x2cc>)
    89ba:	931f      	str	r3, [sp, #124]	; 0x7c
    89bc:	2302      	movs	r3, #2
    89be:	f88d 3004 	strb.w	r3, [sp, #4]
    89c2:	2300      	movs	r3, #0
    89c4:	f88d 3005 	strb.w	r3, [sp, #5]
    89c8:	f88d 3006 	strb.w	r3, [sp, #6]
    89cc:	f88d 3007 	strb.w	r3, [sp, #7]
    89d0:	9a01      	ldr	r2, [sp, #4]
    89d2:	921e      	str	r2, [sp, #120]	; 0x78
    89d4:	4619      	mov	r1, r3
    89d6:	f363 0100 	bfi	r1, r3, #0, #1
    89da:	f363 0141 	bfi	r1, r3, #1, #1
    89de:	f363 0182 	bfi	r1, r3, #2, #1
    89e2:	f363 01c5 	bfi	r1, r3, #3, #3
    89e6:	2201      	movs	r2, #1
    89e8:	f362 1188 	bfi	r1, r2, #6, #3
    89ec:	2208      	movs	r2, #8
    89ee:	f362 2153 	bfi	r1, r2, #9, #11
    89f2:	f363 511f 	bfi	r1, r3, #20, #12
    89f6:	aa1e      	add	r2, sp, #120	; 0x78
    89f8:	4827      	ldr	r0, [pc, #156]	; (8a98 <usage_fault+0x2b4>)
    89fa:	f7fb ff8f 	bl	491c <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    89fe:	2022      	movs	r0, #34	; 0x22
    8a00:	e76e      	b.n	88e0 <usage_fault+0xfc>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    8a02:	4b2c      	ldr	r3, [pc, #176]	; (8ab4 <usage_fault+0x2d0>)
    8a04:	9325      	str	r3, [sp, #148]	; 0x94
    8a06:	2302      	movs	r3, #2
    8a08:	f88d 3004 	strb.w	r3, [sp, #4]
    8a0c:	2300      	movs	r3, #0
    8a0e:	f88d 3005 	strb.w	r3, [sp, #5]
    8a12:	f88d 3006 	strb.w	r3, [sp, #6]
    8a16:	f88d 3007 	strb.w	r3, [sp, #7]
    8a1a:	9a01      	ldr	r2, [sp, #4]
    8a1c:	9224      	str	r2, [sp, #144]	; 0x90
    8a1e:	4619      	mov	r1, r3
    8a20:	f363 0100 	bfi	r1, r3, #0, #1
    8a24:	f363 0141 	bfi	r1, r3, #1, #1
    8a28:	f363 0182 	bfi	r1, r3, #2, #1
    8a2c:	f363 01c5 	bfi	r1, r3, #3, #3
    8a30:	2201      	movs	r2, #1
    8a32:	f362 1188 	bfi	r1, r2, #6, #3
    8a36:	2208      	movs	r2, #8
    8a38:	f362 2153 	bfi	r1, r2, #9, #11
    8a3c:	f363 511f 	bfi	r1, r3, #20, #12
    8a40:	aa24      	add	r2, sp, #144	; 0x90
    8a42:	4815      	ldr	r0, [pc, #84]	; (8a98 <usage_fault+0x2b4>)
    8a44:	f7fb ff6a 	bl	491c <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    8a48:	2023      	movs	r0, #35	; 0x23
    8a4a:	e755      	b.n	88f8 <usage_fault+0x114>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    8a4c:	4b1a      	ldr	r3, [pc, #104]	; (8ab8 <usage_fault+0x2d4>)
    8a4e:	932b      	str	r3, [sp, #172]	; 0xac
    8a50:	2302      	movs	r3, #2
    8a52:	f88d 3004 	strb.w	r3, [sp, #4]
    8a56:	2300      	movs	r3, #0
    8a58:	f88d 3005 	strb.w	r3, [sp, #5]
    8a5c:	f88d 3006 	strb.w	r3, [sp, #6]
    8a60:	f88d 3007 	strb.w	r3, [sp, #7]
    8a64:	9a01      	ldr	r2, [sp, #4]
    8a66:	922a      	str	r2, [sp, #168]	; 0xa8
    8a68:	4619      	mov	r1, r3
    8a6a:	f363 0100 	bfi	r1, r3, #0, #1
    8a6e:	f363 0141 	bfi	r1, r3, #1, #1
    8a72:	f363 0182 	bfi	r1, r3, #2, #1
    8a76:	f363 01c5 	bfi	r1, r3, #3, #3
    8a7a:	2201      	movs	r2, #1
    8a7c:	f362 1188 	bfi	r1, r2, #6, #3
    8a80:	2208      	movs	r2, #8
    8a82:	f362 2153 	bfi	r1, r2, #9, #11
    8a86:	f363 511f 	bfi	r1, r3, #20, #12
    8a8a:	aa2a      	add	r2, sp, #168	; 0xa8
    8a8c:	4802      	ldr	r0, [pc, #8]	; (8a98 <usage_fault+0x2b4>)
    8a8e:	f7fb ff45 	bl	491c <z_impl_z_log_msg_static_create>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    8a92:	2024      	movs	r0, #36	; 0x24
    8a94:	e73c      	b.n	8910 <usage_fault+0x12c>
    8a96:	bf00      	nop
    8a98:	200002f8 	.word	0x200002f8
    8a9c:	e000ed00 	.word	0xe000ed00
    8aa0:	00017ba4 	.word	0x00017ba4
    8aa4:	00017bbc 	.word	0x00017bbc
    8aa8:	00017bd0 	.word	0x00017bd0
    8aac:	00017bec 	.word	0x00017bec
    8ab0:	00017c0c 	.word	0x00017c0c
    8ab4:	00017c34 	.word	0x00017c34
    8ab8:	00017c50 	.word	0x00017c50

00008abc <hard_fault>:
{
    8abc:	b5f0      	push	{r4, r5, r6, r7, lr}
    8abe:	b09b      	sub	sp, #108	; 0x6c
    8ac0:	af00      	add	r7, sp, #0
    8ac2:	4605      	mov	r5, r0
    8ac4:	460c      	mov	r4, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
    8ac6:	4b8d      	ldr	r3, [pc, #564]	; (8cfc <hard_fault+0x240>)
    8ac8:	681b      	ldr	r3, [r3, #0]
    8aca:	f013 0f07 	tst.w	r3, #7
    8ace:	d10e      	bne.n	8aee <hard_fault+0x32>
	*recoverable = false;
    8ad0:	2300      	movs	r3, #0
    8ad2:	7023      	strb	r3, [r4, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    8ad4:	4b8a      	ldr	r3, [pc, #552]	; (8d00 <hard_fault+0x244>)
    8ad6:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    8ad8:	f016 0602 	ands.w	r6, r6, #2
    8adc:	d04b      	beq.n	8b76 <hard_fault+0xba>
		PR_EXC("  Bus fault on vector table read");
    8ade:	4b87      	ldr	r3, [pc, #540]	; (8cfc <hard_fault+0x240>)
    8ae0:	6818      	ldr	r0, [r3, #0]
    8ae2:	f010 0007 	ands.w	r0, r0, #7
    8ae6:	d123      	bne.n	8b30 <hard_fault+0x74>
}
    8ae8:	376c      	adds	r7, #108	; 0x6c
    8aea:	46bd      	mov	sp, r7
    8aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	PR_FAULT_INFO("***** HARD FAULT *****");
    8aee:	4b85      	ldr	r3, [pc, #532]	; (8d04 <hard_fault+0x248>)
    8af0:	61fb      	str	r3, [r7, #28]
    8af2:	2302      	movs	r3, #2
    8af4:	713b      	strb	r3, [r7, #4]
    8af6:	2300      	movs	r3, #0
    8af8:	717b      	strb	r3, [r7, #5]
    8afa:	71bb      	strb	r3, [r7, #6]
    8afc:	71fb      	strb	r3, [r7, #7]
    8afe:	687a      	ldr	r2, [r7, #4]
    8b00:	61ba      	str	r2, [r7, #24]
    8b02:	4619      	mov	r1, r3
    8b04:	f363 0100 	bfi	r1, r3, #0, #1
    8b08:	f363 0141 	bfi	r1, r3, #1, #1
    8b0c:	f363 0182 	bfi	r1, r3, #2, #1
    8b10:	f363 01c5 	bfi	r1, r3, #3, #3
    8b14:	2201      	movs	r2, #1
    8b16:	f362 1188 	bfi	r1, r2, #6, #3
    8b1a:	2208      	movs	r2, #8
    8b1c:	f362 2153 	bfi	r1, r2, #9, #11
    8b20:	f363 511f 	bfi	r1, r3, #20, #12
    8b24:	f107 0218 	add.w	r2, r7, #24
    8b28:	4874      	ldr	r0, [pc, #464]	; (8cfc <hard_fault+0x240>)
    8b2a:	f7fb fef7 	bl	491c <z_impl_z_log_msg_static_create>
    8b2e:	e7cf      	b.n	8ad0 <hard_fault+0x14>
		PR_EXC("  Bus fault on vector table read");
    8b30:	4b75      	ldr	r3, [pc, #468]	; (8d08 <hard_fault+0x24c>)
    8b32:	667b      	str	r3, [r7, #100]	; 0x64
    8b34:	2302      	movs	r3, #2
    8b36:	713b      	strb	r3, [r7, #4]
    8b38:	2400      	movs	r4, #0
    8b3a:	717c      	strb	r4, [r7, #5]
    8b3c:	71bc      	strb	r4, [r7, #6]
    8b3e:	71fc      	strb	r4, [r7, #7]
    8b40:	687b      	ldr	r3, [r7, #4]
    8b42:	663b      	str	r3, [r7, #96]	; 0x60
    8b44:	4621      	mov	r1, r4
    8b46:	f364 0100 	bfi	r1, r4, #0, #1
    8b4a:	f364 0141 	bfi	r1, r4, #1, #1
    8b4e:	f364 0182 	bfi	r1, r4, #2, #1
    8b52:	f364 01c5 	bfi	r1, r4, #3, #3
    8b56:	2301      	movs	r3, #1
    8b58:	f363 1188 	bfi	r1, r3, #6, #3
    8b5c:	2308      	movs	r3, #8
    8b5e:	f363 2153 	bfi	r1, r3, #9, #11
    8b62:	f364 511f 	bfi	r1, r4, #20, #12
    8b66:	4623      	mov	r3, r4
    8b68:	f107 0260 	add.w	r2, r7, #96	; 0x60
    8b6c:	4863      	ldr	r0, [pc, #396]	; (8cfc <hard_fault+0x240>)
    8b6e:	f7fb fed5 	bl	491c <z_impl_z_log_msg_static_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    8b72:	4620      	mov	r0, r4
    8b74:	e7b8      	b.n	8ae8 <hard_fault+0x2c>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    8b76:	4b62      	ldr	r3, [pc, #392]	; (8d00 <hard_fault+0x244>)
    8b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8b7a:	2b00      	cmp	r3, #0
    8b7c:	db2c      	blt.n	8bd8 <hard_fault+0x11c>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    8b7e:	4b60      	ldr	r3, [pc, #384]	; (8d00 <hard_fault+0x244>)
    8b80:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    8b82:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    8b86:	d0af      	beq.n	8ae8 <hard_fault+0x2c>
		PR_EXC("  Fault escalation (see below)");
    8b88:	4b5c      	ldr	r3, [pc, #368]	; (8cfc <hard_fault+0x240>)
    8b8a:	681b      	ldr	r3, [r3, #0]
    8b8c:	f013 0f07 	tst.w	r3, #7
    8b90:	d149      	bne.n	8c26 <hard_fault+0x16a>
		if (z_arm_is_synchronous_svc(esf)) {
    8b92:	4628      	mov	r0, r5
    8b94:	f7ff fa5e 	bl	8054 <z_arm_is_synchronous_svc>
    8b98:	2800      	cmp	r0, #0
    8b9a:	f000 808f 	beq.w	8cbc <hard_fault+0x200>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    8b9e:	4b57      	ldr	r3, [pc, #348]	; (8cfc <hard_fault+0x240>)
    8ba0:	681b      	ldr	r3, [r3, #0]
    8ba2:	f013 0f07 	tst.w	r3, #7
    8ba6:	f000 8084 	beq.w	8cb2 <hard_fault+0x1f6>
    8baa:	682c      	ldr	r4, [r5, #0]
    8bac:	466e      	mov	r6, sp
    8bae:	b088      	sub	sp, #32
    8bb0:	466b      	mov	r3, sp
    8bb2:	f113 0210 	adds.w	r2, r3, #16
    8bb6:	d057      	beq.n	8c68 <hard_fault+0x1ac>
    8bb8:	210c      	movs	r1, #12
    8bba:	b14a      	cbz	r2, 8bd0 <hard_fault+0x114>
    8bbc:	4608      	mov	r0, r1
    8bbe:	2904      	cmp	r1, #4
    8bc0:	dd03      	ble.n	8bca <hard_fault+0x10e>
    8bc2:	f8df c148 	ldr.w	ip, [pc, #328]	; 8d0c <hard_fault+0x250>
    8bc6:	f8c3 c014 	str.w	ip, [r3, #20]
    8bca:	2808      	cmp	r0, #8
    8bcc:	dd4f      	ble.n	8c6e <hard_fault+0x1b2>
    8bce:	619c      	str	r4, [r3, #24]
    8bd0:	290b      	cmp	r1, #11
    8bd2:	dd70      	ble.n	8cb6 <hard_fault+0x1fa>
    8bd4:	240c      	movs	r4, #12
    8bd6:	e04c      	b.n	8c72 <hard_fault+0x1b6>
		PR_EXC("  Debug event");
    8bd8:	4b48      	ldr	r3, [pc, #288]	; (8cfc <hard_fault+0x240>)
    8bda:	6818      	ldr	r0, [r3, #0]
    8bdc:	f010 0007 	ands.w	r0, r0, #7
    8be0:	d082      	beq.n	8ae8 <hard_fault+0x2c>
    8be2:	4b4b      	ldr	r3, [pc, #300]	; (8d10 <hard_fault+0x254>)
    8be4:	64fb      	str	r3, [r7, #76]	; 0x4c
    8be6:	2302      	movs	r3, #2
    8be8:	713b      	strb	r3, [r7, #4]
    8bea:	2300      	movs	r3, #0
    8bec:	717b      	strb	r3, [r7, #5]
    8bee:	71bb      	strb	r3, [r7, #6]
    8bf0:	71fb      	strb	r3, [r7, #7]
    8bf2:	687a      	ldr	r2, [r7, #4]
    8bf4:	64ba      	str	r2, [r7, #72]	; 0x48
    8bf6:	4619      	mov	r1, r3
    8bf8:	f363 0100 	bfi	r1, r3, #0, #1
    8bfc:	f363 0141 	bfi	r1, r3, #1, #1
    8c00:	f363 0182 	bfi	r1, r3, #2, #1
    8c04:	f363 01c5 	bfi	r1, r3, #3, #3
    8c08:	2201      	movs	r2, #1
    8c0a:	f362 1188 	bfi	r1, r2, #6, #3
    8c0e:	2208      	movs	r2, #8
    8c10:	f362 2153 	bfi	r1, r2, #9, #11
    8c14:	f363 511f 	bfi	r1, r3, #20, #12
    8c18:	f107 0248 	add.w	r2, r7, #72	; 0x48
    8c1c:	4837      	ldr	r0, [pc, #220]	; (8cfc <hard_fault+0x240>)
    8c1e:	f7fb fe7d 	bl	491c <z_impl_z_log_msg_static_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    8c22:	4630      	mov	r0, r6
    8c24:	e760      	b.n	8ae8 <hard_fault+0x2c>
		PR_EXC("  Fault escalation (see below)");
    8c26:	4b3b      	ldr	r3, [pc, #236]	; (8d14 <hard_fault+0x258>)
    8c28:	637b      	str	r3, [r7, #52]	; 0x34
    8c2a:	2302      	movs	r3, #2
    8c2c:	713b      	strb	r3, [r7, #4]
    8c2e:	2300      	movs	r3, #0
    8c30:	717b      	strb	r3, [r7, #5]
    8c32:	71bb      	strb	r3, [r7, #6]
    8c34:	71fb      	strb	r3, [r7, #7]
    8c36:	687a      	ldr	r2, [r7, #4]
    8c38:	633a      	str	r2, [r7, #48]	; 0x30
    8c3a:	4619      	mov	r1, r3
    8c3c:	f363 0100 	bfi	r1, r3, #0, #1
    8c40:	f363 0141 	bfi	r1, r3, #1, #1
    8c44:	f363 0182 	bfi	r1, r3, #2, #1
    8c48:	f363 01c5 	bfi	r1, r3, #3, #3
    8c4c:	2201      	movs	r2, #1
    8c4e:	f362 1188 	bfi	r1, r2, #6, #3
    8c52:	2208      	movs	r2, #8
    8c54:	f362 2153 	bfi	r1, r2, #9, #11
    8c58:	f363 511f 	bfi	r1, r3, #20, #12
    8c5c:	f107 0230 	add.w	r2, r7, #48	; 0x30
    8c60:	4826      	ldr	r0, [pc, #152]	; (8cfc <hard_fault+0x240>)
    8c62:	f7fb fe5b 	bl	491c <z_impl_z_log_msg_static_create>
    8c66:	e794      	b.n	8b92 <hard_fault+0xd6>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    8c68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    8c6c:	e7a5      	b.n	8bba <hard_fault+0xfe>
    8c6e:	f06f 041b 	mvn.w	r4, #27
    8c72:	b13a      	cbz	r2, 8c84 <hard_fault+0x1c8>
    8c74:	2103      	movs	r1, #3
    8c76:	7139      	strb	r1, [r7, #4]
    8c78:	2100      	movs	r1, #0
    8c7a:	7179      	strb	r1, [r7, #5]
    8c7c:	71b9      	strb	r1, [r7, #6]
    8c7e:	71f9      	strb	r1, [r7, #7]
    8c80:	6878      	ldr	r0, [r7, #4]
    8c82:	6118      	str	r0, [r3, #16]
    8c84:	2100      	movs	r1, #0
    8c86:	f36f 0100 	bfc	r1, #0, #1
    8c8a:	f36f 0141 	bfc	r1, #1, #1
    8c8e:	f36f 0182 	bfc	r1, #2, #1
    8c92:	f36f 01c5 	bfc	r1, #3, #3
    8c96:	2301      	movs	r3, #1
    8c98:	f363 1188 	bfi	r1, r3, #6, #3
    8c9c:	f3c4 040a 	ubfx	r4, r4, #0, #11
    8ca0:	f364 2153 	bfi	r1, r4, #9, #11
    8ca4:	f36f 511f 	bfc	r1, #20, #12
    8ca8:	2300      	movs	r3, #0
    8caa:	4814      	ldr	r0, [pc, #80]	; (8cfc <hard_fault+0x240>)
    8cac:	f7fb fe36 	bl	491c <z_impl_z_log_msg_static_create>
    8cb0:	46b5      	mov	sp, r6
			reason = esf->basic.r0;
    8cb2:	6828      	ldr	r0, [r5, #0]
    8cb4:	e718      	b.n	8ae8 <hard_fault+0x2c>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    8cb6:	f06f 041b 	mvn.w	r4, #27
    8cba:	e7da      	b.n	8c72 <hard_fault+0x1b6>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    8cbc:	4b10      	ldr	r3, [pc, #64]	; (8d00 <hard_fault+0x244>)
    8cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8cc0:	f013 0fff 	tst.w	r3, #255	; 0xff
    8cc4:	d10e      	bne.n	8ce4 <hard_fault+0x228>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    8cc6:	4b0e      	ldr	r3, [pc, #56]	; (8d00 <hard_fault+0x244>)
    8cc8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8cca:	f410 407f 	ands.w	r0, r0, #65280	; 0xff00
    8cce:	d10f      	bne.n	8cf0 <hard_fault+0x234>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    8cd0:	4b0b      	ldr	r3, [pc, #44]	; (8d00 <hard_fault+0x244>)
    8cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    8cd8:	f4ff af06 	bcc.w	8ae8 <hard_fault+0x2c>
			reason = usage_fault(esf);
    8cdc:	4628      	mov	r0, r5
    8cde:	f7ff fd81 	bl	87e4 <usage_fault>
	return reason;
    8ce2:	e701      	b.n	8ae8 <hard_fault+0x2c>
			reason = mem_manage_fault(esf, 1, recoverable);
    8ce4:	4622      	mov	r2, r4
    8ce6:	2101      	movs	r1, #1
    8ce8:	4628      	mov	r0, r5
    8cea:	f7ff fa1d 	bl	8128 <mem_manage_fault>
    8cee:	e6fb      	b.n	8ae8 <hard_fault+0x2c>
			reason = bus_fault(esf, 1, recoverable);
    8cf0:	4622      	mov	r2, r4
    8cf2:	2101      	movs	r1, #1
    8cf4:	4628      	mov	r0, r5
    8cf6:	f7ff fbb5 	bl	8464 <bus_fault>
    8cfa:	e6f5      	b.n	8ae8 <hard_fault+0x2c>
    8cfc:	200002f8 	.word	0x200002f8
    8d00:	e000ed00 	.word	0xe000ed00
    8d04:	00017c7c 	.word	0x00017c7c
    8d08:	00017c94 	.word	0x00017c94
    8d0c:	00017ce8 	.word	0x00017ce8
    8d10:	00017cb8 	.word	0x00017cb8
    8d14:	00017cc8 	.word	0x00017cc8

00008d18 <debug_monitor>:
	*recoverable = false;
    8d18:	2300      	movs	r3, #0
    8d1a:	700b      	strb	r3, [r1, #0]
	PR_FAULT_INFO(
    8d1c:	4b16      	ldr	r3, [pc, #88]	; (8d78 <debug_monitor+0x60>)
    8d1e:	681b      	ldr	r3, [r3, #0]
    8d20:	f013 0f07 	tst.w	r3, #7
    8d24:	d100      	bne.n	8d28 <debug_monitor+0x10>
    8d26:	4770      	bx	lr
{
    8d28:	b500      	push	{lr}
    8d2a:	b089      	sub	sp, #36	; 0x24
	PR_FAULT_INFO(
    8d2c:	4b13      	ldr	r3, [pc, #76]	; (8d7c <debug_monitor+0x64>)
    8d2e:	9307      	str	r3, [sp, #28]
    8d30:	2302      	movs	r3, #2
    8d32:	f88d 3004 	strb.w	r3, [sp, #4]
    8d36:	2300      	movs	r3, #0
    8d38:	f88d 3005 	strb.w	r3, [sp, #5]
    8d3c:	f88d 3006 	strb.w	r3, [sp, #6]
    8d40:	f88d 3007 	strb.w	r3, [sp, #7]
    8d44:	9a01      	ldr	r2, [sp, #4]
    8d46:	9206      	str	r2, [sp, #24]
    8d48:	4619      	mov	r1, r3
    8d4a:	f363 0100 	bfi	r1, r3, #0, #1
    8d4e:	f363 0141 	bfi	r1, r3, #1, #1
    8d52:	f363 0182 	bfi	r1, r3, #2, #1
    8d56:	f363 01c5 	bfi	r1, r3, #3, #3
    8d5a:	2201      	movs	r2, #1
    8d5c:	f362 1188 	bfi	r1, r2, #6, #3
    8d60:	2208      	movs	r2, #8
    8d62:	f362 2153 	bfi	r1, r2, #9, #11
    8d66:	f363 511f 	bfi	r1, r3, #20, #12
    8d6a:	aa06      	add	r2, sp, #24
    8d6c:	4802      	ldr	r0, [pc, #8]	; (8d78 <debug_monitor+0x60>)
    8d6e:	f7fb fdd5 	bl	491c <z_impl_z_log_msg_static_create>
}
    8d72:	b009      	add	sp, #36	; 0x24
    8d74:	f85d fb04 	ldr.w	pc, [sp], #4
    8d78:	200002f8 	.word	0x200002f8
    8d7c:	00017d04 	.word	0x00017d04

00008d80 <reserved_exception>:
	PR_FAULT_INFO("***** %s %d) *****",
    8d80:	4b35      	ldr	r3, [pc, #212]	; (8e58 <reserved_exception+0xd8>)
    8d82:	681b      	ldr	r3, [r3, #0]
    8d84:	f013 0f07 	tst.w	r3, #7
    8d88:	d064      	beq.n	8e54 <reserved_exception+0xd4>
{
    8d8a:	b5b0      	push	{r4, r5, r7, lr}
    8d8c:	b082      	sub	sp, #8
    8d8e:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** %s %d) *****",
    8d90:	290f      	cmp	r1, #15
    8d92:	dc24      	bgt.n	8dde <reserved_exception+0x5e>
    8d94:	4d31      	ldr	r5, [pc, #196]	; (8e5c <reserved_exception+0xdc>)
    8d96:	3910      	subs	r1, #16
    8d98:	466c      	mov	r4, sp
    8d9a:	2300      	movs	r3, #0
    8d9c:	713b      	strb	r3, [r7, #4]
    8d9e:	2302      	movs	r3, #2
    8da0:	717b      	strb	r3, [r7, #5]
    8da2:	b08a      	sub	sp, #40	; 0x28
    8da4:	46ec      	mov	ip, sp
    8da6:	f11c 0210 	adds.w	r2, ip, #16
    8daa:	d01a      	beq.n	8de2 <reserved_exception+0x62>
    8dac:	2012      	movs	r0, #18
    8dae:	b122      	cbz	r2, 8dba <reserved_exception+0x3a>
    8db0:	2804      	cmp	r0, #4
    8db2:	dd02      	ble.n	8dba <reserved_exception+0x3a>
    8db4:	4b2a      	ldr	r3, [pc, #168]	; (8e60 <reserved_exception+0xe0>)
    8db6:	f8cc 3014 	str.w	r3, [ip, #20]
    8dba:	2300      	movs	r3, #0
    8dbc:	703b      	strb	r3, [r7, #0]
    8dbe:	2302      	movs	r3, #2
    8dc0:	707b      	strb	r3, [r7, #1]
    8dc2:	b1e2      	cbz	r2, 8dfe <reserved_exception+0x7e>
    8dc4:	4603      	mov	r3, r0
    8dc6:	2808      	cmp	r0, #8
    8dc8:	dd01      	ble.n	8dce <reserved_exception+0x4e>
    8dca:	f8cc 5018 	str.w	r5, [ip, #24]
    8dce:	2b0c      	cmp	r3, #12
    8dd0:	dd01      	ble.n	8dd6 <reserved_exception+0x56>
    8dd2:	f8cc 101c 	str.w	r1, [ip, #28]
    8dd6:	f10c 0320 	add.w	r3, ip, #32
    8dda:	2100      	movs	r1, #0
    8ddc:	e00d      	b.n	8dfa <reserved_exception+0x7a>
    8dde:	4d21      	ldr	r5, [pc, #132]	; (8e64 <reserved_exception+0xe4>)
    8de0:	e7d9      	b.n	8d96 <reserved_exception+0x16>
    8de2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    8de6:	e7e2      	b.n	8dae <reserved_exception+0x2e>
    8de8:	f101 0508 	add.w	r5, r1, #8
    8dec:	eb05 0e07 	add.w	lr, r5, r7
    8df0:	f81e ec08 	ldrb.w	lr, [lr, #-8]
    8df4:	f803 eb01 	strb.w	lr, [r3], #1
    8df8:	3101      	adds	r1, #1
    8dfa:	2901      	cmp	r1, #1
    8dfc:	d9f4      	bls.n	8de8 <reserved_exception+0x68>
    8dfe:	2811      	cmp	r0, #17
    8e00:	dd25      	ble.n	8e4e <reserved_exception+0xce>
    8e02:	2312      	movs	r3, #18
    8e04:	b14a      	cbz	r2, 8e1a <reserved_exception+0x9a>
    8e06:	2104      	movs	r1, #4
    8e08:	7139      	strb	r1, [r7, #4]
    8e0a:	2100      	movs	r1, #0
    8e0c:	7179      	strb	r1, [r7, #5]
    8e0e:	71b9      	strb	r1, [r7, #6]
    8e10:	2101      	movs	r1, #1
    8e12:	71f9      	strb	r1, [r7, #7]
    8e14:	6878      	ldr	r0, [r7, #4]
    8e16:	f8cc 0010 	str.w	r0, [ip, #16]
    8e1a:	2100      	movs	r1, #0
    8e1c:	f36f 0100 	bfc	r1, #0, #1
    8e20:	f36f 0141 	bfc	r1, #1, #1
    8e24:	f36f 0182 	bfc	r1, #2, #1
    8e28:	f36f 01c5 	bfc	r1, #3, #3
    8e2c:	2001      	movs	r0, #1
    8e2e:	f360 1188 	bfi	r1, r0, #6, #3
    8e32:	f3c3 030a 	ubfx	r3, r3, #0, #11
    8e36:	f363 2153 	bfi	r1, r3, #9, #11
    8e3a:	f36f 511f 	bfc	r1, #20, #12
    8e3e:	2300      	movs	r3, #0
    8e40:	4805      	ldr	r0, [pc, #20]	; (8e58 <reserved_exception+0xd8>)
    8e42:	f7fb fd6b 	bl	491c <z_impl_z_log_msg_static_create>
    8e46:	46a5      	mov	sp, r4
}
    8e48:	3708      	adds	r7, #8
    8e4a:	46bd      	mov	sp, r7
    8e4c:	bdb0      	pop	{r4, r5, r7, pc}
	PR_FAULT_INFO("***** %s %d) *****",
    8e4e:	f06f 031b 	mvn.w	r3, #27
    8e52:	e7d7      	b.n	8e04 <reserved_exception+0x84>
    8e54:	4770      	bx	lr
    8e56:	bf00      	nop
    8e58:	200002f8 	.word	0x200002f8
    8e5c:	00017d28 	.word	0x00017d28
    8e60:	00017d5c 	.word	0x00017d5c
    8e64:	00017d40 	.word	0x00017d40

00008e68 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    8e68:	b530      	push	{r4, r5, lr}
    8e6a:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    8e6c:	4b1a      	ldr	r3, [pc, #104]	; (8ed8 <z_arm_fault+0x70>)
    8e6e:	685c      	ldr	r4, [r3, #4]
    8e70:	f3c4 0408 	ubfx	r4, r4, #0, #9
    8e74:	2300      	movs	r3, #0
    8e76:	f383 8811 	msr	BASEPRI, r3
    8e7a:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(0);

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
    8e7e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    8e82:	f7ff f905 	bl	8090 <get_esf>
    8e86:	4605      	mov	r5, r0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    8e88:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    8e8c:	4621      	mov	r1, r4
    8e8e:	f009 fd67 	bl	12960 <fault_handle>
	if (recoverable) {
    8e92:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    8e96:	b10b      	cbz	r3, 8e9c <z_arm_fault+0x34>
	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    8e98:	b00b      	add	sp, #44	; 0x2c
    8e9a:	bd30      	pop	{r4, r5, pc}
    8e9c:	4604      	mov	r4, r0
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    8e9e:	2220      	movs	r2, #32
    8ea0:	4629      	mov	r1, r5
    8ea2:	a801      	add	r0, sp, #4
    8ea4:	f009 ff71 	bl	12d8a <memcpy>
	if (nested_exc) {
    8ea8:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    8eac:	b14b      	cbz	r3, 8ec2 <z_arm_fault+0x5a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    8eae:	9b08      	ldr	r3, [sp, #32]
    8eb0:	f3c3 0208 	ubfx	r2, r3, #0, #9
    8eb4:	b95a      	cbnz	r2, 8ece <z_arm_fault+0x66>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    8eb6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    8eba:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    8ebe:	9308      	str	r3, [sp, #32]
    8ec0:	e005      	b.n	8ece <z_arm_fault+0x66>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    8ec2:	9b08      	ldr	r3, [sp, #32]
    8ec4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    8ec8:	f023 0301 	bic.w	r3, r3, #1
    8ecc:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    8ece:	a901      	add	r1, sp, #4
    8ed0:	4620      	mov	r0, r4
    8ed2:	f009 fd15 	bl	12900 <z_arm_fatal_error>
    8ed6:	e7df      	b.n	8e98 <z_arm_fault+0x30>
    8ed8:	e000ed00 	.word	0xe000ed00

00008edc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    8edc:	4a02      	ldr	r2, [pc, #8]	; (8ee8 <z_arm_fault_init+0xc>)
    8ede:	6953      	ldr	r3, [r2, #20]
    8ee0:	f043 0310 	orr.w	r3, r3, #16
    8ee4:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    8ee6:	4770      	bx	lr
    8ee8:	e000ed00 	.word	0xe000ed00

00008eec <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    8eec:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    8ef0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    8ef4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    8ef6:	4672      	mov	r2, lr
	bl z_arm_fault
    8ef8:	f7ff ffb6 	bl	8e68 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    8efc:	bd01      	pop	{r0, pc}
    8efe:	bf00      	nop

00008f00 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    8f00:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    8f02:	e006      	b.n	8f12 <z_arm_interrupt_init+0x12>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8f04:	f003 030f 	and.w	r3, r3, #15
    8f08:	4909      	ldr	r1, [pc, #36]	; (8f30 <z_arm_interrupt_init+0x30>)
    8f0a:	4419      	add	r1, r3
    8f0c:	2320      	movs	r3, #32
    8f0e:	760b      	strb	r3, [r1, #24]
    8f10:	3201      	adds	r2, #1
    8f12:	2a26      	cmp	r2, #38	; 0x26
    8f14:	dc0a      	bgt.n	8f2c <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    8f16:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    8f18:	2b00      	cmp	r3, #0
    8f1a:	dbf3      	blt.n	8f04 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8f1c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    8f20:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    8f24:	2120      	movs	r1, #32
    8f26:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    8f2a:	e7f1      	b.n	8f10 <z_arm_interrupt_init+0x10>
	}
}
    8f2c:	4770      	bx	lr
    8f2e:	bf00      	nop
    8f30:	e000ecfc 	.word	0xe000ecfc

00008f34 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
    8f34:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
    8f36:	4916      	ldr	r1, [pc, #88]	; (8f90 <__start+0x5c>)
    strb r0, [r1]
    8f38:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    8f3a:	2000      	movs	r0, #0
    msr CONTROL, r0
    8f3c:	f380 8814 	msr	CONTROL, r0
    isb
    8f40:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    8f44:	f7fa fc14 	bl	3770 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    8f48:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    8f4a:	4912      	ldr	r1, [pc, #72]	; (8f94 <__start+0x60>)
    str r0, [r1]
    8f4c:	6008      	str	r0, [r1, #0]
    dsb
    8f4e:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    8f52:	4811      	ldr	r0, [pc, #68]	; (8f98 <__start+0x64>)
    msr msp, r0
    8f54:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    8f58:	f000 f836 	bl	8fc8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    8f5c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    8f5e:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
    8f62:	480e      	ldr	r0, [pc, #56]	; (8f9c <__start+0x68>)
    ldr r1, =0xaa
    8f64:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    8f68:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bl z_early_memset
    8f6c:	f00b fb8a 	bl	14684 <z_early_memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    8f70:	480a      	ldr	r0, [pc, #40]	; (8f9c <__start+0x68>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    8f72:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    8f76:	1840      	adds	r0, r0, r1
    msr PSP, r0
    8f78:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    8f7c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    8f80:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    8f82:	4308      	orrs	r0, r1
    msr CONTROL, r0
    8f84:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    8f88:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    8f8c:	f7fe ff92 	bl	7eb4 <z_arm_prep_c>
    ldr r1, =z_sys_post_kernel
    8f90:	20003cbe 	.word	0x20003cbe
    ldr r1, =_SCS_MPU_CTRL
    8f94:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    8f98:	200056f8 	.word	0x200056f8
    ldr r0, =z_interrupt_stacks
    8f9c:	200049b8 	.word	0x200049b8

00008fa0 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    8fa0:	4b08      	ldr	r3, [pc, #32]	; (8fc4 <z_arm_clear_arm_mpu_config+0x24>)
    8fa2:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    8fa6:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    8faa:	2300      	movs	r3, #0
    8fac:	e006      	b.n	8fbc <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    8fae:	4a05      	ldr	r2, [pc, #20]	; (8fc4 <z_arm_clear_arm_mpu_config+0x24>)
    8fb0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    8fb4:	2100      	movs	r1, #0
    8fb6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    8fba:	3301      	adds	r3, #1
    8fbc:	4283      	cmp	r3, r0
    8fbe:	dbf6      	blt.n	8fae <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    8fc0:	4770      	bx	lr
    8fc2:	bf00      	nop
    8fc4:	e000ed00 	.word	0xe000ed00

00008fc8 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    8fc8:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    8fca:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    8fcc:	2400      	movs	r4, #0
    8fce:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    8fd2:	f7ff ffe5 	bl	8fa0 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    8fd6:	4623      	mov	r3, r4
    8fd8:	e008      	b.n	8fec <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    8fda:	f103 0120 	add.w	r1, r3, #32
    8fde:	4a0e      	ldr	r2, [pc, #56]	; (9018 <z_arm_init_arch_hw_at_boot+0x50>)
    8fe0:	f04f 30ff 	mov.w	r0, #4294967295
    8fe4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    8fe8:	3301      	adds	r3, #1
    8fea:	b2db      	uxtb	r3, r3
    8fec:	2b07      	cmp	r3, #7
    8fee:	d9f4      	bls.n	8fda <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    8ff0:	2300      	movs	r3, #0
    8ff2:	e008      	b.n	9006 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    8ff4:	f103 0160 	add.w	r1, r3, #96	; 0x60
    8ff8:	4a07      	ldr	r2, [pc, #28]	; (9018 <z_arm_init_arch_hw_at_boot+0x50>)
    8ffa:	f04f 30ff 	mov.w	r0, #4294967295
    8ffe:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    9002:	3301      	adds	r3, #1
    9004:	b2db      	uxtb	r3, r3
    9006:	2b07      	cmp	r3, #7
    9008:	d9f4      	bls.n	8ff4 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    900a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    900c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9010:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    9014:	bd10      	pop	{r4, pc}
    9016:	bf00      	nop
    9018:	e000e100 	.word	0xe000e100

0000901c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    901c:	b508      	push	{r3, lr}
	if (_current == thread) {
    901e:	4b0a      	ldr	r3, [pc, #40]	; (9048 <z_impl_k_thread_abort+0x2c>)
    9020:	689b      	ldr	r3, [r3, #8]
    9022:	4283      	cmp	r3, r0
    9024:	d002      	beq.n	902c <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    9026:	f005 f801 	bl	e02c <z_thread_abort>
}
    902a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    902c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    9030:	2b00      	cmp	r3, #0
    9032:	d0f8      	beq.n	9026 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    9034:	4b05      	ldr	r3, [pc, #20]	; (904c <z_impl_k_thread_abort+0x30>)
    9036:	685a      	ldr	r2, [r3, #4]
    9038:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    903c:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    903e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    9040:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    9044:	625a      	str	r2, [r3, #36]	; 0x24
    9046:	e7ee      	b.n	9026 <z_impl_k_thread_abort+0xa>
    9048:	20003c6c 	.word	0x20003c6c
    904c:	e000ed00 	.word	0xe000ed00

00009050 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    9050:	b508      	push	{r3, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    9052:	4b03      	ldr	r3, [pc, #12]	; (9060 <z_arm_configure_static_mpu_regions+0x10>)
    9054:	4a03      	ldr	r2, [pc, #12]	; (9064 <z_arm_configure_static_mpu_regions+0x14>)
    9056:	2101      	movs	r1, #1
    9058:	4803      	ldr	r0, [pc, #12]	; (9068 <z_arm_configure_static_mpu_regions+0x18>)
    905a:	f009 fcd6 	bl	12a0a <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    905e:	bd08      	pop	{r3, pc}
    9060:	20010000 	.word	0x20010000
    9064:	20000000 	.word	0x20000000
    9068:	00017d70 	.word	0x00017d70

0000906c <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    906c:	4a08      	ldr	r2, [pc, #32]	; (9090 <region_init+0x24>)
    906e:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    9072:	680b      	ldr	r3, [r1, #0]
    9074:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    9078:	4303      	orrs	r3, r0
    907a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    907e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    9082:	688b      	ldr	r3, [r1, #8]
    9084:	f043 0301 	orr.w	r3, r3, #1
    9088:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    908c:	4770      	bx	lr
    908e:	bf00      	nop
    9090:	e000ed00 	.word	0xe000ed00

00009094 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    9094:	b5f0      	push	{r4, r5, r6, r7, lr}
    9096:	b083      	sub	sp, #12
    9098:	af00      	add	r7, sp, #0
    909a:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    909c:	2807      	cmp	r0, #7
    909e:	d805      	bhi.n	90ac <region_allocate_and_init+0x18>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    90a0:	f7ff ffe4 	bl	906c <region_init>

	return index;
    90a4:	4620      	mov	r0, r4
}
    90a6:	370c      	adds	r7, #12
    90a8:	46bd      	mov	sp, r7
    90aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    90ac:	4b20      	ldr	r3, [pc, #128]	; (9130 <region_allocate_and_init+0x9c>)
    90ae:	681b      	ldr	r3, [r3, #0]
    90b0:	f013 0f07 	tst.w	r3, #7
    90b4:	d032      	beq.n	911c <region_allocate_and_init+0x88>
    90b6:	466d      	mov	r5, sp
    90b8:	b088      	sub	sp, #32
    90ba:	466b      	mov	r3, sp
    90bc:	f113 0210 	adds.w	r2, r3, #16
    90c0:	d02f      	beq.n	9122 <region_allocate_and_init+0x8e>
    90c2:	210c      	movs	r1, #12
    90c4:	b13a      	cbz	r2, 90d6 <region_allocate_and_init+0x42>
    90c6:	4608      	mov	r0, r1
    90c8:	2904      	cmp	r1, #4
    90ca:	dd01      	ble.n	90d0 <region_allocate_and_init+0x3c>
    90cc:	4e19      	ldr	r6, [pc, #100]	; (9134 <region_allocate_and_init+0xa0>)
    90ce:	615e      	str	r6, [r3, #20]
    90d0:	2808      	cmp	r0, #8
    90d2:	dd00      	ble.n	90d6 <region_allocate_and_init+0x42>
    90d4:	619c      	str	r4, [r3, #24]
    90d6:	290b      	cmp	r1, #11
    90d8:	dd26      	ble.n	9128 <region_allocate_and_init+0x94>
    90da:	240c      	movs	r4, #12
    90dc:	b13a      	cbz	r2, 90ee <region_allocate_and_init+0x5a>
    90de:	2103      	movs	r1, #3
    90e0:	7139      	strb	r1, [r7, #4]
    90e2:	2100      	movs	r1, #0
    90e4:	7179      	strb	r1, [r7, #5]
    90e6:	71b9      	strb	r1, [r7, #6]
    90e8:	71f9      	strb	r1, [r7, #7]
    90ea:	6878      	ldr	r0, [r7, #4]
    90ec:	6118      	str	r0, [r3, #16]
    90ee:	2100      	movs	r1, #0
    90f0:	f36f 0100 	bfc	r1, #0, #1
    90f4:	f36f 0141 	bfc	r1, #1, #1
    90f8:	f36f 0182 	bfc	r1, #2, #1
    90fc:	f36f 01c5 	bfc	r1, #3, #3
    9100:	2301      	movs	r3, #1
    9102:	f363 1188 	bfi	r1, r3, #6, #3
    9106:	f3c4 040a 	ubfx	r4, r4, #0, #11
    910a:	f364 2153 	bfi	r1, r4, #9, #11
    910e:	f36f 511f 	bfc	r1, #20, #12
    9112:	2300      	movs	r3, #0
    9114:	4806      	ldr	r0, [pc, #24]	; (9130 <region_allocate_and_init+0x9c>)
    9116:	f7fb fc01 	bl	491c <z_impl_z_log_msg_static_create>
    911a:	46ad      	mov	sp, r5
		return -EINVAL;
    911c:	f06f 0015 	mvn.w	r0, #21
    9120:	e7c1      	b.n	90a6 <region_allocate_and_init+0x12>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    9122:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    9126:	e7cd      	b.n	90c4 <region_allocate_and_init+0x30>
    9128:	f06f 041b 	mvn.w	r4, #27
    912c:	e7d6      	b.n	90dc <region_allocate_and_init+0x48>
    912e:	bf00      	nop
    9130:	200002f4 	.word	0x200002f4
    9134:	00017d80 	.word	0x00017d80

00009138 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    9138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    913c:	b082      	sub	sp, #8
    913e:	af00      	add	r7, sp, #0
    9140:	4681      	mov	r9, r0
    9142:	4688      	mov	r8, r1
    9144:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
    9146:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    9148:	2500      	movs	r5, #0
    914a:	e00f      	b.n	916c <mpu_configure_regions+0x34>
		}
		/* Non-empty region. */

		if (do_sanity_check &&
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    914c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    9150:	e029      	b.n	91a6 <mpu_configure_regions+0x6e>
    9152:	f06f 041b 	mvn.w	r4, #27
    9156:	e032      	b.n	91be <mpu_configure_regions+0x86>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    9158:	4621      	mov	r1, r4
    915a:	b2f0      	uxtb	r0, r6
    915c:	f009 fc36 	bl	129cc <mpu_configure_region>
    9160:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    9162:	f110 0f16 	cmn.w	r0, #22
    9166:	d04c      	beq.n	9202 <mpu_configure_regions+0xca>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    9168:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    916a:	3501      	adds	r5, #1
    916c:	4545      	cmp	r5, r8
    916e:	da48      	bge.n	9202 <mpu_configure_regions+0xca>
		if (regions[i].size == 0U) {
    9170:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    9174:	eb09 0484 	add.w	r4, r9, r4, lsl #2
    9178:	6862      	ldr	r2, [r4, #4]
    917a:	2a00      	cmp	r2, #0
    917c:	d0f5      	beq.n	916a <mpu_configure_regions+0x32>
		if (do_sanity_check &&
    917e:	f1ba 0f00 	cmp.w	sl, #0
    9182:	d0e9      	beq.n	9158 <mpu_configure_regions+0x20>
				(!mpu_partition_is_valid(&regions[i]))) {
    9184:	4620      	mov	r0, r4
    9186:	f009 fc10 	bl	129aa <mpu_partition_is_valid>
		if (do_sanity_check &&
    918a:	2800      	cmp	r0, #0
    918c:	d1e4      	bne.n	9158 <mpu_configure_regions+0x20>
			LOG_ERR("Partition %u: sanity check failed.", i);
    918e:	4b1f      	ldr	r3, [pc, #124]	; (920c <mpu_configure_regions+0xd4>)
    9190:	681b      	ldr	r3, [r3, #0]
    9192:	f013 0f07 	tst.w	r3, #7
    9196:	d032      	beq.n	91fe <mpu_configure_regions+0xc6>
    9198:	466e      	mov	r6, sp
    919a:	b088      	sub	sp, #32
    919c:	466b      	mov	r3, sp
    919e:	f113 0210 	adds.w	r2, r3, #16
    91a2:	d0d3      	beq.n	914c <mpu_configure_regions+0x14>
    91a4:	210c      	movs	r1, #12
    91a6:	b13a      	cbz	r2, 91b8 <mpu_configure_regions+0x80>
    91a8:	4608      	mov	r0, r1
    91aa:	2904      	cmp	r1, #4
    91ac:	dd01      	ble.n	91b2 <mpu_configure_regions+0x7a>
    91ae:	4c18      	ldr	r4, [pc, #96]	; (9210 <mpu_configure_regions+0xd8>)
    91b0:	615c      	str	r4, [r3, #20]
    91b2:	2808      	cmp	r0, #8
    91b4:	dd00      	ble.n	91b8 <mpu_configure_regions+0x80>
    91b6:	619d      	str	r5, [r3, #24]
    91b8:	290b      	cmp	r1, #11
    91ba:	ddca      	ble.n	9152 <mpu_configure_regions+0x1a>
    91bc:	240c      	movs	r4, #12
    91be:	b13a      	cbz	r2, 91d0 <mpu_configure_regions+0x98>
    91c0:	2103      	movs	r1, #3
    91c2:	7139      	strb	r1, [r7, #4]
    91c4:	2100      	movs	r1, #0
    91c6:	7179      	strb	r1, [r7, #5]
    91c8:	71b9      	strb	r1, [r7, #6]
    91ca:	71f9      	strb	r1, [r7, #7]
    91cc:	6878      	ldr	r0, [r7, #4]
    91ce:	6118      	str	r0, [r3, #16]
    91d0:	2100      	movs	r1, #0
    91d2:	f36f 0100 	bfc	r1, #0, #1
    91d6:	f36f 0141 	bfc	r1, #1, #1
    91da:	f36f 0182 	bfc	r1, #2, #1
    91de:	f36f 01c5 	bfc	r1, #3, #3
    91e2:	2301      	movs	r3, #1
    91e4:	f363 1188 	bfi	r1, r3, #6, #3
    91e8:	f3c4 040a 	ubfx	r4, r4, #0, #11
    91ec:	f364 2153 	bfi	r1, r4, #9, #11
    91f0:	f36f 511f 	bfc	r1, #20, #12
    91f4:	2300      	movs	r3, #0
    91f6:	4805      	ldr	r0, [pc, #20]	; (920c <mpu_configure_regions+0xd4>)
    91f8:	f7fb fb90 	bl	491c <z_impl_z_log_msg_static_create>
    91fc:	46b5      	mov	sp, r6
			return -EINVAL;
    91fe:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    9202:	4630      	mov	r0, r6
    9204:	3708      	adds	r7, #8
    9206:	46bd      	mov	sp, r7
    9208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    920c:	200002f4 	.word	0x200002f4
    9210:	00017da8 	.word	0x00017da8

00009214 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    9214:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    9216:	4c03      	ldr	r4, [pc, #12]	; (9224 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    9218:	2301      	movs	r3, #1
    921a:	7822      	ldrb	r2, [r4, #0]
    921c:	f7ff ff8c 	bl	9138 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    9220:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    9222:	bd10      	pop	{r4, pc}
    9224:	20003cb7 	.word	0x20003cb7

00009228 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    9228:	4b04      	ldr	r3, [pc, #16]	; (923c <arm_core_mpu_enable+0x14>)
    922a:	2205      	movs	r2, #5
    922c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    9230:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9234:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    9238:	4770      	bx	lr
    923a:	bf00      	nop
    923c:	e000ed00 	.word	0xe000ed00

00009240 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    9240:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    9244:	4b02      	ldr	r3, [pc, #8]	; (9250 <arm_core_mpu_disable+0x10>)
    9246:	2200      	movs	r2, #0
    9248:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    924c:	4770      	bx	lr
    924e:	bf00      	nop
    9250:	e000ed00 	.word	0xe000ed00

00009254 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    9254:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    9256:	4b0e      	ldr	r3, [pc, #56]	; (9290 <z_arm_mpu_init+0x3c>)
    9258:	681d      	ldr	r5, [r3, #0]
    925a:	2d08      	cmp	r5, #8
    925c:	d815      	bhi.n	928a <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    925e:	f7ff ffef 	bl	9240 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    9262:	2400      	movs	r4, #0
    9264:	e009      	b.n	927a <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    9266:	4b0a      	ldr	r3, [pc, #40]	; (9290 <z_arm_mpu_init+0x3c>)
    9268:	6859      	ldr	r1, [r3, #4]
    926a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    926e:	0093      	lsls	r3, r2, #2
    9270:	4419      	add	r1, r3
    9272:	4620      	mov	r0, r4
    9274:	f7ff fefa 	bl	906c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    9278:	3401      	adds	r4, #1
    927a:	42a5      	cmp	r5, r4
    927c:	d8f3      	bhi.n	9266 <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    927e:	4b05      	ldr	r3, [pc, #20]	; (9294 <z_arm_mpu_init+0x40>)
    9280:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    9282:	f7ff ffd1 	bl	9228 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    9286:	2000      	movs	r0, #0
}
    9288:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    928a:	f04f 30ff 	mov.w	r0, #4294967295
    928e:	e7fb      	b.n	9288 <z_arm_mpu_init+0x34>
    9290:	00017dcc 	.word	0x00017dcc
    9294:	20003cb7 	.word	0x20003cb7

00009298 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    9298:	4b01      	ldr	r3, [pc, #4]	; (92a0 <__stdout_hook_install+0x8>)
    929a:	6018      	str	r0, [r3, #0]
}
    929c:	4770      	bx	lr
    929e:	bf00      	nop
    92a0:	200000cc 	.word	0x200000cc

000092a4 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
    92a4:	b40c      	push	{r2, r3}
    92a6:	b510      	push	{r4, lr}
    92a8:	b086      	sub	sp, #24

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    92aa:	460b      	mov	r3, r1
    92ac:	b909      	cbnz	r1, 92b2 <snprintf+0xe>
		str = &dummy; /* write final NUL to dummy, can't change *s */
    92ae:	f10d 000b 	add.w	r0, sp, #11
	}

	p.ptr = str;
    92b2:	9003      	str	r0, [sp, #12]
	p.len = (int) len;
    92b4:	9304      	str	r3, [sp, #16]

	va_start(vargs, format);
    92b6:	ab09      	add	r3, sp, #36	; 0x24
    92b8:	9305      	str	r3, [sp, #20]
    92ba:	2400      	movs	r4, #0
    92bc:	9400      	str	r4, [sp, #0]
    92be:	9a08      	ldr	r2, [sp, #32]
    92c0:	a903      	add	r1, sp, #12
    92c2:	4805      	ldr	r0, [pc, #20]	; (92d8 <snprintf+0x34>)
    92c4:	f7f9 fee4 	bl	3090 <z_cbvprintf_impl>
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
	va_end(vargs);

	*(p.ptr) = 0;
    92c8:	9b03      	ldr	r3, [sp, #12]
    92ca:	701c      	strb	r4, [r3, #0]
	return r;
}
    92cc:	b006      	add	sp, #24
    92ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    92d2:	b002      	add	sp, #8
    92d4:	4770      	bx	lr
    92d6:	bf00      	nop
    92d8:	00012e2b 	.word	0x00012e2b

000092dc <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    92dc:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    92e0:	4905      	ldr	r1, [pc, #20]	; (92f8 <__NVIC_SystemReset+0x1c>)
    92e2:	68ca      	ldr	r2, [r1, #12]
    92e4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    92e8:	4b04      	ldr	r3, [pc, #16]	; (92fc <__NVIC_SystemReset+0x20>)
    92ea:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    92ec:	60cb      	str	r3, [r1, #12]
    92ee:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    92f2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    92f4:	e7fd      	b.n	92f2 <__NVIC_SystemReset+0x16>
    92f6:	bf00      	nop
    92f8:	e000ed00 	.word	0xe000ed00
    92fc:	05fa0004 	.word	0x05fa0004

00009300 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    9300:	f04f 0320 	mov.w	r3, #32
    9304:	f3ef 8211 	mrs	r2, BASEPRI
    9308:	f383 8812 	msr	BASEPRI_MAX, r3
    930c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    9310:	2301      	movs	r3, #1
    9312:	4906      	ldr	r1, [pc, #24]	; (932c <nordicsemi_nrf52_init+0x2c>)
    9314:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    9318:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    931c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    9320:	f382 8811 	msr	BASEPRI, r2
    9324:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    9328:	2000      	movs	r0, #0
    932a:	4770      	bx	lr
    932c:	4001e000 	.word	0x4001e000

00009330 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    9330:	b130      	cbz	r0, 9340 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    9332:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    9334:	4b03      	ldr	r3, [pc, #12]	; (9344 <arch_busy_wait+0x14>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    9336:	0180      	lsls	r0, r0, #6
    9338:	f043 0301 	orr.w	r3, r3, #1
    933c:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    933e:	bd08      	pop	{r3, pc}
    9340:	4770      	bx	lr
    9342:	bf00      	nop
    9344:	00015530 	.word	0x00015530

00009348 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    9348:	4800      	ldr	r0, [pc, #0]	; (934c <get_hf_flags+0x4>)
    934a:	4770      	bx	lr
    934c:	200015e8 	.word	0x200015e8

00009350 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    9350:	4b03      	ldr	r3, [pc, #12]	; (9360 <get_subsys+0x10>)
    9352:	1ac0      	subs	r0, r0, r3
    9354:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    9356:	4b03      	ldr	r3, [pc, #12]	; (9364 <get_subsys+0x14>)
    9358:	fb03 f000 	mul.w	r0, r3, r0
    935c:	4770      	bx	lr
    935e:	bf00      	nop
    9360:	200015a8 	.word	0x200015a8
    9364:	b6db6db7 	.word	0xb6db6db7

00009368 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    9368:	b538      	push	{r3, r4, r5, lr}
    936a:	4605      	mov	r5, r0
    936c:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    936e:	f7ff ffef 	bl	9350 <get_subsys>
    9372:	4601      	mov	r1, r0
    9374:	2240      	movs	r2, #64	; 0x40
    9376:	4803      	ldr	r0, [pc, #12]	; (9384 <onoff_stop+0x1c>)
    9378:	f009 ffe4 	bl	13344 <stop>
    937c:	4601      	mov	r1, r0
	notify(mgr, res);
    937e:	4628      	mov	r0, r5
    9380:	47a0      	blx	r4
}
    9382:	bd38      	pop	{r3, r4, r5, pc}
    9384:	000150e8 	.word	0x000150e8

00009388 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    9388:	b530      	push	{r4, r5, lr}
    938a:	b083      	sub	sp, #12
    938c:	4605      	mov	r5, r0
    938e:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9390:	f7ff ffde 	bl	9350 <get_subsys>
    9394:	4601      	mov	r1, r0
    9396:	2340      	movs	r3, #64	; 0x40
    9398:	9300      	str	r3, [sp, #0]
    939a:	4623      	mov	r3, r4
    939c:	4a05      	ldr	r2, [pc, #20]	; (93b4 <onoff_start+0x2c>)
    939e:	4806      	ldr	r0, [pc, #24]	; (93b8 <onoff_start+0x30>)
    93a0:	f009 ffea 	bl	13378 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    93a4:	1e01      	subs	r1, r0, #0
    93a6:	db01      	blt.n	93ac <onoff_start+0x24>
		notify(mgr, err);
	}
}
    93a8:	b003      	add	sp, #12
    93aa:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    93ac:	4628      	mov	r0, r5
    93ae:	47a0      	blx	r4
}
    93b0:	e7fa      	b.n	93a8 <onoff_start+0x20>
    93b2:	bf00      	nop
    93b4:	000133c1 	.word	0x000133c1
    93b8:	000150e8 	.word	0x000150e8

000093bc <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    93bc:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    93be:	b110      	cbz	r0, 93c6 <clock_event_handler+0xa>
    93c0:	2801      	cmp	r0, #1
    93c2:	d00d      	beq.n	93e0 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    93c4:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    93c6:	2100      	movs	r1, #0
    93c8:	4808      	ldr	r0, [pc, #32]	; (93ec <clock_event_handler+0x30>)
    93ca:	f009 ff44 	bl	13256 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    93ce:	6883      	ldr	r3, [r0, #8]
    93d0:	f013 0f07 	tst.w	r3, #7
    93d4:	d1f6      	bne.n	93c4 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    93d6:	2100      	movs	r1, #0
    93d8:	4804      	ldr	r0, [pc, #16]	; (93ec <clock_event_handler+0x30>)
    93da:	f009 ffa1 	bl	13320 <clkstarted_handle>
    93de:	e7f1      	b.n	93c4 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    93e0:	2101      	movs	r1, #1
    93e2:	4802      	ldr	r0, [pc, #8]	; (93ec <clock_event_handler+0x30>)
    93e4:	f009 ff9c 	bl	13320 <clkstarted_handle>
}
    93e8:	e7ec      	b.n	93c4 <clock_event_handler+0x8>
    93ea:	bf00      	nop
    93ec:	000150e8 	.word	0x000150e8

000093f0 <hfclk_start>:
{
    93f0:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
    93f2:	f00b fbec 	bl	14bce <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
    93f6:	014a      	lsls	r2, r1, #5
    93f8:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    93fc:	0143      	lsls	r3, r0, #5
    93fe:	1a1b      	subs	r3, r3, r0
    9400:	eb62 0201 	sbc.w	r2, r2, r1
    9404:	0092      	lsls	r2, r2, #2
    9406:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    940a:	009b      	lsls	r3, r3, #2
    940c:	181b      	adds	r3, r3, r0
    940e:	eb42 0201 	adc.w	r2, r2, r1
    9412:	00d2      	lsls	r2, r2, #3
    9414:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    9418:	f3c3 3310 	ubfx	r3, r3, #12, #17
    941c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
    9420:	0bd2      	lsrs	r2, r2, #15
		hf_start_tstamp = k_uptime_get();
    9422:	4903      	ldr	r1, [pc, #12]	; (9430 <hfclk_start+0x40>)
    9424:	600b      	str	r3, [r1, #0]
    9426:	604a      	str	r2, [r1, #4]
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    9428:	2001      	movs	r0, #1
    942a:	f00a fdb9 	bl	13fa0 <nrfx_clock_start>
}
    942e:	bd08      	pop	{r3, pc}
    9430:	20000b50 	.word	0x20000b50

00009434 <generic_hfclk_start>:
{
    9434:	b510      	push	{r4, lr}
    9436:	b082      	sub	sp, #8
	__asm__ volatile(
    9438:	f04f 0320 	mov.w	r3, #32
    943c:	f3ef 8411 	mrs	r4, BASEPRI
    9440:	f383 8812 	msr	BASEPRI_MAX, r3
    9444:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    9448:	4a14      	ldr	r2, [pc, #80]	; (949c <generic_hfclk_start+0x68>)
    944a:	6813      	ldr	r3, [r2, #0]
    944c:	f043 0102 	orr.w	r1, r3, #2
    9450:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    9452:	f013 0f01 	tst.w	r3, #1
    9456:	d109      	bne.n	946c <generic_hfclk_start+0x38>
	bool already_started = false;
    9458:	2300      	movs	r3, #0
	__asm__ volatile(
    945a:	f384 8811 	msr	BASEPRI, r4
    945e:	f3bf 8f6f 	isb	sy
	if (already_started) {
    9462:	b9b3      	cbnz	r3, 9492 <generic_hfclk_start+0x5e>
	hfclk_start();
    9464:	f7ff ffc4 	bl	93f0 <hfclk_start>
}
    9468:	b002      	add	sp, #8
    946a:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    946c:	f10d 0207 	add.w	r2, sp, #7
    9470:	2101      	movs	r1, #1
    9472:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9476:	f009 fecb 	bl	13210 <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    947a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    947e:	2b01      	cmp	r3, #1
    9480:	d001      	beq.n	9486 <generic_hfclk_start+0x52>
	bool already_started = false;
    9482:	2300      	movs	r3, #0
    9484:	e7e9      	b.n	945a <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
    9486:	f7ff ff5f 	bl	9348 <get_hf_flags>
    948a:	f009 ff36 	bl	132fa <set_on_state>
			already_started = true;
    948e:	2301      	movs	r3, #1
    9490:	e7e3      	b.n	945a <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
    9492:	2100      	movs	r1, #0
    9494:	4802      	ldr	r0, [pc, #8]	; (94a0 <generic_hfclk_start+0x6c>)
    9496:	f009 ff43 	bl	13320 <clkstarted_handle>
		return;
    949a:	e7e5      	b.n	9468 <generic_hfclk_start+0x34>
    949c:	200015f8 	.word	0x200015f8
    94a0:	000150e8 	.word	0x000150e8

000094a4 <hfclk_stop>:
{
    94a4:	b508      	push	{r3, lr}
    94a6:	f00b fb92 	bl	14bce <z_impl_k_uptime_ticks>
    94aa:	014a      	lsls	r2, r1, #5
    94ac:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    94b0:	0143      	lsls	r3, r0, #5
    94b2:	1a1b      	subs	r3, r3, r0
    94b4:	eb62 0201 	sbc.w	r2, r2, r1
    94b8:	0092      	lsls	r2, r2, #2
    94ba:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    94be:	009b      	lsls	r3, r3, #2
    94c0:	181b      	adds	r3, r3, r0
    94c2:	eb42 0201 	adc.w	r2, r2, r1
    94c6:	00d2      	lsls	r2, r2, #3
    94c8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    94cc:	f3c3 3310 	ubfx	r3, r3, #12, #17
    94d0:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
    94d4:	0bd2      	lsrs	r2, r2, #15
		hf_stop_tstamp = k_uptime_get();
    94d6:	4903      	ldr	r1, [pc, #12]	; (94e4 <hfclk_stop+0x40>)
    94d8:	600b      	str	r3, [r1, #0]
    94da:	604a      	str	r2, [r1, #4]
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    94dc:	2001      	movs	r0, #1
    94de:	f00a fdb0 	bl	14042 <nrfx_clock_stop>
}
    94e2:	bd08      	pop	{r3, pc}
    94e4:	20000b48 	.word	0x20000b48

000094e8 <generic_hfclk_stop>:
{
    94e8:	b510      	push	{r4, lr}
	__asm__ volatile(
    94ea:	f04f 0320 	mov.w	r3, #32
    94ee:	f3ef 8411 	mrs	r4, BASEPRI
    94f2:	f383 8812 	msr	BASEPRI_MAX, r3
    94f6:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    94fa:	4a08      	ldr	r2, [pc, #32]	; (951c <generic_hfclk_stop+0x34>)
    94fc:	6813      	ldr	r3, [r2, #0]
    94fe:	f023 0102 	bic.w	r1, r3, #2
    9502:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    9504:	f013 0f01 	tst.w	r3, #1
    9508:	d004      	beq.n	9514 <generic_hfclk_stop+0x2c>
	__asm__ volatile(
    950a:	f384 8811 	msr	BASEPRI, r4
    950e:	f3bf 8f6f 	isb	sy
}
    9512:	bd10      	pop	{r4, pc}
		hfclk_stop();
    9514:	f7ff ffc6 	bl	94a4 <hfclk_stop>
    9518:	e7f7      	b.n	950a <generic_hfclk_stop+0x22>
    951a:	bf00      	nop
    951c:	200015f8 	.word	0x200015f8

00009520 <lfclk_spinwait>:
{
    9520:	b570      	push	{r4, r5, r6, lr}
    9522:	b082      	sub	sp, #8
    9524:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    9526:	2801      	cmp	r0, #1
    9528:	d107      	bne.n	953a <lfclk_spinwait+0x1a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    952a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    952e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    9532:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    9536:	2b01      	cmp	r3, #1
    9538:	d04c      	beq.n	95d4 <lfclk_spinwait+0xb4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    953a:	f00b f8cb 	bl	146d4 <k_is_in_isr>
    953e:	4604      	mov	r4, r0
    9540:	b918      	cbnz	r0, 954a <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    9542:	4b28      	ldr	r3, [pc, #160]	; (95e4 <lfclk_spinwait+0xc4>)
    9544:	781b      	ldrb	r3, [r3, #0]
    9546:	2b00      	cmp	r3, #0
    9548:	d139      	bne.n	95be <lfclk_spinwait+0x9e>
	__asm__ volatile(
    954a:	f04f 0320 	mov.w	r3, #32
    954e:	f3ef 8611 	mrs	r6, BASEPRI
    9552:	f383 8812 	msr	BASEPRI_MAX, r3
    9556:	f3bf 8f6f 	isb	sy
    955a:	2401      	movs	r4, #1
	if (!isr_mode) {
    955c:	b924      	cbnz	r4, 9568 <lfclk_spinwait+0x48>
    p_reg->INTENCLR = mask;
    955e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9562:	2202      	movs	r2, #2
    9564:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    9568:	aa01      	add	r2, sp, #4
    956a:	2100      	movs	r1, #0
    956c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9570:	f009 fe4e 	bl	13210 <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    9574:	b120      	cbz	r0, 9580 <lfclk_spinwait+0x60>
		 && ((type == target_type)
    9576:	9b01      	ldr	r3, [sp, #4]
	while (!(nrfx_clock_is_running(d, (void *)&type)
    9578:	2b01      	cmp	r3, #1
    957a:	d026      	beq.n	95ca <lfclk_spinwait+0xaa>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    957c:	2d01      	cmp	r5, #1
    957e:	d024      	beq.n	95ca <lfclk_spinwait+0xaa>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    9580:	b1fc      	cbz	r4, 95c2 <lfclk_spinwait+0xa2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    9582:	4630      	mov	r0, r6
    9584:	f7fe fb10 	bl	7ba8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    9588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    958c:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    9590:	2b00      	cmp	r3, #0
    9592:	d1e9      	bne.n	9568 <lfclk_spinwait+0x48>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    9594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9598:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    959c:	2b00      	cmp	r3, #0
    959e:	d0e3      	beq.n	9568 <lfclk_spinwait+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    95a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    95a4:	2200      	movs	r2, #0
    95a6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    95aa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    95ae:	2201      	movs	r2, #1
    95b0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    95b4:	490c      	ldr	r1, [pc, #48]	; (95e8 <lfclk_spinwait+0xc8>)
    95b6:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    95ba:	609a      	str	r2, [r3, #8]
}
    95bc:	e7d4      	b.n	9568 <lfclk_spinwait+0x48>
	int key = isr_mode ? irq_lock() : 0;
    95be:	2600      	movs	r6, #0
    95c0:	e7cc      	b.n	955c <lfclk_spinwait+0x3c>
				k_msleep(1);
    95c2:	2001      	movs	r0, #1
    95c4:	f009 ff09 	bl	133da <k_msleep>
    95c8:	e7de      	b.n	9588 <lfclk_spinwait+0x68>
	if (isr_mode) {
    95ca:	b12c      	cbz	r4, 95d8 <lfclk_spinwait+0xb8>
	__asm__ volatile(
    95cc:	f386 8811 	msr	BASEPRI, r6
    95d0:	f3bf 8f6f 	isb	sy
}
    95d4:	b002      	add	sp, #8
    95d6:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    95d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    95dc:	2202      	movs	r2, #2
    95de:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    95e2:	e7f7      	b.n	95d4 <lfclk_spinwait+0xb4>
    95e4:	20003cbe 	.word	0x20003cbe
    95e8:	e000e100 	.word	0xe000e100

000095ec <api_blocking_start>:
{
    95ec:	b500      	push	{lr}
    95ee:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    95f0:	f8cd d000 	str.w	sp, [sp]
    95f4:	f8cd d004 	str.w	sp, [sp, #4]
    95f8:	2300      	movs	r3, #0
    95fa:	9302      	str	r3, [sp, #8]
    95fc:	2301      	movs	r3, #1
    95fe:	9303      	str	r3, [sp, #12]
    9600:	ab04      	add	r3, sp, #16
    9602:	9304      	str	r3, [sp, #16]
    9604:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    9606:	466b      	mov	r3, sp
    9608:	4a06      	ldr	r2, [pc, #24]	; (9624 <api_blocking_start+0x38>)
    960a:	f009 fed1 	bl	133b0 <api_start>
	if (err < 0) {
    960e:	2800      	cmp	r0, #0
    9610:	db05      	blt.n	961e <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
    9612:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    9616:	2300      	movs	r3, #0
    9618:	4668      	mov	r0, sp
    961a:	f004 f92f 	bl	d87c <z_impl_k_sem_take>
}
    961e:	b007      	add	sp, #28
    9620:	f85d fb04 	ldr.w	pc, [sp], #4
    9624:	00013407 	.word	0x00013407

00009628 <anomaly_132_workaround>:
{
    9628:	b508      	push	{r3, lr}
	if (!once) {
    962a:	4b06      	ldr	r3, [pc, #24]	; (9644 <anomaly_132_workaround+0x1c>)
    962c:	781b      	ldrb	r3, [r3, #0]
    962e:	b103      	cbz	r3, 9632 <anomaly_132_workaround+0xa>
}
    9630:	bd08      	pop	{r3, pc}
	z_impl_k_busy_wait(usec_to_wait);
    9632:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    9636:	f00b face 	bl	14bd6 <z_impl_k_busy_wait>
		once = true;
    963a:	4b02      	ldr	r3, [pc, #8]	; (9644 <anomaly_132_workaround+0x1c>)
    963c:	2201      	movs	r2, #1
    963e:	701a      	strb	r2, [r3, #0]
}
    9640:	e7f6      	b.n	9630 <anomaly_132_workaround+0x8>
    9642:	bf00      	nop
    9644:	20003cb8 	.word	0x20003cb8

00009648 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    9648:	b570      	push	{r4, r5, r6, lr}
    964a:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    964c:	2200      	movs	r2, #0
    964e:	2101      	movs	r1, #1
    9650:	4610      	mov	r0, r2
    9652:	f009 f971 	bl	12938 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    9656:	4811      	ldr	r0, [pc, #68]	; (969c <clk_init+0x54>)
    9658:	f002 fd9a 	bl	c190 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    965c:	4b10      	ldr	r3, [pc, #64]	; (96a0 <clk_init+0x58>)
    965e:	4298      	cmp	r0, r3
    9660:	d119      	bne.n	9696 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    9662:	f00a fc93 	bl	13f8c <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    9666:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    9668:	2c01      	cmp	r4, #1
    966a:	d812      	bhi.n	9692 <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    966c:	4621      	mov	r1, r4
    966e:	4630      	mov	r0, r6
    9670:	f009 fdf1 	bl	13256 <get_sub_data>
    9674:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    9676:	4621      	mov	r1, r4
    9678:	4630      	mov	r0, r6
    967a:	f009 fdf9 	bl	13270 <get_onoff_manager>
    967e:	4909      	ldr	r1, [pc, #36]	; (96a4 <clk_init+0x5c>)
    9680:	f005 fd46 	bl	f110 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    9684:	2800      	cmp	r0, #0
    9686:	db05      	blt.n	9694 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    9688:	2301      	movs	r3, #1
    968a:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    968c:	441c      	add	r4, r3
    968e:	b2e4      	uxtb	r4, r4
    9690:	e7ea      	b.n	9668 <clk_init+0x20>
	}

	return 0;
    9692:	2000      	movs	r0, #0
}
    9694:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    9696:	f06f 0004 	mvn.w	r0, #4
    969a:	e7fb      	b.n	9694 <clk_init+0x4c>
    969c:	000093bd 	.word	0x000093bd
    96a0:	0bad0000 	.word	0x0bad0000
    96a4:	00017e84 	.word	0x00017e84

000096a8 <cmd_status>:
		 &data, &config,
		 PRE_KERNEL_1, CONFIG_CLOCK_CONTROL_INIT_PRIORITY,
		 &clock_control_api);

static int cmd_status(const struct shell *sh, size_t argc, char **argv)
{
    96a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    96ac:	b087      	sub	sp, #28
    96ae:	4605      	mov	r5, r0
    96b0:	2200      	movs	r2, #0
    96b2:	4611      	mov	r1, r2
    96b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    96b8:	f009 fdaa 	bl	13210 <nrf_clock_is_running>
    96bc:	4606      	mov	r6, r0
	nrf_clock_hfclk_t hfclk_src;
	bool hf_status;
	bool lf_status = nrfx_clock_is_running(NRF_CLOCK_DOMAIN_LFCLK, NULL);
	struct onoff_manager *hf_mgr =
				get_onoff_manager(CLOCK_DEVICE,
    96be:	4c3b      	ldr	r4, [pc, #236]	; (97ac <cmd_status+0x104>)
    96c0:	2100      	movs	r1, #0
    96c2:	4620      	mov	r0, r4
    96c4:	f009 fdd4 	bl	13270 <get_onoff_manager>
    96c8:	4607      	mov	r7, r0
						  CLOCK_CONTROL_NRF_TYPE_HFCLK);
	struct onoff_manager *lf_mgr =
				get_onoff_manager(CLOCK_DEVICE,
    96ca:	2101      	movs	r1, #1
    96cc:	4620      	mov	r0, r4
    96ce:	f009 fdcf 	bl	13270 <get_onoff_manager>
    96d2:	9003      	str	r0, [sp, #12]
	__asm__ volatile(
    96d4:	f04f 0320 	mov.w	r3, #32
    96d8:	f3ef 8b11 	mrs	fp, BASEPRI
    96dc:	f383 8812 	msr	BASEPRI_MAX, r3
    96e0:	f3bf 8f6f 	isb	sy
	return z_impl_k_uptime_ticks();
    96e4:	f00b fa73 	bl	14bce <z_impl_k_uptime_ticks>
    96e8:	014b      	lsls	r3, r1, #5
    96ea:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    96ee:	0144      	lsls	r4, r0, #5
    96f0:	1a24      	subs	r4, r4, r0
    96f2:	eb63 0301 	sbc.w	r3, r3, r1
    96f6:	009b      	lsls	r3, r3, #2
    96f8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
    96fc:	00a4      	lsls	r4, r4, #2
    96fe:	1824      	adds	r4, r4, r0
    9700:	eb43 0101 	adc.w	r1, r3, r1
    9704:	00c9      	lsls	r1, r1, #3
    9706:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
    970a:	f3c4 3410 	ubfx	r4, r4, #12, #17
    970e:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
    9712:	f10d 0217 	add.w	r2, sp, #23
    9716:	2101      	movs	r1, #1
    9718:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    971c:	f009 fd78 	bl	13210 <nrf_clock_is_running>
	uint32_t abs_start, abs_stop;
	unsigned int key = irq_lock();
	uint64_t now = k_uptime_get();

	(void)nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, (void *)&hfclk_src);
	hf_status = (hfclk_src == NRF_CLOCK_HFCLK_HIGH_ACCURACY);
    9720:	f89d a017 	ldrb.w	sl, [sp, #23]

	abs_start = hf_start_tstamp;
    9724:	4b22      	ldr	r3, [pc, #136]	; (97b0 <cmd_status+0x108>)
    9726:	f8d3 9000 	ldr.w	r9, [r3]
	abs_stop = hf_stop_tstamp;
    972a:	4b22      	ldr	r3, [pc, #136]	; (97b4 <cmd_status+0x10c>)
    972c:	f8d3 8000 	ldr.w	r8, [r3]
	__asm__ volatile(
    9730:	f38b 8811 	msr	BASEPRI, fp
    9734:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	shell_print(sh, "HF clock:");
    9738:	4a1f      	ldr	r2, [pc, #124]	; (97b8 <cmd_status+0x110>)
    973a:	2108      	movs	r1, #8
    973c:	4628      	mov	r0, r5
    973e:	f007 ff75 	bl	1162c <shell_fprintf>
	shell_print(sh, "\t- %srunning (users: %u)",
    9742:	f1ba 0f01 	cmp.w	sl, #1
    9746:	d02c      	beq.n	97a2 <cmd_status+0xfa>
    9748:	4b1c      	ldr	r3, [pc, #112]	; (97bc <cmd_status+0x114>)
    974a:	8b7a      	ldrh	r2, [r7, #26]
    974c:	9200      	str	r2, [sp, #0]
    974e:	4a1c      	ldr	r2, [pc, #112]	; (97c0 <cmd_status+0x118>)
    9750:	2108      	movs	r1, #8
    9752:	4628      	mov	r0, r5
    9754:	f007 ff6a 	bl	1162c <shell_fprintf>
			hf_status ? "" : "not ", hf_mgr->refs);
	shell_print(sh, "\t- last start: %u ms (%u ms ago)",
    9758:	eba4 0309 	sub.w	r3, r4, r9
    975c:	9300      	str	r3, [sp, #0]
    975e:	464b      	mov	r3, r9
    9760:	4a18      	ldr	r2, [pc, #96]	; (97c4 <cmd_status+0x11c>)
    9762:	2108      	movs	r1, #8
    9764:	4628      	mov	r0, r5
    9766:	f007 ff61 	bl	1162c <shell_fprintf>
			(uint32_t)abs_start, (uint32_t)(now - abs_start));
	shell_print(sh, "\t- last stop: %u ms (%u ms ago)",
    976a:	eba4 0408 	sub.w	r4, r4, r8
    976e:	9400      	str	r4, [sp, #0]
    9770:	4643      	mov	r3, r8
    9772:	4a15      	ldr	r2, [pc, #84]	; (97c8 <cmd_status+0x120>)
    9774:	2108      	movs	r1, #8
    9776:	4628      	mov	r0, r5
    9778:	f007 ff58 	bl	1162c <shell_fprintf>
			(uint32_t)abs_stop, (uint32_t)(now - abs_stop));
	shell_print(sh, "LF clock:");
    977c:	4a13      	ldr	r2, [pc, #76]	; (97cc <cmd_status+0x124>)
    977e:	2108      	movs	r1, #8
    9780:	4628      	mov	r0, r5
    9782:	f007 ff53 	bl	1162c <shell_fprintf>
	shell_print(sh, "\t- %srunning (users: %u)",
    9786:	b176      	cbz	r6, 97a6 <cmd_status+0xfe>
    9788:	4b11      	ldr	r3, [pc, #68]	; (97d0 <cmd_status+0x128>)
    978a:	9a03      	ldr	r2, [sp, #12]
    978c:	8b52      	ldrh	r2, [r2, #26]
    978e:	9200      	str	r2, [sp, #0]
    9790:	4a0b      	ldr	r2, [pc, #44]	; (97c0 <cmd_status+0x118>)
    9792:	2108      	movs	r1, #8
    9794:	4628      	mov	r0, r5
    9796:	f007 ff49 	bl	1162c <shell_fprintf>
			lf_status ? "" : "not ", lf_mgr->refs);

	return 0;
}
    979a:	2000      	movs	r0, #0
    979c:	b007      	add	sp, #28
    979e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	shell_print(sh, "\t- %srunning (users: %u)",
    97a2:	4b0b      	ldr	r3, [pc, #44]	; (97d0 <cmd_status+0x128>)
    97a4:	e7d1      	b.n	974a <cmd_status+0xa2>
	shell_print(sh, "\t- %srunning (users: %u)",
    97a6:	4b05      	ldr	r3, [pc, #20]	; (97bc <cmd_status+0x114>)
    97a8:	e7ef      	b.n	978a <cmd_status+0xe2>
    97aa:	bf00      	nop
    97ac:	000150e8 	.word	0x000150e8
    97b0:	20000b50 	.word	0x20000b50
    97b4:	20000b48 	.word	0x20000b48
    97b8:	00017e08 	.word	0x00017e08
    97bc:	00017e00 	.word	0x00017e00
    97c0:	00017e14 	.word	0x00017e14
    97c4:	00017e30 	.word	0x00017e30
    97c8:	00017e54 	.word	0x00017e54
    97cc:	00017e78 	.word	0x00017e78
    97d0:	000165a8 	.word	0x000165a8

000097d4 <z_nrf_clock_control_lf_on>:
{
    97d4:	b510      	push	{r4, lr}
    97d6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    97d8:	4b10      	ldr	r3, [pc, #64]	; (981c <z_nrf_clock_control_lf_on+0x48>)
    97da:	2101      	movs	r1, #1
    97dc:	f3bf 8f5b 	dmb	ish
    97e0:	e853 2f00 	ldrex	r2, [r3]
    97e4:	e843 1000 	strex	r0, r1, [r3]
    97e8:	2800      	cmp	r0, #0
    97ea:	d1f9      	bne.n	97e0 <z_nrf_clock_control_lf_on+0xc>
    97ec:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    97f0:	b11a      	cbz	r2, 97fa <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    97f2:	1e63      	subs	r3, r4, #1
    97f4:	2b01      	cmp	r3, #1
    97f6:	d90d      	bls.n	9814 <z_nrf_clock_control_lf_on+0x40>
}
    97f8:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    97fa:	4809      	ldr	r0, [pc, #36]	; (9820 <z_nrf_clock_control_lf_on+0x4c>)
    97fc:	f009 fd38 	bl	13270 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    9800:	4908      	ldr	r1, [pc, #32]	; (9824 <z_nrf_clock_control_lf_on+0x50>)
    9802:	2300      	movs	r3, #0
    9804:	604b      	str	r3, [r1, #4]
    9806:	608b      	str	r3, [r1, #8]
    9808:	60cb      	str	r3, [r1, #12]
    980a:	2301      	movs	r3, #1
    980c:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    980e:	f005 fc9c 	bl	f14a <onoff_request>
    9812:	e7ee      	b.n	97f2 <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    9814:	4620      	mov	r0, r4
    9816:	f7ff fe83 	bl	9520 <lfclk_spinwait>
		break;
    981a:	e7ed      	b.n	97f8 <z_nrf_clock_control_lf_on+0x24>
    981c:	200015a4 	.word	0x200015a4
    9820:	000150e8 	.word	0x000150e8
    9824:	20001594 	.word	0x20001594

00009828 <rtt_console_init>:

	return character;
}

static int rtt_console_init(void)
{
    9828:	b510      	push	{r4, lr}

#ifdef CONFIG_PRINTK
	__printk_hook_install(rtt_console_out);
    982a:	4c04      	ldr	r4, [pc, #16]	; (983c <rtt_console_init+0x14>)
    982c:	4620      	mov	r0, r4
    982e:	f7f9 f8c7 	bl	29c0 <__printk_hook_install>
#endif
	__stdout_hook_install(rtt_console_out);
    9832:	4620      	mov	r0, r4
    9834:	f7ff fd30 	bl	9298 <__stdout_hook_install>

	return 0;
}
    9838:	2000      	movs	r0, #0
    983a:	bd10      	pop	{r4, pc}
    983c:	00009841 	.word	0x00009841

00009840 <rtt_console_out>:
{
    9840:	b570      	push	{r4, r5, r6, lr}
    9842:	b082      	sub	sp, #8
    9844:	4606      	mov	r6, r0
	char c = (char)character;
    9846:	f88d 0007 	strb.w	r0, [sp, #7]
	int max_cnt = CONFIG_RTT_TX_RETRY_CNT;
    984a:	2502      	movs	r5, #2
		SEGGER_RTT_LOCK();
    984c:	f003 fab4 	bl	cdb8 <zephyr_rtt_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    9850:	2201      	movs	r2, #1
    9852:	f10d 0107 	add.w	r1, sp, #7
    9856:	2000      	movs	r0, #0
    9858:	f003 fa68 	bl	cd2c <SEGGER_RTT_WriteNoLock>
    985c:	4604      	mov	r4, r0
		SEGGER_RTT_UNLOCK();
    985e:	f003 fab7 	bl	cdd0 <zephyr_rtt_mutex_unlock>
		if (cnt) {
    9862:	b93c      	cbnz	r4, 9874 <rtt_console_out+0x34>
		} else if (host_present) {
    9864:	4b08      	ldr	r3, [pc, #32]	; (9888 <rtt_console_out+0x48>)
    9866:	781b      	ldrb	r3, [r3, #0]
    9868:	b15b      	cbz	r3, 9882 <rtt_console_out+0x42>
			if (max_cnt) {
    986a:	b13d      	cbz	r5, 987c <rtt_console_out+0x3c>
				wait();
    986c:	f009 fded 	bl	1344a <wait>
				max_cnt--;
    9870:	3d01      	subs	r5, #1
		SEGGER_RTT_LOCK();
    9872:	e7eb      	b.n	984c <rtt_console_out+0xc>
			host_present = true;
    9874:	4b04      	ldr	r3, [pc, #16]	; (9888 <rtt_console_out+0x48>)
    9876:	2201      	movs	r2, #1
    9878:	701a      	strb	r2, [r3, #0]
    987a:	e002      	b.n	9882 <rtt_console_out+0x42>
				host_present = false;
    987c:	4b02      	ldr	r3, [pc, #8]	; (9888 <rtt_console_out+0x48>)
    987e:	2200      	movs	r2, #0
    9880:	701a      	strb	r2, [r3, #0]
}
    9882:	4630      	mov	r0, r6
    9884:	b002      	add	sp, #8
    9886:	bd70      	pop	{r4, r5, r6, pc}
    9888:	20003cb9 	.word	0x20003cb9

0000988c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    988c:	b510      	push	{r4, lr}
    988e:	4604      	mov	r4, r0
			 */
			return c;
		}
	}

	if ('\n' == c) {
    9890:	280a      	cmp	r0, #10
    9892:	d006      	beq.n	98a2 <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    9894:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    9896:	4806      	ldr	r0, [pc, #24]	; (98b0 <console_out+0x24>)
    9898:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    989a:	685b      	ldr	r3, [r3, #4]
    989c:	4798      	blx	r3
		/* As errors cannot be returned, ignore the return value */
		(void)pm_device_runtime_put(uart_console_dev);
	}

	return c;
}
    989e:	4620      	mov	r0, r4
    98a0:	bd10      	pop	{r4, pc}
	const struct uart_driver_api *api =
    98a2:	4803      	ldr	r0, [pc, #12]	; (98b0 <console_out+0x24>)
    98a4:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    98a6:	685b      	ldr	r3, [r3, #4]
    98a8:	210d      	movs	r1, #13
    98aa:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    98ac:	e7f2      	b.n	9894 <console_out+0x8>
    98ae:	bf00      	nop
    98b0:	00015120 	.word	0x00015120

000098b4 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    98b4:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    98b6:	4c04      	ldr	r4, [pc, #16]	; (98c8 <uart_console_hook_install+0x14>)
    98b8:	4620      	mov	r0, r4
    98ba:	f7ff fced 	bl	9298 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    98be:	4620      	mov	r0, r4
    98c0:	f7f9 f87e 	bl	29c0 <__printk_hook_install>
#endif
}
    98c4:	bd10      	pop	{r4, pc}
    98c6:	bf00      	nop
    98c8:	0000988d 	.word	0x0000988d

000098cc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    98cc:	b508      	push	{r3, lr}
    98ce:	4805      	ldr	r0, [pc, #20]	; (98e4 <uart_console_init+0x18>)
    98d0:	f00a feae 	bl	14630 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    98d4:	b118      	cbz	r0, 98de <uart_console_init+0x12>
		return -ENODEV;
	}

	uart_console_hook_install();
    98d6:	f7ff ffed 	bl	98b4 <uart_console_hook_install>

	return 0;
    98da:	2000      	movs	r0, #0
}
    98dc:	bd08      	pop	{r3, pc}
		return -ENODEV;
    98de:	f06f 0012 	mvn.w	r0, #18
    98e2:	e7fb      	b.n	98dc <uart_console_init+0x10>
    98e4:	00015120 	.word	0x00015120

000098e8 <nvmc_wait_ready>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    98e8:	4b03      	ldr	r3, [pc, #12]	; (98f8 <nvmc_wait_ready+0x10>)
    98ea:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
#endif /* CONFIG_SOC_FLASH_NRF_UICR */
}

static void nvmc_wait_ready(void)
{
	while (!nrfx_nvmc_write_done_check()) {
    98ee:	f013 0f01 	tst.w	r3, #1
    98f2:	d0f9      	beq.n	98e8 <nvmc_wait_ready>
	}
}
    98f4:	4770      	bx	lr
    98f6:	bf00      	nop
    98f8:	4001e000 	.word	0x4001e000

000098fc <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    98fc:	4b02      	ldr	r3, [pc, #8]	; (9908 <flash_nrf_pages_layout+0xc>)
    98fe:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    9900:	2301      	movs	r3, #1
    9902:	6013      	str	r3, [r2, #0]
}
    9904:	4770      	bx	lr
    9906:	bf00      	nop
    9908:	200015fc 	.word	0x200015fc

0000990c <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    990c:	4800      	ldr	r0, [pc, #0]	; (9910 <flash_nrf_get_parameters+0x4>)
    990e:	4770      	bx	lr
    9910:	00017ff4 	.word	0x00017ff4

00009914 <flash_nrf_erase>:
{
    9914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9918:	b082      	sub	sp, #8
    991a:	af00      	add	r7, sp, #0
    991c:	460e      	mov	r6, r1
    991e:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    9920:	f00a fcd5 	bl	142ce <nrfx_nvmc_flash_page_size_get>
    9924:	4604      	mov	r4, r0
	if (is_regular_addr_valid(addr, size)) {
    9926:	4629      	mov	r1, r5
    9928:	4630      	mov	r0, r6
    992a:	f009 fda1 	bl	13470 <is_regular_addr_valid>
    992e:	2800      	cmp	r0, #0
    9930:	d067      	beq.n	9a02 <flash_nrf_erase+0xee>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    9932:	fbb6 f3f4 	udiv	r3, r6, r4
    9936:	fb04 6313 	mls	r3, r4, r3, r6
    993a:	b963      	cbnz	r3, 9956 <flash_nrf_erase+0x42>
    993c:	fbb5 f3f4 	udiv	r3, r5, r4
    9940:	fb04 5313 	mls	r3, r4, r3, r5
    9944:	b93b      	cbnz	r3, 9956 <flash_nrf_erase+0x42>
		if (!n_pages) {
    9946:	42ac      	cmp	r4, r5
    9948:	d949      	bls.n	99de <flash_nrf_erase+0xca>
			return 0;
    994a:	2400      	movs	r4, #0
}
    994c:	4620      	mov	r0, r4
    994e:	3708      	adds	r7, #8
    9950:	46bd      	mov	sp, r7
    9952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    9956:	4b4e      	ldr	r3, [pc, #312]	; (9a90 <flash_nrf_erase+0x17c>)
    9958:	681b      	ldr	r3, [r3, #0]
    995a:	f013 0f07 	tst.w	r3, #7
    995e:	d035      	beq.n	99cc <flash_nrf_erase+0xb8>
    9960:	46e8      	mov	r8, sp
    9962:	b088      	sub	sp, #32
    9964:	466b      	mov	r3, sp
    9966:	f113 0210 	adds.w	r2, r3, #16
    996a:	d032      	beq.n	99d2 <flash_nrf_erase+0xbe>
    996c:	2110      	movs	r1, #16
    996e:	b152      	cbz	r2, 9986 <flash_nrf_erase+0x72>
    9970:	4608      	mov	r0, r1
    9972:	2904      	cmp	r1, #4
    9974:	dd01      	ble.n	997a <flash_nrf_erase+0x66>
    9976:	4c47      	ldr	r4, [pc, #284]	; (9a94 <flash_nrf_erase+0x180>)
    9978:	615c      	str	r4, [r3, #20]
    997a:	2808      	cmp	r0, #8
    997c:	dd00      	ble.n	9980 <flash_nrf_erase+0x6c>
    997e:	619e      	str	r6, [r3, #24]
    9980:	280c      	cmp	r0, #12
    9982:	dd00      	ble.n	9986 <flash_nrf_erase+0x72>
    9984:	61dd      	str	r5, [r3, #28]
    9986:	290f      	cmp	r1, #15
    9988:	dd26      	ble.n	99d8 <flash_nrf_erase+0xc4>
    998a:	2410      	movs	r4, #16
    998c:	b13a      	cbz	r2, 999e <flash_nrf_erase+0x8a>
    998e:	2104      	movs	r1, #4
    9990:	7139      	strb	r1, [r7, #4]
    9992:	2100      	movs	r1, #0
    9994:	7179      	strb	r1, [r7, #5]
    9996:	71b9      	strb	r1, [r7, #6]
    9998:	71f9      	strb	r1, [r7, #7]
    999a:	6878      	ldr	r0, [r7, #4]
    999c:	6118      	str	r0, [r3, #16]
    999e:	2100      	movs	r1, #0
    99a0:	f36f 0100 	bfc	r1, #0, #1
    99a4:	f36f 0141 	bfc	r1, #1, #1
    99a8:	f36f 0182 	bfc	r1, #2, #1
    99ac:	f36f 01c5 	bfc	r1, #3, #3
    99b0:	2301      	movs	r3, #1
    99b2:	f363 1188 	bfi	r1, r3, #6, #3
    99b6:	f3c4 040a 	ubfx	r4, r4, #0, #11
    99ba:	f364 2153 	bfi	r1, r4, #9, #11
    99be:	f36f 511f 	bfc	r1, #20, #12
    99c2:	2300      	movs	r3, #0
    99c4:	4832      	ldr	r0, [pc, #200]	; (9a90 <flash_nrf_erase+0x17c>)
    99c6:	f7fa ffa9 	bl	491c <z_impl_z_log_msg_static_create>
    99ca:	46c5      	mov	sp, r8
			return -EINVAL;
    99cc:	f06f 0415 	mvn.w	r4, #21
    99d0:	e7bc      	b.n	994c <flash_nrf_erase+0x38>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    99d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    99d6:	e7ca      	b.n	996e <flash_nrf_erase+0x5a>
    99d8:	f06f 041b 	mvn.w	r4, #27
    99dc:	e7d6      	b.n	998c <flash_nrf_erase+0x78>
	return z_impl_k_sem_take(sem, timeout);
    99de:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 9a98 <flash_nrf_erase+0x184>
    99e2:	f04f 32ff 	mov.w	r2, #4294967295
    99e6:	f04f 33ff 	mov.w	r3, #4294967295
    99ea:	4640      	mov	r0, r8
    99ec:	f003 ff46 	bl	d87c <z_impl_k_sem_take>
		ret = erase(addr, size);
    99f0:	4629      	mov	r1, r5
    99f2:	4630      	mov	r0, r6
    99f4:	f009 fd62 	bl	134bc <erase>
    99f8:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
    99fa:	4640      	mov	r0, r8
    99fc:	f003 ff16 	bl	d82c <z_impl_k_sem_give>
	return ret;
    9a00:	e7a4      	b.n	994c <flash_nrf_erase+0x38>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    9a02:	4b23      	ldr	r3, [pc, #140]	; (9a90 <flash_nrf_erase+0x17c>)
    9a04:	681b      	ldr	r3, [r3, #0]
    9a06:	f013 0f07 	tst.w	r3, #7
    9a0a:	d037      	beq.n	9a7c <flash_nrf_erase+0x168>
    9a0c:	466c      	mov	r4, sp
    9a0e:	b088      	sub	sp, #32
    9a10:	466b      	mov	r3, sp
    9a12:	f113 0210 	adds.w	r2, r3, #16
    9a16:	d034      	beq.n	9a82 <flash_nrf_erase+0x16e>
    9a18:	2110      	movs	r1, #16
    9a1a:	b162      	cbz	r2, 9a36 <flash_nrf_erase+0x122>
    9a1c:	4608      	mov	r0, r1
    9a1e:	2904      	cmp	r1, #4
    9a20:	dd03      	ble.n	9a2a <flash_nrf_erase+0x116>
    9a22:	f8df c078 	ldr.w	ip, [pc, #120]	; 9a9c <flash_nrf_erase+0x188>
    9a26:	f8c3 c014 	str.w	ip, [r3, #20]
    9a2a:	2808      	cmp	r0, #8
    9a2c:	dd00      	ble.n	9a30 <flash_nrf_erase+0x11c>
    9a2e:	619e      	str	r6, [r3, #24]
    9a30:	280c      	cmp	r0, #12
    9a32:	dd00      	ble.n	9a36 <flash_nrf_erase+0x122>
    9a34:	61dd      	str	r5, [r3, #28]
    9a36:	290f      	cmp	r1, #15
    9a38:	dd26      	ble.n	9a88 <flash_nrf_erase+0x174>
    9a3a:	2510      	movs	r5, #16
    9a3c:	b13a      	cbz	r2, 9a4e <flash_nrf_erase+0x13a>
    9a3e:	2104      	movs	r1, #4
    9a40:	7139      	strb	r1, [r7, #4]
    9a42:	2100      	movs	r1, #0
    9a44:	7179      	strb	r1, [r7, #5]
    9a46:	71b9      	strb	r1, [r7, #6]
    9a48:	71f9      	strb	r1, [r7, #7]
    9a4a:	6878      	ldr	r0, [r7, #4]
    9a4c:	6118      	str	r0, [r3, #16]
    9a4e:	2100      	movs	r1, #0
    9a50:	f36f 0100 	bfc	r1, #0, #1
    9a54:	f36f 0141 	bfc	r1, #1, #1
    9a58:	f36f 0182 	bfc	r1, #2, #1
    9a5c:	f36f 01c5 	bfc	r1, #3, #3
    9a60:	2301      	movs	r3, #1
    9a62:	f363 1188 	bfi	r1, r3, #6, #3
    9a66:	f3c5 030a 	ubfx	r3, r5, #0, #11
    9a6a:	f363 2153 	bfi	r1, r3, #9, #11
    9a6e:	f36f 511f 	bfc	r1, #20, #12
    9a72:	2300      	movs	r3, #0
    9a74:	4806      	ldr	r0, [pc, #24]	; (9a90 <flash_nrf_erase+0x17c>)
    9a76:	f7fa ff51 	bl	491c <z_impl_z_log_msg_static_create>
    9a7a:	46a5      	mov	sp, r4
		return -EINVAL;
    9a7c:	f06f 0415 	mvn.w	r4, #21
    9a80:	e764      	b.n	994c <flash_nrf_erase+0x38>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    9a82:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    9a86:	e7c8      	b.n	9a1a <flash_nrf_erase+0x106>
    9a88:	f06f 051b 	mvn.w	r5, #27
    9a8c:	e7d6      	b.n	9a3c <flash_nrf_erase+0x128>
    9a8e:	bf00      	nop
    9a90:	200002dc 	.word	0x200002dc
    9a94:	00017f58 	.word	0x00017f58
    9a98:	20001604 	.word	0x20001604
    9a9c:	00017f78 	.word	0x00017f78

00009aa0 <flash_nrf_write>:
{
    9aa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9aa4:	b083      	sub	sp, #12
    9aa6:	af00      	add	r7, sp, #0
    9aa8:	460c      	mov	r4, r1
    9aaa:	4616      	mov	r6, r2
    9aac:	461d      	mov	r5, r3
	if (is_regular_addr_valid(addr, len)) {
    9aae:	4619      	mov	r1, r3
    9ab0:	4620      	mov	r0, r4
    9ab2:	f009 fcdd 	bl	13470 <is_regular_addr_valid>
    9ab6:	b168      	cbz	r0, 9ad4 <flash_nrf_write+0x34>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    9ab8:	f014 0803 	ands.w	r8, r4, #3
    9abc:	d150      	bne.n	9b60 <flash_nrf_write+0xc0>
    9abe:	f015 0f03 	tst.w	r5, #3
    9ac2:	d14d      	bne.n	9b60 <flash_nrf_write+0xc0>
	if (!len) {
    9ac4:	2d00      	cmp	r5, #0
    9ac6:	f040 8091 	bne.w	9bec <flash_nrf_write+0x14c>
}
    9aca:	4640      	mov	r0, r8
    9acc:	370c      	adds	r7, #12
    9ace:	46bd      	mov	sp, r7
    9ad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("invalid address: 0x%08lx:%zu",
    9ad4:	4b4f      	ldr	r3, [pc, #316]	; (9c14 <flash_nrf_write+0x174>)
    9ad6:	681b      	ldr	r3, [r3, #0]
    9ad8:	f013 0f07 	tst.w	r3, #7
    9adc:	d037      	beq.n	9b4e <flash_nrf_write+0xae>
    9ade:	466e      	mov	r6, sp
    9ae0:	b088      	sub	sp, #32
    9ae2:	466b      	mov	r3, sp
    9ae4:	f113 0210 	adds.w	r2, r3, #16
    9ae8:	d034      	beq.n	9b54 <flash_nrf_write+0xb4>
    9aea:	2110      	movs	r1, #16
    9aec:	b162      	cbz	r2, 9b08 <flash_nrf_write+0x68>
    9aee:	4608      	mov	r0, r1
    9af0:	2904      	cmp	r1, #4
    9af2:	dd03      	ble.n	9afc <flash_nrf_write+0x5c>
    9af4:	f8df c120 	ldr.w	ip, [pc, #288]	; 9c18 <flash_nrf_write+0x178>
    9af8:	f8c3 c014 	str.w	ip, [r3, #20]
    9afc:	2808      	cmp	r0, #8
    9afe:	dd00      	ble.n	9b02 <flash_nrf_write+0x62>
    9b00:	619c      	str	r4, [r3, #24]
    9b02:	280c      	cmp	r0, #12
    9b04:	dd00      	ble.n	9b08 <flash_nrf_write+0x68>
    9b06:	61dd      	str	r5, [r3, #28]
    9b08:	290f      	cmp	r1, #15
    9b0a:	dd26      	ble.n	9b5a <flash_nrf_write+0xba>
    9b0c:	2410      	movs	r4, #16
    9b0e:	b13a      	cbz	r2, 9b20 <flash_nrf_write+0x80>
    9b10:	2104      	movs	r1, #4
    9b12:	7139      	strb	r1, [r7, #4]
    9b14:	2100      	movs	r1, #0
    9b16:	7179      	strb	r1, [r7, #5]
    9b18:	71b9      	strb	r1, [r7, #6]
    9b1a:	71f9      	strb	r1, [r7, #7]
    9b1c:	6878      	ldr	r0, [r7, #4]
    9b1e:	6118      	str	r0, [r3, #16]
    9b20:	2100      	movs	r1, #0
    9b22:	f36f 0100 	bfc	r1, #0, #1
    9b26:	f36f 0141 	bfc	r1, #1, #1
    9b2a:	f36f 0182 	bfc	r1, #2, #1
    9b2e:	f36f 01c5 	bfc	r1, #3, #3
    9b32:	2301      	movs	r3, #1
    9b34:	f363 1188 	bfi	r1, r3, #6, #3
    9b38:	f3c4 030a 	ubfx	r3, r4, #0, #11
    9b3c:	f363 2153 	bfi	r1, r3, #9, #11
    9b40:	f36f 511f 	bfc	r1, #20, #12
    9b44:	2300      	movs	r3, #0
    9b46:	4833      	ldr	r0, [pc, #204]	; (9c14 <flash_nrf_write+0x174>)
    9b48:	f7fa fee8 	bl	491c <z_impl_z_log_msg_static_create>
    9b4c:	46b5      	mov	sp, r6
		return -EINVAL;
    9b4e:	f06f 0815 	mvn.w	r8, #21
    9b52:	e7ba      	b.n	9aca <flash_nrf_write+0x2a>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    9b54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    9b58:	e7c8      	b.n	9aec <flash_nrf_write+0x4c>
    9b5a:	f06f 041b 	mvn.w	r4, #27
    9b5e:	e7d6      	b.n	9b0e <flash_nrf_write+0x6e>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    9b60:	4b2c      	ldr	r3, [pc, #176]	; (9c14 <flash_nrf_write+0x174>)
    9b62:	681b      	ldr	r3, [r3, #0]
    9b64:	f013 0f07 	tst.w	r3, #7
    9b68:	d037      	beq.n	9bda <flash_nrf_write+0x13a>
    9b6a:	466e      	mov	r6, sp
    9b6c:	b088      	sub	sp, #32
    9b6e:	466b      	mov	r3, sp
    9b70:	f113 0210 	adds.w	r2, r3, #16
    9b74:	d034      	beq.n	9be0 <flash_nrf_write+0x140>
    9b76:	2110      	movs	r1, #16
    9b78:	b162      	cbz	r2, 9b94 <flash_nrf_write+0xf4>
    9b7a:	4608      	mov	r0, r1
    9b7c:	2904      	cmp	r1, #4
    9b7e:	dd03      	ble.n	9b88 <flash_nrf_write+0xe8>
    9b80:	f8df c098 	ldr.w	ip, [pc, #152]	; 9c1c <flash_nrf_write+0x17c>
    9b84:	f8c3 c014 	str.w	ip, [r3, #20]
    9b88:	2808      	cmp	r0, #8
    9b8a:	dd00      	ble.n	9b8e <flash_nrf_write+0xee>
    9b8c:	619c      	str	r4, [r3, #24]
    9b8e:	280c      	cmp	r0, #12
    9b90:	dd00      	ble.n	9b94 <flash_nrf_write+0xf4>
    9b92:	61dd      	str	r5, [r3, #28]
    9b94:	290f      	cmp	r1, #15
    9b96:	dd26      	ble.n	9be6 <flash_nrf_write+0x146>
    9b98:	2410      	movs	r4, #16
    9b9a:	b13a      	cbz	r2, 9bac <flash_nrf_write+0x10c>
    9b9c:	2104      	movs	r1, #4
    9b9e:	7139      	strb	r1, [r7, #4]
    9ba0:	2100      	movs	r1, #0
    9ba2:	7179      	strb	r1, [r7, #5]
    9ba4:	71b9      	strb	r1, [r7, #6]
    9ba6:	71f9      	strb	r1, [r7, #7]
    9ba8:	6878      	ldr	r0, [r7, #4]
    9baa:	6118      	str	r0, [r3, #16]
    9bac:	2100      	movs	r1, #0
    9bae:	f36f 0100 	bfc	r1, #0, #1
    9bb2:	f36f 0141 	bfc	r1, #1, #1
    9bb6:	f36f 0182 	bfc	r1, #2, #1
    9bba:	f36f 01c5 	bfc	r1, #3, #3
    9bbe:	2301      	movs	r3, #1
    9bc0:	f363 1188 	bfi	r1, r3, #6, #3
    9bc4:	f3c4 040a 	ubfx	r4, r4, #0, #11
    9bc8:	f364 2153 	bfi	r1, r4, #9, #11
    9bcc:	f36f 511f 	bfc	r1, #20, #12
    9bd0:	2300      	movs	r3, #0
    9bd2:	4810      	ldr	r0, [pc, #64]	; (9c14 <flash_nrf_write+0x174>)
    9bd4:	f7fa fea2 	bl	491c <z_impl_z_log_msg_static_create>
    9bd8:	46b5      	mov	sp, r6
		return -EINVAL;
    9bda:	f06f 0815 	mvn.w	r8, #21
    9bde:	e774      	b.n	9aca <flash_nrf_write+0x2a>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    9be0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    9be4:	e7c8      	b.n	9b78 <flash_nrf_write+0xd8>
    9be6:	f06f 041b 	mvn.w	r4, #27
    9bea:	e7d6      	b.n	9b9a <flash_nrf_write+0xfa>
	return z_impl_k_sem_take(sem, timeout);
    9bec:	f8df 9030 	ldr.w	r9, [pc, #48]	; 9c20 <flash_nrf_write+0x180>
    9bf0:	f04f 32ff 	mov.w	r2, #4294967295
    9bf4:	f04f 33ff 	mov.w	r3, #4294967295
    9bf8:	4648      	mov	r0, r9
    9bfa:	f003 fe3f 	bl	d87c <z_impl_k_sem_take>
		ret = write(addr, data, len);
    9bfe:	462a      	mov	r2, r5
    9c00:	4631      	mov	r1, r6
    9c02:	4620      	mov	r0, r4
    9c04:	f009 fc7b 	bl	134fe <write>
    9c08:	4680      	mov	r8, r0
	z_impl_k_sem_give(sem);
    9c0a:	4648      	mov	r0, r9
    9c0c:	f003 fe0e 	bl	d82c <z_impl_k_sem_give>
	return ret;
    9c10:	e75b      	b.n	9aca <flash_nrf_write+0x2a>
    9c12:	bf00      	nop
    9c14:	200002dc 	.word	0x200002dc
    9c18:	00017f78 	.word	0x00017f78
    9c1c:	00017f98 	.word	0x00017f98
    9c20:	20001604 	.word	0x20001604

00009c24 <flash_nrf_read>:
{
    9c24:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c26:	b083      	sub	sp, #12
    9c28:	af00      	add	r7, sp, #0
    9c2a:	460e      	mov	r6, r1
    9c2c:	4615      	mov	r5, r2
    9c2e:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    9c30:	4619      	mov	r1, r3
    9c32:	4630      	mov	r0, r6
    9c34:	f009 fc1c 	bl	13470 <is_regular_addr_valid>
    9c38:	b128      	cbz	r0, 9c46 <flash_nrf_read+0x22>
	if (!len) {
    9c3a:	2c00      	cmp	r4, #0
    9c3c:	d149      	bne.n	9cd2 <flash_nrf_read+0xae>
		return 0;
    9c3e:	2000      	movs	r0, #0
}
    9c40:	370c      	adds	r7, #12
    9c42:	46bd      	mov	sp, r7
    9c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("invalid address: 0x%08lx:%zu",
    9c46:	4b26      	ldr	r3, [pc, #152]	; (9ce0 <flash_nrf_read+0xbc>)
    9c48:	681b      	ldr	r3, [r3, #0]
    9c4a:	f013 0f07 	tst.w	r3, #7
    9c4e:	d037      	beq.n	9cc0 <flash_nrf_read+0x9c>
    9c50:	466d      	mov	r5, sp
    9c52:	b088      	sub	sp, #32
    9c54:	466b      	mov	r3, sp
    9c56:	f113 0210 	adds.w	r2, r3, #16
    9c5a:	d034      	beq.n	9cc6 <flash_nrf_read+0xa2>
    9c5c:	2110      	movs	r1, #16
    9c5e:	b162      	cbz	r2, 9c7a <flash_nrf_read+0x56>
    9c60:	4608      	mov	r0, r1
    9c62:	2904      	cmp	r1, #4
    9c64:	dd03      	ble.n	9c6e <flash_nrf_read+0x4a>
    9c66:	f8df c07c 	ldr.w	ip, [pc, #124]	; 9ce4 <flash_nrf_read+0xc0>
    9c6a:	f8c3 c014 	str.w	ip, [r3, #20]
    9c6e:	2808      	cmp	r0, #8
    9c70:	dd00      	ble.n	9c74 <flash_nrf_read+0x50>
    9c72:	619e      	str	r6, [r3, #24]
    9c74:	280c      	cmp	r0, #12
    9c76:	dd00      	ble.n	9c7a <flash_nrf_read+0x56>
    9c78:	61dc      	str	r4, [r3, #28]
    9c7a:	290f      	cmp	r1, #15
    9c7c:	dd26      	ble.n	9ccc <flash_nrf_read+0xa8>
    9c7e:	2410      	movs	r4, #16
    9c80:	b13a      	cbz	r2, 9c92 <flash_nrf_read+0x6e>
    9c82:	2104      	movs	r1, #4
    9c84:	7139      	strb	r1, [r7, #4]
    9c86:	2100      	movs	r1, #0
    9c88:	7179      	strb	r1, [r7, #5]
    9c8a:	71b9      	strb	r1, [r7, #6]
    9c8c:	71f9      	strb	r1, [r7, #7]
    9c8e:	6878      	ldr	r0, [r7, #4]
    9c90:	6118      	str	r0, [r3, #16]
    9c92:	2100      	movs	r1, #0
    9c94:	f36f 0100 	bfc	r1, #0, #1
    9c98:	f36f 0141 	bfc	r1, #1, #1
    9c9c:	f36f 0182 	bfc	r1, #2, #1
    9ca0:	f36f 01c5 	bfc	r1, #3, #3
    9ca4:	2301      	movs	r3, #1
    9ca6:	f363 1188 	bfi	r1, r3, #6, #3
    9caa:	f3c4 030a 	ubfx	r3, r4, #0, #11
    9cae:	f363 2153 	bfi	r1, r3, #9, #11
    9cb2:	f36f 511f 	bfc	r1, #20, #12
    9cb6:	2300      	movs	r3, #0
    9cb8:	4809      	ldr	r0, [pc, #36]	; (9ce0 <flash_nrf_read+0xbc>)
    9cba:	f7fa fe2f 	bl	491c <z_impl_z_log_msg_static_create>
    9cbe:	46ad      	mov	sp, r5
		return -EINVAL;
    9cc0:	f06f 0015 	mvn.w	r0, #21
    9cc4:	e7bc      	b.n	9c40 <flash_nrf_read+0x1c>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    9cc6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    9cca:	e7c8      	b.n	9c5e <flash_nrf_read+0x3a>
    9ccc:	f06f 041b 	mvn.w	r4, #27
    9cd0:	e7d6      	b.n	9c80 <flash_nrf_read+0x5c>
	memcpy(data, (void *)addr, len);
    9cd2:	4622      	mov	r2, r4
    9cd4:	4631      	mov	r1, r6
    9cd6:	4628      	mov	r0, r5
    9cd8:	f009 f857 	bl	12d8a <memcpy>
	return 0;
    9cdc:	2000      	movs	r0, #0
    9cde:	e7af      	b.n	9c40 <flash_nrf_read+0x1c>
    9ce0:	200002dc 	.word	0x200002dc
    9ce4:	00017f78 	.word	0x00017f78

00009ce8 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    9ce8:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    9cea:	2201      	movs	r2, #1
    9cec:	4611      	mov	r1, r2
    9cee:	4806      	ldr	r0, [pc, #24]	; (9d08 <nrf_flash_init+0x20>)
    9cf0:	f00a fd66 	bl	147c0 <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    9cf4:	f00a faef 	bl	142d6 <nrfx_nvmc_flash_page_count_get>
    9cf8:	4c04      	ldr	r4, [pc, #16]	; (9d0c <nrf_flash_init+0x24>)
    9cfa:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    9cfc:	f00a fae7 	bl	142ce <nrfx_nvmc_flash_page_size_get>
    9d00:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    9d02:	2000      	movs	r0, #0
    9d04:	bd10      	pop	{r4, pc}
    9d06:	bf00      	nop
    9d08:	20001604 	.word	0x20001604
    9d0c:	200015fc 	.word	0x200015fc

00009d10 <device_name_get>:
static void device_name_get(size_t idx, struct shell_static_entry *entry);

SHELL_DYNAMIC_CMD_CREATE(dsub_device_name, device_name_get);

static void device_name_get(size_t idx, struct shell_static_entry *entry)
{
    9d10:	b510      	push	{r4, lr}
    9d12:	460c      	mov	r4, r1
	const struct device *dev = shell_device_lookup(idx, NULL);
    9d14:	2100      	movs	r1, #0
    9d16:	f007 ff02 	bl	11b1e <shell_device_lookup>

	entry->syntax = (dev != NULL) ? dev->name : NULL;
    9d1a:	4603      	mov	r3, r0
    9d1c:	b100      	cbz	r0, 9d20 <device_name_get+0x10>
    9d1e:	6803      	ldr	r3, [r0, #0]
    9d20:	6023      	str	r3, [r4, #0]
	entry->handler = NULL;
    9d22:	2300      	movs	r3, #0
    9d24:	60e3      	str	r3, [r4, #12]
	entry->help  = NULL;
    9d26:	6063      	str	r3, [r4, #4]
	entry->subcmd = &dsub_device_name;
    9d28:	4b01      	ldr	r3, [pc, #4]	; (9d30 <device_name_get+0x20>)
    9d2a:	60a3      	str	r3, [r4, #8]
}
    9d2c:	bd10      	pop	{r4, pc}
    9d2e:	bf00      	nop
    9d30:	000154b0 	.word	0x000154b0

00009d34 <cmd_flash>:

	SHELL_SUBCMD_SET_END
);

static int cmd_flash(const struct shell *sh, size_t argc, char **argv)
{
    9d34:	b500      	push	{lr}
    9d36:	b083      	sub	sp, #12
	shell_error(sh, "%s:unknown parameter: %s", argv[0], argv[1]);
    9d38:	6853      	ldr	r3, [r2, #4]
    9d3a:	9300      	str	r3, [sp, #0]
    9d3c:	6813      	ldr	r3, [r2, #0]
    9d3e:	4a04      	ldr	r2, [pc, #16]	; (9d50 <cmd_flash+0x1c>)
    9d40:	2101      	movs	r1, #1
    9d42:	f007 fc73 	bl	1162c <shell_fprintf>
	return -EINVAL;
}
    9d46:	f06f 0015 	mvn.w	r0, #21
    9d4a:	b003      	add	sp, #12
    9d4c:	f85d fb04 	ldr.w	pc, [sp], #4
    9d50:	00017ffc 	.word	0x00017ffc

00009d54 <parse_helper>:
{
    9d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9d58:	b082      	sub	sp, #8
    9d5a:	4680      	mov	r8, r0
    9d5c:	460d      	mov	r5, r1
    9d5e:	4614      	mov	r4, r2
    9d60:	461e      	mov	r6, r3
    9d62:	9f08      	ldr	r7, [sp, #32]
	*addr = strtoul((*argv)[1], &endptr, 16);
    9d64:	6813      	ldr	r3, [r2, #0]
    9d66:	2210      	movs	r2, #16
    9d68:	a901      	add	r1, sp, #4
    9d6a:	6858      	ldr	r0, [r3, #4]
    9d6c:	f008 fedd 	bl	12b2a <strtoul>
    9d70:	6038      	str	r0, [r7, #0]
	if (*endptr != '\0') {
    9d72:	9b01      	ldr	r3, [sp, #4]
    9d74:	781b      	ldrb	r3, [r3, #0]
    9d76:	b32b      	cbz	r3, 9dc4 <parse_helper+0x70>
		*flash_dev = device_get_binding((*argv)[1]);
    9d78:	6823      	ldr	r3, [r4, #0]
    9d7a:	6858      	ldr	r0, [r3, #4]
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    9d7c:	f003 f87e 	bl	ce7c <z_impl_device_get_binding>
    9d80:	6030      	str	r0, [r6, #0]
		if (!*flash_dev) {
    9d82:	b1b8      	cbz	r0, 9db4 <parse_helper+0x60>
	if (*endptr == '\0') {
    9d84:	9b01      	ldr	r3, [sp, #4]
    9d86:	781b      	ldrb	r3, [r3, #0]
    9d88:	2b00      	cmp	r3, #0
    9d8a:	d032      	beq.n	9df2 <parse_helper+0x9e>
	if (*argc < 3) {
    9d8c:	682b      	ldr	r3, [r5, #0]
    9d8e:	2b02      	cmp	r3, #2
    9d90:	d927      	bls.n	9de2 <parse_helper+0x8e>
	*addr = strtoul((*argv)[2], &endptr, 16);
    9d92:	6823      	ldr	r3, [r4, #0]
    9d94:	2210      	movs	r2, #16
    9d96:	a901      	add	r1, sp, #4
    9d98:	6898      	ldr	r0, [r3, #8]
    9d9a:	f008 fec6 	bl	12b2a <strtoul>
    9d9e:	6038      	str	r0, [r7, #0]
	(*argc)--;
    9da0:	682b      	ldr	r3, [r5, #0]
    9da2:	3b01      	subs	r3, #1
    9da4:	602b      	str	r3, [r5, #0]
	(*argv)++;
    9da6:	6823      	ldr	r3, [r4, #0]
    9da8:	3304      	adds	r3, #4
    9daa:	6023      	str	r3, [r4, #0]
	return 0;
    9dac:	2000      	movs	r0, #0
}
    9dae:	b002      	add	sp, #8
    9db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			shell_error(sh, "Given flash device was not found");
    9db4:	4a10      	ldr	r2, [pc, #64]	; (9df8 <parse_helper+0xa4>)
    9db6:	2101      	movs	r1, #1
    9db8:	4640      	mov	r0, r8
    9dba:	f007 fc37 	bl	1162c <shell_fprintf>
			return -ENODEV;
    9dbe:	f06f 0012 	mvn.w	r0, #18
    9dc2:	e7f4      	b.n	9dae <parse_helper+0x5a>
    9dc4:	480d      	ldr	r0, [pc, #52]	; (9dfc <parse_helper+0xa8>)
    9dc6:	f00a fc33 	bl	14630 <z_device_is_ready>
		if (!device_is_ready(zephyr_flash_controller)) {
    9dca:	b110      	cbz	r0, 9dd2 <parse_helper+0x7e>
		*flash_dev = zephyr_flash_controller;
    9dcc:	4b0b      	ldr	r3, [pc, #44]	; (9dfc <parse_helper+0xa8>)
    9dce:	6033      	str	r3, [r6, #0]
    9dd0:	e7d8      	b.n	9d84 <parse_helper+0x30>
			shell_error(sh, "Default flash driver not ready");
    9dd2:	4a0b      	ldr	r2, [pc, #44]	; (9e00 <parse_helper+0xac>)
    9dd4:	2101      	movs	r1, #1
    9dd6:	4640      	mov	r0, r8
    9dd8:	f007 fc28 	bl	1162c <shell_fprintf>
			return -ENODEV;
    9ddc:	f06f 0012 	mvn.w	r0, #18
    9de0:	e7e5      	b.n	9dae <parse_helper+0x5a>
		shell_error(sh, "Missing address.");
    9de2:	4a08      	ldr	r2, [pc, #32]	; (9e04 <parse_helper+0xb0>)
    9de4:	2101      	movs	r1, #1
    9de6:	4640      	mov	r0, r8
    9de8:	f007 fc20 	bl	1162c <shell_fprintf>
		return -EINVAL;
    9dec:	f06f 0015 	mvn.w	r0, #21
    9df0:	e7dd      	b.n	9dae <parse_helper+0x5a>
		return 0;
    9df2:	2000      	movs	r0, #0
    9df4:	e7db      	b.n	9dae <parse_helper+0x5a>
    9df6:	bf00      	nop
    9df8:	00018018 	.word	0x00018018
    9dfc:	0001513c 	.word	0x0001513c
    9e00:	0001803c 	.word	0x0001803c
    9e04:	0001805c 	.word	0x0001805c

00009e08 <cmd_page_info>:
{
    9e08:	b530      	push	{r4, r5, lr}
    9e0a:	b08d      	sub	sp, #52	; 0x34
    9e0c:	4605      	mov	r5, r0
    9e0e:	9105      	str	r1, [sp, #20]
    9e10:	9204      	str	r2, [sp, #16]
	result = parse_helper(sh, &argc, &argv, &flash_dev, &addr);
    9e12:	ab07      	add	r3, sp, #28
    9e14:	9300      	str	r3, [sp, #0]
    9e16:	ab0b      	add	r3, sp, #44	; 0x2c
    9e18:	aa04      	add	r2, sp, #16
    9e1a:	a905      	add	r1, sp, #20
    9e1c:	f7ff ff9a 	bl	9d54 <parse_helper>
	if (result) {
    9e20:	4604      	mov	r4, r0
    9e22:	b110      	cbz	r0, 9e2a <cmd_page_info+0x22>
}
    9e24:	4620      	mov	r0, r4
    9e26:	b00d      	add	sp, #52	; 0x34
    9e28:	bd30      	pop	{r4, r5, pc}
	result = flash_get_page_info_by_offs(flash_dev, addr, &info);
    9e2a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9e2c:	9907      	ldr	r1, [sp, #28]
    9e2e:	aa08      	add	r2, sp, #32
    9e30:	f009 fba5 	bl	1357e <z_impl_flash_get_page_info_by_offs>
	if (result != 0) {
    9e34:	4604      	mov	r4, r0
    9e36:	b960      	cbnz	r0, 9e52 <cmd_page_info+0x4a>
	shell_print(sh, "Page for address 0x%x:\nstart offset: 0x%lx\nsize: %zu\nindex: %d",
    9e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9e3a:	9302      	str	r3, [sp, #8]
    9e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9e3e:	9301      	str	r3, [sp, #4]
    9e40:	9b08      	ldr	r3, [sp, #32]
    9e42:	9300      	str	r3, [sp, #0]
    9e44:	9b07      	ldr	r3, [sp, #28]
    9e46:	4a07      	ldr	r2, [pc, #28]	; (9e64 <cmd_page_info+0x5c>)
    9e48:	2108      	movs	r1, #8
    9e4a:	4628      	mov	r0, r5
    9e4c:	f007 fbee 	bl	1162c <shell_fprintf>
	return 0;
    9e50:	e7e8      	b.n	9e24 <cmd_page_info+0x1c>
		shell_error(sh, "Could not determine page size, error code %d.", result);
    9e52:	4603      	mov	r3, r0
    9e54:	4a04      	ldr	r2, [pc, #16]	; (9e68 <cmd_page_info+0x60>)
    9e56:	2101      	movs	r1, #1
    9e58:	4628      	mov	r0, r5
    9e5a:	f007 fbe7 	bl	1162c <shell_fprintf>
		return -EINVAL;
    9e5e:	f06f 0415 	mvn.w	r4, #21
    9e62:	e7df      	b.n	9e24 <cmd_page_info+0x1c>
    9e64:	000180a0 	.word	0x000180a0
    9e68:	00018070 	.word	0x00018070

00009e6c <cmd_erase>:
{
    9e6c:	b530      	push	{r4, r5, lr}
    9e6e:	b08b      	sub	sp, #44	; 0x2c
    9e70:	4605      	mov	r5, r0
    9e72:	9103      	str	r1, [sp, #12]
    9e74:	9202      	str	r2, [sp, #8]
	result = parse_helper(sh, &argc, &argv, &flash_dev, &page_addr);
    9e76:	ab08      	add	r3, sp, #32
    9e78:	9300      	str	r3, [sp, #0]
    9e7a:	ab09      	add	r3, sp, #36	; 0x24
    9e7c:	aa02      	add	r2, sp, #8
    9e7e:	a903      	add	r1, sp, #12
    9e80:	f7ff ff68 	bl	9d54 <parse_helper>
	if (result) {
    9e84:	4604      	mov	r4, r0
    9e86:	b9b0      	cbnz	r0, 9eb6 <cmd_erase+0x4a>
	if (argc > 2) {
    9e88:	9b03      	ldr	r3, [sp, #12]
    9e8a:	2b02      	cmp	r3, #2
    9e8c:	d916      	bls.n	9ebc <cmd_erase+0x50>
		size = strtoul(argv[2], NULL, 16);
    9e8e:	2210      	movs	r2, #16
    9e90:	2100      	movs	r1, #0
    9e92:	9b02      	ldr	r3, [sp, #8]
    9e94:	6898      	ldr	r0, [r3, #8]
    9e96:	f008 fe48 	bl	12b2a <strtoul>
    9e9a:	4602      	mov	r2, r0
	result = flash_erase(flash_dev, page_addr, size);
    9e9c:	9809      	ldr	r0, [sp, #36]	; 0x24
    9e9e:	9908      	ldr	r1, [sp, #32]
	const struct flash_driver_api *api =
    9ea0:	6883      	ldr	r3, [r0, #8]
	rc = api->erase(dev, offset, size);
    9ea2:	689b      	ldr	r3, [r3, #8]
    9ea4:	4798      	blx	r3
	if (result) {
    9ea6:	4604      	mov	r4, r0
    9ea8:	b1c8      	cbz	r0, 9ede <cmd_erase+0x72>
		shell_error(sh, "Erase Failed, code %d.", result);
    9eaa:	4603      	mov	r3, r0
    9eac:	4a0f      	ldr	r2, [pc, #60]	; (9eec <cmd_erase+0x80>)
    9eae:	2101      	movs	r1, #1
    9eb0:	4628      	mov	r0, r5
    9eb2:	f007 fbbb 	bl	1162c <shell_fprintf>
}
    9eb6:	4620      	mov	r0, r4
    9eb8:	b00b      	add	sp, #44	; 0x2c
    9eba:	bd30      	pop	{r4, r5, pc}
		result = flash_get_page_info_by_offs(flash_dev, page_addr,
    9ebc:	9809      	ldr	r0, [sp, #36]	; 0x24
    9ebe:	9908      	ldr	r1, [sp, #32]
    9ec0:	aa05      	add	r2, sp, #20
    9ec2:	f009 fb5c 	bl	1357e <z_impl_flash_get_page_info_by_offs>
		if (result != 0) {
    9ec6:	4603      	mov	r3, r0
    9ec8:	b908      	cbnz	r0, 9ece <cmd_erase+0x62>
		size = info.size;
    9eca:	9a06      	ldr	r2, [sp, #24]
    9ecc:	e7e6      	b.n	9e9c <cmd_erase+0x30>
			shell_error(sh, "Could not determine page size, "
    9ece:	4a08      	ldr	r2, [pc, #32]	; (9ef0 <cmd_erase+0x84>)
    9ed0:	2101      	movs	r1, #1
    9ed2:	4628      	mov	r0, r5
    9ed4:	f007 fbaa 	bl	1162c <shell_fprintf>
			return -EINVAL;
    9ed8:	f06f 0415 	mvn.w	r4, #21
    9edc:	e7eb      	b.n	9eb6 <cmd_erase+0x4a>
		shell_print(sh, "Erase success.");
    9ede:	4a05      	ldr	r2, [pc, #20]	; (9ef4 <cmd_erase+0x88>)
    9ee0:	2108      	movs	r1, #8
    9ee2:	4628      	mov	r0, r5
    9ee4:	f007 fba2 	bl	1162c <shell_fprintf>
    9ee8:	e7e5      	b.n	9eb6 <cmd_erase+0x4a>
    9eea:	bf00      	nop
    9eec:	0001810c 	.word	0x0001810c
    9ef0:	000180e0 	.word	0x000180e0
    9ef4:	00018124 	.word	0x00018124

00009ef8 <set_bypass>:
{
    9ef8:	b538      	push	{r3, r4, r5, lr}
    9efa:	4604      	mov	r4, r0
	if (bypass && in_use) {
    9efc:	460d      	mov	r5, r1
    9efe:	b111      	cbz	r1, 9f06 <set_bypass+0xe>
    9f00:	4b0d      	ldr	r3, [pc, #52]	; (9f38 <set_bypass+0x40>)
    9f02:	781b      	ldrb	r3, [r3, #0]
    9f04:	b95b      	cbnz	r3, 9f1e <set_bypass+0x26>
	in_use = bypass != NULL;
    9f06:	1e2b      	subs	r3, r5, #0
    9f08:	bf18      	it	ne
    9f0a:	2301      	movne	r3, #1
    9f0c:	4a0a      	ldr	r2, [pc, #40]	; (9f38 <set_bypass+0x40>)
    9f0e:	7013      	strb	r3, [r2, #0]
	if (in_use) {
    9f10:	b963      	cbnz	r3, 9f2c <set_bypass+0x34>
	shell_set_bypass(sh, bypass);
    9f12:	4629      	mov	r1, r5
    9f14:	4620      	mov	r0, r4
    9f16:	f007 fbab 	bl	11670 <shell_set_bypass>
	return 0;
    9f1a:	2000      	movs	r0, #0
}
    9f1c:	bd38      	pop	{r3, r4, r5, pc}
		shell_error(sh, "flash load supports setting bypass on a single instance.");
    9f1e:	4a07      	ldr	r2, [pc, #28]	; (9f3c <set_bypass+0x44>)
    9f20:	2101      	movs	r1, #1
    9f22:	f007 fb83 	bl	1162c <shell_fprintf>
		return -EBUSY;
    9f26:	f06f 000f 	mvn.w	r0, #15
    9f2a:	e7f7      	b.n	9f1c <set_bypass+0x24>
		shell_print(sh, "Loading...");
    9f2c:	4a04      	ldr	r2, [pc, #16]	; (9f40 <set_bypass+0x48>)
    9f2e:	2108      	movs	r1, #8
    9f30:	4620      	mov	r0, r4
    9f32:	f007 fb7b 	bl	1162c <shell_fprintf>
    9f36:	e7ec      	b.n	9f12 <set_bypass+0x1a>
    9f38:	20003cba 	.word	0x20003cba
    9f3c:	00018134 	.word	0x00018134
    9f40:	00018170 	.word	0x00018170

00009f44 <cmd_load>:
{
    9f44:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f46:	b087      	sub	sp, #28
    9f48:	4604      	mov	r4, r0
    9f4a:	9103      	str	r1, [sp, #12]
    9f4c:	9202      	str	r2, [sp, #8]
	result = parse_helper(sh, &argc, &argv, &flash_dev, &addr);
    9f4e:	ab04      	add	r3, sp, #16
    9f50:	9300      	str	r3, [sp, #0]
    9f52:	ab05      	add	r3, sp, #20
    9f54:	aa02      	add	r2, sp, #8
    9f56:	a903      	add	r1, sp, #12
    9f58:	f7ff fefc 	bl	9d54 <parse_helper>
	if (result) {
    9f5c:	4606      	mov	r6, r0
    9f5e:	b110      	cbz	r0, 9f66 <cmd_load+0x22>
}
    9f60:	4630      	mov	r0, r6
    9f62:	b007      	add	sp, #28
    9f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size = strtoul(argv[2], NULL, 0);
    9f66:	2200      	movs	r2, #0
    9f68:	4611      	mov	r1, r2
    9f6a:	9b02      	ldr	r3, [sp, #8]
    9f6c:	6898      	ldr	r0, [r3, #8]
    9f6e:	f008 fddc 	bl	12b2a <strtoul>
    9f72:	4605      	mov	r5, r0
	write_block_size = flash_get_write_block_size(flash_dev);
    9f74:	9805      	ldr	r0, [sp, #20]
	const struct flash_driver_api *api =
    9f76:	6883      	ldr	r3, [r0, #8]
	return api->get_parameters(dev)->write_block_size;
    9f78:	68db      	ldr	r3, [r3, #12]
    9f7a:	4798      	blx	r3
    9f7c:	6803      	ldr	r3, [r0, #0]
	if (size % write_block_size != 0) {
    9f7e:	fbb5 f2f3 	udiv	r2, r5, r3
    9f82:	fb03 5212 	mls	r2, r3, r2, r5
    9f86:	bb4a      	cbnz	r2, 9fdc <cmd_load+0x98>
	flash_load_buf_size = FLASH_LOAD_BUF_MAX;
    9f88:	4a26      	ldr	r2, [pc, #152]	; (a024 <cmd_load+0xe0>)
    9f8a:	f44f 7180 	mov.w	r1, #256	; 0x100
    9f8e:	6011      	str	r1, [r2, #0]
	if (flash_load_buf_size < write_block_size) {
    9f90:	428b      	cmp	r3, r1
    9f92:	d82b      	bhi.n	9fec <cmd_load+0xa8>
	if (flash_load_buf_size % write_block_size != 0) {
    9f94:	f44f 7280 	mov.w	r2, #256	; 0x100
    9f98:	fbb2 f2f3 	udiv	r2, r2, r3
    9f9c:	fb03 f202 	mul.w	r2, r3, r2
    9fa0:	f5d2 7280 	rsbs	r2, r2, #256	; 0x100
    9fa4:	d12a      	bne.n	9ffc <cmd_load+0xb8>
	flash_load_dev = flash_dev;
    9fa6:	4b20      	ldr	r3, [pc, #128]	; (a028 <cmd_load+0xe4>)
    9fa8:	9a05      	ldr	r2, [sp, #20]
    9faa:	601a      	str	r2, [r3, #0]
	flash_load_addr = addr;
    9fac:	9a04      	ldr	r2, [sp, #16]
    9fae:	4b1f      	ldr	r3, [pc, #124]	; (a02c <cmd_load+0xe8>)
    9fb0:	601a      	str	r2, [r3, #0]
	flash_load_total = size;
    9fb2:	4b1f      	ldr	r3, [pc, #124]	; (a030 <cmd_load+0xec>)
    9fb4:	601d      	str	r5, [r3, #0]
	flash_load_written = 0;
    9fb6:	2300      	movs	r3, #0
    9fb8:	491e      	ldr	r1, [pc, #120]	; (a034 <cmd_load+0xf0>)
    9fba:	600b      	str	r3, [r1, #0]
	flash_load_boff = 0;
    9fbc:	491e      	ldr	r1, [pc, #120]	; (a038 <cmd_load+0xf4>)
    9fbe:	600b      	str	r3, [r1, #0]
	flash_load_chunk = 0;
    9fc0:	491e      	ldr	r1, [pc, #120]	; (a03c <cmd_load+0xf8>)
    9fc2:	600b      	str	r3, [r1, #0]
	shell_print(sh, "Loading %d bytes starting at address %x", size, addr);
    9fc4:	9200      	str	r2, [sp, #0]
    9fc6:	462b      	mov	r3, r5
    9fc8:	4a1d      	ldr	r2, [pc, #116]	; (a040 <cmd_load+0xfc>)
    9fca:	2108      	movs	r1, #8
    9fcc:	4620      	mov	r0, r4
    9fce:	f007 fb2d 	bl	1162c <shell_fprintf>
	set_bypass(sh, bypass_cb);
    9fd2:	491c      	ldr	r1, [pc, #112]	; (a044 <cmd_load+0x100>)
    9fd4:	4620      	mov	r0, r4
    9fd6:	f7ff ff8f 	bl	9ef8 <set_bypass>
	return 0;
    9fda:	e7c1      	b.n	9f60 <cmd_load+0x1c>
		shell_error(sh, "Size must be %zu bytes aligned", write_block_size);
    9fdc:	4a1a      	ldr	r2, [pc, #104]	; (a048 <cmd_load+0x104>)
    9fde:	2101      	movs	r1, #1
    9fe0:	4620      	mov	r0, r4
    9fe2:	f007 fb23 	bl	1162c <shell_fprintf>
		return -EIO;
    9fe6:	f06f 0604 	mvn.w	r6, #4
    9fea:	e7b9      	b.n	9f60 <cmd_load+0x1c>
		shell_error(sh, "Size of buffer is too small to be aligned to %zu.",
    9fec:	4a17      	ldr	r2, [pc, #92]	; (a04c <cmd_load+0x108>)
    9fee:	2101      	movs	r1, #1
    9ff0:	4620      	mov	r0, r4
    9ff2:	f007 fb1b 	bl	1162c <shell_fprintf>
		return -ENOSPC;
    9ff6:	f06f 061b 	mvn.w	r6, #27
    9ffa:	e7b1      	b.n	9f60 <cmd_load+0x1c>
		flash_load_buf_size -= flash_load_buf_size % write_block_size;
    9ffc:	4f09      	ldr	r7, [pc, #36]	; (a024 <cmd_load+0xe0>)
    9ffe:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
    a002:	603a      	str	r2, [r7, #0]
		shell_warn(sh, "Load buffer was not aligned to %zu.", write_block_size);
    a004:	4a12      	ldr	r2, [pc, #72]	; (a050 <cmd_load+0x10c>)
    a006:	2103      	movs	r1, #3
    a008:	4620      	mov	r0, r4
    a00a:	f007 fb0f 	bl	1162c <shell_fprintf>
		shell_warn(sh, "Effective load buffer size was set from %d to %d",
    a00e:	683b      	ldr	r3, [r7, #0]
    a010:	9300      	str	r3, [sp, #0]
    a012:	f44f 7380 	mov.w	r3, #256	; 0x100
    a016:	4a0f      	ldr	r2, [pc, #60]	; (a054 <cmd_load+0x110>)
    a018:	2103      	movs	r1, #3
    a01a:	4620      	mov	r0, r4
    a01c:	f007 fb06 	bl	1162c <shell_fprintf>
    a020:	e7c1      	b.n	9fa6 <cmd_load+0x62>
    a022:	bf00      	nop
    a024:	20002730 	.word	0x20002730
    a028:	20002734 	.word	0x20002734
    a02c:	2000272c 	.word	0x2000272c
    a030:	20002728 	.word	0x20002728
    a034:	20002724 	.word	0x20002724
    a038:	2000271c 	.word	0x2000271c
    a03c:	20002720 	.word	0x20002720
    a040:	0001822c 	.word	0x0001822c
    a044:	0000a059 	.word	0x0000a059
    a048:	0001817c 	.word	0x0001817c
    a04c:	0001819c 	.word	0x0001819c
    a050:	000181d0 	.word	0x000181d0
    a054:	000181f8 	.word	0x000181f8

0000a058 <bypass_cb>:
{
    a058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a05c:	b083      	sub	sp, #12
    a05e:	4683      	mov	fp, r0
    a060:	468a      	mov	sl, r1
	uint32_t left_to_read = flash_load_total - flash_load_written - flash_load_boff;
    a062:	4b4e      	ldr	r3, [pc, #312]	; (a19c <bypass_cb+0x144>)
    a064:	681b      	ldr	r3, [r3, #0]
    a066:	494e      	ldr	r1, [pc, #312]	; (a1a0 <bypass_cb+0x148>)
    a068:	6809      	ldr	r1, [r1, #0]
    a06a:	eba3 0901 	sub.w	r9, r3, r1
    a06e:	4b4d      	ldr	r3, [pc, #308]	; (a1a4 <bypass_cb+0x14c>)
    a070:	681b      	ldr	r3, [r3, #0]
    a072:	eba9 0903 	sub.w	r9, r9, r3
	uint32_t to_copy = MIN(len, left_to_read);
    a076:	4591      	cmp	r9, r2
    a078:	bf28      	it	cs
    a07a:	4691      	movcs	r9, r2
	uint32_t copied = 0;
    a07c:	2600      	movs	r6, #0
	while (copied < to_copy) {
    a07e:	e012      	b.n	a0a6 <bypass_cb+0x4e>
			shell_print(sh, "Written chunk %d", flash_load_chunk);
    a080:	4c49      	ldr	r4, [pc, #292]	; (a1a8 <bypass_cb+0x150>)
    a082:	6823      	ldr	r3, [r4, #0]
    a084:	4a49      	ldr	r2, [pc, #292]	; (a1ac <bypass_cb+0x154>)
    a086:	2108      	movs	r1, #8
    a088:	4658      	mov	r0, fp
    a08a:	f007 facf 	bl	1162c <shell_fprintf>
			flash_load_written += flash_load_buf_size;
    a08e:	4a44      	ldr	r2, [pc, #272]	; (a1a0 <bypass_cb+0x148>)
    a090:	6813      	ldr	r3, [r2, #0]
    a092:	4947      	ldr	r1, [pc, #284]	; (a1b0 <bypass_cb+0x158>)
    a094:	6809      	ldr	r1, [r1, #0]
    a096:	440b      	add	r3, r1
    a098:	6013      	str	r3, [r2, #0]
			flash_load_chunk++;
    a09a:	6823      	ldr	r3, [r4, #0]
    a09c:	3301      	adds	r3, #1
    a09e:	6023      	str	r3, [r4, #0]
			flash_load_boff = 0;
    a0a0:	4b40      	ldr	r3, [pc, #256]	; (a1a4 <bypass_cb+0x14c>)
    a0a2:	2200      	movs	r2, #0
    a0a4:	601a      	str	r2, [r3, #0]
	while (copied < to_copy) {
    a0a6:	454e      	cmp	r6, r9
    a0a8:	d230      	bcs.n	a10c <bypass_cb+0xb4>
		uint32_t buf_copy = MIN(to_copy, flash_load_buf_size - flash_load_boff);
    a0aa:	4f3e      	ldr	r7, [pc, #248]	; (a1a4 <bypass_cb+0x14c>)
    a0ac:	683b      	ldr	r3, [r7, #0]
    a0ae:	f8df 8100 	ldr.w	r8, [pc, #256]	; a1b0 <bypass_cb+0x158>
    a0b2:	f8d8 4000 	ldr.w	r4, [r8]
    a0b6:	1ae4      	subs	r4, r4, r3
    a0b8:	454c      	cmp	r4, r9
    a0ba:	bf28      	it	cs
    a0bc:	464c      	movcs	r4, r9
		memcpy(flash_load_buf + flash_load_boff, recv + copied, buf_copy);
    a0be:	4622      	mov	r2, r4
    a0c0:	eb0a 0106 	add.w	r1, sl, r6
    a0c4:	483b      	ldr	r0, [pc, #236]	; (a1b4 <bypass_cb+0x15c>)
    a0c6:	4418      	add	r0, r3
    a0c8:	f008 fe5f 	bl	12d8a <memcpy>
		flash_load_boff += buf_copy;
    a0cc:	683d      	ldr	r5, [r7, #0]
    a0ce:	4425      	add	r5, r4
    a0d0:	603d      	str	r5, [r7, #0]
		copied += buf_copy;
    a0d2:	4426      	add	r6, r4
		if (flash_load_boff == flash_load_buf_size) {
    a0d4:	f8d8 3000 	ldr.w	r3, [r8]
    a0d8:	429d      	cmp	r5, r3
    a0da:	d1e4      	bne.n	a0a6 <bypass_cb+0x4e>
			uint32_t addr = flash_load_addr + flash_load_written;
    a0dc:	4a36      	ldr	r2, [pc, #216]	; (a1b8 <bypass_cb+0x160>)
    a0de:	6814      	ldr	r4, [r2, #0]
    a0e0:	4a2f      	ldr	r2, [pc, #188]	; (a1a0 <bypass_cb+0x148>)
    a0e2:	6812      	ldr	r2, [r2, #0]
    a0e4:	4414      	add	r4, r2
			int rc = flash_write(flash_load_dev, addr, flash_load_buf,
    a0e6:	4a35      	ldr	r2, [pc, #212]	; (a1bc <bypass_cb+0x164>)
    a0e8:	6810      	ldr	r0, [r2, #0]
	const struct flash_driver_api *api =
    a0ea:	6882      	ldr	r2, [r0, #8]
	rc = api->write(dev, offset, data, len);
    a0ec:	6855      	ldr	r5, [r2, #4]
    a0ee:	4a31      	ldr	r2, [pc, #196]	; (a1b4 <bypass_cb+0x15c>)
    a0f0:	4621      	mov	r1, r4
    a0f2:	47a8      	blx	r5
			if (rc != 0) {
    a0f4:	2800      	cmp	r0, #0
    a0f6:	d0c3      	beq.n	a080 <bypass_cb+0x28>
				shell_error(sh, "Write to addr %x on dev %p ERROR!",
    a0f8:	4b30      	ldr	r3, [pc, #192]	; (a1bc <bypass_cb+0x164>)
    a0fa:	681b      	ldr	r3, [r3, #0]
    a0fc:	9300      	str	r3, [sp, #0]
    a0fe:	4623      	mov	r3, r4
    a100:	4a2f      	ldr	r2, [pc, #188]	; (a1c0 <bypass_cb+0x168>)
    a102:	2101      	movs	r1, #1
    a104:	4658      	mov	r0, fp
    a106:	f007 fa91 	bl	1162c <shell_fprintf>
    a10a:	e7b9      	b.n	a080 <bypass_cb+0x28>
	if (flash_load_written < flash_load_total &&
    a10c:	4b24      	ldr	r3, [pc, #144]	; (a1a0 <bypass_cb+0x148>)
    a10e:	681a      	ldr	r2, [r3, #0]
    a110:	4b22      	ldr	r3, [pc, #136]	; (a19c <bypass_cb+0x144>)
    a112:	6819      	ldr	r1, [r3, #0]
    a114:	428a      	cmp	r2, r1
    a116:	d21f      	bcs.n	a158 <bypass_cb+0x100>
			flash_load_written + flash_load_boff >= flash_load_total) {
    a118:	4b22      	ldr	r3, [pc, #136]	; (a1a4 <bypass_cb+0x14c>)
    a11a:	681b      	ldr	r3, [r3, #0]
    a11c:	18d0      	adds	r0, r2, r3
	if (flash_load_written < flash_load_total &&
    a11e:	4281      	cmp	r1, r0
    a120:	d81a      	bhi.n	a158 <bypass_cb+0x100>
		uint32_t addr = flash_load_addr + flash_load_written;
    a122:	4925      	ldr	r1, [pc, #148]	; (a1b8 <bypass_cb+0x160>)
    a124:	680c      	ldr	r4, [r1, #0]
    a126:	4414      	add	r4, r2
		int rc = flash_write(flash_load_dev, addr, flash_load_buf, flash_load_boff);
    a128:	4a24      	ldr	r2, [pc, #144]	; (a1bc <bypass_cb+0x164>)
    a12a:	6810      	ldr	r0, [r2, #0]
	const struct flash_driver_api *api =
    a12c:	6882      	ldr	r2, [r0, #8]
	rc = api->write(dev, offset, data, len);
    a12e:	6855      	ldr	r5, [r2, #4]
    a130:	4a20      	ldr	r2, [pc, #128]	; (a1b4 <bypass_cb+0x15c>)
    a132:	4621      	mov	r1, r4
    a134:	47a8      	blx	r5
		if (rc != 0) {
    a136:	b9c0      	cbnz	r0, a16a <bypass_cb+0x112>
		shell_print(sh, "Written chunk %d", flash_load_chunk);
    a138:	4c1b      	ldr	r4, [pc, #108]	; (a1a8 <bypass_cb+0x150>)
    a13a:	6823      	ldr	r3, [r4, #0]
    a13c:	4a1b      	ldr	r2, [pc, #108]	; (a1ac <bypass_cb+0x154>)
    a13e:	2108      	movs	r1, #8
    a140:	4658      	mov	r0, fp
    a142:	f007 fa73 	bl	1162c <shell_fprintf>
		flash_load_written += flash_load_boff;
    a146:	4a16      	ldr	r2, [pc, #88]	; (a1a0 <bypass_cb+0x148>)
    a148:	6813      	ldr	r3, [r2, #0]
    a14a:	4916      	ldr	r1, [pc, #88]	; (a1a4 <bypass_cb+0x14c>)
    a14c:	6809      	ldr	r1, [r1, #0]
    a14e:	440b      	add	r3, r1
    a150:	6013      	str	r3, [r2, #0]
		flash_load_chunk++;
    a152:	6823      	ldr	r3, [r4, #0]
    a154:	3301      	adds	r3, #1
    a156:	6023      	str	r3, [r4, #0]
	if (flash_load_written >= flash_load_total) {
    a158:	4b11      	ldr	r3, [pc, #68]	; (a1a0 <bypass_cb+0x148>)
    a15a:	681a      	ldr	r2, [r3, #0]
    a15c:	4b0f      	ldr	r3, [pc, #60]	; (a19c <bypass_cb+0x144>)
    a15e:	681b      	ldr	r3, [r3, #0]
    a160:	429a      	cmp	r2, r3
    a162:	d210      	bcs.n	a186 <bypass_cb+0x12e>
}
    a164:	b003      	add	sp, #12
    a166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			set_bypass(sh, NULL);
    a16a:	2100      	movs	r1, #0
    a16c:	4658      	mov	r0, fp
    a16e:	f7ff fec3 	bl	9ef8 <set_bypass>
			shell_error(sh, "Write to addr %x on dev %p ERROR!",
    a172:	4b12      	ldr	r3, [pc, #72]	; (a1bc <bypass_cb+0x164>)
    a174:	681b      	ldr	r3, [r3, #0]
    a176:	9300      	str	r3, [sp, #0]
    a178:	4623      	mov	r3, r4
    a17a:	4a11      	ldr	r2, [pc, #68]	; (a1c0 <bypass_cb+0x168>)
    a17c:	2101      	movs	r1, #1
    a17e:	4658      	mov	r0, fp
    a180:	f007 fa54 	bl	1162c <shell_fprintf>
			return;
    a184:	e7ee      	b.n	a164 <bypass_cb+0x10c>
		set_bypass(sh, NULL);
    a186:	2100      	movs	r1, #0
    a188:	4658      	mov	r0, fp
    a18a:	f7ff feb5 	bl	9ef8 <set_bypass>
		shell_print(sh, "Read all");
    a18e:	4a0d      	ldr	r2, [pc, #52]	; (a1c4 <bypass_cb+0x16c>)
    a190:	2108      	movs	r1, #8
    a192:	4658      	mov	r0, fp
    a194:	f007 fa4a 	bl	1162c <shell_fprintf>
    a198:	e7e4      	b.n	a164 <bypass_cb+0x10c>
    a19a:	bf00      	nop
    a19c:	20002728 	.word	0x20002728
    a1a0:	20002724 	.word	0x20002724
    a1a4:	2000271c 	.word	0x2000271c
    a1a8:	20002720 	.word	0x20002720
    a1ac:	0001827c 	.word	0x0001827c
    a1b0:	20002730 	.word	0x20002730
    a1b4:	2000261c 	.word	0x2000261c
    a1b8:	2000272c 	.word	0x2000272c
    a1bc:	20002734 	.word	0x20002734
    a1c0:	00018258 	.word	0x00018258
    a1c4:	00018290 	.word	0x00018290

0000a1c8 <cmd_write>:
{
    a1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a1ca:	b0ab      	sub	sp, #172	; 0xac
    a1cc:	4607      	mov	r7, r0
    a1ce:	9103      	str	r1, [sp, #12]
    a1d0:	9202      	str	r2, [sp, #8]
	ret = parse_helper(sh, &argc, &argv, &flash_dev, &w_addr);
    a1d2:	ab04      	add	r3, sp, #16
    a1d4:	9300      	str	r3, [sp, #0]
    a1d6:	ab05      	add	r3, sp, #20
    a1d8:	aa02      	add	r2, sp, #8
    a1da:	a903      	add	r1, sp, #12
    a1dc:	f7ff fdba 	bl	9d54 <parse_helper>
	if (ret) {
    a1e0:	4604      	mov	r4, r0
    a1e2:	2800      	cmp	r0, #0
    a1e4:	d144      	bne.n	a270 <cmd_write+0xa8>
	if (argc <= 2) {
    a1e6:	9b03      	ldr	r3, [sp, #12]
    a1e8:	2b02      	cmp	r3, #2
    a1ea:	d902      	bls.n	a1f2 <cmd_write+0x2a>
	for (int i = 2; i < argc; i++) {
    a1ec:	2402      	movs	r4, #2
	op_size = 0;
    a1ee:	2600      	movs	r6, #0
    a1f0:	e019      	b.n	a226 <cmd_write+0x5e>
		shell_error(sh, "Missing data to be written.");
    a1f2:	4a2d      	ldr	r2, [pc, #180]	; (a2a8 <cmd_write+0xe0>)
    a1f4:	2101      	movs	r1, #1
    a1f6:	4638      	mov	r0, r7
    a1f8:	f007 fa18 	bl	1162c <shell_fprintf>
		return -EINVAL;
    a1fc:	f06f 0415 	mvn.w	r4, #21
    a200:	e036      	b.n	a270 <cmd_write+0xa8>
		int j = i - 2;
    a202:	1ea5      	subs	r5, r4, #2
		buf_array[j] = strtoul(argv[i], NULL, 16);
    a204:	2210      	movs	r2, #16
    a206:	2100      	movs	r1, #0
    a208:	9b02      	ldr	r3, [sp, #8]
    a20a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    a20e:	f008 fc8c 	bl	12b2a <strtoul>
    a212:	ab2a      	add	r3, sp, #168	; 0xa8
    a214:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    a218:	f843 0c90 	str.w	r0, [r3, #-144]
		check_array[j] = ~buf_array[j];
    a21c:	43c0      	mvns	r0, r0
    a21e:	f843 0c48 	str.w	r0, [r3, #-72]
		op_size += sizeof(buf_array[0]);
    a222:	3604      	adds	r6, #4
	for (int i = 2; i < argc; i++) {
    a224:	3401      	adds	r4, #1
    a226:	9b03      	ldr	r3, [sp, #12]
    a228:	429c      	cmp	r4, r3
    a22a:	d3ea      	bcc.n	a202 <cmd_write+0x3a>
	if (flash_write(flash_dev, w_addr, buf_array, op_size) != 0) {
    a22c:	9805      	ldr	r0, [sp, #20]
    a22e:	9904      	ldr	r1, [sp, #16]
	const struct flash_driver_api *api =
    a230:	6883      	ldr	r3, [r0, #8]
	rc = api->write(dev, offset, data, len);
    a232:	685c      	ldr	r4, [r3, #4]
    a234:	4633      	mov	r3, r6
    a236:	aa06      	add	r2, sp, #24
    a238:	47a0      	blx	r4
    a23a:	b9e0      	cbnz	r0, a276 <cmd_write+0xae>
	shell_print(sh, "Write OK.");
    a23c:	4a1b      	ldr	r2, [pc, #108]	; (a2ac <cmd_write+0xe4>)
    a23e:	2108      	movs	r1, #8
    a240:	4638      	mov	r0, r7
    a242:	f007 f9f3 	bl	1162c <shell_fprintf>
	if (flash_read(flash_dev, w_addr, check_array, op_size) < 0) {
    a246:	9805      	ldr	r0, [sp, #20]
    a248:	9904      	ldr	r1, [sp, #16]
	const struct flash_driver_api *api =
    a24a:	6883      	ldr	r3, [r0, #8]
	return api->read(dev, offset, data, len);
    a24c:	681c      	ldr	r4, [r3, #0]
    a24e:	4633      	mov	r3, r6
    a250:	aa18      	add	r2, sp, #96	; 0x60
    a252:	47a0      	blx	r4
    a254:	2800      	cmp	r0, #0
    a256:	db16      	blt.n	a286 <cmd_write+0xbe>
	if (memcmp(buf_array, check_array, op_size) == 0) {
    a258:	4632      	mov	r2, r6
    a25a:	a918      	add	r1, sp, #96	; 0x60
    a25c:	a806      	add	r0, sp, #24
    a25e:	f008 fd6f 	bl	12d40 <memcmp>
    a262:	4604      	mov	r4, r0
    a264:	b9b8      	cbnz	r0, a296 <cmd_write+0xce>
		shell_print(sh, "Verified.");
    a266:	4a12      	ldr	r2, [pc, #72]	; (a2b0 <cmd_write+0xe8>)
    a268:	2108      	movs	r1, #8
    a26a:	4638      	mov	r0, r7
    a26c:	f007 f9de 	bl	1162c <shell_fprintf>
}
    a270:	4620      	mov	r0, r4
    a272:	b02b      	add	sp, #172	; 0xac
    a274:	bdf0      	pop	{r4, r5, r6, r7, pc}
		shell_error(sh, "Write internal ERROR!");
    a276:	4a0f      	ldr	r2, [pc, #60]	; (a2b4 <cmd_write+0xec>)
    a278:	2101      	movs	r1, #1
    a27a:	4638      	mov	r0, r7
    a27c:	f007 f9d6 	bl	1162c <shell_fprintf>
		return -EIO;
    a280:	f06f 0404 	mvn.w	r4, #4
    a284:	e7f4      	b.n	a270 <cmd_write+0xa8>
		shell_print(sh, "Verification read ERROR!");
    a286:	4a0c      	ldr	r2, [pc, #48]	; (a2b8 <cmd_write+0xf0>)
    a288:	2108      	movs	r1, #8
    a28a:	4638      	mov	r0, r7
    a28c:	f007 f9ce 	bl	1162c <shell_fprintf>
		return -EIO;
    a290:	f06f 0404 	mvn.w	r4, #4
    a294:	e7ec      	b.n	a270 <cmd_write+0xa8>
		shell_error(sh, "Verification ERROR!");
    a296:	4a09      	ldr	r2, [pc, #36]	; (a2bc <cmd_write+0xf4>)
    a298:	2101      	movs	r1, #1
    a29a:	4638      	mov	r0, r7
    a29c:	f007 f9c6 	bl	1162c <shell_fprintf>
		return -EIO;
    a2a0:	f06f 0404 	mvn.w	r4, #4
    a2a4:	e7e4      	b.n	a270 <cmd_write+0xa8>
    a2a6:	bf00      	nop
    a2a8:	0001829c 	.word	0x0001829c
    a2ac:	000182d4 	.word	0x000182d4
    a2b0:	000182fc 	.word	0x000182fc
    a2b4:	000182bc 	.word	0x000182bc
    a2b8:	000182e0 	.word	0x000182e0
    a2bc:	00018308 	.word	0x00018308

0000a2c0 <cmd_test>:
{
    a2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a2c2:	b087      	sub	sp, #28
    a2c4:	4606      	mov	r6, r0
    a2c6:	9103      	str	r1, [sp, #12]
    a2c8:	9202      	str	r2, [sp, #8]
	result = parse_helper(sh, &argc, &argv, &flash_dev, &addr);
    a2ca:	ab04      	add	r3, sp, #16
    a2cc:	9300      	str	r3, [sp, #0]
    a2ce:	ab05      	add	r3, sp, #20
    a2d0:	aa02      	add	r2, sp, #8
    a2d2:	a903      	add	r1, sp, #12
    a2d4:	f7ff fd3e 	bl	9d54 <parse_helper>
	if (result) {
    a2d8:	4604      	mov	r4, r0
    a2da:	b110      	cbz	r0, a2e2 <cmd_test+0x22>
}
    a2dc:	4620      	mov	r0, r4
    a2de:	b007      	add	sp, #28
    a2e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size = strtoul(argv[2], NULL, 16);
    a2e2:	2210      	movs	r2, #16
    a2e4:	2100      	movs	r1, #0
    a2e6:	9b02      	ldr	r3, [sp, #8]
    a2e8:	6898      	ldr	r0, [r3, #8]
    a2ea:	f008 fc1e 	bl	12b2a <strtoul>
    a2ee:	4605      	mov	r5, r0
	repeat = strtoul(argv[3], NULL, 16);
    a2f0:	2210      	movs	r2, #16
    a2f2:	2100      	movs	r1, #0
    a2f4:	9b02      	ldr	r3, [sp, #8]
    a2f6:	68d8      	ldr	r0, [r3, #12]
    a2f8:	f008 fc17 	bl	12b2a <strtoul>
	if (size > CONFIG_FLASH_SHELL_BUFFER_SIZE) {
    a2fc:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    a300:	d803      	bhi.n	a30a <cmd_test+0x4a>
	if (repeat == 0) {
    a302:	b900      	cbnz	r0, a306 <cmd_test+0x46>
		repeat = 1;
    a304:	2001      	movs	r0, #1
	for (uint32_t i = 0; i < size; i++) {
    a306:	2300      	movs	r3, #0
    a308:	e00c      	b.n	a324 <cmd_test+0x64>
		shell_error(sh, "<size> must be at most 0x%x.",
    a30a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    a30e:	4a33      	ldr	r2, [pc, #204]	; (a3dc <cmd_test+0x11c>)
    a310:	2101      	movs	r1, #1
    a312:	4630      	mov	r0, r6
    a314:	f007 f98a 	bl	1162c <shell_fprintf>
		return -EINVAL;
    a318:	f06f 0415 	mvn.w	r4, #21
    a31c:	e7de      	b.n	a2dc <cmd_test+0x1c>
		test_arr[i] = (uint8_t)i;
    a31e:	4a30      	ldr	r2, [pc, #192]	; (a3e0 <cmd_test+0x120>)
    a320:	54d3      	strb	r3, [r2, r3]
	for (uint32_t i = 0; i < size; i++) {
    a322:	3301      	adds	r3, #1
    a324:	42ab      	cmp	r3, r5
    a326:	d3fa      	bcc.n	a31e <cmd_test+0x5e>
    a328:	e021      	b.n	a36e <cmd_test+0xae>
			shell_error(sh, "Erase Failed, code %d.", result);
    a32a:	4603      	mov	r3, r0
    a32c:	4a2d      	ldr	r2, [pc, #180]	; (a3e4 <cmd_test+0x124>)
    a32e:	2101      	movs	r1, #1
    a330:	4630      	mov	r0, r6
    a332:	f007 f97b 	bl	1162c <shell_fprintf>
	if (result == 0) {
    a336:	2c00      	cmp	r4, #0
    a338:	d1d0      	bne.n	a2dc <cmd_test+0x1c>
		shell_print(sh, "Erase-Write-Verify test done.");
    a33a:	4a2b      	ldr	r2, [pc, #172]	; (a3e8 <cmd_test+0x128>)
    a33c:	2108      	movs	r1, #8
    a33e:	4630      	mov	r0, r6
    a340:	f007 f974 	bl	1162c <shell_fprintf>
    a344:	e7ca      	b.n	a2dc <cmd_test+0x1c>
			shell_error(sh, "Write failed, code %d", result);
    a346:	4603      	mov	r3, r0
    a348:	4a28      	ldr	r2, [pc, #160]	; (a3ec <cmd_test+0x12c>)
    a34a:	2101      	movs	r1, #1
    a34c:	4630      	mov	r0, r6
    a34e:	f007 f96d 	bl	1162c <shell_fprintf>
			break;
    a352:	e7f0      	b.n	a336 <cmd_test+0x76>
			shell_print(sh, "Verification read failed, code: %d", result);
    a354:	4623      	mov	r3, r4
    a356:	4a26      	ldr	r2, [pc, #152]	; (a3f0 <cmd_test+0x130>)
    a358:	2108      	movs	r1, #8
    a35a:	4630      	mov	r0, r6
    a35c:	f007 f966 	bl	1162c <shell_fprintf>
			break;
    a360:	e7e9      	b.n	a336 <cmd_test+0x76>
		shell_print(sh, "Verified OK.");
    a362:	4a24      	ldr	r2, [pc, #144]	; (a3f4 <cmd_test+0x134>)
    a364:	2108      	movs	r1, #8
    a366:	4630      	mov	r0, r6
    a368:	f007 f960 	bl	1162c <shell_fprintf>
	while (repeat--) {
    a36c:	4638      	mov	r0, r7
    a36e:	1e47      	subs	r7, r0, #1
    a370:	2800      	cmp	r0, #0
    a372:	d0e0      	beq.n	a336 <cmd_test+0x76>
		result = flash_erase(flash_dev, addr, size);
    a374:	9805      	ldr	r0, [sp, #20]
    a376:	9904      	ldr	r1, [sp, #16]
	const struct flash_driver_api *api =
    a378:	6883      	ldr	r3, [r0, #8]
	rc = api->erase(dev, offset, size);
    a37a:	689b      	ldr	r3, [r3, #8]
    a37c:	462a      	mov	r2, r5
    a37e:	4798      	blx	r3
		if (result) {
    a380:	4604      	mov	r4, r0
    a382:	2800      	cmp	r0, #0
    a384:	d1d1      	bne.n	a32a <cmd_test+0x6a>
		shell_print(sh, "Erase OK.");
    a386:	4a1c      	ldr	r2, [pc, #112]	; (a3f8 <cmd_test+0x138>)
    a388:	2108      	movs	r1, #8
    a38a:	4630      	mov	r0, r6
    a38c:	f007 f94e 	bl	1162c <shell_fprintf>
		result = flash_write(flash_dev, addr, test_arr, size);
    a390:	9805      	ldr	r0, [sp, #20]
    a392:	9904      	ldr	r1, [sp, #16]
	const struct flash_driver_api *api =
    a394:	6883      	ldr	r3, [r0, #8]
	rc = api->write(dev, offset, data, len);
    a396:	685c      	ldr	r4, [r3, #4]
    a398:	462b      	mov	r3, r5
    a39a:	4a11      	ldr	r2, [pc, #68]	; (a3e0 <cmd_test+0x120>)
    a39c:	47a0      	blx	r4
		if (result) {
    a39e:	4604      	mov	r4, r0
    a3a0:	2800      	cmp	r0, #0
    a3a2:	d1d0      	bne.n	a346 <cmd_test+0x86>
		shell_print(sh, "Write OK.");
    a3a4:	4a15      	ldr	r2, [pc, #84]	; (a3fc <cmd_test+0x13c>)
    a3a6:	2108      	movs	r1, #8
    a3a8:	4630      	mov	r0, r6
    a3aa:	f007 f93f 	bl	1162c <shell_fprintf>
		result = flash_read(flash_dev, addr, check_arr, size);
    a3ae:	9805      	ldr	r0, [sp, #20]
    a3b0:	9904      	ldr	r1, [sp, #16]
	const struct flash_driver_api *api =
    a3b2:	6883      	ldr	r3, [r0, #8]
	return api->read(dev, offset, data, len);
    a3b4:	681c      	ldr	r4, [r3, #0]
    a3b6:	462b      	mov	r3, r5
    a3b8:	4a11      	ldr	r2, [pc, #68]	; (a400 <cmd_test+0x140>)
    a3ba:	47a0      	blx	r4
		if (result < 0) {
    a3bc:	1e04      	subs	r4, r0, #0
    a3be:	dbc9      	blt.n	a354 <cmd_test+0x94>
		if (memcmp(test_arr, check_arr, size) != 0) {
    a3c0:	462a      	mov	r2, r5
    a3c2:	490f      	ldr	r1, [pc, #60]	; (a400 <cmd_test+0x140>)
    a3c4:	4806      	ldr	r0, [pc, #24]	; (a3e0 <cmd_test+0x120>)
    a3c6:	f008 fcbb 	bl	12d40 <memcmp>
    a3ca:	2800      	cmp	r0, #0
    a3cc:	d0c9      	beq.n	a362 <cmd_test+0xa2>
			shell_error(sh, "Verification ERROR!");
    a3ce:	4a0d      	ldr	r2, [pc, #52]	; (a404 <cmd_test+0x144>)
    a3d0:	2101      	movs	r1, #1
    a3d2:	4630      	mov	r0, r6
    a3d4:	f007 f92a 	bl	1162c <shell_fprintf>
			break;
    a3d8:	e7ad      	b.n	a336 <cmd_test+0x76>
    a3da:	bf00      	nop
    a3dc:	00018320 	.word	0x00018320
    a3e0:	20002738 	.word	0x20002738
    a3e4:	0001810c 	.word	0x0001810c
    a3e8:	00018398 	.word	0x00018398
    a3ec:	0001834c 	.word	0x0001834c
    a3f0:	00018364 	.word	0x00018364
    a3f4:	00018388 	.word	0x00018388
    a3f8:	00018340 	.word	0x00018340
    a3fc:	000182d4 	.word	0x000182d4
    a400:	2000161c 	.word	0x2000161c
    a404:	00018308 	.word	0x00018308

0000a408 <cmd_read>:
{
    a408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a40c:	b08b      	sub	sp, #44	; 0x2c
    a40e:	4607      	mov	r7, r0
    a410:	9103      	str	r1, [sp, #12]
    a412:	9202      	str	r2, [sp, #8]
	ret = parse_helper(sh, &argc, &argv, &flash_dev, &addr);
    a414:	ab08      	add	r3, sp, #32
    a416:	9300      	str	r3, [sp, #0]
    a418:	ab09      	add	r3, sp, #36	; 0x24
    a41a:	aa02      	add	r2, sp, #8
    a41c:	a903      	add	r1, sp, #12
    a41e:	f7ff fc99 	bl	9d54 <parse_helper>
	if (ret) {
    a422:	4680      	mov	r8, r0
    a424:	2800      	cmp	r0, #0
    a426:	d133      	bne.n	a490 <cmd_read+0x88>
	if (argc > 2) {
    a428:	9b03      	ldr	r3, [sp, #12]
    a42a:	2b02      	cmp	r3, #2
    a42c:	d81b      	bhi.n	a466 <cmd_read+0x5e>
		cnt = 1;
    a42e:	2601      	movs	r6, #1
	for (upto = 0; upto < cnt; upto += todo) {
    a430:	4645      	mov	r5, r8
    a432:	42b5      	cmp	r5, r6
    a434:	da27      	bge.n	a486 <cmd_read+0x7e>
		todo = MIN(cnt - upto, SHELL_HEXDUMP_BYTES_IN_LINE);
    a436:	1b74      	subs	r4, r6, r5
    a438:	2c10      	cmp	r4, #16
    a43a:	bfa8      	it	ge
    a43c:	2410      	movge	r4, #16
		ret = flash_read(flash_dev, addr, data, todo);
    a43e:	9809      	ldr	r0, [sp, #36]	; 0x24
    a440:	9908      	ldr	r1, [sp, #32]
	const struct flash_driver_api *api =
    a442:	6883      	ldr	r3, [r0, #8]
	return api->read(dev, offset, data, len);
    a444:	f8d3 9000 	ldr.w	r9, [r3]
    a448:	4623      	mov	r3, r4
    a44a:	aa04      	add	r2, sp, #16
    a44c:	47c8      	blx	r9
		if (ret != 0) {
    a44e:	b990      	cbnz	r0, a476 <cmd_read+0x6e>
		shell_hexdump_line(sh, addr, data, todo);
    a450:	4623      	mov	r3, r4
    a452:	aa04      	add	r2, sp, #16
    a454:	9908      	ldr	r1, [sp, #32]
    a456:	4638      	mov	r0, r7
    a458:	f7fc fe46 	bl	70e8 <shell_hexdump_line>
		addr += todo;
    a45c:	9b08      	ldr	r3, [sp, #32]
    a45e:	4423      	add	r3, r4
    a460:	9308      	str	r3, [sp, #32]
	for (upto = 0; upto < cnt; upto += todo) {
    a462:	4425      	add	r5, r4
    a464:	e7e5      	b.n	a432 <cmd_read+0x2a>
		cnt = strtoul(argv[2], NULL, 16);
    a466:	2210      	movs	r2, #16
    a468:	2100      	movs	r1, #0
    a46a:	9b02      	ldr	r3, [sp, #8]
    a46c:	6898      	ldr	r0, [r3, #8]
    a46e:	f008 fb5c 	bl	12b2a <strtoul>
    a472:	4606      	mov	r6, r0
    a474:	e7dc      	b.n	a430 <cmd_read+0x28>
			shell_error(sh, "Read ERROR!");
    a476:	4a08      	ldr	r2, [pc, #32]	; (a498 <cmd_read+0x90>)
    a478:	2101      	movs	r1, #1
    a47a:	4638      	mov	r0, r7
    a47c:	f007 f8d6 	bl	1162c <shell_fprintf>
			return -EIO;
    a480:	f06f 0804 	mvn.w	r8, #4
    a484:	e004      	b.n	a490 <cmd_read+0x88>
	shell_print(sh, "");
    a486:	4a05      	ldr	r2, [pc, #20]	; (a49c <cmd_read+0x94>)
    a488:	2108      	movs	r1, #8
    a48a:	4638      	mov	r0, r7
    a48c:	f007 f8ce 	bl	1162c <shell_fprintf>
}
    a490:	4640      	mov	r0, r8
    a492:	b00b      	add	sp, #44	; 0x2c
    a494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a498:	000183b8 	.word	0x000183b8
    a49c:	00015ec0 	.word	0x00015ec0

0000a4a0 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    a4a0:	b908      	cbnz	r0, a4a6 <get_dev+0x6>
    a4a2:	4802      	ldr	r0, [pc, #8]	; (a4ac <get_dev+0xc>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    a4a4:	4770      	bx	lr
	const struct device *dev = NULL;
    a4a6:	2000      	movs	r0, #0
    a4a8:	4770      	bx	lr
    a4aa:	bf00      	nop
    a4ac:	00015104 	.word	0x00015104

0000a4b0 <gpio_nrfx_pin_interrupt_configure>:
{
    a4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4b2:	b085      	sub	sp, #20
    a4b4:	460e      	mov	r6, r1
    a4b6:	4619      	mov	r1, r3
	return port->config;
    a4b8:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    a4ba:	7b1b      	ldrb	r3, [r3, #12]
    a4bc:	f006 051f 	and.w	r5, r6, #31
    a4c0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    a4c4:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    a4c8:	d022      	beq.n	a510 <gpio_nrfx_pin_interrupt_configure+0x60>
    a4ca:	4607      	mov	r7, r0
    a4cc:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    a4ce:	2300      	movs	r3, #0
    a4d0:	9301      	str	r3, [sp, #4]
    a4d2:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
    a4d4:	4610      	mov	r0, r2
    a4d6:	f009 f935 	bl	13744 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    a4da:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
    a4de:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    a4e0:	6899      	ldr	r1, [r3, #8]
    a4e2:	40f1      	lsrs	r1, r6
    a4e4:	f011 0f01 	tst.w	r1, #1
    a4e8:	d102      	bne.n	a4f0 <gpio_nrfx_pin_interrupt_configure+0x40>
    a4ea:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
    a4ee:	d014      	beq.n	a51a <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    a4f0:	2300      	movs	r3, #0
    a4f2:	aa01      	add	r2, sp, #4
    a4f4:	4619      	mov	r1, r3
    a4f6:	4628      	mov	r0, r5
    a4f8:	f002 f82e 	bl	c558 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    a4fc:	4b19      	ldr	r3, [pc, #100]	; (a564 <gpio_nrfx_pin_interrupt_configure+0xb4>)
    a4fe:	4298      	cmp	r0, r3
    a500:	d12c      	bne.n	a55c <gpio_nrfx_pin_interrupt_configure+0xac>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    a502:	2101      	movs	r1, #1
    a504:	4628      	mov	r0, r5
    a506:	f002 f987 	bl	c818 <nrfx_gpiote_trigger_enable>
	return 0;
    a50a:	2000      	movs	r0, #0
}
    a50c:	b005      	add	sp, #20
    a50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    a510:	4628      	mov	r0, r5
    a512:	f002 f9bd 	bl	c890 <nrfx_gpiote_trigger_disable>
		return 0;
    a516:	2000      	movs	r0, #0
    a518:	e7f8      	b.n	a50c <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    a51a:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    a51e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    a522:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    a526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    a52a:	f013 0f01 	tst.w	r3, #1
    a52e:	d1df      	bne.n	a4f0 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    a530:	f10d 010f 	add.w	r1, sp, #15
    a534:	4628      	mov	r0, r5
    a536:	f002 f913 	bl	c760 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    a53a:	4b0b      	ldr	r3, [pc, #44]	; (a568 <gpio_nrfx_pin_interrupt_configure+0xb8>)
    a53c:	4298      	cmp	r0, r3
    a53e:	d003      	beq.n	a548 <gpio_nrfx_pin_interrupt_configure+0x98>
		trigger_config.p_in_channel = &ch;
    a540:	f10d 030f 	add.w	r3, sp, #15
    a544:	9302      	str	r3, [sp, #8]
    a546:	e7d3      	b.n	a4f0 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
    a548:	f10d 000f 	add.w	r0, sp, #15
    a54c:	f002 f95c 	bl	c808 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    a550:	4b04      	ldr	r3, [pc, #16]	; (a564 <gpio_nrfx_pin_interrupt_configure+0xb4>)
    a552:	4298      	cmp	r0, r3
    a554:	d0f4      	beq.n	a540 <gpio_nrfx_pin_interrupt_configure+0x90>
				return -ENOMEM;
    a556:	f06f 000b 	mvn.w	r0, #11
    a55a:	e7d7      	b.n	a50c <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
    a55c:	f06f 0015 	mvn.w	r0, #21
    a560:	e7d4      	b.n	a50c <gpio_nrfx_pin_interrupt_configure+0x5c>
    a562:	bf00      	nop
    a564:	0bad0000 	.word	0x0bad0000
    a568:	0bad0004 	.word	0x0bad0004

0000a56c <gpio_nrfx_pin_configure>:
{
    a56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a570:	b086      	sub	sp, #24
    a572:	460e      	mov	r6, r1
    a574:	4614      	mov	r4, r2
	return port->config;
    a576:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    a57a:	f898 300c 	ldrb.w	r3, [r8, #12]
    a57e:	f001 051f 	and.w	r5, r1, #31
    a582:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    a586:	f10d 0117 	add.w	r1, sp, #23
    a58a:	4628      	mov	r0, r5
    a58c:	f002 f8e8 	bl	c760 <nrfx_gpiote_channel_get>
    a590:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    a592:	f414 3f40 	tst.w	r4, #196608	; 0x30000
    a596:	d03a      	beq.n	a60e <gpio_nrfx_pin_configure+0xa2>
	nrfx_gpiote_trigger_config_t trigger_config = {
    a598:	2100      	movs	r1, #0
    a59a:	9103      	str	r1, [sp, #12]
    a59c:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    a59e:	460b      	mov	r3, r1
    a5a0:	aa03      	add	r2, sp, #12
    a5a2:	4628      	mov	r0, r5
    a5a4:	f001 ffd8 	bl	c558 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    a5a8:	4b33      	ldr	r3, [pc, #204]	; (a678 <gpio_nrfx_pin_configure+0x10c>)
    a5aa:	4298      	cmp	r0, r3
    a5ac:	d161      	bne.n	a672 <gpio_nrfx_pin_configure+0x106>
	if (free_ch) {
    a5ae:	429f      	cmp	r7, r3
    a5b0:	d03d      	beq.n	a62e <gpio_nrfx_pin_configure+0xc2>
	if (flags & GPIO_OUTPUT) {
    a5b2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
    a5b6:	d049      	beq.n	a64c <gpio_nrfx_pin_configure+0xe0>
		int rv = get_drive(flags, &drive);
    a5b8:	f10d 0103 	add.w	r1, sp, #3
    a5bc:	4620      	mov	r0, r4
    a5be:	f009 f846 	bl	1364e <get_drive>
		if (rv != 0) {
    a5c2:	4607      	mov	r7, r0
    a5c4:	bb50      	cbnz	r0, a61c <gpio_nrfx_pin_configure+0xb0>
		nrfx_gpiote_output_config_t output_config = {
    a5c6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a5ca:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    a5ce:	f414 3f80 	tst.w	r4, #65536	; 0x10000
    a5d2:	bf0c      	ite	eq
    a5d4:	2301      	moveq	r3, #1
    a5d6:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    a5d8:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    a5dc:	4620      	mov	r0, r4
    a5de:	f009 f879 	bl	136d4 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    a5e2:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    a5e6:	f414 2f00 	tst.w	r4, #524288	; 0x80000
    a5ea:	d025      	beq.n	a638 <gpio_nrfx_pin_configure+0xcc>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    a5ec:	f8d8 2004 	ldr.w	r2, [r8, #4]
    a5f0:	2301      	movs	r3, #1
    a5f2:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    a5f4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    a5f8:	2200      	movs	r2, #0
    a5fa:	a901      	add	r1, sp, #4
    a5fc:	4628      	mov	r0, r5
    a5fe:	f002 f83f 	bl	c680 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    a602:	4b1d      	ldr	r3, [pc, #116]	; (a678 <gpio_nrfx_pin_configure+0x10c>)
    a604:	4298      	cmp	r0, r3
    a606:	d009      	beq.n	a61c <gpio_nrfx_pin_configure+0xb0>
    a608:	f06f 0715 	mvn.w	r7, #21
    a60c:	e006      	b.n	a61c <gpio_nrfx_pin_configure+0xb0>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    a60e:	4628      	mov	r0, r5
    a610:	f002 f968 	bl	c8e4 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    a614:	4b18      	ldr	r3, [pc, #96]	; (a678 <gpio_nrfx_pin_configure+0x10c>)
    a616:	429f      	cmp	r7, r3
    a618:	d004      	beq.n	a624 <gpio_nrfx_pin_configure+0xb8>
		return 0;
    a61a:	2700      	movs	r7, #0
}
    a61c:	4638      	mov	r0, r7
    a61e:	b006      	add	sp, #24
    a620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
    a624:	f89d 0017 	ldrb.w	r0, [sp, #23]
    a628:	f002 f8e6 	bl	c7f8 <nrfx_gpiote_channel_free>
    a62c:	e7f5      	b.n	a61a <gpio_nrfx_pin_configure+0xae>
		err = nrfx_gpiote_channel_free(ch);
    a62e:	f89d 0017 	ldrb.w	r0, [sp, #23]
    a632:	f002 f8e1 	bl	c7f8 <nrfx_gpiote_channel_free>
    a636:	e7bc      	b.n	a5b2 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    a638:	f414 2f80 	tst.w	r4, #262144	; 0x40000
    a63c:	d0dc      	beq.n	a5f8 <gpio_nrfx_pin_configure+0x8c>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    a63e:	f8d8 2004 	ldr.w	r2, [r8, #4]
    a642:	2301      	movs	r3, #1
    a644:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
    a646:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    a64a:	e7d5      	b.n	a5f8 <gpio_nrfx_pin_configure+0x8c>
		.pull = get_pull(flags)
    a64c:	4620      	mov	r0, r4
    a64e:	f009 f841 	bl	136d4 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    a652:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    a656:	2300      	movs	r3, #0
    a658:	461a      	mov	r2, r3
    a65a:	a902      	add	r1, sp, #8
    a65c:	4628      	mov	r0, r5
    a65e:	f001 ff7b 	bl	c558 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    a662:	4b05      	ldr	r3, [pc, #20]	; (a678 <gpio_nrfx_pin_configure+0x10c>)
    a664:	4298      	cmp	r0, r3
    a666:	d101      	bne.n	a66c <gpio_nrfx_pin_configure+0x100>
    a668:	2700      	movs	r7, #0
    a66a:	e7d7      	b.n	a61c <gpio_nrfx_pin_configure+0xb0>
    a66c:	f06f 0715 	mvn.w	r7, #21
    a670:	e7d4      	b.n	a61c <gpio_nrfx_pin_configure+0xb0>
		return -EINVAL;
    a672:	f06f 0715 	mvn.w	r7, #21
    a676:	e7d1      	b.n	a61c <gpio_nrfx_pin_configure+0xb0>
    a678:	0bad0000 	.word	0x0bad0000

0000a67c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    a67c:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    a67e:	f002 f8b1 	bl	c7e4 <nrfx_gpiote_is_init>
    a682:	b108      	cbz	r0, a688 <gpio_nrfx_init+0xc>
		return 0;
    a684:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    a686:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    a688:	f002 f882 	bl	c790 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    a68c:	4b08      	ldr	r3, [pc, #32]	; (a6b0 <gpio_nrfx_init+0x34>)
    a68e:	4298      	cmp	r0, r3
    a690:	d10a      	bne.n	a6a8 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    a692:	2100      	movs	r1, #0
    a694:	4807      	ldr	r0, [pc, #28]	; (a6b4 <gpio_nrfx_init+0x38>)
    a696:	f002 f85d 	bl	c754 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    a69a:	2200      	movs	r2, #0
    a69c:	2105      	movs	r1, #5
    a69e:	2006      	movs	r0, #6
    a6a0:	f008 f94a 	bl	12938 <z_arm_irq_priority_set>
	return 0;
    a6a4:	2000      	movs	r0, #0
    a6a6:	e7ee      	b.n	a686 <gpio_nrfx_init+0xa>
		return -EIO;
    a6a8:	f06f 0004 	mvn.w	r0, #4
    a6ac:	e7eb      	b.n	a686 <gpio_nrfx_init+0xa>
    a6ae:	bf00      	nop
    a6b0:	0bad0000 	.word	0x0bad0000
    a6b4:	0001377d 	.word	0x0001377d

0000a6b8 <cause_to_string>:
	return 0;
}

static inline const char *cause_to_string(uint32_t cause)
{
	switch (cause) {
    a6b8:	2880      	cmp	r0, #128	; 0x80
    a6ba:	d047      	beq.n	a74c <cause_to_string+0x94>
    a6bc:	d820      	bhi.n	a700 <cause_to_string+0x48>
    a6be:	2820      	cmp	r0, #32
    a6c0:	d81a      	bhi.n	a6f8 <cause_to_string+0x40>
    a6c2:	2800      	cmp	r0, #0
    a6c4:	d044      	beq.n	a750 <cause_to_string+0x98>
    a6c6:	3801      	subs	r0, #1
    a6c8:	281f      	cmp	r0, #31
    a6ca:	d813      	bhi.n	a6f4 <cause_to_string+0x3c>
    a6cc:	e8df f000 	tbb	[pc, r0]
    a6d0:	36124210 	.word	0x36124210
    a6d4:	38121212 	.word	0x38121212
    a6d8:	12121212 	.word	0x12121212
    a6dc:	3a121212 	.word	0x3a121212
    a6e0:	12121212 	.word	0x12121212
    a6e4:	12121212 	.word	0x12121212
    a6e8:	12121212 	.word	0x12121212
    a6ec:	3c121212 	.word	0x3c121212
    a6f0:	481f      	ldr	r0, [pc, #124]	; (a770 <cause_to_string+0xb8>)
    a6f2:	4770      	bx	lr

	case RESET_TEMPERATURE:
		return "temperature";

	default:
		return "unknown";
    a6f4:	481f      	ldr	r0, [pc, #124]	; (a774 <cause_to_string+0xbc>)
    a6f6:	4770      	bx	lr
	switch (cause) {
    a6f8:	2840      	cmp	r0, #64	; 0x40
    a6fa:	d12d      	bne.n	a758 <cause_to_string+0xa0>
		return "security";
    a6fc:	481e      	ldr	r0, [pc, #120]	; (a778 <cause_to_string+0xc0>)
    a6fe:	4770      	bx	lr
	switch (cause) {
    a700:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    a704:	d02a      	beq.n	a75c <cause_to_string+0xa4>
    a706:	d907      	bls.n	a718 <cause_to_string+0x60>
    a708:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    a70c:	d02c      	beq.n	a768 <cause_to_string+0xb0>
    a70e:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    a712:	d10e      	bne.n	a732 <cause_to_string+0x7a>
		return "temperature";
    a714:	4819      	ldr	r0, [pc, #100]	; (a77c <cause_to_string+0xc4>)
    a716:	4770      	bx	lr
	switch (cause) {
    a718:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    a71c:	d020      	beq.n	a760 <cause_to_string+0xa8>
    a71e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    a722:	d101      	bne.n	a728 <cause_to_string+0x70>
		return "PLL error";
    a724:	4816      	ldr	r0, [pc, #88]	; (a780 <cause_to_string+0xc8>)
    a726:	4770      	bx	lr
	switch (cause) {
    a728:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    a72c:	d11a      	bne.n	a764 <cause_to_string+0xac>
		return "CPU lockup";
    a72e:	4815      	ldr	r0, [pc, #84]	; (a784 <cause_to_string+0xcc>)
    a730:	4770      	bx	lr
	switch (cause) {
    a732:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    a736:	d119      	bne.n	a76c <cause_to_string+0xb4>
		return "hardware";
    a738:	4813      	ldr	r0, [pc, #76]	; (a788 <cause_to_string+0xd0>)
    a73a:	4770      	bx	lr
		return "brownout";
    a73c:	4813      	ldr	r0, [pc, #76]	; (a78c <cause_to_string+0xd4>)
    a73e:	4770      	bx	lr
		return "power-on reset";
    a740:	4813      	ldr	r0, [pc, #76]	; (a790 <cause_to_string+0xd8>)
    a742:	4770      	bx	lr
		return "watchdog";
    a744:	4813      	ldr	r0, [pc, #76]	; (a794 <cause_to_string+0xdc>)
    a746:	4770      	bx	lr
		return "debug";
    a748:	4813      	ldr	r0, [pc, #76]	; (a798 <cause_to_string+0xe0>)
    a74a:	4770      	bx	lr
		return "low power wake-up";
    a74c:	4813      	ldr	r0, [pc, #76]	; (a79c <cause_to_string+0xe4>)
    a74e:	4770      	bx	lr
		return "unknown";
    a750:	4808      	ldr	r0, [pc, #32]	; (a774 <cause_to_string+0xbc>)
    a752:	4770      	bx	lr
		return "software";
    a754:	4812      	ldr	r0, [pc, #72]	; (a7a0 <cause_to_string+0xe8>)
    a756:	4770      	bx	lr
		return "unknown";
    a758:	4806      	ldr	r0, [pc, #24]	; (a774 <cause_to_string+0xbc>)
    a75a:	4770      	bx	lr
		return "clock";
    a75c:	4811      	ldr	r0, [pc, #68]	; (a7a4 <cause_to_string+0xec>)
    a75e:	4770      	bx	lr
		return "parity error";
    a760:	4811      	ldr	r0, [pc, #68]	; (a7a8 <cause_to_string+0xf0>)
    a762:	4770      	bx	lr
		return "unknown";
    a764:	4803      	ldr	r0, [pc, #12]	; (a774 <cause_to_string+0xbc>)
    a766:	4770      	bx	lr
		return "user";
    a768:	4810      	ldr	r0, [pc, #64]	; (a7ac <cause_to_string+0xf4>)
    a76a:	4770      	bx	lr
		return "unknown";
    a76c:	4801      	ldr	r0, [pc, #4]	; (a774 <cause_to_string+0xbc>)
	}
}
    a76e:	4770      	bx	lr
    a770:	00018678 	.word	0x00018678
    a774:	000185c4 	.word	0x000185c4
    a778:	00018608 	.word	0x00018608
    a77c:	0001866c 	.word	0x0001866c
    a780:	00018644 	.word	0x00018644
    a784:	00018628 	.word	0x00018628
    a788:	00018658 	.word	0x00018658
    a78c:	000185d8 	.word	0x000185d8
    a790:	000185e4 	.word	0x000185e4
    a794:	000185f4 	.word	0x000185f4
    a798:	00018600 	.word	0x00018600
    a79c:	00018614 	.word	0x00018614
    a7a0:	000185cc 	.word	0x000185cc
    a7a4:	00018650 	.word	0x00018650
    a7a8:	00018634 	.word	0x00018634
    a7ac:	00018664 	.word	0x00018664

0000a7b0 <print_all_reset_causes>:

static void print_all_reset_causes(const struct shell *sh, uint32_t cause)
{
    a7b0:	b570      	push	{r4, r5, r6, lr}
    a7b2:	4606      	mov	r6, r0
    a7b4:	460d      	mov	r5, r1
	for (uint32_t cause_mask = 1; cause_mask; cause_mask <<= 1) {
    a7b6:	2401      	movs	r4, #1
    a7b8:	e000      	b.n	a7bc <print_all_reset_causes+0xc>
    a7ba:	0064      	lsls	r4, r4, #1
    a7bc:	b15c      	cbz	r4, a7d6 <print_all_reset_causes+0x26>
		if (cause & cause_mask) {
    a7be:	ea14 0005 	ands.w	r0, r4, r5
    a7c2:	d0fa      	beq.n	a7ba <print_all_reset_causes+0xa>
			shell_print(sh, "- %s",
    a7c4:	f7ff ff78 	bl	a6b8 <cause_to_string>
    a7c8:	4603      	mov	r3, r0
    a7ca:	4a03      	ldr	r2, [pc, #12]	; (a7d8 <print_all_reset_causes+0x28>)
    a7cc:	2108      	movs	r1, #8
    a7ce:	4630      	mov	r0, r6
    a7d0:	f006 ff2c 	bl	1162c <shell_fprintf>
    a7d4:	e7f1      	b.n	a7ba <print_all_reset_causes+0xa>
				    cause_to_string(cause & cause_mask));
		}
	}
}
    a7d6:	bd70      	pop	{r4, r5, r6, pc}
    a7d8:	00016904 	.word	0x00016904

0000a7dc <cmd_show_reset_cause>:

static int cmd_show_reset_cause(const struct shell *sh, size_t argc,
				char **argv)
{
    a7dc:	b530      	push	{r4, r5, lr}
    a7de:	b083      	sub	sp, #12
    a7e0:	4605      	mov	r5, r0
		union { uintptr_t x; uint32_t * val; } parm0 = { .val = cause };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_HWINFO_GET_RESET_CAUSE);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_reset_cause(cause);
    a7e2:	a801      	add	r0, sp, #4
    a7e4:	f009 f806 	bl	137f4 <z_impl_hwinfo_get_reset_cause>
    a7e8:	4604      	mov	r4, r0

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	res = hwinfo_get_reset_cause(&cause);
	if (res == -ENOTSUP) {
    a7ea:	f110 0f86 	cmn.w	r0, #134	; 0x86
    a7ee:	d00e      	beq.n	a80e <cmd_show_reset_cause+0x32>
		shell_error(sh, "Not supported by hardware");
		return res;
	} else if (res != 0) {
    a7f0:	b998      	cbnz	r0, a81a <cmd_show_reset_cause+0x3e>
		shell_error(sh, "Error reading the cause [%d]", res);
		return res;
	}

	if (cause != 0) {
    a7f2:	9b01      	ldr	r3, [sp, #4]
    a7f4:	b1c3      	cbz	r3, a828 <cmd_show_reset_cause+0x4c>
		shell_print(sh, "reset caused by:");
    a7f6:	4a0f      	ldr	r2, [pc, #60]	; (a834 <cmd_show_reset_cause+0x58>)
    a7f8:	2108      	movs	r1, #8
    a7fa:	4628      	mov	r0, r5
    a7fc:	f006 ff16 	bl	1162c <shell_fprintf>
		print_all_reset_causes(sh, cause);
    a800:	9901      	ldr	r1, [sp, #4]
    a802:	4628      	mov	r0, r5
    a804:	f7ff ffd4 	bl	a7b0 <print_all_reset_causes>
	} else {
		shell_print(sh, "No reset cause set");
	}

	return 0;
}
    a808:	4620      	mov	r0, r4
    a80a:	b003      	add	sp, #12
    a80c:	bd30      	pop	{r4, r5, pc}
		shell_error(sh, "Not supported by hardware");
    a80e:	4a0a      	ldr	r2, [pc, #40]	; (a838 <cmd_show_reset_cause+0x5c>)
    a810:	2101      	movs	r1, #1
    a812:	4628      	mov	r0, r5
    a814:	f006 ff0a 	bl	1162c <shell_fprintf>
		return res;
    a818:	e7f6      	b.n	a808 <cmd_show_reset_cause+0x2c>
		shell_error(sh, "Error reading the cause [%d]", res);
    a81a:	4603      	mov	r3, r0
    a81c:	4a07      	ldr	r2, [pc, #28]	; (a83c <cmd_show_reset_cause+0x60>)
    a81e:	2101      	movs	r1, #1
    a820:	4628      	mov	r0, r5
    a822:	f006 ff03 	bl	1162c <shell_fprintf>
		return res;
    a826:	e7ef      	b.n	a808 <cmd_show_reset_cause+0x2c>
		shell_print(sh, "No reset cause set");
    a828:	4a05      	ldr	r2, [pc, #20]	; (a840 <cmd_show_reset_cause+0x64>)
    a82a:	2108      	movs	r1, #8
    a82c:	4628      	mov	r0, r5
    a82e:	f006 fefd 	bl	1162c <shell_fprintf>
    a832:	e7e9      	b.n	a808 <cmd_show_reset_cause+0x2c>
    a834:	000186b8 	.word	0x000186b8
    a838:	0001867c 	.word	0x0001867c
    a83c:	00018698 	.word	0x00018698
    a840:	000186cc 	.word	0x000186cc

0000a844 <cmd_supported_reset_cause>:
	return 0;
}

static int cmd_supported_reset_cause(const struct shell *sh, size_t argc,
				     char **argv)
{
    a844:	b530      	push	{r4, r5, lr}
    a846:	b083      	sub	sp, #12
    a848:	4605      	mov	r5, r0
		union { uintptr_t x; uint32_t * val; } parm0 = { .val = supported };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_HWINFO_GET_SUPPORTED_RESET_CAUSE);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_supported_reset_cause(supported);
    a84a:	a801      	add	r0, sp, #4
    a84c:	f008 fffe 	bl	1384c <z_impl_hwinfo_get_supported_reset_cause>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	res = hwinfo_get_supported_reset_cause(&cause);
	if (res == -ENOTSUP) {
    a850:	f110 0f86 	cmn.w	r0, #134	; 0x86
    a854:	d010      	beq.n	a878 <cmd_supported_reset_cause+0x34>
    a856:	4604      	mov	r4, r0
		shell_error(sh, "Not supported by hardware");
	} else if (res != 0) {
    a858:	b9a0      	cbnz	r0, a884 <cmd_supported_reset_cause+0x40>
		shell_error(sh, "Could not get the supported reset causes [%d]", res);
		return res;
	}

	if (cause != 0) {
    a85a:	9b01      	ldr	r3, [sp, #4]
    a85c:	b1cb      	cbz	r3, a892 <cmd_supported_reset_cause+0x4e>
		shell_print(sh, "supported reset causes:");
    a85e:	4a10      	ldr	r2, [pc, #64]	; (a8a0 <cmd_supported_reset_cause+0x5c>)
    a860:	2108      	movs	r1, #8
    a862:	4628      	mov	r0, r5
    a864:	f006 fee2 	bl	1162c <shell_fprintf>
		print_all_reset_causes(sh, cause);
    a868:	9901      	ldr	r1, [sp, #4]
    a86a:	4628      	mov	r0, r5
    a86c:	f7ff ffa0 	bl	a7b0 <print_all_reset_causes>
	} else {
		shell_print(sh, "No causes supported");
	}

	return 0;
    a870:	2400      	movs	r4, #0
}
    a872:	4620      	mov	r0, r4
    a874:	b003      	add	sp, #12
    a876:	bd30      	pop	{r4, r5, pc}
		shell_error(sh, "Not supported by hardware");
    a878:	4a0a      	ldr	r2, [pc, #40]	; (a8a4 <cmd_supported_reset_cause+0x60>)
    a87a:	2101      	movs	r1, #1
    a87c:	4628      	mov	r0, r5
    a87e:	f006 fed5 	bl	1162c <shell_fprintf>
    a882:	e7ea      	b.n	a85a <cmd_supported_reset_cause+0x16>
		shell_error(sh, "Could not get the supported reset causes [%d]", res);
    a884:	4603      	mov	r3, r0
    a886:	4a08      	ldr	r2, [pc, #32]	; (a8a8 <cmd_supported_reset_cause+0x64>)
    a888:	2101      	movs	r1, #1
    a88a:	4628      	mov	r0, r5
    a88c:	f006 fece 	bl	1162c <shell_fprintf>
		return res;
    a890:	e7ef      	b.n	a872 <cmd_supported_reset_cause+0x2e>
		shell_print(sh, "No causes supported");
    a892:	4a06      	ldr	r2, [pc, #24]	; (a8ac <cmd_supported_reset_cause+0x68>)
    a894:	2108      	movs	r1, #8
    a896:	4628      	mov	r0, r5
    a898:	f006 fec8 	bl	1162c <shell_fprintf>
	return 0;
    a89c:	2400      	movs	r4, #0
    a89e:	e7e8      	b.n	a872 <cmd_supported_reset_cause+0x2e>
    a8a0:	00018710 	.word	0x00018710
    a8a4:	0001867c 	.word	0x0001867c
    a8a8:	000186e0 	.word	0x000186e0
    a8ac:	0001872c 	.word	0x0001872c

0000a8b0 <cmd_clear_reset_cause>:
{
    a8b0:	b538      	push	{r3, r4, r5, lr}
    a8b2:	4605      	mov	r5, r0
	return z_impl_hwinfo_clear_reset_cause();
    a8b4:	f008 ffc2 	bl	1383c <z_impl_hwinfo_clear_reset_cause>
	if (res == -ENOTSUP) {
    a8b8:	f110 0f86 	cmn.w	r0, #134	; 0x86
    a8bc:	d003      	beq.n	a8c6 <cmd_clear_reset_cause+0x16>
    a8be:	4604      	mov	r4, r0
	} else if (res != 0) {
    a8c0:	b940      	cbnz	r0, a8d4 <cmd_clear_reset_cause+0x24>
}
    a8c2:	4620      	mov	r0, r4
    a8c4:	bd38      	pop	{r3, r4, r5, pc}
		shell_error(sh, "Not supported by hardware");
    a8c6:	4a07      	ldr	r2, [pc, #28]	; (a8e4 <cmd_clear_reset_cause+0x34>)
    a8c8:	2101      	movs	r1, #1
    a8ca:	4628      	mov	r0, r5
    a8cc:	f006 feae 	bl	1162c <shell_fprintf>
	return 0;
    a8d0:	2400      	movs	r4, #0
    a8d2:	e7f6      	b.n	a8c2 <cmd_clear_reset_cause+0x12>
		shell_error(sh, "Error clearing the reset causes [%d]", res);
    a8d4:	4603      	mov	r3, r0
    a8d6:	4a04      	ldr	r2, [pc, #16]	; (a8e8 <cmd_clear_reset_cause+0x38>)
    a8d8:	2101      	movs	r1, #1
    a8da:	4628      	mov	r0, r5
    a8dc:	f006 fea6 	bl	1162c <shell_fprintf>
		return res;
    a8e0:	e7ef      	b.n	a8c2 <cmd_clear_reset_cause+0x12>
    a8e2:	bf00      	nop
    a8e4:	0001867c 	.word	0x0001867c
    a8e8:	00018744 	.word	0x00018744

0000a8ec <cmd_get_device_id>:
{
    a8ec:	b570      	push	{r4, r5, r6, lr}
    a8ee:	b084      	sub	sp, #16
    a8f0:	4606      	mov	r6, r0
	return z_impl_hwinfo_get_device_id(buffer, length);
    a8f2:	2110      	movs	r1, #16
    a8f4:	4668      	mov	r0, sp
    a8f6:	f008 ff50 	bl	1379a <z_impl_hwinfo_get_device_id>
    a8fa:	4605      	mov	r5, r0
	if (length == -ENOTSUP) {
    a8fc:	f110 0f86 	cmn.w	r0, #134	; 0x86
    a900:	d00e      	beq.n	a920 <cmd_get_device_id+0x34>
	} else if (length < 0) {
    a902:	2800      	cmp	r0, #0
    a904:	db12      	blt.n	a92c <cmd_get_device_id+0x40>
	shell_fprintf(sh, SHELL_NORMAL, "Length: %zd\n", length);
    a906:	4603      	mov	r3, r0
    a908:	4a17      	ldr	r2, [pc, #92]	; (a968 <cmd_get_device_id+0x7c>)
    a90a:	2108      	movs	r1, #8
    a90c:	4630      	mov	r0, r6
    a90e:	f006 fe8d 	bl	1162c <shell_fprintf>
	shell_fprintf(sh, SHELL_NORMAL, "ID: 0x");
    a912:	4a16      	ldr	r2, [pc, #88]	; (a96c <cmd_get_device_id+0x80>)
    a914:	2108      	movs	r1, #8
    a916:	4630      	mov	r0, r6
    a918:	f006 fe88 	bl	1162c <shell_fprintf>
	for (i = 0 ; i < length ; i++) {
    a91c:	2400      	movs	r4, #0
    a91e:	e017      	b.n	a950 <cmd_get_device_id+0x64>
		shell_error(sh, "Not supported by hardware");
    a920:	4a13      	ldr	r2, [pc, #76]	; (a970 <cmd_get_device_id+0x84>)
    a922:	2101      	movs	r1, #1
    a924:	4630      	mov	r0, r6
    a926:	f006 fe81 	bl	1162c <shell_fprintf>
		return -ENOTSUP;
    a92a:	e019      	b.n	a960 <cmd_get_device_id+0x74>
		shell_error(sh, "Error: %zd", length);
    a92c:	4603      	mov	r3, r0
    a92e:	4a11      	ldr	r2, [pc, #68]	; (a974 <cmd_get_device_id+0x88>)
    a930:	2101      	movs	r1, #1
    a932:	4630      	mov	r0, r6
    a934:	f006 fe7a 	bl	1162c <shell_fprintf>
		return length;
    a938:	e012      	b.n	a960 <cmd_get_device_id+0x74>
		shell_fprintf(sh, SHELL_NORMAL, "%02x", dev_id[i]);
    a93a:	f104 0310 	add.w	r3, r4, #16
    a93e:	446b      	add	r3, sp
    a940:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    a944:	4a0c      	ldr	r2, [pc, #48]	; (a978 <cmd_get_device_id+0x8c>)
    a946:	2108      	movs	r1, #8
    a948:	4630      	mov	r0, r6
    a94a:	f006 fe6f 	bl	1162c <shell_fprintf>
	for (i = 0 ; i < length ; i++) {
    a94e:	3401      	adds	r4, #1
    a950:	42ac      	cmp	r4, r5
    a952:	dbf2      	blt.n	a93a <cmd_get_device_id+0x4e>
	shell_fprintf(sh, SHELL_NORMAL, "\n");
    a954:	4a09      	ldr	r2, [pc, #36]	; (a97c <cmd_get_device_id+0x90>)
    a956:	2108      	movs	r1, #8
    a958:	4630      	mov	r0, r6
    a95a:	f006 fe67 	bl	1162c <shell_fprintf>
	return 0;
    a95e:	2500      	movs	r5, #0
}
    a960:	4628      	mov	r0, r5
    a962:	b004      	add	sp, #16
    a964:	bd70      	pop	{r4, r5, r6, pc}
    a966:	bf00      	nop
    a968:	00018778 	.word	0x00018778
    a96c:	00018788 	.word	0x00018788
    a970:	0001867c 	.word	0x0001867c
    a974:	0001876c 	.word	0x0001876c
    a978:	00018790 	.word	0x00018790
    a97c:	00015ec0 	.word	0x00015ec0

0000a980 <pinctrl_configure_pins>:
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    a980:	f04f 0c00 	mov.w	ip, #0
    a984:	458c      	cmp	ip, r1
    a986:	f080 8100 	bcs.w	ab8a <pinctrl_configure_pins+0x20a>
{
    a98a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a98e:	e037      	b.n	aa00 <pinctrl_configure_pins+0x80>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
    a990:	f04f 33ff 	mov.w	r3, #4294967295
    a994:	e03e      	b.n	aa14 <pinctrl_configure_pins+0x94>
		}

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = pin;
    a996:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			write = 1U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    a99a:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    a99e:	4674      	mov	r4, lr
			write = 1U;
    a9a0:	4675      	mov	r5, lr
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
    a9a2:	2b7f      	cmp	r3, #127	; 0x7f
    a9a4:	d025      	beq.n	a9f2 <pinctrl_configure_pins+0x72>
			if (write != NO_WRITE) {
    a9a6:	f1b5 3fff 	cmp.w	r5, #4294967295
    a9aa:	d00b      	beq.n	a9c4 <pinctrl_configure_pins+0x44>
    if (value == 0)
    a9ac:	2d00      	cmp	r5, #0
    a9ae:	f040 80dc 	bne.w	ab6a <pinctrl_configure_pins+0x1ea>
    *p_pin = pin_number & 0x1F;
    a9b2:	f003 081f 	and.w	r8, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    a9b6:	2501      	movs	r5, #1
    a9b8:	fa05 f508 	lsl.w	r5, r5, r8
    p_reg->OUTCLR = clr_mask;
    a9bc:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
    a9c0:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    a9c4:	59c5      	ldr	r5, [r0, r7]
    a9c6:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    a9ca:	d002      	beq.n	a9d2 <pinctrl_configure_pins+0x52>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    a9cc:	f04f 0e01 	mov.w	lr, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
    a9d0:	2400      	movs	r4, #0
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    a9d2:	f3c5 15c1 	ubfx	r5, r5, #7, #2
    *p_pin = pin_number & 0x1F;
    a9d6:	f003 031f 	and.w	r3, r3, #31
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    a9da:	ea44 044e 	orr.w	r4, r4, lr, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    a9de:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    a9e2:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    a9e6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    a9ea:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    a9ee:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    a9f2:	f10c 0c01 	add.w	ip, ip, #1
    a9f6:	fa5f fc8c 	uxtb.w	ip, ip
    a9fa:	458c      	cmp	ip, r1
    a9fc:	f080 80bf 	bcs.w	ab7e <pinctrl_configure_pins+0x1fe>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    aa00:	ea4f 078c 	mov.w	r7, ip, lsl #2
    aa04:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
    aa08:	f3c4 2643 	ubfx	r6, r4, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
    aa0c:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
    aa10:	2b7f      	cmp	r3, #127	; 0x7f
    aa12:	d0bd      	beq.n	a990 <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
    aa14:	0c24      	lsrs	r4, r4, #16
    aa16:	2c19      	cmp	r4, #25
    aa18:	f200 80b3 	bhi.w	ab82 <pinctrl_configure_pins+0x202>
    aa1c:	a501      	add	r5, pc, #4	; (adr r5, aa24 <pinctrl_configure_pins+0xa4>)
    aa1e:	f855 f024 	ldr.w	pc, [r5, r4, lsl #2]
    aa22:	bf00      	nop
    aa24:	0000a997 	.word	0x0000a997
    aa28:	0000aa8d 	.word	0x0000aa8d
    aa2c:	0000aa9d 	.word	0x0000aa9d
    aa30:	0000aaab 	.word	0x0000aaab
    aa34:	0000aabb 	.word	0x0000aabb
    aa38:	0000aac9 	.word	0x0000aac9
    aa3c:	0000aad7 	.word	0x0000aad7
    aa40:	0000ab83 	.word	0x0000ab83
    aa44:	0000ab83 	.word	0x0000ab83
    aa48:	0000ab83 	.word	0x0000ab83
    aa4c:	0000ab83 	.word	0x0000ab83
    aa50:	0000aae7 	.word	0x0000aae7
    aa54:	0000aaf9 	.word	0x0000aaf9
    aa58:	0000ab83 	.word	0x0000ab83
    aa5c:	0000ab83 	.word	0x0000ab83
    aa60:	0000ab83 	.word	0x0000ab83
    aa64:	0000ab83 	.word	0x0000ab83
    aa68:	0000ab83 	.word	0x0000ab83
    aa6c:	0000ab83 	.word	0x0000ab83
    aa70:	0000ab83 	.word	0x0000ab83
    aa74:	0000ab83 	.word	0x0000ab83
    aa78:	0000ab83 	.word	0x0000ab83
    aa7c:	0000ab0b 	.word	0x0000ab0b
    aa80:	0000ab1d 	.word	0x0000ab1d
    aa84:	0000ab2f 	.word	0x0000ab2f
    aa88:	0000ab41 	.word	0x0000ab41
			NRF_PSEL_UART(reg, RXD) = pin;
    aa8c:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    aa90:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    aa94:	4674      	mov	r4, lr
		uint32_t write = NO_WRITE;
    aa96:	f04f 35ff 	mov.w	r5, #4294967295
			break;
    aa9a:	e782      	b.n	a9a2 <pinctrl_configure_pins+0x22>
			NRF_PSEL_UART(reg, RTS) = pin;
    aa9c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    aaa0:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    aaa4:	4674      	mov	r4, lr
			write = 1U;
    aaa6:	4675      	mov	r5, lr
			break;
    aaa8:	e77b      	b.n	a9a2 <pinctrl_configure_pins+0x22>
			NRF_PSEL_UART(reg, CTS) = pin;
    aaaa:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    aaae:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    aab2:	4674      	mov	r4, lr
		uint32_t write = NO_WRITE;
    aab4:	f04f 35ff 	mov.w	r5, #4294967295
			break;
    aab8:	e773      	b.n	a9a2 <pinctrl_configure_pins+0x22>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    aaba:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    aabe:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    aac2:	2401      	movs	r4, #1
			write = 0U;
    aac4:	4675      	mov	r5, lr
			break;
    aac6:	e76c      	b.n	a9a2 <pinctrl_configure_pins+0x22>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    aac8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    aacc:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    aad0:	4674      	mov	r4, lr
			write = 0U;
    aad2:	2500      	movs	r5, #0
			break;
    aad4:	e765      	b.n	a9a2 <pinctrl_configure_pins+0x22>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    aad6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    aada:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    aade:	4674      	mov	r4, lr
		uint32_t write = NO_WRITE;
    aae0:	f04f 35ff 	mov.w	r5, #4294967295
			break;
    aae4:	e75d      	b.n	a9a2 <pinctrl_configure_pins+0x22>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    aae6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    aaea:	b396      	cbz	r6, ab52 <pinctrl_configure_pins+0x1d2>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    aaec:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    aaf0:	4674      	mov	r4, lr
		uint32_t write = NO_WRITE;
    aaf2:	f04f 35ff 	mov.w	r5, #4294967295
    aaf6:	e754      	b.n	a9a2 <pinctrl_configure_pins+0x22>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    aaf8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    aafc:	b37e      	cbz	r6, ab5e <pinctrl_configure_pins+0x1de>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    aafe:	f04f 0e00 	mov.w	lr, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    ab02:	4674      	mov	r4, lr
		uint32_t write = NO_WRITE;
    ab04:	f04f 35ff 	mov.w	r5, #4294967295
    ab08:	e74b      	b.n	a9a2 <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    ab0a:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    ab0e:	59c5      	ldr	r5, [r0, r7]
    ab10:	f3c5 3580 	ubfx	r5, r5, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    ab14:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    ab18:	4674      	mov	r4, lr
			break;
    ab1a:	e742      	b.n	a9a2 <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    ab1c:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    ab20:	59c5      	ldr	r5, [r0, r7]
    ab22:	f3c5 3580 	ubfx	r5, r5, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    ab26:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    ab2a:	4674      	mov	r4, lr
			break;
    ab2c:	e739      	b.n	a9a2 <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    ab2e:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    ab32:	59c5      	ldr	r5, [r0, r7]
    ab34:	f3c5 3580 	ubfx	r5, r5, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    ab38:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    ab3c:	4674      	mov	r4, lr
			break;
    ab3e:	e730      	b.n	a9a2 <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    ab40:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
			write = NRF_GET_INVERT(pins[i]);
    ab44:	59c5      	ldr	r5, [r0, r7]
    ab46:	f3c5 3580 	ubfx	r5, r5, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    ab4a:	f04f 0e01 	mov.w	lr, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    ab4e:	4674      	mov	r4, lr
			break;
    ab50:	e727      	b.n	a9a2 <pinctrl_configure_pins+0x22>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    ab52:	46b6      	mov	lr, r6
			dir = NRF_GPIO_PIN_DIR_INPUT;
    ab54:	4634      	mov	r4, r6
		uint32_t write = NO_WRITE;
    ab56:	f04f 35ff 	mov.w	r5, #4294967295
				drive = NRF_DRIVE_S0D1;
    ab5a:	2606      	movs	r6, #6
    ab5c:	e721      	b.n	a9a2 <pinctrl_configure_pins+0x22>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    ab5e:	46b6      	mov	lr, r6
			dir = NRF_GPIO_PIN_DIR_INPUT;
    ab60:	4634      	mov	r4, r6
		uint32_t write = NO_WRITE;
    ab62:	f04f 35ff 	mov.w	r5, #4294967295
				drive = NRF_DRIVE_S0D1;
    ab66:	2606      	movs	r6, #6
    ab68:	e71b      	b.n	a9a2 <pinctrl_configure_pins+0x22>
    *p_pin = pin_number & 0x1F;
    ab6a:	f003 081f 	and.w	r8, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    ab6e:	2501      	movs	r5, #1
    ab70:	fa05 f508 	lsl.w	r5, r5, r8
    p_reg->OUTSET = set_mask;
    ab74:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
    ab78:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
}
    ab7c:	e722      	b.n	a9c4 <pinctrl_configure_pins+0x44>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    ab7e:	2000      	movs	r0, #0
    ab80:	e001      	b.n	ab86 <pinctrl_configure_pins+0x206>
		switch (NRF_GET_FUN(pins[i])) {
    ab82:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    ab86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return 0;
    ab8a:	2000      	movs	r0, #0
}
    ab8c:	4770      	bx	lr
    ab8e:	bf00      	nop

0000ab90 <event_txdrdy_check>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ab90:	4b06      	ldr	r3, [pc, #24]	; (abac <event_txdrdy_check+0x1c>)
    ab92:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c

static bool event_txdrdy_check(void)
{
	return (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_TXDRDY)
#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
		|| uart_sw_event_txdrdy
    ab96:	b923      	cbnz	r3, aba2 <event_txdrdy_check+0x12>
    ab98:	4b05      	ldr	r3, [pc, #20]	; (abb0 <event_txdrdy_check+0x20>)
    ab9a:	781b      	ldrb	r3, [r3, #0]
    ab9c:	b11b      	cbz	r3, aba6 <event_txdrdy_check+0x16>
    ab9e:	2001      	movs	r0, #1
    aba0:	4770      	bx	lr
    aba2:	2001      	movs	r0, #1
    aba4:	4770      	bx	lr
    aba6:	2000      	movs	r0, #0
#endif
	       );
}
    aba8:	4770      	bx	lr
    abaa:	bf00      	nop
    abac:	40002000 	.word	0x40002000
    abb0:	20003cbc 	.word	0x20003cbc

0000abb4 <event_txdrdy_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    abb4:	4a04      	ldr	r2, [pc, #16]	; (abc8 <event_txdrdy_clear+0x14>)
    abb6:	2300      	movs	r3, #0
    abb8:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    abbc:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c

static void event_txdrdy_clear(void)
{
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_TXDRDY);
#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
	uart_sw_event_txdrdy = 0U;
    abc0:	4a02      	ldr	r2, [pc, #8]	; (abcc <event_txdrdy_clear+0x18>)
    abc2:	7013      	strb	r3, [r2, #0]
#endif
}
    abc4:	4770      	bx	lr
    abc6:	bf00      	nop
    abc8:	40002000 	.word	0x40002000
    abcc:	20003cbc 	.word	0x20003cbc

0000abd0 <baudrate_set>:

static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uart_baudrate_t nrf_baudrate; /* calculated baudrate divisor */

	switch (baudrate) {
    abd0:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    abd4:	d06d      	beq.n	acb2 <baudrate_set+0xe2>
    abd6:	d83b      	bhi.n	ac50 <baudrate_set+0x80>
    abd8:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    abdc:	d06b      	beq.n	acb6 <baudrate_set+0xe6>
    abde:	d90a      	bls.n	abf6 <baudrate_set+0x26>
    abe0:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    abe4:	d072      	beq.n	accc <baudrate_set+0xfc>
    abe6:	d925      	bls.n	ac34 <baudrate_set+0x64>
    abe8:	f647 2312 	movw	r3, #31250	; 0x7a12
    abec:	4299      	cmp	r1, r3
    abee:	d12c      	bne.n	ac4a <baudrate_set+0x7a>
	case 28800:
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
		break;
#if defined(UART_BAUDRATE_BAUDRATE_Baud31250)
	case 31250:
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    abf0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    abf4:	e013      	b.n	ac1e <baudrate_set+0x4e>
	switch (baudrate) {
    abf6:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    abfa:	d05e      	beq.n	acba <baudrate_set+0xea>
    abfc:	d907      	bls.n	ac0e <baudrate_set+0x3e>
    abfe:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    ac02:	d060      	beq.n	acc6 <baudrate_set+0xf6>
    ac04:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    ac08:	d111      	bne.n	ac2e <baudrate_set+0x5e>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    ac0a:	4b3a      	ldr	r3, [pc, #232]	; (acf4 <baudrate_set+0x124>)
    ac0c:	e007      	b.n	ac1e <baudrate_set+0x4e>
	switch (baudrate) {
    ac0e:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    ac12:	d055      	beq.n	acc0 <baudrate_set+0xf0>
    ac14:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    ac18:	d106      	bne.n	ac28 <baudrate_set+0x58>
		nrf_baudrate = 0x00027000;
    ac1a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    ac1e:	4a36      	ldr	r2, [pc, #216]	; (acf8 <baudrate_set+0x128>)
    ac20:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uart_baudrate_set(uart0_addr, nrf_baudrate);

	return 0;
    ac24:	2000      	movs	r0, #0
    ac26:	4770      	bx	lr
	switch (baudrate) {
    ac28:	f06f 0015 	mvn.w	r0, #21
    ac2c:	4770      	bx	lr
    ac2e:	f06f 0015 	mvn.w	r0, #21
    ac32:	4770      	bx	lr
    ac34:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    ac38:	d04a      	beq.n	acd0 <baudrate_set+0x100>
    ac3a:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    ac3e:	d101      	bne.n	ac44 <baudrate_set+0x74>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    ac40:	4b2e      	ldr	r3, [pc, #184]	; (acfc <baudrate_set+0x12c>)
    ac42:	e7ec      	b.n	ac1e <baudrate_set+0x4e>
	switch (baudrate) {
    ac44:	f06f 0015 	mvn.w	r0, #21
    ac48:	4770      	bx	lr
    ac4a:	f06f 0015 	mvn.w	r0, #21
    ac4e:	4770      	bx	lr
    ac50:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    ac54:	d03f      	beq.n	acd6 <baudrate_set+0x106>
    ac56:	d909      	bls.n	ac6c <baudrate_set+0x9c>
    ac58:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    ac5c:	d042      	beq.n	ace4 <baudrate_set+0x114>
    ac5e:	d91d      	bls.n	ac9c <baudrate_set+0xcc>
    ac60:	4b27      	ldr	r3, [pc, #156]	; (ad00 <baudrate_set+0x130>)
    ac62:	4299      	cmp	r1, r3
    ac64:	d143      	bne.n	acee <baudrate_set+0x11e>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    ac66:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ac6a:	e7d8      	b.n	ac1e <baudrate_set+0x4e>
	switch (baudrate) {
    ac6c:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    ac70:	d033      	beq.n	acda <baudrate_set+0x10a>
    ac72:	d904      	bls.n	ac7e <baudrate_set+0xae>
    ac74:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    ac78:	d10d      	bne.n	ac96 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    ac7a:	4b22      	ldr	r3, [pc, #136]	; (ad04 <baudrate_set+0x134>)
    ac7c:	e7cf      	b.n	ac1e <baudrate_set+0x4e>
	switch (baudrate) {
    ac7e:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    ac82:	4299      	cmp	r1, r3
    ac84:	d02b      	beq.n	acde <baudrate_set+0x10e>
    ac86:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    ac8a:	d101      	bne.n	ac90 <baudrate_set+0xc0>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    ac8c:	4b1e      	ldr	r3, [pc, #120]	; (ad08 <baudrate_set+0x138>)
    ac8e:	e7c6      	b.n	ac1e <baudrate_set+0x4e>
	switch (baudrate) {
    ac90:	f06f 0015 	mvn.w	r0, #21
    ac94:	4770      	bx	lr
    ac96:	f06f 0015 	mvn.w	r0, #21
    ac9a:	4770      	bx	lr
    ac9c:	4b1b      	ldr	r3, [pc, #108]	; (ad0c <baudrate_set+0x13c>)
    ac9e:	4299      	cmp	r1, r3
    aca0:	d022      	beq.n	ace8 <baudrate_set+0x118>
    aca2:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    aca6:	d101      	bne.n	acac <baudrate_set+0xdc>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    aca8:	4b19      	ldr	r3, [pc, #100]	; (ad10 <baudrate_set+0x140>)
    acaa:	e7b8      	b.n	ac1e <baudrate_set+0x4e>
	switch (baudrate) {
    acac:	f06f 0015 	mvn.w	r0, #21
    acb0:	4770      	bx	lr
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    acb2:	4b18      	ldr	r3, [pc, #96]	; (ad14 <baudrate_set+0x144>)
    acb4:	e7b3      	b.n	ac1e <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    acb6:	4b18      	ldr	r3, [pc, #96]	; (ad18 <baudrate_set+0x148>)
    acb8:	e7b1      	b.n	ac1e <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    acba:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    acbe:	e7ae      	b.n	ac1e <baudrate_set+0x4e>
	switch (baudrate) {
    acc0:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    acc4:	e7ab      	b.n	ac1e <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    acc6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    acca:	e7a8      	b.n	ac1e <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    accc:	4b13      	ldr	r3, [pc, #76]	; (ad1c <baudrate_set+0x14c>)
    acce:	e7a6      	b.n	ac1e <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    acd0:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    acd4:	e7a3      	b.n	ac1e <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    acd6:	4b12      	ldr	r3, [pc, #72]	; (ad20 <baudrate_set+0x150>)
    acd8:	e7a1      	b.n	ac1e <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    acda:	4b12      	ldr	r3, [pc, #72]	; (ad24 <baudrate_set+0x154>)
    acdc:	e79f      	b.n	ac1e <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    acde:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    ace2:	e79c      	b.n	ac1e <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    ace4:	4b10      	ldr	r3, [pc, #64]	; (ad28 <baudrate_set+0x158>)
    ace6:	e79a      	b.n	ac1e <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    ace8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    acec:	e797      	b.n	ac1e <baudrate_set+0x4e>
	switch (baudrate) {
    acee:	f06f 0015 	mvn.w	r0, #21
}
    acf2:	4770      	bx	lr
    acf4:	0013b000 	.word	0x0013b000
    acf8:	40002000 	.word	0x40002000
    acfc:	004ea000 	.word	0x004ea000
    ad00:	000f4240 	.word	0x000f4240
    ad04:	01d7e000 	.word	0x01d7e000
    ad08:	00ebf000 	.word	0x00ebf000
    ad0c:	0003d090 	.word	0x0003d090
    ad10:	075f7000 	.word	0x075f7000
    ad14:	009d5000 	.word	0x009d5000
    ad18:	00275000 	.word	0x00275000
    ad1c:	0075f000 	.word	0x0075f000
    ad20:	03afb000 	.word	0x03afb000
    ad24:	013a9000 	.word	0x013a9000
    ad28:	0ebed000 	.word	0x0ebed000

0000ad2c <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ad2c:	4b08      	ldr	r3, [pc, #32]	; (ad50 <uart_nrfx_poll_in+0x24>)
    ad2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    ad32:	b14b      	cbz	r3, ad48 <uart_nrfx_poll_in+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ad34:	4b06      	ldr	r3, [pc, #24]	; (ad50 <uart_nrfx_poll_in+0x24>)
    ad36:	2000      	movs	r0, #0
    ad38:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    ad3c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    return p_reg->RXD;
    ad40:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518

	/* Clear the interrupt */
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);
    ad44:	700b      	strb	r3, [r1, #0]

	return 0;
    ad46:	4770      	bx	lr
		return -1;
    ad48:	f04f 30ff 	mov.w	r0, #4294967295
}
    ad4c:	4770      	bx	lr
    ad4e:	bf00      	nop
    ad50:	40002000 	.word	0x40002000

0000ad54 <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    ad54:	4b02      	ldr	r3, [pc, #8]	; (ad60 <uart_nrfx_err_check+0xc>)
    ad56:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    ad5a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
    ad5e:	4770      	bx	lr
    ad60:	40002000 	.word	0x40002000

0000ad64 <uart_nrfx_configure>:

static int uart_nrfx_configure(const struct device *dev,
			       const struct uart_config *cfg)
{
    ad64:	b530      	push	{r4, r5, lr}
    ad66:	b083      	sub	sp, #12
	struct uart_nrfx_data *data = dev->data;
    ad68:	6905      	ldr	r5, [r0, #16]
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    ad6a:	794b      	ldrb	r3, [r1, #5]
    ad6c:	2b01      	cmp	r3, #1
    ad6e:	d129      	bne.n	adc4 <uart_nrfx_configure+0x60>
    ad70:	460c      	mov	r4, r1
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    ad72:	798b      	ldrb	r3, [r1, #6]
    ad74:	2b03      	cmp	r3, #3
    ad76:	d128      	bne.n	adca <uart_nrfx_configure+0x66>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    ad78:	79cb      	ldrb	r3, [r1, #7]
    ad7a:	b123      	cbz	r3, ad86 <uart_nrfx_configure+0x22>
		} else {
			return -ENOTSUP;
		}
		break;
	default:
		return -ENOTSUP;
    ad7c:	f06f 0385 	mvn.w	r3, #133	; 0x85
	nrf_uart_configure(uart0_addr, &uart_cfg);

	data->uart_config = *cfg;

	return 0;
}
    ad80:	4618      	mov	r0, r3
    ad82:	b003      	add	sp, #12
    ad84:	bd30      	pop	{r4, r5, pc}
		uart_cfg.hwfc = NRF_UART_HWFC_DISABLED;
    ad86:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    ad8a:	790b      	ldrb	r3, [r1, #4]
    ad8c:	b123      	cbz	r3, ad98 <uart_nrfx_configure+0x34>
    ad8e:	2b02      	cmp	r3, #2
    ad90:	d014      	beq.n	adbc <uart_nrfx_configure+0x58>
    ad92:	f06f 0385 	mvn.w	r3, #133	; 0x85
    ad96:	e7f3      	b.n	ad80 <uart_nrfx_configure+0x1c>
		uart_cfg.parity = NRF_UART_PARITY_EXCLUDED;
    ad98:	2300      	movs	r3, #0
    ad9a:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    ad9e:	6821      	ldr	r1, [r4, #0]
    ada0:	f7ff ff16 	bl	abd0 <baudrate_set>
    ada4:	4603      	mov	r3, r0
    ada6:	b998      	cbnz	r0, add0 <uart_nrfx_configure+0x6c>
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    ada8:	f89d 1005 	ldrb.w	r1, [sp, #5]
    adac:	4a0a      	ldr	r2, [pc, #40]	; (add8 <uart_nrfx_configure+0x74>)
    adae:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
	data->uart_config = *cfg;
    adb2:	e894 0003 	ldmia.w	r4, {r0, r1}
    adb6:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
    adba:	e7e1      	b.n	ad80 <uart_nrfx_configure+0x1c>
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
    adbc:	230e      	movs	r3, #14
    adbe:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    adc2:	e7ec      	b.n	ad9e <uart_nrfx_configure+0x3a>
		return -ENOTSUP;
    adc4:	f06f 0385 	mvn.w	r3, #133	; 0x85
    adc8:	e7da      	b.n	ad80 <uart_nrfx_configure+0x1c>
		return -ENOTSUP;
    adca:	f06f 0385 	mvn.w	r3, #133	; 0x85
    adce:	e7d7      	b.n	ad80 <uart_nrfx_configure+0x1c>
		return -ENOTSUP;
    add0:	f06f 0385 	mvn.w	r3, #133	; 0x85
    add4:	e7d4      	b.n	ad80 <uart_nrfx_configure+0x1c>
    add6:	bf00      	nop
    add8:	40002000 	.word	0x40002000

0000addc <uart_nrfx_fifo_fill>:

/** Interrupt driven FIFO fill function */
static int uart_nrfx_fifo_fill(const struct device *dev,
			       const uint8_t *tx_data,
			       int len)
{
    addc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    adde:	460e      	mov	r6, r1
    ade0:	4615      	mov	r5, r2
	uint8_t num_tx = 0U;
    ade2:	2400      	movs	r4, #0

	while ((len - num_tx > 0) &&
    ade4:	e007      	b.n	adf6 <uart_nrfx_fifo_fill+0x1a>
	       event_txdrdy_check()) {

		/* Clear the interrupt */
		event_txdrdy_clear();
    ade6:	f7ff fee5 	bl	abb4 <event_txdrdy_clear>

		/* Send a character */
		nrf_uart_txd_set(uart0_addr, (uint8_t)tx_data[num_tx++]);
    adea:	1c63      	adds	r3, r4, #1
    adec:	5d34      	ldrb	r4, [r6, r4]
    p_reg->TXD = txd;
    adee:	4807      	ldr	r0, [pc, #28]	; (ae0c <uart_nrfx_fifo_fill+0x30>)
    adf0:	f8c0 451c 	str.w	r4, [r0, #1308]	; 0x51c
    adf4:	b2dc      	uxtb	r4, r3
	while ((len - num_tx > 0) &&
    adf6:	4627      	mov	r7, r4
    adf8:	1b2b      	subs	r3, r5, r4
    adfa:	2b00      	cmp	r3, #0
    adfc:	dd03      	ble.n	ae06 <uart_nrfx_fifo_fill+0x2a>
	       event_txdrdy_check()) {
    adfe:	f7ff fec7 	bl	ab90 <event_txdrdy_check>
	while ((len - num_tx > 0) &&
    ae02:	2800      	cmp	r0, #0
    ae04:	d1ef      	bne.n	ade6 <uart_nrfx_fifo_fill+0xa>
	}

	return (int)num_tx;
}
    ae06:	4638      	mov	r0, r7
    ae08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ae0a:	bf00      	nop
    ae0c:	40002000 	.word	0x40002000

0000ae10 <uart_nrfx_fifo_read>:
/** Interrupt driven FIFO read function */
static int uart_nrfx_fifo_read(const struct device *dev,
			       uint8_t *rx_data,
			       const int size)
{
	uint8_t num_rx = 0U;
    ae10:	2300      	movs	r3, #0

	while ((size - num_rx > 0) &&
    ae12:	4618      	mov	r0, r3
    ae14:	eba2 0c03 	sub.w	ip, r2, r3
    ae18:	f1bc 0f00 	cmp.w	ip, #0
    ae1c:	dd17      	ble.n	ae4e <uart_nrfx_fifo_read+0x3e>
{
    ae1e:	b410      	push	{r4}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ae20:	4c0b      	ldr	r4, [pc, #44]	; (ae50 <uart_nrfx_fifo_read+0x40>)
    ae22:	f8d4 4108 	ldr.w	r4, [r4, #264]	; 0x108
	while ((size - num_rx > 0) &&
    ae26:	b184      	cbz	r4, ae4a <uart_nrfx_fifo_read+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ae28:	4809      	ldr	r0, [pc, #36]	; (ae50 <uart_nrfx_fifo_read+0x40>)
    ae2a:	2400      	movs	r4, #0
    ae2c:	f8c0 4108 	str.w	r4, [r0, #264]	; 0x108
    ae30:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
	       nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
		/* Clear the interrupt */
		nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

		/* Receive a character */
		rx_data[num_rx++] = (uint8_t)nrf_uart_rxd_get(uart0_addr);
    ae34:	1c5c      	adds	r4, r3, #1
    return p_reg->RXD;
    ae36:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
    ae3a:	54c8      	strb	r0, [r1, r3]
    ae3c:	b2e3      	uxtb	r3, r4
	while ((size - num_rx > 0) &&
    ae3e:	4618      	mov	r0, r3
    ae40:	eba2 0c03 	sub.w	ip, r2, r3
    ae44:	f1bc 0f00 	cmp.w	ip, #0
    ae48:	dcea      	bgt.n	ae20 <uart_nrfx_fifo_read+0x10>
	}

	return num_rx;
}
    ae4a:	bc10      	pop	{r4}
    ae4c:	4770      	bx	lr
    ae4e:	4770      	bx	lr
    ae50:	40002000 	.word	0x40002000

0000ae54 <uart_nrfx_irq_tx_disable>:

/** Interrupt driven transfer disabling function */
static void uart_nrfx_irq_tx_disable(const struct device *dev)
{
	/* Disable TX interrupt in uart_nrfx_isr() when transmission is done. */
	disable_tx_irq = true;
    ae54:	4b01      	ldr	r3, [pc, #4]	; (ae5c <uart_nrfx_irq_tx_disable+0x8>)
    ae56:	2201      	movs	r2, #1
    ae58:	701a      	strb	r2, [r3, #0]
}
    ae5a:	4770      	bx	lr
    ae5c:	20003cbb 	.word	0x20003cbb

0000ae60 <uart_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
    ae60:	4b02      	ldr	r3, [pc, #8]	; (ae6c <uart_nrfx_irq_rx_enable+0xc>)
    ae62:	2204      	movs	r2, #4
    ae64:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

/** Interrupt driven receiver enabling function */
static void uart_nrfx_irq_rx_enable(const struct device *dev)
{
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
}
    ae68:	4770      	bx	lr
    ae6a:	bf00      	nop
    ae6c:	40002000 	.word	0x40002000

0000ae70 <uart_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
    ae70:	4b02      	ldr	r3, [pc, #8]	; (ae7c <uart_nrfx_irq_rx_disable+0xc>)
    ae72:	2204      	movs	r2, #4
    ae74:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

/** Interrupt driven receiver disabling function */
static void uart_nrfx_irq_rx_disable(const struct device *dev)
{
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
}
    ae78:	4770      	bx	lr
    ae7a:	bf00      	nop
    ae7c:	40002000 	.word	0x40002000

0000ae80 <uart_nrfx_irq_tx_ready_complete>:

/** Interrupt driven transfer empty function */
static int uart_nrfx_irq_tx_ready_complete(const struct device *dev)
{
    ae80:	b508      	push	{r3, lr}
    return p_reg->INTENSET & mask;
    ae82:	4b0a      	ldr	r3, [pc, #40]	; (aeac <uart_nrfx_irq_tx_ready_complete+0x2c>)
    ae84:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	 * called after the TX interrupt is requested to be disabled but before
	 * the disabling is actually performed (in the IRQ handler).
	 */
	return nrf_uart_int_enable_check(uart0_addr,
					 NRF_UART_INT_MASK_TXDRDY) &&
	       !disable_tx_irq &&
    ae88:	f013 0f80 	tst.w	r3, #128	; 0x80
    ae8c:	d009      	beq.n	aea2 <uart_nrfx_irq_tx_ready_complete+0x22>
    ae8e:	4b08      	ldr	r3, [pc, #32]	; (aeb0 <uart_nrfx_irq_tx_ready_complete+0x30>)
    ae90:	781b      	ldrb	r3, [r3, #0]
					 NRF_UART_INT_MASK_TXDRDY) &&
    ae92:	b10b      	cbz	r3, ae98 <uart_nrfx_irq_tx_ready_complete+0x18>
	       !disable_tx_irq &&
    ae94:	2000      	movs	r0, #0
    ae96:	e005      	b.n	aea4 <uart_nrfx_irq_tx_ready_complete+0x24>
	       event_txdrdy_check();
    ae98:	f7ff fe7a 	bl	ab90 <event_txdrdy_check>
	       !disable_tx_irq &&
    ae9c:	b118      	cbz	r0, aea6 <uart_nrfx_irq_tx_ready_complete+0x26>
    ae9e:	2001      	movs	r0, #1
    aea0:	e000      	b.n	aea4 <uart_nrfx_irq_tx_ready_complete+0x24>
    aea2:	2000      	movs	r0, #0
}
    aea4:	bd08      	pop	{r3, pc}
	       !disable_tx_irq &&
    aea6:	2000      	movs	r0, #0
    aea8:	e7fc      	b.n	aea4 <uart_nrfx_irq_tx_ready_complete+0x24>
    aeaa:	bf00      	nop
    aeac:	40002000 	.word	0x40002000
    aeb0:	20003cbb 	.word	0x20003cbb

0000aeb4 <uart_nrfx_irq_rx_ready>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    aeb4:	4b03      	ldr	r3, [pc, #12]	; (aec4 <uart_nrfx_irq_rx_ready+0x10>)
    aeb6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108

/** Interrupt driven receiver ready function */
static int uart_nrfx_irq_rx_ready(const struct device *dev)
{
	return nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY);
}
    aeba:	3800      	subs	r0, #0
    aebc:	bf18      	it	ne
    aebe:	2001      	movne	r0, #1
    aec0:	4770      	bx	lr
    aec2:	bf00      	nop
    aec4:	40002000 	.word	0x40002000

0000aec8 <uart_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
    aec8:	4b02      	ldr	r3, [pc, #8]	; (aed4 <uart_nrfx_irq_err_enable+0xc>)
    aeca:	f44f 7200 	mov.w	r2, #512	; 0x200
    aece:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

/** Interrupt driven error enabling function */
static void uart_nrfx_irq_err_enable(const struct device *dev)
{
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_ERROR);
}
    aed2:	4770      	bx	lr
    aed4:	40002000 	.word	0x40002000

0000aed8 <uart_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
    aed8:	4b02      	ldr	r3, [pc, #8]	; (aee4 <uart_nrfx_irq_err_disable+0xc>)
    aeda:	f44f 7200 	mov.w	r2, #512	; 0x200
    aede:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

/** Interrupt driven error disabling function */
static void uart_nrfx_irq_err_disable(const struct device *dev)
{
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_ERROR);
}
    aee2:	4770      	bx	lr
    aee4:	40002000 	.word	0x40002000

0000aee8 <uart_nrfx_irq_is_pending>:

/** Interrupt driven pending status function */
static int uart_nrfx_irq_is_pending(const struct device *dev)
{
    aee8:	b510      	push	{r4, lr}
    aeea:	4604      	mov	r4, r0
    return p_reg->INTENSET & mask;
    aeec:	4b0d      	ldr	r3, [pc, #52]	; (af24 <uart_nrfx_irq_is_pending+0x3c>)
    aeee:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	return ((nrf_uart_int_enable_check(uart0_addr,
					   NRF_UART_INT_MASK_TXDRDY) &&
		 uart_nrfx_irq_tx_ready_complete(dev))
		||
    aef2:	f013 0f80 	tst.w	r3, #128	; 0x80
    aef6:	d107      	bne.n	af08 <uart_nrfx_irq_is_pending+0x20>
    aef8:	4b0a      	ldr	r3, [pc, #40]	; (af24 <uart_nrfx_irq_is_pending+0x3c>)
    aefa:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    aefe:	f013 0f04 	tst.w	r3, #4
    af02:	d107      	bne.n	af14 <uart_nrfx_irq_is_pending+0x2c>
    af04:	2000      	movs	r0, #0
		(nrf_uart_int_enable_check(uart0_addr,
					   NRF_UART_INT_MASK_RXDRDY) &&
		 uart_nrfx_irq_rx_ready(dev)));
}
    af06:	bd10      	pop	{r4, pc}
		 uart_nrfx_irq_tx_ready_complete(dev))
    af08:	f7ff ffba 	bl	ae80 <uart_nrfx_irq_tx_ready_complete>
					   NRF_UART_INT_MASK_TXDRDY) &&
    af0c:	2800      	cmp	r0, #0
    af0e:	d0f3      	beq.n	aef8 <uart_nrfx_irq_is_pending+0x10>
		||
    af10:	2001      	movs	r0, #1
    af12:	e7f8      	b.n	af06 <uart_nrfx_irq_is_pending+0x1e>
		 uart_nrfx_irq_rx_ready(dev)));
    af14:	4620      	mov	r0, r4
    af16:	f7ff ffcd 	bl	aeb4 <uart_nrfx_irq_rx_ready>
					   NRF_UART_INT_MASK_RXDRDY) &&
    af1a:	2800      	cmp	r0, #0
    af1c:	d0f3      	beq.n	af06 <uart_nrfx_irq_is_pending+0x1e>
		||
    af1e:	2001      	movs	r0, #1
    af20:	e7f1      	b.n	af06 <uart_nrfx_irq_is_pending+0x1e>
    af22:	bf00      	nop
    af24:	40002000 	.word	0x40002000

0000af28 <uart_nrfx_irq_callback_set>:
static void uart_nrfx_irq_callback_set(const struct device *dev,
				       uart_irq_callback_user_data_t cb,
				       void *cb_data)
{
	(void)dev;
	irq_callback = cb;
    af28:	4b02      	ldr	r3, [pc, #8]	; (af34 <uart_nrfx_irq_callback_set+0xc>)
    af2a:	6019      	str	r1, [r3, #0]
	irq_cb_data = cb_data;
    af2c:	4b02      	ldr	r3, [pc, #8]	; (af38 <uart_nrfx_irq_callback_set+0x10>)
    af2e:	601a      	str	r2, [r3, #0]
}
    af30:	4770      	bx	lr
    af32:	bf00      	nop
    af34:	2000374c 	.word	0x2000374c
    af38:	20003748 	.word	0x20003748

0000af3c <uart_nrfx_pm_action>:
};

#ifdef CONFIG_PM_DEVICE
static int uart_nrfx_pm_action(const struct device *dev,
			       enum pm_device_action action)
{
    af3c:	b508      	push	{r3, lr}
	const struct uart_nrfx_config *config = dev->config;
    af3e:	6842      	ldr	r2, [r0, #4]
	int ret;

	switch (action) {
    af40:	b179      	cbz	r1, af62 <uart_nrfx_pm_action+0x26>
    af42:	2901      	cmp	r1, #1
    af44:	d119      	bne.n	af7a <uart_nrfx_pm_action+0x3e>
	case PM_DEVICE_ACTION_RESUME:
		if (IS_ENABLED(CONFIG_UART_0_GPIO_MANAGEMENT)) {
			ret = pinctrl_apply_state(config->pcfg,
    af46:	2100      	movs	r1, #0
    af48:	6810      	ldr	r0, [r2, #0]
    af4a:	f008 fca7 	bl	1389c <pinctrl_apply_state>
						  PINCTRL_STATE_DEFAULT);
			if (ret < 0) {
    af4e:	2800      	cmp	r0, #0
    af50:	db15      	blt.n	af7e <uart_nrfx_pm_action+0x42>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    af52:	4b0b      	ldr	r3, [pc, #44]	; (af80 <uart_nrfx_pm_action+0x44>)
    af54:	2204      	movs	r2, #4
    af56:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    af5a:	2201      	movs	r2, #1
    af5c:	601a      	str	r2, [r3, #0]
		break;
	default:
		return -ENOTSUP;
	}

	return 0;
    af5e:	2000      	movs	r0, #0
}
    af60:	e00d      	b.n	af7e <uart_nrfx_pm_action+0x42>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
    af62:	4b07      	ldr	r3, [pc, #28]	; (af80 <uart_nrfx_pm_action+0x44>)
    af64:	2100      	movs	r1, #0
    af66:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
			ret = pinctrl_apply_state(config->pcfg,
    af6a:	2101      	movs	r1, #1
    af6c:	6810      	ldr	r0, [r2, #0]
    af6e:	f008 fc95 	bl	1389c <pinctrl_apply_state>
			if (ret < 0) {
    af72:	2800      	cmp	r0, #0
    af74:	db03      	blt.n	af7e <uart_nrfx_pm_action+0x42>
	return 0;
    af76:	2000      	movs	r0, #0
    af78:	e001      	b.n	af7e <uart_nrfx_pm_action+0x42>
	switch (action) {
    af7a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    af7e:	bd08      	pop	{r3, pc}
    af80:	40002000 	.word	0x40002000

0000af84 <uart_nrfx_irq_tx_enable>:
{
    af84:	b508      	push	{r3, lr}
	disable_tx_irq = false;
    af86:	4b0f      	ldr	r3, [pc, #60]	; (afc4 <uart_nrfx_irq_tx_enable+0x40>)
    af88:	2200      	movs	r2, #0
    af8a:	701a      	strb	r2, [r3, #0]
	pm_device_busy_set(dev);
    af8c:	f005 fdd0 	bl	10b30 <pm_device_busy_set>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    af90:	4b0d      	ldr	r3, [pc, #52]	; (afc8 <uart_nrfx_irq_tx_enable+0x44>)
    af92:	2201      	movs	r2, #1
    af94:	609a      	str	r2, [r3, #8]
    p_reg->INTENSET = mask;
    af96:	2280      	movs	r2, #128	; 0x80
    af98:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	__asm__ volatile(
    af9c:	f04f 0220 	mov.w	r2, #32
    afa0:	f3ef 8311 	mrs	r3, BASEPRI
    afa4:	f382 8812 	msr	BASEPRI_MAX, r2
    afa8:	f3bf 8f6f 	isb	sy
	if (uart_sw_event_txdrdy) {
    afac:	4a07      	ldr	r2, [pc, #28]	; (afcc <uart_nrfx_irq_tx_enable+0x48>)
    afae:	7812      	ldrb	r2, [r2, #0]
    afb0:	b11a      	cbz	r2, afba <uart_nrfx_irq_tx_enable+0x36>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    afb2:	4a07      	ldr	r2, [pc, #28]	; (afd0 <uart_nrfx_irq_tx_enable+0x4c>)
    afb4:	2104      	movs	r1, #4
    afb6:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	__asm__ volatile(
    afba:	f383 8811 	msr	BASEPRI, r3
    afbe:	f3bf 8f6f 	isb	sy
}
    afc2:	bd08      	pop	{r3, pc}
    afc4:	20003cbb 	.word	0x20003cbb
    afc8:	40002000 	.word	0x40002000
    afcc:	20003cbc 	.word	0x20003cbc
    afd0:	e000e100 	.word	0xe000e100

0000afd4 <uart_nrfx_poll_out>:
{
    afd4:	b538      	push	{r3, r4, r5, lr}
    afd6:	460c      	mov	r4, r1
	if (!k_is_in_isr()) {
    afd8:	f009 fb7c 	bl	146d4 <k_is_in_isr>
    afdc:	b9b8      	cbnz	r0, b00e <uart_nrfx_poll_out+0x3a>
		uint8_t safety_cnt = 100;
    afde:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    afe0:	4b18      	ldr	r3, [pc, #96]	; (b044 <uart_nrfx_poll_out+0x70>)
    afe2:	2201      	movs	r2, #1
    afe4:	f3bf 8f5b 	dmb	ish
    afe8:	e853 1f00 	ldrex	r1, [r3]
    afec:	2900      	cmp	r1, #0
    afee:	d103      	bne.n	aff8 <uart_nrfx_poll_out+0x24>
    aff0:	e843 2000 	strex	r0, r2, [r3]
    aff4:	2800      	cmp	r0, #0
    aff6:	d1f7      	bne.n	afe8 <uart_nrfx_poll_out+0x14>
    aff8:	f3bf 8f5b 	dmb	ish
				  (atomic_val_t) 1) == false) {
    affc:	d00a      	beq.n	b014 <uart_nrfx_poll_out+0x40>
				k_msleep(1);
    affe:	2001      	movs	r0, #1
    b000:	f008 fc5c 	bl	138bc <k_msleep>
			if (--safety_cnt == 0) {
    b004:	3d01      	subs	r5, #1
    b006:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    b00a:	d1e9      	bne.n	afe0 <uart_nrfx_poll_out+0xc>
    b00c:	e002      	b.n	b014 <uart_nrfx_poll_out+0x40>
		*lock = 1;
    b00e:	4b0d      	ldr	r3, [pc, #52]	; (b044 <uart_nrfx_poll_out+0x70>)
    b010:	2201      	movs	r2, #1
    b012:	601a      	str	r2, [r3, #0]
	event_txdrdy_clear();
    b014:	f7ff fdce 	bl	abb4 <event_txdrdy_clear>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b018:	4b0b      	ldr	r3, [pc, #44]	; (b048 <uart_nrfx_poll_out+0x74>)
    b01a:	2201      	movs	r2, #1
    b01c:	609a      	str	r2, [r3, #8]
    p_reg->TXD = txd;
    b01e:	f8c3 451c 	str.w	r4, [r3, #1308]	; 0x51c
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
    b022:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    b026:	f7ff fdb3 	bl	ab90 <event_txdrdy_check>
    b02a:	b920      	cbnz	r0, b036 <uart_nrfx_poll_out+0x62>
    b02c:	2001      	movs	r0, #1
    b02e:	f008 ff65 	bl	13efc <nrfx_busy_wait>
    b032:	3c01      	subs	r4, #1
    b034:	d1f7      	bne.n	b026 <uart_nrfx_poll_out+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b036:	4b04      	ldr	r3, [pc, #16]	; (b048 <uart_nrfx_poll_out+0x74>)
    b038:	2201      	movs	r2, #1
    b03a:	60da      	str	r2, [r3, #12]
	*lock = 0;
    b03c:	4b01      	ldr	r3, [pc, #4]	; (b044 <uart_nrfx_poll_out+0x70>)
    b03e:	2200      	movs	r2, #0
    b040:	601a      	str	r2, [r3, #0]
}
    b042:	bd38      	pop	{r3, r4, r5, pc}
    b044:	20003744 	.word	0x20003744
    b048:	40002000 	.word	0x40002000

0000b04c <uart_nrfx_init>:
{
    b04c:	b570      	push	{r4, r5, r6, lr}
    b04e:	4604      	mov	r4, r0
	const struct uart_nrfx_config *config = dev->config;
    b050:	6843      	ldr	r3, [r0, #4]
	struct uart_nrfx_data *data = dev->data;
    b052:	6906      	ldr	r6, [r0, #16]
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
    b054:	2100      	movs	r1, #0
    b056:	4a12      	ldr	r2, [pc, #72]	; (b0a0 <uart_nrfx_init+0x54>)
    b058:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
    b05c:	6818      	ldr	r0, [r3, #0]
    b05e:	f008 fc1d 	bl	1389c <pinctrl_apply_state>
	if (err < 0) {
    b062:	1e05      	subs	r5, r0, #0
    b064:	db05      	blt.n	b072 <uart_nrfx_init+0x26>
	err = uart_nrfx_configure(dev, &data->uart_config);
    b066:	4631      	mov	r1, r6
    b068:	4620      	mov	r0, r4
    b06a:	f7ff fe7b 	bl	ad64 <uart_nrfx_configure>
	if (err) {
    b06e:	4605      	mov	r5, r0
    b070:	b108      	cbz	r0, b076 <uart_nrfx_init+0x2a>
}
    b072:	4628      	mov	r0, r5
    b074:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    b076:	4b0a      	ldr	r3, [pc, #40]	; (b0a0 <uart_nrfx_init+0x54>)
    b078:	2204      	movs	r2, #4
    b07a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b07e:	2200      	movs	r2, #0
    b080:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    b084:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b088:	2101      	movs	r1, #1
    b08a:	6019      	str	r1, [r3, #0]
	uart_sw_event_txdrdy = 1U;
    b08c:	4b05      	ldr	r3, [pc, #20]	; (b0a4 <uart_nrfx_init+0x58>)
    b08e:	7019      	strb	r1, [r3, #0]
	IRQ_CONNECT(IRQN,
    b090:	2002      	movs	r0, #2
    b092:	f007 fc51 	bl	12938 <z_arm_irq_priority_set>
	irq_enable(IRQN);
    b096:	2002      	movs	r0, #2
    b098:	f007 fc44 	bl	12924 <arch_irq_enable>
	return 0;
    b09c:	e7e9      	b.n	b072 <uart_nrfx_init+0x26>
    b09e:	bf00      	nop
    b0a0:	40002000 	.word	0x40002000
    b0a4:	20003cbc 	.word	0x20003cbc

0000b0a8 <uart_nrfx_isr>:
{
    b0a8:	b508      	push	{r3, lr}
	if (disable_tx_irq &&
    b0aa:	4b12      	ldr	r3, [pc, #72]	; (b0f4 <uart_nrfx_isr+0x4c>)
    b0ac:	781b      	ldrb	r3, [r3, #0]
    b0ae:	b11b      	cbz	r3, b0b8 <uart_nrfx_isr+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b0b0:	4b11      	ldr	r3, [pc, #68]	; (b0f8 <uart_nrfx_isr+0x50>)
    b0b2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    b0b6:	b983      	cbnz	r3, b0da <uart_nrfx_isr+0x32>
    b0b8:	4b0f      	ldr	r3, [pc, #60]	; (b0f8 <uart_nrfx_isr+0x50>)
    b0ba:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_ERROR)) {
    b0be:	b12b      	cbz	r3, b0cc <uart_nrfx_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b0c0:	4b0d      	ldr	r3, [pc, #52]	; (b0f8 <uart_nrfx_isr+0x50>)
    b0c2:	2200      	movs	r2, #0
    b0c4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    b0c8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (irq_callback) {
    b0cc:	4b0b      	ldr	r3, [pc, #44]	; (b0fc <uart_nrfx_isr+0x54>)
    b0ce:	681b      	ldr	r3, [r3, #0]
    b0d0:	b113      	cbz	r3, b0d8 <uart_nrfx_isr+0x30>
		irq_callback(dev, irq_cb_data);
    b0d2:	4a0b      	ldr	r2, [pc, #44]	; (b100 <uart_nrfx_isr+0x58>)
    b0d4:	6811      	ldr	r1, [r2, #0]
    b0d6:	4798      	blx	r3
}
    b0d8:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    b0da:	4b07      	ldr	r3, [pc, #28]	; (b0f8 <uart_nrfx_isr+0x50>)
    b0dc:	2280      	movs	r2, #128	; 0x80
    b0de:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b0e2:	2201      	movs	r2, #1
    b0e4:	60da      	str	r2, [r3, #12]
		pm_device_busy_clear(dev);
    b0e6:	f005 fd33 	bl	10b50 <pm_device_busy_clear>
		disable_tx_irq = false;
    b0ea:	4b02      	ldr	r3, [pc, #8]	; (b0f4 <uart_nrfx_isr+0x4c>)
    b0ec:	2200      	movs	r2, #0
    b0ee:	701a      	strb	r2, [r3, #0]
		return;
    b0f0:	e7f2      	b.n	b0d8 <uart_nrfx_isr+0x30>
    b0f2:	bf00      	nop
    b0f4:	20003cbb 	.word	0x20003cbb
    b0f8:	40002000 	.word	0x40002000
    b0fc:	2000374c 	.word	0x2000374c
    b100:	20003748 	.word	0x20003748

0000b104 <get_nrf_spi_frequency>:

static inline nrf_spi_frequency_t get_nrf_spi_frequency(uint32_t frequency)
{
	/* Get the highest supported frequency not exceeding the requested one.
	 */
	if (frequency < 250000) {
    b104:	4b13      	ldr	r3, [pc, #76]	; (b154 <get_nrf_spi_frequency+0x50>)
    b106:	4298      	cmp	r0, r3
    b108:	d911      	bls.n	b12e <get_nrf_spi_frequency+0x2a>
		return NRF_SPI_FREQ_125K;
	} else if (frequency < 500000) {
    b10a:	4b13      	ldr	r3, [pc, #76]	; (b158 <get_nrf_spi_frequency+0x54>)
    b10c:	4298      	cmp	r0, r3
    b10e:	d911      	bls.n	b134 <get_nrf_spi_frequency+0x30>
		return NRF_SPI_FREQ_250K;
	} else if (frequency < 1000000) {
    b110:	4b12      	ldr	r3, [pc, #72]	; (b15c <get_nrf_spi_frequency+0x58>)
    b112:	4298      	cmp	r0, r3
    b114:	d911      	bls.n	b13a <get_nrf_spi_frequency+0x36>
		return NRF_SPI_FREQ_500K;
	} else if (frequency < 2000000) {
    b116:	4b12      	ldr	r3, [pc, #72]	; (b160 <get_nrf_spi_frequency+0x5c>)
    b118:	4298      	cmp	r0, r3
    b11a:	d911      	bls.n	b140 <get_nrf_spi_frequency+0x3c>
		return NRF_SPI_FREQ_1M;
	} else if (frequency < 4000000) {
    b11c:	4b11      	ldr	r3, [pc, #68]	; (b164 <get_nrf_spi_frequency+0x60>)
    b11e:	4298      	cmp	r0, r3
    b120:	d911      	bls.n	b146 <get_nrf_spi_frequency+0x42>
		return NRF_SPI_FREQ_2M;
	} else if (frequency < 8000000) {
    b122:	4b11      	ldr	r3, [pc, #68]	; (b168 <get_nrf_spi_frequency+0x64>)
    b124:	4298      	cmp	r0, r3
    b126:	d211      	bcs.n	b14c <get_nrf_spi_frequency+0x48>
		return NRF_SPI_FREQ_4M;
    b128:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b12c:	4770      	bx	lr
		return NRF_SPI_FREQ_125K;
    b12e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    b132:	4770      	bx	lr
		return NRF_SPI_FREQ_250K;
    b134:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    b138:	4770      	bx	lr
		return NRF_SPI_FREQ_500K;
    b13a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    b13e:	4770      	bx	lr
		return NRF_SPI_FREQ_1M;
    b140:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b144:	4770      	bx	lr
		return NRF_SPI_FREQ_2M;
    b146:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
    b14a:	4770      	bx	lr
	} else {
		return NRF_SPI_FREQ_8M;
    b14c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
	}
}
    b150:	4770      	bx	lr
    b152:	bf00      	nop
    b154:	0003d08f 	.word	0x0003d08f
    b158:	0007a11f 	.word	0x0007a11f
    b15c:	000f423f 	.word	0x000f423f
    b160:	001e847f 	.word	0x001e847f
    b164:	003d08ff 	.word	0x003d08ff
    b168:	007a1200 	.word	0x007a1200

0000b16c <configure>:
	}
}

static int configure(const struct device *dev,
		     const struct spi_config *spi_cfg)
{
    b16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b170:	b0a0      	sub	sp, #128	; 0x80
    b172:	af00      	add	r7, sp, #0
    b174:	460c      	mov	r4, r1
	struct spi_nrfx_data *dev_data = dev->data;
    b176:	6905      	ldr	r5, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    b178:	6846      	ldr	r6, [r0, #4]
	struct spi_context *ctx = &dev_data->ctx;
	nrfx_spi_config_t config;
	nrfx_err_t result;

	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    b17a:	f895 806d 	ldrb.w	r8, [r5, #109]	; 0x6d
    b17e:	f1b8 0f00 	cmp.w	r8, #0
    b182:	d003      	beq.n	b18c <configure+0x20>
	._ctx_name.num_cs_gpios = DT_PROP_LEN_OR(_node_id, cs_gpios, 0),

static inline bool spi_context_configured(struct spi_context *ctx,
					  const struct spi_config *config)
{
	return !!(ctx->config == config);
    b184:	682b      	ldr	r3, [r5, #0]
    b186:	4299      	cmp	r1, r3
    b188:	f000 81b6 	beq.w	b4f8 <configure+0x38c>
		/* Already configured. No need to do it again. */
		return 0;
	}

	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    b18c:	88a3      	ldrh	r3, [r4, #4]
    b18e:	f413 6f00 	tst.w	r3, #2048	; 0x800
    b192:	d14a      	bne.n	b22a <configure+0xbe>
		LOG_ERR("Half-duplex not supported");
		return -ENOTSUP;
	}

	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    b194:	f013 0f01 	tst.w	r3, #1
    b198:	d170      	bne.n	b27c <configure+0x110>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
		return -EINVAL;
	}

	if (spi_cfg->operation & SPI_MODE_LOOP) {
    b19a:	f013 0f08 	tst.w	r3, #8
    b19e:	f040 80c6 	bne.w	b32e <configure+0x1c2>
	    (spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
		LOG_ERR("Only single line mode is supported");
		return -EINVAL;
	}

	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    b1a2:	f3c3 1345 	ubfx	r3, r3, #5, #6
    b1a6:	2b08      	cmp	r3, #8
    b1a8:	f040 80ea 	bne.w	b380 <configure+0x214>
		LOG_ERR("Word sizes other than 8 bits are not supported");
		return -EINVAL;
	}

	if (spi_cfg->frequency < 125000) {
    b1ac:	6822      	ldr	r2, [r4, #0]
    b1ae:	4bb4      	ldr	r3, [pc, #720]	; (b480 <configure+0x314>)
    b1b0:	429a      	cmp	r2, r3
    b1b2:	f240 810e 	bls.w	b3d2 <configure+0x266>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
		return -EINVAL;
	}

	config = dev_config->def_config;
    b1b6:	f107 0c0c 	add.w	ip, r7, #12
    b1ba:	f106 0e08 	add.w	lr, r6, #8
    b1be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    b1c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    b1c6:	f8de 3000 	ldr.w	r3, [lr]
    b1ca:	f8cc 3000 	str.w	r3, [ip]

	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
    b1ce:	6820      	ldr	r0, [r4, #0]
    b1d0:	f7ff ff98 	bl	b104 <get_nrf_spi_frequency>
    b1d4:	6178      	str	r0, [r7, #20]
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
    b1d6:	88a3      	ldrh	r3, [r4, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    b1d8:	f013 0f02 	tst.w	r3, #2
    b1dc:	f000 8122 	beq.w	b424 <configure+0x2b8>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    b1e0:	f013 0f04 	tst.w	r3, #4
    b1e4:	f000 8123 	beq.w	b42e <configure+0x2c2>
			return NRF_SPI_MODE_3;
    b1e8:	2303      	movs	r3, #3
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
    b1ea:	763b      	strb	r3, [r7, #24]
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
    b1ec:	88a3      	ldrh	r3, [r4, #4]
	if (operation & SPI_TRANSFER_LSB) {
    b1ee:	f013 0f10 	tst.w	r3, #16
    b1f2:	f000 8120 	beq.w	b436 <configure+0x2ca>
		return NRF_SPI_BIT_ORDER_LSB_FIRST;
    b1f6:	2301      	movs	r3, #1
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
    b1f8:	767b      	strb	r3, [r7, #25]

	if (dev_data->initialized) {
    b1fa:	f1b8 0f00 	cmp.w	r8, #0
    b1fe:	f040 811c 	bne.w	b43a <configure+0x2ce>
		nrfx_spi_uninit(&dev_config->spi);
		dev_data->initialized = false;
	}

	result = nrfx_spi_init(&dev_config->spi, &config,
    b202:	462b      	mov	r3, r5
    b204:	4a9f      	ldr	r2, [pc, #636]	; (b484 <configure+0x318>)
    b206:	f107 010c 	add.w	r1, r7, #12
    b20a:	4630      	mov	r0, r6
    b20c:	f001 fbf6 	bl	c9fc <nrfx_spi_init>
			       event_handler, dev_data);
	if (result != NRFX_SUCCESS) {
    b210:	4b9d      	ldr	r3, [pc, #628]	; (b488 <configure+0x31c>)
    b212:	4298      	cmp	r0, r3
    b214:	f040 8118 	bne.w	b448 <configure+0x2dc>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
		return -EIO;
	}

	dev_data->initialized = true;
    b218:	2301      	movs	r3, #1
    b21a:	f885 306d 	strb.w	r3, [r5, #109]	; 0x6d

	ctx->config = spi_cfg;
    b21e:	602c      	str	r4, [r5, #0]

	return 0;
    b220:	2000      	movs	r0, #0
}
    b222:	3780      	adds	r7, #128	; 0x80
    b224:	46bd      	mov	sp, r7
    b226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Half-duplex not supported");
    b22a:	4b98      	ldr	r3, [pc, #608]	; (b48c <configure+0x320>)
    b22c:	681b      	ldr	r3, [r3, #0]
    b22e:	f013 0f07 	tst.w	r3, #7
    b232:	d102      	bne.n	b23a <configure+0xce>
		return -ENOTSUP;
    b234:	f06f 0085 	mvn.w	r0, #133	; 0x85
    b238:	e7f3      	b.n	b222 <configure+0xb6>
		LOG_ERR("Half-duplex not supported");
    b23a:	4b95      	ldr	r3, [pc, #596]	; (b490 <configure+0x324>)
    b23c:	67fb      	str	r3, [r7, #124]	; 0x7c
    b23e:	2302      	movs	r3, #2
    b240:	723b      	strb	r3, [r7, #8]
    b242:	2300      	movs	r3, #0
    b244:	727b      	strb	r3, [r7, #9]
    b246:	72bb      	strb	r3, [r7, #10]
    b248:	72fb      	strb	r3, [r7, #11]
    b24a:	68ba      	ldr	r2, [r7, #8]
    b24c:	67ba      	str	r2, [r7, #120]	; 0x78
    b24e:	4619      	mov	r1, r3
    b250:	f363 0100 	bfi	r1, r3, #0, #1
    b254:	f363 0141 	bfi	r1, r3, #1, #1
    b258:	f363 0182 	bfi	r1, r3, #2, #1
    b25c:	f363 01c5 	bfi	r1, r3, #3, #3
    b260:	2201      	movs	r2, #1
    b262:	f362 1188 	bfi	r1, r2, #6, #3
    b266:	2208      	movs	r2, #8
    b268:	f362 2153 	bfi	r1, r2, #9, #11
    b26c:	f363 511f 	bfi	r1, r3, #20, #12
    b270:	f107 0278 	add.w	r2, r7, #120	; 0x78
    b274:	4885      	ldr	r0, [pc, #532]	; (b48c <configure+0x320>)
    b276:	f7f9 fb51 	bl	491c <z_impl_z_log_msg_static_create>
    b27a:	e7db      	b.n	b234 <configure+0xc8>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
    b27c:	4b83      	ldr	r3, [pc, #524]	; (b48c <configure+0x320>)
    b27e:	681b      	ldr	r3, [r3, #0]
    b280:	f013 0f07 	tst.w	r3, #7
    b284:	d04d      	beq.n	b322 <configure+0x1b6>
    b286:	6801      	ldr	r1, [r0, #0]
    b288:	466d      	mov	r5, sp
    b28a:	2300      	movs	r3, #0
    b28c:	723b      	strb	r3, [r7, #8]
    b28e:	2302      	movs	r3, #2
    b290:	727b      	strb	r3, [r7, #9]
    b292:	b088      	sub	sp, #32
    b294:	466c      	mov	r4, sp
    b296:	f114 0210 	adds.w	r2, r4, #16
    b29a:	d011      	beq.n	b2c0 <configure+0x154>
    b29c:	200e      	movs	r0, #14
    b29e:	b11a      	cbz	r2, b2a8 <configure+0x13c>
    b2a0:	2804      	cmp	r0, #4
    b2a2:	dd01      	ble.n	b2a8 <configure+0x13c>
    b2a4:	4b7b      	ldr	r3, [pc, #492]	; (b494 <configure+0x328>)
    b2a6:	6163      	str	r3, [r4, #20]
    b2a8:	2300      	movs	r3, #0
    b2aa:	713b      	strb	r3, [r7, #4]
    b2ac:	2302      	movs	r3, #2
    b2ae:	717b      	strb	r3, [r7, #5]
    b2b0:	b19a      	cbz	r2, b2da <configure+0x16e>
    b2b2:	2808      	cmp	r0, #8
    b2b4:	dd00      	ble.n	b2b8 <configure+0x14c>
    b2b6:	61a1      	str	r1, [r4, #24]
    b2b8:	f104 031c 	add.w	r3, r4, #28
    b2bc:	2100      	movs	r1, #0
    b2be:	e00a      	b.n	b2d6 <configure+0x16a>
    b2c0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    b2c4:	e7eb      	b.n	b29e <configure+0x132>
    b2c6:	f101 0680 	add.w	r6, r1, #128	; 0x80
    b2ca:	443e      	add	r6, r7
    b2cc:	f816 6c7c 	ldrb.w	r6, [r6, #-124]
    b2d0:	f803 6b01 	strb.w	r6, [r3], #1
    b2d4:	3101      	adds	r1, #1
    b2d6:	2901      	cmp	r1, #1
    b2d8:	d9f5      	bls.n	b2c6 <configure+0x15a>
    b2da:	280d      	cmp	r0, #13
    b2dc:	dd24      	ble.n	b328 <configure+0x1bc>
    b2de:	230e      	movs	r3, #14
    b2e0:	b142      	cbz	r2, b2f4 <configure+0x188>
    b2e2:	2103      	movs	r1, #3
    b2e4:	7239      	strb	r1, [r7, #8]
    b2e6:	2100      	movs	r1, #0
    b2e8:	7279      	strb	r1, [r7, #9]
    b2ea:	72b9      	strb	r1, [r7, #10]
    b2ec:	2101      	movs	r1, #1
    b2ee:	72f9      	strb	r1, [r7, #11]
    b2f0:	68b8      	ldr	r0, [r7, #8]
    b2f2:	6120      	str	r0, [r4, #16]
    b2f4:	2100      	movs	r1, #0
    b2f6:	f36f 0100 	bfc	r1, #0, #1
    b2fa:	f36f 0141 	bfc	r1, #1, #1
    b2fe:	f36f 0182 	bfc	r1, #2, #1
    b302:	f36f 01c5 	bfc	r1, #3, #3
    b306:	2001      	movs	r0, #1
    b308:	f360 1188 	bfi	r1, r0, #6, #3
    b30c:	f3c3 030a 	ubfx	r3, r3, #0, #11
    b310:	f363 2153 	bfi	r1, r3, #9, #11
    b314:	f36f 511f 	bfc	r1, #20, #12
    b318:	2300      	movs	r3, #0
    b31a:	485c      	ldr	r0, [pc, #368]	; (b48c <configure+0x320>)
    b31c:	f7f9 fafe 	bl	491c <z_impl_z_log_msg_static_create>
    b320:	46ad      	mov	sp, r5
		return -EINVAL;
    b322:	f06f 0015 	mvn.w	r0, #21
    b326:	e77c      	b.n	b222 <configure+0xb6>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
    b328:	f06f 031b 	mvn.w	r3, #27
    b32c:	e7d8      	b.n	b2e0 <configure+0x174>
		LOG_ERR("Loopback mode is not supported");
    b32e:	4b57      	ldr	r3, [pc, #348]	; (b48c <configure+0x320>)
    b330:	681b      	ldr	r3, [r3, #0]
    b332:	f013 0f07 	tst.w	r3, #7
    b336:	d102      	bne.n	b33e <configure+0x1d2>
		return -EINVAL;
    b338:	f06f 0015 	mvn.w	r0, #21
    b33c:	e771      	b.n	b222 <configure+0xb6>
		LOG_ERR("Loopback mode is not supported");
    b33e:	4b56      	ldr	r3, [pc, #344]	; (b498 <configure+0x32c>)
    b340:	667b      	str	r3, [r7, #100]	; 0x64
    b342:	2302      	movs	r3, #2
    b344:	723b      	strb	r3, [r7, #8]
    b346:	2300      	movs	r3, #0
    b348:	727b      	strb	r3, [r7, #9]
    b34a:	72bb      	strb	r3, [r7, #10]
    b34c:	72fb      	strb	r3, [r7, #11]
    b34e:	68ba      	ldr	r2, [r7, #8]
    b350:	663a      	str	r2, [r7, #96]	; 0x60
    b352:	4619      	mov	r1, r3
    b354:	f363 0100 	bfi	r1, r3, #0, #1
    b358:	f363 0141 	bfi	r1, r3, #1, #1
    b35c:	f363 0182 	bfi	r1, r3, #2, #1
    b360:	f363 01c5 	bfi	r1, r3, #3, #3
    b364:	2201      	movs	r2, #1
    b366:	f362 1188 	bfi	r1, r2, #6, #3
    b36a:	2208      	movs	r2, #8
    b36c:	f362 2153 	bfi	r1, r2, #9, #11
    b370:	f363 511f 	bfi	r1, r3, #20, #12
    b374:	f107 0260 	add.w	r2, r7, #96	; 0x60
    b378:	4844      	ldr	r0, [pc, #272]	; (b48c <configure+0x320>)
    b37a:	f7f9 facf 	bl	491c <z_impl_z_log_msg_static_create>
    b37e:	e7db      	b.n	b338 <configure+0x1cc>
		LOG_ERR("Word sizes other than 8 bits are not supported");
    b380:	4b42      	ldr	r3, [pc, #264]	; (b48c <configure+0x320>)
    b382:	681b      	ldr	r3, [r3, #0]
    b384:	f013 0f07 	tst.w	r3, #7
    b388:	d102      	bne.n	b390 <configure+0x224>
		return -EINVAL;
    b38a:	f06f 0015 	mvn.w	r0, #21
    b38e:	e748      	b.n	b222 <configure+0xb6>
		LOG_ERR("Word sizes other than 8 bits are not supported");
    b390:	4b42      	ldr	r3, [pc, #264]	; (b49c <configure+0x330>)
    b392:	64fb      	str	r3, [r7, #76]	; 0x4c
    b394:	2302      	movs	r3, #2
    b396:	723b      	strb	r3, [r7, #8]
    b398:	2300      	movs	r3, #0
    b39a:	727b      	strb	r3, [r7, #9]
    b39c:	72bb      	strb	r3, [r7, #10]
    b39e:	72fb      	strb	r3, [r7, #11]
    b3a0:	68ba      	ldr	r2, [r7, #8]
    b3a2:	64ba      	str	r2, [r7, #72]	; 0x48
    b3a4:	4619      	mov	r1, r3
    b3a6:	f363 0100 	bfi	r1, r3, #0, #1
    b3aa:	f363 0141 	bfi	r1, r3, #1, #1
    b3ae:	f363 0182 	bfi	r1, r3, #2, #1
    b3b2:	f363 01c5 	bfi	r1, r3, #3, #3
    b3b6:	2201      	movs	r2, #1
    b3b8:	f362 1188 	bfi	r1, r2, #6, #3
    b3bc:	2208      	movs	r2, #8
    b3be:	f362 2153 	bfi	r1, r2, #9, #11
    b3c2:	f363 511f 	bfi	r1, r3, #20, #12
    b3c6:	f107 0248 	add.w	r2, r7, #72	; 0x48
    b3ca:	4830      	ldr	r0, [pc, #192]	; (b48c <configure+0x320>)
    b3cc:	f7f9 faa6 	bl	491c <z_impl_z_log_msg_static_create>
    b3d0:	e7db      	b.n	b38a <configure+0x21e>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    b3d2:	4b2e      	ldr	r3, [pc, #184]	; (b48c <configure+0x320>)
    b3d4:	681b      	ldr	r3, [r3, #0]
    b3d6:	f013 0f07 	tst.w	r3, #7
    b3da:	d102      	bne.n	b3e2 <configure+0x276>
		return -EINVAL;
    b3dc:	f06f 0015 	mvn.w	r0, #21
    b3e0:	e71f      	b.n	b222 <configure+0xb6>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    b3e2:	4b2f      	ldr	r3, [pc, #188]	; (b4a0 <configure+0x334>)
    b3e4:	637b      	str	r3, [r7, #52]	; 0x34
    b3e6:	2302      	movs	r3, #2
    b3e8:	723b      	strb	r3, [r7, #8]
    b3ea:	2300      	movs	r3, #0
    b3ec:	727b      	strb	r3, [r7, #9]
    b3ee:	72bb      	strb	r3, [r7, #10]
    b3f0:	72fb      	strb	r3, [r7, #11]
    b3f2:	68ba      	ldr	r2, [r7, #8]
    b3f4:	633a      	str	r2, [r7, #48]	; 0x30
    b3f6:	4619      	mov	r1, r3
    b3f8:	f363 0100 	bfi	r1, r3, #0, #1
    b3fc:	f363 0141 	bfi	r1, r3, #1, #1
    b400:	f363 0182 	bfi	r1, r3, #2, #1
    b404:	f363 01c5 	bfi	r1, r3, #3, #3
    b408:	2201      	movs	r2, #1
    b40a:	f362 1188 	bfi	r1, r2, #6, #3
    b40e:	2208      	movs	r2, #8
    b410:	f362 2153 	bfi	r1, r2, #9, #11
    b414:	f363 511f 	bfi	r1, r3, #20, #12
    b418:	f107 0230 	add.w	r2, r7, #48	; 0x30
    b41c:	481b      	ldr	r0, [pc, #108]	; (b48c <configure+0x320>)
    b41e:	f7f9 fa7d 	bl	491c <z_impl_z_log_msg_static_create>
    b422:	e7db      	b.n	b3dc <configure+0x270>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    b424:	f013 0f04 	tst.w	r3, #4
    b428:	d003      	beq.n	b432 <configure+0x2c6>
			return NRF_SPI_MODE_1;
    b42a:	2301      	movs	r3, #1
    b42c:	e6dd      	b.n	b1ea <configure+0x7e>
			return NRF_SPI_MODE_2;
    b42e:	2302      	movs	r3, #2
    b430:	e6db      	b.n	b1ea <configure+0x7e>
			return NRF_SPI_MODE_0;
    b432:	2300      	movs	r3, #0
    b434:	e6d9      	b.n	b1ea <configure+0x7e>
		return NRF_SPI_BIT_ORDER_MSB_FIRST;
    b436:	2300      	movs	r3, #0
    b438:	e6de      	b.n	b1f8 <configure+0x8c>
		nrfx_spi_uninit(&dev_config->spi);
    b43a:	4630      	mov	r0, r6
    b43c:	f001 fb28 	bl	ca90 <nrfx_spi_uninit>
		dev_data->initialized = false;
    b440:	2300      	movs	r3, #0
    b442:	f885 306d 	strb.w	r3, [r5, #109]	; 0x6d
    b446:	e6dc      	b.n	b202 <configure+0x96>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
    b448:	4b10      	ldr	r3, [pc, #64]	; (b48c <configure+0x320>)
    b44a:	681b      	ldr	r3, [r3, #0]
    b44c:	f013 0f07 	tst.w	r3, #7
    b450:	d04c      	beq.n	b4ec <configure+0x380>
    b452:	466d      	mov	r5, sp
    b454:	b088      	sub	sp, #32
    b456:	466b      	mov	r3, sp
    b458:	f113 0210 	adds.w	r2, r3, #16
    b45c:	d00d      	beq.n	b47a <configure+0x30e>
    b45e:	210c      	movs	r1, #12
    b460:	b13a      	cbz	r2, b472 <configure+0x306>
    b462:	460c      	mov	r4, r1
    b464:	2904      	cmp	r1, #4
    b466:	dd01      	ble.n	b46c <configure+0x300>
    b468:	4e0e      	ldr	r6, [pc, #56]	; (b4a4 <configure+0x338>)
    b46a:	615e      	str	r6, [r3, #20]
    b46c:	2c08      	cmp	r4, #8
    b46e:	dd1b      	ble.n	b4a8 <configure+0x33c>
    b470:	6198      	str	r0, [r3, #24]
    b472:	290b      	cmp	r1, #11
    b474:	dd3d      	ble.n	b4f2 <configure+0x386>
    b476:	240c      	movs	r4, #12
    b478:	e018      	b.n	b4ac <configure+0x340>
    b47a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b47e:	e7ef      	b.n	b460 <configure+0x2f4>
    b480:	0001e847 	.word	0x0001e847
    b484:	0000b64d 	.word	0x0000b64d
    b488:	0bad0000 	.word	0x0bad0000
    b48c:	20000310 	.word	0x20000310
    b490:	00018990 	.word	0x00018990
    b494:	000189ac 	.word	0x000189ac
    b498:	000189d0 	.word	0x000189d0
    b49c:	000189f0 	.word	0x000189f0
    b4a0:	00018a20 	.word	0x00018a20
    b4a4:	00018a54 	.word	0x00018a54
    b4a8:	f06f 041b 	mvn.w	r4, #27
    b4ac:	b13a      	cbz	r2, b4be <configure+0x352>
    b4ae:	2103      	movs	r1, #3
    b4b0:	7239      	strb	r1, [r7, #8]
    b4b2:	2100      	movs	r1, #0
    b4b4:	7279      	strb	r1, [r7, #9]
    b4b6:	72b9      	strb	r1, [r7, #10]
    b4b8:	72f9      	strb	r1, [r7, #11]
    b4ba:	68b8      	ldr	r0, [r7, #8]
    b4bc:	6118      	str	r0, [r3, #16]
    b4be:	2100      	movs	r1, #0
    b4c0:	f36f 0100 	bfc	r1, #0, #1
    b4c4:	f36f 0141 	bfc	r1, #1, #1
    b4c8:	f36f 0182 	bfc	r1, #2, #1
    b4cc:	f36f 01c5 	bfc	r1, #3, #3
    b4d0:	2301      	movs	r3, #1
    b4d2:	f363 1188 	bfi	r1, r3, #6, #3
    b4d6:	f3c4 030a 	ubfx	r3, r4, #0, #11
    b4da:	f363 2153 	bfi	r1, r3, #9, #11
    b4de:	f36f 511f 	bfc	r1, #20, #12
    b4e2:	2300      	movs	r3, #0
    b4e4:	4805      	ldr	r0, [pc, #20]	; (b4fc <configure+0x390>)
    b4e6:	f7f9 fa19 	bl	491c <z_impl_z_log_msg_static_create>
    b4ea:	46ad      	mov	sp, r5
		return -EIO;
    b4ec:	f06f 0004 	mvn.w	r0, #4
    b4f0:	e697      	b.n	b222 <configure+0xb6>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
    b4f2:	f06f 041b 	mvn.w	r4, #27
    b4f6:	e7d9      	b.n	b4ac <configure+0x340>
		return 0;
    b4f8:	2000      	movs	r0, #0
    b4fa:	e692      	b.n	b222 <configure+0xb6>
    b4fc:	20000310 	.word	0x20000310

0000b500 <spi_context_wait_for_completion>:

static inline size_t spi_context_total_tx_len(struct spi_context *ctx);
static inline size_t spi_context_total_rx_len(struct spi_context *ctx);

static inline int spi_context_wait_for_completion(struct spi_context *ctx)
{
    b500:	b530      	push	{r4, r5, lr}
    b502:	b089      	sub	sp, #36	; 0x24
    b504:	4604      	mov	r4, r0
}

static inline size_t spi_context_total_tx_len(struct spi_context *ctx)
{
	size_t n;
	size_t total_len = 0;
    b506:	2000      	movs	r0, #0

	for (n = 0; n < ctx->tx_count; ++n) {
    b508:	4603      	mov	r3, r0
    b50a:	e005      	b.n	b518 <spi_context_wait_for_completion+0x18>
		total_len += ctx->current_tx[n].len;
    b50c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    b50e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    b512:	6852      	ldr	r2, [r2, #4]
    b514:	4410      	add	r0, r2
	for (n = 0; n < ctx->tx_count; ++n) {
    b516:	3301      	adds	r3, #1
    b518:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    b51a:	4293      	cmp	r3, r2
    b51c:	d3f6      	bcc.n	b50c <spi_context_wait_for_completion+0xc>
}

static inline size_t spi_context_total_rx_len(struct spi_context *ctx)
{
	size_t n;
	size_t total_len = 0;
    b51e:	2200      	movs	r2, #0

	for (n = 0; n < ctx->rx_count; ++n) {
    b520:	4613      	mov	r3, r2
    b522:	e005      	b.n	b530 <spi_context_wait_for_completion+0x30>
		total_len += ctx->current_rx[n].len;
    b524:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    b526:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    b52a:	6849      	ldr	r1, [r1, #4]
    b52c:	440a      	add	r2, r1
	for (n = 0; n < ctx->rx_count; ++n) {
    b52e:	3301      	adds	r3, #1
    b530:	6d21      	ldr	r1, [r4, #80]	; 0x50
    b532:	428b      	cmp	r3, r1
    b534:	d3f6      	bcc.n	b524 <spi_context_wait_for_completion+0x24>
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    b536:	4282      	cmp	r2, r0
    b538:	bf38      	it	cc
    b53a:	4602      	movcc	r2, r0
    b53c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
    b540:	fb03 f002 	mul.w	r0, r3, r2
				     ctx->config->frequency;
    b544:	4625      	mov	r5, r4
    b546:	f855 3b28 	ldr.w	r3, [r5], #40
    b54a:	681b      	ldr	r3, [r3, #0]
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    b54c:	fbb0 f0f3 	udiv	r0, r0, r3
			timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    b550:	30c8      	adds	r0, #200	; 0xc8
    b552:	0c41      	lsrs	r1, r0, #17
    b554:	03c0      	lsls	r0, r0, #15
    b556:	f240 33e7 	movw	r3, #999	; 0x3e7
    b55a:	18c0      	adds	r0, r0, r3
    b55c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b560:	f04f 0300 	mov.w	r3, #0
    b564:	f141 0100 	adc.w	r1, r1, #0
    b568:	f7f4 fdb8 	bl	dc <__aeabi_uldivmod>
    b56c:	4602      	mov	r2, r0
    b56e:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    b570:	4628      	mov	r0, r5
    b572:	f002 f983 	bl	d87c <z_impl_k_sem_take>
		if (k_sem_take(&ctx->sync, timeout)) {
    b576:	b910      	cbnz	r0, b57e <spi_context_wait_for_completion+0x7e>
		status = ctx->sync_status;
    b578:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
    b57a:	b009      	add	sp, #36	; 0x24
    b57c:	bd30      	pop	{r4, r5, pc}
			LOG_ERR("Timeout waiting for transfer complete");
    b57e:	4b16      	ldr	r3, [pc, #88]	; (b5d8 <spi_context_wait_for_completion+0xd8>)
    b580:	681b      	ldr	r3, [r3, #0]
    b582:	f013 0f07 	tst.w	r3, #7
    b586:	d102      	bne.n	b58e <spi_context_wait_for_completion+0x8e>
			return -ETIMEDOUT;
    b588:	f06f 0073 	mvn.w	r0, #115	; 0x73
    b58c:	e7f5      	b.n	b57a <spi_context_wait_for_completion+0x7a>
			LOG_ERR("Timeout waiting for transfer complete");
    b58e:	4b13      	ldr	r3, [pc, #76]	; (b5dc <spi_context_wait_for_completion+0xdc>)
    b590:	9307      	str	r3, [sp, #28]
    b592:	2302      	movs	r3, #2
    b594:	f88d 3004 	strb.w	r3, [sp, #4]
    b598:	2300      	movs	r3, #0
    b59a:	f88d 3005 	strb.w	r3, [sp, #5]
    b59e:	f88d 3006 	strb.w	r3, [sp, #6]
    b5a2:	f88d 3007 	strb.w	r3, [sp, #7]
    b5a6:	9a01      	ldr	r2, [sp, #4]
    b5a8:	9206      	str	r2, [sp, #24]
    b5aa:	4619      	mov	r1, r3
    b5ac:	f363 0100 	bfi	r1, r3, #0, #1
    b5b0:	f363 0141 	bfi	r1, r3, #1, #1
    b5b4:	f363 0182 	bfi	r1, r3, #2, #1
    b5b8:	f363 01c5 	bfi	r1, r3, #3, #3
    b5bc:	2201      	movs	r2, #1
    b5be:	f362 1188 	bfi	r1, r2, #6, #3
    b5c2:	2208      	movs	r2, #8
    b5c4:	f362 2153 	bfi	r1, r2, #9, #11
    b5c8:	f363 511f 	bfi	r1, r3, #20, #12
    b5cc:	aa06      	add	r2, sp, #24
    b5ce:	4802      	ldr	r0, [pc, #8]	; (b5d8 <spi_context_wait_for_completion+0xd8>)
    b5d0:	f7f9 f9a4 	bl	491c <z_impl_z_log_msg_static_create>
    b5d4:	e7d8      	b.n	b588 <spi_context_wait_for_completion+0x88>
    b5d6:	bf00      	nop
    b5d8:	20000310 	.word	0x20000310
    b5dc:	00018a7c 	.word	0x00018a7c

0000b5e0 <transfer_next_chunk>:
	spi_context_complete(ctx, dev, error);
	dev_data->busy = false;
}

static void transfer_next_chunk(const struct device *dev)
{
    b5e0:	b530      	push	{r4, r5, lr}
    b5e2:	b085      	sub	sp, #20
    b5e4:	4604      	mov	r4, r0
	const struct spi_nrfx_config *dev_config = dev->config;
    b5e6:	6840      	ldr	r0, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    b5e8:	6922      	ldr	r2, [r4, #16]
	if (!ctx->tx_len) {
    b5ea:	6d91      	ldr	r1, [r2, #88]	; 0x58
    b5ec:	b301      	cbz	r1, b630 <transfer_next_chunk+0x50>
	} else if (!ctx->rx_len) {
    b5ee:	6e13      	ldr	r3, [r2, #96]	; 0x60
    b5f0:	b303      	cbz	r3, b634 <transfer_next_chunk+0x54>
	return MIN(ctx->tx_len, ctx->rx_len);
    b5f2:	428b      	cmp	r3, r1
    b5f4:	bf28      	it	cs
    b5f6:	460b      	movcs	r3, r1
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
    b5f8:	b323      	cbz	r3, b644 <transfer_next_chunk+0x64>
		nrfx_spi_xfer_desc_t xfer;
		nrfx_err_t result;

		dev_data->chunk_len = chunk_len;
    b5fa:	6693      	str	r3, [r2, #104]	; 0x68

		xfer.p_tx_buffer = ctx->tx_buf;
    b5fc:	6d55      	ldr	r5, [r2, #84]	; 0x54
    b5fe:	9500      	str	r5, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
    b600:	b1d5      	cbz	r5, b638 <transfer_next_chunk+0x58>
    b602:	b9d9      	cbnz	r1, b63c <transfer_next_chunk+0x5c>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    b604:	9101      	str	r1, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    b606:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
    b608:	9102      	str	r1, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    b60a:	b1c9      	cbz	r1, b640 <transfer_next_chunk+0x60>
    b60c:	6e12      	ldr	r2, [r2, #96]	; 0x60
    b60e:	b902      	cbnz	r2, b612 <transfer_next_chunk+0x32>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    b610:	4613      	mov	r3, r2
    b612:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&dev_config->spi, &xfer, 0);
    b614:	2200      	movs	r2, #0
    b616:	4669      	mov	r1, sp
    b618:	f001 fa94 	bl	cb44 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
    b61c:	4b0a      	ldr	r3, [pc, #40]	; (b648 <transfer_next_chunk+0x68>)
    b61e:	4298      	cmp	r0, r3
    b620:	d004      	beq.n	b62c <transfer_next_chunk+0x4c>
			return;
		}

		error = -EIO;
    b622:	f06f 0104 	mvn.w	r1, #4
	}

	finish_transaction(dev, error);
    b626:	4620      	mov	r0, r4
    b628:	f008 fa66 	bl	13af8 <finish_transaction>
}
    b62c:	b005      	add	sp, #20
    b62e:	bd30      	pop	{r4, r5, pc}
		return ctx->rx_len;
    b630:	6e13      	ldr	r3, [r2, #96]	; 0x60
    b632:	e7e1      	b.n	b5f8 <transfer_next_chunk+0x18>
		return ctx->tx_len;
    b634:	460b      	mov	r3, r1
    b636:	e7df      	b.n	b5f8 <transfer_next_chunk+0x18>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    b638:	2100      	movs	r1, #0
    b63a:	e7e3      	b.n	b604 <transfer_next_chunk+0x24>
    b63c:	4619      	mov	r1, r3
    b63e:	e7e1      	b.n	b604 <transfer_next_chunk+0x24>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    b640:	2300      	movs	r3, #0
    b642:	e7e6      	b.n	b612 <transfer_next_chunk+0x32>
	int error = 0;
    b644:	2100      	movs	r1, #0
    b646:	e7ee      	b.n	b626 <transfer_next_chunk+0x46>
    b648:	0bad0000 	.word	0x0bad0000

0000b64c <event_handler>:

static void event_handler(const nrfx_spi_evt_t *p_event, void *p_context)
{
	struct spi_nrfx_data *dev_data = p_context;

	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    b64c:	7803      	ldrb	r3, [r0, #0]
    b64e:	2b00      	cmp	r3, #0
    b650:	f040 809c 	bne.w	b78c <event_handler+0x140>
{
    b654:	b510      	push	{r4, lr}
    b656:	b08e      	sub	sp, #56	; 0x38
    b658:	460c      	mov	r4, r1
		/* Chunk length is set to 0 when a transaction is aborted
		 * due to a timeout.
		 */
		if (dev_data->chunk_len == 0) {
    b65a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
    b65c:	b1ea      	cbz	r2, b69a <event_handler+0x4e>
	if (!ctx->tx_len) {
    b65e:	6d8b      	ldr	r3, [r1, #88]	; 0x58
    b660:	b14b      	cbz	r3, b676 <event_handler+0x2a>
	if (len > ctx->tx_len) {
    b662:	429a      	cmp	r2, r3
    b664:	d81f      	bhi.n	b6a6 <event_handler+0x5a>
	ctx->tx_len -= len;
    b666:	1a9b      	subs	r3, r3, r2
    b668:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
    b66a:	2b00      	cmp	r3, #0
    b66c:	d044      	beq.n	b6f8 <event_handler+0xac>
	} else if (ctx->tx_buf) {
    b66e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
    b670:	b10b      	cbz	r3, b676 <event_handler+0x2a>
		ctx->tx_buf += dfs * len;
    b672:	4413      	add	r3, r2
    b674:	654b      	str	r3, [r1, #84]	; 0x54
			finish_transaction(dev_data->dev, -ETIMEDOUT);
			return;
		}

		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    b676:	6ea2      	ldr	r2, [r4, #104]	; 0x68
	if (!ctx->rx_len) {
    b678:	6e23      	ldr	r3, [r4, #96]	; 0x60
    b67a:	b14b      	cbz	r3, b690 <event_handler+0x44>
	if (len > ctx->rx_len) {
    b67c:	429a      	cmp	r2, r3
    b67e:	d84b      	bhi.n	b718 <event_handler+0xcc>
	ctx->rx_len -= len;
    b680:	1a9b      	subs	r3, r3, r2
    b682:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
    b684:	2b00      	cmp	r3, #0
    b686:	d070      	beq.n	b76a <event_handler+0x11e>
	} else if (ctx->rx_buf) {
    b688:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    b68a:	b10b      	cbz	r3, b690 <event_handler+0x44>
		ctx->rx_buf += dfs * len;
    b68c:	4413      	add	r3, r2
    b68e:	65e3      	str	r3, [r4, #92]	; 0x5c

		transfer_next_chunk(dev_data->dev);
    b690:	6e60      	ldr	r0, [r4, #100]	; 0x64
    b692:	f7ff ffa5 	bl	b5e0 <transfer_next_chunk>
	}
}
    b696:	b00e      	add	sp, #56	; 0x38
    b698:	bd10      	pop	{r4, pc}
			finish_transaction(dev_data->dev, -ETIMEDOUT);
    b69a:	f06f 0173 	mvn.w	r1, #115	; 0x73
    b69e:	6e60      	ldr	r0, [r4, #100]	; 0x64
    b6a0:	f008 fa2a 	bl	13af8 <finish_transaction>
			return;
    b6a4:	e7f7      	b.n	b696 <event_handler+0x4a>
		LOG_ERR("Update exceeds current buffer");
    b6a6:	4b3a      	ldr	r3, [pc, #232]	; (b790 <event_handler+0x144>)
    b6a8:	681b      	ldr	r3, [r3, #0]
    b6aa:	f013 0f07 	tst.w	r3, #7
    b6ae:	d0e2      	beq.n	b676 <event_handler+0x2a>
    b6b0:	4b38      	ldr	r3, [pc, #224]	; (b794 <event_handler+0x148>)
    b6b2:	930d      	str	r3, [sp, #52]	; 0x34
    b6b4:	2302      	movs	r3, #2
    b6b6:	f88d 3004 	strb.w	r3, [sp, #4]
    b6ba:	2300      	movs	r3, #0
    b6bc:	f88d 3005 	strb.w	r3, [sp, #5]
    b6c0:	f88d 3006 	strb.w	r3, [sp, #6]
    b6c4:	f88d 3007 	strb.w	r3, [sp, #7]
    b6c8:	9a01      	ldr	r2, [sp, #4]
    b6ca:	920c      	str	r2, [sp, #48]	; 0x30
    b6cc:	4619      	mov	r1, r3
    b6ce:	f363 0100 	bfi	r1, r3, #0, #1
    b6d2:	f363 0141 	bfi	r1, r3, #1, #1
    b6d6:	f363 0182 	bfi	r1, r3, #2, #1
    b6da:	f363 01c5 	bfi	r1, r3, #3, #3
    b6de:	2201      	movs	r2, #1
    b6e0:	f362 1188 	bfi	r1, r2, #6, #3
    b6e4:	2208      	movs	r2, #8
    b6e6:	f362 2153 	bfi	r1, r2, #9, #11
    b6ea:	f363 511f 	bfi	r1, r3, #20, #12
    b6ee:	aa0c      	add	r2, sp, #48	; 0x30
    b6f0:	4827      	ldr	r0, [pc, #156]	; (b790 <event_handler+0x144>)
    b6f2:	f7f9 f913 	bl	491c <z_impl_z_log_msg_static_create>
    b6f6:	e7be      	b.n	b676 <event_handler+0x2a>
		++ctx->current_tx;
    b6f8:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    b6fa:	3308      	adds	r3, #8
    b6fc:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
    b6fe:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    b700:	3b01      	subs	r3, #1
    b702:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
    b704:	2301      	movs	r3, #1
    b706:	f101 0258 	add.w	r2, r1, #88	; 0x58
    b70a:	3148      	adds	r1, #72	; 0x48
    b70c:	f104 0044 	add.w	r0, r4, #68	; 0x44
    b710:	f008 f93a 	bl	13988 <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
    b714:	6560      	str	r0, [r4, #84]	; 0x54
    b716:	e7ae      	b.n	b676 <event_handler+0x2a>
		LOG_ERR("Update exceeds current buffer");
    b718:	4b1d      	ldr	r3, [pc, #116]	; (b790 <event_handler+0x144>)
    b71a:	681b      	ldr	r3, [r3, #0]
    b71c:	f013 0f07 	tst.w	r3, #7
    b720:	d0b6      	beq.n	b690 <event_handler+0x44>
    b722:	4b1c      	ldr	r3, [pc, #112]	; (b794 <event_handler+0x148>)
    b724:	9307      	str	r3, [sp, #28]
    b726:	2302      	movs	r3, #2
    b728:	f88d 3004 	strb.w	r3, [sp, #4]
    b72c:	2300      	movs	r3, #0
    b72e:	f88d 3005 	strb.w	r3, [sp, #5]
    b732:	f88d 3006 	strb.w	r3, [sp, #6]
    b736:	f88d 3007 	strb.w	r3, [sp, #7]
    b73a:	9a01      	ldr	r2, [sp, #4]
    b73c:	9206      	str	r2, [sp, #24]
    b73e:	4619      	mov	r1, r3
    b740:	f363 0100 	bfi	r1, r3, #0, #1
    b744:	f363 0141 	bfi	r1, r3, #1, #1
    b748:	f363 0182 	bfi	r1, r3, #2, #1
    b74c:	f363 01c5 	bfi	r1, r3, #3, #3
    b750:	2201      	movs	r2, #1
    b752:	f362 1188 	bfi	r1, r2, #6, #3
    b756:	2208      	movs	r2, #8
    b758:	f362 2153 	bfi	r1, r2, #9, #11
    b75c:	f363 511f 	bfi	r1, r3, #20, #12
    b760:	aa06      	add	r2, sp, #24
    b762:	480b      	ldr	r0, [pc, #44]	; (b790 <event_handler+0x144>)
    b764:	f7f9 f8da 	bl	491c <z_impl_z_log_msg_static_create>
    b768:	e792      	b.n	b690 <event_handler+0x44>
		++ctx->current_rx;
    b76a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    b76c:	3308      	adds	r3, #8
    b76e:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
    b770:	6d23      	ldr	r3, [r4, #80]	; 0x50
    b772:	3b01      	subs	r3, #1
    b774:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
    b776:	2301      	movs	r3, #1
    b778:	f104 0260 	add.w	r2, r4, #96	; 0x60
    b77c:	f104 0150 	add.w	r1, r4, #80	; 0x50
    b780:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    b784:	f008 f900 	bl	13988 <spi_context_get_next_buf>
		ctx->rx_buf = (uint8_t *)
    b788:	65e0      	str	r0, [r4, #92]	; 0x5c
    b78a:	e781      	b.n	b690 <event_handler+0x44>
    b78c:	4770      	bx	lr
    b78e:	bf00      	nop
    b790:	20000310 	.word	0x20000310
    b794:	00018aa4 	.word	0x00018aa4

0000b798 <spi_context_cs_configure_all>:
{
    b798:	b5f0      	push	{r4, r5, r6, r7, lr}
    b79a:	b083      	sub	sp, #12
    b79c:	af00      	add	r7, sp, #0
    b79e:	4605      	mov	r5, r0
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    b7a0:	6884      	ldr	r4, [r0, #8]
    b7a2:	e060      	b.n	b866 <spi_context_cs_configure_all+0xce>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
    b7a4:	4b3b      	ldr	r3, [pc, #236]	; (b894 <spi_context_cs_configure_all+0xfc>)
    b7a6:	681b      	ldr	r3, [r3, #0]
    b7a8:	f013 0f07 	tst.w	r3, #7
    b7ac:	d054      	beq.n	b858 <spi_context_cs_configure_all+0xc0>
    b7ae:	6823      	ldr	r3, [r4, #0]
    b7b0:	681e      	ldr	r6, [r3, #0]
    b7b2:	7921      	ldrb	r1, [r4, #4]
    b7b4:	466d      	mov	r5, sp
    b7b6:	2300      	movs	r3, #0
    b7b8:	713b      	strb	r3, [r7, #4]
    b7ba:	2302      	movs	r3, #2
    b7bc:	717b      	strb	r3, [r7, #5]
    b7be:	b08a      	sub	sp, #40	; 0x28
    b7c0:	466c      	mov	r4, sp
    b7c2:	f114 0210 	adds.w	r2, r4, #16
    b7c6:	d015      	beq.n	b7f4 <spi_context_cs_configure_all+0x5c>
    b7c8:	2012      	movs	r0, #18
    b7ca:	b11a      	cbz	r2, b7d4 <spi_context_cs_configure_all+0x3c>
    b7cc:	2804      	cmp	r0, #4
    b7ce:	dd01      	ble.n	b7d4 <spi_context_cs_configure_all+0x3c>
    b7d0:	4b31      	ldr	r3, [pc, #196]	; (b898 <spi_context_cs_configure_all+0x100>)
    b7d2:	6163      	str	r3, [r4, #20]
    b7d4:	2300      	movs	r3, #0
    b7d6:	703b      	strb	r3, [r7, #0]
    b7d8:	2302      	movs	r3, #2
    b7da:	707b      	strb	r3, [r7, #1]
    b7dc:	b1c2      	cbz	r2, b810 <spi_context_cs_configure_all+0x78>
    b7de:	4603      	mov	r3, r0
    b7e0:	2808      	cmp	r0, #8
    b7e2:	dd00      	ble.n	b7e6 <spi_context_cs_configure_all+0x4e>
    b7e4:	61a6      	str	r6, [r4, #24]
    b7e6:	2b0c      	cmp	r3, #12
    b7e8:	dd00      	ble.n	b7ec <spi_context_cs_configure_all+0x54>
    b7ea:	61e1      	str	r1, [r4, #28]
    b7ec:	f104 0320 	add.w	r3, r4, #32
    b7f0:	2100      	movs	r1, #0
    b7f2:	e00b      	b.n	b80c <spi_context_cs_configure_all+0x74>
    b7f4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    b7f8:	e7e7      	b.n	b7ca <spi_context_cs_configure_all+0x32>
    b7fa:	f101 0608 	add.w	r6, r1, #8
    b7fe:	eb06 0c07 	add.w	ip, r6, r7
    b802:	f81c cc08 	ldrb.w	ip, [ip, #-8]
    b806:	f803 cb01 	strb.w	ip, [r3], #1
    b80a:	3101      	adds	r1, #1
    b80c:	2901      	cmp	r1, #1
    b80e:	d9f4      	bls.n	b7fa <spi_context_cs_configure_all+0x62>
    b810:	2811      	cmp	r0, #17
    b812:	dd24      	ble.n	b85e <spi_context_cs_configure_all+0xc6>
    b814:	2312      	movs	r3, #18
    b816:	b142      	cbz	r2, b82a <spi_context_cs_configure_all+0x92>
    b818:	2104      	movs	r1, #4
    b81a:	7139      	strb	r1, [r7, #4]
    b81c:	2100      	movs	r1, #0
    b81e:	7179      	strb	r1, [r7, #5]
    b820:	71b9      	strb	r1, [r7, #6]
    b822:	2101      	movs	r1, #1
    b824:	71f9      	strb	r1, [r7, #7]
    b826:	6878      	ldr	r0, [r7, #4]
    b828:	6120      	str	r0, [r4, #16]
    b82a:	2100      	movs	r1, #0
    b82c:	f36f 0100 	bfc	r1, #0, #1
    b830:	f36f 0141 	bfc	r1, #1, #1
    b834:	f36f 0182 	bfc	r1, #2, #1
    b838:	f36f 01c5 	bfc	r1, #3, #3
    b83c:	2001      	movs	r0, #1
    b83e:	f360 1188 	bfi	r1, r0, #6, #3
    b842:	f3c3 030a 	ubfx	r3, r3, #0, #11
    b846:	f363 2153 	bfi	r1, r3, #9, #11
    b84a:	f36f 511f 	bfc	r1, #20, #12
    b84e:	2300      	movs	r3, #0
    b850:	4810      	ldr	r0, [pc, #64]	; (b894 <spi_context_cs_configure_all+0xfc>)
    b852:	f7f9 f863 	bl	491c <z_impl_z_log_msg_static_create>
    b856:	46ad      	mov	sp, r5
			return -ENODEV;
    b858:	f06f 0012 	mvn.w	r0, #18
    b85c:	e017      	b.n	b88e <spi_context_cs_configure_all+0xf6>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
    b85e:	f06f 031b 	mvn.w	r3, #27
    b862:	e7d8      	b.n	b816 <spi_context_cs_configure_all+0x7e>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    b864:	3408      	adds	r4, #8
    b866:	68ab      	ldr	r3, [r5, #8]
    b868:	68ea      	ldr	r2, [r5, #12]
    b86a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    b86e:	429c      	cmp	r4, r3
    b870:	d20c      	bcs.n	b88c <spi_context_cs_configure_all+0xf4>
		if (!device_is_ready(cs_gpio->port)) {
    b872:	6820      	ldr	r0, [r4, #0]
    b874:	f008 fedc 	bl	14630 <z_device_is_ready>
    b878:	2800      	cmp	r0, #0
    b87a:	d093      	beq.n	b7a4 <spi_context_cs_configure_all+0xc>
		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
    b87c:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    b880:	4620      	mov	r0, r4
    b882:	f008 f859 	bl	13938 <gpio_pin_configure_dt>
		if (ret < 0) {
    b886:	2800      	cmp	r0, #0
    b888:	daec      	bge.n	b864 <spi_context_cs_configure_all+0xcc>
    b88a:	e000      	b.n	b88e <spi_context_cs_configure_all+0xf6>
	return 0;
    b88c:	2000      	movs	r0, #0
}
    b88e:	370c      	adds	r7, #12
    b890:	46bd      	mov	sp, r7
    b892:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b894:	20000310 	.word	0x20000310
    b898:	00018ac4 	.word	0x00018ac4

0000b89c <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    b89c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    b8a0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    b8a4:	4b01      	ldr	r3, [pc, #4]	; (b8ac <set_comparator+0x10>)
    b8a6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    b8aa:	4770      	bx	lr
    b8ac:	40011000 	.word	0x40011000

0000b8b0 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    b8b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    b8b4:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    b8b6:	4a02      	ldr	r2, [pc, #8]	; (b8c0 <event_enable+0x10>)
    b8b8:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    b8bc:	4770      	bx	lr
    b8be:	bf00      	nop
    b8c0:	40011000 	.word	0x40011000

0000b8c4 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    b8c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    b8c8:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    b8ca:	4a02      	ldr	r2, [pc, #8]	; (b8d4 <event_disable+0x10>)
    b8cc:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    b8d0:	4770      	bx	lr
    b8d2:	bf00      	nop
    b8d4:	40011000 	.word	0x40011000

0000b8d8 <counter>:
     return p_reg->COUNTER;
    b8d8:	4b01      	ldr	r3, [pc, #4]	; (b8e0 <counter+0x8>)
    b8da:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    b8de:	4770      	bx	lr
    b8e0:	40011000 	.word	0x40011000

0000b8e4 <set_alarm>:
 * @param[in] chan A channel for which a new CC value is to be set.
 *
 * @param[in] req_cc Requested CC register value to be set.
 */
static void set_alarm(int32_t chan, uint32_t req_cc)
{
    b8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b8e8:	4606      	mov	r6, r0
    b8ea:	4688      	mov	r8, r1
	 * (however, even if such spurious event was generated, it would be
	 * properly filtered out in process_channel(), where the target time
	 * is checked).
	 * Clear also the event as it may already be generated at this point.
	 */
	event_disable(chan);
    b8ec:	f7ff ffea 	bl	b8c4 <event_disable>
	event_clear(chan);
    b8f0:	4630      	mov	r0, r6
    b8f2:	f008 f9bd 	bl	13c70 <event_clear>
	uint32_t cc_val = req_cc;
    b8f6:	4645      	mov	r5, r8
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    b8f8:	2703      	movs	r7, #3
    b8fa:	e001      	b.n	b900 <set_alarm+0x1c>
				} else {
					break;
				}
			}

			cc_val = now + cc_inc;
    b8fc:	193d      	adds	r5, r7, r4
			cc_inc++;
    b8fe:	3701      	adds	r7, #1
		set_comparator(chan, cc_val);
    b900:	4629      	mov	r1, r5
    b902:	4630      	mov	r0, r6
    b904:	f7ff ffca 	bl	b89c <set_comparator>
		event_enable(chan);
    b908:	4630      	mov	r0, r6
    b90a:	f7ff ffd1 	bl	b8b0 <event_enable>
		now = counter();
    b90e:	f7ff ffe3 	bl	b8d8 <counter>
    b912:	4604      	mov	r4, r0
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    b914:	1cc1      	adds	r1, r0, #3
    b916:	4628      	mov	r0, r5
    b918:	f008 f999 	bl	13c4e <counter_sub>
    b91c:	4b0b      	ldr	r3, [pc, #44]	; (b94c <set_alarm+0x68>)
    b91e:	4298      	cmp	r0, r3
    b920:	d911      	bls.n	b946 <set_alarm+0x62>
			if (event_check(chan)) {
    b922:	4630      	mov	r0, r6
    b924:	f008 f997 	bl	13c56 <event_check>
    b928:	2800      	cmp	r0, #0
    b92a:	d0e7      	beq.n	b8fc <set_alarm+0x18>
				now = counter();
    b92c:	f7ff ffd4 	bl	b8d8 <counter>
    b930:	4604      	mov	r4, r0
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    b932:	4641      	mov	r1, r8
    b934:	f008 f98b 	bl	13c4e <counter_sub>
    b938:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b93c:	d903      	bls.n	b946 <set_alarm+0x62>
					event_clear(chan);
    b93e:	4630      	mov	r0, r6
    b940:	f008 f996 	bl	13c70 <event_clear>
    b944:	e7da      	b.n	b8fc <set_alarm+0x18>
		} else {
			break;
		}
	}
}
    b946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b94a:	bf00      	nop
    b94c:	007ffffd 	.word	0x007ffffd

0000b950 <int_event_disable_rtc>:
    p_reg->INTENCLR = mask;
    b950:	4b03      	ldr	r3, [pc, #12]	; (b960 <int_event_disable_rtc+0x10>)
    b952:	4a04      	ldr	r2, [pc, #16]	; (b964 <int_event_disable_rtc+0x14>)
    b954:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    b958:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	/* Reset interrupt enabling to expected reset values */
	nrf_rtc_int_disable(RTC, mask);

	/* Reset event routing enabling to expected reset values */
	nrf_rtc_event_disable(RTC, mask);
}
    b95c:	4770      	bx	lr
    b95e:	bf00      	nop
    b960:	40011000 	.word	0x40011000
    b964:	000f0003 	.word	0x000f0003

0000b968 <compare_int_lock>:
{
    b968:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    b96a:	2301      	movs	r3, #1
    b96c:	4083      	lsls	r3, r0
    b96e:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b972:	4a0e      	ldr	r2, [pc, #56]	; (b9ac <compare_int_lock+0x44>)
    b974:	f3bf 8f5b 	dmb	ish
    b978:	e852 1f00 	ldrex	r1, [r2]
    b97c:	ea01 0e0c 	and.w	lr, r1, ip
    b980:	e842 e400 	strex	r4, lr, [r2]
    b984:	2c00      	cmp	r4, #0
    b986:	d1f7      	bne.n	b978 <compare_int_lock+0x10>
    b988:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    b98c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    b990:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    b992:	4807      	ldr	r0, [pc, #28]	; (b9b0 <compare_int_lock+0x48>)
    b994:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    b998:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b99c:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    b9a0:	420b      	tst	r3, r1
}
    b9a2:	bf14      	ite	ne
    b9a4:	2001      	movne	r0, #1
    b9a6:	2000      	moveq	r0, #0
    b9a8:	bd10      	pop	{r4, pc}
    b9aa:	bf00      	nop
    b9ac:	20003754 	.word	0x20003754
    b9b0:	40011000 	.word	0x40011000

0000b9b4 <channel_processing_check_and_clear>:
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    b9b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    b9b8:	4083      	lsls	r3, r0
    return p_reg->INTENSET & mask;
    b9ba:	4a14      	ldr	r2, [pc, #80]	; (ba0c <channel_processing_check_and_clear+0x58>)
    b9bc:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    b9c0:	4213      	tst	r3, r2
    b9c2:	d101      	bne.n	b9c8 <channel_processing_check_and_clear+0x14>
	return false;
    b9c4:	2000      	movs	r0, #0
}
    b9c6:	4770      	bx	lr
{
    b9c8:	b510      	push	{r4, lr}
    b9ca:	4604      	mov	r4, r0
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    b9cc:	2301      	movs	r3, #1
    b9ce:	4083      	lsls	r3, r0
    b9d0:	43db      	mvns	r3, r3
    b9d2:	490f      	ldr	r1, [pc, #60]	; (ba10 <channel_processing_check_and_clear+0x5c>)
    b9d4:	f3bf 8f5b 	dmb	ish
    b9d8:	e851 2f00 	ldrex	r2, [r1]
    b9dc:	ea02 0003 	and.w	r0, r2, r3
    b9e0:	e841 0c00 	strex	ip, r0, [r1]
    b9e4:	f1bc 0f00 	cmp.w	ip, #0
    b9e8:	d1f6      	bne.n	b9d8 <channel_processing_check_and_clear+0x24>
    b9ea:	f3bf 8f5b 	dmb	ish
    b9ee:	fa22 f304 	lsr.w	r3, r2, r4
    b9f2:	f013 0f01 	tst.w	r3, #1
    b9f6:	d103      	bne.n	ba00 <channel_processing_check_and_clear+0x4c>
		    event_check(chan)) {
    b9f8:	4620      	mov	r0, r4
    b9fa:	f008 f92c 	bl	13c56 <event_check>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    b9fe:	b118      	cbz	r0, ba08 <channel_processing_check_and_clear+0x54>
			event_clear(chan);
    ba00:	4620      	mov	r0, r4
    ba02:	f008 f935 	bl	13c70 <event_clear>
			return true;
    ba06:	2001      	movs	r0, #1
}
    ba08:	bd10      	pop	{r4, pc}
    ba0a:	bf00      	nop
    ba0c:	40011000 	.word	0x40011000
    ba10:	20003750 	.word	0x20003750

0000ba14 <compare_int_unlock>:
	if (key) {
    ba14:	b901      	cbnz	r1, ba18 <compare_int_unlock+0x4>
}
    ba16:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    ba18:	2301      	movs	r3, #1
    ba1a:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ba1c:	4a11      	ldr	r2, [pc, #68]	; (ba64 <compare_int_unlock+0x50>)
    ba1e:	f3bf 8f5b 	dmb	ish
    ba22:	e852 cf00 	ldrex	ip, [r2]
    ba26:	ea4c 0c03 	orr.w	ip, ip, r3
    ba2a:	e842 c100 	strex	r1, ip, [r2]
    ba2e:	2900      	cmp	r1, #0
    ba30:	d1f7      	bne.n	ba22 <compare_int_unlock+0xe>
    ba32:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    ba36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    ba3a:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    ba3c:	4a0a      	ldr	r2, [pc, #40]	; (ba68 <compare_int_unlock+0x54>)
    ba3e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ba42:	f3bf 8f5b 	dmb	ish
    ba46:	4b09      	ldr	r3, [pc, #36]	; (ba6c <compare_int_unlock+0x58>)
    ba48:	681b      	ldr	r3, [r3, #0]
    ba4a:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    ba4e:	40c3      	lsrs	r3, r0
    ba50:	f013 0f01 	tst.w	r3, #1
    ba54:	d0df      	beq.n	ba16 <compare_int_unlock+0x2>
    ba56:	4b06      	ldr	r3, [pc, #24]	; (ba70 <compare_int_unlock+0x5c>)
    ba58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    ba5c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    ba60:	e7d9      	b.n	ba16 <compare_int_unlock+0x2>
    ba62:	bf00      	nop
    ba64:	20003754 	.word	0x20003754
    ba68:	40011000 	.word	0x40011000
    ba6c:	20003750 	.word	0x20003750
    ba70:	e000e100 	.word	0xe000e100

0000ba74 <sys_clock_timeout_handler>:
{
    ba74:	b538      	push	{r3, r4, r5, lr}
    ba76:	4614      	mov	r4, r2
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    ba78:	4610      	mov	r0, r2
    ba7a:	4619      	mov	r1, r3
    ba7c:	f008 f904 	bl	13c88 <absolute_time_to_cc>
    ba80:	4602      	mov	r2, r0
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    ba82:	490d      	ldr	r1, [pc, #52]	; (bab8 <sys_clock_timeout_handler+0x44>)
    ba84:	680b      	ldr	r3, [r1, #0]
    ba86:	1ae0      	subs	r0, r4, r3
	last_count += dticks * CYC_PER_TICK;
    ba88:	181b      	adds	r3, r3, r0
    ba8a:	684c      	ldr	r4, [r1, #4]
    ba8c:	f144 0400 	adc.w	r4, r4, #0
    ba90:	600b      	str	r3, [r1, #0]
    ba92:	604c      	str	r4, [r1, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    ba94:	f5a2 1300 	sub.w	r3, r2, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    ba98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    ba9c:	d209      	bcs.n	bab2 <sys_clock_timeout_handler+0x3e>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    ba9e:	4b07      	ldr	r3, [pc, #28]	; (babc <sys_clock_timeout_handler+0x48>)
    baa0:	681b      	ldr	r3, [r3, #0]
    baa2:	0a19      	lsrs	r1, r3, #8
    baa4:	061b      	lsls	r3, r3, #24
    baa6:	18d4      	adds	r4, r2, r3
    baa8:	f141 0500 	adc.w	r5, r1, #0
    baac:	4b04      	ldr	r3, [pc, #16]	; (bac0 <sys_clock_timeout_handler+0x4c>)
    baae:	e9c3 4500 	strd	r4, r5, [r3]
	sys_clock_announce(dticks);
    bab2:	f002 fbc3 	bl	e23c <sys_clock_announce>
}
    bab6:	bd38      	pop	{r3, r4, r5, pc}
    bab8:	20000b68 	.word	0x20000b68
    babc:	20003758 	.word	0x20003758
    bac0:	20000b70 	.word	0x20000b70

0000bac4 <z_nrf_rtc_timer_read>:
{
    bac4:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    bac6:	4b0d      	ldr	r3, [pc, #52]	; (bafc <z_nrf_rtc_timer_read+0x38>)
    bac8:	681c      	ldr	r4, [r3, #0]
    baca:	0a25      	lsrs	r5, r4, #8
    bacc:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    bace:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    bad2:	f7ff ff01 	bl	b8d8 <counter>
    bad6:	4603      	mov	r3, r0
	val += cntr;
    bad8:	1900      	adds	r0, r0, r4
    bada:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    bade:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    bae2:	d20a      	bcs.n	bafa <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    bae4:	4b06      	ldr	r3, [pc, #24]	; (bb00 <z_nrf_rtc_timer_read+0x3c>)
    bae6:	e9d3 2300 	ldrd	r2, r3, [r3]
    baea:	4290      	cmp	r0, r2
    baec:	eb71 0303 	sbcs.w	r3, r1, r3
    baf0:	d203      	bcs.n	bafa <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    baf2:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    baf6:	f141 0100 	adc.w	r1, r1, #0
}
    bafa:	bd38      	pop	{r3, r4, r5, pc}
    bafc:	20003758 	.word	0x20003758
    bb00:	20000b70 	.word	0x20000b70

0000bb04 <compare_set_nolocks>:
{
    bb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bb06:	4606      	mov	r6, r0
    bb08:	4614      	mov	r4, r2
    bb0a:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    bb0c:	4610      	mov	r0, r2
    bb0e:	4619      	mov	r1, r3
    bb10:	f008 f8ba 	bl	13c88 <absolute_time_to_cc>
    bb14:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    bb16:	f7ff ffd5 	bl	bac4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    bb1a:	42a0      	cmp	r0, r4
    bb1c:	eb71 0305 	sbcs.w	r3, r1, r5
    bb20:	d215      	bcs.n	bb4e <compare_set_nolocks+0x4a>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    bb22:	1a20      	subs	r0, r4, r0
    bb24:	eb65 0101 	sbc.w	r1, r5, r1
    bb28:	4b17      	ldr	r3, [pc, #92]	; (bb88 <compare_set_nolocks+0x84>)
    bb2a:	4298      	cmp	r0, r3
    bb2c:	f171 0100 	sbcs.w	r1, r1, #0
    bb30:	d227      	bcs.n	bb82 <compare_set_nolocks+0x7e>
		if (target_time != cc_data[chan].target_time) {
    bb32:	4b16      	ldr	r3, [pc, #88]	; (bb8c <compare_set_nolocks+0x88>)
    bb34:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    bb38:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    bb3c:	42ab      	cmp	r3, r5
    bb3e:	bf08      	it	eq
    bb40:	42a2      	cmpeq	r2, r4
    bb42:	d012      	beq.n	bb6a <compare_set_nolocks+0x66>
			set_alarm(chan, cc_value);
    bb44:	4639      	mov	r1, r7
    bb46:	4630      	mov	r0, r6
    bb48:	f7ff fecc 	bl	b8e4 <set_alarm>
    bb4c:	e00d      	b.n	bb6a <compare_set_nolocks+0x66>
		atomic_or(&force_isr_mask, BIT(chan));
    bb4e:	2301      	movs	r3, #1
    bb50:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bb52:	4a0f      	ldr	r2, [pc, #60]	; (bb90 <compare_set_nolocks+0x8c>)
    bb54:	f3bf 8f5b 	dmb	ish
    bb58:	e852 0f00 	ldrex	r0, [r2]
    bb5c:	4318      	orrs	r0, r3
    bb5e:	e842 0100 	strex	r1, r0, [r2]
    bb62:	2900      	cmp	r1, #0
    bb64:	d1f8      	bne.n	bb58 <compare_set_nolocks+0x54>
    bb66:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    bb6a:	4b08      	ldr	r3, [pc, #32]	; (bb8c <compare_set_nolocks+0x88>)
    bb6c:	0132      	lsls	r2, r6, #4
    bb6e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    bb72:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    bb76:	9906      	ldr	r1, [sp, #24]
    bb78:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    bb7a:	9b07      	ldr	r3, [sp, #28]
    bb7c:	6073      	str	r3, [r6, #4]
	return ret;
    bb7e:	2000      	movs	r0, #0
}
    bb80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    bb82:	f06f 0015 	mvn.w	r0, #21
    bb86:	e7fb      	b.n	bb80 <compare_set_nolocks+0x7c>
    bb88:	00800001 	.word	0x00800001
    bb8c:	20000b58 	.word	0x20000b58
    bb90:	20003750 	.word	0x20003750

0000bb94 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    bb94:	b530      	push	{r4, r5, lr}
    bb96:	b083      	sub	sp, #12
			CLOCK_CONTROL_NRF_LF_START_NOWAIT :
			(IS_ENABLED(CONFIG_SYSTEM_CLOCK_WAIT_FOR_AVAILABILITY) ?
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	int_event_disable_rtc();
    bb98:	f7ff feda 	bl	b950 <int_event_disable_rtc>
    p_reg->PRESCALER = val;
    bb9c:	2300      	movs	r3, #0
    bb9e:	4a1d      	ldr	r2, [pc, #116]	; (bc14 <sys_clock_driver_init+0x80>)
    bba0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    bba4:	2b00      	cmp	r3, #0
    bba6:	dd24      	ble.n	bbf2 <sys_clock_driver_init+0x5e>
    p_reg->INTENSET = mask;
    bba8:	4c1a      	ldr	r4, [pc, #104]	; (bc14 <sys_clock_driver_init+0x80>)
    bbaa:	2502      	movs	r5, #2
    bbac:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    bbb0:	4b19      	ldr	r3, [pc, #100]	; (bc18 <sys_clock_driver_init+0x84>)
    bbb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    bbb6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    bbba:	2200      	movs	r2, #0
    bbbc:	2101      	movs	r1, #1
    bbbe:	2011      	movs	r0, #17
    bbc0:	f006 feba 	bl	12938 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    bbc4:	2011      	movs	r0, #17
    bbc6:	f006 fead 	bl	12924 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    bbca:	2301      	movs	r3, #1
    bbcc:	60a3      	str	r3, [r4, #8]
    bbce:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    bbd0:	4a12      	ldr	r2, [pc, #72]	; (bc1c <sys_clock_driver_init+0x88>)
    bbd2:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    bbd4:	2400      	movs	r4, #0
    bbd6:	9401      	str	r4, [sp, #4]
    bbd8:	4b11      	ldr	r3, [pc, #68]	; (bc20 <sys_clock_driver_init+0x8c>)
    bbda:	9300      	str	r3, [sp, #0]
    bbdc:	4a11      	ldr	r2, [pc, #68]	; (bc24 <sys_clock_driver_init+0x90>)
    bbde:	2300      	movs	r3, #0
    bbe0:	4620      	mov	r0, r4
    bbe2:	f008 f862 	bl	13caa <compare_set>

	z_nrf_clock_control_lf_on(mode);
    bbe6:	4628      	mov	r0, r5
    bbe8:	f7fd fdf4 	bl	97d4 <z_nrf_clock_control_lf_on>

	return 0;
}
    bbec:	4620      	mov	r0, r4
    bbee:	b003      	add	sp, #12
    bbf0:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    bbf2:	4a0d      	ldr	r2, [pc, #52]	; (bc28 <sys_clock_driver_init+0x94>)
    bbf4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    bbf8:	f04f 30ff 	mov.w	r0, #4294967295
    bbfc:	f04f 31ff 	mov.w	r1, #4294967295
    bc00:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    bc04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    bc08:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    bc0a:	4902      	ldr	r1, [pc, #8]	; (bc14 <sys_clock_driver_init+0x80>)
    bc0c:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    bc10:	3301      	adds	r3, #1
    bc12:	e7c7      	b.n	bba4 <sys_clock_driver_init+0x10>
    bc14:	40011000 	.word	0x40011000
    bc18:	e000e100 	.word	0xe000e100
    bc1c:	20003754 	.word	0x20003754
    bc20:	0000ba75 	.word	0x0000ba75
    bc24:	007fffff 	.word	0x007fffff
    bc28:	20000b58 	.word	0x20000b58

0000bc2c <process_channel>:
{
    bc2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bc30:	b082      	sub	sp, #8
    bc32:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    bc34:	f7ff febe 	bl	b9b4 <channel_processing_check_and_clear>
    bc38:	b910      	cbnz	r0, bc40 <process_channel+0x14>
}
    bc3a:	b002      	add	sp, #8
    bc3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    bc40:	f7ff ff40 	bl	bac4 <z_nrf_rtc_timer_read>
    bc44:	4682      	mov	sl, r0
    bc46:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
    bc48:	f008 f821 	bl	13c8e <full_int_lock>
    bc4c:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
    bc4e:	4b15      	ldr	r3, [pc, #84]	; (bca4 <process_channel+0x78>)
    bc50:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    bc54:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    bc58:	45c2      	cmp	sl, r8
    bc5a:	eb75 0509 	sbcs.w	r5, r5, r9
    bc5e:	d20b      	bcs.n	bc78 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    bc60:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
    bc62:	4630      	mov	r0, r6
    bc64:	f008 f81c 	bl	13ca0 <full_int_unlock>
		if (handler) {
    bc68:	2d00      	cmp	r5, #0
    bc6a:	d0e6      	beq.n	bc3a <process_channel+0xe>
			handler(chan, expire_time, user_context);
    bc6c:	9700      	str	r7, [sp, #0]
    bc6e:	4642      	mov	r2, r8
    bc70:	464b      	mov	r3, r9
    bc72:	4620      	mov	r0, r4
    bc74:	47a8      	blx	r5
}
    bc76:	e7e0      	b.n	bc3a <process_channel+0xe>
			handler = cc_data[chan].callback;
    bc78:	4a0a      	ldr	r2, [pc, #40]	; (bca4 <process_channel+0x78>)
    bc7a:	0123      	lsls	r3, r4, #4
    bc7c:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    bc80:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
    bc82:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    bc84:	2000      	movs	r0, #0
    bc86:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    bc88:	f04f 32ff 	mov.w	r2, #4294967295
    bc8c:	f04f 33ff 	mov.w	r3, #4294967295
    bc90:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    bc94:	4620      	mov	r0, r4
    bc96:	f7ff fe15 	bl	b8c4 <event_disable>
			event_clear(chan);
    bc9a:	4620      	mov	r0, r4
    bc9c:	f007 ffe8 	bl	13c70 <event_clear>
    bca0:	e7df      	b.n	bc62 <process_channel+0x36>
    bca2:	bf00      	nop
    bca4:	20000b58 	.word	0x20000b58

0000bca8 <rtc_nrf_isr>:
{
    bca8:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    bcaa:	4b0e      	ldr	r3, [pc, #56]	; (bce4 <rtc_nrf_isr+0x3c>)
    bcac:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    bcb0:	f013 0f02 	tst.w	r3, #2
    bcb4:	d00d      	beq.n	bcd2 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    bcb6:	4b0b      	ldr	r3, [pc, #44]	; (bce4 <rtc_nrf_isr+0x3c>)
    bcb8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    bcbc:	b14b      	cbz	r3, bcd2 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    bcbe:	4b09      	ldr	r3, [pc, #36]	; (bce4 <rtc_nrf_isr+0x3c>)
    bcc0:	2200      	movs	r2, #0
    bcc2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    bcc6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    bcca:	4a07      	ldr	r2, [pc, #28]	; (bce8 <rtc_nrf_isr+0x40>)
    bccc:	6813      	ldr	r3, [r2, #0]
    bcce:	3301      	adds	r3, #1
    bcd0:	6013      	str	r3, [r2, #0]
{
    bcd2:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    bcd4:	2c00      	cmp	r4, #0
    bcd6:	dd00      	ble.n	bcda <rtc_nrf_isr+0x32>
}
    bcd8:	bd10      	pop	{r4, pc}
		process_channel(chan);
    bcda:	4620      	mov	r0, r4
    bcdc:	f7ff ffa6 	bl	bc2c <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    bce0:	3401      	adds	r4, #1
    bce2:	e7f7      	b.n	bcd4 <rtc_nrf_isr+0x2c>
    bce4:	40011000 	.word	0x40011000
    bce8:	20003758 	.word	0x20003758

0000bcec <sys_clock_set_timeout>:
{
    bcec:	b510      	push	{r4, lr}
    bcee:	b082      	sub	sp, #8
	if (ticks == K_TICKS_FOREVER) {
    bcf0:	f1b0 3fff 	cmp.w	r0, #4294967295
    bcf4:	d006      	beq.n	bd04 <sys_clock_set_timeout+0x18>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    bcf6:	2801      	cmp	r0, #1
    bcf8:	dd09      	ble.n	bd0e <sys_clock_set_timeout+0x22>
    bcfa:	4b15      	ldr	r3, [pc, #84]	; (bd50 <sys_clock_set_timeout+0x64>)
    bcfc:	4298      	cmp	r0, r3
    bcfe:	dc24      	bgt.n	bd4a <sys_clock_set_timeout+0x5e>
    bd00:	4604      	mov	r4, r0
    bd02:	e005      	b.n	bd10 <sys_clock_set_timeout+0x24>
		sys_busy = false;
    bd04:	4b13      	ldr	r3, [pc, #76]	; (bd54 <sys_clock_set_timeout+0x68>)
    bd06:	2200      	movs	r2, #0
    bd08:	701a      	strb	r2, [r3, #0]
		cyc = MAX_TICKS * CYC_PER_TICK;
    bd0a:	4c13      	ldr	r4, [pc, #76]	; (bd58 <sys_clock_set_timeout+0x6c>)
    bd0c:	e003      	b.n	bd16 <sys_clock_set_timeout+0x2a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    bd0e:	2401      	movs	r4, #1
		sys_busy = true;
    bd10:	4b10      	ldr	r3, [pc, #64]	; (bd54 <sys_clock_set_timeout+0x68>)
    bd12:	2201      	movs	r2, #1
    bd14:	701a      	strb	r2, [r3, #0]
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    bd16:	f7ff fed5 	bl	bac4 <z_nrf_rtc_timer_read>
    bd1a:	4b10      	ldr	r3, [pc, #64]	; (bd5c <sys_clock_set_timeout+0x70>)
    bd1c:	681a      	ldr	r2, [r3, #0]
    bd1e:	685b      	ldr	r3, [r3, #4]
    bd20:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    bd22:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    bd26:	d300      	bcc.n	bd2a <sys_clock_set_timeout+0x3e>
		cyc = 0;
    bd28:	2400      	movs	r4, #0
	cyc += unannounced;
    bd2a:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    bd2c:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    bd30:	d300      	bcc.n	bd34 <sys_clock_set_timeout+0x48>
		cyc = MAX_CYCLES;
    bd32:	4c09      	ldr	r4, [pc, #36]	; (bd58 <sys_clock_set_timeout+0x6c>)
	uint64_t target_time = cyc + last_count;
    bd34:	2000      	movs	r0, #0
    bd36:	1912      	adds	r2, r2, r4
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    bd38:	9001      	str	r0, [sp, #4]
    bd3a:	4909      	ldr	r1, [pc, #36]	; (bd60 <sys_clock_set_timeout+0x74>)
    bd3c:	9100      	str	r1, [sp, #0]
    bd3e:	f143 0300 	adc.w	r3, r3, #0
    bd42:	f007 ffb2 	bl	13caa <compare_set>
}
    bd46:	b002      	add	sp, #8
    bd48:	bd10      	pop	{r4, pc}
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    bd4a:	4c03      	ldr	r4, [pc, #12]	; (bd58 <sys_clock_set_timeout+0x6c>)
    bd4c:	e7e0      	b.n	bd10 <sys_clock_set_timeout+0x24>
    bd4e:	bf00      	nop
    bd50:	007ffffe 	.word	0x007ffffe
    bd54:	20003cbd 	.word	0x20003cbd
    bd58:	007fffff 	.word	0x007fffff
    bd5c:	20000b68 	.word	0x20000b68
    bd60:	0000ba75 	.word	0x0000ba75

0000bd64 <sys_clock_elapsed>:
{
    bd64:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    bd66:	f7ff fead 	bl	bac4 <z_nrf_rtc_timer_read>
    bd6a:	4b02      	ldr	r3, [pc, #8]	; (bd74 <sys_clock_elapsed+0x10>)
    bd6c:	681b      	ldr	r3, [r3, #0]
}
    bd6e:	1ac0      	subs	r0, r0, r3
    bd70:	bd08      	pop	{r3, pc}
    bd72:	bf00      	nop
    bd74:	20000b68 	.word	0x20000b68

0000bd78 <sys_clock_disable>:
{
    bd78:	b508      	push	{r3, lr}
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    bd7a:	4b07      	ldr	r3, [pc, #28]	; (bd98 <sys_clock_disable+0x20>)
    bd7c:	2201      	movs	r2, #1
    bd7e:	605a      	str	r2, [r3, #4]
	irq_disable(RTC_IRQn);
    bd80:	2011      	movs	r0, #17
    bd82:	f006 fdd4 	bl	1292e <arch_irq_disable>
	int_event_disable_rtc();
    bd86:	f7ff fde3 	bl	b950 <int_event_disable_rtc>
    bd8a:	4b04      	ldr	r3, [pc, #16]	; (bd9c <sys_clock_disable+0x24>)
    bd8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    bd90:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    bd94:	bd08      	pop	{r3, pc}
    bd96:	bf00      	nop
    bd98:	40011000 	.word	0x40011000
    bd9c:	e000e100 	.word	0xe000e100

0000bda0 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    bda0:	b500      	push	{lr}
    bda2:	b089      	sub	sp, #36	; 0x24
	z_impl_log_panic();
    bda4:	f7f8 fc48 	bl	4638 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    bda8:	4b15      	ldr	r3, [pc, #84]	; (be00 <k_sys_fatal_error_handler+0x60>)
    bdaa:	681b      	ldr	r3, [r3, #0]
    bdac:	f013 0f07 	tst.w	r3, #7
    bdb0:	d102      	bne.n	bdb8 <k_sys_fatal_error_handler+0x18>
		sys_arch_reboot(0);
    bdb2:	2000      	movs	r0, #0
    bdb4:	f007 fa0f 	bl	131d6 <sys_arch_reboot>
		LOG_ERR("Resetting system");
    bdb8:	4b12      	ldr	r3, [pc, #72]	; (be04 <k_sys_fatal_error_handler+0x64>)
    bdba:	9307      	str	r3, [sp, #28]
    bdbc:	2302      	movs	r3, #2
    bdbe:	f88d 3004 	strb.w	r3, [sp, #4]
    bdc2:	2300      	movs	r3, #0
    bdc4:	f88d 3005 	strb.w	r3, [sp, #5]
    bdc8:	f88d 3006 	strb.w	r3, [sp, #6]
    bdcc:	f88d 3007 	strb.w	r3, [sp, #7]
    bdd0:	9a01      	ldr	r2, [sp, #4]
    bdd2:	9206      	str	r2, [sp, #24]
    bdd4:	4619      	mov	r1, r3
    bdd6:	f363 0100 	bfi	r1, r3, #0, #1
    bdda:	f363 0141 	bfi	r1, r3, #1, #1
    bdde:	f363 0182 	bfi	r1, r3, #2, #1
    bde2:	f363 01c5 	bfi	r1, r3, #3, #3
    bde6:	2201      	movs	r2, #1
    bde8:	f362 1188 	bfi	r1, r2, #6, #3
    bdec:	2208      	movs	r2, #8
    bdee:	f362 2153 	bfi	r1, r2, #9, #11
    bdf2:	f363 511f 	bfi	r1, r3, #20, #12
    bdf6:	aa06      	add	r2, sp, #24
    bdf8:	4801      	ldr	r0, [pc, #4]	; (be00 <k_sys_fatal_error_handler+0x60>)
    bdfa:	f7f8 fd8f 	bl	491c <z_impl_z_log_msg_static_create>
    bdfe:	e7d8      	b.n	bdb2 <k_sys_fatal_error_handler+0x12>
    be00:	200002d8 	.word	0x200002d8
    be04:	00018be0 	.word	0x00018be0

0000be08 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    be08:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    be0c:	4905      	ldr	r1, [pc, #20]	; (be24 <__NVIC_SystemReset+0x1c>)
    be0e:	68ca      	ldr	r2, [r1, #12]
    be10:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    be14:	4b04      	ldr	r3, [pc, #16]	; (be28 <__NVIC_SystemReset+0x20>)
    be16:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    be18:	60cb      	str	r3, [r1, #12]
    be1a:	f3bf 8f4f 	dsb	sy
    __NOP();
    be1e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    be20:	e7fd      	b.n	be1e <__NVIC_SystemReset+0x16>
    be22:	bf00      	nop
    be24:	e000ed00 	.word	0xe000ed00
    be28:	05fa0004 	.word	0x05fa0004

0000be2c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    be2c:	4b02      	ldr	r3, [pc, #8]	; (be38 <nvmc_wait+0xc>)
    be2e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    be32:	2b00      	cmp	r3, #0
    be34:	d0fa      	beq.n	be2c <nvmc_wait>
}
    be36:	4770      	bx	lr
    be38:	4001e000 	.word	0x4001e000

0000be3c <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    be3c:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    be3e:	4b03      	ldr	r3, [pc, #12]	; (be4c <nvmc_config+0x10>)
    be40:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    be44:	f7ff fff2 	bl	be2c <nvmc_wait>
}
    be48:	bd08      	pop	{r3, pc}
    be4a:	bf00      	nop
    be4c:	4001e000 	.word	0x4001e000

0000be50 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    be50:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    be52:	f007 ff47 	bl	13ce4 <nrf52_errata_12>
    be56:	b140      	cbz	r0, be6a <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    be58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    be5c:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
    be60:	f3c3 2304 	ubfx	r3, r3, #8, #5
    be64:	4a6b      	ldr	r2, [pc, #428]	; (c014 <SystemInit+0x1c4>)
    be66:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    be6a:	f007 ff4d 	bl	13d08 <nrf52_errata_16>
    be6e:	b110      	cbz	r0, be76 <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    be70:	4b69      	ldr	r3, [pc, #420]	; (c018 <SystemInit+0x1c8>)
    be72:	4a6a      	ldr	r2, [pc, #424]	; (c01c <SystemInit+0x1cc>)
    be74:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    be76:	f007 ff5d 	bl	13d34 <nrf52_errata_31>
    be7a:	b148      	cbz	r0, be90 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    be7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    be80:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    be84:	f3c3 3342 	ubfx	r3, r3, #13, #3
    be88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    be8c:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    be90:	f007 ff62 	bl	13d58 <nrf52_errata_32>
    be94:	b130      	cbz	r0, bea4 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    be96:	4a62      	ldr	r2, [pc, #392]	; (c020 <SystemInit+0x1d0>)
    be98:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    be9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    bea0:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    bea4:	f007 ff6e 	bl	13d84 <nrf52_errata_36>
    bea8:	b140      	cbz	r0, bebc <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
    beaa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    beae:	2200      	movs	r2, #0
    beb0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    beb4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    beb8:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    bebc:	f007 ff74 	bl	13da8 <nrf52_errata_37>
    bec0:	b120      	cbz	r0, becc <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    bec2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bec6:	2203      	movs	r2, #3
    bec8:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    becc:	f007 ff82 	bl	13dd4 <nrf52_errata_57>
    bed0:	b160      	cbz	r0, beec <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    bed2:	4b54      	ldr	r3, [pc, #336]	; (c024 <SystemInit+0x1d4>)
    bed4:	2205      	movs	r2, #5
    bed6:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    beda:	2201      	movs	r2, #1
    bedc:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    bee0:	2200      	movs	r2, #0
    bee2:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    bee6:	223f      	movs	r2, #63	; 0x3f
    bee8:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    beec:	f007 ff88 	bl	13e00 <nrf52_errata_66>
    bef0:	2800      	cmp	r0, #0
    bef2:	d046      	beq.n	bf82 <SystemInit+0x132>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    bef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    bef8:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    befc:	4b4a      	ldr	r3, [pc, #296]	; (c028 <SystemInit+0x1d8>)
    befe:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    bf02:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    bf06:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    bf0a:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    bf0e:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    bf12:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    bf16:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    bf1a:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    bf1e:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    bf22:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    bf26:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    bf2a:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    bf2e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    bf32:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    bf36:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    bf3a:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    bf3e:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    bf42:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    bf46:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    bf4a:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    bf4e:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    bf52:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    bf56:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    bf5a:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    bf5e:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    bf62:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    bf66:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    bf6a:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    bf6e:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    bf72:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    bf76:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    bf7a:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    bf7e:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    bf82:	f007 ff5f 	bl	13e44 <nrf52_errata_108>
    bf86:	b148      	cbz	r0, bf9c <SystemInit+0x14c>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    bf88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    bf8c:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    bf90:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    bf94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    bf98:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    bf9c:	f007 ff64 	bl	13e68 <nrf52_errata_136>
    bfa0:	b160      	cbz	r0, bfbc <SystemInit+0x16c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    bfa2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bfa6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    bfaa:	f013 0f01 	tst.w	r3, #1
    bfae:	d005      	beq.n	bfbc <SystemInit+0x16c>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    bfb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bfb4:	f06f 0201 	mvn.w	r2, #1
    bfb8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    bfbc:	f007 ff66 	bl	13e8c <nrf52_errata_182>
    bfc0:	b130      	cbz	r0, bfd0 <SystemInit+0x180>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    bfc2:	4a1a      	ldr	r2, [pc, #104]	; (c02c <SystemInit+0x1dc>)
    bfc4:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
    bfc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    bfcc:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    nrf52_handle_approtect();
    bfd0:	f007 ff84 	bl	13edc <nrf52_handle_approtect>

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    bfd4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    bfd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    bfdc:	2b00      	cmp	r3, #0
    bfde:	db06      	blt.n	bfee <SystemInit+0x19e>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    bfe0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    bfe4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    bfe8:	2b00      	cmp	r3, #0
    bfea:	db00      	blt.n	bfee <SystemInit+0x19e>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    bfec:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    bfee:	2001      	movs	r0, #1
    bff0:	f7ff ff24 	bl	be3c <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    bff4:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    bff8:	2515      	movs	r5, #21
    bffa:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    bffe:	f7ff ff15 	bl	be2c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    c002:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    c006:	f7ff ff11 	bl	be2c <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    c00a:	2000      	movs	r0, #0
    c00c:	f7ff ff16 	bl	be3c <nvmc_config>
            NVIC_SystemReset();
    c010:	f7ff fefa 	bl	be08 <__NVIC_SystemReset>
    c014:	40013000 	.word	0x40013000
    c018:	4007c000 	.word	0x4007c000
    c01c:	baadf00d 	.word	0xbaadf00d
    c020:	e000ed00 	.word	0xe000ed00
    c024:	40005000 	.word	0x40005000
    c028:	4000c000 	.word	0x4000c000
    c02c:	40001000 	.word	0x40001000

0000c030 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    c030:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    c032:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    c034:	fab4 f384 	clz	r3, r4
    c038:	f1c3 031f 	rsb	r3, r3, #31
    c03c:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    c040:	2b00      	cmp	r3, #0
    c042:	db16      	blt.n	c072 <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    c044:	2201      	movs	r2, #1
    c046:	fa02 f303 	lsl.w	r3, r2, r3
    c04a:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    c04e:	f3bf 8f5b 	dmb	ish
    c052:	e850 2f00 	ldrex	r2, [r0]
    c056:	42a2      	cmp	r2, r4
    c058:	d104      	bne.n	c064 <nrfx_flag32_alloc+0x34>
    c05a:	e840 3e00 	strex	lr, r3, [r0]
    c05e:	f1be 0f00 	cmp.w	lr, #0
    c062:	d1f6      	bne.n	c052 <nrfx_flag32_alloc+0x22>
    c064:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    c068:	d1e3      	bne.n	c032 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    c06a:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    c06e:	4802      	ldr	r0, [pc, #8]	; (c078 <nrfx_flag32_alloc+0x48>)
}
    c070:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    c072:	4802      	ldr	r0, [pc, #8]	; (c07c <nrfx_flag32_alloc+0x4c>)
    c074:	e7fc      	b.n	c070 <nrfx_flag32_alloc+0x40>
    c076:	bf00      	nop
    c078:	0bad0000 	.word	0x0bad0000
    c07c:	0bad0002 	.word	0x0bad0002

0000c080 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    c080:	6803      	ldr	r3, [r0, #0]
    c082:	40cb      	lsrs	r3, r1
    c084:	f013 0f01 	tst.w	r3, #1
    c088:	d115      	bne.n	c0b6 <nrfx_flag32_free+0x36>
{
    c08a:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    c08c:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    c08e:	2301      	movs	r3, #1
    c090:	408b      	lsls	r3, r1
    c092:	4313      	orrs	r3, r2
    c094:	f3bf 8f5b 	dmb	ish
    c098:	e850 cf00 	ldrex	ip, [r0]
    c09c:	4594      	cmp	ip, r2
    c09e:	d104      	bne.n	c0aa <nrfx_flag32_free+0x2a>
    c0a0:	e840 3e00 	strex	lr, r3, [r0]
    c0a4:	f1be 0f00 	cmp.w	lr, #0
    c0a8:	d1f6      	bne.n	c098 <nrfx_flag32_free+0x18>
    c0aa:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    c0ae:	d1ed      	bne.n	c08c <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    c0b0:	4802      	ldr	r0, [pc, #8]	; (c0bc <nrfx_flag32_free+0x3c>)
}
    c0b2:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    c0b6:	4802      	ldr	r0, [pc, #8]	; (c0c0 <nrfx_flag32_free+0x40>)
}
    c0b8:	4770      	bx	lr
    c0ba:	bf00      	nop
    c0bc:	0bad0000 	.word	0x0bad0000
    c0c0:	0bad0004 	.word	0x0bad0004

0000c0c4 <nrfx_clock_anomaly_132>:
    uint32_t core_debug;
    uint32_t dwt_ctrl;

    // Preserve DEMCR register to do not influence into its configuration. Enable the trace and
    // debug blocks. It is required to read and write data to DWT block.
    core_debug = CoreDebug->DEMCR;
    c0c4:	4b0d      	ldr	r3, [pc, #52]	; (c0fc <nrfx_clock_anomaly_132+0x38>)
    c0c6:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    c0ca:	f041 7280 	orr.w	r2, r1, #16777216	; 0x1000000
    c0ce:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

    // Preserve CTRL register in DWT block to do not influence into its configuration. Make sure
    // that cycle counter is enabled.
    dwt_ctrl = DWT->CTRL;
    c0d2:	f5a3 435d 	sub.w	r3, r3, #56576	; 0xdd00
    c0d6:	6818      	ldr	r0, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    c0d8:	f040 0201 	orr.w	r2, r0, #1
    c0dc:	601a      	str	r2, [r3, #0]

    // Store start value of cycle counter.
    cyccnt_inital = DWT->CYCCNT;
    c0de:	685a      	ldr	r2, [r3, #4]

    // Delay required time.
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    c0e0:	4b07      	ldr	r3, [pc, #28]	; (c100 <nrfx_clock_anomaly_132+0x3c>)
    c0e2:	685b      	ldr	r3, [r3, #4]
    c0e4:	1a9b      	subs	r3, r3, r2
    c0e6:	f5b3 5f0a 	cmp.w	r3, #8832	; 0x2280
    c0ea:	d3f9      	bcc.n	c0e0 <nrfx_clock_anomaly_132+0x1c>
    {}

    // Restore preserved registers.
    DWT->CTRL = dwt_ctrl;
    c0ec:	4b04      	ldr	r3, [pc, #16]	; (c100 <nrfx_clock_anomaly_132+0x3c>)
    c0ee:	6018      	str	r0, [r3, #0]
    CoreDebug->DEMCR = core_debug;
    c0f0:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
    c0f4:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
}
    c0f8:	4770      	bx	lr
    c0fa:	bf00      	nop
    c0fc:	e000ed00 	.word	0xe000ed00
    c100:	e0001000 	.word	0xe0001000

0000c104 <clock_stop>:
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    c104:	b570      	push	{r4, r5, r6, lr}
    c106:	b082      	sub	sp, #8
    switch (domain)
    c108:	4606      	mov	r6, r0
    c10a:	b118      	cbz	r0, c114 <clock_stop+0x10>
    c10c:	2801      	cmp	r0, #1
    c10e:	d016      	beq.n	c13e <clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    c110:	b002      	add	sp, #8
    c112:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
    c114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c118:	2202      	movs	r2, #2
    c11a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c11e:	2200      	movs	r2, #0
    c120:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    c124:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c128:	2201      	movs	r2, #1
    c12a:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    c12c:	2301      	movs	r3, #1
    c12e:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    c132:	429e      	cmp	r6, r3
    c134:	d00f      	beq.n	c156 <clock_stop+0x52>
    c136:	2500      	movs	r5, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    c138:	f242 7410 	movw	r4, #10000	; 0x2710
    c13c:	e013      	b.n	c166 <clock_stop+0x62>
    p_reg->INTENCLR = mask;
    c13e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c142:	2201      	movs	r2, #1
    c144:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c148:	2100      	movs	r1, #0
    c14a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    c14e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c152:	605a      	str	r2, [r3, #4]
}
    c154:	e7ea      	b.n	c12c <clock_stop+0x28>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    c156:	f10d 0507 	add.w	r5, sp, #7
    c15a:	e7ed      	b.n	c138 <clock_stop+0x34>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    c15c:	2001      	movs	r0, #1
    c15e:	f007 fecd 	bl	13efc <nrfx_busy_wait>
    c162:	3c01      	subs	r4, #1
    c164:	d00c      	beq.n	c180 <clock_stop+0x7c>
    c166:	462a      	mov	r2, r5
    c168:	4631      	mov	r1, r6
    c16a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c16e:	f007 fec9 	bl	13f04 <nrf_clock_is_running>
    c172:	b128      	cbz	r0, c180 <clock_stop+0x7c>
    c174:	2d00      	cmp	r5, #0
    c176:	d0f1      	beq.n	c15c <clock_stop+0x58>
    c178:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c17c:	2b01      	cmp	r3, #1
    c17e:	d0ed      	beq.n	c15c <clock_stop+0x58>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    c180:	2e01      	cmp	r6, #1
    c182:	d1c5      	bne.n	c110 <clock_stop+0xc>
            m_clock_cb.hfclk_started = false;
    c184:	4b01      	ldr	r3, [pc, #4]	; (c18c <clock_stop+0x88>)
    c186:	2200      	movs	r2, #0
    c188:	715a      	strb	r2, [r3, #5]
    c18a:	e7c1      	b.n	c110 <clock_stop+0xc>
    c18c:	2000375c 	.word	0x2000375c

0000c190 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    c190:	4b06      	ldr	r3, [pc, #24]	; (c1ac <nrfx_clock_init+0x1c>)
    c192:	791b      	ldrb	r3, [r3, #4]
    c194:	b93b      	cbnz	r3, c1a6 <nrfx_clock_init+0x16>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    c196:	4b05      	ldr	r3, [pc, #20]	; (c1ac <nrfx_clock_init+0x1c>)
    c198:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    c19a:	2201      	movs	r2, #1
    c19c:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    c19e:	2200      	movs	r2, #0
    c1a0:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    c1a2:	4803      	ldr	r0, [pc, #12]	; (c1b0 <nrfx_clock_init+0x20>)
    c1a4:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    c1a6:	4803      	ldr	r0, [pc, #12]	; (c1b4 <nrfx_clock_init+0x24>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    c1a8:	4770      	bx	lr
    c1aa:	bf00      	nop
    c1ac:	2000375c 	.word	0x2000375c
    c1b0:	0bad0000 	.word	0x0bad0000
    c1b4:	0bad000c 	.word	0x0bad000c

0000c1b8 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    c1b8:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    c1ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c1be:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    c1c2:	b18b      	cbz	r3, c1e8 <nrfx_power_clock_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c1c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c1c8:	2200      	movs	r2, #0
    c1ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    c1ce:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    c1d2:	2201      	movs	r2, #1
    c1d4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    c1d8:	4b15      	ldr	r3, [pc, #84]	; (c230 <nrfx_power_clock_irq_handler+0x78>)
    c1da:	795b      	ldrb	r3, [r3, #5]
    c1dc:	b923      	cbnz	r3, c1e8 <nrfx_power_clock_irq_handler+0x30>
        {
            m_clock_cb.hfclk_started = true;
    c1de:	4b14      	ldr	r3, [pc, #80]	; (c230 <nrfx_power_clock_irq_handler+0x78>)
    c1e0:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    c1e2:	681b      	ldr	r3, [r3, #0]
    c1e4:	2000      	movs	r0, #0
    c1e6:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    c1e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c1ec:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    c1f0:	b19b      	cbz	r3, c21a <nrfx_power_clock_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c1f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c1f6:	2200      	movs	r2, #0
    c1f8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    c1fc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    c200:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    c204:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    c208:	f012 0f03 	tst.w	r2, #3
    c20c:	d106      	bne.n	c21c <nrfx_power_clock_irq_handler+0x64>
    p_reg->LFCLKSRC = (uint32_t)(source);
    c20e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c212:	2201      	movs	r2, #1
    c214:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c218:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    c21a:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    c21c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c220:	2202      	movs	r2, #2
    c222:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    c226:	4b02      	ldr	r3, [pc, #8]	; (c230 <nrfx_power_clock_irq_handler+0x78>)
    c228:	681b      	ldr	r3, [r3, #0]
    c22a:	2001      	movs	r0, #1
    c22c:	4798      	blx	r3
}
    c22e:	e7f4      	b.n	c21a <nrfx_power_clock_irq_handler+0x62>
    c230:	2000375c 	.word	0x2000375c

0000c234 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    c234:	3008      	adds	r0, #8
    c236:	4b03      	ldr	r3, [pc, #12]	; (c244 <pin_in_use+0x10>)
    c238:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    c23c:	f000 0001 	and.w	r0, r0, #1
    c240:	4770      	bx	lr
    c242:	bf00      	nop
    c244:	200001e8 	.word	0x200001e8

0000c248 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    c248:	3008      	adds	r0, #8
    c24a:	4b03      	ldr	r3, [pc, #12]	; (c258 <pin_in_use_by_te+0x10>)
    c24c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    c250:	f3c0 1040 	ubfx	r0, r0, #5, #1
    c254:	4770      	bx	lr
    c256:	bf00      	nop
    c258:	200001e8 	.word	0x200001e8

0000c25c <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    c25c:	3008      	adds	r0, #8
    c25e:	4b04      	ldr	r3, [pc, #16]	; (c270 <pin_has_trigger+0x14>)
    c260:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    c264:	f010 001c 	ands.w	r0, r0, #28
    c268:	bf18      	it	ne
    c26a:	2001      	movne	r0, #1
    c26c:	4770      	bx	lr
    c26e:	bf00      	nop
    c270:	200001e8 	.word	0x200001e8

0000c274 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    c274:	3008      	adds	r0, #8
    c276:	4b03      	ldr	r3, [pc, #12]	; (c284 <pin_is_output+0x10>)
    c278:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    c27c:	f3c0 0040 	ubfx	r0, r0, #1, #1
    c280:	4770      	bx	lr
    c282:	bf00      	nop
    c284:	200001e8 	.word	0x200001e8

0000c288 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    c288:	3008      	adds	r0, #8
    c28a:	4b02      	ldr	r3, [pc, #8]	; (c294 <pin_te_get+0xc>)
    c28c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    c290:	0b40      	lsrs	r0, r0, #13
    c292:	4770      	bx	lr
    c294:	200001e8 	.word	0x200001e8

0000c298 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    c298:	2200      	movs	r2, #0
    c29a:	e004      	b.n	c2a6 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    c29c:	f04f 33ff 	mov.w	r3, #4294967295
    c2a0:	4283      	cmp	r3, r0
    c2a2:	d00f      	beq.n	c2c4 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    c2a4:	3201      	adds	r2, #1
    c2a6:	2a1f      	cmp	r2, #31
    c2a8:	d80a      	bhi.n	c2c0 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    c2aa:	f102 0308 	add.w	r3, r2, #8
    c2ae:	4906      	ldr	r1, [pc, #24]	; (c2c8 <handler_in_use+0x30>)
    c2b0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    c2b4:	f413 7f80 	tst.w	r3, #256	; 0x100
    c2b8:	d0f0      	beq.n	c29c <handler_in_use+0x4>
    c2ba:	f3c3 2343 	ubfx	r3, r3, #9, #4
    c2be:	e7ef      	b.n	c2a0 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    c2c0:	2000      	movs	r0, #0
    c2c2:	4770      	bx	lr
            return true;
    c2c4:	2001      	movs	r0, #1
}
    c2c6:	4770      	bx	lr
    c2c8:	200001e8 	.word	0x200001e8

0000c2cc <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    c2cc:	2300      	movs	r3, #0
    c2ce:	b113      	cbz	r3, c2d6 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    c2d0:	f04f 30ff 	mov.w	r0, #4294967295
}
    c2d4:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    c2d6:	4a07      	ldr	r2, [pc, #28]	; (c2f4 <find_handler+0x28>)
    c2d8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    c2dc:	4282      	cmp	r2, r0
    c2de:	d001      	beq.n	c2e4 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    c2e0:	3301      	adds	r3, #1
    c2e2:	e7f4      	b.n	c2ce <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    c2e4:	4a03      	ldr	r2, [pc, #12]	; (c2f4 <find_handler+0x28>)
    c2e6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    c2ea:	6852      	ldr	r2, [r2, #4]
    c2ec:	428a      	cmp	r2, r1
    c2ee:	d1f7      	bne.n	c2e0 <find_handler+0x14>
            return i;
    c2f0:	4618      	mov	r0, r3
    c2f2:	4770      	bx	lr
    c2f4:	200001e8 	.word	0x200001e8

0000c2f8 <get_initial_sense>:
    return NRFX_SUCCESS;
}

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    c2f8:	f100 0208 	add.w	r2, r0, #8
    c2fc:	4b0d      	ldr	r3, [pc, #52]	; (c334 <get_initial_sense+0x3c>)
    c2fe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    c302:	f3c3 0382 	ubfx	r3, r3, #2, #3
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    c306:	2b04      	cmp	r3, #4
    c308:	d00d      	beq.n	c326 <get_initial_sense+0x2e>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    c30a:	2b05      	cmp	r3, #5
    c30c:	d00d      	beq.n	c32a <get_initial_sense+0x32>
    *p_pin = pin_number & 0x1F;
    c30e:	f000 001f 	and.w	r0, r0, #31
    return p_reg->IN;
    c312:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    c316:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    c31a:	40c3      	lsrs	r3, r0
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    c31c:	f013 0f01 	tst.w	r3, #1
    c320:	d005      	beq.n	c32e <get_initial_sense+0x36>
    c322:	2003      	movs	r0, #3
    c324:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_LOW;
    c326:	2003      	movs	r0, #3
    c328:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    c32a:	2002      	movs	r0, #2
    c32c:	4770      	bx	lr
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    c32e:	2002      	movs	r0, #2
    }

    return sense;
}
    c330:	4770      	bx	lr
    c332:	bf00      	nop
    c334:	200001e8 	.word	0x200001e8

0000c338 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    c338:	3008      	adds	r0, #8
    c33a:	4b06      	ldr	r3, [pc, #24]	; (c354 <channel_handler_get+0x1c>)
    c33c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    c340:	f410 7f80 	tst.w	r0, #256	; 0x100
    c344:	d004      	beq.n	c350 <channel_handler_get+0x18>
    c346:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    c34a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    c34e:	4770      	bx	lr
        return NULL;
    c350:	2000      	movs	r0, #0
}
    c352:	4770      	bx	lr
    c354:	200001e8 	.word	0x200001e8

0000c358 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    c358:	b570      	push	{r4, r5, r6, lr}
    c35a:	4604      	mov	r4, r0
    c35c:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    c35e:	f7ff ffeb 	bl	c338 <channel_handler_get>

    if (handler)
    c362:	b120      	cbz	r0, c36e <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    c364:	6806      	ldr	r6, [r0, #0]
    c366:	6842      	ldr	r2, [r0, #4]
    c368:	4629      	mov	r1, r5
    c36a:	4620      	mov	r0, r4
    c36c:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    c36e:	4b04      	ldr	r3, [pc, #16]	; (c380 <call_handler+0x28>)
    c370:	689b      	ldr	r3, [r3, #8]
    c372:	b123      	cbz	r3, c37e <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    c374:	4a02      	ldr	r2, [pc, #8]	; (c380 <call_handler+0x28>)
    c376:	68d2      	ldr	r2, [r2, #12]
    c378:	4629      	mov	r1, r5
    c37a:	4620      	mov	r0, r4
    c37c:	4798      	blx	r3
    }
}
    c37e:	bd70      	pop	{r4, r5, r6, pc}
    c380:	200001e8 	.word	0x200001e8

0000c384 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    c384:	f100 0208 	add.w	r2, r0, #8
    c388:	4b0e      	ldr	r3, [pc, #56]	; (c3c4 <release_handler+0x40>)
    c38a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    c38e:	f413 7f80 	tst.w	r3, #256	; 0x100
    c392:	d016      	beq.n	c3c2 <release_handler+0x3e>
{
    c394:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    c396:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    c39a:	4610      	mov	r0, r2
    c39c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    c3a0:	4a08      	ldr	r2, [pc, #32]	; (c3c4 <release_handler+0x40>)
    c3a2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    c3a6:	4620      	mov	r0, r4
    c3a8:	f7ff ff76 	bl	c298 <handler_in_use>
    c3ac:	b100      	cbz	r0, c3b0 <release_handler+0x2c>
}
    c3ae:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    c3b0:	4804      	ldr	r0, [pc, #16]	; (c3c4 <release_handler+0x40>)
    c3b2:	2300      	movs	r3, #0
    c3b4:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    c3b8:	4621      	mov	r1, r4
    c3ba:	3054      	adds	r0, #84	; 0x54
    c3bc:	f7ff fe60 	bl	c080 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    c3c0:	e7f5      	b.n	c3ae <release_handler+0x2a>
    c3c2:	4770      	bx	lr
    c3c4:	200001e8 	.word	0x200001e8

0000c3c8 <pin_handler_trigger_uninit>:
{
    c3c8:	b510      	push	{r4, lr}
    c3ca:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    c3cc:	f7ff ff3c 	bl	c248 <pin_in_use_by_te>
    c3d0:	b140      	cbz	r0, c3e4 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    c3d2:	4620      	mov	r0, r4
    c3d4:	f7ff ff58 	bl	c288 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    c3d8:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    c3dc:	4b06      	ldr	r3, [pc, #24]	; (c3f8 <pin_handler_trigger_uninit+0x30>)
    c3de:	2200      	movs	r2, #0
    c3e0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    c3e4:	4620      	mov	r0, r4
    c3e6:	f7ff ffcd 	bl	c384 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    c3ea:	3408      	adds	r4, #8
    c3ec:	4b03      	ldr	r3, [pc, #12]	; (c3fc <pin_handler_trigger_uninit+0x34>)
    c3ee:	2200      	movs	r2, #0
    c3f0:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    c3f4:	bd10      	pop	{r4, pc}
    c3f6:	bf00      	nop
    c3f8:	40006000 	.word	0x40006000
    c3fc:	200001e8 	.word	0x200001e8

0000c400 <pin_handler_set>:
{
    c400:	b570      	push	{r4, r5, r6, lr}
    c402:	b082      	sub	sp, #8
    c404:	4605      	mov	r5, r0
    c406:	460e      	mov	r6, r1
    c408:	4614      	mov	r4, r2
    release_handler(pin);
    c40a:	f7ff ffbb 	bl	c384 <release_handler>
    if (!handler)
    c40e:	b326      	cbz	r6, c45a <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    c410:	4621      	mov	r1, r4
    c412:	4630      	mov	r0, r6
    c414:	f7ff ff5a 	bl	c2cc <find_handler>
    if (handler_id < 0)
    c418:	1e03      	subs	r3, r0, #0
    c41a:	db13      	blt.n	c444 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    c41c:	4910      	ldr	r1, [pc, #64]	; (c460 <pin_handler_set+0x60>)
    c41e:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    c422:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    c426:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    c428:	f105 0008 	add.w	r0, r5, #8
    c42c:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    c430:	025b      	lsls	r3, r3, #9
    c432:	b29b      	uxth	r3, r3
    c434:	4313      	orrs	r3, r2
    c436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    c43a:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
    c43e:	4809      	ldr	r0, [pc, #36]	; (c464 <pin_handler_set+0x64>)
}
    c440:	b002      	add	sp, #8
    c442:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    c444:	f10d 0107 	add.w	r1, sp, #7
    c448:	4807      	ldr	r0, [pc, #28]	; (c468 <pin_handler_set+0x68>)
    c44a:	f7ff fdf1 	bl	c030 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    c44e:	4b05      	ldr	r3, [pc, #20]	; (c464 <pin_handler_set+0x64>)
    c450:	4298      	cmp	r0, r3
    c452:	d1f5      	bne.n	c440 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    c454:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c458:	e7e0      	b.n	c41c <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    c45a:	4802      	ldr	r0, [pc, #8]	; (c464 <pin_handler_set+0x64>)
    c45c:	e7f0      	b.n	c440 <pin_handler_set+0x40>
    c45e:	bf00      	nop
    c460:	200001e8 	.word	0x200001e8
    c464:	0bad0000 	.word	0x0bad0000
    c468:	2000023c 	.word	0x2000023c

0000c46c <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
    c46c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c46e:	b083      	sub	sp, #12
    for (i = start_port; i < (start_port + length); i++)
    c470:	2300      	movs	r3, #0
    c472:	a801      	add	r0, sp, #4
    c474:	e008      	b.n	c488 <port_event_handle+0x1c>
        *p_masks = gpio_regs[i]->LATCH;
    c476:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    c47a:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    c47e:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    c482:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    c486:	3301      	adds	r3, #1
    c488:	2b00      	cmp	r3, #0
    c48a:	d0f4      	beq.n	c476 <port_event_handle+0xa>
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    do {
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    c48c:	2400      	movs	r4, #0
    c48e:	b3a4      	cbz	r4, c4fa <port_event_handle+0x8e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    c490:	4b1e      	ldr	r3, [pc, #120]	; (c50c <port_event_handle+0xa0>)
    c492:	2200      	movs	r2, #0
    c494:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    c498:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
    c49c:	a801      	add	r0, sp, #4
    c49e:	f007 fed0 	bl	14242 <latch_pending_read_and_check>
    c4a2:	2800      	cmp	r0, #0
    c4a4:	d1f2      	bne.n	c48c <port_event_handle+0x20>
}
    c4a6:	b003      	add	sp, #12
    c4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    c4aa:	fa90 f0a0 	rbit	r0, r0
    c4ae:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    c4b2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    c4b6:	f100 0208 	add.w	r2, r0, #8
    c4ba:	4b15      	ldr	r3, [pc, #84]	; (c510 <port_event_handle+0xa4>)
    c4bc:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    c4c0:	08c6      	lsrs	r6, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    c4c2:	f000 0307 	and.w	r3, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    c4c6:	af01      	add	r7, sp, #4
    c4c8:	5dba      	ldrb	r2, [r7, r6]
    c4ca:	2501      	movs	r5, #1
    c4cc:	fa05 f303 	lsl.w	r3, r5, r3
    c4d0:	43db      	mvns	r3, r3
    c4d2:	b25b      	sxtb	r3, r3
    c4d4:	4013      	ands	r3, r2
    c4d6:	55bb      	strb	r3, [r7, r6]
    *p_pin = pin_number & 0x1F;
    c4d8:	f000 071f 	and.w	r7, r0, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    c4dc:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    c4e0:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
    c4e4:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    c4e8:	f3c2 4201 	ubfx	r2, r2, #16, #2
    c4ec:	f3c1 0182 	ubfx	r1, r1, #2, #3
    c4f0:	f007 fe58 	bl	141a4 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    c4f4:	40bd      	lsls	r5, r7
    c4f6:	f8c6 5520 	str.w	r5, [r6, #1312]	; 0x520
            while (latch[i])
    c4fa:	ab02      	add	r3, sp, #8
    c4fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    c500:	f853 0c04 	ldr.w	r0, [r3, #-4]
    c504:	2800      	cmp	r0, #0
    c506:	d1d0      	bne.n	c4aa <port_event_handle+0x3e>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    c508:	3401      	adds	r4, #1
    c50a:	e7c0      	b.n	c48e <port_event_handle+0x22>
    c50c:	40006000 	.word	0x40006000
    c510:	200001e8 	.word	0x200001e8

0000c514 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    c514:	b538      	push	{r3, r4, r5, lr}
    c516:	4604      	mov	r4, r0
    while (mask)
    c518:	e018      	b.n	c54c <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    c51a:	fa94 f3a4 	rbit	r3, r4
    c51e:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    c522:	2201      	movs	r2, #1
    c524:	409a      	lsls	r2, r3
    c526:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    c52a:	4a0a      	ldr	r2, [pc, #40]	; (c554 <gpiote_evt_handle+0x40>)
    c52c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    c530:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    c534:	f3c5 2504 	ubfx	r5, r5, #8, #5
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    c538:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    c53c:	f3c0 4001 	ubfx	r0, r0, #16, #2
    c540:	f007 fe29 	bl	14196 <gpiote_polarity_to_trigger>
    c544:	4601      	mov	r1, r0
    c546:	4628      	mov	r0, r5
    c548:	f7ff ff06 	bl	c358 <call_handler>
    while (mask)
    c54c:	2c00      	cmp	r4, #0
    c54e:	d1e4      	bne.n	c51a <gpiote_evt_handle+0x6>
    }
}
    c550:	bd38      	pop	{r3, r4, r5, pc}
    c552:	bf00      	nop
    c554:	40006000 	.word	0x40006000

0000c558 <nrfx_gpiote_input_configure>:
{
    c558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c55c:	b084      	sub	sp, #16
    c55e:	4604      	mov	r4, r0
    c560:	4615      	mov	r5, r2
    c562:	461e      	mov	r6, r3
    if (p_input_config)
    c564:	b309      	cbz	r1, c5aa <nrfx_gpiote_input_configure+0x52>
    c566:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    c568:	f007 fdff 	bl	1416a <pin_is_task_output>
    c56c:	2800      	cmp	r0, #0
    c56e:	d13f      	bne.n	c5f0 <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    c570:	2300      	movs	r3, #0
    c572:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    c576:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    c57a:	9301      	str	r3, [sp, #4]
    c57c:	9300      	str	r3, [sp, #0]
    c57e:	463b      	mov	r3, r7
    c580:	f10d 020f 	add.w	r2, sp, #15
    c584:	f10d 010e 	add.w	r1, sp, #14
    c588:	4620      	mov	r0, r4
    c58a:	f007 fd96 	bl	140ba <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    c58e:	4a38      	ldr	r2, [pc, #224]	; (c670 <nrfx_gpiote_input_configure+0x118>)
    c590:	f104 0108 	add.w	r1, r4, #8
    c594:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    c598:	f023 0302 	bic.w	r3, r3, #2
    c59c:	b29b      	uxth	r3, r3
    c59e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    c5a2:	f043 0301 	orr.w	r3, r3, #1
    c5a6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    c5aa:	b1bd      	cbz	r5, c5dc <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    c5ac:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    c5ae:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    c5b2:	4620      	mov	r0, r4
    c5b4:	f7ff fe5e 	bl	c274 <pin_is_output>
    c5b8:	b1e0      	cbz	r0, c5f4 <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
    c5ba:	f1b8 0f00 	cmp.w	r8, #0
    c5be:	d151      	bne.n	c664 <nrfx_gpiote_input_configure+0x10c>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    c5c0:	4a2b      	ldr	r2, [pc, #172]	; (c670 <nrfx_gpiote_input_configure+0x118>)
    c5c2:	f104 0108 	add.w	r1, r4, #8
    c5c6:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    c5ca:	f023 031c 	bic.w	r3, r3, #28
    c5ce:	b29b      	uxth	r3, r3
    c5d0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    c5d4:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    c5d8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    c5dc:	2e00      	cmp	r6, #0
    c5de:	d045      	beq.n	c66c <nrfx_gpiote_input_configure+0x114>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    c5e0:	6872      	ldr	r2, [r6, #4]
    c5e2:	6831      	ldr	r1, [r6, #0]
    c5e4:	4620      	mov	r0, r4
    c5e6:	f7ff ff0b 	bl	c400 <pin_handler_set>
}
    c5ea:	b004      	add	sp, #16
    c5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
    c5f0:	4820      	ldr	r0, [pc, #128]	; (c674 <nrfx_gpiote_input_configure+0x11c>)
    c5f2:	e7fa      	b.n	c5ea <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    c5f4:	4a1e      	ldr	r2, [pc, #120]	; (c670 <nrfx_gpiote_input_configure+0x118>)
    c5f6:	f104 0108 	add.w	r1, r4, #8
    c5fa:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    c5fe:	f023 0320 	bic.w	r3, r3, #32
    c602:	04db      	lsls	r3, r3, #19
    c604:	0cdb      	lsrs	r3, r3, #19
    c606:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    c60a:	f1b8 0f00 	cmp.w	r8, #0
    c60e:	d0d7      	beq.n	c5c0 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    c610:	2f03      	cmp	r7, #3
    c612:	d829      	bhi.n	c668 <nrfx_gpiote_input_configure+0x110>
                uint8_t ch = *p_trigger_config->p_in_channel;
    c614:	686b      	ldr	r3, [r5, #4]
    c616:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    c618:	b937      	cbnz	r7, c628 <nrfx_gpiote_input_configure+0xd0>
    p_reg->CONFIG[idx] = 0;
    c61a:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    c61e:	4b16      	ldr	r3, [pc, #88]	; (c678 <nrfx_gpiote_input_configure+0x120>)
    c620:	2200      	movs	r2, #0
    c622:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
#endif
}
    c626:	e7cb      	b.n	c5c0 <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    c628:	4638      	mov	r0, r7
    c62a:	f007 fdb5 	bl	14198 <gpiote_trigger_to_polarity>
    c62e:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    c630:	4811      	ldr	r0, [pc, #68]	; (c678 <nrfx_gpiote_input_configure+0x120>)
    c632:	f505 71a2 	add.w	r1, r5, #324	; 0x144
    c636:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    c63a:	f022 0203 	bic.w	r2, r2, #3
    c63e:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
    c642:	4622      	mov	r2, r4
    c644:	4629      	mov	r1, r5
    c646:	f007 fd00 	bl	1404a <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    c64a:	4a09      	ldr	r2, [pc, #36]	; (c670 <nrfx_gpiote_input_configure+0x118>)
    c64c:	f104 0108 	add.w	r1, r4, #8
    c650:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    c654:	036d      	lsls	r5, r5, #13
    c656:	b2ad      	uxth	r5, r5
    c658:	432b      	orrs	r3, r5
    c65a:	f043 0320 	orr.w	r3, r3, #32
    c65e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    c662:	e7ad      	b.n	c5c0 <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
    c664:	4803      	ldr	r0, [pc, #12]	; (c674 <nrfx_gpiote_input_configure+0x11c>)
    c666:	e7c0      	b.n	c5ea <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
    c668:	4802      	ldr	r0, [pc, #8]	; (c674 <nrfx_gpiote_input_configure+0x11c>)
    c66a:	e7be      	b.n	c5ea <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
    c66c:	4803      	ldr	r0, [pc, #12]	; (c67c <nrfx_gpiote_input_configure+0x124>)
    c66e:	e7bc      	b.n	c5ea <nrfx_gpiote_input_configure+0x92>
    c670:	200001e8 	.word	0x200001e8
    c674:	0bad0004 	.word	0x0bad0004
    c678:	40006000 	.word	0x40006000
    c67c:	0bad0000 	.word	0x0bad0000

0000c680 <nrfx_gpiote_output_configure>:
{
    c680:	b570      	push	{r4, r5, r6, lr}
    c682:	b084      	sub	sp, #16
    c684:	4604      	mov	r4, r0
    c686:	4615      	mov	r5, r2
    if (p_config)
    c688:	b329      	cbz	r1, c6d6 <nrfx_gpiote_output_configure+0x56>
    c68a:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    c68c:	f007 fd7c 	bl	14188 <pin_is_input>
    c690:	b120      	cbz	r0, c69c <nrfx_gpiote_output_configure+0x1c>
    c692:	4620      	mov	r0, r4
    c694:	f7ff fdd8 	bl	c248 <pin_in_use_by_te>
    c698:	2800      	cmp	r0, #0
    c69a:	d138      	bne.n	c70e <nrfx_gpiote_output_configure+0x8e>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    c69c:	4620      	mov	r0, r4
    c69e:	f7ff fddd 	bl	c25c <pin_has_trigger>
    c6a2:	b110      	cbz	r0, c6aa <nrfx_gpiote_output_configure+0x2a>
    c6a4:	7873      	ldrb	r3, [r6, #1]
    c6a6:	2b01      	cmp	r3, #1
    c6a8:	d031      	beq.n	c70e <nrfx_gpiote_output_configure+0x8e>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    c6aa:	2301      	movs	r3, #1
    c6ac:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    c6b0:	2300      	movs	r3, #0
    c6b2:	9301      	str	r3, [sp, #4]
    c6b4:	9600      	str	r6, [sp, #0]
    c6b6:	1cb3      	adds	r3, r6, #2
    c6b8:	1c72      	adds	r2, r6, #1
    c6ba:	f10d 010f 	add.w	r1, sp, #15
    c6be:	4620      	mov	r0, r4
    c6c0:	f007 fcfb 	bl	140ba <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    c6c4:	4a1f      	ldr	r2, [pc, #124]	; (c744 <nrfx_gpiote_output_configure+0xc4>)
    c6c6:	f104 0108 	add.w	r1, r4, #8
    c6ca:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    c6ce:	f043 0303 	orr.w	r3, r3, #3
    c6d2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    c6d6:	b385      	cbz	r5, c73a <nrfx_gpiote_output_configure+0xba>
        if (pin_is_input(pin))
    c6d8:	4620      	mov	r0, r4
    c6da:	f007 fd55 	bl	14188 <pin_is_input>
    c6de:	bb70      	cbnz	r0, c73e <nrfx_gpiote_output_configure+0xbe>
        uint32_t ch = p_task_config->task_ch;
    c6e0:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    c6e2:	f506 72a2 	add.w	r2, r6, #324	; 0x144
    c6e6:	4b18      	ldr	r3, [pc, #96]	; (c748 <nrfx_gpiote_output_configure+0xc8>)
    c6e8:	2100      	movs	r1, #0
    c6ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    c6ee:	4a15      	ldr	r2, [pc, #84]	; (c744 <nrfx_gpiote_output_configure+0xc4>)
    c6f0:	f104 0108 	add.w	r1, r4, #8
    c6f4:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    c6f8:	f023 0320 	bic.w	r3, r3, #32
    c6fc:	04db      	lsls	r3, r3, #19
    c6fe:	0cdb      	lsrs	r3, r3, #19
    c700:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    c704:	786b      	ldrb	r3, [r5, #1]
    c706:	b923      	cbnz	r3, c712 <nrfx_gpiote_output_configure+0x92>
    return NRFX_SUCCESS;
    c708:	4810      	ldr	r0, [pc, #64]	; (c74c <nrfx_gpiote_output_configure+0xcc>)
}
    c70a:	b004      	add	sp, #16
    c70c:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
    c70e:	4810      	ldr	r0, [pc, #64]	; (c750 <nrfx_gpiote_output_configure+0xd0>)
    c710:	e7fb      	b.n	c70a <nrfx_gpiote_output_configure+0x8a>
                                      p_task_config->init_val);
    c712:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    c714:	9200      	str	r2, [sp, #0]
    c716:	4622      	mov	r2, r4
    c718:	4631      	mov	r1, r6
    c71a:	480b      	ldr	r0, [pc, #44]	; (c748 <nrfx_gpiote_output_configure+0xc8>)
    c71c:	f007 fcae 	bl	1407c <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    c720:	4a08      	ldr	r2, [pc, #32]	; (c744 <nrfx_gpiote_output_configure+0xc4>)
    c722:	3408      	adds	r4, #8
    c724:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    c728:	0376      	lsls	r6, r6, #13
    c72a:	b2b6      	uxth	r6, r6
    c72c:	4333      	orrs	r3, r6
    c72e:	f043 0320 	orr.w	r3, r3, #32
    c732:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    c736:	4805      	ldr	r0, [pc, #20]	; (c74c <nrfx_gpiote_output_configure+0xcc>)
    c738:	e7e7      	b.n	c70a <nrfx_gpiote_output_configure+0x8a>
    c73a:	4804      	ldr	r0, [pc, #16]	; (c74c <nrfx_gpiote_output_configure+0xcc>)
    c73c:	e7e5      	b.n	c70a <nrfx_gpiote_output_configure+0x8a>
            return NRFX_ERROR_INVALID_PARAM;
    c73e:	4804      	ldr	r0, [pc, #16]	; (c750 <nrfx_gpiote_output_configure+0xd0>)
    c740:	e7e3      	b.n	c70a <nrfx_gpiote_output_configure+0x8a>
    c742:	bf00      	nop
    c744:	200001e8 	.word	0x200001e8
    c748:	40006000 	.word	0x40006000
    c74c:	0bad0000 	.word	0x0bad0000
    c750:	0bad0004 	.word	0x0bad0004

0000c754 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    c754:	4b01      	ldr	r3, [pc, #4]	; (c75c <nrfx_gpiote_global_callback_set+0x8>)
    c756:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    c758:	60d9      	str	r1, [r3, #12]
}
    c75a:	4770      	bx	lr
    c75c:	200001e8 	.word	0x200001e8

0000c760 <nrfx_gpiote_channel_get>:
{
    c760:	b538      	push	{r3, r4, r5, lr}
    c762:	4604      	mov	r4, r0
    c764:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    c766:	f7ff fd6f 	bl	c248 <pin_in_use_by_te>
    c76a:	b140      	cbz	r0, c77e <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    c76c:	f104 0008 	add.w	r0, r4, #8
    c770:	4b04      	ldr	r3, [pc, #16]	; (c784 <nrfx_gpiote_channel_get+0x24>)
    c772:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    c776:	0b5b      	lsrs	r3, r3, #13
    c778:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    c77a:	4803      	ldr	r0, [pc, #12]	; (c788 <nrfx_gpiote_channel_get+0x28>)
}
    c77c:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    c77e:	4803      	ldr	r0, [pc, #12]	; (c78c <nrfx_gpiote_channel_get+0x2c>)
    c780:	e7fc      	b.n	c77c <nrfx_gpiote_channel_get+0x1c>
    c782:	bf00      	nop
    c784:	200001e8 	.word	0x200001e8
    c788:	0bad0000 	.word	0x0bad0000
    c78c:	0bad0004 	.word	0x0bad0004

0000c790 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    c790:	4b0f      	ldr	r3, [pc, #60]	; (c7d0 <nrfx_gpiote_init+0x40>)
    c792:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    c796:	b10b      	cbz	r3, c79c <nrfx_gpiote_init+0xc>
        return err_code;
    c798:	480e      	ldr	r0, [pc, #56]	; (c7d4 <nrfx_gpiote_init+0x44>)
}
    c79a:	4770      	bx	lr
{
    c79c:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    c79e:	4c0e      	ldr	r4, [pc, #56]	; (c7d8 <nrfx_gpiote_init+0x48>)
    c7a0:	2240      	movs	r2, #64	; 0x40
    c7a2:	2100      	movs	r1, #0
    c7a4:	4620      	mov	r0, r4
    c7a6:	f006 fb1f 	bl	12de8 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    c7aa:	2006      	movs	r0, #6
    c7ac:	f006 f8ba 	bl	12924 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    c7b0:	4b0a      	ldr	r3, [pc, #40]	; (c7dc <nrfx_gpiote_init+0x4c>)
    c7b2:	2200      	movs	r2, #0
    c7b4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    c7b8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    c7bc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    c7c0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    c7c4:	2301      	movs	r3, #1
    c7c6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    c7ca:	6463      	str	r3, [r4, #68]	; 0x44
    return err_code;
    c7cc:	4804      	ldr	r0, [pc, #16]	; (c7e0 <nrfx_gpiote_init+0x50>)
}
    c7ce:	bd10      	pop	{r4, pc}
    c7d0:	200001e8 	.word	0x200001e8
    c7d4:	0bad0005 	.word	0x0bad0005
    c7d8:	200001f8 	.word	0x200001f8
    c7dc:	40006000 	.word	0x40006000
    c7e0:	0bad0000 	.word	0x0bad0000

0000c7e4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    c7e4:	4b03      	ldr	r3, [pc, #12]	; (c7f4 <nrfx_gpiote_is_init+0x10>)
    c7e6:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    c7ea:	3800      	subs	r0, #0
    c7ec:	bf18      	it	ne
    c7ee:	2001      	movne	r0, #1
    c7f0:	4770      	bx	lr
    c7f2:	bf00      	nop
    c7f4:	200001e8 	.word	0x200001e8

0000c7f8 <nrfx_gpiote_channel_free>:
{
    c7f8:	b508      	push	{r3, lr}
    c7fa:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    c7fc:	4801      	ldr	r0, [pc, #4]	; (c804 <nrfx_gpiote_channel_free+0xc>)
    c7fe:	f7ff fc3f 	bl	c080 <nrfx_flag32_free>
}
    c802:	bd08      	pop	{r3, pc}
    c804:	20000238 	.word	0x20000238

0000c808 <nrfx_gpiote_channel_alloc>:
{
    c808:	b508      	push	{r3, lr}
    c80a:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    c80c:	4801      	ldr	r0, [pc, #4]	; (c814 <nrfx_gpiote_channel_alloc+0xc>)
    c80e:	f7ff fc0f 	bl	c030 <nrfx_flag32_alloc>
}
    c812:	bd08      	pop	{r3, pc}
    c814:	20000238 	.word	0x20000238

0000c818 <nrfx_gpiote_trigger_enable>:
{
    c818:	b538      	push	{r3, r4, r5, lr}
    c81a:	4604      	mov	r4, r0
    c81c:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    c81e:	f7ff fd13 	bl	c248 <pin_in_use_by_te>
    c822:	b300      	cbz	r0, c866 <nrfx_gpiote_trigger_enable+0x4e>
    c824:	4620      	mov	r0, r4
    c826:	f007 fcaf 	bl	14188 <pin_is_input>
    c82a:	b1e0      	cbz	r0, c866 <nrfx_gpiote_trigger_enable+0x4e>
        uint8_t ch = pin_te_get(pin);
    c82c:	4620      	mov	r0, r4
    c82e:	f7ff fd2b 	bl	c288 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    c832:	0083      	lsls	r3, r0, #2
    c834:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    c838:	b29b      	uxth	r3, r3
    c83a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c83e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    c842:	2200      	movs	r2, #0
    c844:	601a      	str	r2, [r3, #0]
    c846:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    c848:	4a10      	ldr	r2, [pc, #64]	; (c88c <nrfx_gpiote_trigger_enable+0x74>)
    c84a:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    c84e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    c852:	f043 0301 	orr.w	r3, r3, #1
    c856:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    c85a:	b1ad      	cbz	r5, c888 <nrfx_gpiote_trigger_enable+0x70>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    c85c:	2301      	movs	r3, #1
    c85e:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    c860:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    c864:	e010      	b.n	c888 <nrfx_gpiote_trigger_enable+0x70>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    c866:	4620      	mov	r0, r4
    c868:	f7ff fd46 	bl	c2f8 <get_initial_sense>
    *p_pin = pin_number & 0x1F;
    c86c:	f004 041f 	and.w	r4, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    c870:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    c874:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    c878:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
    c87c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    c880:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    c884:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
    c888:	bd38      	pop	{r3, r4, r5, pc}
    c88a:	bf00      	nop
    c88c:	40006000 	.word	0x40006000

0000c890 <nrfx_gpiote_trigger_disable>:
{
    c890:	b510      	push	{r4, lr}
    c892:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    c894:	f7ff fcd8 	bl	c248 <pin_in_use_by_te>
    c898:	b1a0      	cbz	r0, c8c4 <nrfx_gpiote_trigger_disable+0x34>
    c89a:	4620      	mov	r0, r4
    c89c:	f007 fc74 	bl	14188 <pin_is_input>
    c8a0:	b180      	cbz	r0, c8c4 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    c8a2:	4620      	mov	r0, r4
    c8a4:	f7ff fcf0 	bl	c288 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    c8a8:	2201      	movs	r2, #1
    c8aa:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    c8ac:	4b0c      	ldr	r3, [pc, #48]	; (c8e0 <nrfx_gpiote_trigger_disable+0x50>)
    c8ae:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    c8b2:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    c8b6:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    c8ba:	f022 0203 	bic.w	r2, r2, #3
    c8be:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    c8c2:	e00b      	b.n	c8dc <nrfx_gpiote_trigger_disable+0x4c>
    *p_pin = pin_number & 0x1F;
    c8c4:	f004 041f 	and.w	r4, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    c8c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    c8cc:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    c8d0:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
    c8d4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    c8d8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
    c8dc:	bd10      	pop	{r4, pc}
    c8de:	bf00      	nop
    c8e0:	40006000 	.word	0x40006000

0000c8e4 <nrfx_gpiote_pin_uninit>:
{
    c8e4:	b510      	push	{r4, lr}
    c8e6:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    c8e8:	f7ff fca4 	bl	c234 <pin_in_use>
    c8ec:	b908      	cbnz	r0, c8f2 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    c8ee:	4809      	ldr	r0, [pc, #36]	; (c914 <nrfx_gpiote_pin_uninit+0x30>)
}
    c8f0:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    c8f2:	4620      	mov	r0, r4
    c8f4:	f7ff ffcc 	bl	c890 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    c8f8:	4620      	mov	r0, r4
    c8fa:	f7ff fd65 	bl	c3c8 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
    c8fe:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
    c902:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    c906:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    c90a:	2202      	movs	r2, #2
    c90c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    return NRFX_SUCCESS;
    c910:	4801      	ldr	r0, [pc, #4]	; (c918 <nrfx_gpiote_pin_uninit+0x34>)
    c912:	e7ed      	b.n	c8f0 <nrfx_gpiote_pin_uninit+0xc>
    c914:	0bad0004 	.word	0x0bad0004
    c918:	0bad0000 	.word	0x0bad0000

0000c91c <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    c91c:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    c91e:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    c920:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    c924:	2100      	movs	r1, #0
    uint32_t status = 0;
    c926:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    c928:	e003      	b.n	c932 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    c92a:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    c92c:	3304      	adds	r3, #4
    c92e:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    c930:	3101      	adds	r1, #1
    c932:	2907      	cmp	r1, #7
    c934:	d814      	bhi.n	c960 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c936:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    c93a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    c93e:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    c940:	2a00      	cmp	r2, #0
    c942:	d0f2      	beq.n	c92a <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    c944:	4a0c      	ldr	r2, [pc, #48]	; (c978 <nrfx_gpiote_irq_handler+0x5c>)
    c946:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    c94a:	4210      	tst	r0, r2
    c94c:	d0ed      	beq.n	c92a <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    c94e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    c952:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    c956:	2500      	movs	r5, #0
    c958:	6015      	str	r5, [r2, #0]
    c95a:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    c95c:	4304      	orrs	r4, r0
    c95e:	e7e4      	b.n	c92a <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c960:	4b05      	ldr	r3, [pc, #20]	; (c978 <nrfx_gpiote_irq_handler+0x5c>)
    c962:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    c966:	b91b      	cbnz	r3, c970 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    c968:	4620      	mov	r0, r4
    c96a:	f7ff fdd3 	bl	c514 <gpiote_evt_handle>
}
    c96e:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    c970:	f7ff fd7c 	bl	c46c <port_event_handle>
    c974:	e7f8      	b.n	c968 <nrfx_gpiote_irq_handler+0x4c>
    c976:	bf00      	nop
    c978:	40006000 	.word	0x40006000

0000c97c <nvmc_readonly_mode_set>:
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
    c97c:	4b02      	ldr	r3, [pc, #8]	; (c988 <nvmc_readonly_mode_set+0xc>)
    c97e:	2200      	movs	r2, #0
    c980:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    c984:	4770      	bx	lr
    c986:	bf00      	nop
    c988:	4001e000 	.word	0x4001e000

0000c98c <nvmc_write_mode_set>:
    c98c:	4b02      	ldr	r3, [pc, #8]	; (c998 <nvmc_write_mode_set+0xc>)
    c98e:	2201      	movs	r2, #1
    c990:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_WRITE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_WRITE);
#endif
}
    c994:	4770      	bx	lr
    c996:	bf00      	nop
    c998:	4001e000 	.word	0x4001e000

0000c99c <nvmc_erase_mode_set>:
    c99c:	4b02      	ldr	r3, [pc, #8]	; (c9a8 <nvmc_erase_mode_set+0xc>)
    c99e:	2202      	movs	r2, #2
    c9a0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_ERASE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_ERASE);
#endif
}
    c9a4:	4770      	bx	lr
    c9a6:	bf00      	nop
    c9a8:	4001e000 	.word	0x4001e000

0000c9ac <nvmc_word_write>:
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    c9ac:	4b04      	ldr	r3, [pc, #16]	; (c9c0 <nvmc_word_write+0x14>)
    c9ae:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
{
#if defined(NRF91_SERIES)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    c9b2:	f013 0f01 	tst.w	r3, #1
    c9b6:	d0f9      	beq.n	c9ac <nvmc_word_write>
    {}
#endif

    *(volatile uint32_t *)addr = value;
    c9b8:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    c9ba:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    c9be:	4770      	bx	lr
    c9c0:	4001e000 	.word	0x4001e000

0000c9c4 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    c9c4:	b510      	push	{r4, lr}
    c9c6:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    c9c8:	f007 fc65 	bl	14296 <is_page_aligned_check>
    c9cc:	b908      	cbnz	r0, c9d2 <nrfx_nvmc_page_erase+0xe>
    {
        return NRFX_ERROR_INVALID_ADDR;
    c9ce:	4808      	ldr	r0, [pc, #32]	; (c9f0 <nrfx_nvmc_page_erase+0x2c>)
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
}
    c9d0:	bd10      	pop	{r4, pc}
    nvmc_erase_mode_set();
    c9d2:	f7ff ffe3 	bl	c99c <nvmc_erase_mode_set>
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
    c9d6:	4b07      	ldr	r3, [pc, #28]	; (c9f4 <nrfx_nvmc_page_erase+0x30>)
    c9d8:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    c9dc:	4b05      	ldr	r3, [pc, #20]	; (c9f4 <nrfx_nvmc_page_erase+0x30>)
    c9de:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    c9e2:	f013 0f01 	tst.w	r3, #1
    c9e6:	d0f9      	beq.n	c9dc <nrfx_nvmc_page_erase+0x18>
    nvmc_readonly_mode_set();
    c9e8:	f7ff ffc8 	bl	c97c <nvmc_readonly_mode_set>
    return NRFX_SUCCESS;
    c9ec:	4802      	ldr	r0, [pc, #8]	; (c9f8 <nrfx_nvmc_page_erase+0x34>)
    c9ee:	e7ef      	b.n	c9d0 <nrfx_nvmc_page_erase+0xc>
    c9f0:	0bad000a 	.word	0x0bad000a
    c9f4:	4001e000 	.word	0x4001e000
    c9f8:	0bad0000 	.word	0x0bad0000

0000c9fc <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
    c9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ca00:	4606      	mov	r6, r0
    ca02:	460d      	mov	r5, r1
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    ca04:	7904      	ldrb	r4, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    ca06:	6807      	ldr	r7, [r0, #0]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    ca08:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    ca0c:	491d      	ldr	r1, [pc, #116]	; (ca84 <nrfx_spi_init+0x88>)
    ca0e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    ca12:	7f09      	ldrb	r1, [r1, #28]
    ca14:	b111      	cbz	r1, ca1c <nrfx_spi_init+0x20>
    {
        err_code = NRFX_ERROR_INVALID_STATE;
        NRFX_LOG_WARNING("Function: %s, error code: %s.",
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    ca16:	481c      	ldr	r0, [pc, #112]	; (ca88 <nrfx_spi_init+0x8c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    ca18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    p_cb->handler = handler;
    ca1c:	f8df 8064 	ldr.w	r8, [pc, #100]	; ca84 <nrfx_spi_init+0x88>
    ca20:	ea4f 09c0 	mov.w	r9, r0, lsl #3
    ca24:	eb08 01c0 	add.w	r1, r8, r0, lsl #3
    ca28:	f848 2009 	str.w	r2, [r8, r9]
    p_cb->p_context = p_context;
    ca2c:	604b      	str	r3, [r1, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    ca2e:	7beb      	ldrb	r3, [r5, #15]
    ca30:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
    p_cb->ss_pin = p_config->ss_pin;
    ca34:	78eb      	ldrb	r3, [r5, #3]
    ca36:	778b      	strb	r3, [r1, #30]
    p_cb->orc = p_config->orc;
    ca38:	796b      	ldrb	r3, [r5, #5]
    ca3a:	77cb      	strb	r3, [r1, #31]
    configure_pins(p_spi, p_config);
    ca3c:	4629      	mov	r1, r5
    ca3e:	4638      	mov	r0, r7
    ca40:	f007 fc62 	bl	14308 <configure_pins>
    nrf_spi_frequency_set(p_spi, p_config->frequency);
    ca44:	68ab      	ldr	r3, [r5, #8]
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    ca46:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
    ca4a:	7b6a      	ldrb	r2, [r5, #13]
    ca4c:	7b29      	ldrb	r1, [r5, #12]
    ca4e:	4638      	mov	r0, r7
    ca50:	f007 fc45 	bl	142de <nrf_spi_configure>
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    ca54:	2301      	movs	r3, #1
    ca56:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
    if (p_cb->handler)
    ca5a:	f858 3009 	ldr.w	r3, [r8, r9]
    ca5e:	b123      	cbz	r3, ca6a <nrfx_spi_init+0x6e>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    ca60:	6830      	ldr	r0, [r6, #0]
    ca62:	f340 3007 	sbfx	r0, r0, #12, #8
    ca66:	f005 ff5d 	bl	12924 <arch_irq_enable>
    p_cb->transfer_in_progress = false;
    ca6a:	4b06      	ldr	r3, [pc, #24]	; (ca84 <nrfx_spi_init+0x88>)
    ca6c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    ca70:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    ca74:	2100      	movs	r1, #0
    ca76:	7751      	strb	r1, [r2, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    ca78:	4613      	mov	r3, r2
    ca7a:	2201      	movs	r2, #1
    ca7c:	771a      	strb	r2, [r3, #28]
    return err_code;
    ca7e:	4803      	ldr	r0, [pc, #12]	; (ca8c <nrfx_spi_init+0x90>)
    ca80:	e7ca      	b.n	ca18 <nrfx_spi_init+0x1c>
    ca82:	bf00      	nop
    ca84:	20003764 	.word	0x20003764
    ca88:	0bad0005 	.word	0x0bad0005
    ca8c:	0bad0000 	.word	0x0bad0000

0000ca90 <nrfx_spi_uninit>:

void nrfx_spi_uninit(nrfx_spi_t const * p_instance)
{
    ca90:	b538      	push	{r3, r4, r5, lr}
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    ca92:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    ca94:	6805      	ldr	r5, [r0, #0]

    if (p_cb->handler)
    ca96:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    ca9a:	4b29      	ldr	r3, [pc, #164]	; (cb40 <nrfx_spi_uninit+0xb0>)
    ca9c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    caa0:	b133      	cbz	r3, cab0 <nrfx_spi_uninit+0x20>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    caa2:	f345 3007 	sbfx	r0, r5, #12, #8
    caa6:	f005 ff42 	bl	1292e <arch_irq_disable>
    p_reg->INTENCLR = mask;
    caaa:	2304      	movs	r3, #4
    caac:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
    cab0:	2300      	movs	r3, #0
    cab2:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        nrf_spi_int_disable(p_spi, NRF_SPI_ALL_INTS_MASK);
    }

    nrf_spi_disable(p_spi);

    if (!p_cb->skip_gpio_cfg)
    cab6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    caba:	4b21      	ldr	r3, [pc, #132]	; (cb40 <nrfx_spi_uninit+0xb0>)
    cabc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    cac0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    cac4:	bba3      	cbnz	r3, cb30 <nrfx_spi_uninit+0xa0>
    return p_reg->PSELSCK;
    cac6:	f8d5 3508 	ldr.w	r3, [r5, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    caca:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    cace:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    cad2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    cad6:	2102      	movs	r1, #2
    cad8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return p_reg->PSELMISO;
    cadc:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
    {
        nrf_gpio_cfg_default(nrf_spi_sck_pin_get(p_spi));

        uint32_t miso_pin = nrf_spi_miso_pin_get(p_spi);
        if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
    cae0:	f1b3 3fff 	cmp.w	r3, #4294967295
    cae4:	d005      	beq.n	caf2 <nrfx_spi_uninit+0x62>
    *p_pin = pin_number & 0x1F;
    cae6:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    caea:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    caee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return p_reg->PSELMOSI;
    caf2:	f8d5 350c 	ldr.w	r3, [r5, #1292]	; 0x50c
        {
            nrf_gpio_cfg_default(miso_pin);
        }

        uint32_t mosi_pin = nrf_spi_mosi_pin_get(p_spi);
        if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
    caf6:	f1b3 3fff 	cmp.w	r3, #4294967295
    cafa:	d008      	beq.n	cb0e <nrfx_spi_uninit+0x7e>
    *p_pin = pin_number & 0x1F;
    cafc:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    cb00:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    cb04:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    cb08:	2102      	movs	r1, #2
    cb0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        {
            nrf_gpio_cfg_default(mosi_pin);
        }

        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    cb0e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    cb12:	4b0b      	ldr	r3, [pc, #44]	; (cb40 <nrfx_spi_uninit+0xb0>)
    cb14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    cb18:	7f9b      	ldrb	r3, [r3, #30]
    cb1a:	2bff      	cmp	r3, #255	; 0xff
    cb1c:	d008      	beq.n	cb30 <nrfx_spi_uninit+0xa0>
    *p_pin = pin_number & 0x1F;
    cb1e:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    cb22:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    cb26:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    cb2a:	2102      	movs	r1, #2
    cb2c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    cb30:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    cb34:	4b02      	ldr	r3, [pc, #8]	; (cb40 <nrfx_spi_uninit+0xb0>)
    cb36:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    cb3a:	2200      	movs	r2, #0
    cb3c:	771a      	strb	r2, [r3, #28]
}
    cb3e:	bd38      	pop	{r3, r4, r5, pc}
    cb40:	20003764 	.word	0x20003764

0000cb44 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    cb44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    cb48:	f890 c004 	ldrb.w	ip, [r0, #4]
    cb4c:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
    cb50:	4d1e      	ldr	r5, [pc, #120]	; (cbcc <nrfx_spi_xfer+0x88>)
    cb52:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    cb56:	7f6b      	ldrb	r3, [r5, #29]
    cb58:	bbb3      	cbnz	r3, cbc8 <nrfx_spi_xfer+0x84>
    cb5a:	4604      	mov	r4, r0
    cb5c:	468e      	mov	lr, r1
    cb5e:	4617      	mov	r7, r2
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
    cb60:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
    cb64:	4a19      	ldr	r2, [pc, #100]	; (cbcc <nrfx_spi_xfer+0x88>)
    cb66:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    cb6a:	b10b      	cbz	r3, cb70 <nrfx_spi_xfer+0x2c>
        {
            p_cb->transfer_in_progress = true;
    cb6c:	2201      	movs	r2, #1
    cb6e:	776a      	strb	r2, [r5, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    cb70:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
    cb74:	4e15      	ldr	r6, [pc, #84]	; (cbcc <nrfx_spi_xfer+0x88>)
    cb76:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
    cb7a:	f106 080c 	add.w	r8, r6, #12
    cb7e:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
    cb82:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
    p_cb->abort = false;
    cb86:	2300      	movs	r3, #0
    cb88:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    cb8c:	7fb3      	ldrb	r3, [r6, #30]
    cb8e:	2bff      	cmp	r3, #255	; 0xff
    cb90:	d008      	beq.n	cba4 <nrfx_spi_xfer+0x60>
    *p_pin = pin_number & 0x1F;
    cb92:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    cb96:	2201      	movs	r2, #1
    cb98:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTCLR = clr_mask;
    cb9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    cba0:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    {
        nrf_gpio_pin_write(p_cb->ss_pin, 0);
    }
    if (flags)
    cba4:	b14f      	cbz	r7, cbba <nrfx_spi_xfer+0x76>
    {
        p_cb->transfer_in_progress = false;
    cba6:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
    cbaa:	4b08      	ldr	r3, [pc, #32]	; (cbcc <nrfx_spi_xfer+0x88>)
    cbac:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
    cbb0:	2200      	movs	r2, #0
    cbb2:	775a      	strb	r2, [r3, #29]
        err_code = NRFX_ERROR_NOT_SUPPORTED;
    cbb4:	4806      	ldr	r0, [pc, #24]	; (cbd0 <nrfx_spi_xfer+0x8c>)
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    cbb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
    cbba:	4672      	mov	r2, lr
    cbbc:	4629      	mov	r1, r5
    cbbe:	6820      	ldr	r0, [r4, #0]
    cbc0:	f007 fc7d 	bl	144be <spi_xfer>
    nrfx_err_t err_code = NRFX_SUCCESS;
    cbc4:	4803      	ldr	r0, [pc, #12]	; (cbd4 <nrfx_spi_xfer+0x90>)
    cbc6:	e7f6      	b.n	cbb6 <nrfx_spi_xfer+0x72>
        return err_code;
    cbc8:	4803      	ldr	r0, [pc, #12]	; (cbd8 <nrfx_spi_xfer+0x94>)
    cbca:	e7f4      	b.n	cbb6 <nrfx_spi_xfer+0x72>
    cbcc:	20003764 	.word	0x20003764
    cbd0:	0bad0003 	.word	0x0bad0003
    cbd4:	0bad0000 	.word	0x0bad0000
    cbd8:	0bad000b 	.word	0x0bad000b

0000cbdc <nrfx_spi_1_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
    cbdc:	b508      	push	{r3, lr}
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
    cbde:	4903      	ldr	r1, [pc, #12]	; (cbec <nrfx_spi_1_irq_handler+0x10>)
    cbe0:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    cbe4:	f007 fcaf 	bl	14546 <irq_handler>
}
    cbe8:	bd08      	pop	{r3, pc}
    cbea:	bf00      	nop
    cbec:	20003764 	.word	0x20003764

0000cbf0 <nrfx_spi_2_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_SPI2_ENABLED)
void nrfx_spi_2_irq_handler(void)
{
    cbf0:	b508      	push	{r3, lr}
    irq_handler(NRF_SPI2, &m_cb[NRFX_SPI2_INST_IDX]);
    cbf2:	4902      	ldr	r1, [pc, #8]	; (cbfc <nrfx_spi_2_irq_handler+0xc>)
    cbf4:	4802      	ldr	r0, [pc, #8]	; (cc00 <nrfx_spi_2_irq_handler+0x10>)
    cbf6:	f007 fca6 	bl	14546 <irq_handler>
}
    cbfa:	bd08      	pop	{r3, pc}
    cbfc:	2000378c 	.word	0x2000378c
    cc00:	40023000 	.word	0x40023000

0000cc04 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    cc04:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    cc06:	4c11      	ldr	r4, [pc, #68]	; (cc4c <_DoInit+0x48>)
    cc08:	2303      	movs	r3, #3
    cc0a:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    cc0c:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    cc0e:	4a10      	ldr	r2, [pc, #64]	; (cc50 <_DoInit+0x4c>)
    cc10:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    cc12:	4b10      	ldr	r3, [pc, #64]	; (cc54 <_DoInit+0x50>)
    cc14:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    cc16:	f44f 6380 	mov.w	r3, #1024	; 0x400
    cc1a:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    cc1c:	2300      	movs	r3, #0
    cc1e:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    cc20:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    cc22:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    cc24:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    cc26:	4a0c      	ldr	r2, [pc, #48]	; (cc58 <_DoInit+0x54>)
    cc28:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    cc2a:	2210      	movs	r2, #16
    cc2c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    cc2e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    cc30:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    cc32:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    cc34:	4909      	ldr	r1, [pc, #36]	; (cc5c <_DoInit+0x58>)
    cc36:	1de0      	adds	r0, r4, #7
    cc38:	f006 f820 	bl	12c7c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    cc3c:	4908      	ldr	r1, [pc, #32]	; (cc60 <_DoInit+0x5c>)
    cc3e:	4620      	mov	r0, r4
    cc40:	f006 f81c 	bl	12c7c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    cc44:	2320      	movs	r3, #32
    cc46:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    cc48:	bd10      	pop	{r4, pc}
    cc4a:	bf00      	nop
    cc4c:	20003bc4 	.word	0x20003bc4
    cc50:	00018c24 	.word	0x00018c24
    cc54:	200037c4 	.word	0x200037c4
    cc58:	200037b4 	.word	0x200037b4
    cc5c:	00018c30 	.word	0x00018c30
    cc60:	00018c34 	.word	0x00018c34

0000cc64 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    cc64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cc68:	4604      	mov	r4, r0
    cc6a:	460e      	mov	r6, r1
    cc6c:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    cc6e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    cc72:	4a2d      	ldr	r2, [pc, #180]	; (cd28 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    cc74:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    cc78:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    cc7a:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    cc7c:	42bb      	cmp	r3, r7
    cc7e:	d84c      	bhi.n	cd1a <SEGGER_RTT_WriteSkipNoLock+0xb6>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    cc80:	eb00 0140 	add.w	r1, r0, r0, lsl #1
    cc84:	4a28      	ldr	r2, [pc, #160]	; (cd28 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    cc86:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    cc8a:	f8d2 8020 	ldr.w	r8, [r2, #32]
    cc8e:	eba8 0907 	sub.w	r9, r8, r7
    cc92:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    cc96:	4295      	cmp	r5, r2
    cc98:	d904      	bls.n	cca4 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    cc9a:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    cc9c:	429d      	cmp	r5, r3
    cc9e:	d916      	bls.n	ccce <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    cca0:	2000      	movs	r0, #0
    cca2:	e03f      	b.n	cd24 <SEGGER_RTT_WriteSkipNoLock+0xc0>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    cca4:	f8df 8080 	ldr.w	r8, [pc, #128]	; cd28 <SEGGER_RTT_WriteSkipNoLock+0xc4>
    cca8:	1c63      	adds	r3, r4, #1
    ccaa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    ccae:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    ccb2:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    ccb4:	462a      	mov	r2, r5
    ccb6:	4631      	mov	r1, r6
    ccb8:	4438      	add	r0, r7
    ccba:	f006 f866 	bl	12d8a <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    ccbe:	442f      	add	r7, r5
    ccc0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    ccc4:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
    ccc8:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    ccca:	2001      	movs	r0, #1
    cccc:	e02a      	b.n	cd24 <SEGGER_RTT_WriteSkipNoLock+0xc0>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    ccce:	1c43      	adds	r3, r0, #1
    ccd0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    ccd4:	4a14      	ldr	r2, [pc, #80]	; (cd28 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    ccd6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    ccda:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    ccdc:	464a      	mov	r2, r9
    ccde:	4631      	mov	r1, r6
    cce0:	4438      	add	r0, r7
    cce2:	f006 f852 	bl	12d8a <memcpy>
      NumBytes -= Rem;
    cce6:	eba7 0808 	sub.w	r8, r7, r8
      if (NumBytes) {
    ccea:	eb18 0505 	adds.w	r5, r8, r5
    ccee:	d107      	bne.n	cd00 <SEGGER_RTT_WriteSkipNoLock+0x9c>
      pRing->WrOff = NumBytes;
    ccf0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    ccf4:	4b0c      	ldr	r3, [pc, #48]	; (cd28 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    ccf6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    ccfa:	625d      	str	r5, [r3, #36]	; 0x24
      return 1;
    ccfc:	2001      	movs	r0, #1
    ccfe:	e011      	b.n	cd24 <SEGGER_RTT_WriteSkipNoLock+0xc0>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    cd00:	1c63      	adds	r3, r4, #1
    cd02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    cd06:	4a08      	ldr	r2, [pc, #32]	; (cd28 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    cd08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
    cd0c:	462a      	mov	r2, r5
    cd0e:	eb06 0109 	add.w	r1, r6, r9
    cd12:	6858      	ldr	r0, [r3, #4]
    cd14:	f006 f839 	bl	12d8a <memcpy>
    cd18:	e7ea      	b.n	ccf0 <SEGGER_RTT_WriteSkipNoLock+0x8c>
    Avail = RdOff - WrOff - 1u;
    cd1a:	1bdb      	subs	r3, r3, r7
    cd1c:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    cd1e:	42ab      	cmp	r3, r5
    cd20:	d2c0      	bcs.n	cca4 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    cd22:	2000      	movs	r0, #0
}
    cd24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cd28:	20003bc4 	.word	0x20003bc4

0000cd2c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    cd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cd2e:	460f      	mov	r7, r1
    cd30:	4616      	mov	r6, r2
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    cd32:	1c45      	adds	r5, r0, #1
    cd34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    cd38:	4b16      	ldr	r3, [pc, #88]	; (cd94 <SEGGER_RTT_WriteNoLock+0x68>)
    cd3a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    cd3e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    cd42:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    cd46:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    cd48:	2c01      	cmp	r4, #1
    cd4a:	d011      	beq.n	cd70 <SEGGER_RTT_WriteNoLock+0x44>
    cd4c:	2c02      	cmp	r4, #2
    cd4e:	d01c      	beq.n	cd8a <SEGGER_RTT_WriteNoLock+0x5e>
    cd50:	b114      	cbz	r4, cd58 <SEGGER_RTT_WriteNoLock+0x2c>
    cd52:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
    cd54:	4620      	mov	r0, r4
    cd56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    cd58:	4628      	mov	r0, r5
    cd5a:	f007 fc03 	bl	14564 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    cd5e:	4286      	cmp	r6, r0
    cd60:	d8f8      	bhi.n	cd54 <SEGGER_RTT_WriteNoLock+0x28>
      _WriteNoCheck(pRing, pData, NumBytes);
    cd62:	4632      	mov	r2, r6
    cd64:	4639      	mov	r1, r7
    cd66:	4628      	mov	r0, r5
    cd68:	f007 fc08 	bl	1457c <_WriteNoCheck>
      Status = NumBytes;
    cd6c:	4634      	mov	r4, r6
    cd6e:	e7f1      	b.n	cd54 <SEGGER_RTT_WriteNoLock+0x28>
    Avail = _GetAvailWriteSpace(pRing);
    cd70:	4628      	mov	r0, r5
    cd72:	f007 fbf7 	bl	14564 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    cd76:	4634      	mov	r4, r6
    cd78:	4286      	cmp	r6, r0
    cd7a:	bf28      	it	cs
    cd7c:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    cd7e:	4622      	mov	r2, r4
    cd80:	4639      	mov	r1, r7
    cd82:	4628      	mov	r0, r5
    cd84:	f007 fbfa 	bl	1457c <_WriteNoCheck>
    break;
    cd88:	e7e4      	b.n	cd54 <SEGGER_RTT_WriteNoLock+0x28>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    cd8a:	4628      	mov	r0, r5
    cd8c:	f007 fc18 	bl	145c0 <_WriteBlocking>
    cd90:	4604      	mov	r4, r0
    break;
    cd92:	e7df      	b.n	cd54 <SEGGER_RTT_WriteNoLock+0x28>
    cd94:	20003bc4 	.word	0x20003bc4

0000cd98 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    cd98:	4b06      	ldr	r3, [pc, #24]	; (cdb4 <SEGGER_RTT_HasDataUp+0x1c>)
    cd9a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    cd9e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    cda2:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    cda4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    cda8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    cdac:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    cdae:	1a80      	subs	r0, r0, r2
    cdb0:	4770      	bx	lr
    cdb2:	bf00      	nop
    cdb4:	20003bc4 	.word	0x20003bc4

0000cdb8 <zephyr_rtt_mutex_lock>:
}

#ifdef CONFIG_MULTITHREADING

void zephyr_rtt_mutex_lock(void)
{
    cdb8:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    cdba:	f04f 32ff 	mov.w	r2, #4294967295
    cdbe:	f04f 33ff 	mov.w	r3, #4294967295
    cdc2:	4802      	ldr	r0, [pc, #8]	; (cdcc <zephyr_rtt_mutex_lock+0x14>)
    cdc4:	f000 fc70 	bl	d6a8 <z_impl_k_mutex_lock>
	k_mutex_lock(&rtt_term_mutex, K_FOREVER);
}
    cdc8:	bd08      	pop	{r3, pc}
    cdca:	bf00      	nop
    cdcc:	2000031c 	.word	0x2000031c

0000cdd0 <zephyr_rtt_mutex_unlock>:

void zephyr_rtt_mutex_unlock(void)
{
    cdd0:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
    cdd2:	4802      	ldr	r0, [pc, #8]	; (cddc <zephyr_rtt_mutex_unlock+0xc>)
    cdd4:	f000 fcec 	bl	d7b0 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&rtt_term_mutex);
}
    cdd8:	bd08      	pop	{r3, pc}
    cdda:	bf00      	nop
    cddc:	2000031c 	.word	0x2000031c

0000cde0 <device_visitor>:

static int device_visitor(const device_handle_t *handles,
			   size_t handle_count,
			   device_visitor_callback_t visitor_cb,
			   void *context)
{
    cde0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cde4:	4681      	mov	r9, r0
    cde6:	460e      	mov	r6, r1
    cde8:	4690      	mov	r8, r2
    cdea:	461f      	mov	r7, r3
	/* Iterate over fixed devices */
	for (size_t i = 0; i < handle_count; ++i) {
    cdec:	2500      	movs	r5, #0
    cdee:	e007      	b.n	ce00 <device_visitor+0x20>
	const struct device *dev = NULL;
    cdf0:	2000      	movs	r0, #0
    cdf2:	e000      	b.n	cdf6 <device_visitor+0x16>
    cdf4:	2000      	movs	r0, #0
		device_handle_t dh = handles[i];
		const struct device *rdev = device_from_handle(dh);
		int rc = visitor_cb(rdev, context);
    cdf6:	4639      	mov	r1, r7
    cdf8:	47c0      	blx	r8

		if (rc < 0) {
    cdfa:	2800      	cmp	r0, #0
    cdfc:	db19      	blt.n	ce32 <device_visitor+0x52>
	for (size_t i = 0; i < handle_count; ++i) {
    cdfe:	3501      	adds	r5, #1
    ce00:	42b5      	cmp	r5, r6
    ce02:	d215      	bcs.n	ce30 <device_visitor+0x50>
		device_handle_t dh = handles[i];
    ce04:	f939 0015 	ldrsh.w	r0, [r9, r5, lsl #1]
	size_t numdev = __device_end - __device_start;
    ce08:	4c0b      	ldr	r4, [pc, #44]	; (ce38 <device_visitor+0x58>)
    ce0a:	4b0c      	ldr	r3, [pc, #48]	; (ce3c <device_visitor+0x5c>)
    ce0c:	eba4 0c03 	sub.w	ip, r4, r3
    ce10:	ea4f 0cac 	mov.w	ip, ip, asr #2
    ce14:	4b0a      	ldr	r3, [pc, #40]	; (ce40 <device_visitor+0x60>)
    ce16:	fb03 fc0c 	mul.w	ip, r3, ip
	if ((dev_handle > 0) && ((size_t)dev_handle <= numdev)) {
    ce1a:	2800      	cmp	r0, #0
    ce1c:	dde8      	ble.n	cdf0 <device_visitor+0x10>
    ce1e:	4584      	cmp	ip, r0
    ce20:	d3e8      	bcc.n	cdf4 <device_visitor+0x14>
		dev = &__device_start[dev_handle - 1];
    ce22:	3801      	subs	r0, #1
    ce24:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    ce28:	4b04      	ldr	r3, [pc, #16]	; (ce3c <device_visitor+0x5c>)
    ce2a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    ce2e:	e7e2      	b.n	cdf6 <device_visitor+0x16>
			return rc;
		}
	}

	return handle_count;
    ce30:	4630      	mov	r0, r6
}
    ce32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ce36:	bf00      	nop
    ce38:	00015190 	.word	0x00015190
    ce3c:	000150e8 	.word	0x000150e8
    ce40:	b6db6db7 	.word	0xb6db6db7

0000ce44 <z_device_state_init>:
	const struct device *dev = __device_start;
    ce44:	4b03      	ldr	r3, [pc, #12]	; (ce54 <z_device_state_init+0x10>)
	while (dev < __device_end) {
    ce46:	e000      	b.n	ce4a <z_device_state_init+0x6>
		++dev;
    ce48:	331c      	adds	r3, #28
	while (dev < __device_end) {
    ce4a:	4a03      	ldr	r2, [pc, #12]	; (ce58 <z_device_state_init+0x14>)
    ce4c:	4293      	cmp	r3, r2
    ce4e:	d3fb      	bcc.n	ce48 <z_device_state_init+0x4>
}
    ce50:	4770      	bx	lr
    ce52:	bf00      	nop
    ce54:	000150e8 	.word	0x000150e8
    ce58:	00015190 	.word	0x00015190

0000ce5c <z_device_get_all_static>:
	*devices = __device_start;
    ce5c:	4a04      	ldr	r2, [pc, #16]	; (ce70 <z_device_get_all_static+0x14>)
    ce5e:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
    ce60:	4b04      	ldr	r3, [pc, #16]	; (ce74 <z_device_get_all_static+0x18>)
    ce62:	1a9b      	subs	r3, r3, r2
    ce64:	109b      	asrs	r3, r3, #2
}
    ce66:	4804      	ldr	r0, [pc, #16]	; (ce78 <z_device_get_all_static+0x1c>)
    ce68:	fb03 f000 	mul.w	r0, r3, r0
    ce6c:	4770      	bx	lr
    ce6e:	bf00      	nop
    ce70:	000150e8 	.word	0x000150e8
    ce74:	00015190 	.word	0x00015190
    ce78:	b6db6db7 	.word	0xb6db6db7

0000ce7c <z_impl_device_get_binding>:
{
    ce7c:	b538      	push	{r3, r4, r5, lr}
	if ((name == NULL) || (name[0] == '\0')) {
    ce7e:	4605      	mov	r5, r0
    ce80:	b328      	cbz	r0, cece <z_impl_device_get_binding+0x52>
    ce82:	7803      	ldrb	r3, [r0, #0]
    ce84:	b32b      	cbz	r3, ced2 <z_impl_device_get_binding+0x56>
	for (dev = __device_start; dev != __device_end; dev++) {
    ce86:	4c14      	ldr	r4, [pc, #80]	; (ced8 <z_impl_device_get_binding+0x5c>)
    ce88:	e000      	b.n	ce8c <z_impl_device_get_binding+0x10>
    ce8a:	341c      	adds	r4, #28
    ce8c:	4b13      	ldr	r3, [pc, #76]	; (cedc <z_impl_device_get_binding+0x60>)
    ce8e:	429c      	cmp	r4, r3
    ce90:	d008      	beq.n	cea4 <z_impl_device_get_binding+0x28>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    ce92:	4620      	mov	r0, r4
    ce94:	f007 fbcc 	bl	14630 <z_device_is_ready>
    ce98:	2800      	cmp	r0, #0
    ce9a:	d0f6      	beq.n	ce8a <z_impl_device_get_binding+0xe>
    ce9c:	6823      	ldr	r3, [r4, #0]
    ce9e:	42ab      	cmp	r3, r5
    cea0:	d1f3      	bne.n	ce8a <z_impl_device_get_binding+0xe>
    cea2:	e012      	b.n	ceca <z_impl_device_get_binding+0x4e>
	for (dev = __device_start; dev != __device_end; dev++) {
    cea4:	4c0c      	ldr	r4, [pc, #48]	; (ced8 <z_impl_device_get_binding+0x5c>)
    cea6:	e000      	b.n	ceaa <z_impl_device_get_binding+0x2e>
    cea8:	341c      	adds	r4, #28
    ceaa:	4b0c      	ldr	r3, [pc, #48]	; (cedc <z_impl_device_get_binding+0x60>)
    ceac:	429c      	cmp	r4, r3
    ceae:	d00b      	beq.n	cec8 <z_impl_device_get_binding+0x4c>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    ceb0:	4620      	mov	r0, r4
    ceb2:	f007 fbbd 	bl	14630 <z_device_is_ready>
    ceb6:	2800      	cmp	r0, #0
    ceb8:	d0f6      	beq.n	cea8 <z_impl_device_get_binding+0x2c>
    ceba:	6821      	ldr	r1, [r4, #0]
    cebc:	4628      	mov	r0, r5
    cebe:	f005 ff21 	bl	12d04 <strcmp>
    cec2:	2800      	cmp	r0, #0
    cec4:	d1f0      	bne.n	cea8 <z_impl_device_get_binding+0x2c>
    cec6:	e000      	b.n	ceca <z_impl_device_get_binding+0x4e>
	return NULL;
    cec8:	2400      	movs	r4, #0
}
    ceca:	4620      	mov	r0, r4
    cecc:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    cece:	4604      	mov	r4, r0
    ced0:	e7fb      	b.n	ceca <z_impl_device_get_binding+0x4e>
    ced2:	2400      	movs	r4, #0
    ced4:	e7f9      	b.n	ceca <z_impl_device_get_binding+0x4e>
    ced6:	bf00      	nop
    ced8:	000150e8 	.word	0x000150e8
    cedc:	00015190 	.word	0x00015190

0000cee0 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    cee0:	4b01      	ldr	r3, [pc, #4]	; (cee8 <z_impl_z_errno+0x8>)
    cee2:	6898      	ldr	r0, [r3, #8]
}
    cee4:	3098      	adds	r0, #152	; 0x98
    cee6:	4770      	bx	lr
    cee8:	20003c6c 	.word	0x20003c6c

0000ceec <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    ceec:	2804      	cmp	r0, #4
    ceee:	d80c      	bhi.n	cf0a <reason_to_str+0x1e>
    cef0:	e8df f000 	tbb	[pc, r0]
    cef4:	07050d03 	.word	0x07050d03
    cef8:	09          	.byte	0x09
    cef9:	00          	.byte	0x00
    cefa:	4806      	ldr	r0, [pc, #24]	; (cf14 <reason_to_str+0x28>)
    cefc:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
    cefe:	4806      	ldr	r0, [pc, #24]	; (cf18 <reason_to_str+0x2c>)
    cf00:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
    cf02:	4806      	ldr	r0, [pc, #24]	; (cf1c <reason_to_str+0x30>)
    cf04:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    cf06:	4806      	ldr	r0, [pc, #24]	; (cf20 <reason_to_str+0x34>)
    cf08:	4770      	bx	lr
	default:
		return "Unknown error";
    cf0a:	4806      	ldr	r0, [pc, #24]	; (cf24 <reason_to_str+0x38>)
    cf0c:	4770      	bx	lr
		return "Unhandled interrupt";
    cf0e:	4806      	ldr	r0, [pc, #24]	; (cf28 <reason_to_str+0x3c>)
	}
}
    cf10:	4770      	bx	lr
    cf12:	bf00      	nop
    cf14:	00018c40 	.word	0x00018c40
    cf18:	00018c64 	.word	0x00018c64
    cf1c:	00018c74 	.word	0x00018c74
    cf20:	00018c80 	.word	0x00018c80
    cf24:	00018c90 	.word	0x00018c90
    cf28:	00018c50 	.word	0x00018c50

0000cf2c <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    cf2c:	b130      	cbz	r0, cf3c <thread_name_get+0x10>
{
    cf2e:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    cf30:	f007 fbd6 	bl	146e0 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    cf34:	b120      	cbz	r0, cf40 <thread_name_get+0x14>
    cf36:	7803      	ldrb	r3, [r0, #0]
    cf38:	b123      	cbz	r3, cf44 <thread_name_get+0x18>
}
    cf3a:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    cf3c:	4802      	ldr	r0, [pc, #8]	; (cf48 <thread_name_get+0x1c>)
}
    cf3e:	4770      	bx	lr
		thread_name = "unknown";
    cf40:	4801      	ldr	r0, [pc, #4]	; (cf48 <thread_name_get+0x1c>)
    cf42:	e7fa      	b.n	cf3a <thread_name_get+0xe>
    cf44:	4800      	ldr	r0, [pc, #0]	; (cf48 <thread_name_get+0x1c>)
	return thread_name;
    cf46:	e7f8      	b.n	cf3a <thread_name_get+0xe>
    cf48:	000185c4 	.word	0x000185c4

0000cf4c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    cf4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cf50:	b089      	sub	sp, #36	; 0x24
    cf52:	af00      	add	r7, sp, #0
    cf54:	4605      	mov	r5, r0
    cf56:	460c      	mov	r4, r1
	__asm__ volatile(
    cf58:	f04f 0320 	mov.w	r3, #32
    cf5c:	f3ef 8811 	mrs	r8, BASEPRI
    cf60:	f383 8812 	msr	BASEPRI_MAX, r3
    cf64:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    cf68:	f001 f85a 	bl	e020 <z_impl_z_current_get>
    cf6c:	4606      	mov	r6, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    cf6e:	4b84      	ldr	r3, [pc, #528]	; (d180 <z_fatal_error+0x234>)
    cf70:	681b      	ldr	r3, [r3, #0]
    cf72:	f013 0f07 	tst.w	r3, #7
    cf76:	d061      	beq.n	d03c <z_fatal_error+0xf0>
    cf78:	4628      	mov	r0, r5
    cf7a:	f7ff ffb7 	bl	ceec <reason_to_str>
    cf7e:	46e9      	mov	r9, sp
    cf80:	2301      	movs	r3, #1
    cf82:	713b      	strb	r3, [r7, #4]
    cf84:	2303      	movs	r3, #3
    cf86:	717b      	strb	r3, [r7, #5]
    cf88:	b08a      	sub	sp, #40	; 0x28
    cf8a:	46ec      	mov	ip, sp
    cf8c:	f11c 0210 	adds.w	r2, ip, #16
    cf90:	d021      	beq.n	cfd6 <z_fatal_error+0x8a>
    cf92:	f04f 0e16 	mov.w	lr, #22
    cf96:	b152      	cbz	r2, cfae <z_fatal_error+0x62>
    cf98:	4673      	mov	r3, lr
    cf9a:	f1be 0f04 	cmp.w	lr, #4
    cf9e:	dd02      	ble.n	cfa6 <z_fatal_error+0x5a>
    cfa0:	4978      	ldr	r1, [pc, #480]	; (d184 <z_fatal_error+0x238>)
    cfa2:	f8cc 1014 	str.w	r1, [ip, #20]
    cfa6:	2b08      	cmp	r3, #8
    cfa8:	dd01      	ble.n	cfae <z_fatal_error+0x62>
    cfaa:	f8cc 5018 	str.w	r5, [ip, #24]
    cfae:	2301      	movs	r3, #1
    cfb0:	703b      	strb	r3, [r7, #0]
    cfb2:	2303      	movs	r3, #3
    cfb4:	707b      	strb	r3, [r7, #1]
    cfb6:	b1da      	cbz	r2, cff0 <z_fatal_error+0xa4>
    cfb8:	4673      	mov	r3, lr
    cfba:	f1be 0f0c 	cmp.w	lr, #12
    cfbe:	dd01      	ble.n	cfc4 <z_fatal_error+0x78>
    cfc0:	f8cc 001c 	str.w	r0, [ip, #28]
    cfc4:	2b10      	cmp	r3, #16
    cfc6:	dd02      	ble.n	cfce <z_fatal_error+0x82>
    cfc8:	2300      	movs	r3, #0
    cfca:	f8cc 3020 	str.w	r3, [ip, #32]
    cfce:	f10c 0324 	add.w	r3, ip, #36	; 0x24
    cfd2:	2100      	movs	r1, #0
    cfd4:	e00a      	b.n	cfec <z_fatal_error+0xa0>
    cfd6:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
    cfda:	e7dc      	b.n	cf96 <z_fatal_error+0x4a>
    cfdc:	f101 0020 	add.w	r0, r1, #32
    cfe0:	4438      	add	r0, r7
    cfe2:	f810 0c20 	ldrb.w	r0, [r0, #-32]
    cfe6:	f803 0b01 	strb.w	r0, [r3], #1
    cfea:	3101      	adds	r1, #1
    cfec:	2901      	cmp	r1, #1
    cfee:	d9f5      	bls.n	cfdc <z_fatal_error+0x90>
    cff0:	f1be 0f15 	cmp.w	lr, #21
    cff4:	dd40      	ble.n	d078 <z_fatal_error+0x12c>
    cff6:	2316      	movs	r3, #22
    cff8:	b14a      	cbz	r2, d00e <z_fatal_error+0xc2>
    cffa:	2105      	movs	r1, #5
    cffc:	7139      	strb	r1, [r7, #4]
    cffe:	2100      	movs	r1, #0
    d000:	7179      	strb	r1, [r7, #5]
    d002:	71b9      	strb	r1, [r7, #6]
    d004:	2101      	movs	r1, #1
    d006:	71f9      	strb	r1, [r7, #7]
    d008:	6878      	ldr	r0, [r7, #4]
    d00a:	f8cc 0010 	str.w	r0, [ip, #16]
    d00e:	2100      	movs	r1, #0
    d010:	f36f 0100 	bfc	r1, #0, #1
    d014:	f36f 0141 	bfc	r1, #1, #1
    d018:	f36f 0182 	bfc	r1, #2, #1
    d01c:	f36f 01c5 	bfc	r1, #3, #3
    d020:	2001      	movs	r0, #1
    d022:	f360 1188 	bfi	r1, r0, #6, #3
    d026:	f3c3 030a 	ubfx	r3, r3, #0, #11
    d02a:	f363 2153 	bfi	r1, r3, #9, #11
    d02e:	f36f 511f 	bfc	r1, #20, #12
    d032:	2300      	movs	r3, #0
    d034:	4852      	ldr	r0, [pc, #328]	; (d180 <z_fatal_error+0x234>)
    d036:	f7f7 fc71 	bl	491c <z_impl_z_log_msg_static_create>
    d03a:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    d03c:	b144      	cbz	r4, d050 <z_fatal_error+0x104>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    d03e:	69e3      	ldr	r3, [r4, #28]
    d040:	f3c3 0308 	ubfx	r3, r3, #0, #9
    d044:	b123      	cbz	r3, d050 <z_fatal_error+0x104>
		LOG_ERR("Fault during interrupt handling\n");
    d046:	4b4e      	ldr	r3, [pc, #312]	; (d180 <z_fatal_error+0x234>)
    d048:	681b      	ldr	r3, [r3, #0]
    d04a:	f013 0f07 	tst.w	r3, #7
    d04e:	d116      	bne.n	d07e <z_fatal_error+0x132>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    d050:	4b4b      	ldr	r3, [pc, #300]	; (d180 <z_fatal_error+0x234>)
    d052:	681b      	ldr	r3, [r3, #0]
    d054:	f013 0f07 	tst.w	r3, #7
    d058:	d132      	bne.n	d0c0 <z_fatal_error+0x174>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    d05a:	4621      	mov	r1, r4
    d05c:	4628      	mov	r0, r5
    d05e:	f7fe fe9f 	bl	bda0 <k_sys_fatal_error_handler>
	__asm__ volatile(
    d062:	f388 8811 	msr	BASEPRI, r8
    d066:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    d06a:	4630      	mov	r0, r6
    d06c:	f7fb ffd6 	bl	901c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    d070:	3724      	adds	r7, #36	; 0x24
    d072:	46bd      	mov	sp, r7
    d074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    d078:	f06f 031b 	mvn.w	r3, #27
    d07c:	e7bc      	b.n	cff8 <z_fatal_error+0xac>
		LOG_ERR("Fault during interrupt handling\n");
    d07e:	4b42      	ldr	r3, [pc, #264]	; (d188 <z_fatal_error+0x23c>)
    d080:	61fb      	str	r3, [r7, #28]
    d082:	2302      	movs	r3, #2
    d084:	713b      	strb	r3, [r7, #4]
    d086:	2300      	movs	r3, #0
    d088:	717b      	strb	r3, [r7, #5]
    d08a:	71bb      	strb	r3, [r7, #6]
    d08c:	71fb      	strb	r3, [r7, #7]
    d08e:	687a      	ldr	r2, [r7, #4]
    d090:	61ba      	str	r2, [r7, #24]
    d092:	4619      	mov	r1, r3
    d094:	f363 0100 	bfi	r1, r3, #0, #1
    d098:	f363 0141 	bfi	r1, r3, #1, #1
    d09c:	f363 0182 	bfi	r1, r3, #2, #1
    d0a0:	f363 01c5 	bfi	r1, r3, #3, #3
    d0a4:	2201      	movs	r2, #1
    d0a6:	f362 1188 	bfi	r1, r2, #6, #3
    d0aa:	2208      	movs	r2, #8
    d0ac:	f362 2153 	bfi	r1, r2, #9, #11
    d0b0:	f363 511f 	bfi	r1, r3, #20, #12
    d0b4:	f107 0218 	add.w	r2, r7, #24
    d0b8:	4831      	ldr	r0, [pc, #196]	; (d180 <z_fatal_error+0x234>)
    d0ba:	f7f7 fc2f 	bl	491c <z_impl_z_log_msg_static_create>
    d0be:	e7c7      	b.n	d050 <z_fatal_error+0x104>
	LOG_ERR("Current thread: %p (%s)", thread,
    d0c0:	4630      	mov	r0, r6
    d0c2:	f7ff ff33 	bl	cf2c <thread_name_get>
    d0c6:	46e9      	mov	r9, sp
    d0c8:	2301      	movs	r3, #1
    d0ca:	713b      	strb	r3, [r7, #4]
    d0cc:	2303      	movs	r3, #3
    d0ce:	717b      	strb	r3, [r7, #5]
    d0d0:	b08a      	sub	sp, #40	; 0x28
    d0d2:	46ec      	mov	ip, sp
    d0d4:	f11c 0210 	adds.w	r2, ip, #16
    d0d8:	d025      	beq.n	d126 <z_fatal_error+0x1da>
    d0da:	f04f 0e12 	mov.w	lr, #18
    d0de:	b152      	cbz	r2, d0f6 <z_fatal_error+0x1aa>
    d0e0:	4673      	mov	r3, lr
    d0e2:	f1be 0f04 	cmp.w	lr, #4
    d0e6:	dd02      	ble.n	d0ee <z_fatal_error+0x1a2>
    d0e8:	4928      	ldr	r1, [pc, #160]	; (d18c <z_fatal_error+0x240>)
    d0ea:	f8cc 1014 	str.w	r1, [ip, #20]
    d0ee:	2b08      	cmp	r3, #8
    d0f0:	dd01      	ble.n	d0f6 <z_fatal_error+0x1aa>
    d0f2:	f8cc 6018 	str.w	r6, [ip, #24]
    d0f6:	2301      	movs	r3, #1
    d0f8:	703b      	strb	r3, [r7, #0]
    d0fa:	2303      	movs	r3, #3
    d0fc:	707b      	strb	r3, [r7, #1]
    d0fe:	b1aa      	cbz	r2, d12c <z_fatal_error+0x1e0>
    d100:	f1be 0f0c 	cmp.w	lr, #12
    d104:	dd01      	ble.n	d10a <z_fatal_error+0x1be>
    d106:	f8cc 001c 	str.w	r0, [ip, #28]
    d10a:	f10c 0320 	add.w	r3, ip, #32
    d10e:	2100      	movs	r1, #0
    d110:	2901      	cmp	r1, #1
    d112:	d80b      	bhi.n	d12c <z_fatal_error+0x1e0>
    d114:	f101 0020 	add.w	r0, r1, #32
    d118:	4438      	add	r0, r7
    d11a:	f810 0c20 	ldrb.w	r0, [r0, #-32]
    d11e:	f803 0b01 	strb.w	r0, [r3], #1
    d122:	3101      	adds	r1, #1
    d124:	e7f4      	b.n	d110 <z_fatal_error+0x1c4>
    d126:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
    d12a:	e7d8      	b.n	d0de <z_fatal_error+0x192>
    d12c:	f1be 0f11 	cmp.w	lr, #17
    d130:	dd23      	ble.n	d17a <z_fatal_error+0x22e>
    d132:	2312      	movs	r3, #18
    d134:	b14a      	cbz	r2, d14a <z_fatal_error+0x1fe>
    d136:	2104      	movs	r1, #4
    d138:	7139      	strb	r1, [r7, #4]
    d13a:	2100      	movs	r1, #0
    d13c:	7179      	strb	r1, [r7, #5]
    d13e:	71b9      	strb	r1, [r7, #6]
    d140:	2101      	movs	r1, #1
    d142:	71f9      	strb	r1, [r7, #7]
    d144:	6878      	ldr	r0, [r7, #4]
    d146:	f8cc 0010 	str.w	r0, [ip, #16]
    d14a:	2100      	movs	r1, #0
    d14c:	f36f 0100 	bfc	r1, #0, #1
    d150:	f36f 0141 	bfc	r1, #1, #1
    d154:	f36f 0182 	bfc	r1, #2, #1
    d158:	f36f 01c5 	bfc	r1, #3, #3
    d15c:	2001      	movs	r0, #1
    d15e:	f360 1188 	bfi	r1, r0, #6, #3
    d162:	f3c3 030a 	ubfx	r3, r3, #0, #11
    d166:	f363 2153 	bfi	r1, r3, #9, #11
    d16a:	f36f 511f 	bfc	r1, #20, #12
    d16e:	2300      	movs	r3, #0
    d170:	4803      	ldr	r0, [pc, #12]	; (d180 <z_fatal_error+0x234>)
    d172:	f7f7 fbd3 	bl	491c <z_impl_z_log_msg_static_create>
    d176:	46cd      	mov	sp, r9
    d178:	e76f      	b.n	d05a <z_fatal_error+0x10e>
    d17a:	f06f 031b 	mvn.w	r3, #27
    d17e:	e7d9      	b.n	d134 <z_fatal_error+0x1e8>
    d180:	200002f8 	.word	0x200002f8
    d184:	00018ca0 	.word	0x00018ca0
    d188:	00018cc8 	.word	0x00018cc8
    d18c:	00018cec 	.word	0x00018cec

0000d190 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
    d190:	b570      	push	{r4, r5, r6, lr}
    d192:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    d194:	4b12      	ldr	r3, [pc, #72]	; (d1e0 <z_sys_init_run_level+0x50>)
    d196:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    d19a:	e009      	b.n	d1b0 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    d19c:	4243      	negs	r3, r0
    d19e:	e017      	b.n	d1d0 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    d1a0:	68ea      	ldr	r2, [r5, #12]
    d1a2:	7013      	strb	r3, [r2, #0]
			}
			dev->state->initialized = true;
    d1a4:	68ea      	ldr	r2, [r5, #12]
    d1a6:	7853      	ldrb	r3, [r2, #1]
    d1a8:	f043 0301 	orr.w	r3, r3, #1
    d1ac:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    d1ae:	3408      	adds	r4, #8
    d1b0:	1c73      	adds	r3, r6, #1
    d1b2:	4a0b      	ldr	r2, [pc, #44]	; (d1e0 <z_sys_init_run_level+0x50>)
    d1b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1b8:	42a3      	cmp	r3, r4
    d1ba:	d910      	bls.n	d1de <z_sys_init_run_level+0x4e>
		const struct device *dev = entry->dev;
    d1bc:	6865      	ldr	r5, [r4, #4]
		if (dev != NULL) {
    d1be:	b15d      	cbz	r5, d1d8 <z_sys_init_run_level+0x48>
			int rc = entry->init_fn.dev(dev);
    d1c0:	6823      	ldr	r3, [r4, #0]
    d1c2:	4628      	mov	r0, r5
    d1c4:	4798      	blx	r3
			if (rc != 0) {
    d1c6:	4603      	mov	r3, r0
    d1c8:	2800      	cmp	r0, #0
    d1ca:	d0eb      	beq.n	d1a4 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    d1cc:	2800      	cmp	r0, #0
    d1ce:	dbe5      	blt.n	d19c <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    d1d0:	2bff      	cmp	r3, #255	; 0xff
    d1d2:	dde5      	ble.n	d1a0 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    d1d4:	23ff      	movs	r3, #255	; 0xff
    d1d6:	e7e3      	b.n	d1a0 <z_sys_init_run_level+0x10>
			if (rc == 0) {
				/* Run automatic device runtime enablement */
				(void)pm_device_runtime_auto_enable(dev);
			}
		} else {
			(void)entry->init_fn.sys();
    d1d8:	6823      	ldr	r3, [r4, #0]
    d1da:	4798      	blx	r3
    d1dc:	e7e7      	b.n	d1ae <z_sys_init_run_level+0x1e>
		}
	}
}
    d1de:	bd70      	pop	{r4, r5, r6, pc}
    d1e0:	00018d0c 	.word	0x00018d0c

0000d1e4 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    d1e4:	b510      	push	{r4, lr}
    d1e6:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    d1e8:	23b8      	movs	r3, #184	; 0xb8
    d1ea:	4c10      	ldr	r4, [pc, #64]	; (d22c <init_idle_thread+0x48>)
    d1ec:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
    d1f0:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    d1f4:	4b0e      	ldr	r3, [pc, #56]	; (d230 <init_idle_thread+0x4c>)
    d1f6:	eb03 038c 	add.w	r3, r3, ip, lsl #2
	z_setup_new_thread(thread, stack,
    d1fa:	4a0e      	ldr	r2, [pc, #56]	; (d234 <init_idle_thread+0x50>)
    d1fc:	9205      	str	r2, [sp, #20]
    d1fe:	2201      	movs	r2, #1
    d200:	9204      	str	r2, [sp, #16]
    d202:	220f      	movs	r2, #15
    d204:	9203      	str	r2, [sp, #12]
    d206:	2200      	movs	r2, #0
    d208:	9202      	str	r2, [sp, #8]
    d20a:	9201      	str	r2, [sp, #4]
    d20c:	9300      	str	r3, [sp, #0]
    d20e:	4b0a      	ldr	r3, [pc, #40]	; (d238 <init_idle_thread+0x54>)
    d210:	f44f 72a0 	mov.w	r2, #320	; 0x140
    d214:	4909      	ldr	r1, [pc, #36]	; (d23c <init_idle_thread+0x58>)
    d216:	eb01 118c 	add.w	r1, r1, ip, lsl #6
    d21a:	4620      	mov	r0, r4
    d21c:	f000 f974 	bl	d508 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    d220:	7b63      	ldrb	r3, [r4, #13]
    d222:	f023 0304 	bic.w	r3, r3, #4
    d226:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    d228:	b006      	add	sp, #24
    d22a:	bd10      	pop	{r4, pc}
    d22c:	20000b78 	.word	0x20000b78
    d230:	20003c6c 	.word	0x20003c6c
    d234:	00018d04 	.word	0x00018d04
    d238:	0000d66d 	.word	0x0000d66d
    d23c:	200051b8 	.word	0x200051b8

0000d240 <bg_thread_main>:
{
    d240:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    d242:	4b0a      	ldr	r3, [pc, #40]	; (d26c <bg_thread_main+0x2c>)
    d244:	2201      	movs	r2, #1
    d246:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    d248:	2003      	movs	r0, #3
    d24a:	f7ff ffa1 	bl	d190 <z_sys_init_run_level>
	boot_banner();
    d24e:	f001 f9b1 	bl	e5b4 <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    d252:	2004      	movs	r0, #4
    d254:	f7ff ff9c 	bl	d190 <z_sys_init_run_level>
	z_init_static_threads();
    d258:	f000 f9ba 	bl	d5d0 <z_init_static_threads>
	(void)main();
    d25c:	f7f3 f8a8 	bl	3b0 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    d260:	4a03      	ldr	r2, [pc, #12]	; (d270 <bg_thread_main+0x30>)
    d262:	7b13      	ldrb	r3, [r2, #12]
    d264:	f023 0301 	bic.w	r3, r3, #1
    d268:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    d26a:	bd08      	pop	{r3, pc}
    d26c:	20003cbe 	.word	0x20003cbe
    d270:	20000c30 	.word	0x20000c30

0000d274 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    d274:	b508      	push	{r3, lr}
    d276:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    d278:	4a01      	ldr	r2, [pc, #4]	; (d280 <switch_to_main_thread+0xc>)
    d27a:	4802      	ldr	r0, [pc, #8]	; (d284 <switch_to_main_thread+0x10>)
    d27c:	f7fa feaa 	bl	7fd4 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    d280:	0000d241 	.word	0x0000d241
    d284:	20000c30 	.word	0x20000c30

0000d288 <z_bss_zero>:
{
    d288:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    d28a:	4803      	ldr	r0, [pc, #12]	; (d298 <z_bss_zero+0x10>)
    d28c:	4a03      	ldr	r2, [pc, #12]	; (d29c <z_bss_zero+0x14>)
    d28e:	1a12      	subs	r2, r2, r0
    d290:	2100      	movs	r1, #0
    d292:	f007 f9f7 	bl	14684 <z_early_memset>
}
    d296:	bd08      	pop	{r3, pc}
    d298:	20000360 	.word	0x20000360
    d29c:	20003cc0 	.word	0x20003cc0

0000d2a0 <z_init_cpu>:
{
    d2a0:	b510      	push	{r4, lr}
    d2a2:	4604      	mov	r4, r0
	init_idle_thread(id);
    d2a4:	f7ff ff9e 	bl	d1e4 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    d2a8:	23b8      	movs	r3, #184	; 0xb8
    d2aa:	490a      	ldr	r1, [pc, #40]	; (d2d4 <z_init_cpu+0x34>)
    d2ac:	fb03 1104 	mla	r1, r3, r4, r1
    d2b0:	4a09      	ldr	r2, [pc, #36]	; (d2d8 <z_init_cpu+0x38>)
    d2b2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    d2b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    d2ba:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    d2bc:	741c      	strb	r4, [r3, #16]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    d2be:	4b07      	ldr	r3, [pc, #28]	; (d2dc <z_init_cpu+0x3c>)
    d2c0:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
    d2c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
	_kernel.cpus[id].irq_stack =
    d2c8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    d2cc:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    d2d0:	6053      	str	r3, [r2, #4]
}
    d2d2:	bd10      	pop	{r4, pc}
    d2d4:	20000b78 	.word	0x20000b78
    d2d8:	20003c6c 	.word	0x20003c6c
    d2dc:	200049b8 	.word	0x200049b8

0000d2e0 <prepare_multithreading>:
{
    d2e0:	b570      	push	{r4, r5, r6, lr}
    d2e2:	b086      	sub	sp, #24
	z_sched_init();
    d2e4:	f000 fdd8 	bl	de98 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    d2e8:	4d10      	ldr	r5, [pc, #64]	; (d32c <prepare_multithreading+0x4c>)
    d2ea:	4b11      	ldr	r3, [pc, #68]	; (d330 <prepare_multithreading+0x50>)
    d2ec:	619d      	str	r5, [r3, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    d2ee:	4b11      	ldr	r3, [pc, #68]	; (d334 <prepare_multithreading+0x54>)
    d2f0:	9305      	str	r3, [sp, #20]
    d2f2:	2301      	movs	r3, #1
    d2f4:	9304      	str	r3, [sp, #16]
    d2f6:	2400      	movs	r4, #0
    d2f8:	9403      	str	r4, [sp, #12]
    d2fa:	9402      	str	r4, [sp, #8]
    d2fc:	9401      	str	r4, [sp, #4]
    d2fe:	9400      	str	r4, [sp, #0]
    d300:	4b0d      	ldr	r3, [pc, #52]	; (d338 <prepare_multithreading+0x58>)
    d302:	f44f 6280 	mov.w	r2, #1024	; 0x400
    d306:	490d      	ldr	r1, [pc, #52]	; (d33c <prepare_multithreading+0x5c>)
    d308:	4628      	mov	r0, r5
    d30a:	f000 f8fd 	bl	d508 <z_setup_new_thread>
    d30e:	4606      	mov	r6, r0
    d310:	7b6b      	ldrb	r3, [r5, #13]
    d312:	f023 0304 	bic.w	r3, r3, #4
    d316:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    d318:	4628      	mov	r0, r5
    d31a:	f007 fae1 	bl	148e0 <z_ready_thread>
	z_init_cpu(0);
    d31e:	4620      	mov	r0, r4
    d320:	f7ff ffbe 	bl	d2a0 <z_init_cpu>
}
    d324:	4630      	mov	r0, r6
    d326:	b006      	add	sp, #24
    d328:	bd70      	pop	{r4, r5, r6, pc}
    d32a:	bf00      	nop
    d32c:	20000c30 	.word	0x20000c30
    d330:	20003c6c 	.word	0x20003c6c
    d334:	000155a8 	.word	0x000155a8
    d338:	0000d241 	.word	0x0000d241
    d33c:	200052f8 	.word	0x200052f8

0000d340 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    d340:	b500      	push	{lr}
    d342:	b0af      	sub	sp, #188	; 0xbc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    d344:	2000      	movs	r0, #0
    d346:	f7ff ff23 	bl	d190 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    d34a:	4b1e      	ldr	r3, [pc, #120]	; (d3c4 <z_cstart+0x84>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    d34c:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    d350:	4c1d      	ldr	r4, [pc, #116]	; (d3c8 <z_cstart+0x88>)
    d352:	6963      	ldr	r3, [r4, #20]
    d354:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    d358:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d35a:	23e0      	movs	r3, #224	; 0xe0
    d35c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    d360:	2500      	movs	r5, #0
    d362:	77e5      	strb	r5, [r4, #31]
    d364:	7625      	strb	r5, [r4, #24]
    d366:	7665      	strb	r5, [r4, #25]
    d368:	76a5      	strb	r5, [r4, #26]
    d36a:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    d36e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d370:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    d374:	6263      	str	r3, [r4, #36]	; 0x24
    d376:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    d37a:	f7fb fdaf 	bl	8edc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    d37e:	f7fa fbff 	bl	7b80 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    d382:	f04f 33ff 	mov.w	r3, #4294967295
    d386:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    d388:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    d38a:	f7fb ff63 	bl	9254 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    d38e:	f7fb fe5f 	bl	9050 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    d392:	f7f7 f8b7 	bl	4504 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    d396:	2401      	movs	r4, #1
    d398:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    d39c:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    d3a0:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
    d3a2:	9528      	str	r5, [sp, #160]	; 0xa0
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
    d3a4:	952a      	str	r5, [sp, #168]	; 0xa8

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    d3a6:	4b09      	ldr	r3, [pc, #36]	; (d3cc <z_cstart+0x8c>)
    d3a8:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    d3ac:	f7ff fd4a 	bl	ce44 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    d3b0:	4620      	mov	r0, r4
    d3b2:	f7ff feed 	bl	d190 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    d3b6:	2002      	movs	r0, #2
    d3b8:	f7ff feea 	bl	d190 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    d3bc:	f7ff ff90 	bl	d2e0 <prepare_multithreading>
    d3c0:	f7ff ff58 	bl	d274 <switch_to_main_thread>
    d3c4:	200051b8 	.word	0x200051b8
    d3c8:	e000ed00 	.word	0xe000ed00
    d3cc:	20003c6c 	.word	0x20003c6c

0000d3d0 <k_thread_foreach>:

#define _FOREACH_STATIC_THREAD(thread_data)              \
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data)

void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data)
{
    d3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d3d2:	4606      	mov	r6, r0
    d3d4:	460d      	mov	r5, r1
	__asm__ volatile(
    d3d6:	f04f 0320 	mov.w	r3, #32
    d3da:	f3ef 8711 	mrs	r7, BASEPRI
    d3de:	f383 8812 	msr	BASEPRI_MAX, r3
    d3e2:	f3bf 8f6f 	isb	sy
	 */
	key = k_spin_lock(&z_thread_monitor_lock);

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, foreach);

	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
    d3e6:	4b07      	ldr	r3, [pc, #28]	; (d404 <k_thread_foreach+0x34>)
    d3e8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    d3ea:	e003      	b.n	d3f4 <k_thread_foreach+0x24>
		user_cb(thread, user_data);
    d3ec:	4629      	mov	r1, r5
    d3ee:	4620      	mov	r0, r4
    d3f0:	47b0      	blx	r6
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
    d3f2:	6f64      	ldr	r4, [r4, #116]	; 0x74
    d3f4:	2c00      	cmp	r4, #0
    d3f6:	d1f9      	bne.n	d3ec <k_thread_foreach+0x1c>
	__asm__ volatile(
    d3f8:	f387 8811 	msr	BASEPRI, r7
    d3fc:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, foreach);

	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
}
    d400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d402:	bf00      	nop
    d404:	20003c6c 	.word	0x20003c6c

0000d408 <z_thread_monitor_exit>:
	__asm__ volatile(
    d408:	f04f 0320 	mov.w	r3, #32
    d40c:	f3ef 8111 	mrs	r1, BASEPRI
    d410:	f383 8812 	msr	BASEPRI_MAX, r3
    d414:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    d418:	4b0a      	ldr	r3, [pc, #40]	; (d444 <z_thread_monitor_exit+0x3c>)
    d41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d41c:	4283      	cmp	r3, r0
    d41e:	d104      	bne.n	d42a <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    d420:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    d422:	4b08      	ldr	r3, [pc, #32]	; (d444 <z_thread_monitor_exit+0x3c>)
    d424:	625a      	str	r2, [r3, #36]	; 0x24
    d426:	e007      	b.n	d438 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    d428:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    d42a:	b113      	cbz	r3, d432 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    d42c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
    d42e:	4282      	cmp	r2, r0
    d430:	d1fa      	bne.n	d428 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    d432:	b10b      	cbz	r3, d438 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    d434:	6f42      	ldr	r2, [r0, #116]	; 0x74
    d436:	675a      	str	r2, [r3, #116]	; 0x74
	__asm__ volatile(
    d438:	f381 8811 	msr	BASEPRI, r1
    d43c:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    d440:	4770      	bx	lr
    d442:	bf00      	nop
    d444:	20003c6c 	.word	0x20003c6c

0000d448 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    d448:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    d44a:	4604      	mov	r4, r0
    d44c:	b140      	cbz	r0, d460 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
    d44e:	221f      	movs	r2, #31
    d450:	f104 0078 	add.w	r0, r4, #120	; 0x78
    d454:	f005 fc1c 	bl	12c90 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    d458:	2000      	movs	r0, #0
    d45a:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    d45e:	bd10      	pop	{r4, pc}
		thread = _current;
    d460:	4b01      	ldr	r3, [pc, #4]	; (d468 <z_impl_k_thread_name_set+0x20>)
    d462:	689c      	ldr	r4, [r3, #8]
    d464:	e7f3      	b.n	d44e <z_impl_k_thread_name_set+0x6>
    d466:	bf00      	nop
    d468:	20003c6c 	.word	0x20003c6c

0000d46c <k_thread_state_str>:

	return bytes_to_copy;
}

const char *k_thread_state_str(k_tid_t thread_id, char *buf, size_t buf_size)
{
    d46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	size_t      off = 0;
	uint8_t     bit;
	uint8_t     thread_state = thread_id->base.thread_state;
    d470:	7b46      	ldrb	r6, [r0, #13]
	static const char  *states_str[8] = {"dummy", "pending", "prestart",
					     "dead", "suspended", "aborting",
					     "", "queued"};
	static const size_t states_sz[8] = {5, 7, 8, 4, 9, 8, 0, 6};

	if ((buf == NULL) || (buf_size == 0)) {
    d472:	b371      	cbz	r1, d4d2 <k_thread_state_str+0x66>
    d474:	4689      	mov	r9, r1
    d476:	b372      	cbz	r2, d4d6 <k_thread_state_str+0x6a>
		return "";
	}

	buf_size--;   /* Reserve 1 byte for end-of-string character */
    d478:	f102 38ff 	add.w	r8, r2, #4294967295
	 * Loop through each bit in the thread_state. Stop once all have
	 * been processed. If more than one thread_state bit is set, then
	 * separate the descriptive strings with a '+'.
	 */

	for (uint8_t index = 0; thread_state != 0; index++) {
    d47c:	2500      	movs	r5, #0
	size_t      off = 0;
    d47e:	462f      	mov	r7, r5
	for (uint8_t index = 0; thread_state != 0; index++) {
    d480:	e001      	b.n	d486 <k_thread_state_str+0x1a>
    d482:	3501      	adds	r5, #1
    d484:	b2ed      	uxtb	r5, r5
    d486:	b1f6      	cbz	r6, d4c6 <k_thread_state_str+0x5a>
		bit = BIT(index);
    d488:	2401      	movs	r4, #1
    d48a:	40ac      	lsls	r4, r5
		if ((thread_state & bit) == 0) {
    d48c:	4234      	tst	r4, r6
    d48e:	d0f8      	beq.n	d482 <k_thread_state_str+0x16>
			continue;
		}

		off += copy_bytes(buf + off, buf_size - off,
    d490:	4b12      	ldr	r3, [pc, #72]	; (d4dc <k_thread_state_str+0x70>)
    d492:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    d496:	4a12      	ldr	r2, [pc, #72]	; (d4e0 <k_thread_state_str+0x74>)
    d498:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
    d49c:	eba8 0107 	sub.w	r1, r8, r7
    d4a0:	eb09 0007 	add.w	r0, r9, r7
    d4a4:	f007 f8f6 	bl	14694 <copy_bytes>
    d4a8:	4407      	add	r7, r0
				  states_str[index], states_sz[index]);

		thread_state &= ~bit;
    d4aa:	43e4      	mvns	r4, r4
    d4ac:	b264      	sxtb	r4, r4

		if (thread_state != 0) {
    d4ae:	4026      	ands	r6, r4
    d4b0:	d0e7      	beq.n	d482 <k_thread_state_str+0x16>
			off += copy_bytes(buf + off, buf_size - off, "+", 1);
    d4b2:	2301      	movs	r3, #1
    d4b4:	4a0b      	ldr	r2, [pc, #44]	; (d4e4 <k_thread_state_str+0x78>)
    d4b6:	eba8 0107 	sub.w	r1, r8, r7
    d4ba:	eb09 0007 	add.w	r0, r9, r7
    d4be:	f007 f8e9 	bl	14694 <copy_bytes>
    d4c2:	4407      	add	r7, r0
    d4c4:	e7dd      	b.n	d482 <k_thread_state_str+0x16>
		}
	}

	buf[off] = '\0';
    d4c6:	2300      	movs	r3, #0
    d4c8:	f809 3007 	strb.w	r3, [r9, r7]

	return (const char *)buf;
    d4cc:	4648      	mov	r0, r9
}
    d4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return "";
    d4d2:	4805      	ldr	r0, [pc, #20]	; (d4e8 <k_thread_state_str+0x7c>)
    d4d4:	e7fb      	b.n	d4ce <k_thread_state_str+0x62>
    d4d6:	4804      	ldr	r0, [pc, #16]	; (d4e8 <k_thread_state_str+0x7c>)
    d4d8:	e7f9      	b.n	d4ce <k_thread_state_str+0x62>
    d4da:	bf00      	nop
    d4dc:	00018d2c 	.word	0x00018d2c
    d4e0:	00018d84 	.word	0x00018d84
    d4e4:	00018d28 	.word	0x00018d28
    d4e8:	000165a8 	.word	0x000165a8

0000d4ec <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    d4ec:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    d4ee:	ea53 0102 	orrs.w	r1, r3, r2
    d4f2:	d102      	bne.n	d4fa <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    d4f4:	f007 f8f6 	bl	146e4 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    d4f8:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    d4fa:	4902      	ldr	r1, [pc, #8]	; (d504 <schedule_new_thread+0x18>)
    d4fc:	3018      	adds	r0, #24
    d4fe:	f000 fe1d 	bl	e13c <z_add_timeout>
    d502:	e7f9      	b.n	d4f8 <schedule_new_thread+0xc>
    d504:	0001496d 	.word	0x0001496d

0000d508 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    d508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d50c:	b085      	sub	sp, #20
    d50e:	4604      	mov	r4, r0
    d510:	460f      	mov	r7, r1
    d512:	4615      	mov	r5, r2
    d514:	461e      	mov	r6, r3
    d516:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    d51a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    d51e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    d522:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    d526:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    d52a:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    d52c:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    d52e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d530:	2204      	movs	r2, #4
    d532:	9911      	ldr	r1, [sp, #68]	; 0x44
    d534:	f007 f8da 	bl	146ec <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    d538:	462a      	mov	r2, r5
    d53a:	4639      	mov	r1, r7
    d53c:	4620      	mov	r0, r4
    d53e:	f007 f8b4 	bl	146aa <setup_thread_stack>
    d542:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    d544:	f8cd 8008 	str.w	r8, [sp, #8]
    d548:	f8cd 9004 	str.w	r9, [sp, #4]
    d54c:	f8cd a000 	str.w	sl, [sp]
    d550:	4633      	mov	r3, r6
    d552:	4602      	mov	r2, r0
    d554:	4639      	mov	r1, r7
    d556:	4620      	mov	r0, r4
    d558:	f7fa fd1a 	bl	7f90 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    d55c:	2300      	movs	r3, #0
    d55e:	6563      	str	r3, [r4, #84]	; 0x54
#endif
#ifdef CONFIG_EVENTS
	new_thread->no_wake_on_timeout = false;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    d560:	6666      	str	r6, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
    d562:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
    d566:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
    d56a:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
    d56e:	f04f 0320 	mov.w	r3, #32
    d572:	f3ef 8211 	mrs	r2, BASEPRI
    d576:	f383 8812 	msr	BASEPRI_MAX, r3
    d57a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    d57e:	4b13      	ldr	r3, [pc, #76]	; (d5cc <z_setup_new_thread+0xc4>)
    d580:	6a59      	ldr	r1, [r3, #36]	; 0x24
    d582:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
    d584:	625c      	str	r4, [r3, #36]	; 0x24
	__asm__ volatile(
    d586:	f382 8811 	msr	BASEPRI, r2
    d58a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    d58e:	f1bb 0f00 	cmp.w	fp, #0
    d592:	d013      	beq.n	d5bc <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    d594:	221f      	movs	r2, #31
    d596:	4659      	mov	r1, fp
    d598:	f104 0078 	add.w	r0, r4, #120	; 0x78
    d59c:	f005 fb78 	bl	12c90 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    d5a0:	2300      	movs	r3, #0
    d5a2:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    d5a6:	4b09      	ldr	r3, [pc, #36]	; (d5cc <z_setup_new_thread+0xc4>)
    d5a8:	689b      	ldr	r3, [r3, #8]
    d5aa:	b15b      	cbz	r3, d5c4 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    d5ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    d5b0:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    d5b4:	4628      	mov	r0, r5
    d5b6:	b005      	add	sp, #20
    d5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    d5bc:	2300      	movs	r3, #0
    d5be:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    d5c2:	e7f0      	b.n	d5a6 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    d5c4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
    d5c8:	e7f4      	b.n	d5b4 <z_setup_new_thread+0xac>
    d5ca:	bf00      	nop
    d5cc:	20003c6c 	.word	0x20003c6c

0000d5d0 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    d5d0:	b530      	push	{r4, r5, lr}
    d5d2:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    d5d4:	4c21      	ldr	r4, [pc, #132]	; (d65c <z_init_static_threads+0x8c>)
    d5d6:	e014      	b.n	d602 <z_init_static_threads+0x32>
		z_setup_new_thread(
    d5d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d5da:	9305      	str	r3, [sp, #20]
    d5dc:	6a23      	ldr	r3, [r4, #32]
    d5de:	9304      	str	r3, [sp, #16]
    d5e0:	69e3      	ldr	r3, [r4, #28]
    d5e2:	9303      	str	r3, [sp, #12]
    d5e4:	69a3      	ldr	r3, [r4, #24]
    d5e6:	9302      	str	r3, [sp, #8]
    d5e8:	6963      	ldr	r3, [r4, #20]
    d5ea:	9301      	str	r3, [sp, #4]
    d5ec:	6923      	ldr	r3, [r4, #16]
    d5ee:	9300      	str	r3, [sp, #0]
    d5f0:	68e3      	ldr	r3, [r4, #12]
    d5f2:	68a2      	ldr	r2, [r4, #8]
    d5f4:	6861      	ldr	r1, [r4, #4]
    d5f6:	6820      	ldr	r0, [r4, #0]
    d5f8:	f7ff ff86 	bl	d508 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    d5fc:	6823      	ldr	r3, [r4, #0]
    d5fe:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    d600:	342c      	adds	r4, #44	; 0x2c
    d602:	4b17      	ldr	r3, [pc, #92]	; (d660 <z_init_static_threads+0x90>)
    d604:	429c      	cmp	r4, r3
    d606:	d3e7      	bcc.n	d5d8 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    d608:	f000 fa08 	bl	da1c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    d60c:	4c13      	ldr	r4, [pc, #76]	; (d65c <z_init_static_threads+0x8c>)
    d60e:	e000      	b.n	d612 <z_init_static_threads+0x42>
    d610:	342c      	adds	r4, #44	; 0x2c
    d612:	4b13      	ldr	r3, [pc, #76]	; (d660 <z_init_static_threads+0x90>)
    d614:	429c      	cmp	r4, r3
    d616:	d21c      	bcs.n	d652 <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    d618:	6a60      	ldr	r0, [r4, #36]	; 0x24
    d61a:	f1b0 3fff 	cmp.w	r0, #4294967295
    d61e:	d0f7      	beq.n	d610 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
    d620:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    d622:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    d626:	17c1      	asrs	r1, r0, #31
    d628:	03c9      	lsls	r1, r1, #15
    d62a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    d62e:	03c0      	lsls	r0, r0, #15
    d630:	f240 33e7 	movw	r3, #999	; 0x3e7
    d634:	18c0      	adds	r0, r0, r3
    d636:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d63a:	f04f 0300 	mov.w	r3, #0
    d63e:	f141 0100 	adc.w	r1, r1, #0
    d642:	f7f2 fd4b 	bl	dc <__aeabi_uldivmod>
    d646:	4602      	mov	r2, r0
    d648:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    d64a:	4628      	mov	r0, r5
    d64c:	f7ff ff4e 	bl	d4ec <schedule_new_thread>
    d650:	e7de      	b.n	d610 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
    d652:	f000 fbcf 	bl	ddf4 <k_sched_unlock>
}
    d656:	b007      	add	sp, #28
    d658:	bd30      	pop	{r4, r5, pc}
    d65a:	bf00      	nop
    d65c:	000152c8 	.word	0x000152c8
    d660:	000152c8 	.word	0x000152c8

0000d664 <sys_kernel_version_get>:
 * @return kernel version
 */
uint32_t sys_kernel_version_get(void)
{
	return KERNELVERSION;
}
    d664:	4800      	ldr	r0, [pc, #0]	; (d668 <sys_kernel_version_get+0x4>)
    d666:	4770      	bx	lr
    d668:	03036300 	.word	0x03036300

0000d66c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    d66c:	b508      	push	{r3, lr}
    d66e:	e001      	b.n	d674 <idle+0x8>
	arch_cpu_idle();
    d670:	f7fa fa8c 	bl	7b8c <arch_cpu_idle>
	__asm__ volatile(
    d674:	f04f 0220 	mov.w	r2, #32
    d678:	f3ef 8311 	mrs	r3, BASEPRI
    d67c:	f382 8812 	msr	BASEPRI_MAX, r2
    d680:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    d684:	f007 fa88 	bl	14b98 <z_get_next_timeout_expiry>
    d688:	4b05      	ldr	r3, [pc, #20]	; (d6a0 <idle+0x34>)
    d68a:	6158      	str	r0, [r3, #20]
	return !z_sys_post_kernel;
    d68c:	4b05      	ldr	r3, [pc, #20]	; (d6a4 <idle+0x38>)
    d68e:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    d690:	2b00      	cmp	r3, #0
    d692:	d0ed      	beq.n	d670 <idle+0x4>
    d694:	f7f7 ffda 	bl	564c <pm_system_suspend>
    d698:	2800      	cmp	r0, #0
    d69a:	d1eb      	bne.n	d674 <idle+0x8>
    d69c:	e7e8      	b.n	d670 <idle+0x4>
    d69e:	bf00      	nop
    d6a0:	20003c6c 	.word	0x20003c6c
    d6a4:	20003cbe 	.word	0x20003cbe

0000d6a8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    d6a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d6ac:	b082      	sub	sp, #8
    d6ae:	4604      	mov	r4, r0
    d6b0:	461e      	mov	r6, r3
    d6b2:	f04f 0320 	mov.w	r3, #32
    d6b6:	f3ef 8511 	mrs	r5, BASEPRI
    d6ba:	f383 8812 	msr	BASEPRI_MAX, r3
    d6be:	f3bf 8f6f 	isb	sy
    d6c2:	462b      	mov	r3, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    d6c4:	68c1      	ldr	r1, [r0, #12]
    d6c6:	b999      	cbnz	r1, d6f0 <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    d6c8:	2900      	cmp	r1, #0
    d6ca:	d151      	bne.n	d770 <z_impl_k_mutex_lock+0xc8>
    d6cc:	4a36      	ldr	r2, [pc, #216]	; (d7a8 <z_impl_k_mutex_lock+0x100>)
    d6ce:	6892      	ldr	r2, [r2, #8]
    d6d0:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    d6d4:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    d6d6:	3101      	adds	r1, #1
    d6d8:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    d6da:	4a33      	ldr	r2, [pc, #204]	; (d7a8 <z_impl_k_mutex_lock+0x100>)
    d6dc:	6892      	ldr	r2, [r2, #8]
    d6de:	60a2      	str	r2, [r4, #8]
	__asm__ volatile(
    d6e0:	f383 8811 	msr	BASEPRI, r3
    d6e4:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    d6e8:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    d6ea:	b002      	add	sp, #8
    d6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d6f0:	4617      	mov	r7, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    d6f2:	6880      	ldr	r0, [r0, #8]
    d6f4:	4a2c      	ldr	r2, [pc, #176]	; (d7a8 <z_impl_k_mutex_lock+0x100>)
    d6f6:	6892      	ldr	r2, [r2, #8]
    d6f8:	4290      	cmp	r0, r2
    d6fa:	d0e5      	beq.n	d6c8 <z_impl_k_mutex_lock+0x20>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    d6fc:	ea56 0107 	orrs.w	r1, r6, r7
    d700:	d038      	beq.n	d774 <z_impl_k_mutex_lock+0xcc>
					    mutex->owner->base.prio);
    d702:	f990 800e 	ldrsb.w	r8, [r0, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    d706:	4641      	mov	r1, r8
    d708:	f992 000e 	ldrsb.w	r0, [r2, #14]
    d70c:	f007 f83b 	bl	14786 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    d710:	4580      	cmp	r8, r0
    d712:	dc36      	bgt.n	d782 <z_impl_k_mutex_lock+0xda>
	bool resched = false;
    d714:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    d718:	9700      	str	r7, [sp, #0]
    d71a:	9601      	str	r6, [sp, #4]
    d71c:	4622      	mov	r2, r4
    d71e:	4629      	mov	r1, r5
    d720:	4822      	ldr	r0, [pc, #136]	; (d7ac <z_impl_k_mutex_lock+0x104>)
    d722:	f000 fab3 	bl	dc8c <z_pend_curr>
	if (got_mutex == 0) {
    d726:	2800      	cmp	r0, #0
    d728:	d0df      	beq.n	d6ea <z_impl_k_mutex_lock+0x42>
	__asm__ volatile(
    d72a:	f04f 0320 	mov.w	r3, #32
    d72e:	f3ef 8511 	mrs	r5, BASEPRI
    d732:	f383 8812 	msr	BASEPRI_MAX, r3
    d736:	f3bf 8f6f 	isb	sy
    d73a:	462e      	mov	r6, r5
	if (likely(mutex->owner != NULL)) {
    d73c:	68a3      	ldr	r3, [r4, #8]
    d73e:	b343      	cbz	r3, d792 <z_impl_k_mutex_lock+0xea>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    d740:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d742:	429c      	cmp	r4, r3
    d744:	d023      	beq.n	d78e <z_impl_k_mutex_lock+0xe6>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    d746:	b313      	cbz	r3, d78e <z_impl_k_mutex_lock+0xe6>
    d748:	6921      	ldr	r1, [r4, #16]
    d74a:	f993 000e 	ldrsb.w	r0, [r3, #14]
    d74e:	f007 f81a 	bl	14786 <new_prio_for_inheritance>
    d752:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    d754:	4620      	mov	r0, r4
    d756:	f007 f821 	bl	1479c <adjust_owner_prio>
    d75a:	b9e8      	cbnz	r0, d798 <z_impl_k_mutex_lock+0xf0>
    d75c:	f1b8 0f00 	cmp.w	r8, #0
    d760:	d11a      	bne.n	d798 <z_impl_k_mutex_lock+0xf0>
	__asm__ volatile(
    d762:	f386 8811 	msr	BASEPRI, r6
    d766:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    d76a:	f06f 000a 	mvn.w	r0, #10
    d76e:	e7bc      	b.n	d6ea <z_impl_k_mutex_lock+0x42>
					_current->base.prio :
    d770:	6922      	ldr	r2, [r4, #16]
    d772:	e7af      	b.n	d6d4 <z_impl_k_mutex_lock+0x2c>
    d774:	f385 8811 	msr	BASEPRI, r5
    d778:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    d77c:	f06f 000f 	mvn.w	r0, #15
    d780:	e7b3      	b.n	d6ea <z_impl_k_mutex_lock+0x42>
		resched = adjust_owner_prio(mutex, new_prio);
    d782:	4601      	mov	r1, r0
    d784:	4620      	mov	r0, r4
    d786:	f007 f809 	bl	1479c <adjust_owner_prio>
    d78a:	4680      	mov	r8, r0
    d78c:	e7c4      	b.n	d718 <z_impl_k_mutex_lock+0x70>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    d78e:	6921      	ldr	r1, [r4, #16]
    d790:	e7e0      	b.n	d754 <z_impl_k_mutex_lock+0xac>
	if (resched) {
    d792:	f1b8 0f00 	cmp.w	r8, #0
    d796:	d0e4      	beq.n	d762 <z_impl_k_mutex_lock+0xba>
		z_reschedule(&lock, key);
    d798:	4629      	mov	r1, r5
    d79a:	4804      	ldr	r0, [pc, #16]	; (d7ac <z_impl_k_mutex_lock+0x104>)
    d79c:	f000 f928 	bl	d9f0 <z_reschedule>
	return -EAGAIN;
    d7a0:	f06f 000a 	mvn.w	r0, #10
    d7a4:	e7a1      	b.n	d6ea <z_impl_k_mutex_lock+0x42>
    d7a6:	bf00      	nop
    d7a8:	20003c6c 	.word	0x20003c6c
    d7ac:	20003c94 	.word	0x20003c94

0000d7b0 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    d7b0:	6883      	ldr	r3, [r0, #8]
    d7b2:	b38b      	cbz	r3, d818 <z_impl_k_mutex_unlock+0x68>
{
    d7b4:	b570      	push	{r4, r5, r6, lr}
    d7b6:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    d7b8:	4a1a      	ldr	r2, [pc, #104]	; (d824 <z_impl_k_mutex_unlock+0x74>)
    d7ba:	6892      	ldr	r2, [r2, #8]
    d7bc:	4293      	cmp	r3, r2
    d7be:	d12e      	bne.n	d81e <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    d7c0:	68c3      	ldr	r3, [r0, #12]
    d7c2:	2b01      	cmp	r3, #1
    d7c4:	d903      	bls.n	d7ce <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    d7c6:	3b01      	subs	r3, #1
    d7c8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    d7ca:	2000      	movs	r0, #0
}
    d7cc:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    d7ce:	f04f 0320 	mov.w	r3, #32
    d7d2:	f3ef 8511 	mrs	r5, BASEPRI
    d7d6:	f383 8812 	msr	BASEPRI_MAX, r3
    d7da:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    d7de:	6901      	ldr	r1, [r0, #16]
    d7e0:	f006 ffdc 	bl	1479c <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    d7e4:	4620      	mov	r0, r4
    d7e6:	f007 f931 	bl	14a4c <z_unpend_first_thread>
	mutex->owner = new_owner;
    d7ea:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    d7ec:	b168      	cbz	r0, d80a <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
    d7ee:	f990 300e 	ldrsb.w	r3, [r0, #14]
    d7f2:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    d7f4:	2400      	movs	r4, #0
    d7f6:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
    d7fa:	f007 f871 	bl	148e0 <z_ready_thread>
		z_reschedule(&lock, key);
    d7fe:	4629      	mov	r1, r5
    d800:	4809      	ldr	r0, [pc, #36]	; (d828 <z_impl_k_mutex_unlock+0x78>)
    d802:	f000 f8f5 	bl	d9f0 <z_reschedule>
	return 0;
    d806:	4620      	mov	r0, r4
    d808:	e7e0      	b.n	d7cc <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
    d80a:	2000      	movs	r0, #0
    d80c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    d80e:	f385 8811 	msr	BASEPRI, r5
    d812:	f3bf 8f6f 	isb	sy
    d816:	e7d9      	b.n	d7cc <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
    d818:	f06f 0015 	mvn.w	r0, #21
}
    d81c:	4770      	bx	lr
		return -EPERM;
    d81e:	f04f 30ff 	mov.w	r0, #4294967295
    d822:	e7d3      	b.n	d7cc <z_impl_k_mutex_unlock+0x1c>
    d824:	20003c6c 	.word	0x20003c6c
    d828:	20003c94 	.word	0x20003c94

0000d82c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    d82c:	b538      	push	{r3, r4, r5, lr}
    d82e:	4604      	mov	r4, r0
	__asm__ volatile(
    d830:	f04f 0320 	mov.w	r3, #32
    d834:	f3ef 8511 	mrs	r5, BASEPRI
    d838:	f383 8812 	msr	BASEPRI_MAX, r3
    d83c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    d840:	f007 f904 	bl	14a4c <z_unpend_first_thread>

	if (thread != NULL) {
    d844:	b148      	cbz	r0, d85a <z_impl_k_sem_give+0x2e>
    d846:	2200      	movs	r2, #0
    d848:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    d84c:	f007 f848 	bl	148e0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    d850:	4629      	mov	r1, r5
    d852:	4809      	ldr	r0, [pc, #36]	; (d878 <z_impl_k_sem_give+0x4c>)
    d854:	f000 f8cc 	bl	d9f0 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    d858:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    d85a:	68a3      	ldr	r3, [r4, #8]
    d85c:	68e2      	ldr	r2, [r4, #12]
    d85e:	4293      	cmp	r3, r2
    d860:	d008      	beq.n	d874 <z_impl_k_sem_give+0x48>
    d862:	2201      	movs	r2, #1
    d864:	4413      	add	r3, r2
    d866:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    d868:	2102      	movs	r1, #2
    d86a:	f104 0010 	add.w	r0, r4, #16
    d86e:	f007 fb7f 	bl	14f70 <z_handle_obj_poll_events>
}
    d872:	e7ed      	b.n	d850 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    d874:	2200      	movs	r2, #0
    d876:	e7f5      	b.n	d864 <z_impl_k_sem_give+0x38>
    d878:	20003c94 	.word	0x20003c94

0000d87c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    d87c:	b510      	push	{r4, lr}
    d87e:	b082      	sub	sp, #8
    d880:	f04f 0420 	mov.w	r4, #32
    d884:	f3ef 8111 	mrs	r1, BASEPRI
    d888:	f384 8812 	msr	BASEPRI_MAX, r4
    d88c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    d890:	6884      	ldr	r4, [r0, #8]
    d892:	b144      	cbz	r4, d8a6 <z_impl_k_sem_take+0x2a>
		sem->count--;
    d894:	3c01      	subs	r4, #1
    d896:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    d898:	f381 8811 	msr	BASEPRI, r1
    d89c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    d8a0:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    d8a2:	b002      	add	sp, #8
    d8a4:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    d8a6:	ea53 0402 	orrs.w	r4, r3, r2
    d8aa:	d006      	beq.n	d8ba <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    d8ac:	9200      	str	r2, [sp, #0]
    d8ae:	9301      	str	r3, [sp, #4]
    d8b0:	4602      	mov	r2, r0
    d8b2:	4805      	ldr	r0, [pc, #20]	; (d8c8 <z_impl_k_sem_take+0x4c>)
    d8b4:	f000 f9ea 	bl	dc8c <z_pend_curr>
	return ret;
    d8b8:	e7f3      	b.n	d8a2 <z_impl_k_sem_take+0x26>
    d8ba:	f381 8811 	msr	BASEPRI, r1
    d8be:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    d8c2:	f06f 000f 	mvn.w	r0, #15
    d8c6:	e7ec      	b.n	d8a2 <z_impl_k_sem_take+0x26>
    d8c8:	20003c94 	.word	0x20003c94

0000d8cc <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
    d8cc:	b538      	push	{r3, r4, r5, lr}
    d8ce:	4604      	mov	r4, r0
	__asm__ volatile(
    d8d0:	f04f 0320 	mov.w	r3, #32
    d8d4:	f3ef 8511 	mrs	r5, BASEPRI
    d8d8:	f383 8812 	msr	BASEPRI_MAX, r3
    d8dc:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
    d8e0:	e005      	b.n	d8ee <z_impl_k_sem_reset+0x22>
    d8e2:	f06f 020a 	mvn.w	r2, #10
    d8e6:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		thread = z_unpend_first_thread(&sem->wait_q);
		if (thread == NULL) {
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
    d8ea:	f006 fff9 	bl	148e0 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
    d8ee:	4620      	mov	r0, r4
    d8f0:	f007 f8ac 	bl	14a4c <z_unpend_first_thread>
		if (thread == NULL) {
    d8f4:	2800      	cmp	r0, #0
    d8f6:	d1f4      	bne.n	d8e2 <z_impl_k_sem_reset+0x16>
	}
	sem->count = 0;
    d8f8:	2300      	movs	r3, #0
    d8fa:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    d8fc:	2102      	movs	r1, #2
    d8fe:	f104 0010 	add.w	r0, r4, #16
    d902:	f007 fb35 	bl	14f70 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
    d906:	4629      	mov	r1, r5
    d908:	4801      	ldr	r0, [pc, #4]	; (d910 <z_impl_k_sem_reset+0x44>)
    d90a:	f000 f871 	bl	d9f0 <z_reschedule>
}
    d90e:	bd38      	pop	{r3, r4, r5, pc}
    d910:	20003c94 	.word	0x20003c94

0000d914 <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    d914:	89c3      	ldrh	r3, [r0, #14]
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    d916:	2b7f      	cmp	r3, #127	; 0x7f
    d918:	d811      	bhi.n	d93e <sliceable+0x2a>
	int ret = slice_ticks;
    d91a:	4b0e      	ldr	r3, [pc, #56]	; (d954 <sliceable+0x40>)
    d91c:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    d91e:	b17b      	cbz	r3, d940 <sliceable+0x2c>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    d920:	f990 200e 	ldrsb.w	r2, [r0, #14]
    d924:	4b0c      	ldr	r3, [pc, #48]	; (d958 <sliceable+0x44>)
    d926:	681b      	ldr	r3, [r3, #0]
    d928:	429a      	cmp	r2, r3
    d92a:	db0c      	blt.n	d946 <sliceable+0x32>
	uint8_t state = thread->base.thread_state;
    d92c:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
    d92e:	f013 0f1f 	tst.w	r3, #31
    d932:	d10a      	bne.n	d94a <sliceable+0x36>
		&& !z_is_idle_thread_object(thread);
    d934:	4b09      	ldr	r3, [pc, #36]	; (d95c <sliceable+0x48>)
    d936:	4298      	cmp	r0, r3
    d938:	d009      	beq.n	d94e <sliceable+0x3a>
    d93a:	2301      	movs	r3, #1
    d93c:	e000      	b.n	d940 <sliceable+0x2c>
    d93e:	2300      	movs	r3, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    d940:	f003 0001 	and.w	r0, r3, #1
    d944:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    d946:	2300      	movs	r3, #0
    d948:	e7fa      	b.n	d940 <sliceable+0x2c>
    d94a:	2300      	movs	r3, #0
    d94c:	e7f8      	b.n	d940 <sliceable+0x2c>
    d94e:	2300      	movs	r3, #0
    d950:	e7f6      	b.n	d940 <sliceable+0x2c>
    d952:	bf00      	nop
    d954:	20003ca0 	.word	0x20003ca0
    d958:	20003c9c 	.word	0x20003c9c
    d95c:	20000b78 	.word	0x20000b78

0000d960 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    d960:	4b04      	ldr	r3, [pc, #16]	; (d974 <slice_timeout+0x14>)
    d962:	1ac0      	subs	r0, r0, r3
    d964:	10c0      	asrs	r0, r0, #3
    d966:	4b04      	ldr	r3, [pc, #16]	; (d978 <slice_timeout+0x18>)
    d968:	fb03 f000 	mul.w	r0, r3, r0

	slice_expired[cpu] = true;
    d96c:	4b03      	ldr	r3, [pc, #12]	; (d97c <slice_timeout+0x1c>)
    d96e:	2201      	movs	r2, #1
    d970:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    d972:	4770      	bx	lr
    d974:	20000ce8 	.word	0x20000ce8
    d978:	aaaaaaab 	.word	0xaaaaaaab
    d97c:	20003c98 	.word	0x20003c98

0000d980 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    d980:	f1b3 3fff 	cmp.w	r3, #4294967295
    d984:	bf08      	it	eq
    d986:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    d98a:	d100      	bne.n	d98e <add_thread_timeout+0xe>
    d98c:	4770      	bx	lr
{
    d98e:	b508      	push	{r3, lr}
    d990:	4902      	ldr	r1, [pc, #8]	; (d99c <add_thread_timeout+0x1c>)
    d992:	3018      	adds	r0, #24
    d994:	f000 fbd2 	bl	e13c <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    d998:	bd08      	pop	{r3, pc}
    d99a:	bf00      	nop
    d99c:	0001496d 	.word	0x0001496d

0000d9a0 <z_reset_time_slice>:
{
    d9a0:	b570      	push	{r4, r5, r6, lr}
    d9a2:	4605      	mov	r5, r0
	int cpu = _current_cpu->id;
    d9a4:	4b0d      	ldr	r3, [pc, #52]	; (d9dc <z_reset_time_slice+0x3c>)
    d9a6:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
    d9a8:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    d9ac:	4c0c      	ldr	r4, [pc, #48]	; (d9e0 <z_reset_time_slice+0x40>)
    d9ae:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    d9b2:	4620      	mov	r0, r4
    d9b4:	f007 f8d2 	bl	14b5c <z_abort_timeout>
	slice_expired[cpu] = false;
    d9b8:	4b0a      	ldr	r3, [pc, #40]	; (d9e4 <z_reset_time_slice+0x44>)
    d9ba:	2200      	movs	r2, #0
    d9bc:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    d9be:	4628      	mov	r0, r5
    d9c0:	f7ff ffa8 	bl	d914 <sliceable>
    d9c4:	b900      	cbnz	r0, d9c8 <z_reset_time_slice+0x28>
}
    d9c6:	bd70      	pop	{r4, r5, r6, pc}
	int ret = slice_ticks;
    d9c8:	4b07      	ldr	r3, [pc, #28]	; (d9e8 <z_reset_time_slice+0x48>)
    d9ca:	681a      	ldr	r2, [r3, #0]
			      K_TICKS(slice_time(curr) - 1));
    d9cc:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    d9ce:	17d3      	asrs	r3, r2, #31
    d9d0:	4906      	ldr	r1, [pc, #24]	; (d9ec <z_reset_time_slice+0x4c>)
    d9d2:	4620      	mov	r0, r4
    d9d4:	f000 fbb2 	bl	e13c <z_add_timeout>
}
    d9d8:	e7f5      	b.n	d9c6 <z_reset_time_slice+0x26>
    d9da:	bf00      	nop
    d9dc:	20003c6c 	.word	0x20003c6c
    d9e0:	20000ce8 	.word	0x20000ce8
    d9e4:	20003c98 	.word	0x20003c98
    d9e8:	20003ca0 	.word	0x20003ca0
    d9ec:	0000d961 	.word	0x0000d961

0000d9f0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    d9f0:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    d9f2:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    d9f4:	b959      	cbnz	r1, da0e <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    d9f6:	f3ef 8205 	mrs	r2, IPSR
    d9fa:	b942      	cbnz	r2, da0e <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
    d9fc:	4a06      	ldr	r2, [pc, #24]	; (da18 <z_reschedule+0x28>)
    d9fe:	6990      	ldr	r0, [r2, #24]
	return new_thread != _current;
    da00:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
    da02:	4290      	cmp	r0, r2
    da04:	d003      	beq.n	da0e <z_reschedule+0x1e>
	ret = arch_swap(key);
    da06:	4608      	mov	r0, r1
    da08:	f7fa fa70 	bl	7eec <arch_swap>
		z_swap(lock, key);
    da0c:	e003      	b.n	da16 <z_reschedule+0x26>
	__asm__ volatile(
    da0e:	f383 8811 	msr	BASEPRI, r3
    da12:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
    da16:	bd08      	pop	{r3, pc}
    da18:	20003c6c 	.word	0x20003c6c

0000da1c <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    da1c:	2300      	movs	r3, #0
	__asm__ volatile(
    da1e:	f04f 0220 	mov.w	r2, #32
    da22:	f3ef 8111 	mrs	r1, BASEPRI
    da26:	f382 8812 	msr	BASEPRI_MAX, r2
    da2a:	f3bf 8f6f 	isb	sy
    da2e:	e009      	b.n	da44 <k_sched_lock+0x28>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    da30:	4b06      	ldr	r3, [pc, #24]	; (da4c <k_sched_lock+0x30>)
    da32:	689a      	ldr	r2, [r3, #8]
    da34:	7bd3      	ldrb	r3, [r2, #15]
    da36:	3b01      	subs	r3, #1
    da38:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    da3a:	f381 8811 	msr	BASEPRI, r1
    da3e:	f3bf 8f6f 	isb	sy
    da42:	2301      	movs	r3, #1
    da44:	2b00      	cmp	r3, #0
    da46:	d0f3      	beq.n	da30 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    da48:	4770      	bx	lr
    da4a:	bf00      	nop
    da4c:	20003c6c 	.word	0x20003c6c

0000da50 <update_cache>:
{
    da50:	b538      	push	{r3, r4, r5, lr}
    da52:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    da54:	4810      	ldr	r0, [pc, #64]	; (da98 <update_cache+0x48>)
    da56:	f006 ff3c 	bl	148d2 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    da5a:	4605      	mov	r5, r0
    da5c:	b170      	cbz	r0, da7c <update_cache+0x2c>
	if (preempt_ok != 0) {
    da5e:	b984      	cbnz	r4, da82 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    da60:	4b0e      	ldr	r3, [pc, #56]	; (da9c <update_cache+0x4c>)
    da62:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    da64:	7b5a      	ldrb	r2, [r3, #13]
    da66:	f012 0f1f 	tst.w	r2, #31
    da6a:	d10a      	bne.n	da82 <update_cache+0x32>
	return node->next != NULL;
    da6c:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    da6e:	b942      	cbnz	r2, da82 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    da70:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    da72:	2a7f      	cmp	r2, #127	; 0x7f
    da74:	d905      	bls.n	da82 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    da76:	4a09      	ldr	r2, [pc, #36]	; (da9c <update_cache+0x4c>)
    da78:	6193      	str	r3, [r2, #24]
    da7a:	e00b      	b.n	da94 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    da7c:	4b07      	ldr	r3, [pc, #28]	; (da9c <update_cache+0x4c>)
    da7e:	68dd      	ldr	r5, [r3, #12]
    da80:	e7ed      	b.n	da5e <update_cache+0xe>
		if (thread != _current) {
    da82:	4b06      	ldr	r3, [pc, #24]	; (da9c <update_cache+0x4c>)
    da84:	689b      	ldr	r3, [r3, #8]
    da86:	42ab      	cmp	r3, r5
    da88:	d002      	beq.n	da90 <update_cache+0x40>
			z_reset_time_slice(thread);
    da8a:	4628      	mov	r0, r5
    da8c:	f7ff ff88 	bl	d9a0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    da90:	4b02      	ldr	r3, [pc, #8]	; (da9c <update_cache+0x4c>)
    da92:	619d      	str	r5, [r3, #24]
}
    da94:	bd38      	pop	{r3, r4, r5, pc}
    da96:	bf00      	nop
    da98:	20003c88 	.word	0x20003c88
    da9c:	20003c6c 	.word	0x20003c6c

0000daa0 <move_thread_to_end_of_prio_q>:
{
    daa0:	b538      	push	{r3, r4, r5, lr}
    daa2:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    daa4:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    daa6:	f990 300d 	ldrsb.w	r3, [r0, #13]
    daaa:	2b00      	cmp	r3, #0
    daac:	db0a      	blt.n	dac4 <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
    daae:	7b6b      	ldrb	r3, [r5, #13]
    dab0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    dab4:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    dab6:	4b1b      	ldr	r3, [pc, #108]	; (db24 <move_thread_to_end_of_prio_q+0x84>)
    dab8:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    dabc:	429c      	cmp	r4, r3
    dabe:	d110      	bne.n	dae2 <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    dac0:	2400      	movs	r4, #0
    dac2:	e00e      	b.n	dae2 <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    dac4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    dac8:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    daca:	4601      	mov	r1, r0
    dacc:	4816      	ldr	r0, [pc, #88]	; (db28 <move_thread_to_end_of_prio_q+0x88>)
    dace:	f006 fecc 	bl	1486a <z_priq_dumb_remove>
}
    dad2:	e7ec      	b.n	daae <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    dad4:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    dad6:	606b      	str	r3, [r5, #4]
	node->next = successor;
    dad8:	602c      	str	r4, [r5, #0]
	prev->next = node;
    dada:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    dadc:	6065      	str	r5, [r4, #4]
}
    dade:	e017      	b.n	db10 <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    dae0:	2400      	movs	r4, #0
    dae2:	b16c      	cbz	r4, db00 <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
    dae4:	4621      	mov	r1, r4
    dae6:	4628      	mov	r0, r5
    dae8:	f006 fe81 	bl	147ee <z_sched_prio_cmp>
    daec:	2800      	cmp	r0, #0
    daee:	dcf1      	bgt.n	dad4 <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    daf0:	2c00      	cmp	r4, #0
    daf2:	d0f6      	beq.n	dae2 <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
    daf4:	4b0b      	ldr	r3, [pc, #44]	; (db24 <move_thread_to_end_of_prio_q+0x84>)
    daf6:	6a1b      	ldr	r3, [r3, #32]
    daf8:	429c      	cmp	r4, r3
    dafa:	d0f1      	beq.n	dae0 <move_thread_to_end_of_prio_q+0x40>
    dafc:	6824      	ldr	r4, [r4, #0]
    dafe:	e7f0      	b.n	dae2 <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
    db00:	4b08      	ldr	r3, [pc, #32]	; (db24 <move_thread_to_end_of_prio_q+0x84>)
    db02:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
    db04:	f103 011c 	add.w	r1, r3, #28
    db08:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    db0a:	606a      	str	r2, [r5, #4]
	tail->next = node;
    db0c:	6015      	str	r5, [r2, #0]
	list->tail = node;
    db0e:	621d      	str	r5, [r3, #32]
	update_cache(thread == _current);
    db10:	4b04      	ldr	r3, [pc, #16]	; (db24 <move_thread_to_end_of_prio_q+0x84>)
    db12:	6898      	ldr	r0, [r3, #8]
    db14:	42a8      	cmp	r0, r5
    db16:	bf14      	ite	ne
    db18:	2000      	movne	r0, #0
    db1a:	2001      	moveq	r0, #1
    db1c:	f7ff ff98 	bl	da50 <update_cache>
}
    db20:	bd38      	pop	{r3, r4, r5, pc}
    db22:	bf00      	nop
    db24:	20003c6c 	.word	0x20003c6c
    db28:	20003c88 	.word	0x20003c88

0000db2c <z_time_slice>:
{
    db2c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    db2e:	f04f 0220 	mov.w	r2, #32
    db32:	f3ef 8311 	mrs	r3, BASEPRI
    db36:	f382 8812 	msr	BASEPRI_MAX, r2
    db3a:	f3bf 8f6f 	isb	sy
    db3e:	461d      	mov	r5, r3
	struct k_thread *curr = _current;
    db40:	4b14      	ldr	r3, [pc, #80]	; (db94 <z_time_slice+0x68>)
    db42:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    db44:	4b14      	ldr	r3, [pc, #80]	; (db98 <z_time_slice+0x6c>)
    db46:	681b      	ldr	r3, [r3, #0]
    db48:	42a3      	cmp	r3, r4
    db4a:	d017      	beq.n	db7c <z_time_slice+0x50>
	pending_current = NULL;
    db4c:	4b12      	ldr	r3, [pc, #72]	; (db98 <z_time_slice+0x6c>)
    db4e:	2200      	movs	r2, #0
    db50:	601a      	str	r2, [r3, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    db52:	4b10      	ldr	r3, [pc, #64]	; (db94 <z_time_slice+0x68>)
    db54:	7c1b      	ldrb	r3, [r3, #16]
    db56:	4a11      	ldr	r2, [pc, #68]	; (db9c <z_time_slice+0x70>)
    db58:	5cd3      	ldrb	r3, [r2, r3]
    db5a:	b153      	cbz	r3, db72 <z_time_slice+0x46>
    db5c:	4620      	mov	r0, r4
    db5e:	f7ff fed9 	bl	d914 <sliceable>
    db62:	b130      	cbz	r0, db72 <z_time_slice+0x46>
	uint8_t state = thread->base.thread_state;
    db64:	7b63      	ldrb	r3, [r4, #13]
		if (!z_is_thread_prevented_from_running(curr)) {
    db66:	f013 0f1f 	tst.w	r3, #31
    db6a:	d00f      	beq.n	db8c <z_time_slice+0x60>
		z_reset_time_slice(curr);
    db6c:	4620      	mov	r0, r4
    db6e:	f7ff ff17 	bl	d9a0 <z_reset_time_slice>
	__asm__ volatile(
    db72:	f385 8811 	msr	BASEPRI, r5
    db76:	f3bf 8f6f 	isb	sy
}
    db7a:	bd38      	pop	{r3, r4, r5, pc}
		z_reset_time_slice(curr);
    db7c:	4620      	mov	r0, r4
    db7e:	f7ff ff0f 	bl	d9a0 <z_reset_time_slice>
    db82:	f385 8811 	msr	BASEPRI, r5
    db86:	f3bf 8f6f 	isb	sy
		return;
    db8a:	e7f6      	b.n	db7a <z_time_slice+0x4e>
			move_thread_to_end_of_prio_q(curr);
    db8c:	4620      	mov	r0, r4
    db8e:	f7ff ff87 	bl	daa0 <move_thread_to_end_of_prio_q>
    db92:	e7eb      	b.n	db6c <z_time_slice+0x40>
    db94:	20003c6c 	.word	0x20003c6c
    db98:	20003c94 	.word	0x20003c94
    db9c:	20003c98 	.word	0x20003c98

0000dba0 <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
    dba0:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    dba2:	f990 300d 	ldrsb.w	r3, [r0, #13]
    dba6:	2b00      	cmp	r3, #0
    dba8:	db33      	blt.n	dc12 <ready_thread+0x72>
{
    dbaa:	b570      	push	{r4, r5, r6, lr}
    dbac:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    dbae:	f012 0f1f 	tst.w	r2, #31
    dbb2:	d101      	bne.n	dbb8 <ready_thread+0x18>
	return node->next != NULL;
    dbb4:	6986      	ldr	r6, [r0, #24]
    dbb6:	b106      	cbz	r6, dbba <ready_thread+0x1a>
}
    dbb8:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
    dbba:	f062 027f 	orn	r2, r2, #127	; 0x7f
    dbbe:	7342      	strb	r2, [r0, #13]
	return list->head == list;
    dbc0:	4b14      	ldr	r3, [pc, #80]	; (dc14 <ready_thread+0x74>)
    dbc2:	f853 5f1c 	ldr.w	r5, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    dbc6:	429d      	cmp	r5, r3
    dbc8:	d108      	bne.n	dbdc <ready_thread+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    dbca:	4635      	mov	r5, r6
    dbcc:	e006      	b.n	dbdc <ready_thread+0x3c>
	sys_dnode_t *const prev = successor->prev;
    dbce:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    dbd0:	6063      	str	r3, [r4, #4]
	node->next = successor;
    dbd2:	6025      	str	r5, [r4, #0]
	prev->next = node;
    dbd4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    dbd6:	606c      	str	r4, [r5, #4]
}
    dbd8:	e017      	b.n	dc0a <ready_thread+0x6a>
    dbda:	4635      	mov	r5, r6
    dbdc:	b16d      	cbz	r5, dbfa <ready_thread+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    dbde:	4629      	mov	r1, r5
    dbe0:	4620      	mov	r0, r4
    dbe2:	f006 fe04 	bl	147ee <z_sched_prio_cmp>
    dbe6:	2800      	cmp	r0, #0
    dbe8:	dcf1      	bgt.n	dbce <ready_thread+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    dbea:	2d00      	cmp	r5, #0
    dbec:	d0f6      	beq.n	dbdc <ready_thread+0x3c>
	return (node == list->tail) ? NULL : node->next;
    dbee:	4b09      	ldr	r3, [pc, #36]	; (dc14 <ready_thread+0x74>)
    dbf0:	6a1b      	ldr	r3, [r3, #32]
    dbf2:	429d      	cmp	r5, r3
    dbf4:	d0f1      	beq.n	dbda <ready_thread+0x3a>
    dbf6:	682d      	ldr	r5, [r5, #0]
    dbf8:	e7f0      	b.n	dbdc <ready_thread+0x3c>
	sys_dnode_t *const tail = list->tail;
    dbfa:	4b06      	ldr	r3, [pc, #24]	; (dc14 <ready_thread+0x74>)
    dbfc:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
    dbfe:	f103 011c 	add.w	r1, r3, #28
    dc02:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    dc04:	6062      	str	r2, [r4, #4]
	tail->next = node;
    dc06:	6014      	str	r4, [r2, #0]
	list->tail = node;
    dc08:	621c      	str	r4, [r3, #32]
		update_cache(0);
    dc0a:	2000      	movs	r0, #0
    dc0c:	f7ff ff20 	bl	da50 <update_cache>
}
    dc10:	e7d2      	b.n	dbb8 <ready_thread+0x18>
    dc12:	4770      	bx	lr
    dc14:	20003c6c 	.word	0x20003c6c

0000dc18 <z_sched_start>:
{
    dc18:	b510      	push	{r4, lr}
	__asm__ volatile(
    dc1a:	f04f 0320 	mov.w	r3, #32
    dc1e:	f3ef 8411 	mrs	r4, BASEPRI
    dc22:	f383 8812 	msr	BASEPRI_MAX, r3
    dc26:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    dc2a:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    dc2c:	f013 0f04 	tst.w	r3, #4
    dc30:	d104      	bne.n	dc3c <z_sched_start+0x24>
	__asm__ volatile(
    dc32:	f384 8811 	msr	BASEPRI, r4
    dc36:	f3bf 8f6f 	isb	sy
}
    dc3a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    dc3c:	f023 0304 	bic.w	r3, r3, #4
    dc40:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    dc42:	f7ff ffad 	bl	dba0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    dc46:	4621      	mov	r1, r4
    dc48:	4801      	ldr	r0, [pc, #4]	; (dc50 <z_sched_start+0x38>)
    dc4a:	f7ff fed1 	bl	d9f0 <z_reschedule>
    dc4e:	e7f4      	b.n	dc3a <z_sched_start+0x22>
    dc50:	20003ca4 	.word	0x20003ca4

0000dc54 <unready_thread>:
{
    dc54:	b510      	push	{r4, lr}
    dc56:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    dc58:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    dc5a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    dc5e:	2b00      	cmp	r3, #0
    dc60:	db08      	blt.n	dc74 <unready_thread+0x20>
	update_cache(thread == _current);
    dc62:	4b08      	ldr	r3, [pc, #32]	; (dc84 <unready_thread+0x30>)
    dc64:	6898      	ldr	r0, [r3, #8]
    dc66:	42a0      	cmp	r0, r4
    dc68:	bf14      	ite	ne
    dc6a:	2000      	movne	r0, #0
    dc6c:	2001      	moveq	r0, #1
    dc6e:	f7ff feef 	bl	da50 <update_cache>
}
    dc72:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    dc74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    dc78:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    dc7a:	4601      	mov	r1, r0
    dc7c:	4802      	ldr	r0, [pc, #8]	; (dc88 <unready_thread+0x34>)
    dc7e:	f006 fdf4 	bl	1486a <z_priq_dumb_remove>
}
    dc82:	e7ee      	b.n	dc62 <unready_thread+0xe>
    dc84:	20003c6c 	.word	0x20003c6c
    dc88:	20003c88 	.word	0x20003c88

0000dc8c <z_pend_curr>:
{
    dc8c:	b510      	push	{r4, lr}
    dc8e:	460c      	mov	r4, r1
    dc90:	4611      	mov	r1, r2
	pending_current = _current;
    dc92:	480a      	ldr	r0, [pc, #40]	; (dcbc <z_pend_curr+0x30>)
    dc94:	6882      	ldr	r2, [r0, #8]
    dc96:	4b0a      	ldr	r3, [pc, #40]	; (dcc0 <z_pend_curr+0x34>)
    dc98:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    dc9a:	f04f 0220 	mov.w	r2, #32
    dc9e:	f3ef 8311 	mrs	r3, BASEPRI
    dca2:	f382 8812 	msr	BASEPRI_MAX, r2
    dca6:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    dcaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    dcae:	6880      	ldr	r0, [r0, #8]
    dcb0:	f006 fea2 	bl	149f8 <pend_locked>
    dcb4:	4620      	mov	r0, r4
    dcb6:	f7fa f919 	bl	7eec <arch_swap>
}
    dcba:	bd10      	pop	{r4, pc}
    dcbc:	20003c6c 	.word	0x20003c6c
    dcc0:	20003c94 	.word	0x20003c94

0000dcc4 <z_set_prio>:
{
    dcc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dcc8:	4605      	mov	r5, r0
    dcca:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    dccc:	2300      	movs	r3, #0
    dcce:	f04f 0220 	mov.w	r2, #32
    dcd2:	f3ef 8611 	mrs	r6, BASEPRI
    dcd6:	f382 8812 	msr	BASEPRI_MAX, r2
    dcda:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    dcde:	4618      	mov	r0, r3
    dce0:	e029      	b.n	dd36 <z_set_prio+0x72>
	sys_dnode_t *const prev = successor->prev;
    dce2:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    dce4:	606b      	str	r3, [r5, #4]
	node->next = successor;
    dce6:	602c      	str	r4, [r5, #0]
	prev->next = node;
    dce8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    dcea:	6065      	str	r5, [r4, #4]
}
    dcec:	e017      	b.n	dd1e <z_set_prio+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    dcee:	4644      	mov	r4, r8
    dcf0:	b16c      	cbz	r4, dd0e <z_set_prio+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    dcf2:	4621      	mov	r1, r4
    dcf4:	4628      	mov	r0, r5
    dcf6:	f006 fd7a 	bl	147ee <z_sched_prio_cmp>
    dcfa:	2800      	cmp	r0, #0
    dcfc:	dcf1      	bgt.n	dce2 <z_set_prio+0x1e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    dcfe:	2c00      	cmp	r4, #0
    dd00:	d0f6      	beq.n	dcf0 <z_set_prio+0x2c>
	return (node == list->tail) ? NULL : node->next;
    dd02:	4b1d      	ldr	r3, [pc, #116]	; (dd78 <z_set_prio+0xb4>)
    dd04:	6a1b      	ldr	r3, [r3, #32]
    dd06:	429c      	cmp	r4, r3
    dd08:	d0f1      	beq.n	dcee <z_set_prio+0x2a>
    dd0a:	6824      	ldr	r4, [r4, #0]
    dd0c:	e7f0      	b.n	dcf0 <z_set_prio+0x2c>
	sys_dnode_t *const tail = list->tail;
    dd0e:	4b1a      	ldr	r3, [pc, #104]	; (dd78 <z_set_prio+0xb4>)
    dd10:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
    dd12:	f103 011c 	add.w	r1, r3, #28
    dd16:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    dd18:	606a      	str	r2, [r5, #4]
	tail->next = node;
    dd1a:	6015      	str	r5, [r2, #0]
	list->tail = node;
    dd1c:	621d      	str	r5, [r3, #32]
			update_cache(1);
    dd1e:	2001      	movs	r0, #1
    dd20:	f7ff fe96 	bl	da50 <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    dd24:	2001      	movs	r0, #1
    dd26:	e001      	b.n	dd2c <z_set_prio+0x68>
			thread->base.prio = prio;
    dd28:	73af      	strb	r7, [r5, #14]
    dd2a:	2000      	movs	r0, #0
	__asm__ volatile(
    dd2c:	f386 8811 	msr	BASEPRI, r6
    dd30:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    dd34:	2301      	movs	r3, #1
    dd36:	b9e3      	cbnz	r3, dd72 <z_set_prio+0xae>
	uint8_t state = thread->base.thread_state;
    dd38:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    dd3a:	f013 0f1f 	tst.w	r3, #31
    dd3e:	d1f3      	bne.n	dd28 <z_set_prio+0x64>
	return node->next != NULL;
    dd40:	f8d5 8018 	ldr.w	r8, [r5, #24]
    dd44:	f1b8 0f00 	cmp.w	r8, #0
    dd48:	d1ee      	bne.n	dd28 <z_set_prio+0x64>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    dd4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    dd4e:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
    dd50:	f8df 9028 	ldr.w	r9, [pc, #40]	; dd7c <z_set_prio+0xb8>
    dd54:	4629      	mov	r1, r5
    dd56:	4648      	mov	r0, r9
    dd58:	f006 fd87 	bl	1486a <z_priq_dumb_remove>
				thread->base.prio = prio;
    dd5c:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    dd5e:	7b6b      	ldrb	r3, [r5, #13]
    dd60:	f063 037f 	orn	r3, r3, #127	; 0x7f
    dd64:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    dd66:	f8d9 4000 	ldr.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    dd6a:	454c      	cmp	r4, r9
    dd6c:	d1c0      	bne.n	dcf0 <z_set_prio+0x2c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    dd6e:	4644      	mov	r4, r8
    dd70:	e7be      	b.n	dcf0 <z_set_prio+0x2c>
}
    dd72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dd76:	bf00      	nop
    dd78:	20003c6c 	.word	0x20003c6c
    dd7c:	20003c88 	.word	0x20003c88

0000dd80 <z_impl_k_thread_suspend>:
{
    dd80:	b538      	push	{r3, r4, r5, lr}
    dd82:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    dd84:	3018      	adds	r0, #24
    dd86:	f006 fee9 	bl	14b5c <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    dd8a:	2300      	movs	r3, #0
	__asm__ volatile(
    dd8c:	f04f 0220 	mov.w	r2, #32
    dd90:	f3ef 8511 	mrs	r5, BASEPRI
    dd94:	f382 8812 	msr	BASEPRI_MAX, r2
    dd98:	f3bf 8f6f 	isb	sy
    dd9c:	e010      	b.n	ddc0 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    dd9e:	7b63      	ldrb	r3, [r4, #13]
    dda0:	f043 0310 	orr.w	r3, r3, #16
    dda4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    dda6:	4b11      	ldr	r3, [pc, #68]	; (ddec <z_impl_k_thread_suspend+0x6c>)
    dda8:	6898      	ldr	r0, [r3, #8]
    ddaa:	42a0      	cmp	r0, r4
    ddac:	bf14      	ite	ne
    ddae:	2000      	movne	r0, #0
    ddb0:	2001      	moveq	r0, #1
    ddb2:	f7ff fe4d 	bl	da50 <update_cache>
	__asm__ volatile(
    ddb6:	f385 8811 	msr	BASEPRI, r5
    ddba:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    ddbe:	2301      	movs	r3, #1
    ddc0:	b963      	cbnz	r3, dddc <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    ddc2:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    ddc4:	f994 300d 	ldrsb.w	r3, [r4, #13]
    ddc8:	2b00      	cmp	r3, #0
    ddca:	dae8      	bge.n	dd9e <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ddcc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    ddd0:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    ddd2:	4621      	mov	r1, r4
    ddd4:	4806      	ldr	r0, [pc, #24]	; (ddf0 <z_impl_k_thread_suspend+0x70>)
    ddd6:	f006 fd48 	bl	1486a <z_priq_dumb_remove>
}
    ddda:	e7e0      	b.n	dd9e <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    dddc:	4b03      	ldr	r3, [pc, #12]	; (ddec <z_impl_k_thread_suspend+0x6c>)
    ddde:	689b      	ldr	r3, [r3, #8]
    dde0:	42a3      	cmp	r3, r4
    dde2:	d000      	beq.n	dde6 <z_impl_k_thread_suspend+0x66>
}
    dde4:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
    dde6:	f006 fd34 	bl	14852 <z_reschedule_unlocked>
}
    ddea:	e7fb      	b.n	dde4 <z_impl_k_thread_suspend+0x64>
    ddec:	20003c6c 	.word	0x20003c6c
    ddf0:	20003c88 	.word	0x20003c88

0000ddf4 <k_sched_unlock>:

void k_sched_unlock(void)
{
    ddf4:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    ddf6:	2300      	movs	r3, #0
	__asm__ volatile(
    ddf8:	f04f 0220 	mov.w	r2, #32
    ddfc:	f3ef 8411 	mrs	r4, BASEPRI
    de00:	f382 8812 	msr	BASEPRI_MAX, r2
    de04:	f3bf 8f6f 	isb	sy
    de08:	e00c      	b.n	de24 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    de0a:	4b09      	ldr	r3, [pc, #36]	; (de30 <k_sched_unlock+0x3c>)
    de0c:	689a      	ldr	r2, [r3, #8]
    de0e:	7bd3      	ldrb	r3, [r2, #15]
    de10:	3301      	adds	r3, #1
    de12:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    de14:	2000      	movs	r0, #0
    de16:	f7ff fe1b 	bl	da50 <update_cache>
	__asm__ volatile(
    de1a:	f384 8811 	msr	BASEPRI, r4
    de1e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    de22:	2301      	movs	r3, #1
    de24:	2b00      	cmp	r3, #0
    de26:	d0f0      	beq.n	de0a <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
    de28:	f006 fd13 	bl	14852 <z_reschedule_unlocked>
}
    de2c:	bd10      	pop	{r4, pc}
    de2e:	bf00      	nop
    de30:	20003c6c 	.word	0x20003c6c

0000de34 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    de34:	7b43      	ldrb	r3, [r0, #13]
    de36:	f013 0f08 	tst.w	r3, #8
    de3a:	d12a      	bne.n	de92 <end_thread+0x5e>
{
    de3c:	b510      	push	{r4, lr}
    de3e:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
    de40:	f043 0208 	orr.w	r2, r3, #8
    de44:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    de46:	f023 0220 	bic.w	r2, r3, #32
    de4a:	f042 0208 	orr.w	r2, r2, #8
    de4e:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
    de50:	f012 0f80 	tst.w	r2, #128	; 0x80
    de54:	d113      	bne.n	de7e <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    de56:	68a3      	ldr	r3, [r4, #8]
    de58:	b113      	cbz	r3, de60 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
    de5a:	4620      	mov	r0, r4
    de5c:	f006 fd0d 	bl	1487a <unpend_thread_no_timeout>
    de60:	f104 0018 	add.w	r0, r4, #24
    de64:	f006 fe7a 	bl	14b5c <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    de68:	f104 0058 	add.w	r0, r4, #88	; 0x58
    de6c:	f006 fd84 	bl	14978 <unpend_all>
		update_cache(1);
    de70:	2001      	movs	r0, #1
    de72:	f7ff fded 	bl	da50 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    de76:	4620      	mov	r0, r4
    de78:	f7ff fac6 	bl	d408 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    de7c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    de7e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    de82:	f043 0308 	orr.w	r3, r3, #8
    de86:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    de88:	4601      	mov	r1, r0
    de8a:	4802      	ldr	r0, [pc, #8]	; (de94 <end_thread+0x60>)
    de8c:	f006 fced 	bl	1486a <z_priq_dumb_remove>
}
    de90:	e7e1      	b.n	de56 <end_thread+0x22>
    de92:	4770      	bx	lr
    de94:	20003c88 	.word	0x20003c88

0000de98 <z_sched_init>:
{
    de98:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    de9a:	4802      	ldr	r0, [pc, #8]	; (dea4 <z_sched_init+0xc>)
    de9c:	f006 fdf8 	bl	14a90 <init_ready_q>
}
    dea0:	bd08      	pop	{r3, pc}
    dea2:	bf00      	nop
    dea4:	20003c84 	.word	0x20003c84

0000dea8 <z_impl_k_yield>:
{
    dea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    deaa:	f04f 0320 	mov.w	r3, #32
    deae:	f3ef 8611 	mrs	r6, BASEPRI
    deb2:	f383 8812 	msr	BASEPRI_MAX, r3
    deb6:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    deba:	4c1d      	ldr	r4, [pc, #116]	; (df30 <z_impl_k_yield+0x88>)
    debc:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    debe:	7b4b      	ldrb	r3, [r1, #13]
    dec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    dec4:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    dec6:	f104 071c 	add.w	r7, r4, #28
    deca:	4638      	mov	r0, r7
    decc:	f006 fccd 	bl	1486a <z_priq_dumb_remove>
	queue_thread(_current);
    ded0:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    ded2:	7b6b      	ldrb	r3, [r5, #13]
    ded4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ded8:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    deda:	69e4      	ldr	r4, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    dedc:	42bc      	cmp	r4, r7
    dede:	d108      	bne.n	def2 <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    dee0:	2400      	movs	r4, #0
    dee2:	e006      	b.n	def2 <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
    dee4:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    dee6:	606b      	str	r3, [r5, #4]
	node->next = successor;
    dee8:	602c      	str	r4, [r5, #0]
	prev->next = node;
    deea:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    deec:	6065      	str	r5, [r4, #4]
}
    deee:	e017      	b.n	df20 <z_impl_k_yield+0x78>
    def0:	2400      	movs	r4, #0
    def2:	b16c      	cbz	r4, df10 <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
    def4:	4621      	mov	r1, r4
    def6:	4628      	mov	r0, r5
    def8:	f006 fc79 	bl	147ee <z_sched_prio_cmp>
    defc:	2800      	cmp	r0, #0
    defe:	dcf1      	bgt.n	dee4 <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    df00:	2c00      	cmp	r4, #0
    df02:	d0f6      	beq.n	def2 <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
    df04:	4b0a      	ldr	r3, [pc, #40]	; (df30 <z_impl_k_yield+0x88>)
    df06:	6a1b      	ldr	r3, [r3, #32]
    df08:	429c      	cmp	r4, r3
    df0a:	d0f1      	beq.n	def0 <z_impl_k_yield+0x48>
    df0c:	6824      	ldr	r4, [r4, #0]
    df0e:	e7f0      	b.n	def2 <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
    df10:	4b07      	ldr	r3, [pc, #28]	; (df30 <z_impl_k_yield+0x88>)
    df12:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
    df14:	f103 011c 	add.w	r1, r3, #28
    df18:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    df1a:	606a      	str	r2, [r5, #4]
	tail->next = node;
    df1c:	6015      	str	r5, [r2, #0]
	list->tail = node;
    df1e:	621d      	str	r5, [r3, #32]
	update_cache(1);
    df20:	2001      	movs	r0, #1
    df22:	f7ff fd95 	bl	da50 <update_cache>
    df26:	4630      	mov	r0, r6
    df28:	f7f9 ffe0 	bl	7eec <arch_swap>
}
    df2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    df2e:	bf00      	nop
    df30:	20003c6c 	.word	0x20003c6c

0000df34 <z_tick_sleep>:
{
    df34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
    df38:	ea50 0301 	orrs.w	r3, r0, r1
    df3c:	d038      	beq.n	dfb0 <z_tick_sleep+0x7c>
    df3e:	4604      	mov	r4, r0
    df40:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
    df42:	f06f 0301 	mvn.w	r3, #1
    df46:	1a1b      	subs	r3, r3, r0
    df48:	f04f 32ff 	mov.w	r2, #4294967295
    df4c:	eb62 0201 	sbc.w	r2, r2, r1
    df50:	2b01      	cmp	r3, #1
    df52:	f172 0200 	sbcs.w	r2, r2, #0
    df56:	db2f      	blt.n	dfb8 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    df58:	f06f 0501 	mvn.w	r5, #1
    df5c:	1a2d      	subs	r5, r5, r0
    df5e:	f04f 0320 	mov.w	r3, #32
    df62:	f3ef 8811 	mrs	r8, BASEPRI
    df66:	f383 8812 	msr	BASEPRI_MAX, r3
    df6a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    df6e:	4f14      	ldr	r7, [pc, #80]	; (dfc0 <z_tick_sleep+0x8c>)
    df70:	68b8      	ldr	r0, [r7, #8]
    df72:	4b14      	ldr	r3, [pc, #80]	; (dfc4 <z_tick_sleep+0x90>)
    df74:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    df76:	f7ff fe6d 	bl	dc54 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    df7a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    df7c:	4622      	mov	r2, r4
    df7e:	4633      	mov	r3, r6
    df80:	4911      	ldr	r1, [pc, #68]	; (dfc8 <z_tick_sleep+0x94>)
    df82:	3018      	adds	r0, #24
    df84:	f000 f8da 	bl	e13c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    df88:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    df8a:	7b53      	ldrb	r3, [r2, #13]
    df8c:	f043 0310 	orr.w	r3, r3, #16
    df90:	7353      	strb	r3, [r2, #13]
    df92:	4640      	mov	r0, r8
    df94:	f7f9 ffaa 	bl	7eec <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    df98:	f006 fe15 	bl	14bc6 <sys_clock_tick_get_32>
    df9c:	1a28      	subs	r0, r5, r0
    df9e:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    dfa2:	2801      	cmp	r0, #1
    dfa4:	f173 0300 	sbcs.w	r3, r3, #0
    dfa8:	da00      	bge.n	dfac <z_tick_sleep+0x78>
	return 0;
    dfaa:	2000      	movs	r0, #0
}
    dfac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    dfb0:	f7ff ff7a 	bl	dea8 <z_impl_k_yield>
		return 0;
    dfb4:	2000      	movs	r0, #0
    dfb6:	e7f9      	b.n	dfac <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    dfb8:	f006 fe05 	bl	14bc6 <sys_clock_tick_get_32>
    dfbc:	1905      	adds	r5, r0, r4
    dfbe:	e7ce      	b.n	df5e <z_tick_sleep+0x2a>
    dfc0:	20003c6c 	.word	0x20003c6c
    dfc4:	20003c94 	.word	0x20003c94
    dfc8:	0001496d 	.word	0x0001496d

0000dfcc <z_impl_k_sleep>:
{
    dfcc:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    dfce:	f1b1 3fff 	cmp.w	r1, #4294967295
    dfd2:	bf08      	it	eq
    dfd4:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    dfd8:	d018      	beq.n	e00c <z_impl_k_sleep+0x40>
	ticks = z_tick_sleep(ticks);
    dfda:	f7ff ffab 	bl	df34 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    dfde:	17c2      	asrs	r2, r0, #31
    dfe0:	0151      	lsls	r1, r2, #5
    dfe2:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    dfe6:	0143      	lsls	r3, r0, #5
    dfe8:	1a1b      	subs	r3, r3, r0
    dfea:	eb61 0102 	sbc.w	r1, r1, r2
    dfee:	0089      	lsls	r1, r1, #2
    dff0:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
    dff4:	009b      	lsls	r3, r3, #2
    dff6:	181b      	adds	r3, r3, r0
    dff8:	eb42 0201 	adc.w	r2, r2, r1
    dffc:	00d2      	lsls	r2, r2, #3
    dffe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    e002:	f3c3 3310 	ubfx	r3, r3, #12, #17
    e006:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
    e00a:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
    e00c:	4b03      	ldr	r3, [pc, #12]	; (e01c <z_impl_k_sleep+0x50>)
    e00e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    e010:	f7ff feb6 	bl	dd80 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    e014:	f04f 30ff 	mov.w	r0, #4294967295
    e018:	e7f7      	b.n	e00a <z_impl_k_sleep+0x3e>
    e01a:	bf00      	nop
    e01c:	20003c6c 	.word	0x20003c6c

0000e020 <z_impl_z_current_get>:
}
    e020:	4b01      	ldr	r3, [pc, #4]	; (e028 <z_impl_z_current_get+0x8>)
    e022:	6898      	ldr	r0, [r3, #8]
    e024:	4770      	bx	lr
    e026:	bf00      	nop
    e028:	20003c6c 	.word	0x20003c6c

0000e02c <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    e02c:	b570      	push	{r4, r5, r6, lr}
    e02e:	f04f 0320 	mov.w	r3, #32
    e032:	f3ef 8511 	mrs	r5, BASEPRI
    e036:	f383 8812 	msr	BASEPRI_MAX, r3
    e03a:	f3bf 8f6f 	isb	sy
    e03e:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    e040:	7b03      	ldrb	r3, [r0, #12]
    e042:	f013 0f01 	tst.w	r3, #1
    e046:	d109      	bne.n	e05c <z_thread_abort+0x30>
    e048:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    e04a:	7b43      	ldrb	r3, [r0, #13]
    e04c:	f013 0f08 	tst.w	r3, #8
    e050:	d00f      	beq.n	e072 <z_thread_abort+0x46>
	__asm__ volatile(
    e052:	f385 8811 	msr	BASEPRI, r5
    e056:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
    e05a:	e009      	b.n	e070 <z_thread_abort+0x44>
    e05c:	f385 8811 	msr	BASEPRI, r5
    e060:	f3bf 8f6f 	isb	sy
		k_panic();
    e064:	4040      	eors	r0, r0
    e066:	f380 8811 	msr	BASEPRI, r0
    e06a:	f04f 0004 	mov.w	r0, #4
    e06e:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    e070:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
    e072:	f7ff fedf 	bl	de34 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    e076:	4b08      	ldr	r3, [pc, #32]	; (e098 <z_thread_abort+0x6c>)
    e078:	689b      	ldr	r3, [r3, #8]
    e07a:	42a3      	cmp	r3, r4
    e07c:	d004      	beq.n	e088 <z_thread_abort+0x5c>
    e07e:	f386 8811 	msr	BASEPRI, r6
    e082:	f3bf 8f6f 	isb	sy
    e086:	e7f3      	b.n	e070 <z_thread_abort+0x44>
    e088:	f3ef 8305 	mrs	r3, IPSR
    e08c:	2b00      	cmp	r3, #0
    e08e:	d1f6      	bne.n	e07e <z_thread_abort+0x52>
    e090:	4628      	mov	r0, r5
    e092:	f7f9 ff2b 	bl	7eec <arch_swap>
	return ret;
    e096:	e7f2      	b.n	e07e <z_thread_abort+0x52>
    e098:	20003c6c 	.word	0x20003c6c

0000e09c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    e09c:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
    e0a0:	b083      	sub	sp, #12
    e0a2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    e0a4:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
    e0a8:	e9cd bc00 	strd	fp, ip, [sp]
    e0ac:	f7ff fdee 	bl	dc8c <z_pend_curr>

	if (data != NULL) {
    e0b0:	b11c      	cbz	r4, e0ba <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
    e0b2:	4b03      	ldr	r3, [pc, #12]	; (e0c0 <z_sched_wait+0x24>)
    e0b4:	689b      	ldr	r3, [r3, #8]
    e0b6:	695b      	ldr	r3, [r3, #20]
    e0b8:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    e0ba:	b003      	add	sp, #12
    e0bc:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
    e0c0:	20003c6c 	.word	0x20003c6c

0000e0c4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    e0c4:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    e0c6:	4806      	ldr	r0, [pc, #24]	; (e0e0 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    e0c8:	4a06      	ldr	r2, [pc, #24]	; (e0e4 <z_data_copy+0x20>)
    e0ca:	1a12      	subs	r2, r2, r0
    e0cc:	4906      	ldr	r1, [pc, #24]	; (e0e8 <z_data_copy+0x24>)
    e0ce:	f006 fadd 	bl	1468c <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    e0d2:	4a06      	ldr	r2, [pc, #24]	; (e0ec <z_data_copy+0x28>)
    e0d4:	4906      	ldr	r1, [pc, #24]	; (e0f0 <z_data_copy+0x2c>)
    e0d6:	4807      	ldr	r0, [pc, #28]	; (e0f4 <z_data_copy+0x30>)
    e0d8:	f006 fad8 	bl	1468c <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    e0dc:	bd08      	pop	{r3, pc}
    e0de:	bf00      	nop
    e0e0:	20000000 	.word	0x20000000
    e0e4:	20000360 	.word	0x20000360
    e0e8:	00018de0 	.word	0x00018de0
    e0ec:	00000000 	.word	0x00000000
    e0f0:	00018de0 	.word	0x00018de0
    e0f4:	20000000 	.word	0x20000000

0000e0f8 <first>:
	return list->head == list;
    e0f8:	4b03      	ldr	r3, [pc, #12]	; (e108 <first+0x10>)
    e0fa:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e0fc:	4298      	cmp	r0, r3
    e0fe:	d000      	beq.n	e102 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    e100:	4770      	bx	lr
    e102:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    e104:	e7fc      	b.n	e100 <first+0x8>
    e106:	bf00      	nop
    e108:	20000244 	.word	0x20000244

0000e10c <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    e10c:	b130      	cbz	r0, e11c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    e10e:	4a04      	ldr	r2, [pc, #16]	; (e120 <next+0x14>)
    e110:	6852      	ldr	r2, [r2, #4]
    e112:	4290      	cmp	r0, r2
    e114:	d001      	beq.n	e11a <next+0xe>
    e116:	6800      	ldr	r0, [r0, #0]
    e118:	4770      	bx	lr
    e11a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    e11c:	4770      	bx	lr
    e11e:	bf00      	nop
    e120:	20000244 	.word	0x20000244

0000e124 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    e124:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    e126:	4b04      	ldr	r3, [pc, #16]	; (e138 <elapsed+0x14>)
    e128:	681b      	ldr	r3, [r3, #0]
    e12a:	b10b      	cbz	r3, e130 <elapsed+0xc>
    e12c:	2000      	movs	r0, #0
}
    e12e:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    e130:	f7fd fe18 	bl	bd64 <sys_clock_elapsed>
    e134:	e7fb      	b.n	e12e <elapsed+0xa>
    e136:	bf00      	nop
    e138:	20003ca4 	.word	0x20003ca4

0000e13c <z_add_timeout>:
}

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e13c:	f1b3 3fff 	cmp.w	r3, #4294967295
    e140:	bf08      	it	eq
    e142:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    e146:	d074      	beq.n	e232 <z_add_timeout+0xf6>
{
    e148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e14c:	4604      	mov	r4, r0
    e14e:	4692      	mov	sl, r2
    e150:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    e152:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    e154:	2300      	movs	r3, #0
	__asm__ volatile(
    e156:	f04f 0220 	mov.w	r2, #32
    e15a:	f3ef 8711 	mrs	r7, BASEPRI
    e15e:	f382 8812 	msr	BASEPRI_MAX, r2
    e162:	f3bf 8f6f 	isb	sy
    e166:	e026      	b.n	e1b6 <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    e168:	f11a 0801 	adds.w	r8, sl, #1
    e16c:	f145 0900 	adc.w	r9, r5, #0
    e170:	f7ff ffd8 	bl	e124 <elapsed>
    e174:	eb18 0300 	adds.w	r3, r8, r0
    e178:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    e17c:	6123      	str	r3, [r4, #16]
    e17e:	6160      	str	r0, [r4, #20]
    e180:	e03b      	b.n	e1fa <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    e182:	1a52      	subs	r2, r2, r1
    e184:	eb66 0303 	sbc.w	r3, r6, r3
    e188:	6102      	str	r2, [r0, #16]
    e18a:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    e18c:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    e18e:	6063      	str	r3, [r4, #4]
	node->next = successor;
    e190:	6020      	str	r0, [r4, #0]
	prev->next = node;
    e192:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    e194:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    e196:	e005      	b.n	e1a4 <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
    e198:	4b26      	ldr	r3, [pc, #152]	; (e234 <z_add_timeout+0xf8>)
    e19a:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    e19c:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    e19e:	6062      	str	r2, [r4, #4]
	tail->next = node;
    e1a0:	6014      	str	r4, [r2, #0]
	list->tail = node;
    e1a2:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    e1a4:	f7ff ffa8 	bl	e0f8 <first>
    e1a8:	4284      	cmp	r4, r0
    e1aa:	d03a      	beq.n	e222 <z_add_timeout+0xe6>
	__asm__ volatile(
    e1ac:	f387 8811 	msr	BASEPRI, r7
    e1b0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    e1b4:	2301      	movs	r3, #1
    e1b6:	2b00      	cmp	r3, #0
    e1b8:	d139      	bne.n	e22e <z_add_timeout+0xf2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    e1ba:	4653      	mov	r3, sl
    e1bc:	f06f 0101 	mvn.w	r1, #1
    e1c0:	ebb1 010a 	subs.w	r1, r1, sl
    e1c4:	f04f 30ff 	mov.w	r0, #4294967295
    e1c8:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    e1cc:	2a00      	cmp	r2, #0
    e1ce:	dbcb      	blt.n	e168 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    e1d0:	4a19      	ldr	r2, [pc, #100]	; (e238 <z_add_timeout+0xfc>)
    e1d2:	6811      	ldr	r1, [r2, #0]
    e1d4:	6852      	ldr	r2, [r2, #4]
    e1d6:	185b      	adds	r3, r3, r1
    e1d8:	eb42 0205 	adc.w	r2, r2, r5
    e1dc:	f06f 0101 	mvn.w	r1, #1
    e1e0:	1ac9      	subs	r1, r1, r3
    e1e2:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
    e1e6:	4608      	mov	r0, r1
    e1e8:	461a      	mov	r2, r3
    e1ea:	2901      	cmp	r1, #1
    e1ec:	f173 0300 	sbcs.w	r3, r3, #0
    e1f0:	da01      	bge.n	e1f6 <z_add_timeout+0xba>
    e1f2:	2001      	movs	r0, #1
    e1f4:	2200      	movs	r2, #0
    e1f6:	6120      	str	r0, [r4, #16]
    e1f8:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    e1fa:	f7ff ff7d 	bl	e0f8 <first>
    e1fe:	2800      	cmp	r0, #0
    e200:	d0ca      	beq.n	e198 <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
    e202:	6902      	ldr	r2, [r0, #16]
    e204:	6946      	ldr	r6, [r0, #20]
    e206:	6921      	ldr	r1, [r4, #16]
    e208:	6963      	ldr	r3, [r4, #20]
    e20a:	4291      	cmp	r1, r2
    e20c:	eb73 0e06 	sbcs.w	lr, r3, r6
    e210:	dbb7      	blt.n	e182 <z_add_timeout+0x46>
			to->dticks -= t->dticks;
    e212:	1a89      	subs	r1, r1, r2
    e214:	eb63 0306 	sbc.w	r3, r3, r6
    e218:	6121      	str	r1, [r4, #16]
    e21a:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    e21c:	f7ff ff76 	bl	e10c <next>
    e220:	e7ed      	b.n	e1fe <z_add_timeout+0xc2>
			sys_clock_set_timeout(next_timeout(), false);
    e222:	f006 fc7e 	bl	14b22 <next_timeout>
    e226:	2100      	movs	r1, #0
    e228:	f7fd fd60 	bl	bcec <sys_clock_set_timeout>
    e22c:	e7be      	b.n	e1ac <z_add_timeout+0x70>
		}
	}
}
    e22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e232:	4770      	bx	lr
    e234:	20000244 	.word	0x20000244
    e238:	20000d00 	.word	0x20000d00

0000e23c <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    e23c:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    e23e:	f04f 0320 	mov.w	r3, #32
    e242:	f3ef 8611 	mrs	r6, BASEPRI
    e246:	f383 8812 	msr	BASEPRI_MAX, r3
    e24a:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    e24e:	4b2b      	ldr	r3, [pc, #172]	; (e2fc <sys_clock_announce+0xc0>)
    e250:	6018      	str	r0, [r3, #0]

	struct _timeout *t = first();
    e252:	f7ff ff51 	bl	e0f8 <first>
    e256:	4604      	mov	r4, r0

	for (t = first();
    e258:	e024      	b.n	e2a4 <sys_clock_announce+0x68>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
    e25a:	4a29      	ldr	r2, [pc, #164]	; (e300 <sys_clock_announce+0xc4>)
    e25c:	6813      	ldr	r3, [r2, #0]
    e25e:	6851      	ldr	r1, [r2, #4]
    e260:	195b      	adds	r3, r3, r5
    e262:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
    e266:	6013      	str	r3, [r2, #0]
    e268:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
    e26a:	2200      	movs	r2, #0
    e26c:	2300      	movs	r3, #0
    e26e:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    e272:	4620      	mov	r0, r4
    e274:	f006 fc3e 	bl	14af4 <remove_timeout>
	__asm__ volatile(
    e278:	f386 8811 	msr	BASEPRI, r6
    e27c:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    e280:	68a3      	ldr	r3, [r4, #8]
    e282:	4620      	mov	r0, r4
    e284:	4798      	blx	r3
	__asm__ volatile(
    e286:	f04f 0320 	mov.w	r3, #32
    e28a:	f3ef 8611 	mrs	r6, BASEPRI
    e28e:	f383 8812 	msr	BASEPRI_MAX, r3
    e292:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
    e296:	4a19      	ldr	r2, [pc, #100]	; (e2fc <sys_clock_announce+0xc0>)
    e298:	6813      	ldr	r3, [r2, #0]
    e29a:	1b5b      	subs	r3, r3, r5
    e29c:	6013      	str	r3, [r2, #0]
	     t = first()) {
    e29e:	f7ff ff2b 	bl	e0f8 <first>
    e2a2:	4604      	mov	r4, r0
	     (t != NULL) && (t->dticks <= announce_remaining);
    e2a4:	b13c      	cbz	r4, e2b6 <sys_clock_announce+0x7a>
    e2a6:	6925      	ldr	r5, [r4, #16]
    e2a8:	6961      	ldr	r1, [r4, #20]
    e2aa:	4b14      	ldr	r3, [pc, #80]	; (e2fc <sys_clock_announce+0xc0>)
    e2ac:	681a      	ldr	r2, [r3, #0]
    e2ae:	17d3      	asrs	r3, r2, #31
    e2b0:	42aa      	cmp	r2, r5
    e2b2:	418b      	sbcs	r3, r1
    e2b4:	dad1      	bge.n	e25a <sys_clock_announce+0x1e>
	}

	if (t != NULL) {
    e2b6:	b144      	cbz	r4, e2ca <sys_clock_announce+0x8e>
		t->dticks -= announce_remaining;
    e2b8:	6923      	ldr	r3, [r4, #16]
    e2ba:	6962      	ldr	r2, [r4, #20]
    e2bc:	490f      	ldr	r1, [pc, #60]	; (e2fc <sys_clock_announce+0xc0>)
    e2be:	6809      	ldr	r1, [r1, #0]
    e2c0:	1a5b      	subs	r3, r3, r1
    e2c2:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    e2c6:	6123      	str	r3, [r4, #16]
    e2c8:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    e2ca:	4a0d      	ldr	r2, [pc, #52]	; (e300 <sys_clock_announce+0xc4>)
    e2cc:	4d0b      	ldr	r5, [pc, #44]	; (e2fc <sys_clock_announce+0xc0>)
    e2ce:	6828      	ldr	r0, [r5, #0]
    e2d0:	6813      	ldr	r3, [r2, #0]
    e2d2:	6851      	ldr	r1, [r2, #4]
    e2d4:	181b      	adds	r3, r3, r0
    e2d6:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    e2da:	6013      	str	r3, [r2, #0]
    e2dc:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    e2de:	2400      	movs	r4, #0
    e2e0:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    e2e2:	f006 fc1e 	bl	14b22 <next_timeout>
    e2e6:	4621      	mov	r1, r4
    e2e8:	f7fd fd00 	bl	bcec <sys_clock_set_timeout>
	__asm__ volatile(
    e2ec:	f386 8811 	msr	BASEPRI, r6
    e2f0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
    e2f4:	f7ff fc1a 	bl	db2c <z_time_slice>
#endif
}
    e2f8:	bd70      	pop	{r4, r5, r6, pc}
    e2fa:	bf00      	nop
    e2fc:	20003ca4 	.word	0x20003ca4
    e300:	20000d00 	.word	0x20000d00

0000e304 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    e304:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    e306:	2200      	movs	r2, #0
	__asm__ volatile(
    e308:	f04f 0320 	mov.w	r3, #32
    e30c:	f3ef 8411 	mrs	r4, BASEPRI
    e310:	f383 8812 	msr	BASEPRI_MAX, r3
    e314:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    e318:	4613      	mov	r3, r2
    e31a:	4611      	mov	r1, r2
    e31c:	e00c      	b.n	e338 <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
    e31e:	f7ff ff01 	bl	e124 <elapsed>
    e322:	4a07      	ldr	r2, [pc, #28]	; (e340 <sys_clock_tick_get+0x3c>)
    e324:	6813      	ldr	r3, [r2, #0]
    e326:	6851      	ldr	r1, [r2, #4]
    e328:	18c3      	adds	r3, r0, r3
    e32a:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
    e32e:	f384 8811 	msr	BASEPRI, r4
    e332:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    e336:	2201      	movs	r2, #1
    e338:	2a00      	cmp	r2, #0
    e33a:	d0f0      	beq.n	e31e <sys_clock_tick_get+0x1a>
	}
	return t;
}
    e33c:	4618      	mov	r0, r3
    e33e:	bd10      	pop	{r4, pc}
    e340:	20000d00 	.word	0x20000d00

0000e344 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    e344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    e346:	f04f 0220 	mov.w	r2, #32
    e34a:	f3ef 8311 	mrs	r3, BASEPRI
    e34e:	f382 8812 	msr	BASEPRI_MAX, r2
    e352:	f3bf 8f6f 	isb	sy
    e356:	461a      	mov	r2, r3
    e358:	461d      	mov	r5, r3
	return node->next != NULL;
    e35a:	6803      	ldr	r3, [r0, #0]
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
    e35c:	b123      	cbz	r3, e368 <z_timer_expiration_handler+0x24>
	__asm__ volatile(
    e35e:	f382 8811 	msr	BASEPRI, r2
    e362:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    e366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e368:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    e36a:	6a82      	ldr	r2, [r0, #40]	; 0x28
    e36c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    e36e:	ea52 0103 	orrs.w	r1, r2, r3
    e372:	d005      	beq.n	e380 <z_timer_expiration_handler+0x3c>
    e374:	f1b3 3fff 	cmp.w	r3, #4294967295
    e378:	bf08      	it	eq
    e37a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    e37e:	d129      	bne.n	e3d4 <z_timer_expiration_handler+0x90>
	timer->status += 1U;
    e380:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e382:	3301      	adds	r3, #1
    e384:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
    e386:	6a23      	ldr	r3, [r4, #32]
    e388:	b17b      	cbz	r3, e3aa <z_timer_expiration_handler+0x66>
    e38a:	f385 8811 	msr	BASEPRI, r5
    e38e:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
    e392:	6a23      	ldr	r3, [r4, #32]
    e394:	4620      	mov	r0, r4
    e396:	4798      	blx	r3
	__asm__ volatile(
    e398:	f04f 0220 	mov.w	r2, #32
    e39c:	f3ef 8311 	mrs	r3, BASEPRI
    e3a0:	f382 8812 	msr	BASEPRI_MAX, r2
    e3a4:	f3bf 8f6f 	isb	sy
    e3a8:	461d      	mov	r5, r3
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    e3aa:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    e3ae:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e3b0:	42a3      	cmp	r3, r4
    e3b2:	d03f      	beq.n	e434 <z_timer_expiration_handler+0xf0>
	if (thread == NULL) {
    e3b4:	2c00      	cmp	r4, #0
    e3b6:	d03d      	beq.n	e434 <z_timer_expiration_handler+0xf0>
	z_unpend_thread_no_timeout(thread);
    e3b8:	4620      	mov	r0, r4
    e3ba:	f006 fa22 	bl	14802 <z_unpend_thread_no_timeout>
    e3be:	2300      	movs	r3, #0
    e3c0:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	__asm__ volatile(
    e3c4:	f385 8811 	msr	BASEPRI, r5
    e3c8:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    e3cc:	4620      	mov	r0, r4
    e3ce:	f006 fa87 	bl	148e0 <z_ready_thread>
    e3d2:	e7c8      	b.n	e366 <z_timer_expiration_handler+0x22>
		next.ticks = MAX(next.ticks - 1, 0);
    e3d4:	4616      	mov	r6, r2
    e3d6:	461f      	mov	r7, r3
    e3d8:	2a01      	cmp	r2, #1
    e3da:	f173 0300 	sbcs.w	r3, r3, #0
    e3de:	da01      	bge.n	e3e4 <z_timer_expiration_handler+0xa0>
    e3e0:	2601      	movs	r6, #1
    e3e2:	2700      	movs	r7, #0
    e3e4:	3e01      	subs	r6, #1
    e3e6:	f147 37ff 	adc.w	r7, r7, #4294967295
	return z_impl_k_uptime_ticks();
    e3ea:	f006 fbf0 	bl	14bce <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    e3ee:	3001      	adds	r0, #1
    e3f0:	f141 0100 	adc.w	r1, r1, #0
    e3f4:	1980      	adds	r0, r0, r6
    e3f6:	eb47 0101 	adc.w	r1, r7, r1
    e3fa:	2801      	cmp	r0, #1
    e3fc:	f171 0100 	sbcs.w	r1, r1, #0
    e400:	da08      	bge.n	e414 <z_timer_expiration_handler+0xd0>
    e402:	f06f 0201 	mvn.w	r2, #1
    e406:	f04f 33ff 	mov.w	r3, #4294967295
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    e40a:	490d      	ldr	r1, [pc, #52]	; (e440 <z_timer_expiration_handler+0xfc>)
    e40c:	4620      	mov	r0, r4
    e40e:	f7ff fe95 	bl	e13c <z_add_timeout>
    e412:	e7b5      	b.n	e380 <z_timer_expiration_handler+0x3c>
    e414:	f006 fbdb 	bl	14bce <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    e418:	3001      	adds	r0, #1
    e41a:	f141 0100 	adc.w	r1, r1, #0
    e41e:	1980      	adds	r0, r0, r6
    e420:	eb47 0301 	adc.w	r3, r7, r1
    e424:	f06f 0201 	mvn.w	r2, #1
    e428:	1a12      	subs	r2, r2, r0
    e42a:	f04f 31ff 	mov.w	r1, #4294967295
    e42e:	eb61 0303 	sbc.w	r3, r1, r3
    e432:	e7ea      	b.n	e40a <z_timer_expiration_handler+0xc6>
    e434:	f385 8811 	msr	BASEPRI, r5
    e438:	f3bf 8f6f 	isb	sy
		return;
    e43c:	e793      	b.n	e366 <z_timer_expiration_handler+0x22>
    e43e:	bf00      	nop
    e440:	0000e345 	.word	0x0000e345

0000e444 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    e444:	b570      	push	{r4, r5, r6, lr}
    e446:	461d      	mov	r5, r3
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    e448:	f1b3 3fff 	cmp.w	r3, #4294967295
    e44c:	bf08      	it	eq
    e44e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    e452:	d01a      	beq.n	e48a <z_impl_k_timer_start+0x46>
    e454:	4606      	mov	r6, r0
    e456:	4614      	mov	r4, r2
    e458:	4619      	mov	r1, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
    e45a:	f06f 0201 	mvn.w	r2, #1
    e45e:	1b12      	subs	r2, r2, r4
    e460:	f04f 32ff 	mov.w	r2, #4294967295
    e464:	eb62 0203 	sbc.w	r2, r2, r3
    e468:	2a00      	cmp	r2, #0
    e46a:	db0f      	blt.n	e48c <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    e46c:	4630      	mov	r0, r6
    e46e:	f006 fb75 	bl	14b5c <z_abort_timeout>
	timer->period = period;
    e472:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    e476:	e9c6 230a 	strd	r2, r3, [r6, #40]	; 0x28
	timer->status = 0U;
    e47a:	2300      	movs	r3, #0
    e47c:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    e47e:	4622      	mov	r2, r4
    e480:	462b      	mov	r3, r5
    e482:	4907      	ldr	r1, [pc, #28]	; (e4a0 <z_impl_k_timer_start+0x5c>)
    e484:	4630      	mov	r0, r6
    e486:	f7ff fe59 	bl	e13c <z_add_timeout>
		     duration);
}
    e48a:	bd70      	pop	{r4, r5, r6, pc}
		duration.ticks = MAX(duration.ticks - 1, 0);
    e48c:	2c01      	cmp	r4, #1
    e48e:	f171 0100 	sbcs.w	r1, r1, #0
    e492:	da01      	bge.n	e498 <z_impl_k_timer_start+0x54>
    e494:	2401      	movs	r4, #1
    e496:	2500      	movs	r5, #0
    e498:	3c01      	subs	r4, #1
    e49a:	f145 35ff 	adc.w	r5, r5, #4294967295
    e49e:	e7e5      	b.n	e46c <z_impl_k_timer_start+0x28>
    e4a0:	0000e345 	.word	0x0000e345

0000e4a4 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
    e4a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e4a8:	b083      	sub	sp, #12
    e4aa:	4607      	mov	r7, r0
    e4ac:	4616      	mov	r6, r2
    e4ae:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
    e4b0:	4b28      	ldr	r3, [pc, #160]	; (e554 <z_impl_k_poll+0xb0>)
    e4b2:	689c      	ldr	r4, [r3, #8]

	poller->is_polling = true;
    e4b4:	2301      	movs	r3, #1
    e4b6:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	poller->mode = MODE_POLL;
    e4ba:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
    e4be:	ea55 0302 	orrs.w	r3, r5, r2
    e4c2:	bf0c      	ite	eq
    e4c4:	2301      	moveq	r3, #1
    e4c6:	2300      	movne	r3, #0
    e4c8:	f104 0260 	add.w	r2, r4, #96	; 0x60
    e4cc:	f006 fc8c 	bl	14de8 <register_events>
    e4d0:	4680      	mov	r8, r0
	__asm__ volatile(
    e4d2:	f04f 0320 	mov.w	r3, #32
    e4d6:	f3ef 8111 	mrs	r1, BASEPRI
    e4da:	f383 8812 	msr	BASEPRI_MAX, r3
    e4de:	f3bf 8f6f 	isb	sy
    e4e2:	4689      	mov	r9, r1
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
    e4e4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    e4e8:	b30b      	cbz	r3, e52e <z_impl_k_poll+0x8a>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
    e4ea:	2300      	movs	r3, #0
    e4ec:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    e4f0:	ea55 0306 	orrs.w	r3, r5, r6
    e4f4:	d026      	beq.n	e544 <z_impl_k_poll+0xa0>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
    e4f6:	9600      	str	r6, [sp, #0]
    e4f8:	9501      	str	r5, [sp, #4]
    e4fa:	4a17      	ldr	r2, [pc, #92]	; (e558 <z_impl_k_poll+0xb4>)
    e4fc:	4817      	ldr	r0, [pc, #92]	; (e55c <z_impl_k_poll+0xb8>)
    e4fe:	f7ff fbc5 	bl	dc8c <z_pend_curr>
    e502:	4604      	mov	r4, r0
    e504:	f04f 0320 	mov.w	r3, #32
    e508:	f3ef 8211 	mrs	r2, BASEPRI
    e50c:	f383 8812 	msr	BASEPRI_MAX, r3
    e510:	f3bf 8f6f 	isb	sy
    e514:	4615      	mov	r5, r2
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
    e516:	4641      	mov	r1, r8
    e518:	4638      	mov	r0, r7
    e51a:	f006 fbd9 	bl	14cd0 <clear_event_registrations>
	__asm__ volatile(
    e51e:	f385 8811 	msr	BASEPRI, r5
    e522:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
    e526:	4620      	mov	r0, r4
    e528:	b003      	add	sp, #12
    e52a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		clear_event_registrations(events, events_registered, key);
    e52e:	460a      	mov	r2, r1
    e530:	4601      	mov	r1, r0
    e532:	4638      	mov	r0, r7
    e534:	f006 fbcc 	bl	14cd0 <clear_event_registrations>
    e538:	f389 8811 	msr	BASEPRI, r9
    e53c:	f3bf 8f6f 	isb	sy
		return 0;
    e540:	2400      	movs	r4, #0
    e542:	e7f0      	b.n	e526 <z_impl_k_poll+0x82>
    e544:	f381 8811 	msr	BASEPRI, r1
    e548:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    e54c:	f06f 040a 	mvn.w	r4, #10
    e550:	e7e9      	b.n	e526 <z_impl_k_poll+0x82>
    e552:	bf00      	nop
    e554:	20003c6c 	.word	0x20003c6c
    e558:	2000024c 	.word	0x2000024c
    e55c:	20003ca8 	.word	0x20003ca8

0000e560 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
    e560:	b538      	push	{r3, r4, r5, lr}
    e562:	4603      	mov	r3, r0
	__asm__ volatile(
    e564:	f04f 0220 	mov.w	r2, #32
    e568:	f3ef 8511 	mrs	r5, BASEPRI
    e56c:	f382 8812 	msr	BASEPRI_MAX, r2
    e570:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
    e574:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
    e576:	2201      	movs	r2, #1
    e578:	6082      	str	r2, [r0, #8]
	return list->head == list;
    e57a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    e57c:	4283      	cmp	r3, r0
    e57e:	d010      	beq.n	e5a2 <z_impl_k_poll_signal_raise+0x42>
	sys_dnode_t *const prev = node->prev;
    e580:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
    e582:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
    e584:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    e586:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    e588:	2300      	movs	r3, #0
    e58a:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
    e58c:	6043      	str	r3, [r0, #4]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    e58e:	2101      	movs	r1, #1
    e590:	f006 fcb4 	bl	14efc <signal_poll_event>
    e594:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
    e596:	4629      	mov	r1, r5
    e598:	4805      	ldr	r0, [pc, #20]	; (e5b0 <z_impl_k_poll_signal_raise+0x50>)
    e59a:	f7ff fa29 	bl	d9f0 <z_reschedule>
	return rc;
}
    e59e:	4620      	mov	r0, r4
    e5a0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    e5a2:	f385 8811 	msr	BASEPRI, r5
    e5a6:	f3bf 8f6f 	isb	sy
		return 0;
    e5aa:	2400      	movs	r4, #0
    e5ac:	e7f7      	b.n	e59e <z_impl_k_poll_signal_raise+0x3e>
    e5ae:	bf00      	nop
    e5b0:	20003ca8 	.word	0x20003ca8

0000e5b4 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
    e5b4:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    e5b6:	4802      	ldr	r0, [pc, #8]	; (e5c0 <boot_banner+0xc>)
    e5b8:	f000 fca3 	bl	ef02 <printk>
#endif /* CONFIG_BOOT_BANNER */
}
    e5bc:	bd08      	pop	{r3, pc}
    e5be:	bf00      	nop
    e5c0:	00018da4 	.word	0x00018da4

0000e5c4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
    e5c4:	b510      	push	{r4, lr}
    e5c6:	b084      	sub	sp, #16
	struct k_work_queue_config cfg = {
    e5c8:	4b08      	ldr	r3, [pc, #32]	; (e5ec <k_sys_work_q_init+0x28>)
    e5ca:	9302      	str	r3, [sp, #8]
    e5cc:	2400      	movs	r4, #0
    e5ce:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    e5d2:	ab02      	add	r3, sp, #8
    e5d4:	9300      	str	r3, [sp, #0]
    e5d6:	f04f 33ff 	mov.w	r3, #4294967295
    e5da:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e5de:	4904      	ldr	r1, [pc, #16]	; (e5f0 <k_sys_work_q_init+0x2c>)
    e5e0:	4804      	ldr	r0, [pc, #16]	; (e5f4 <k_sys_work_q_init+0x30>)
    e5e2:	f000 f8ef 	bl	e7c4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    e5e6:	4620      	mov	r0, r4
    e5e8:	b004      	add	sp, #16
    e5ea:	bd10      	pop	{r4, pc}
    e5ec:	00018dd4 	.word	0x00018dd4
    e5f0:	200056f8 	.word	0x200056f8
    e5f4:	20000d08 	.word	0x20000d08

0000e5f8 <queue_submit_locked>:
 * @retval -EBUSY if the submission was rejected (draining, plugged)
 */
static inline int queue_submit_locked(struct k_work_q *queue,
				      struct k_work *work)
{
	if (queue == NULL) {
    e5f8:	b370      	cbz	r0, e658 <queue_submit_locked+0x60>
{
    e5fa:	b538      	push	{r3, r4, r5, lr}
    e5fc:	460d      	mov	r5, r1
    e5fe:	4604      	mov	r4, r0
		return -EINVAL;
	}

	int ret = -EBUSY;
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    e600:	4b1b      	ldr	r3, [pc, #108]	; (e670 <queue_submit_locked+0x78>)
    e602:	689b      	ldr	r3, [r3, #8]
    e604:	4283      	cmp	r3, r0
    e606:	d01b      	beq.n	e640 <queue_submit_locked+0x48>
    e608:	2300      	movs	r3, #0
    e60a:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
    e60c:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    e610:	f3c3 0180 	ubfx	r1, r3, #2, #1
    e614:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	 * * -ENODEV if the queue isn't running.
	 * * -EBUSY if draining and not chained
	 * * -EBUSY if plugged and not draining
	 * * otherwise OK
	 */
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    e618:	f013 0f01 	tst.w	r3, #1
    e61c:	d01f      	beq.n	e65e <queue_submit_locked+0x66>
		ret = -ENODEV;
	} else if (draining && !chained) {
    e61e:	b101      	cbz	r1, e622 <queue_submit_locked+0x2a>
    e620:	b302      	cbz	r2, e664 <queue_submit_locked+0x6c>
		ret = -EBUSY;
	} else if (plugged && !draining) {
    e622:	b100      	cbz	r0, e626 <queue_submit_locked+0x2e>
    e624:	b309      	cbz	r1, e66a <queue_submit_locked+0x72>
	parent->next = child;
    e626:	2300      	movs	r3, #0
    e628:	602b      	str	r3, [r5, #0]
	return list->tail;
    e62a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    e62e:	b173      	cbz	r3, e64e <queue_submit_locked+0x56>
	parent->next = child;
    e630:	601d      	str	r5, [r3, #0]
	list->tail = node;
    e632:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
		ret = -EBUSY;
	} else {
		sys_slist_append(&queue->pending, &work->node);
		ret = 1;
		(void)notify_queue_locked(queue);
    e636:	4620      	mov	r0, r4
    e638:	f006 fcc9 	bl	14fce <notify_queue_locked>
		ret = 1;
    e63c:	2001      	movs	r0, #1
	}

	return ret;
}
    e63e:	bd38      	pop	{r3, r4, r5, pc}
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    e640:	f006 f848 	bl	146d4 <k_is_in_isr>
    e644:	b908      	cbnz	r0, e64a <queue_submit_locked+0x52>
    e646:	2301      	movs	r3, #1
    e648:	e7df      	b.n	e60a <queue_submit_locked+0x12>
    e64a:	2300      	movs	r3, #0
    e64c:	e7dd      	b.n	e60a <queue_submit_locked+0x12>
    e64e:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
	list->head = node;
    e652:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
}
    e656:	e7ee      	b.n	e636 <queue_submit_locked+0x3e>
		return -EINVAL;
    e658:	f06f 0015 	mvn.w	r0, #21
}
    e65c:	4770      	bx	lr
		ret = -ENODEV;
    e65e:	f06f 0012 	mvn.w	r0, #18
    e662:	e7ec      	b.n	e63e <queue_submit_locked+0x46>
		ret = -EBUSY;
    e664:	f06f 000f 	mvn.w	r0, #15
    e668:	e7e9      	b.n	e63e <queue_submit_locked+0x46>
		ret = -EBUSY;
    e66a:	f06f 000f 	mvn.w	r0, #15
    e66e:	e7e6      	b.n	e63e <queue_submit_locked+0x46>
    e670:	20003c6c 	.word	0x20003c6c

0000e674 <finalize_cancel_locked>:
{
    e674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e676:	4606      	mov	r6, r0
	*flagp &= ~BIT(bit);
    e678:	68c3      	ldr	r3, [r0, #12]
    e67a:	f023 0302 	bic.w	r3, r3, #2
    e67e:	60c3      	str	r3, [r0, #12]
	return list->head;
    e680:	4b13      	ldr	r3, [pc, #76]	; (e6d0 <finalize_cancel_locked+0x5c>)
    e682:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    e684:	b185      	cbz	r5, e6a8 <finalize_cancel_locked+0x34>
	return node->next;
    e686:	682c      	ldr	r4, [r5, #0]
    e688:	b104      	cbz	r4, e68c <finalize_cancel_locked+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
    e68a:	b10d      	cbz	r5, e690 <finalize_cancel_locked+0x1c>
    e68c:	2700      	movs	r7, #0
    e68e:	e010      	b.n	e6b2 <finalize_cancel_locked+0x3e>
    e690:	462c      	mov	r4, r5
    e692:	e7fb      	b.n	e68c <finalize_cancel_locked+0x18>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    e694:	462a      	mov	r2, r5
    e696:	4639      	mov	r1, r7
    e698:	480d      	ldr	r0, [pc, #52]	; (e6d0 <finalize_cancel_locked+0x5c>)
    e69a:	f006 fc85 	bl	14fa8 <sys_slist_remove>
			k_sem_give(&wc->sem);
    e69e:	f105 0008 	add.w	r0, r5, #8
	z_impl_k_sem_give(sem);
    e6a2:	f7ff f8c3 	bl	d82c <z_impl_k_sem_give>
}
    e6a6:	e009      	b.n	e6bc <finalize_cancel_locked+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    e6a8:	462c      	mov	r4, r5
    e6aa:	e7ef      	b.n	e68c <finalize_cancel_locked+0x18>
    e6ac:	4623      	mov	r3, r4
    e6ae:	4625      	mov	r5, r4
    e6b0:	461c      	mov	r4, r3
    e6b2:	b165      	cbz	r5, e6ce <finalize_cancel_locked+0x5a>
		if (wc->work == work) {
    e6b4:	686b      	ldr	r3, [r5, #4]
    e6b6:	42b3      	cmp	r3, r6
    e6b8:	d0ec      	beq.n	e694 <finalize_cancel_locked+0x20>
			prev = &wc->node;
    e6ba:	462f      	mov	r7, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    e6bc:	2c00      	cmp	r4, #0
    e6be:	d0f5      	beq.n	e6ac <finalize_cancel_locked+0x38>
	return node->next;
    e6c0:	6823      	ldr	r3, [r4, #0]
    e6c2:	2b00      	cmp	r3, #0
    e6c4:	d0f3      	beq.n	e6ae <finalize_cancel_locked+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    e6c6:	2c00      	cmp	r4, #0
    e6c8:	d1f1      	bne.n	e6ae <finalize_cancel_locked+0x3a>
    e6ca:	4623      	mov	r3, r4
    e6cc:	e7ef      	b.n	e6ae <finalize_cancel_locked+0x3a>
}
    e6ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e6d0:	20003ca8 	.word	0x20003ca8

0000e6d4 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    e6d4:	b570      	push	{r4, r5, r6, lr}
    e6d6:	b084      	sub	sp, #16
    e6d8:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
    e6da:	e016      	b.n	e70a <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
    e6dc:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
    e6e0:	f023 0204 	bic.w	r2, r3, #4
    e6e4:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    e6e8:	f013 0f04 	tst.w	r3, #4
    e6ec:	d15a      	bne.n	e7a4 <work_queue_main+0xd0>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    e6ee:	2300      	movs	r3, #0
    e6f0:	9302      	str	r3, [sp, #8]
    e6f2:	f04f 32ff 	mov.w	r2, #4294967295
    e6f6:	f04f 33ff 	mov.w	r3, #4294967295
    e6fa:	e9cd 2300 	strd	r2, r3, [sp]
    e6fe:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
    e702:	4631      	mov	r1, r6
    e704:	482e      	ldr	r0, [pc, #184]	; (e7c0 <work_queue_main+0xec>)
    e706:	f7ff fcc9 	bl	e09c <z_sched_wait>
	__asm__ volatile(
    e70a:	f04f 0320 	mov.w	r3, #32
    e70e:	f3ef 8611 	mrs	r6, BASEPRI
    e712:	f383 8812 	msr	BASEPRI_MAX, r3
    e716:	f3bf 8f6f 	isb	sy
    e71a:	4632      	mov	r2, r6
	return list->head;
    e71c:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    e720:	2c00      	cmp	r4, #0
    e722:	d0db      	beq.n	e6dc <work_queue_main+0x8>
	return node->next;
    e724:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    e726:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
    e72a:	f8d5 10bc 	ldr.w	r1, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    e72e:	428c      	cmp	r4, r1
    e730:	d035      	beq.n	e79e <work_queue_main+0xca>
	*flagp |= BIT(bit);
    e732:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
    e736:	f043 0302 	orr.w	r3, r3, #2
    e73a:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
    e73e:	68e3      	ldr	r3, [r4, #12]
    e740:	f043 0101 	orr.w	r1, r3, #1
    e744:	60e1      	str	r1, [r4, #12]
	*flagp &= ~BIT(bit);
    e746:	f023 0304 	bic.w	r3, r3, #4
    e74a:	f043 0301 	orr.w	r3, r3, #1
    e74e:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
    e750:	6863      	ldr	r3, [r4, #4]
	__asm__ volatile(
    e752:	f382 8811 	msr	BASEPRI, r2
    e756:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    e75a:	4620      	mov	r0, r4
    e75c:	4798      	blx	r3
	__asm__ volatile(
    e75e:	f04f 0320 	mov.w	r3, #32
    e762:	f3ef 8611 	mrs	r6, BASEPRI
    e766:	f383 8812 	msr	BASEPRI_MAX, r3
    e76a:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    e76e:	68e3      	ldr	r3, [r4, #12]
    e770:	f023 0301 	bic.w	r3, r3, #1
    e774:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    e776:	f013 0f02 	tst.w	r3, #2
    e77a:	d11d      	bne.n	e7b8 <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
    e77c:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
    e780:	f023 0302 	bic.w	r3, r3, #2
    e784:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
    e788:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
    e78c:	f386 8811 	msr	BASEPRI, r6
    e790:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    e794:	2b00      	cmp	r3, #0
    e796:	d1b8      	bne.n	e70a <work_queue_main+0x36>
	z_impl_k_yield();
    e798:	f7ff fb86 	bl	dea8 <z_impl_k_yield>
}
    e79c:	e7b5      	b.n	e70a <work_queue_main+0x36>
	list->tail = node;
    e79e:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
		if (node != NULL) {
    e7a2:	e7c6      	b.n	e732 <work_queue_main+0x5e>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    e7a4:	f105 04c8 	add.w	r4, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    e7a8:	2200      	movs	r2, #0
    e7aa:	2101      	movs	r1, #1
    e7ac:	4620      	mov	r0, r4
    e7ae:	f006 f973 	bl	14a98 <z_sched_wake>
    e7b2:	2800      	cmp	r0, #0
    e7b4:	d1f8      	bne.n	e7a8 <work_queue_main+0xd4>
    e7b6:	e79a      	b.n	e6ee <work_queue_main+0x1a>
			finalize_cancel_locked(work);
    e7b8:	4620      	mov	r0, r4
    e7ba:	f7ff ff5b 	bl	e674 <finalize_cancel_locked>
    e7be:	e7dd      	b.n	e77c <work_queue_main+0xa8>
    e7c0:	20003cb0 	.word	0x20003cb0

0000e7c4 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    e7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e7c6:	b089      	sub	sp, #36	; 0x24
    e7c8:	4604      	mov	r4, r0
    e7ca:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
    e7cc:	2000      	movs	r0, #0
    e7ce:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = NULL;
    e7d2:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	sys_dlist_init(&w->waitq);
    e7d6:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
    e7da:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
    e7de:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    e7e2:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
    e7e6:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
    e7ea:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    e7ee:	b1fd      	cbz	r5, e830 <k_work_queue_start+0x6c>
    e7f0:	7928      	ldrb	r0, [r5, #4]
    e7f2:	b9f8      	cbnz	r0, e834 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    e7f4:	2001      	movs	r0, #1
	*flagp = flags;
    e7f6:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    e7fa:	f04f 36ff 	mov.w	r6, #4294967295
    e7fe:	f04f 37ff 	mov.w	r7, #4294967295
    e802:	e9cd 6706 	strd	r6, r7, [sp, #24]
    e806:	2000      	movs	r0, #0
    e808:	9004      	str	r0, [sp, #16]
    e80a:	9303      	str	r3, [sp, #12]
    e80c:	9002      	str	r0, [sp, #8]
    e80e:	9001      	str	r0, [sp, #4]
    e810:	9400      	str	r4, [sp, #0]
    e812:	4b0a      	ldr	r3, [pc, #40]	; (e83c <k_work_queue_start+0x78>)
    e814:	4620      	mov	r0, r4
    e816:	f005 ff74 	bl	14702 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    e81a:	b125      	cbz	r5, e826 <k_work_queue_start+0x62>
    e81c:	6829      	ldr	r1, [r5, #0]
    e81e:	b111      	cbz	r1, e826 <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
    e820:	4620      	mov	r0, r4
    e822:	f7fe fe11 	bl	d448 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    e826:	4620      	mov	r0, r4
    e828:	f005 ff5c 	bl	146e4 <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    e82c:	b009      	add	sp, #36	; 0x24
    e82e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
    e830:	2001      	movs	r0, #1
    e832:	e7e0      	b.n	e7f6 <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
    e834:	f240 1001 	movw	r0, #257	; 0x101
    e838:	e7dd      	b.n	e7f6 <k_work_queue_start+0x32>
    e83a:	bf00      	nop
    e83c:	0000e6d5 	.word	0x0000e6d5

0000e840 <k_msleep>:
{
    e840:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    e842:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    e846:	17c1      	asrs	r1, r0, #31
    e848:	03c9      	lsls	r1, r1, #15
    e84a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    e84e:	03c0      	lsls	r0, r0, #15
    e850:	f240 33e7 	movw	r3, #999	; 0x3e7
    e854:	18c0      	adds	r0, r0, r3
    e856:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e85a:	f04f 0300 	mov.w	r3, #0
    e85e:	f141 0100 	adc.w	r1, r1, #0
    e862:	f7f1 fc3b 	bl	dc <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    e866:	f7ff fbb1 	bl	dfcc <z_impl_k_sleep>
}
    e86a:	bd08      	pop	{r3, pc}

0000e86c <k_msleep>:
{
    e86c:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    e86e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    e872:	17c1      	asrs	r1, r0, #31
    e874:	03c9      	lsls	r1, r1, #15
    e876:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    e87a:	03c0      	lsls	r0, r0, #15
    e87c:	f240 33e7 	movw	r3, #999	; 0x3e7
    e880:	18c0      	adds	r0, r0, r3
    e882:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e886:	f04f 0300 	mov.w	r3, #0
    e88a:	f141 0100 	adc.w	r1, r1, #0
    e88e:	f7f1 fc25 	bl	dc <__aeabi_uldivmod>
    e892:	f7ff fb9b 	bl	dfcc <z_impl_k_sleep>
}
    e896:	bd08      	pop	{r3, pc}

0000e898 <k_msleep>:
{
    e898:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    e89a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    e89e:	17c1      	asrs	r1, r0, #31
    e8a0:	03c9      	lsls	r1, r1, #15
    e8a2:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    e8a6:	03c0      	lsls	r0, r0, #15
    e8a8:	f240 33e7 	movw	r3, #999	; 0x3e7
    e8ac:	18c0      	adds	r0, r0, r3
    e8ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e8b2:	f04f 0300 	mov.w	r3, #0
    e8b6:	f141 0100 	adc.w	r1, r1, #0
    e8ba:	f7f1 fc0f 	bl	dc <__aeabi_uldivmod>
    e8be:	f7ff fb85 	bl	dfcc <z_impl_k_sleep>
}
    e8c2:	bd08      	pop	{r3, pc}

0000e8c4 <config_write_u8>:
{
    return read_un(field, sizeof(uint32_t), value);
}

int config_write_u8(config_field_t field, uint8_t value)
{
    e8c4:	b500      	push	{lr}
    e8c6:	b083      	sub	sp, #12
    e8c8:	f88d 1007 	strb.w	r1, [sp, #7]
    return write_un(field, sizeof(uint8_t), &value);
    e8cc:	f10d 0207 	add.w	r2, sp, #7
    e8d0:	2101      	movs	r1, #1
    e8d2:	f7f2 facd 	bl	e70 <write_un>
}
    e8d6:	b003      	add	sp, #12
    e8d8:	f85d fb04 	ldr.w	pc, [sp], #4

0000e8dc <cmd_dict_handle_config_refresh>:
SHELL_SUBCMD_DICT_SET_CREATE(sub_config,
    e8dc:	b508      	push	{r3, lr}
    e8de:	2302      	movs	r3, #2
    e8e0:	f7f2 fd80 	bl	13e4 <handle_config>
    e8e4:	bd08      	pop	{r3, pc}

0000e8e6 <cmd_dict_handle_config_clear>:
    e8e6:	b508      	push	{r3, lr}
    e8e8:	2301      	movs	r3, #1
    e8ea:	f7f2 fd7b 	bl	13e4 <handle_config>
    e8ee:	bd08      	pop	{r3, pc}

0000e8f0 <cmd_dict_handle_config_dump>:
    e8f0:	b508      	push	{r3, lr}
    e8f2:	2300      	movs	r3, #0
    e8f4:	f7f2 fd76 	bl	13e4 <handle_config>
    e8f8:	bd08      	pop	{r3, pc}

0000e8fa <dwt_writetodevice>:
{
    e8fa:	b500      	push	{lr}
    e8fc:	b083      	sub	sp, #12
    if (index == 0) // For index of 0, no sub-index is required
    e8fe:	b951      	cbnz	r1, e916 <dwt_writetodevice+0x1c>
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
    e900:	f060 007f 	orn	r0, r0, #127	; 0x7f
    e904:	f88d 0004 	strb.w	r0, [sp, #4]
    e908:	2001      	movs	r0, #1
    writetospi(cnt,header,length,buffer);
    e90a:	a901      	add	r1, sp, #4
    e90c:	f7f3 f9aa 	bl	1c64 <writetospi>
} // end dwt_writetodevice()
    e910:	b003      	add	sp, #12
    e912:	f85d fb04 	ldr.w	pc, [sp], #4
    e916:	468c      	mov	ip, r1
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
    e918:	f060 003f 	orn	r0, r0, #63	; 0x3f
    e91c:	f88d 0004 	strb.w	r0, [sp, #4]
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
    e920:	297f      	cmp	r1, #127	; 0x7f
    e922:	d803      	bhi.n	e92c <dwt_writetodevice+0x32>
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
    e924:	f88d 1005 	strb.w	r1, [sp, #5]
    e928:	2002      	movs	r0, #2
    e92a:	e7ee      	b.n	e90a <dwt_writetodevice+0x10>
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
    e92c:	f061 017f 	orn	r1, r1, #127	; 0x7f
    e930:	f88d 1005 	strb.w	r1, [sp, #5]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
    e934:	f3cc 1cc7 	ubfx	ip, ip, #7, #8
    e938:	f88d c006 	strb.w	ip, [sp, #6]
    e93c:	2003      	movs	r0, #3
    e93e:	e7e4      	b.n	e90a <dwt_writetodevice+0x10>

0000e940 <dwt_readfromdevice>:
{
    e940:	b500      	push	{lr}
    e942:	b083      	sub	sp, #12
    if (index == 0) // For index of 0, no sub-index is required
    e944:	b941      	cbnz	r1, e958 <dwt_readfromdevice+0x18>
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
    e946:	f88d 0004 	strb.w	r0, [sp, #4]
    e94a:	2001      	movs	r0, #1
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
    e94c:	a901      	add	r1, sp, #4
    e94e:	f7f3 f9bf 	bl	1cd0 <readfromspi>
} // end dwt_readfromdevice()
    e952:	b003      	add	sp, #12
    e954:	f85d fb04 	ldr.w	pc, [sp], #4
    e958:	468c      	mov	ip, r1
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
    e95a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    e95e:	f88d 0004 	strb.w	r0, [sp, #4]
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
    e962:	297f      	cmp	r1, #127	; 0x7f
    e964:	d803      	bhi.n	e96e <dwt_readfromdevice+0x2e>
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
    e966:	f88d 1005 	strb.w	r1, [sp, #5]
    e96a:	2002      	movs	r0, #2
    e96c:	e7ee      	b.n	e94c <dwt_readfromdevice+0xc>
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
    e96e:	f061 017f 	orn	r1, r1, #127	; 0x7f
    e972:	f88d 1005 	strb.w	r1, [sp, #5]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
    e976:	f3cc 1cc7 	ubfx	ip, ip, #7, #8
    e97a:	f88d c006 	strb.w	ip, [sp, #6]
    e97e:	2003      	movs	r0, #3
    e980:	e7e4      	b.n	e94c <dwt_readfromdevice+0xc>

0000e982 <dwt_read32bitoffsetreg>:
{
    e982:	b500      	push	{lr}
    e984:	b083      	sub	sp, #12
    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
    e986:	ab01      	add	r3, sp, #4
    e988:	2204      	movs	r2, #4
    e98a:	b289      	uxth	r1, r1
    e98c:	b280      	uxth	r0, r0
    e98e:	f7ff ffd7 	bl	e940 <dwt_readfromdevice>
    for (j = 3 ; j >= 0 ; j --)
    e992:	2303      	movs	r3, #3
    uint32  regval = 0 ;
    e994:	2000      	movs	r0, #0
    for (j = 3 ; j >= 0 ; j --)
    e996:	e007      	b.n	e9a8 <dwt_read32bitoffsetreg+0x26>
        regval = (regval << 8) + buffer[j] ;
    e998:	f103 0208 	add.w	r2, r3, #8
    e99c:	446a      	add	r2, sp
    e99e:	f812 2c04 	ldrb.w	r2, [r2, #-4]
    e9a2:	eb02 2000 	add.w	r0, r2, r0, lsl #8
    for (j = 3 ; j >= 0 ; j --)
    e9a6:	3b01      	subs	r3, #1
    e9a8:	2b00      	cmp	r3, #0
    e9aa:	daf5      	bge.n	e998 <dwt_read32bitoffsetreg+0x16>
} // end dwt_read32bitoffsetreg()
    e9ac:	b003      	add	sp, #12
    e9ae:	f85d fb04 	ldr.w	pc, [sp], #4

0000e9b2 <dwt_readdevid>:
{
    e9b2:	b508      	push	{r3, lr}
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
    e9b4:	2100      	movs	r1, #0
    e9b6:	4608      	mov	r0, r1
    e9b8:	f7ff ffe3 	bl	e982 <dwt_read32bitoffsetreg>
}
    e9bc:	bd08      	pop	{r3, pc}

0000e9be <dwt_read16bitoffsetreg>:
{
    e9be:	b500      	push	{lr}
    e9c0:	b083      	sub	sp, #12
    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
    e9c2:	ab01      	add	r3, sp, #4
    e9c4:	2202      	movs	r2, #2
    e9c6:	b289      	uxth	r1, r1
    e9c8:	b280      	uxth	r0, r0
    e9ca:	f7ff ffb9 	bl	e940 <dwt_readfromdevice>
    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
    e9ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
    e9d2:	f89d 0004 	ldrb.w	r0, [sp, #4]
    e9d6:	eb00 2003 	add.w	r0, r0, r3, lsl #8
} // end dwt_read16bitoffsetreg()
    e9da:	b280      	uxth	r0, r0
    e9dc:	b003      	add	sp, #12
    e9de:	f85d fb04 	ldr.w	pc, [sp], #4

0000e9e2 <dwt_read8bitoffsetreg>:
{
    e9e2:	b500      	push	{lr}
    e9e4:	b083      	sub	sp, #12
    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
    e9e6:	f10d 0307 	add.w	r3, sp, #7
    e9ea:	2201      	movs	r2, #1
    e9ec:	b289      	uxth	r1, r1
    e9ee:	b280      	uxth	r0, r0
    e9f0:	f7ff ffa6 	bl	e940 <dwt_readfromdevice>
}
    e9f4:	f89d 0007 	ldrb.w	r0, [sp, #7]
    e9f8:	b003      	add	sp, #12
    e9fa:	f85d fb04 	ldr.w	pc, [sp], #4

0000e9fe <dwt_write8bitoffsetreg>:
{
    e9fe:	b500      	push	{lr}
    ea00:	b083      	sub	sp, #12
    ea02:	f88d 2007 	strb.w	r2, [sp, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
    ea06:	f10d 0307 	add.w	r3, sp, #7
    ea0a:	2201      	movs	r2, #1
    ea0c:	b289      	uxth	r1, r1
    ea0e:	b280      	uxth	r0, r0
    ea10:	f7ff ff73 	bl	e8fa <dwt_writetodevice>
}
    ea14:	b003      	add	sp, #12
    ea16:	f85d fb04 	ldr.w	pc, [sp], #4

0000ea1a <dwt_write16bitoffsetreg>:
{
    ea1a:	b500      	push	{lr}
    ea1c:	b083      	sub	sp, #12
    buffer[0] = regval & 0xFF;
    ea1e:	f88d 2004 	strb.w	r2, [sp, #4]
    buffer[1] = regval >> 8 ;
    ea22:	0a12      	lsrs	r2, r2, #8
    ea24:	f88d 2005 	strb.w	r2, [sp, #5]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
    ea28:	ab01      	add	r3, sp, #4
    ea2a:	2202      	movs	r2, #2
    ea2c:	b289      	uxth	r1, r1
    ea2e:	b280      	uxth	r0, r0
    ea30:	f7ff ff63 	bl	e8fa <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
    ea34:	b003      	add	sp, #12
    ea36:	f85d fb04 	ldr.w	pc, [sp], #4

0000ea3a <dwt_setrxantennadelay>:
{
    ea3a:	b508      	push	{r3, lr}
    ea3c:	4602      	mov	r2, r0
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
    ea3e:	f641 0104 	movw	r1, #6148	; 0x1804
    ea42:	202e      	movs	r0, #46	; 0x2e
    ea44:	f7ff ffe9 	bl	ea1a <dwt_write16bitoffsetreg>
}
    ea48:	bd08      	pop	{r3, pc}

0000ea4a <dwt_settxantennadelay>:
{
    ea4a:	b508      	push	{r3, lr}
    ea4c:	4602      	mov	r2, r0
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
    ea4e:	2100      	movs	r1, #0
    ea50:	2018      	movs	r0, #24
    ea52:	f7ff ffe2 	bl	ea1a <dwt_write16bitoffsetreg>
}
    ea56:	bd08      	pop	{r3, pc}

0000ea58 <dwt_write32bitoffsetreg>:
{
    ea58:	b500      	push	{lr}
    ea5a:	b083      	sub	sp, #12
    for ( j = 0 ; j < 4 ; j++ )
    ea5c:	2300      	movs	r3, #0
    ea5e:	e006      	b.n	ea6e <dwt_write32bitoffsetreg+0x16>
        buffer[j] = regval & 0xff ;
    ea60:	f103 0c08 	add.w	ip, r3, #8
    ea64:	44ec      	add	ip, sp
    ea66:	f80c 2c04 	strb.w	r2, [ip, #-4]
        regval >>= 8 ;
    ea6a:	0a12      	lsrs	r2, r2, #8
    for ( j = 0 ; j < 4 ; j++ )
    ea6c:	3301      	adds	r3, #1
    ea6e:	2b03      	cmp	r3, #3
    ea70:	ddf6      	ble.n	ea60 <dwt_write32bitoffsetreg+0x8>
    dwt_writetodevice(regFileID,regOffset,4,buffer);
    ea72:	ab01      	add	r3, sp, #4
    ea74:	2204      	movs	r2, #4
    ea76:	b289      	uxth	r1, r1
    ea78:	b280      	uxth	r0, r0
    ea7a:	f7ff ff3e 	bl	e8fa <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
    ea7e:	b003      	add	sp, #12
    ea80:	f85d fb04 	ldr.w	pc, [sp], #4

0000ea84 <_dwt_otpread>:
{
    ea84:	b508      	push	{r3, lr}
    ea86:	4602      	mov	r2, r0
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
    ea88:	2104      	movs	r1, #4
    ea8a:	202d      	movs	r0, #45	; 0x2d
    ea8c:	f7ff ffc5 	bl	ea1a <dwt_write16bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
    ea90:	2203      	movs	r2, #3
    ea92:	2106      	movs	r1, #6
    ea94:	202d      	movs	r0, #45	; 0x2d
    ea96:	f7ff ffb2 	bl	e9fe <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
    ea9a:	2200      	movs	r2, #0
    ea9c:	2106      	movs	r1, #6
    ea9e:	202d      	movs	r0, #45	; 0x2d
    eaa0:	f7ff ffad 	bl	e9fe <dwt_write8bitoffsetreg>
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
    eaa4:	210a      	movs	r1, #10
    eaa6:	202d      	movs	r0, #45	; 0x2d
    eaa8:	f7ff ff6b 	bl	e982 <dwt_read32bitoffsetreg>
}
    eaac:	bd08      	pop	{r3, pc}

0000eaae <_dwt_aonarrayupload>:
{
    eaae:	b508      	push	{r3, lr}
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
    eab0:	2200      	movs	r2, #0
    eab2:	2102      	movs	r1, #2
    eab4:	202c      	movs	r0, #44	; 0x2c
    eab6:	f7ff ffa2 	bl	e9fe <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
    eaba:	2202      	movs	r2, #2
    eabc:	4611      	mov	r1, r2
    eabe:	202c      	movs	r0, #44	; 0x2c
    eac0:	f7ff ff9d 	bl	e9fe <dwt_write8bitoffsetreg>
}
    eac4:	bd08      	pop	{r3, pc}

0000eac6 <_dwt_configlde>:
{
    eac6:	b510      	push	{r4, lr}
    eac8:	4604      	mov	r4, r0
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
    eaca:	226d      	movs	r2, #109	; 0x6d
    eacc:	f640 0106 	movw	r1, #2054	; 0x806
    ead0:	202e      	movs	r0, #46	; 0x2e
    ead2:	f7ff ff94 	bl	e9fe <dwt_write8bitoffsetreg>
    if(prfIndex)
    ead6:	b13c      	cbz	r4, eae8 <_dwt_configlde+0x22>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
    ead8:	f240 6207 	movw	r2, #1543	; 0x607
    eadc:	f641 0106 	movw	r1, #6150	; 0x1806
    eae0:	202e      	movs	r0, #46	; 0x2e
    eae2:	f7ff ff9a 	bl	ea1a <dwt_write16bitoffsetreg>
}
    eae6:	bd10      	pop	{r4, pc}
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    eae8:	f241 6207 	movw	r2, #5639	; 0x1607
    eaec:	f641 0106 	movw	r1, #6150	; 0x1806
    eaf0:	202e      	movs	r0, #46	; 0x2e
    eaf2:	f7ff ff92 	bl	ea1a <dwt_write16bitoffsetreg>
}
    eaf6:	e7f6      	b.n	eae6 <_dwt_configlde+0x20>

0000eaf8 <_dwt_enableclocks>:
{
    eaf8:	b510      	push	{r4, lr}
    eafa:	b082      	sub	sp, #8
    eafc:	4604      	mov	r4, r0
    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
    eafe:	ab01      	add	r3, sp, #4
    eb00:	2202      	movs	r2, #2
    eb02:	2100      	movs	r1, #0
    eb04:	2036      	movs	r0, #54	; 0x36
    eb06:	f7ff ff1b 	bl	e940 <dwt_readfromdevice>
    switch(clocks)
    eb0a:	2c0e      	cmp	r4, #14
    eb0c:	d812      	bhi.n	eb34 <_dwt_enableclocks+0x3c>
    eb0e:	e8df f004 	tbb	[pc, r4]
    eb12:	0820      	.short	0x0820
    eb14:	11111129 	.word	0x11111129
    eb18:	11413211 	.word	0x11413211
    eb1c:	5c554e11 	.word	0x5c554e11
    eb20:	65          	.byte	0x65
    eb21:	00          	.byte	0x00
            reg[0] = 0x00 ;
    eb22:	2300      	movs	r3, #0
    eb24:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = reg[1] & 0xfe;
    eb28:	f89d 3005 	ldrb.w	r3, [sp, #5]
    eb2c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    eb30:	f88d 3005 	strb.w	r3, [sp, #5]
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
    eb34:	ab01      	add	r3, sp, #4
    eb36:	2201      	movs	r2, #1
    eb38:	2100      	movs	r1, #0
    eb3a:	2036      	movs	r0, #54	; 0x36
    eb3c:	f7ff fedd 	bl	e8fa <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
    eb40:	f10d 0305 	add.w	r3, sp, #5
    eb44:	2201      	movs	r2, #1
    eb46:	4611      	mov	r1, r2
    eb48:	2036      	movs	r0, #54	; 0x36
    eb4a:	f7ff fed6 	bl	e8fa <dwt_writetodevice>
} // end _dwt_enableclocks()
    eb4e:	b002      	add	sp, #8
    eb50:	bd10      	pop	{r4, pc}
            reg[0] = 0x01 | (reg[0] & 0xfc);
    eb52:	f89d 3004 	ldrb.w	r3, [sp, #4]
    eb56:	f023 0303 	bic.w	r3, r3, #3
    eb5a:	f043 0301 	orr.w	r3, r3, #1
    eb5e:	f88d 3004 	strb.w	r3, [sp, #4]
        break;
    eb62:	e7e7      	b.n	eb34 <_dwt_enableclocks+0x3c>
            reg[0] = 0x02 | (reg[0] & 0xfc);
    eb64:	f89d 3004 	ldrb.w	r3, [sp, #4]
    eb68:	f023 0303 	bic.w	r3, r3, #3
    eb6c:	f043 0302 	orr.w	r3, r3, #2
    eb70:	f88d 3004 	strb.w	r3, [sp, #4]
        break;
    eb74:	e7de      	b.n	eb34 <_dwt_enableclocks+0x3c>
            reg[0] = 0x48 | (reg[0] & 0xb3);
    eb76:	f89d 3004 	ldrb.w	r3, [sp, #4]
    eb7a:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
    eb7e:	f043 0348 	orr.w	r3, r3, #72	; 0x48
    eb82:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = 0x80 | reg[1];
    eb86:	f89d 3005 	ldrb.w	r3, [sp, #5]
    eb8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    eb8e:	f88d 3005 	strb.w	r3, [sp, #5]
        break;
    eb92:	e7cf      	b.n	eb34 <_dwt_enableclocks+0x3c>
            reg[0] = reg[0] & 0xb3;
    eb94:	f89d 3004 	ldrb.w	r3, [sp, #4]
    eb98:	f003 03b3 	and.w	r3, r3, #179	; 0xb3
    eb9c:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = 0x7f & reg[1];
    eba0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    eba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    eba8:	f88d 3005 	strb.w	r3, [sp, #5]
        break;
    ebac:	e7c2      	b.n	eb34 <_dwt_enableclocks+0x3c>
            reg[1] = 0x02 | reg[1];
    ebae:	f89d 3005 	ldrb.w	r3, [sp, #5]
    ebb2:	f043 0302 	orr.w	r3, r3, #2
    ebb6:	f88d 3005 	strb.w	r3, [sp, #5]
        break;
    ebba:	e7bb      	b.n	eb34 <_dwt_enableclocks+0x3c>
            reg[1] = reg[1] & 0xfd;
    ebbc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    ebc0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    ebc4:	f88d 3005 	strb.w	r3, [sp, #5]
        break;
    ebc8:	e7b4      	b.n	eb34 <_dwt_enableclocks+0x3c>
            reg[0] = 0x20 | (reg[0] & 0xcf);
    ebca:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ebce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    ebd2:	f043 0320 	orr.w	r3, r3, #32
    ebd6:	f88d 3004 	strb.w	r3, [sp, #4]
        break;
    ebda:	e7ab      	b.n	eb34 <_dwt_enableclocks+0x3c>
            reg[0] = 0x01;
    ebdc:	2301      	movs	r3, #1
    ebde:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = 0x03;
    ebe2:	2303      	movs	r3, #3
    ebe4:	f88d 3005 	strb.w	r3, [sp, #5]
        break;
    ebe8:	e7a4      	b.n	eb34 <_dwt_enableclocks+0x3c>

0000ebea <_dwt_loaducodefromrom>:
{
    ebea:	b508      	push	{r3, lr}
    _dwt_enableclocks(FORCE_LDE);
    ebec:	200e      	movs	r0, #14
    ebee:	f7ff ff83 	bl	eaf8 <_dwt_enableclocks>
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
    ebf2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    ebf6:	2106      	movs	r1, #6
    ebf8:	202d      	movs	r0, #45	; 0x2d
    ebfa:	f7ff ff0e 	bl	ea1a <dwt_write16bitoffsetreg>
    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
    ebfe:	2001      	movs	r0, #1
    ec00:	f000 f86f 	bl	ece2 <deca_sleep>
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
    ec04:	2001      	movs	r0, #1
    ec06:	f7ff ff77 	bl	eaf8 <_dwt_enableclocks>
}
    ec0a:	bd08      	pop	{r3, pc}

0000ec0c <_dwt_disablesequencing>:
{
    ec0c:	b508      	push	{r3, lr}
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
    ec0e:	2000      	movs	r0, #0
    ec10:	f7ff ff72 	bl	eaf8 <_dwt_enableclocks>
    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
    ec14:	2200      	movs	r2, #0
    ec16:	2104      	movs	r1, #4
    ec18:	2036      	movs	r0, #54	; 0x36
    ec1a:	f7ff fefe 	bl	ea1a <dwt_write16bitoffsetreg>
}
    ec1e:	bd08      	pop	{r3, pc}

0000ec20 <dwt_syncrxbufptrs>:
{
    ec20:	b508      	push	{r3, lr}
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
    ec22:	2103      	movs	r1, #3
    ec24:	200f      	movs	r0, #15
    ec26:	f7ff fedc 	bl	e9e2 <dwt_read8bitoffsetreg>
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
    ec2a:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
    ec2e:	f010 0f80 	tst.w	r0, #128	; 0x80
    ec32:	d100      	bne.n	ec36 <dwt_syncrxbufptrs+0x16>
}
    ec34:	bd08      	pop	{r3, pc}
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
    ec36:	2201      	movs	r2, #1
    ec38:	2103      	movs	r1, #3
    ec3a:	200d      	movs	r0, #13
    ec3c:	f7ff fedf 	bl	e9fe <dwt_write8bitoffsetreg>
}
    ec40:	e7f8      	b.n	ec34 <dwt_syncrxbufptrs+0x14>

0000ec42 <dwt_setinterrupt>:
{
    ec42:	b570      	push	{r4, r5, r6, lr}
    ec44:	4606      	mov	r6, r0
    ec46:	460c      	mov	r4, r1
    stat = decamutexon() ;
    ec48:	f000 f832 	bl	ecb0 <decamutexon>
    ec4c:	4605      	mov	r5, r0
    if(operation == 2)
    ec4e:	2c02      	cmp	r4, #2
    ec50:	d00f      	beq.n	ec72 <dwt_setinterrupt+0x30>
        mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read register
    ec52:	2100      	movs	r1, #0
    ec54:	200e      	movs	r0, #14
    ec56:	f7ff fe94 	bl	e982 <dwt_read32bitoffsetreg>
        if(operation == 1)
    ec5a:	2c01      	cmp	r4, #1
    ec5c:	d00f      	beq.n	ec7e <dwt_setinterrupt+0x3c>
            mask &= ~bitmask ; // Clear the bit
    ec5e:	ea20 0206 	bic.w	r2, r0, r6
        dwt_write32bitreg(SYS_MASK_ID, mask) ; // New value
    ec62:	2100      	movs	r1, #0
    ec64:	200e      	movs	r0, #14
    ec66:	f7ff fef7 	bl	ea58 <dwt_write32bitoffsetreg>
    decamutexoff(stat) ;
    ec6a:	4628      	mov	r0, r5
    ec6c:	f000 f822 	bl	ecb4 <decamutexoff>
}
    ec70:	bd70      	pop	{r4, r5, r6, pc}
        dwt_write32bitreg(SYS_MASK_ID, bitmask) ; // New value
    ec72:	4632      	mov	r2, r6
    ec74:	2100      	movs	r1, #0
    ec76:	200e      	movs	r0, #14
    ec78:	f7ff feee 	bl	ea58 <dwt_write32bitoffsetreg>
    ec7c:	e7f5      	b.n	ec6a <dwt_setinterrupt+0x28>
            mask |= bitmask ;
    ec7e:	ea40 0206 	orr.w	r2, r0, r6
    ec82:	e7ee      	b.n	ec62 <dwt_setinterrupt+0x20>

0000ec84 <dwt_rxreset>:
{
    ec84:	b508      	push	{r3, lr}
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
    ec86:	22e0      	movs	r2, #224	; 0xe0
    ec88:	2103      	movs	r1, #3
    ec8a:	2036      	movs	r0, #54	; 0x36
    ec8c:	f7ff feb7 	bl	e9fe <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
    ec90:	22f0      	movs	r2, #240	; 0xf0
    ec92:	2103      	movs	r1, #3
    ec94:	2036      	movs	r0, #54	; 0x36
    ec96:	f7ff feb2 	bl	e9fe <dwt_write8bitoffsetreg>
}
    ec9a:	bd08      	pop	{r3, pc}

0000ec9c <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
    ec9c:	b508      	push	{r3, lr}
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
    ec9e:	f000 021f 	and.w	r2, r0, #31
    eca2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
    eca6:	210e      	movs	r1, #14
    eca8:	202b      	movs	r0, #43	; 0x2b
    ecaa:	f7ff fea8 	bl	e9fe <dwt_write8bitoffsetreg>
}
    ecae:	bd08      	pop	{r3, pc}

0000ecb0 <decamutexon>:
 */
decaIrqStatus_t decamutexon(void)           
{
	//TODO
	return 0 ;   // return state before disable, value is used to re-enable in decamutexoff call
}
    ecb0:	2000      	movs	r0, #0
    ecb2:	4770      	bx	lr

0000ecb4 <decamutexoff>:
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
	//TODO
}
    ecb4:	4770      	bx	lr

0000ecb6 <k_msleep>:
{
    ecb6:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    ecb8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    ecbc:	17c1      	asrs	r1, r0, #31
    ecbe:	03c9      	lsls	r1, r1, #15
    ecc0:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    ecc4:	03c0      	lsls	r0, r0, #15
    ecc6:	f240 33e7 	movw	r3, #999	; 0x3e7
    ecca:	18c0      	adds	r0, r0, r3
    eccc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ecd0:	f04f 0300 	mov.w	r3, #0
    ecd4:	f141 0100 	adc.w	r1, r1, #0
    ecd8:	f7f1 fa00 	bl	dc <__aeabi_uldivmod>
    ecdc:	f7ff f976 	bl	dfcc <z_impl_k_sleep>
}
    ece0:	bd08      	pop	{r3, pc}

0000ece2 <deca_sleep>:
#include "deca_device_api.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_sleep(unsigned int time_ms)
{
    ece2:	b508      	push	{r3, lr}
	k_msleep(time_ms);
    ece4:	f7ff ffe7 	bl	ecb6 <k_msleep>
}
    ece8:	bd08      	pop	{r3, pc}

0000ecea <port_set_dw1000_slowrate>:
{
    ecea:	b580      	push	{r7, lr}
    ecec:	af00      	add	r7, sp, #0
    set_spi_speed_slow();
    ecee:	f7f2 ff7b 	bl	1be8 <set_spi_speed_slow>
}
    ecf2:	bf00      	nop
    ecf4:	bd80      	pop	{r7, pc}

0000ecf6 <port_set_dw1000_fastrate>:
{
    ecf6:	b580      	push	{r7, lr}
    ecf8:	af00      	add	r7, sp, #0
    set_spi_speed_fast();
    ecfa:	f7f2 ff93 	bl	1c24 <set_spi_speed_fast>
}
    ecfe:	bf00      	nop
    ed00:	bd80      	pop	{r7, pc}

0000ed02 <z_impl_gpio_pin_interrupt_configure>:
					   gpio_flags_t flags);

static inline int z_impl_gpio_pin_interrupt_configure(const struct device *port,
						      gpio_pin_t pin,
						      gpio_flags_t flags)
{
    ed02:	b538      	push	{r3, r4, r5, lr}
	const struct gpio_driver_api *api =
    ed04:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
    ed06:	6904      	ldr	r4, [r0, #16]
		 "enabled.");

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    ed08:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
    ed0c:	d006      	beq.n	ed1c <z_impl_gpio_pin_interrupt_configure+0x1a>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    ed0e:	6825      	ldr	r5, [r4, #0]
    ed10:	2401      	movs	r4, #1
    ed12:	408c      	lsls	r4, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    ed14:	4225      	tst	r5, r4
    ed16:	d001      	beq.n	ed1c <z_impl_gpio_pin_interrupt_configure+0x1a>
		/* Invert signal bits */
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    ed18:	f082 62c0 	eor.w	r2, r2, #100663296	; 0x6000000
					     GPIO_INT_ENABLE_DISABLE_ONLY));
#else
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));
#endif /* CONFIG_GPIO_ENABLE_DISABLE_INTERRUPT */

	return api->pin_interrupt_configure(port, pin, mode, trig);
    ed1c:	699c      	ldr	r4, [r3, #24]
    ed1e:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
    ed22:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
    ed26:	47a0      	blx	r4
}
    ed28:	bd38      	pop	{r3, r4, r5, pc}

0000ed2a <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
    ed2a:	b538      	push	{r3, r4, r5, lr}
    ed2c:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
    ed2e:	6885      	ldr	r5, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    ed30:	6904      	ldr	r4, [r0, #16]

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    ed32:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    ed36:	d007      	beq.n	ed48 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    ed38:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
    ed3c:	d004      	beq.n	ed48 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    ed3e:	f012 0f01 	tst.w	r2, #1
    ed42:	d001      	beq.n	ed48 <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    ed44:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    ed48:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    ed4c:	f013 0f01 	tst.w	r3, #1
    ed50:	d00a      	beq.n	ed68 <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    ed52:	6823      	ldr	r3, [r4, #0]
    ed54:	f04f 0c01 	mov.w	ip, #1
    ed58:	fa0c fc01 	lsl.w	ip, ip, r1
    ed5c:	ea43 030c 	orr.w	r3, r3, ip
    ed60:	6023      	str	r3, [r4, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
    ed62:	682b      	ldr	r3, [r5, #0]
    ed64:	4798      	blx	r3
}
    ed66:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    ed68:	6823      	ldr	r3, [r4, #0]
    ed6a:	f04f 0c01 	mov.w	ip, #1
    ed6e:	fa0c fc01 	lsl.w	ip, ip, r1
    ed72:	ea23 030c 	bic.w	r3, r3, ip
    ed76:	6023      	str	r3, [r4, #0]
    ed78:	e7f3      	b.n	ed62 <z_impl_gpio_pin_configure+0x38>

0000ed7a <gpio_init_callback>:
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    ed7a:	6041      	str	r1, [r0, #4]
	callback->pin_mask = pin_mask;
    ed7c:	6082      	str	r2, [r0, #8]
}
    ed7e:	4770      	bx	lr

0000ed80 <gpio_add_callback>:
 *
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
    ed80:	b508      	push	{r3, lr}
	const struct gpio_driver_api *api =
    ed82:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    ed84:	69db      	ldr	r3, [r3, #28]
    ed86:	b113      	cbz	r3, ed8e <gpio_add_callback+0xe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    ed88:	2201      	movs	r2, #1
    ed8a:	4798      	blx	r3
}
    ed8c:	bd08      	pop	{r3, pc}
		return -ENOTSUP;
    ed8e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    ed92:	e7fb      	b.n	ed8c <gpio_add_callback+0xc>

0000ed94 <gpio_pin_interrupt_configure>:

extern int z_impl_gpio_pin_interrupt_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);

__pinned_func
static inline int gpio_pin_interrupt_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
{
    ed94:	b508      	push	{r3, lr}
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    ed96:	f7ff ffb4 	bl	ed02 <z_impl_gpio_pin_interrupt_configure>
}
    ed9a:	bd08      	pop	{r3, pc}

0000ed9c <gpio_pin_configure>:

extern int z_impl_gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);

__pinned_func
static inline int gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
{
    ed9c:	b508      	push	{r3, lr}
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    ed9e:	f7ff ffc4 	bl	ed2a <z_impl_gpio_pin_configure>
}
    eda2:	bd08      	pop	{r3, pc}

0000eda4 <cbprintf_via_va_list>:
{
    eda4:	b510      	push	{r4, lr}
    eda6:	460c      	mov	r4, r1
    eda8:	4611      	mov	r1, r2
    edaa:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
    edac:	9b02      	ldr	r3, [sp, #8]
    edae:	47a0      	blx	r4
}
    edb0:	bd10      	pop	{r4, pc}

0000edb2 <is_fmt_spec>:
	return (c >= 64) && (c <= 122);
    edb2:	3840      	subs	r0, #64	; 0x40
    edb4:	b2c0      	uxtb	r0, r0
}
    edb6:	283a      	cmp	r0, #58	; 0x3a
    edb8:	bf8c      	ite	hi
    edba:	2000      	movhi	r0, #0
    edbc:	2001      	movls	r0, #1
    edbe:	4770      	bx	lr

0000edc0 <get_package_len>:
{
    edc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    edc2:	4606      	mov	r6, r0
	args_size = buf[0] * sizeof(int);
    edc4:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    edc6:	7845      	ldrb	r5, [r0, #1]
	ros_nbr   = buf[2];
    edc8:	7884      	ldrb	r4, [r0, #2]
	buf += ros_nbr;
    edca:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    edce:	4404      	add	r4, r0
	for (unsigned int i = 0; i < s_nbr; i++) {
    edd0:	2700      	movs	r7, #0
    edd2:	e006      	b.n	ede2 <get_package_len+0x22>
		buf++;
    edd4:	3401      	adds	r4, #1
		buf += strlen((const char *)buf) + 1;
    edd6:	4620      	mov	r0, r4
    edd8:	f003 ff81 	bl	12cde <strlen>
    eddc:	3001      	adds	r0, #1
    edde:	4404      	add	r4, r0
	for (unsigned int i = 0; i < s_nbr; i++) {
    ede0:	3701      	adds	r7, #1
    ede2:	42af      	cmp	r7, r5
    ede4:	d3f6      	bcc.n	edd4 <get_package_len+0x14>
}
    ede6:	1ba0      	subs	r0, r4, r6
    ede8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000edea <append_string>:
{
    edea:	b570      	push	{r4, r5, r6, lr}
    edec:	4614      	mov	r4, r2
	if (cb == NULL) {
    edee:	b138      	cbz	r0, ee00 <append_string+0x16>
    edf0:	460d      	mov	r5, r1
    edf2:	4619      	mov	r1, r3
    edf4:	4606      	mov	r6, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    edf6:	b143      	cbz	r3, ee0a <append_string+0x20>
	return cb(str, strl, ctx);
    edf8:	462a      	mov	r2, r5
    edfa:	4620      	mov	r0, r4
    edfc:	47b0      	blx	r6
}
    edfe:	bd70      	pop	{r4, r5, r6, pc}
		return 1 + strlen(str);
    ee00:	4610      	mov	r0, r2
    ee02:	f003 ff6c 	bl	12cde <strlen>
    ee06:	3001      	adds	r0, #1
    ee08:	e7f9      	b.n	edfe <append_string+0x14>
	strl = strl > 0 ? strl : strlen(str) + 1;
    ee0a:	4610      	mov	r0, r2
    ee0c:	f003 ff67 	bl	12cde <strlen>
    ee10:	b283      	uxth	r3, r0
    ee12:	3301      	adds	r3, #1
    ee14:	b299      	uxth	r1, r3
    ee16:	e7ef      	b.n	edf8 <append_string+0xe>

0000ee18 <cbpprintf_external>:
	if (buf == NULL) {
    ee18:	b35b      	cbz	r3, ee72 <cbpprintf_external+0x5a>
{
    ee1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ee1e:	b082      	sub	sp, #8
    ee20:	4607      	mov	r7, r0
    ee22:	4688      	mov	r8, r1
    ee24:	4691      	mov	r9, r2
    ee26:	461d      	mov	r5, r3
	args_size = hdr->hdr.desc.len * sizeof(int);
    ee28:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = hdr->hdr.desc.str_cnt;
    ee2a:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
    ee2c:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
    ee2e:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    ee30:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    ee34:	eb04 0443 	add.w	r4, r4, r3, lsl #1
    ee38:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
    ee3a:	f04f 0a00 	mov.w	sl, #0
    ee3e:	e00a      	b.n	ee56 <cbpprintf_external+0x3e>
		s_idx = *(uint8_t *)s++;
    ee40:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    ee44:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    ee48:	4620      	mov	r0, r4
    ee4a:	f003 ff48 	bl	12cde <strlen>
    ee4e:	3001      	adds	r0, #1
    ee50:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    ee52:	f10a 0a01 	add.w	sl, sl, #1
    ee56:	45b2      	cmp	sl, r6
    ee58:	d3f2      	bcc.n	ee40 <cbpprintf_external+0x28>
	buf += sizeof(*hdr);
    ee5a:	f105 0308 	add.w	r3, r5, #8
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
    ee5e:	9300      	str	r3, [sp, #0]
    ee60:	686b      	ldr	r3, [r5, #4]
    ee62:	464a      	mov	r2, r9
    ee64:	4641      	mov	r1, r8
    ee66:	4638      	mov	r0, r7
    ee68:	f7ff ff9c 	bl	eda4 <cbprintf_via_va_list>
}
    ee6c:	b002      	add	sp, #8
    ee6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
    ee72:	f06f 0015 	mvn.w	r0, #21
}
    ee76:	4770      	bx	lr

0000ee78 <is_ptr>:
{
    ee78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ee7c:	4604      	mov	r4, r0
    ee7e:	4688      	mov	r8, r1
	int cnt = 0;
    ee80:	2700      	movs	r7, #0
	bool mod = false;
    ee82:	463e      	mov	r6, r7
	while ((c = *fmt++) != '\0') {
    ee84:	e007      	b.n	ee96 <is_ptr+0x1e>
				if (c == 'p') {
    ee86:	2d70      	cmp	r5, #112	; 0x70
    ee88:	d018      	beq.n	eebc <is_ptr+0x44>
				} else if (is_fmt_spec(c)) {
    ee8a:	4628      	mov	r0, r5
    ee8c:	f7ff ff91 	bl	edb2 <is_fmt_spec>
    ee90:	b9b8      	cbnz	r0, eec2 <is_ptr+0x4a>
		if (c == '%') {
    ee92:	2d25      	cmp	r5, #37	; 0x25
    ee94:	d00e      	beq.n	eeb4 <is_ptr+0x3c>
	while ((c = *fmt++) != '\0') {
    ee96:	f814 5b01 	ldrb.w	r5, [r4], #1
    ee9a:	b175      	cbz	r5, eeba <is_ptr+0x42>
		if (mod) {
    ee9c:	2e00      	cmp	r6, #0
    ee9e:	d0f8      	beq.n	ee92 <is_ptr+0x1a>
			if (cnt == n) {
    eea0:	4547      	cmp	r7, r8
    eea2:	d0f0      	beq.n	ee86 <is_ptr+0xe>
			} else if (is_fmt_spec(c)) {
    eea4:	4628      	mov	r0, r5
    eea6:	f7ff ff84 	bl	edb2 <is_fmt_spec>
    eeaa:	2800      	cmp	r0, #0
    eeac:	d0f1      	beq.n	ee92 <is_ptr+0x1a>
				cnt++;
    eeae:	3701      	adds	r7, #1
				mod = false;
    eeb0:	2600      	movs	r6, #0
    eeb2:	e7ee      	b.n	ee92 <is_ptr+0x1a>
			mod = !mod;
    eeb4:	f086 0601 	eor.w	r6, r6, #1
    eeb8:	e7ed      	b.n	ee96 <is_ptr+0x1e>
	return false;
    eeba:	2600      	movs	r6, #0
}
    eebc:	4630      	mov	r0, r6
    eebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					return false;
    eec2:	2600      	movs	r6, #0
    eec4:	e7fa      	b.n	eebc <is_ptr+0x44>

0000eec6 <arch_printk_char_out>:
}
    eec6:	2000      	movs	r0, #0
    eec8:	4770      	bx	lr

0000eeca <str_out>:
{
    eeca:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    eecc:	680c      	ldr	r4, [r1, #0]
    eece:	b154      	cbz	r4, eee6 <str_out+0x1c>
    eed0:	688a      	ldr	r2, [r1, #8]
    eed2:	684b      	ldr	r3, [r1, #4]
    eed4:	429a      	cmp	r2, r3
    eed6:	da06      	bge.n	eee6 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
    eed8:	3b01      	subs	r3, #1
    eeda:	429a      	cmp	r2, r3
    eedc:	d008      	beq.n	eef0 <str_out+0x26>
		ctx->str[ctx->count++] = c;
    eede:	1c53      	adds	r3, r2, #1
    eee0:	608b      	str	r3, [r1, #8]
    eee2:	54a0      	strb	r0, [r4, r2]
    eee4:	e002      	b.n	eeec <str_out+0x22>
		ctx->count++;
    eee6:	688b      	ldr	r3, [r1, #8]
    eee8:	3301      	adds	r3, #1
    eeea:	608b      	str	r3, [r1, #8]
}
    eeec:	bc10      	pop	{r4}
    eeee:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    eef0:	1c53      	adds	r3, r2, #1
    eef2:	608b      	str	r3, [r1, #8]
    eef4:	2300      	movs	r3, #0
    eef6:	54a3      	strb	r3, [r4, r2]
    eef8:	e7f8      	b.n	eeec <str_out+0x22>

0000eefa <vprintk>:
{
    eefa:	b508      	push	{r3, lr}
		z_log_vprintk(fmt, ap);
    eefc:	f001 fb92 	bl	10624 <z_log_vprintk>
}
    ef00:	bd08      	pop	{r3, pc}

0000ef02 <printk>:
{
    ef02:	b40f      	push	{r0, r1, r2, r3}
    ef04:	b500      	push	{lr}
    ef06:	b083      	sub	sp, #12
    ef08:	a904      	add	r1, sp, #16
    ef0a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    ef0e:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    ef10:	f7ff fff3 	bl	eefa <vprintk>
}
    ef14:	b003      	add	sp, #12
    ef16:	f85d eb04 	ldr.w	lr, [sp], #4
    ef1a:	b004      	add	sp, #16
    ef1c:	4770      	bx	lr

0000ef1e <snprintk>:
{
    ef1e:	b40c      	push	{r2, r3}
    ef20:	b500      	push	{lr}
    ef22:	b083      	sub	sp, #12
    ef24:	ab04      	add	r3, sp, #16
    ef26:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    ef2a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    ef2c:	f7f3 fd4e 	bl	29cc <vsnprintk>
}
    ef30:	b003      	add	sp, #12
    ef32:	f85d eb04 	ldr.w	lr, [sp], #4
    ef36:	b002      	add	sp, #8
    ef38:	4770      	bx	lr

0000ef3a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    ef3a:	b508      	push	{r3, lr}
    ef3c:	4604      	mov	r4, r0
    ef3e:	4608      	mov	r0, r1
    ef40:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    ef42:	461a      	mov	r2, r3
    ef44:	47a0      	blx	r4
	return z_impl_z_current_get();
    ef46:	f7ff f86b 	bl	e020 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    ef4a:	f7fa f867 	bl	901c <z_impl_k_thread_abort>

0000ef4e <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    ef4e:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ef52:	8b03      	ldrh	r3, [r0, #24]
    ef54:	f023 0307 	bic.w	r3, r3, #7
    ef58:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    ef5a:	8303      	strh	r3, [r0, #24]
}
    ef5c:	4770      	bx	lr

0000ef5e <notify_monitors>:
{
    ef5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ef62:	4606      	mov	r6, r0
    ef64:	460f      	mov	r7, r1
    ef66:	4690      	mov	r8, r2
	return list->head;
    ef68:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    ef6a:	b121      	cbz	r1, ef76 <notify_monitors+0x18>
	return node->next;
    ef6c:	680c      	ldr	r4, [r1, #0]
    ef6e:	b13c      	cbz	r4, ef80 <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
    ef70:	b931      	cbnz	r1, ef80 <notify_monitors+0x22>
    ef72:	460c      	mov	r4, r1
    ef74:	e004      	b.n	ef80 <notify_monitors+0x22>
    ef76:	460c      	mov	r4, r1
    ef78:	e002      	b.n	ef80 <notify_monitors+0x22>
    ef7a:	4623      	mov	r3, r4
    ef7c:	4621      	mov	r1, r4
    ef7e:	461c      	mov	r4, r3
    ef80:	b169      	cbz	r1, ef9e <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
    ef82:	684d      	ldr	r5, [r1, #4]
    ef84:	4643      	mov	r3, r8
    ef86:	463a      	mov	r2, r7
    ef88:	4630      	mov	r0, r6
    ef8a:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    ef8c:	2c00      	cmp	r4, #0
    ef8e:	d0f4      	beq.n	ef7a <notify_monitors+0x1c>
	return node->next;
    ef90:	6823      	ldr	r3, [r4, #0]
    ef92:	2b00      	cmp	r3, #0
    ef94:	d0f2      	beq.n	ef7c <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    ef96:	2c00      	cmp	r4, #0
    ef98:	d1f0      	bne.n	ef7c <notify_monitors+0x1e>
    ef9a:	4623      	mov	r3, r4
    ef9c:	e7ee      	b.n	ef7c <notify_monitors+0x1e>
}
    ef9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000efa2 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    efa2:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    efa4:	f013 0307 	ands.w	r3, r3, #7
    efa8:	d103      	bne.n	efb2 <process_recheck+0x10>
	return list->head;
    efaa:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    efac:	b10a      	cbz	r2, efb2 <process_recheck+0x10>
		evt = EVT_START;
    efae:	2003      	movs	r0, #3
    efb0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    efb2:	2b02      	cmp	r3, #2
    efb4:	d003      	beq.n	efbe <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    efb6:	2b01      	cmp	r3, #1
    efb8:	d006      	beq.n	efc8 <process_recheck+0x26>
	int evt = EVT_NOP;
    efba:	2000      	movs	r0, #0
    efbc:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    efbe:	8b42      	ldrh	r2, [r0, #26]
    efc0:	2a00      	cmp	r2, #0
    efc2:	d1f8      	bne.n	efb6 <process_recheck+0x14>
		evt = EVT_STOP;
    efc4:	2004      	movs	r0, #4
    efc6:	4770      	bx	lr
    efc8:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    efca:	b10b      	cbz	r3, efd0 <process_recheck+0x2e>
		evt = EVT_RESET;
    efcc:	2005      	movs	r0, #5
}
    efce:	4770      	bx	lr
	int evt = EVT_NOP;
    efd0:	2000      	movs	r0, #0
    efd2:	4770      	bx	lr

0000efd4 <process_complete>:
{
    efd4:	b510      	push	{r4, lr}
    efd6:	4604      	mov	r4, r0
    efd8:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    efda:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    efdc:	2a00      	cmp	r2, #0
    efde:	db07      	blt.n	eff0 <process_complete+0x1c>
    efe0:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    efe4:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    efe6:	2a01      	cmp	r2, #1
    efe8:	d90e      	bls.n	f008 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    efea:	2b04      	cmp	r3, #4
    efec:	d036      	beq.n	f05c <process_complete+0x88>
}
    efee:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
    eff0:	e9d0 0100 	ldrd	r0, r1, [r0]
    eff4:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    eff8:	2300      	movs	r3, #0
    effa:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    effc:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    effe:	2101      	movs	r1, #1
    f000:	4620      	mov	r0, r4
    f002:	f7ff ffa4 	bl	ef4e <set_state>
    f006:	e7f2      	b.n	efee <process_complete+0x1a>
		*clients = mgr->clients;
    f008:	e9d0 0100 	ldrd	r0, r1, [r0]
    f00c:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    f010:	2200      	movs	r2, #0
    f012:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    f014:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    f016:	2b06      	cmp	r3, #6
    f018:	d11b      	bne.n	f052 <process_complete+0x7e>
	return list->head;
    f01a:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    f01e:	b153      	cbz	r3, f036 <process_complete+0x62>
				mgr->refs += 1U;
    f020:	8b62      	ldrh	r2, [r4, #26]
    f022:	3201      	adds	r2, #1
    f024:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    f026:	461a      	mov	r2, r3
	return node->next;
    f028:	681b      	ldr	r3, [r3, #0]
    f02a:	2b00      	cmp	r3, #0
    f02c:	d0f7      	beq.n	f01e <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    f02e:	2a00      	cmp	r2, #0
    f030:	d1f5      	bne.n	f01e <process_complete+0x4a>
    f032:	4613      	mov	r3, r2
    f034:	e7f3      	b.n	f01e <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
    f036:	2102      	movs	r1, #2
    f038:	4620      	mov	r0, r4
    f03a:	f7ff ff88 	bl	ef4e <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    f03e:	4620      	mov	r0, r4
    f040:	f7ff ffaf 	bl	efa2 <process_recheck>
    f044:	2800      	cmp	r0, #0
    f046:	d0d2      	beq.n	efee <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    f048:	8b23      	ldrh	r3, [r4, #24]
    f04a:	f043 0320 	orr.w	r3, r3, #32
    f04e:	8323      	strh	r3, [r4, #24]
    f050:	e7cd      	b.n	efee <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    f052:	2100      	movs	r1, #0
    f054:	4620      	mov	r0, r4
    f056:	f7ff ff7a 	bl	ef4e <set_state>
    f05a:	e7f0      	b.n	f03e <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
    f05c:	2100      	movs	r1, #0
    f05e:	f7ff ff76 	bl	ef4e <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    f062:	4620      	mov	r0, r4
    f064:	f7ff ff9d 	bl	efa2 <process_recheck>
    f068:	2800      	cmp	r0, #0
    f06a:	d0c0      	beq.n	efee <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    f06c:	8b23      	ldrh	r3, [r4, #24]
    f06e:	f043 0320 	orr.w	r3, r3, #32
    f072:	8323      	strh	r3, [r4, #24]
}
    f074:	e7bb      	b.n	efee <process_complete+0x1a>

0000f076 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    f076:	b150      	cbz	r0, f08e <validate_args+0x18>
{
    f078:	b510      	push	{r4, lr}
    f07a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    f07c:	b151      	cbz	r1, f094 <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
    f07e:	1d08      	adds	r0, r1, #4
    f080:	f000 f8c4 	bl	f20c <sys_notify_validate>
	if ((rv == 0)
    f084:	b910      	cbnz	r0, f08c <validate_args+0x16>
	    && ((cli->notify.flags
    f086:	68a3      	ldr	r3, [r4, #8]
    f088:	2b03      	cmp	r3, #3
    f08a:	d806      	bhi.n	f09a <validate_args+0x24>
}
    f08c:	bd10      	pop	{r4, pc}
		return -EINVAL;
    f08e:	f06f 0015 	mvn.w	r0, #21
}
    f092:	4770      	bx	lr
		return -EINVAL;
    f094:	f06f 0015 	mvn.w	r0, #21
    f098:	e7f8      	b.n	f08c <validate_args+0x16>
		rv = -EINVAL;
    f09a:	f06f 0015 	mvn.w	r0, #21
    f09e:	e7f5      	b.n	f08c <validate_args+0x16>

0000f0a0 <notify_one>:
{
    f0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f0a4:	4607      	mov	r7, r0
    f0a6:	460c      	mov	r4, r1
    f0a8:	4616      	mov	r6, r2
    f0aa:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    f0ac:	4619      	mov	r1, r3
    f0ae:	1d20      	adds	r0, r4, #4
    f0b0:	f000 f8cb 	bl	f24a <sys_notify_finalize>
	if (cb) {
    f0b4:	b128      	cbz	r0, f0c2 <notify_one+0x22>
    f0b6:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    f0b8:	462b      	mov	r3, r5
    f0ba:	4632      	mov	r2, r6
    f0bc:	4621      	mov	r1, r4
    f0be:	4638      	mov	r0, r7
    f0c0:	47c0      	blx	r8
}
    f0c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f0c6 <notify_all>:
{
    f0c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f0ca:	4680      	mov	r8, r0
    f0cc:	460c      	mov	r4, r1
    f0ce:	4617      	mov	r7, r2
    f0d0:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    f0d2:	e004      	b.n	f0de <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    f0d4:	4633      	mov	r3, r6
    f0d6:	463a      	mov	r2, r7
    f0d8:	4640      	mov	r0, r8
    f0da:	f7ff ffe1 	bl	f0a0 <notify_one>
	return list->head;
    f0de:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    f0e0:	b131      	cbz	r1, f0f0 <notify_all+0x2a>
	return node->next;
    f0e2:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    f0e4:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    f0e6:	6863      	ldr	r3, [r4, #4]
    f0e8:	428b      	cmp	r3, r1
    f0ea:	d1f3      	bne.n	f0d4 <notify_all+0xe>
	list->tail = node;
    f0ec:	6065      	str	r5, [r4, #4]
}
    f0ee:	e7f1      	b.n	f0d4 <notify_all+0xe>
}
    f0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f0f4 <transition_complete>:
{
    f0f4:	b508      	push	{r3, lr}
	__asm__ volatile(
    f0f6:	f04f 0c20 	mov.w	ip, #32
    f0fa:	f3ef 8211 	mrs	r2, BASEPRI
    f0fe:	f38c 8812 	msr	BASEPRI_MAX, ip
    f102:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    f106:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    f108:	2101      	movs	r1, #1
    f10a:	f7f3 fc77 	bl	29fc <process_event>
}
    f10e:	bd08      	pop	{r3, pc}

0000f110 <onoff_manager_init>:
	if ((mgr == NULL)
    f110:	4603      	mov	r3, r0
    f112:	b170      	cbz	r0, f132 <onoff_manager_init+0x22>
	    || (transitions == NULL)
    f114:	b181      	cbz	r1, f138 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
    f116:	680a      	ldr	r2, [r1, #0]
    f118:	b18a      	cbz	r2, f13e <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
    f11a:	684a      	ldr	r2, [r1, #4]
    f11c:	b192      	cbz	r2, f144 <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    f11e:	2000      	movs	r0, #0
    f120:	6018      	str	r0, [r3, #0]
    f122:	6058      	str	r0, [r3, #4]
    f124:	6098      	str	r0, [r3, #8]
    f126:	60d8      	str	r0, [r3, #12]
    f128:	6118      	str	r0, [r3, #16]
    f12a:	6158      	str	r0, [r3, #20]
    f12c:	6198      	str	r0, [r3, #24]
    f12e:	6119      	str	r1, [r3, #16]
	return 0;
    f130:	4770      	bx	lr
		return -EINVAL;
    f132:	f06f 0015 	mvn.w	r0, #21
    f136:	4770      	bx	lr
    f138:	f06f 0015 	mvn.w	r0, #21
    f13c:	4770      	bx	lr
    f13e:	f06f 0015 	mvn.w	r0, #21
    f142:	4770      	bx	lr
    f144:	f06f 0015 	mvn.w	r0, #21
}
    f148:	4770      	bx	lr

0000f14a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    f14a:	b570      	push	{r4, r5, r6, lr}
    f14c:	4605      	mov	r5, r0
    f14e:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    f150:	f7ff ff91 	bl	f076 <validate_args>

	if (rv < 0) {
    f154:	1e04      	subs	r4, r0, #0
    f156:	db30      	blt.n	f1ba <onoff_request+0x70>
    f158:	f04f 0320 	mov.w	r3, #32
    f15c:	f3ef 8211 	mrs	r2, BASEPRI
    f160:	f383 8812 	msr	BASEPRI_MAX, r3
    f164:	f3bf 8f6f 	isb	sy
    f168:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    f16a:	f8b5 c018 	ldrh.w	ip, [r5, #24]
    f16e:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    f172:	8b6b      	ldrh	r3, [r5, #26]
    f174:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f178:	428b      	cmp	r3, r1
    f17a:	d02c      	beq.n	f1d6 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    f17c:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
    f17e:	f1bc 0f02 	cmp.w	ip, #2
    f182:	d008      	beq.n	f196 <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    f184:	f1bc 0f06 	cmp.w	ip, #6
    f188:	d819      	bhi.n	f1be <onoff_request+0x74>
    f18a:	e8df f00c 	tbb	[pc, ip]
    f18e:	181e      	.short	0x181e
    f190:	2a1e1818 	.word	0x2a1e1818
    f194:	1e          	.byte	0x1e
    f195:	00          	.byte	0x00
		mgr->refs += 1U;
    f196:	3301      	adds	r3, #1
    f198:	836b      	strh	r3, [r5, #26]
		notify = true;
    f19a:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
    f19c:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
    f19e:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
    f1a0:	b128      	cbz	r0, f1ae <onoff_request+0x64>
	parent->next = child;
    f1a2:	2000      	movs	r0, #0
    f1a4:	6030      	str	r0, [r6, #0]
	return list->tail;
    f1a6:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    f1a8:	b308      	cbz	r0, f1ee <onoff_request+0xa4>
	parent->next = child;
    f1aa:	6006      	str	r6, [r0, #0]
	list->tail = node;
    f1ac:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    f1ae:	bb09      	cbnz	r1, f1f4 <onoff_request+0xaa>
	__asm__ volatile(
    f1b0:	f38e 8811 	msr	BASEPRI, lr
    f1b4:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    f1b8:	bb0b      	cbnz	r3, f1fe <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    f1ba:	4620      	mov	r0, r4
    f1bc:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    f1be:	f06f 0404 	mvn.w	r4, #4
    f1c2:	2300      	movs	r3, #0
    f1c4:	4619      	mov	r1, r3
    f1c6:	4618      	mov	r0, r3
    f1c8:	e7ea      	b.n	f1a0 <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
    f1ca:	fabc f18c 	clz	r1, ip
    f1ce:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
    f1d0:	2300      	movs	r3, #0
		add_client = true;
    f1d2:	2001      	movs	r0, #1
    f1d4:	e7e4      	b.n	f1a0 <onoff_request+0x56>
		rv = -EAGAIN;
    f1d6:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
    f1da:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
    f1dc:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
    f1de:	4618      	mov	r0, r3
    f1e0:	e7de      	b.n	f1a0 <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
    f1e2:	f06f 0485 	mvn.w	r4, #133	; 0x85
    f1e6:	2300      	movs	r3, #0
    f1e8:	4619      	mov	r1, r3
    f1ea:	4618      	mov	r0, r3
    f1ec:	e7d8      	b.n	f1a0 <onoff_request+0x56>
    f1ee:	606e      	str	r6, [r5, #4]
	list->head = node;
    f1f0:	602e      	str	r6, [r5, #0]
}
    f1f2:	e7dc      	b.n	f1ae <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
    f1f4:	2102      	movs	r1, #2
    f1f6:	4628      	mov	r0, r5
    f1f8:	f7f3 fc00 	bl	29fc <process_event>
    f1fc:	e7dd      	b.n	f1ba <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
    f1fe:	2300      	movs	r3, #0
    f200:	4662      	mov	r2, ip
    f202:	4631      	mov	r1, r6
    f204:	4628      	mov	r0, r5
    f206:	f7ff ff4b 	bl	f0a0 <notify_one>
    f20a:	e7d6      	b.n	f1ba <onoff_request+0x70>

0000f20c <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    f20c:	4602      	mov	r2, r0
    f20e:	b1b0      	cbz	r0, f23e <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    f210:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    f212:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    f216:	2b02      	cmp	r3, #2
    f218:	d00b      	beq.n	f232 <sys_notify_validate+0x26>
    f21a:	2b03      	cmp	r3, #3
    f21c:	d004      	beq.n	f228 <sys_notify_validate+0x1c>
    f21e:	2b01      	cmp	r3, #1
    f220:	d004      	beq.n	f22c <sys_notify_validate+0x20>
    f222:	f06f 0015 	mvn.w	r0, #21
    f226:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    f228:	6803      	ldr	r3, [r0, #0]
    f22a:	b15b      	cbz	r3, f244 <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    f22c:	2000      	movs	r0, #0
    f22e:	6090      	str	r0, [r2, #8]
    f230:	4770      	bx	lr
		if (notify->method.signal == NULL) {
    f232:	6803      	ldr	r3, [r0, #0]
    f234:	2b00      	cmp	r3, #0
    f236:	d1f9      	bne.n	f22c <sys_notify_validate+0x20>
			rv = -EINVAL;
    f238:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    f23c:	4770      	bx	lr
		return -EINVAL;
    f23e:	f06f 0015 	mvn.w	r0, #21
    f242:	4770      	bx	lr
			rv = -EINVAL;
    f244:	f06f 0015 	mvn.w	r0, #21
    f248:	4770      	bx	lr

0000f24a <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    f24a:	b510      	push	{r4, lr}
    f24c:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    f24e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    f250:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    f254:	6081      	str	r1, [r0, #8]
	switch (method) {
    f256:	2a02      	cmp	r2, #2
    f258:	d004      	beq.n	f264 <sys_notify_finalize+0x1a>
    f25a:	2a03      	cmp	r2, #3
    f25c:	d105      	bne.n	f26a <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    f25e:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
    f260:	2000      	movs	r0, #0
		break;
    f262:	e004      	b.n	f26e <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
    f264:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    f266:	2400      	movs	r4, #0
		break;
    f268:	e001      	b.n	f26e <sys_notify_finalize+0x24>
	switch (method) {
    f26a:	2400      	movs	r4, #0
    f26c:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    f26e:	2200      	movs	r2, #0
    f270:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    f272:	b108      	cbz	r0, f278 <sys_notify_finalize+0x2e>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    f274:	f7ff f974 	bl	e560 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    f278:	4620      	mov	r0, r4
    f27a:	bd10      	pop	{r4, pc}

0000f27c <crc32_ieee>:
{
    f27c:	b508      	push	{r3, lr}
    f27e:	460a      	mov	r2, r1
	return crc32_ieee_update(0x0, data, len);
    f280:	4601      	mov	r1, r0
    f282:	2000      	movs	r0, #0
    f284:	f7f3 fc70 	bl	2b68 <crc32_ieee_update>
}
    f288:	bd08      	pop	{r3, pc}

0000f28a <extract_decimal>:
{
    f28a:	4684      	mov	ip, r0
	const char *sp = *str;
    f28c:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    f28e:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp) != 0) {
    f290:	e006      	b.n	f2a0 <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
    f292:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    f296:	3201      	adds	r2, #1
    f298:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    f29c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    f2a0:	7813      	ldrb	r3, [r2, #0]
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    f2a2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    f2a6:	2909      	cmp	r1, #9
    f2a8:	d9f3      	bls.n	f292 <extract_decimal+0x8>
	*str = sp;
    f2aa:	f8cc 2000 	str.w	r2, [ip]
}
    f2ae:	4770      	bx	lr

0000f2b0 <extract_width>:
{
    f2b0:	b530      	push	{r4, r5, lr}
    f2b2:	b083      	sub	sp, #12
    f2b4:	4604      	mov	r4, r0
    f2b6:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
    f2b8:	7803      	ldrb	r3, [r0, #0]
    f2ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f2be:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
    f2c0:	460d      	mov	r5, r1
    f2c2:	780b      	ldrb	r3, [r1, #0]
    f2c4:	2b2a      	cmp	r3, #42	; 0x2a
    f2c6:	d018      	beq.n	f2fa <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
    f2c8:	a801      	add	r0, sp, #4
    f2ca:	f7ff ffde 	bl	f28a <extract_decimal>
	if (sp != wp) {
    f2ce:	9b01      	ldr	r3, [sp, #4]
    f2d0:	429d      	cmp	r5, r3
    f2d2:	d00f      	beq.n	f2f4 <extract_width+0x44>
		conv->width_present = true;
    f2d4:	7823      	ldrb	r3, [r4, #0]
    f2d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f2da:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    f2dc:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    f2de:	b2db      	uxtb	r3, r3
    f2e0:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    f2e4:	2800      	cmp	r0, #0
    f2e6:	db10      	blt.n	f30a <extract_width+0x5a>
    f2e8:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    f2ea:	4313      	orrs	r3, r2
    f2ec:	7822      	ldrb	r2, [r4, #0]
    f2ee:	f363 0241 	bfi	r2, r3, #1, #1
    f2f2:	7022      	strb	r2, [r4, #0]
	return sp;
    f2f4:	9801      	ldr	r0, [sp, #4]
}
    f2f6:	b003      	add	sp, #12
    f2f8:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
    f2fa:	7843      	ldrb	r3, [r0, #1]
    f2fc:	f043 0301 	orr.w	r3, r3, #1
    f300:	7043      	strb	r3, [r0, #1]
		return ++sp;
    f302:	4608      	mov	r0, r1
    f304:	3001      	adds	r0, #1
    f306:	9001      	str	r0, [sp, #4]
    f308:	e7f5      	b.n	f2f6 <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
    f30a:	2201      	movs	r2, #1
    f30c:	e7ed      	b.n	f2ea <extract_width+0x3a>

0000f30e <extract_prec>:
{
    f30e:	b510      	push	{r4, lr}
    f310:	b082      	sub	sp, #8
    f312:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
    f314:	780b      	ldrb	r3, [r1, #0]
    f316:	2b2e      	cmp	r3, #46	; 0x2e
    f318:	bf14      	ite	ne
    f31a:	2300      	movne	r3, #0
    f31c:	2301      	moveq	r3, #1
    f31e:	7842      	ldrb	r2, [r0, #1]
    f320:	f363 0241 	bfi	r2, r3, #1, #1
    f324:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
    f326:	b1c3      	cbz	r3, f35a <extract_prec+0x4c>
    f328:	4604      	mov	r4, r0
	++sp;
    f32a:	9b01      	ldr	r3, [sp, #4]
    f32c:	1c5a      	adds	r2, r3, #1
    f32e:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    f330:	785b      	ldrb	r3, [r3, #1]
    f332:	2b2a      	cmp	r3, #42	; 0x2a
    f334:	d013      	beq.n	f35e <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
    f336:	a801      	add	r0, sp, #4
    f338:	f7ff ffa7 	bl	f28a <extract_decimal>
	conv->prec_value = prec;
    f33c:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    f33e:	7823      	ldrb	r3, [r4, #0]
    f340:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    f344:	2800      	cmp	r0, #0
    f346:	db12      	blt.n	f36e <extract_prec+0x60>
    f348:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    f34a:	4313      	orrs	r3, r2
    f34c:	7822      	ldrb	r2, [r4, #0]
    f34e:	f363 0241 	bfi	r2, r3, #1, #1
    f352:	7022      	strb	r2, [r4, #0]
	return sp;
    f354:	9801      	ldr	r0, [sp, #4]
}
    f356:	b002      	add	sp, #8
    f358:	bd10      	pop	{r4, pc}
		return sp;
    f35a:	4608      	mov	r0, r1
    f35c:	e7fb      	b.n	f356 <extract_prec+0x48>
		conv->prec_star = true;
    f35e:	7843      	ldrb	r3, [r0, #1]
    f360:	f043 0304 	orr.w	r3, r3, #4
    f364:	7043      	strb	r3, [r0, #1]
		return ++sp;
    f366:	4610      	mov	r0, r2
    f368:	3001      	adds	r0, #1
    f36a:	9001      	str	r0, [sp, #4]
    f36c:	e7f3      	b.n	f356 <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
    f36e:	2201      	movs	r2, #1
    f370:	e7eb      	b.n	f34a <extract_prec+0x3c>

0000f372 <extract_length>:
{
    f372:	4602      	mov	r2, r0
	switch (*sp) {
    f374:	780b      	ldrb	r3, [r1, #0]
    f376:	3b4c      	subs	r3, #76	; 0x4c
    f378:	2b2e      	cmp	r3, #46	; 0x2e
    f37a:	d85b      	bhi.n	f434 <extract_length+0xc2>
    f37c:	e8df f003 	tbb	[pc, r3]
    f380:	5a5a5a4f 	.word	0x5a5a5a4f
    f384:	5a5a5a5a 	.word	0x5a5a5a5a
    f388:	5a5a5a5a 	.word	0x5a5a5a5a
    f38c:	5a5a5a5a 	.word	0x5a5a5a5a
    f390:	5a5a5a5a 	.word	0x5a5a5a5a
    f394:	5a5a5a5a 	.word	0x5a5a5a5a
    f398:	5a5a5a5a 	.word	0x5a5a5a5a
    f39c:	5a3a5a18 	.word	0x5a3a5a18
    f3a0:	5a5a5a29 	.word	0x5a5a5a29
    f3a4:	5a5a5a5a 	.word	0x5a5a5a5a
    f3a8:	5a5a5a48 	.word	0x5a5a5a48
    f3ac:	5a5a      	.short	0x5a5a
    f3ae:	41          	.byte	0x41
    f3af:	00          	.byte	0x00
		if (*++sp == 'h') {
    f3b0:	1c48      	adds	r0, r1, #1
    f3b2:	784b      	ldrb	r3, [r1, #1]
    f3b4:	2b68      	cmp	r3, #104	; 0x68
    f3b6:	d005      	beq.n	f3c4 <extract_length+0x52>
			conv->length_mod = LENGTH_H;
    f3b8:	7853      	ldrb	r3, [r2, #1]
    f3ba:	2102      	movs	r1, #2
    f3bc:	f361 03c6 	bfi	r3, r1, #3, #4
    f3c0:	7053      	strb	r3, [r2, #1]
    f3c2:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
    f3c4:	7853      	ldrb	r3, [r2, #1]
    f3c6:	2001      	movs	r0, #1
    f3c8:	f360 03c6 	bfi	r3, r0, #3, #4
    f3cc:	7053      	strb	r3, [r2, #1]
			++sp;
    f3ce:	1c88      	adds	r0, r1, #2
    f3d0:	4770      	bx	lr
		if (*++sp == 'l') {
    f3d2:	1c48      	adds	r0, r1, #1
    f3d4:	784b      	ldrb	r3, [r1, #1]
    f3d6:	2b6c      	cmp	r3, #108	; 0x6c
    f3d8:	d005      	beq.n	f3e6 <extract_length+0x74>
			conv->length_mod = LENGTH_L;
    f3da:	7853      	ldrb	r3, [r2, #1]
    f3dc:	2103      	movs	r1, #3
    f3de:	f361 03c6 	bfi	r3, r1, #3, #4
    f3e2:	7053      	strb	r3, [r2, #1]
    f3e4:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
    f3e6:	7853      	ldrb	r3, [r2, #1]
    f3e8:	2004      	movs	r0, #4
    f3ea:	f360 03c6 	bfi	r3, r0, #3, #4
    f3ee:	7053      	strb	r3, [r2, #1]
			++sp;
    f3f0:	1c88      	adds	r0, r1, #2
    f3f2:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
    f3f4:	7853      	ldrb	r3, [r2, #1]
    f3f6:	2005      	movs	r0, #5
    f3f8:	f360 03c6 	bfi	r3, r0, #3, #4
    f3fc:	7053      	strb	r3, [r2, #1]
		++sp;
    f3fe:	1c48      	adds	r0, r1, #1
		break;
    f400:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
    f402:	7853      	ldrb	r3, [r2, #1]
    f404:	2006      	movs	r0, #6
    f406:	f360 03c6 	bfi	r3, r0, #3, #4
    f40a:	7053      	strb	r3, [r2, #1]
		++sp;
    f40c:	1c48      	adds	r0, r1, #1
		break;
    f40e:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
    f410:	7853      	ldrb	r3, [r2, #1]
    f412:	2007      	movs	r0, #7
    f414:	f360 03c6 	bfi	r3, r0, #3, #4
    f418:	7053      	strb	r3, [r2, #1]
		++sp;
    f41a:	1c48      	adds	r0, r1, #1
		break;
    f41c:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
    f41e:	7853      	ldrb	r3, [r2, #1]
    f420:	2008      	movs	r0, #8
    f422:	f360 03c6 	bfi	r3, r0, #3, #4
    f426:	7053      	strb	r3, [r2, #1]
		++sp;
    f428:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
    f42a:	7813      	ldrb	r3, [r2, #0]
    f42c:	f043 0302 	orr.w	r3, r3, #2
    f430:	7013      	strb	r3, [r2, #0]
		break;
    f432:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
    f434:	7853      	ldrb	r3, [r2, #1]
    f436:	f36f 03c6 	bfc	r3, #3, #4
    f43a:	7053      	strb	r3, [r2, #1]
		break;
    f43c:	4608      	mov	r0, r1
}
    f43e:	4770      	bx	lr

0000f440 <extract_specifier>:
{
    f440:	b500      	push	{lr}
    f442:	4602      	mov	r2, r0
	conv->specifier = *sp++;
    f444:	4608      	mov	r0, r1
    f446:	f810 3b01 	ldrb.w	r3, [r0], #1
    f44a:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
    f44c:	2b78      	cmp	r3, #120	; 0x78
    f44e:	d817      	bhi.n	f480 <extract_specifier+0x40>
    f450:	2b6e      	cmp	r3, #110	; 0x6e
    f452:	d245      	bcs.n	f4e0 <extract_specifier+0xa0>
    f454:	2b69      	cmp	r3, #105	; 0x69
    f456:	d813      	bhi.n	f480 <extract_specifier+0x40>
    f458:	2b58      	cmp	r3, #88	; 0x58
    f45a:	d317      	bcc.n	f48c <extract_specifier+0x4c>
    f45c:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
    f460:	fa5f fc8c 	uxtb.w	ip, ip
    f464:	2101      	movs	r1, #1
    f466:	fa01 f10c 	lsl.w	r1, r1, ip
    f46a:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    f46e:	d115      	bne.n	f49c <extract_specifier+0x5c>
    f470:	f640 0c01 	movw	ip, #2049	; 0x801
    f474:	ea11 0f0c 	tst.w	r1, ip
    f478:	d171      	bne.n	f55e <extract_specifier+0x11e>
    f47a:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    f47e:	d156      	bne.n	f52e <extract_specifier+0xee>
		conv->invalid = true;
    f480:	7813      	ldrb	r3, [r2, #0]
    f482:	f043 0301 	orr.w	r3, r3, #1
    f486:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
    f488:	2100      	movs	r1, #0
		break;
    f48a:	e05e      	b.n	f54a <extract_specifier+0x10a>
	switch (conv->specifier) {
    f48c:	2b41      	cmp	r3, #65	; 0x41
    f48e:	d005      	beq.n	f49c <extract_specifier+0x5c>
    f490:	d3f6      	bcc.n	f480 <extract_specifier+0x40>
    f492:	f1a3 0145 	sub.w	r1, r3, #69	; 0x45
    f496:	b2c9      	uxtb	r1, r1
    f498:	2902      	cmp	r1, #2
    f49a:	d8f1      	bhi.n	f480 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
    f49c:	7891      	ldrb	r1, [r2, #2]
    f49e:	f04f 0c04 	mov.w	ip, #4
    f4a2:	f36c 0102 	bfi	r1, ip, #0, #3
    f4a6:	7091      	strb	r1, [r2, #2]
			|| (conv->specifier == 'A');
    f4a8:	2b61      	cmp	r3, #97	; 0x61
    f4aa:	d06c      	beq.n	f586 <extract_specifier+0x146>
    f4ac:	2b41      	cmp	r3, #65	; 0x41
    f4ae:	d068      	beq.n	f582 <extract_specifier+0x142>
    f4b0:	2100      	movs	r1, #0
		conv->specifier_a = (conv->specifier == 'a')
    f4b2:	7853      	ldrb	r3, [r2, #1]
    f4b4:	f361 13c7 	bfi	r3, r1, #7, #1
    f4b8:	7053      	strb	r3, [r2, #1]
		if (conv->specifier_a
    f4ba:	b2db      	uxtb	r3, r3
    f4bc:	f992 1001 	ldrsb.w	r1, [r2, #1]
    f4c0:	2900      	cmp	r1, #0
    f4c2:	db74      	blt.n	f5ae <extract_specifier+0x16e>
		if (conv->length_mod == LENGTH_L) {
    f4c4:	f003 0378 	and.w	r3, r3, #120	; 0x78
    f4c8:	2b18      	cmp	r3, #24
    f4ca:	d05e      	beq.n	f58a <extract_specifier+0x14a>
		} else if ((conv->length_mod != LENGTH_NONE)
    f4cc:	2b00      	cmp	r3, #0
    f4ce:	d070      	beq.n	f5b2 <extract_specifier+0x172>
			   && (conv->length_mod != LENGTH_UPPER_L)) {
    f4d0:	2b40      	cmp	r3, #64	; 0x40
    f4d2:	d070      	beq.n	f5b6 <extract_specifier+0x176>
			conv->invalid = true;
    f4d4:	7813      	ldrb	r3, [r2, #0]
    f4d6:	f043 0301 	orr.w	r3, r3, #1
    f4da:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
    f4dc:	2100      	movs	r1, #0
    f4de:	e034      	b.n	f54a <extract_specifier+0x10a>
	switch (conv->specifier) {
    f4e0:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
    f4e4:	b2c9      	uxtb	r1, r1
    f4e6:	f04f 0c01 	mov.w	ip, #1
    f4ea:	fa0c fc01 	lsl.w	ip, ip, r1
    f4ee:	f240 4182 	movw	r1, #1154	; 0x482
    f4f2:	ea1c 0f01 	tst.w	ip, r1
    f4f6:	bf14      	ite	ne
    f4f8:	f04f 0e01 	movne.w	lr, #1
    f4fc:	f04f 0e00 	moveq.w	lr, #0
    f500:	d12d      	bne.n	f55e <extract_specifier+0x11e>
    f502:	f01c 0f24 	tst.w	ip, #36	; 0x24
    f506:	bf14      	ite	ne
    f508:	2101      	movne	r1, #1
    f50a:	2100      	moveq	r1, #0
    f50c:	d143      	bne.n	f596 <extract_specifier+0x156>
    f50e:	f01c 0c01 	ands.w	ip, ip, #1
    f512:	d0b5      	beq.n	f480 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
    f514:	7893      	ldrb	r3, [r2, #2]
    f516:	f04f 0e03 	mov.w	lr, #3
    f51a:	f36e 0302 	bfi	r3, lr, #0, #3
    f51e:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    f520:	7853      	ldrb	r3, [r2, #1]
    f522:	f003 0378 	and.w	r3, r3, #120	; 0x78
    f526:	2b40      	cmp	r3, #64	; 0x40
    f528:	d10f      	bne.n	f54a <extract_specifier+0x10a>
			unsupported = true;
    f52a:	4661      	mov	r1, ip
    f52c:	e00d      	b.n	f54a <extract_specifier+0x10a>
		conv->specifier_cat = SPECIFIER_SINT;
    f52e:	7891      	ldrb	r1, [r2, #2]
    f530:	f04f 0c01 	mov.w	ip, #1
    f534:	f36c 0102 	bfi	r1, ip, #0, #3
    f538:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    f53a:	7851      	ldrb	r1, [r2, #1]
    f53c:	f001 0178 	and.w	r1, r1, #120	; 0x78
    f540:	2940      	cmp	r1, #64	; 0x40
    f542:	d013      	beq.n	f56c <extract_specifier+0x12c>
		if (conv->specifier == 'c') {
    f544:	2b63      	cmp	r3, #99	; 0x63
    f546:	d018      	beq.n	f57a <extract_specifier+0x13a>
	bool unsupported = false;
    f548:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
    f54a:	7813      	ldrb	r3, [r2, #0]
    f54c:	f3c3 0c40 	ubfx	ip, r3, #1, #1
    f550:	ea41 010c 	orr.w	r1, r1, ip
    f554:	f361 0341 	bfi	r3, r1, #1, #1
    f558:	7013      	strb	r3, [r2, #0]
}
    f55a:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
    f55e:	7891      	ldrb	r1, [r2, #2]
    f560:	f04f 0c02 	mov.w	ip, #2
    f564:	f36c 0102 	bfi	r1, ip, #0, #3
    f568:	7091      	strb	r1, [r2, #2]
    f56a:	e7e6      	b.n	f53a <extract_specifier+0xfa>
			conv->invalid = true;
    f56c:	f892 c000 	ldrb.w	ip, [r2]
    f570:	f04c 0c01 	orr.w	ip, ip, #1
    f574:	f882 c000 	strb.w	ip, [r2]
    f578:	e7e4      	b.n	f544 <extract_specifier+0x104>
			unsupported = (conv->length_mod != LENGTH_NONE);
    f57a:	3900      	subs	r1, #0
    f57c:	bf18      	it	ne
    f57e:	2101      	movne	r1, #1
    f580:	e7e3      	b.n	f54a <extract_specifier+0x10a>
			|| (conv->specifier == 'A');
    f582:	2101      	movs	r1, #1
    f584:	e795      	b.n	f4b2 <extract_specifier+0x72>
    f586:	2101      	movs	r1, #1
    f588:	e793      	b.n	f4b2 <extract_specifier+0x72>
			conv->length_mod = LENGTH_NONE;
    f58a:	7853      	ldrb	r3, [r2, #1]
    f58c:	f36f 03c6 	bfc	r3, #3, #4
    f590:	7053      	strb	r3, [r2, #1]
	bool unsupported = false;
    f592:	2100      	movs	r1, #0
    f594:	e7d9      	b.n	f54a <extract_specifier+0x10a>
		conv->specifier_cat = SPECIFIER_PTR;
    f596:	7893      	ldrb	r3, [r2, #2]
    f598:	f04f 0c03 	mov.w	ip, #3
    f59c:	f36c 0302 	bfi	r3, ip, #0, #3
    f5a0:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
    f5a2:	7853      	ldrb	r3, [r2, #1]
    f5a4:	f013 0f78 	tst.w	r3, #120	; 0x78
    f5a8:	d1cf      	bne.n	f54a <extract_specifier+0x10a>
	bool unsupported = false;
    f5aa:	4671      	mov	r1, lr
    f5ac:	e7cd      	b.n	f54a <extract_specifier+0x10a>
			unsupported = true;
    f5ae:	2101      	movs	r1, #1
    f5b0:	e7cb      	b.n	f54a <extract_specifier+0x10a>
	bool unsupported = false;
    f5b2:	2100      	movs	r1, #0
    f5b4:	e7c9      	b.n	f54a <extract_specifier+0x10a>
    f5b6:	2100      	movs	r1, #0
    f5b8:	e7c7      	b.n	f54a <extract_specifier+0x10a>

0000f5ba <extract_conversion>:
{
    f5ba:	b510      	push	{r4, lr}
    f5bc:	4604      	mov	r4, r0
    f5be:	4608      	mov	r0, r1
	*conv = (struct conversion) {
    f5c0:	2300      	movs	r3, #0
    f5c2:	6023      	str	r3, [r4, #0]
    f5c4:	6063      	str	r3, [r4, #4]
    f5c6:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
    f5c8:	784b      	ldrb	r3, [r1, #1]
    f5ca:	2b25      	cmp	r3, #37	; 0x25
    f5cc:	d014      	beq.n	f5f8 <extract_conversion+0x3e>
    f5ce:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
    f5d0:	4620      	mov	r0, r4
    f5d2:	f7f3 fb0b 	bl	2bec <extract_flags>
    f5d6:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
    f5d8:	4620      	mov	r0, r4
    f5da:	f7ff fe69 	bl	f2b0 <extract_width>
    f5de:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
    f5e0:	4620      	mov	r0, r4
    f5e2:	f7ff fe94 	bl	f30e <extract_prec>
    f5e6:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
    f5e8:	4620      	mov	r0, r4
    f5ea:	f7ff fec2 	bl	f372 <extract_length>
    f5ee:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
    f5f0:	4620      	mov	r0, r4
    f5f2:	f7ff ff25 	bl	f440 <extract_specifier>
}
    f5f6:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
    f5f8:	3002      	adds	r0, #2
    f5fa:	70e3      	strb	r3, [r4, #3]
		return sp;
    f5fc:	e7fb      	b.n	f5f6 <extract_conversion+0x3c>

0000f5fe <_ldiv5>:
{
    f5fe:	b500      	push	{lr}
	uint32_t v_lo = *v;
    f600:	6802      	ldr	r2, [r0, #0]
    f602:	6841      	ldr	r1, [r0, #4]
	__asm__ ("" : "+r" (m));
    f604:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result = ((uint64_t)m << 32) | m;
    f608:	469e      	mov	lr, r3
	result += (uint64_t)v_lo * m;
    f60a:	fba2 2c03 	umull	r2, ip, r2, r3
    f60e:	eb12 0e0e 	adds.w	lr, r2, lr
    f612:	eb43 0e0c 	adc.w	lr, r3, ip
	result += (uint64_t)v_lo * m;
    f616:	eb12 020e 	adds.w	r2, r2, lr
    f61a:	f14c 0c00 	adc.w	ip, ip, #0
	result += (uint64_t)v_hi * m;
    f61e:	fba1 1303 	umull	r1, r3, r1, r3
    f622:	188a      	adds	r2, r1, r2
    f624:	eb43 020c 	adc.w	r2, r3, ip
	result += (uint64_t)v_hi * m;
    f628:	1889      	adds	r1, r1, r2
    f62a:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
    f62e:	6001      	str	r1, [r0, #0]
    f630:	6043      	str	r3, [r0, #4]
}
    f632:	f85d fb04 	ldr.w	pc, [sp], #4

0000f636 <_ldiv10>:
{
    f636:	b508      	push	{r3, lr}
	*v >>= 1;
    f638:	6802      	ldr	r2, [r0, #0]
    f63a:	6841      	ldr	r1, [r0, #4]
    f63c:	0852      	lsrs	r2, r2, #1
    f63e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    f642:	0849      	lsrs	r1, r1, #1
    f644:	6002      	str	r2, [r0, #0]
    f646:	6041      	str	r1, [r0, #4]
	_ldiv5(v);
    f648:	f7ff ffd9 	bl	f5fe <_ldiv5>
}
    f64c:	bd08      	pop	{r3, pc}

0000f64e <_get_digit>:
{
    f64e:	4684      	mov	ip, r0
	if (*digit_count > 0) {
    f650:	680b      	ldr	r3, [r1, #0]
    f652:	2b00      	cmp	r3, #0
    f654:	dd17      	ble.n	f686 <_get_digit+0x38>
		--*digit_count;
    f656:	3b01      	subs	r3, #1
    f658:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
    f65a:	6801      	ldr	r1, [r0, #0]
    f65c:	6843      	ldr	r3, [r0, #4]
    f65e:	0098      	lsls	r0, r3, #2
    f660:	ea40 7091 	orr.w	r0, r0, r1, lsr #30
    f664:	008a      	lsls	r2, r1, #2
    f666:	1852      	adds	r2, r2, r1
    f668:	eb43 0300 	adc.w	r3, r3, r0
    f66c:	1892      	adds	r2, r2, r2
    f66e:	415b      	adcs	r3, r3
    f670:	f8cc 2000 	str.w	r2, [ip]
    f674:	f8cc 3004 	str.w	r3, [ip, #4]
		rval = ((*fr >> 60) & 0xF) + '0';
    f678:	0f18      	lsrs	r0, r3, #28
    f67a:	3030      	adds	r0, #48	; 0x30
		*fr &= (BIT64(60) - 1U);
    f67c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    f680:	f8cc 3004 	str.w	r3, [ip, #4]
    f684:	4770      	bx	lr
		rval = '0';
    f686:	2030      	movs	r0, #48	; 0x30
}
    f688:	4770      	bx	lr

0000f68a <conversion_radix>:
	switch (specifier) {
    f68a:	286f      	cmp	r0, #111	; 0x6f
    f68c:	d00c      	beq.n	f6a8 <conversion_radix+0x1e>
    f68e:	d905      	bls.n	f69c <conversion_radix+0x12>
    f690:	2870      	cmp	r0, #112	; 0x70
    f692:	d00b      	beq.n	f6ac <conversion_radix+0x22>
    f694:	2878      	cmp	r0, #120	; 0x78
    f696:	d10b      	bne.n	f6b0 <conversion_radix+0x26>
		return 16;
    f698:	2010      	movs	r0, #16
    f69a:	4770      	bx	lr
	switch (specifier) {
    f69c:	2858      	cmp	r0, #88	; 0x58
    f69e:	d001      	beq.n	f6a4 <conversion_radix+0x1a>
    f6a0:	200a      	movs	r0, #10
    f6a2:	4770      	bx	lr
		return 16;
    f6a4:	2010      	movs	r0, #16
    f6a6:	4770      	bx	lr
		return 8;
    f6a8:	2008      	movs	r0, #8
    f6aa:	4770      	bx	lr
		return 16;
    f6ac:	2010      	movs	r0, #16
    f6ae:	4770      	bx	lr
	switch (specifier) {
    f6b0:	200a      	movs	r0, #10
}
    f6b2:	4770      	bx	lr

0000f6b4 <encode_uint>:
{
    f6b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f6b8:	4605      	mov	r5, r0
    f6ba:	460c      	mov	r4, r1
    f6bc:	4693      	mov	fp, r2
    f6be:	4699      	mov	r9, r3
    f6c0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier) != 0;
    f6c2:	78d0      	ldrb	r0, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    f6c4:	f1a0 0a41 	sub.w	sl, r0, #65	; 0x41
	const unsigned int radix = conversion_radix(conv->specifier);
    f6c8:	f7ff ffdf 	bl	f68a <conversion_radix>
    f6cc:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
    f6ce:	e015      	b.n	f6fc <encode_uint+0x48>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    f6d0:	f1ba 0f19 	cmp.w	sl, #25
    f6d4:	d820      	bhi.n	f718 <encode_uint+0x64>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    f6d6:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    f6d8:	3237      	adds	r2, #55	; 0x37
    f6da:	b2d2      	uxtb	r2, r2
    f6dc:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
    f6e0:	4632      	mov	r2, r6
    f6e2:	4643      	mov	r3, r8
    f6e4:	4628      	mov	r0, r5
    f6e6:	4621      	mov	r1, r4
    f6e8:	f7f0 fcf8 	bl	dc <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    f6ec:	42b5      	cmp	r5, r6
    f6ee:	f174 0400 	sbcs.w	r4, r4, #0
    f6f2:	d315      	bcc.n	f720 <encode_uint+0x6c>
    f6f4:	454f      	cmp	r7, r9
    f6f6:	d913      	bls.n	f720 <encode_uint+0x6c>
		value /= radix;
    f6f8:	4605      	mov	r5, r0
    f6fa:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
    f6fc:	f04f 0800 	mov.w	r8, #0
    f700:	4632      	mov	r2, r6
    f702:	4643      	mov	r3, r8
    f704:	4628      	mov	r0, r5
    f706:	4621      	mov	r1, r4
    f708:	f7f0 fce8 	bl	dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    f70c:	2a09      	cmp	r2, #9
    f70e:	d8df      	bhi.n	f6d0 <encode_uint+0x1c>
    f710:	b2d2      	uxtb	r2, r2
    f712:	3230      	adds	r2, #48	; 0x30
    f714:	b2d2      	uxtb	r2, r2
    f716:	e7e1      	b.n	f6dc <encode_uint+0x28>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    f718:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    f71a:	3257      	adds	r2, #87	; 0x57
    f71c:	b2d2      	uxtb	r2, r2
    f71e:	e7dd      	b.n	f6dc <encode_uint+0x28>
	if (conv->flag_hash) {
    f720:	f89b 3000 	ldrb.w	r3, [fp]
    f724:	f013 0f20 	tst.w	r3, #32
    f728:	d003      	beq.n	f732 <encode_uint+0x7e>
		if (radix == 8) {
    f72a:	2e08      	cmp	r6, #8
    f72c:	d004      	beq.n	f738 <encode_uint+0x84>
		} else if (radix == 16) {
    f72e:	2e10      	cmp	r6, #16
    f730:	d009      	beq.n	f746 <encode_uint+0x92>
}
    f732:	4638      	mov	r0, r7
    f734:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    f738:	f89b 3002 	ldrb.w	r3, [fp, #2]
    f73c:	f043 0308 	orr.w	r3, r3, #8
    f740:	f88b 3002 	strb.w	r3, [fp, #2]
    f744:	e7f5      	b.n	f732 <encode_uint+0x7e>
			conv->altform_0c = true;
    f746:	f89b 3002 	ldrb.w	r3, [fp, #2]
    f74a:	f043 0310 	orr.w	r3, r3, #16
    f74e:	f88b 3002 	strb.w	r3, [fp, #2]
    f752:	e7ee      	b.n	f732 <encode_uint+0x7e>

0000f754 <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
    f754:	7843      	ldrb	r3, [r0, #1]
    f756:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    f75a:	2b07      	cmp	r3, #7
    f75c:	d818      	bhi.n	f790 <store_count+0x3c>
    f75e:	e8df f003 	tbb	[pc, r3]
    f762:	0604      	.short	0x0604
    f764:	100c0a08 	.word	0x100c0a08
    f768:	1614      	.short	0x1614
		*(int *)dp = count;
    f76a:	600a      	str	r2, [r1, #0]
		break;
    f76c:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
    f76e:	700a      	strb	r2, [r1, #0]
		break;
    f770:	4770      	bx	lr
		*(short *)dp = (short)count;
    f772:	800a      	strh	r2, [r1, #0]
		break;
    f774:	4770      	bx	lr
		*(long *)dp = (long)count;
    f776:	600a      	str	r2, [r1, #0]
		break;
    f778:	4770      	bx	lr
		*(long long *)dp = (long long)count;
    f77a:	17d3      	asrs	r3, r2, #31
    f77c:	600a      	str	r2, [r1, #0]
    f77e:	604b      	str	r3, [r1, #4]
		break;
    f780:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
    f782:	17d3      	asrs	r3, r2, #31
    f784:	600a      	str	r2, [r1, #0]
    f786:	604b      	str	r3, [r1, #4]
		break;
    f788:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
    f78a:	600a      	str	r2, [r1, #0]
		break;
    f78c:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    f78e:	600a      	str	r2, [r1, #0]
}
    f790:	4770      	bx	lr

0000f792 <outs>:
{
    f792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f796:	4607      	mov	r7, r0
    f798:	460e      	mov	r6, r1
    f79a:	4614      	mov	r4, r2
    f79c:	4698      	mov	r8, r3
	size_t count = 0;
    f79e:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    f7a0:	e006      	b.n	f7b0 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    f7a2:	4631      	mov	r1, r6
    f7a4:	f814 0b01 	ldrb.w	r0, [r4], #1
    f7a8:	47b8      	blx	r7
		if (rc < 0) {
    f7aa:	2800      	cmp	r0, #0
    f7ac:	db09      	blt.n	f7c2 <outs+0x30>
		++count;
    f7ae:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    f7b0:	4544      	cmp	r4, r8
    f7b2:	d3f6      	bcc.n	f7a2 <outs+0x10>
    f7b4:	f1b8 0f00 	cmp.w	r8, #0
    f7b8:	d102      	bne.n	f7c0 <outs+0x2e>
    f7ba:	7823      	ldrb	r3, [r4, #0]
    f7bc:	2b00      	cmp	r3, #0
    f7be:	d1f0      	bne.n	f7a2 <outs+0x10>
	return (int)count;
    f7c0:	4628      	mov	r0, r5
}
    f7c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f7c6 <ring_buf_put_claim>:

#include <zephyr/sys/ring_buffer.h>
#include <string.h>

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    f7c6:	b470      	push	{r4, r5, r6}
    f7c8:	4603      	mov	r3, r0
	uint32_t free_space, wrap_size;
	int32_t base;

	base = buf->put_base;
    f7ca:	68c6      	ldr	r6, [r0, #12]
	wrap_size = buf->put_head - base;
    f7cc:	6845      	ldr	r5, [r0, #4]
    f7ce:	1ba8      	subs	r0, r5, r6
	if (unlikely(wrap_size >= buf->size)) {
    f7d0:	69dc      	ldr	r4, [r3, #28]
    f7d2:	4284      	cmp	r4, r0
    f7d4:	d915      	bls.n	f802 <ring_buf_put_claim+0x3c>
		/* put_base is not yet adjusted */
		wrap_size -= buf->size;
		base += buf->size;
	}
	wrap_size = buf->size - wrap_size;
    f7d6:	1a20      	subs	r0, r4, r0
 *
 * @return Ring buffer free space (in bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->put_head - buf->get_tail);
    f7d8:	f8d3 c014 	ldr.w	ip, [r3, #20]
    f7dc:	eba5 0c0c 	sub.w	ip, r5, ip
    f7e0:	eba4 040c 	sub.w	r4, r4, ip

	free_space = ring_buf_space_get(buf);
	size = MIN(size, free_space);
    f7e4:	42a2      	cmp	r2, r4
    f7e6:	bf28      	it	cs
    f7e8:	4622      	movcs	r2, r4
	size = MIN(size, wrap_size);
    f7ea:	4290      	cmp	r0, r2
    f7ec:	bf28      	it	cs
    f7ee:	4610      	movcs	r0, r2

	*data = &buf->buffer[buf->put_head - base];
    f7f0:	681a      	ldr	r2, [r3, #0]
    f7f2:	1bad      	subs	r5, r5, r6
    f7f4:	442a      	add	r2, r5
    f7f6:	600a      	str	r2, [r1, #0]
	buf->put_head += size;
    f7f8:	685a      	ldr	r2, [r3, #4]
    f7fa:	4402      	add	r2, r0
    f7fc:	605a      	str	r2, [r3, #4]

	return size;
}
    f7fe:	bc70      	pop	{r4, r5, r6}
    f800:	4770      	bx	lr
		wrap_size -= buf->size;
    f802:	1b00      	subs	r0, r0, r4
		base += buf->size;
    f804:	4426      	add	r6, r4
    f806:	e7e6      	b.n	f7d6 <ring_buf_put_claim+0x10>

0000f808 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
    f808:	b430      	push	{r4, r5}
	uint32_t finish_space, wrap_size;

	finish_space = buf->put_head - buf->put_tail;
    f80a:	6844      	ldr	r4, [r0, #4]
    f80c:	6883      	ldr	r3, [r0, #8]
    f80e:	1ae4      	subs	r4, r4, r3
	if (unlikely(size > finish_space)) {
    f810:	428c      	cmp	r4, r1
    f812:	bf2c      	ite	cs
    f814:	2400      	movcs	r4, #0
    f816:	2401      	movcc	r4, #1
    f818:	b98c      	cbnz	r4, f83e <ring_buf_put_finish+0x36>
    f81a:	4602      	mov	r2, r0
		return -EINVAL;
	}

	buf->put_tail += size;
    f81c:	4419      	add	r1, r3
    f81e:	6081      	str	r1, [r0, #8]
	buf->put_head = buf->put_tail;
    f820:	6041      	str	r1, [r0, #4]

	wrap_size = buf->put_tail - buf->put_base;
    f822:	68c5      	ldr	r5, [r0, #12]
    f824:	1b49      	subs	r1, r1, r5
	if (unlikely(wrap_size >= buf->size)) {
    f826:	69c3      	ldr	r3, [r0, #28]
    f828:	428b      	cmp	r3, r1
    f82a:	bf8c      	ite	hi
    f82c:	2000      	movhi	r0, #0
    f82e:	2001      	movls	r0, #1
    f830:	b908      	cbnz	r0, f836 <ring_buf_put_finish+0x2e>
		/* we wrapped: adjust put_base */
		buf->put_base += buf->size;
	}

	return 0;
}
    f832:	bc30      	pop	{r4, r5}
    f834:	4770      	bx	lr
		buf->put_base += buf->size;
    f836:	442b      	add	r3, r5
    f838:	60d3      	str	r3, [r2, #12]
	return 0;
    f83a:	4620      	mov	r0, r4
    f83c:	e7f9      	b.n	f832 <ring_buf_put_finish+0x2a>
		return -EINVAL;
    f83e:	f06f 0015 	mvn.w	r0, #21
    f842:	e7f6      	b.n	f832 <ring_buf_put_finish+0x2a>

0000f844 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
    f844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f848:	b082      	sub	sp, #8
    f84a:	4680      	mov	r8, r0
    f84c:	460e      	mov	r6, r1
    f84e:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    f850:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    f852:	462a      	mov	r2, r5
    f854:	a901      	add	r1, sp, #4
    f856:	4640      	mov	r0, r8
    f858:	f7ff ffb5 	bl	f7c6 <ring_buf_put_claim>
    f85c:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    f85e:	4602      	mov	r2, r0
    f860:	4631      	mov	r1, r6
    f862:	9801      	ldr	r0, [sp, #4]
    f864:	f003 fa91 	bl	12d8a <memcpy>
		total_size += partial_size;
    f868:	4427      	add	r7, r4
		size -= partial_size;
		data += partial_size;
    f86a:	4426      	add	r6, r4
	} while (size && partial_size);
    f86c:	1b2d      	subs	r5, r5, r4
    f86e:	d001      	beq.n	f874 <ring_buf_put+0x30>
    f870:	2c00      	cmp	r4, #0
    f872:	d1ee      	bne.n	f852 <ring_buf_put+0xe>

	err = ring_buf_put_finish(buf, total_size);
    f874:	4639      	mov	r1, r7
    f876:	4640      	mov	r0, r8
    f878:	f7ff ffc6 	bl	f808 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
    f87c:	4638      	mov	r0, r7
    f87e:	b002      	add	sp, #8
    f880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f884 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    f884:	b470      	push	{r4, r5, r6}
    f886:	4603      	mov	r3, r0
	uint32_t available_size, wrap_size;
	int32_t base;

	base = buf->get_base;
    f888:	6986      	ldr	r6, [r0, #24]
	wrap_size = buf->get_head - base;
    f88a:	6905      	ldr	r5, [r0, #16]
    f88c:	1ba8      	subs	r0, r5, r6
	if (unlikely(wrap_size >= buf->size)) {
    f88e:	69dc      	ldr	r4, [r3, #28]
    f890:	4284      	cmp	r4, r0
    f892:	d911      	bls.n	f8b8 <ring_buf_get_claim+0x34>
		/* get_base is not yet adjusted */
		wrap_size -= buf->size;
		base += buf->size;
	}
	wrap_size = buf->size - wrap_size;
    f894:	1a20      	subs	r0, r4, r0
 *
 * @return Ring buffer space used (in bytes).
 */
static inline uint32_t ring_buf_size_get(struct ring_buf *buf)
{
	return buf->put_tail - buf->get_head;
    f896:	689c      	ldr	r4, [r3, #8]
    f898:	1b64      	subs	r4, r4, r5

	available_size = ring_buf_size_get(buf);
	size = MIN(size, available_size);
    f89a:	42a2      	cmp	r2, r4
    f89c:	bf28      	it	cs
    f89e:	4622      	movcs	r2, r4
	size = MIN(size, wrap_size);
    f8a0:	4290      	cmp	r0, r2
    f8a2:	bf28      	it	cs
    f8a4:	4610      	movcs	r0, r2

	*data = &buf->buffer[buf->get_head - base];
    f8a6:	681a      	ldr	r2, [r3, #0]
    f8a8:	1bad      	subs	r5, r5, r6
    f8aa:	442a      	add	r2, r5
    f8ac:	600a      	str	r2, [r1, #0]
	buf->get_head += size;
    f8ae:	691a      	ldr	r2, [r3, #16]
    f8b0:	4402      	add	r2, r0
    f8b2:	611a      	str	r2, [r3, #16]

	return size;
}
    f8b4:	bc70      	pop	{r4, r5, r6}
    f8b6:	4770      	bx	lr
		wrap_size -= buf->size;
    f8b8:	1b00      	subs	r0, r0, r4
		base += buf->size;
    f8ba:	4426      	add	r6, r4
    f8bc:	e7ea      	b.n	f894 <ring_buf_get_claim+0x10>

0000f8be <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
    f8be:	b430      	push	{r4, r5}
	uint32_t finish_space, wrap_size;

	finish_space = buf->get_head - buf->get_tail;
    f8c0:	6904      	ldr	r4, [r0, #16]
    f8c2:	6943      	ldr	r3, [r0, #20]
    f8c4:	1ae4      	subs	r4, r4, r3
	if (unlikely(size > finish_space)) {
    f8c6:	428c      	cmp	r4, r1
    f8c8:	bf2c      	ite	cs
    f8ca:	2400      	movcs	r4, #0
    f8cc:	2401      	movcc	r4, #1
    f8ce:	b98c      	cbnz	r4, f8f4 <ring_buf_get_finish+0x36>
    f8d0:	4602      	mov	r2, r0
		return -EINVAL;
	}

	buf->get_tail += size;
    f8d2:	4419      	add	r1, r3
    f8d4:	6141      	str	r1, [r0, #20]
	buf->get_head = buf->get_tail;
    f8d6:	6101      	str	r1, [r0, #16]

	wrap_size = buf->get_tail - buf->get_base;
    f8d8:	6985      	ldr	r5, [r0, #24]
    f8da:	1b49      	subs	r1, r1, r5
	if (unlikely(wrap_size >= buf->size)) {
    f8dc:	69c3      	ldr	r3, [r0, #28]
    f8de:	428b      	cmp	r3, r1
    f8e0:	bf8c      	ite	hi
    f8e2:	2000      	movhi	r0, #0
    f8e4:	2001      	movls	r0, #1
    f8e6:	b908      	cbnz	r0, f8ec <ring_buf_get_finish+0x2e>
		/* we wrapped: adjust get_base */
		buf->get_base += buf->size;
	}

	return 0;
}
    f8e8:	bc30      	pop	{r4, r5}
    f8ea:	4770      	bx	lr
		buf->get_base += buf->size;
    f8ec:	442b      	add	r3, r5
    f8ee:	6193      	str	r3, [r2, #24]
	return 0;
    f8f0:	4620      	mov	r0, r4
    f8f2:	e7f9      	b.n	f8e8 <ring_buf_get_finish+0x2a>
		return -EINVAL;
    f8f4:	f06f 0015 	mvn.w	r0, #21
    f8f8:	e7f6      	b.n	f8e8 <ring_buf_get_finish+0x2a>

0000f8fa <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
    f8fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f8fe:	b082      	sub	sp, #8
    f900:	4680      	mov	r8, r0
    f902:	460e      	mov	r6, r1
    f904:	4615      	mov	r5, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    f906:	2700      	movs	r7, #0
    f908:	e009      	b.n	f91e <ring_buf_get+0x24>
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
		if (data) {
			memcpy(data, src, partial_size);
    f90a:	4602      	mov	r2, r0
    f90c:	9901      	ldr	r1, [sp, #4]
    f90e:	4630      	mov	r0, r6
    f910:	f003 fa3b 	bl	12d8a <memcpy>
			data += partial_size;
    f914:	4426      	add	r6, r4
		}
		total_size += partial_size;
    f916:	4427      	add	r7, r4
		size -= partial_size;
	} while (size && partial_size);
    f918:	1b2d      	subs	r5, r5, r4
    f91a:	d009      	beq.n	f930 <ring_buf_get+0x36>
    f91c:	b144      	cbz	r4, f930 <ring_buf_get+0x36>
		partial_size = ring_buf_get_claim(buf, &src, size);
    f91e:	462a      	mov	r2, r5
    f920:	a901      	add	r1, sp, #4
    f922:	4640      	mov	r0, r8
    f924:	f7ff ffae 	bl	f884 <ring_buf_get_claim>
    f928:	4604      	mov	r4, r0
		if (data) {
    f92a:	2e00      	cmp	r6, #0
    f92c:	d1ed      	bne.n	f90a <ring_buf_get+0x10>
    f92e:	e7f2      	b.n	f916 <ring_buf_get+0x1c>

	err = ring_buf_get_finish(buf, total_size);
    f930:	4639      	mov	r1, r7
    f932:	4640      	mov	r0, r8
    f934:	f7ff ffc3 	bl	f8be <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
    f938:	4638      	mov	r0, r7
    f93a:	b002      	add	sp, #8
    f93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f940 <free_space>:
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->flags & MPSC_PBUF_FULL) {
    f940:	6903      	ldr	r3, [r0, #16]
    f942:	f013 0f08 	tst.w	r3, #8
    f946:	d108      	bne.n	f95a <free_space+0x1a>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    f948:	68c3      	ldr	r3, [r0, #12]
    f94a:	6802      	ldr	r2, [r0, #0]
    f94c:	4293      	cmp	r3, r2
    f94e:	d807      	bhi.n	f960 <free_space+0x20>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
    f950:	6a03      	ldr	r3, [r0, #32]
    f952:	1a9b      	subs	r3, r3, r2
    f954:	600b      	str	r3, [r1, #0]

	return true;
    f956:	2001      	movs	r0, #1
}
    f958:	4770      	bx	lr
		*res = 0;
    f95a:	2000      	movs	r0, #0
    f95c:	6008      	str	r0, [r1, #0]
		return false;
    f95e:	4770      	bx	lr
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
    f960:	1a9b      	subs	r3, r3, r2
    f962:	600b      	str	r3, [r1, #0]
		return false;
    f964:	2000      	movs	r0, #0
    f966:	4770      	bx	lr

0000f968 <available>:
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool available(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    f968:	6903      	ldr	r3, [r0, #16]
    f96a:	f013 0f08 	tst.w	r3, #8
    f96e:	d107      	bne.n	f980 <available+0x18>
    f970:	6882      	ldr	r2, [r0, #8]
    f972:	6843      	ldr	r3, [r0, #4]
    f974:	429a      	cmp	r2, r3
    f976:	d803      	bhi.n	f980 <available+0x18>
		*res = buffer->size - buffer->tmp_rd_idx;
		return true;
	}

	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    f978:	1a9b      	subs	r3, r3, r2
    f97a:	600b      	str	r3, [r1, #0]

	return false;
    f97c:	2000      	movs	r0, #0
}
    f97e:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_rd_idx;
    f980:	6a03      	ldr	r3, [r0, #32]
    f982:	6882      	ldr	r2, [r0, #8]
    f984:	1a9b      	subs	r3, r3, r2
    f986:	600b      	str	r3, [r1, #0]
		return true;
    f988:	2001      	movs	r0, #1
    f98a:	4770      	bx	lr

0000f98c <get_usage>:

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    f98c:	b510      	push	{r4, lr}
    f98e:	b082      	sub	sp, #8
    f990:	4604      	mov	r4, r0
	uint32_t f;

	if (free_space(buffer, &f)) {
    f992:	a901      	add	r1, sp, #4
    f994:	f7ff ffd4 	bl	f940 <free_space>
    f998:	b120      	cbz	r0, f9a4 <get_usage+0x18>
		f += (buffer->rd_idx - 1);
    f99a:	68e3      	ldr	r3, [r4, #12]
    f99c:	9a01      	ldr	r2, [sp, #4]
    f99e:	4413      	add	r3, r2
    f9a0:	3b01      	subs	r3, #1
    f9a2:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    f9a4:	6a20      	ldr	r0, [r4, #32]
    f9a6:	9b01      	ldr	r3, [sp, #4]
    f9a8:	1ac0      	subs	r0, r0, r3
}
    f9aa:	3801      	subs	r0, #1
    f9ac:	b002      	add	sp, #8
    f9ae:	bd10      	pop	{r4, pc}

0000f9b0 <max_utilization_update>:

static inline void max_utilization_update(struct mpsc_pbuf_buffer *buffer)
{
    f9b0:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    f9b2:	6903      	ldr	r3, [r0, #16]
    f9b4:	f013 0f04 	tst.w	r3, #4
    f9b8:	d100      	bne.n	f9bc <max_utilization_update+0xc>
		return;
	}

	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
}
    f9ba:	bd38      	pop	{r3, r4, r5, pc}
    f9bc:	4604      	mov	r4, r0
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    f9be:	6a45      	ldr	r5, [r0, #36]	; 0x24
    f9c0:	f7ff ffe4 	bl	f98c <get_usage>
    f9c4:	4285      	cmp	r5, r0
    f9c6:	d902      	bls.n	f9ce <max_utilization_update+0x1e>
    f9c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    f9ca:	6260      	str	r0, [r4, #36]	; 0x24
    f9cc:	e7f5      	b.n	f9ba <max_utilization_update+0xa>
    f9ce:	4620      	mov	r0, r4
    f9d0:	f7ff ffdc 	bl	f98c <get_usage>
    f9d4:	e7f9      	b.n	f9ca <max_utilization_update+0x1a>

0000f9d6 <rd_idx_inc>:
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    f9d6:	68c3      	ldr	r3, [r0, #12]
	uint32_t i = idx + val;
    f9d8:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    f9da:	6903      	ldr	r3, [r0, #16]
    f9dc:	f013 0f01 	tst.w	r3, #1
    f9e0:	d104      	bne.n	f9ec <rd_idx_inc+0x16>
	return (i >= buffer->size) ? i - buffer->size : i;
    f9e2:	6a02      	ldr	r2, [r0, #32]
    f9e4:	4291      	cmp	r1, r2
    f9e6:	d304      	bcc.n	f9f2 <rd_idx_inc+0x1c>
    f9e8:	1a89      	subs	r1, r1, r2
    f9ea:	e002      	b.n	f9f2 <rd_idx_inc+0x1c>
		return i & (buffer->size - 1);
    f9ec:	6a02      	ldr	r2, [r0, #32]
    f9ee:	3a01      	subs	r2, #1
    f9f0:	4011      	ands	r1, r2
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    f9f2:	60c1      	str	r1, [r0, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
    f9f4:	f023 0308 	bic.w	r3, r3, #8
    f9f8:	6103      	str	r3, [r0, #16]
}
    f9fa:	4770      	bx	lr

0000f9fc <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    f9fc:	b410      	push	{r4}
	union mpsc_pbuf_generic skip = {
    f9fe:	2300      	movs	r3, #0
    fa00:	f36f 0300 	bfc	r3, #0, #1
    fa04:	f043 0302 	orr.w	r3, r3, #2
    fa08:	f361 039f 	bfi	r3, r1, #2, #30
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    fa0c:	69c2      	ldr	r2, [r0, #28]
    fa0e:	6804      	ldr	r4, [r0, #0]
    fa10:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    fa14:	6803      	ldr	r3, [r0, #0]
	uint32_t i = idx + val;
    fa16:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    fa18:	6902      	ldr	r2, [r0, #16]
    fa1a:	f012 0f01 	tst.w	r2, #1
    fa1e:	d104      	bne.n	fa2a <add_skip_item+0x2e>
	return (i >= buffer->size) ? i - buffer->size : i;
    fa20:	6a04      	ldr	r4, [r0, #32]
    fa22:	42a3      	cmp	r3, r4
    fa24:	d304      	bcc.n	fa30 <add_skip_item+0x34>
    fa26:	1b1b      	subs	r3, r3, r4
    fa28:	e002      	b.n	fa30 <add_skip_item+0x34>
		return i & (buffer->size - 1);
    fa2a:	6a04      	ldr	r4, [r0, #32]
    fa2c:	3c01      	subs	r4, #1
    fa2e:	4023      	ands	r3, r4
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    fa30:	6003      	str	r3, [r0, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    fa32:	68c4      	ldr	r4, [r0, #12]
    fa34:	429c      	cmp	r4, r3
    fa36:	d00a      	beq.n	fa4e <add_skip_item+0x52>
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    fa38:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
    fa3a:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    fa3c:	6903      	ldr	r3, [r0, #16]
    fa3e:	f013 0f01 	tst.w	r3, #1
    fa42:	d108      	bne.n	fa56 <add_skip_item+0x5a>
	return (i >= buffer->size) ? i - buffer->size : i;
    fa44:	6a03      	ldr	r3, [r0, #32]
    fa46:	4299      	cmp	r1, r3
    fa48:	d308      	bcc.n	fa5c <add_skip_item+0x60>
    fa4a:	1ac9      	subs	r1, r1, r3
    fa4c:	e006      	b.n	fa5c <add_skip_item+0x60>
		buffer->flags |= MPSC_PBUF_FULL;
    fa4e:	f042 0208 	orr.w	r2, r2, #8
    fa52:	6102      	str	r2, [r0, #16]
    fa54:	e7f0      	b.n	fa38 <add_skip_item+0x3c>
		return i & (buffer->size - 1);
    fa56:	6a03      	ldr	r3, [r0, #32]
    fa58:	3b01      	subs	r3, #1
    fa5a:	4019      	ands	r1, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    fa5c:	6041      	str	r1, [r0, #4]
}
    fa5e:	bc10      	pop	{r4}
    fa60:	4770      	bx	lr

0000fa62 <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
    fa62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fa66:	b083      	sub	sp, #12
    fa68:	4604      	mov	r4, r0
    fa6a:	9101      	str	r1, [sp, #4]
    fa6c:	4617      	mov	r7, r2
    fa6e:	4698      	mov	r8, r3
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    fa70:	69c5      	ldr	r5, [r0, #28]
    fa72:	68c6      	ldr	r6, [r0, #12]
    fa74:	eb05 0b86 	add.w	fp, r5, r6, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    fa78:	f815 3026 	ldrb.w	r3, [r5, r6, lsl #2]
    fa7c:	f003 0303 	and.w	r3, r3, #3
    fa80:	2b02      	cmp	r3, #2
    fa82:	d024      	beq.n	face <drop_item_locked+0x6c>
	return 0;
    fa84:	2100      	movs	r1, #0
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
    fa86:	2300      	movs	r3, #0
    fa88:	603b      	str	r3, [r7, #0]
	*tmp_wr_idx_shift = 0;
    fa8a:	f8c8 3000 	str.w	r3, [r8]

	if (skip_wlen) {
    fa8e:	bb19      	cbnz	r1, fad8 <drop_item_locked+0x76>
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
    fa90:	6923      	ldr	r3, [r4, #16]
    fa92:	f013 0f02 	tst.w	r3, #2
    fa96:	d073      	beq.n	fb80 <drop_item_locked+0x11e>
		return false;
	}

	uint32_t rd_wlen = buffer->get_wlen(item);
    fa98:	69a3      	ldr	r3, [r4, #24]
    fa9a:	4658      	mov	r0, fp
    fa9c:	4798      	blx	r3
    fa9e:	4682      	mov	sl, r0
	return item->hdr.valid;
    faa0:	f815 9026 	ldrb.w	r9, [r5, r6, lsl #2]

	/* If packet is busy need to be ommited. */
	if (!is_valid(item)) {
    faa4:	f019 0901 	ands.w	r9, r9, #1
    faa8:	d06c      	beq.n	fb84 <drop_item_locked+0x122>
		return false;
	} else if (item->hdr.busy) {
    faaa:	f815 3026 	ldrb.w	r3, [r5, r6, lsl #2]
    faae:	f013 0f02 	tst.w	r3, #2
    fab2:	d039      	beq.n	fb28 <drop_item_locked+0xc6>
		MPSC_PBUF_DBG(buffer, "no space: Found busy packet %p (len:%d)", item, rd_wlen);
		/* Add skip packet before claimed packet. */
		if (free_wlen) {
    fab4:	9b01      	ldr	r3, [sp, #4]
    fab6:	b9bb      	cbnz	r3, fae8 <drop_item_locked+0x86>
			add_skip_item(buffer, free_wlen);
			MPSC_PBUF_DBG(buffer, "no space: Added skip packet (len:%d)", free_wlen);
		}
		/* Move all indexes forward, after claimed packet. */
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    fab8:	6862      	ldr	r2, [r4, #4]
	uint32_t i = idx + val;
    faba:	4452      	add	r2, sl
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    fabc:	6923      	ldr	r3, [r4, #16]
    fabe:	f013 0001 	ands.w	r0, r3, #1
    fac2:	d116      	bne.n	faf2 <drop_item_locked+0x90>
	return (i >= buffer->size) ? i - buffer->size : i;
    fac4:	6a21      	ldr	r1, [r4, #32]
    fac6:	428a      	cmp	r2, r1
    fac8:	d316      	bcc.n	faf8 <drop_item_locked+0x96>
    faca:	1a52      	subs	r2, r2, r1
    facc:	e014      	b.n	faf8 <drop_item_locked+0x96>
		return item->skip.len;
    face:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
    fad2:	f3c1 019d 	ubfx	r1, r1, #2, #30
    fad6:	e7d6      	b.n	fa86 <drop_item_locked+0x24>
		rd_idx_inc(buffer, skip_wlen);
    fad8:	4620      	mov	r0, r4
    fada:	f7ff ff7c 	bl	f9d6 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    fade:	68e3      	ldr	r3, [r4, #12]
    fae0:	60a3      	str	r3, [r4, #8]
		return true;
    fae2:	f04f 0901 	mov.w	r9, #1
    fae6:	e04d      	b.n	fb84 <drop_item_locked+0x122>
			add_skip_item(buffer, free_wlen);
    fae8:	4619      	mov	r1, r3
    faea:	4620      	mov	r0, r4
    faec:	f7ff ff86 	bl	f9fc <add_skip_item>
			MPSC_PBUF_DBG(buffer, "no space: Added skip packet (len:%d)", free_wlen);
    faf0:	e7e2      	b.n	fab8 <drop_item_locked+0x56>
		return i & (buffer->size - 1);
    faf2:	6a21      	ldr	r1, [r4, #32]
    faf4:	3901      	subs	r1, #1
    faf6:	400a      	ands	r2, r1
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    faf8:	6062      	str	r2, [r4, #4]

		/* If allocation wrapped around the buffer and found busy packet
		 * that was already ommited, skip it again.
		 */
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    fafa:	68e1      	ldr	r1, [r4, #12]
    fafc:	68a2      	ldr	r2, [r4, #8]
    fafe:	4291      	cmp	r1, r2
    fb00:	d006      	beq.n	fb10 <drop_item_locked+0xae>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
		}

		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
    fb02:	68a2      	ldr	r2, [r4, #8]
    fb04:	6022      	str	r2, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
    fb06:	60e2      	str	r2, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
    fb08:	f043 0308 	orr.w	r3, r3, #8
    fb0c:	6123      	str	r3, [r4, #16]
    fb0e:	e039      	b.n	fb84 <drop_item_locked+0x122>
	uint32_t i = idx + val;
    fb10:	4452      	add	r2, sl
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    fb12:	b920      	cbnz	r0, fb1e <drop_item_locked+0xbc>
	return (i >= buffer->size) ? i - buffer->size : i;
    fb14:	6a21      	ldr	r1, [r4, #32]
    fb16:	428a      	cmp	r2, r1
    fb18:	d304      	bcc.n	fb24 <drop_item_locked+0xc2>
    fb1a:	1a52      	subs	r2, r2, r1
    fb1c:	e002      	b.n	fb24 <drop_item_locked+0xc2>
		return i & (buffer->size - 1);
    fb1e:	6a21      	ldr	r1, [r4, #32]
    fb20:	3901      	subs	r1, #1
    fb22:	400a      	ands	r2, r1
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
    fb24:	60a2      	str	r2, [r4, #8]
    fb26:	e7ec      	b.n	fb02 <drop_item_locked+0xa0>
	} else {
		/* Prepare packet dropping. */
		rd_idx_inc(buffer, rd_wlen);
    fb28:	4601      	mov	r1, r0
    fb2a:	4620      	mov	r0, r4
    fb2c:	f7ff ff53 	bl	f9d6 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    fb30:	68e3      	ldr	r3, [r4, #12]
    fb32:	60a3      	str	r3, [r4, #8]
		/* Temporary move tmp_wr idx forward to ensure that packet
		 * will not be dropped twice and content will not be
		 * overwritten.
		 */
		if (free_wlen) {
    fb34:	9b01      	ldr	r3, [sp, #4]
    fb36:	b123      	cbz	r3, fb42 <drop_item_locked+0xe0>
					.valid = 0,
					.busy = 0
				}
			};

			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
    fb38:	69e3      	ldr	r3, [r4, #28]
    fb3a:	6822      	ldr	r2, [r4, #0]
    fb3c:	2100      	movs	r1, #0
    fb3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}

		*tmp_wr_idx_shift = rd_wlen + free_wlen;
    fb42:	9b01      	ldr	r3, [sp, #4]
    fb44:	4453      	add	r3, sl
    fb46:	f8c8 3000 	str.w	r3, [r8]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    fb4a:	6822      	ldr	r2, [r4, #0]
	uint32_t i = idx + val;
    fb4c:	4413      	add	r3, r2
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    fb4e:	6922      	ldr	r2, [r4, #16]
    fb50:	f012 0f01 	tst.w	r2, #1
    fb54:	d104      	bne.n	fb60 <drop_item_locked+0xfe>
	return (i >= buffer->size) ? i - buffer->size : i;
    fb56:	6a21      	ldr	r1, [r4, #32]
    fb58:	428b      	cmp	r3, r1
    fb5a:	d304      	bcc.n	fb66 <drop_item_locked+0x104>
    fb5c:	1a5b      	subs	r3, r3, r1
    fb5e:	e002      	b.n	fb66 <drop_item_locked+0x104>
		return i & (buffer->size - 1);
    fb60:	6a21      	ldr	r1, [r4, #32]
    fb62:	3901      	subs	r1, #1
    fb64:	400b      	ands	r3, r1
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    fb66:	6023      	str	r3, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
    fb68:	f042 0208 	orr.w	r2, r2, #8
    fb6c:	6122      	str	r2, [r4, #16]
		item->hdr.valid = 0;
    fb6e:	f815 3026 	ldrb.w	r3, [r5, r6, lsl #2]
    fb72:	f36f 0300 	bfc	r3, #0, #1
    fb76:	f805 3026 	strb.w	r3, [r5, r6, lsl #2]
		*item_to_drop = item;
    fb7a:	f8c7 b000 	str.w	fp, [r7]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
    fb7e:	e001      	b.n	fb84 <drop_item_locked+0x122>
		return false;
    fb80:	f04f 0900 	mov.w	r9, #0
			       item, rd_wlen);
	}

	return true;
}
    fb84:	4648      	mov	r0, r9
    fb86:	b003      	add	sp, #12
    fb88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000fb8c <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
    fb8c:	b430      	push	{r4, r5}
	uint32_t i = idx + val;
    fb8e:	1853      	adds	r3, r2, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    fb90:	6904      	ldr	r4, [r0, #16]
    fb92:	f014 0f01 	tst.w	r4, #1
    fb96:	d104      	bne.n	fba2 <post_drop_action+0x16>
	return (i >= buffer->size) ? i - buffer->size : i;
    fb98:	6a05      	ldr	r5, [r0, #32]
    fb9a:	42ab      	cmp	r3, r5
    fb9c:	d304      	bcc.n	fba8 <post_drop_action+0x1c>
    fb9e:	1b5b      	subs	r3, r3, r5
    fba0:	e002      	b.n	fba8 <post_drop_action+0x1c>
		return i & (buffer->size - 1);
    fba2:	6a05      	ldr	r5, [r0, #32]
    fba4:	3d01      	subs	r5, #1
    fba6:	402b      	ands	r3, r5
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
    fba8:	6805      	ldr	r5, [r0, #0]
    fbaa:	429d      	cmp	r5, r3
    fbac:	d014      	beq.n	fbd8 <post_drop_action+0x4c>
		buffer->flags &= ~MPSC_PBUF_FULL;
		return;
	}

	/* Operation interrupted, mark area as to be skipped. */
	union mpsc_pbuf_generic skip = {
    fbae:	2300      	movs	r3, #0
    fbb0:	f36f 0300 	bfc	r3, #0, #1
    fbb4:	f043 0302 	orr.w	r3, r3, #2
    fbb8:	f362 039f 	bfi	r3, r2, #2, #30
			.busy = 1,
			.len = tmp_wr_idx_shift
		}
	};

	buffer->buf[prev_tmp_wr_idx] = skip.raw;
    fbbc:	69c4      	ldr	r4, [r0, #28]
    fbbe:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
    fbc2:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
    fbc4:	4413      	add	r3, r2
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    fbc6:	6902      	ldr	r2, [r0, #16]
    fbc8:	f012 0f01 	tst.w	r2, #1
    fbcc:	d109      	bne.n	fbe2 <post_drop_action+0x56>
	return (i >= buffer->size) ? i - buffer->size : i;
    fbce:	6a02      	ldr	r2, [r0, #32]
    fbd0:	4293      	cmp	r3, r2
    fbd2:	d309      	bcc.n	fbe8 <post_drop_action+0x5c>
    fbd4:	1a9b      	subs	r3, r3, r2
    fbd6:	e007      	b.n	fbe8 <post_drop_action+0x5c>
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
    fbd8:	6001      	str	r1, [r0, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
    fbda:	f024 0408 	bic.w	r4, r4, #8
    fbde:	6104      	str	r4, [r0, #16]
		return;
    fbe0:	e003      	b.n	fbea <post_drop_action+0x5e>
		return i & (buffer->size - 1);
    fbe2:	6a02      	ldr	r2, [r0, #32]
    fbe4:	3a01      	subs	r2, #1
    fbe6:	4013      	ands	r3, r2
	buffer->wr_idx = idx_inc(buffer,
    fbe8:	6043      	str	r3, [r0, #4]
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
    fbea:	bc30      	pop	{r4, r5}
    fbec:	4770      	bx	lr

0000fbee <mpsc_pbuf_init>:
{
    fbee:	b538      	push	{r3, r4, r5, lr}
    fbf0:	4604      	mov	r4, r0
    fbf2:	460d      	mov	r5, r1
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    fbf4:	221c      	movs	r2, #28
    fbf6:	2100      	movs	r1, #0
    fbf8:	f003 f8f6 	bl	12de8 <memset>
	buffer->get_wlen = cfg->get_wlen;
    fbfc:	68eb      	ldr	r3, [r5, #12]
    fbfe:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    fc00:	68ab      	ldr	r3, [r5, #8]
    fc02:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    fc04:	682b      	ldr	r3, [r5, #0]
    fc06:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
    fc08:	686b      	ldr	r3, [r5, #4]
    fc0a:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
    fc0c:	2200      	movs	r2, #0
    fc0e:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    fc10:	692a      	ldr	r2, [r5, #16]
    fc12:	6122      	str	r2, [r4, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
    fc14:	b12b      	cbz	r3, fc22 <mpsc_pbuf_init+0x34>
    fc16:	1e59      	subs	r1, r3, #1
    fc18:	420b      	tst	r3, r1
    fc1a:	d102      	bne.n	fc22 <mpsc_pbuf_init+0x34>
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    fc1c:	f042 0201 	orr.w	r2, r2, #1
    fc20:	6122      	str	r2, [r4, #16]
	err = k_sem_init(&buffer->sem, 0, 1);
    fc22:	f104 0028 	add.w	r0, r4, #40	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
    fc26:	2201      	movs	r2, #1
    fc28:	2100      	movs	r1, #0
    fc2a:	f004 fdc9 	bl	147c0 <z_impl_k_sem_init>
}
    fc2e:	bd38      	pop	{r3, r4, r5, pc}

0000fc30 <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    fc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fc34:	b087      	sub	sp, #28
    fc36:	469a      	mov	sl, r3
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
    fc38:	2300      	movs	r3, #0
    fc3a:	9305      	str	r3, [sp, #20]
	bool cont = true;
	uint32_t free_wlen;
	uint32_t tmp_wr_idx_shift = 0;
    fc3c:	9303      	str	r3, [sp, #12]
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
    fc3e:	6a03      	ldr	r3, [r0, #32]
    fc40:	428b      	cmp	r3, r1
    fc42:	f0c0 8089 	bcc.w	fd58 <__kernel_ram_size+0xb8>
    fc46:	4604      	mov	r4, r0
    fc48:	4688      	mov	r8, r1
    fc4a:	4691      	mov	r9, r2
	uint32_t tmp_wr_idx_val = 0;
    fc4c:	2300      	movs	r3, #0
    fc4e:	9301      	str	r3, [sp, #4]
	bool cont = true;
    fc50:	2701      	movs	r7, #1
	union mpsc_pbuf_generic *item = NULL;
    fc52:	469b      	mov	fp, r3
    fc54:	e040      	b.n	fcd8 <__kernel_ram_size+0x38>
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
    fc56:	9901      	ldr	r1, [sp, #4]
    fc58:	4620      	mov	r0, r4
    fc5a:	f7ff ff97 	bl	fb8c <post_drop_action>
			tmp_wr_idx_shift = 0;
    fc5e:	2300      	movs	r3, #0
    fc60:	9303      	str	r3, [sp, #12]
    fc62:	e045      	b.n	fcf0 <__kernel_ram_size+0x50>

		wrap = free_space(buffer, &free_wlen);

		if (free_wlen >= wlen) {
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    fc64:	69e3      	ldr	r3, [r4, #28]
    fc66:	6822      	ldr	r2, [r4, #0]
			item =
    fc68:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
			item->hdr.valid = 0;
    fc6c:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    fc70:	f36f 0100 	bfc	r1, #0, #1
    fc74:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item->hdr.busy = 0;
    fc78:	b2c9      	uxtb	r1, r1
    fc7a:	f36f 0141 	bfc	r1, #1, #1
    fc7e:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    fc82:	6823      	ldr	r3, [r4, #0]
	uint32_t i = idx + val;
    fc84:	4443      	add	r3, r8
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    fc86:	6922      	ldr	r2, [r4, #16]
    fc88:	f012 0f01 	tst.w	r2, #1
    fc8c:	d104      	bne.n	fc98 <mpsc_pbuf_alloc+0x68>
	return (i >= buffer->size) ? i - buffer->size : i;
    fc8e:	6a21      	ldr	r1, [r4, #32]
    fc90:	428b      	cmp	r3, r1
    fc92:	d304      	bcc.n	fc9e <mpsc_pbuf_alloc+0x6e>
    fc94:	1a5b      	subs	r3, r3, r1
    fc96:	e002      	b.n	fc9e <mpsc_pbuf_alloc+0x6e>
		return i & (buffer->size - 1);
    fc98:	6a21      	ldr	r1, [r4, #32]
    fc9a:	3901      	subs	r1, #1
    fc9c:	400b      	ands	r3, r1
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    fc9e:	6023      	str	r3, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    fca0:	68e1      	ldr	r1, [r4, #12]
    fca2:	4299      	cmp	r1, r3
    fca4:	d001      	beq.n	fcaa <__kernel_ram_size+0xa>
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
    fca6:	2700      	movs	r7, #0
    fca8:	e008      	b.n	fcbc <__kernel_ram_size+0x1c>
		buffer->flags |= MPSC_PBUF_FULL;
    fcaa:	f042 0208 	orr.w	r2, r2, #8
    fcae:	6122      	str	r2, [r4, #16]
			cont = false;
    fcb0:	2700      	movs	r7, #0
    fcb2:	e003      	b.n	fcbc <__kernel_ram_size+0x1c>
		} else if (wrap) {
			add_skip_item(buffer, free_wlen);
    fcb4:	4620      	mov	r0, r4
    fcb6:	f7ff fea1 	bl	f9fc <add_skip_item>
			cont = true;
    fcba:	4637      	mov	r7, r6
    fcbc:	f385 8811 	msr	BASEPRI, r5
    fcc0:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
    fcc4:	9905      	ldr	r1, [sp, #20]
    fcc6:	b129      	cbz	r1, fcd4 <__kernel_ram_size+0x34>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    fcc8:	6963      	ldr	r3, [r4, #20]
    fcca:	b10b      	cbz	r3, fcd0 <__kernel_ram_size+0x30>
				buffer->notify_drop(buffer, dropped_item);
    fccc:	4620      	mov	r0, r4
    fcce:	4798      	blx	r3
			}
			dropped_item = NULL;
    fcd0:	2300      	movs	r3, #0
    fcd2:	9305      	str	r3, [sp, #20]
		}
	} while (cont);
    fcd4:	2f00      	cmp	r7, #0
    fcd6:	d041      	beq.n	fd5c <__kernel_ram_size+0xbc>
	__asm__ volatile(
    fcd8:	f04f 0320 	mov.w	r3, #32
    fcdc:	f3ef 8511 	mrs	r5, BASEPRI
    fce0:	f383 8812 	msr	BASEPRI_MAX, r3
    fce4:	f3bf 8f6f 	isb	sy
    fce8:	9500      	str	r5, [sp, #0]
		if (tmp_wr_idx_shift) {
    fcea:	9a03      	ldr	r2, [sp, #12]
    fcec:	2a00      	cmp	r2, #0
    fcee:	d1b2      	bne.n	fc56 <mpsc_pbuf_alloc+0x26>
		wrap = free_space(buffer, &free_wlen);
    fcf0:	a904      	add	r1, sp, #16
    fcf2:	4620      	mov	r0, r4
    fcf4:	f7ff fe24 	bl	f940 <free_space>
    fcf8:	4606      	mov	r6, r0
		if (free_wlen >= wlen) {
    fcfa:	9904      	ldr	r1, [sp, #16]
    fcfc:	4541      	cmp	r1, r8
    fcfe:	d2b1      	bcs.n	fc64 <mpsc_pbuf_alloc+0x34>
		} else if (wrap) {
    fd00:	2800      	cmp	r0, #0
    fd02:	d1d7      	bne.n	fcb4 <__kernel_ram_size+0x14>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    fd04:	ea5a 0309 	orrs.w	r3, sl, r9
    fd08:	d10b      	bne.n	fd22 <__kernel_ram_size+0x82>
		} else if (cont) {
    fd0a:	2f00      	cmp	r7, #0
    fd0c:	d0d6      	beq.n	fcbc <__kernel_ram_size+0x1c>
			tmp_wr_idx_val = buffer->tmp_wr_idx;
    fd0e:	6823      	ldr	r3, [r4, #0]
    fd10:	9301      	str	r3, [sp, #4]
			cont = drop_item_locked(buffer, free_wlen,
    fd12:	ab03      	add	r3, sp, #12
    fd14:	aa05      	add	r2, sp, #20
    fd16:	9904      	ldr	r1, [sp, #16]
    fd18:	4620      	mov	r0, r4
    fd1a:	f7ff fea2 	bl	fa62 <drop_item_locked>
    fd1e:	4607      	mov	r7, r0
    fd20:	e7cc      	b.n	fcbc <__kernel_ram_size+0x1c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    fd22:	f004 fcd7 	bl	146d4 <k_is_in_isr>
    fd26:	2800      	cmp	r0, #0
    fd28:	d1ef      	bne.n	fd0a <__kernel_ram_size+0x6a>
	__asm__ volatile(
    fd2a:	9b00      	ldr	r3, [sp, #0]
    fd2c:	f383 8811 	msr	BASEPRI, r3
    fd30:	f3bf 8f6f 	isb	sy
			err = k_sem_take(&buffer->sem, timeout);
    fd34:	f104 0028 	add.w	r0, r4, #40	; 0x28
	return z_impl_k_sem_take(sem, timeout);
    fd38:	464a      	mov	r2, r9
    fd3a:	4653      	mov	r3, sl
    fd3c:	f7fd fd9e 	bl	d87c <z_impl_k_sem_take>
	__asm__ volatile(
    fd40:	f04f 0320 	mov.w	r3, #32
    fd44:	f3ef 8511 	mrs	r5, BASEPRI
    fd48:	f383 8812 	msr	BASEPRI_MAX, r3
    fd4c:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
    fd50:	fab0 f780 	clz	r7, r0
    fd54:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    fd56:	e7b1      	b.n	fcbc <__kernel_ram_size+0x1c>
		return NULL;
    fd58:	f04f 0b00 	mov.w	fp, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    fd5c:	4658      	mov	r0, fp
    fd5e:	b007      	add	sp, #28
    fd60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000fd64 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    fd64:	b570      	push	{r4, r5, r6, lr}
    fd66:	4604      	mov	r4, r0
    fd68:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    fd6a:	6983      	ldr	r3, [r0, #24]
    fd6c:	4608      	mov	r0, r1
    fd6e:	4798      	blx	r3
    fd70:	f04f 0320 	mov.w	r3, #32
    fd74:	f3ef 8611 	mrs	r6, BASEPRI
    fd78:	f383 8812 	msr	BASEPRI_MAX, r3
    fd7c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    fd80:	782b      	ldrb	r3, [r5, #0]
    fd82:	f043 0301 	orr.w	r3, r3, #1
    fd86:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    fd88:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
    fd8a:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    fd8c:	6923      	ldr	r3, [r4, #16]
    fd8e:	f013 0f01 	tst.w	r3, #1
    fd92:	d104      	bne.n	fd9e <mpsc_pbuf_commit+0x3a>
	return (i >= buffer->size) ? i - buffer->size : i;
    fd94:	6a23      	ldr	r3, [r4, #32]
    fd96:	4298      	cmp	r0, r3
    fd98:	d304      	bcc.n	fda4 <mpsc_pbuf_commit+0x40>
    fd9a:	1ac0      	subs	r0, r0, r3
    fd9c:	e002      	b.n	fda4 <mpsc_pbuf_commit+0x40>
		return i & (buffer->size - 1);
    fd9e:	6a23      	ldr	r3, [r4, #32]
    fda0:	3b01      	subs	r3, #1
    fda2:	4018      	ands	r0, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    fda4:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    fda6:	4620      	mov	r0, r4
    fda8:	f7ff fe02 	bl	f9b0 <max_utilization_update>
	__asm__ volatile(
    fdac:	f386 8811 	msr	BASEPRI, r6
    fdb0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
    fdb4:	bd70      	pop	{r4, r5, r6, pc}

0000fdb6 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    fdb6:	b5f0      	push	{r4, r5, r6, r7, lr}
    fdb8:	b083      	sub	sp, #12
    fdba:	4604      	mov	r4, r0
    fdbc:	e02e      	b.n	fe1c <mpsc_pbuf_claim+0x66>
		return item->skip.len;
    fdbe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    fdc2:	0880      	lsrs	r0, r0, #2
    fdc4:	d14e      	bne.n	fe64 <mpsc_pbuf_claim+0xae>
    fdc6:	e044      	b.n	fe52 <mpsc_pbuf_claim+0x9c>
		return i & (buffer->size - 1);
    fdc8:	6a22      	ldr	r2, [r4, #32]
    fdca:	3a01      	subs	r2, #1
    fdcc:	4013      	ands	r3, r2
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);

				buffer->tmp_rd_idx =
    fdce:	60a3      	str	r3, [r4, #8]
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
				rd_idx_inc(buffer, inc);
    fdd0:	4620      	mov	r0, r4
    fdd2:	f7ff fe00 	bl	f9d6 <rd_idx_inc>
				cont = true;
    fdd6:	2301      	movs	r3, #1
			if (skip || !is_valid(item)) {
    fdd8:	e01b      	b.n	fe12 <mpsc_pbuf_claim+0x5c>
			} else {
				item->hdr.busy = 1;
    fdda:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    fdde:	f041 0102 	orr.w	r1, r1, #2
    fde2:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
    fde6:	68a7      	ldr	r7, [r4, #8]
						buffer->get_wlen(item));
    fde8:	69a3      	ldr	r3, [r4, #24]
    fdea:	4630      	mov	r0, r6
    fdec:	4798      	blx	r3
	uint32_t i = idx + val;
    fdee:	4438      	add	r0, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    fdf0:	6923      	ldr	r3, [r4, #16]
    fdf2:	f013 0f01 	tst.w	r3, #1
    fdf6:	d104      	bne.n	fe02 <mpsc_pbuf_claim+0x4c>
	return (i >= buffer->size) ? i - buffer->size : i;
    fdf8:	6a23      	ldr	r3, [r4, #32]
    fdfa:	4298      	cmp	r0, r3
    fdfc:	d304      	bcc.n	fe08 <mpsc_pbuf_claim+0x52>
    fdfe:	1ac0      	subs	r0, r0, r3
    fe00:	e002      	b.n	fe08 <mpsc_pbuf_claim+0x52>
		return i & (buffer->size - 1);
    fe02:	6a23      	ldr	r3, [r4, #32]
    fe04:	3b01      	subs	r3, #1
    fe06:	4018      	ands	r0, r3
				buffer->tmp_rd_idx =
    fe08:	60a0      	str	r0, [r4, #8]
		cont = false;
    fe0a:	2300      	movs	r3, #0
    fe0c:	e001      	b.n	fe12 <mpsc_pbuf_claim+0x5c>
    fe0e:	2300      	movs	r3, #0
			item = NULL;
    fe10:	461e      	mov	r6, r3
    fe12:	f385 8811 	msr	BASEPRI, r5
    fe16:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    fe1a:	b393      	cbz	r3, fe82 <mpsc_pbuf_claim+0xcc>
	__asm__ volatile(
    fe1c:	f04f 0320 	mov.w	r3, #32
    fe20:	f3ef 8511 	mrs	r5, BASEPRI
    fe24:	f383 8812 	msr	BASEPRI_MAX, r3
    fe28:	f3bf 8f6f 	isb	sy
		(void)available(buffer, &a);
    fe2c:	a901      	add	r1, sp, #4
    fe2e:	4620      	mov	r0, r4
    fe30:	f7ff fd9a 	bl	f968 <available>
			&buffer->buf[buffer->tmp_rd_idx];
    fe34:	69e3      	ldr	r3, [r4, #28]
    fe36:	68a2      	ldr	r2, [r4, #8]
		item = (union mpsc_pbuf_generic *)
    fe38:	eb03 0682 	add.w	r6, r3, r2, lsl #2
		if (!a || is_invalid(item)) {
    fe3c:	9901      	ldr	r1, [sp, #4]
    fe3e:	2900      	cmp	r1, #0
    fe40:	d0e5      	beq.n	fe0e <mpsc_pbuf_claim+0x58>
	return !item->hdr.valid && !item->hdr.busy;
    fe42:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
		if (!a || is_invalid(item)) {
    fe46:	f011 0103 	ands.w	r1, r1, #3
    fe4a:	d017      	beq.n	fe7c <mpsc_pbuf_claim+0xc6>
	if (item->hdr.busy && !item->hdr.valid) {
    fe4c:	2902      	cmp	r1, #2
    fe4e:	d0b6      	beq.n	fdbe <mpsc_pbuf_claim+0x8>
	return 0;
    fe50:	2000      	movs	r0, #0
	return item->hdr.valid;
    fe52:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			if (skip || !is_valid(item)) {
    fe56:	f011 0f01 	tst.w	r1, #1
    fe5a:	d1be      	bne.n	fdda <mpsc_pbuf_claim+0x24>
					skip ? skip : buffer->get_wlen(item);
    fe5c:	b910      	cbnz	r0, fe64 <mpsc_pbuf_claim+0xae>
    fe5e:	69a3      	ldr	r3, [r4, #24]
    fe60:	4630      	mov	r0, r6
    fe62:	4798      	blx	r3
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    fe64:	68a3      	ldr	r3, [r4, #8]
    fe66:	4601      	mov	r1, r0
	uint32_t i = idx + val;
    fe68:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    fe6a:	6922      	ldr	r2, [r4, #16]
    fe6c:	f012 0f01 	tst.w	r2, #1
    fe70:	d1aa      	bne.n	fdc8 <mpsc_pbuf_claim+0x12>
	return (i >= buffer->size) ? i - buffer->size : i;
    fe72:	6a22      	ldr	r2, [r4, #32]
    fe74:	4293      	cmp	r3, r2
    fe76:	d3aa      	bcc.n	fdce <mpsc_pbuf_claim+0x18>
    fe78:	1a9b      	subs	r3, r3, r2
    fe7a:	e7a8      	b.n	fdce <mpsc_pbuf_claim+0x18>
		cont = false;
    fe7c:	2300      	movs	r3, #0
			item = NULL;
    fe7e:	461e      	mov	r6, r3
    fe80:	e7c7      	b.n	fe12 <mpsc_pbuf_claim+0x5c>

	return item;
}
    fe82:	4630      	mov	r0, r6
    fe84:	b003      	add	sp, #12
    fe86:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000fe88 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    fe88:	b570      	push	{r4, r5, r6, lr}
    fe8a:	4604      	mov	r4, r0
    fe8c:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    fe8e:	6983      	ldr	r3, [r0, #24]
    fe90:	4608      	mov	r0, r1
    fe92:	4798      	blx	r3
    fe94:	4601      	mov	r1, r0
    fe96:	f04f 0320 	mov.w	r3, #32
    fe9a:	f3ef 8611 	mrs	r6, BASEPRI
    fe9e:	f383 8812 	msr	BASEPRI_MAX, r3
    fea2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    fea6:	782b      	ldrb	r3, [r5, #0]
    fea8:	f36f 0300 	bfc	r3, #0, #1
    feac:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    feae:	6923      	ldr	r3, [r4, #16]
    feb0:	f013 0f02 	tst.w	r3, #2
    feb4:	d00a      	beq.n	fecc <mpsc_pbuf_free+0x44>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    feb6:	69e3      	ldr	r3, [r4, #28]
    feb8:	68e2      	ldr	r2, [r4, #12]
    feba:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    febe:	42ab      	cmp	r3, r5
    fec0:	d004      	beq.n	fecc <mpsc_pbuf_free+0x44>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
		}
		rd_idx_inc(buffer, wlen);
	} else {
		MPSC_PBUF_DBG(buffer, "Allocation occurred during claim");
		witem->skip.len = wlen;
    fec2:	682b      	ldr	r3, [r5, #0]
    fec4:	f360 039f 	bfi	r3, r0, #2, #30
    fec8:	602b      	str	r3, [r5, #0]
    feca:	e00a      	b.n	fee2 <mpsc_pbuf_free+0x5a>
		witem->hdr.busy = 0;
    fecc:	782b      	ldrb	r3, [r5, #0]
    fece:	f36f 0341 	bfc	r3, #1, #1
    fed2:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    fed4:	68e2      	ldr	r2, [r4, #12]
    fed6:	68a3      	ldr	r3, [r4, #8]
    fed8:	429a      	cmp	r2, r3
    feda:	d00b      	beq.n	fef4 <mpsc_pbuf_free+0x6c>
		rd_idx_inc(buffer, wlen);
    fedc:	4620      	mov	r0, r4
    fede:	f7ff fd7a 	bl	f9d6 <rd_idx_inc>
	__asm__ volatile(
    fee2:	f386 8811 	msr	BASEPRI, r6
    fee6:	f3bf 8f6f 	isb	sy
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
    feea:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
    feee:	f7fd fc9d 	bl	d82c <z_impl_k_sem_give>
}
    fef2:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t i = idx + val;
    fef4:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    fef6:	6922      	ldr	r2, [r4, #16]
    fef8:	f012 0f01 	tst.w	r2, #1
    fefc:	d104      	bne.n	ff08 <mpsc_pbuf_free+0x80>
	return (i >= buffer->size) ? i - buffer->size : i;
    fefe:	6a22      	ldr	r2, [r4, #32]
    ff00:	4293      	cmp	r3, r2
    ff02:	d304      	bcc.n	ff0e <mpsc_pbuf_free+0x86>
    ff04:	1a9b      	subs	r3, r3, r2
    ff06:	e002      	b.n	ff0e <mpsc_pbuf_free+0x86>
		return i & (buffer->size - 1);
    ff08:	6a22      	ldr	r2, [r4, #32]
    ff0a:	3a01      	subs	r2, #1
    ff0c:	4013      	ands	r3, r2
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
    ff0e:	60a3      	str	r3, [r4, #8]
    ff10:	e7e4      	b.n	fedc <mpsc_pbuf_free+0x54>

0000ff12 <mpsc_pbuf_is_pending>:

bool mpsc_pbuf_is_pending(struct mpsc_pbuf_buffer *buffer)
{
    ff12:	b500      	push	{lr}
    ff14:	b083      	sub	sp, #12
	uint32_t a;

	(void)available(buffer, &a);
    ff16:	a901      	add	r1, sp, #4
    ff18:	f7ff fd26 	bl	f968 <available>

	return a ? true : false;
}
    ff1c:	9801      	ldr	r0, [sp, #4]
    ff1e:	3800      	subs	r0, #0
    ff20:	bf18      	it	ne
    ff22:	2001      	movne	r0, #1
    ff24:	b003      	add	sp, #12
    ff26:	f85d fb04 	ldr.w	pc, [sp], #4

0000ff2a <mpsc_pbuf_get_utilization>:

void mpsc_pbuf_get_utilization(struct mpsc_pbuf_buffer *buffer,
			       uint32_t *size, uint32_t *now)
{
    ff2a:	b510      	push	{r4, lr}
    ff2c:	4614      	mov	r4, r2
	/* One byte is left for full/empty distinction. */
	*size = (buffer->size - 1) * sizeof(int);
    ff2e:	6a03      	ldr	r3, [r0, #32]
    ff30:	3b01      	subs	r3, #1
    ff32:	009b      	lsls	r3, r3, #2
    ff34:	600b      	str	r3, [r1, #0]
	*now = get_usage(buffer) * sizeof(int);
    ff36:	f7ff fd29 	bl	f98c <get_usage>
    ff3a:	0080      	lsls	r0, r0, #2
    ff3c:	6020      	str	r0, [r4, #0]
}
    ff3e:	bd10      	pop	{r4, pc}

0000ff40 <mpsc_pbuf_get_max_utilization>:

int mpsc_pbuf_get_max_utilization(struct mpsc_pbuf_buffer *buffer, uint32_t *max)
{

	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    ff40:	6903      	ldr	r3, [r0, #16]
    ff42:	f013 0f04 	tst.w	r3, #4
    ff46:	d004      	beq.n	ff52 <mpsc_pbuf_get_max_utilization+0x12>
		return -ENOTSUP;
	}

	*max = buffer->max_usage * sizeof(int);
    ff48:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ff4a:	009b      	lsls	r3, r3, #2
    ff4c:	600b      	str	r3, [r1, #0]
	return 0;
    ff4e:	2000      	movs	r0, #0
    ff50:	4770      	bx	lr
		return -ENOTSUP;
    ff52:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    ff56:	4770      	bx	lr

0000ff58 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    ff58:	4770      	bx	lr

0000ff5a <nvs_flash_rd>:
{
    ff5a:	b510      	push	{r4, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
    ff5c:	8984      	ldrh	r4, [r0, #12]
    ff5e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
    ff62:	f8d0 e000 	ldr.w	lr, [r0]
    ff66:	fb0c ec04 	mla	ip, ip, r4, lr
	offset += addr & ADDR_OFFS_MASK;
    ff6a:	fa1c f181 	uxtah	r1, ip, r1
	rc = flash_read(fs->flash_device, offset, data, len);
    ff6e:	6a80      	ldr	r0, [r0, #40]	; 0x28
	const struct flash_driver_api *api =
    ff70:	6884      	ldr	r4, [r0, #8]
	return api->read(dev, offset, data, len);
    ff72:	6824      	ldr	r4, [r4, #0]
    ff74:	47a0      	blx	r4
}
    ff76:	bd10      	pop	{r4, pc}

0000ff78 <nvs_flash_ate_rd>:
{
    ff78:	b508      	push	{r3, lr}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    ff7a:	2308      	movs	r3, #8
    ff7c:	f7ff ffed 	bl	ff5a <nvs_flash_rd>
}
    ff80:	bd08      	pop	{r3, pc}

0000ff82 <nvs_ate_cmp_const>:
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    ff82:	2300      	movs	r3, #0
    ff84:	2b07      	cmp	r3, #7
    ff86:	d804      	bhi.n	ff92 <nvs_ate_cmp_const+0x10>
		if (data8[i] != value) {
    ff88:	5cc2      	ldrb	r2, [r0, r3]
    ff8a:	428a      	cmp	r2, r1
    ff8c:	d103      	bne.n	ff96 <nvs_ate_cmp_const+0x14>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    ff8e:	3301      	adds	r3, #1
    ff90:	e7f8      	b.n	ff84 <nvs_ate_cmp_const+0x2>
	return 0;
    ff92:	2000      	movs	r0, #0
    ff94:	4770      	bx	lr
			return 1;
    ff96:	2001      	movs	r0, #1
}
    ff98:	4770      	bx	lr

0000ff9a <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
    ff9a:	680b      	ldr	r3, [r1, #0]
    ff9c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    ffa0:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
    ffa2:	89c2      	ldrh	r2, [r0, #14]
    ffa4:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
    ffa8:	d000      	beq.n	ffac <nvs_sector_advance+0x12>
}
    ffaa:	4770      	bx	lr
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
    ffac:	eba3 4302 	sub.w	r3, r3, r2, lsl #16
    ffb0:	600b      	str	r3, [r1, #0]
}
    ffb2:	e7fa      	b.n	ffaa <nvs_sector_advance+0x10>

0000ffb4 <nvs_flash_block_cmp>:
{
    ffb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ffb8:	b089      	sub	sp, #36	; 0x24
    ffba:	4681      	mov	r9, r0
    ffbc:	460e      	mov	r6, r1
    ffbe:	4617      	mov	r7, r2
    ffc0:	461d      	mov	r5, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    ffc2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    ffc4:	681b      	ldr	r3, [r3, #0]
    ffc6:	f1c3 0800 	rsb	r8, r3, #0
	block_size =
    ffca:	f008 0820 	and.w	r8, r8, #32
	while (len) {
    ffce:	e002      	b.n	ffd6 <nvs_flash_block_cmp+0x22>
		len -= bytes_to_cmp;
    ffd0:	1b2d      	subs	r5, r5, r4
		addr += bytes_to_cmp;
    ffd2:	4426      	add	r6, r4
		data8 += bytes_to_cmp;
    ffd4:	4427      	add	r7, r4
	while (len) {
    ffd6:	b1a5      	cbz	r5, 10002 <CONFIG_PM_SRAM_SIZE+0x2>
		bytes_to_cmp = MIN(block_size, len);
    ffd8:	462c      	mov	r4, r5
    ffda:	4545      	cmp	r5, r8
    ffdc:	bf28      	it	cs
    ffde:	4644      	movcs	r4, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
    ffe0:	4623      	mov	r3, r4
    ffe2:	466a      	mov	r2, sp
    ffe4:	4631      	mov	r1, r6
    ffe6:	4648      	mov	r0, r9
    ffe8:	f7ff ffb7 	bl	ff5a <nvs_flash_rd>
		if (rc) {
    ffec:	4603      	mov	r3, r0
    ffee:	b948      	cbnz	r0, 10004 <CONFIG_PM_SRAM_SIZE+0x4>
		rc = memcmp(data8, buf, bytes_to_cmp);
    fff0:	4622      	mov	r2, r4
    fff2:	4669      	mov	r1, sp
    fff4:	4638      	mov	r0, r7
    fff6:	f002 fea3 	bl	12d40 <memcmp>
		if (rc) {
    fffa:	2800      	cmp	r0, #0
    fffc:	d0e8      	beq.n	ffd0 <nvs_flash_block_cmp+0x1c>
			return 1;
    fffe:	2301      	movs	r3, #1
   10000:	e000      	b.n	10004 <CONFIG_PM_SRAM_SIZE+0x4>
	return 0;
   10002:	2300      	movs	r3, #0
}
   10004:	4618      	mov	r0, r3
   10006:	b009      	add	sp, #36	; 0x24
   10008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001000c <nvs_flash_cmp_const>:
{
   1000c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10010:	b088      	sub	sp, #32
   10012:	4680      	mov	r8, r0
   10014:	460e      	mov	r6, r1
   10016:	4611      	mov	r1, r2
   10018:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1001a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1001c:	681f      	ldr	r7, [r3, #0]
   1001e:	427f      	negs	r7, r7
	block_size =
   10020:	f007 0720 	and.w	r7, r7, #32
	(void)memset(cmp, value, block_size);
   10024:	463a      	mov	r2, r7
   10026:	4668      	mov	r0, sp
   10028:	f002 fede 	bl	12de8 <memset>
	while (len) {
   1002c:	e001      	b.n	10032 <nvs_flash_cmp_const+0x26>
		len -= bytes_to_cmp;
   1002e:	1b64      	subs	r4, r4, r5
		addr += bytes_to_cmp;
   10030:	442e      	add	r6, r5
	while (len) {
   10032:	b16c      	cbz	r4, 10050 <nvs_flash_cmp_const+0x44>
		bytes_to_cmp = MIN(block_size, len);
   10034:	4625      	mov	r5, r4
   10036:	42bc      	cmp	r4, r7
   10038:	bf28      	it	cs
   1003a:	463d      	movcs	r5, r7
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   1003c:	462b      	mov	r3, r5
   1003e:	466a      	mov	r2, sp
   10040:	4631      	mov	r1, r6
   10042:	4640      	mov	r0, r8
   10044:	f7ff ffb6 	bl	ffb4 <nvs_flash_block_cmp>
		if (rc) {
   10048:	4603      	mov	r3, r0
   1004a:	2800      	cmp	r0, #0
   1004c:	d0ef      	beq.n	1002e <nvs_flash_cmp_const+0x22>
   1004e:	e000      	b.n	10052 <nvs_flash_cmp_const+0x46>
	return 0;
   10050:	2300      	movs	r3, #0
}
   10052:	4618      	mov	r0, r3
   10054:	b008      	add	sp, #32
   10056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001005a <nvs_flash_erase_sector>:
{
   1005a:	b570      	push	{r4, r5, r6, lr}
   1005c:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   1005e:	0c0d      	lsrs	r5, r1, #16
	offset = fs->offset;
   10060:	6803      	ldr	r3, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   10062:	8982      	ldrh	r2, [r0, #12]
   10064:	0c09      	lsrs	r1, r1, #16
   10066:	fb01 3102 	mla	r1, r1, r2, r3
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   1006a:	6a80      	ldr	r0, [r0, #40]	; 0x28
	const struct flash_driver_api *api =
   1006c:	6883      	ldr	r3, [r0, #8]
	rc = api->erase(dev, offset, size);
   1006e:	689b      	ldr	r3, [r3, #8]
   10070:	4798      	blx	r3
	if (rc) {
   10072:	4606      	mov	r6, r0
   10074:	b108      	cbz	r0, 1007a <nvs_flash_erase_sector+0x20>
}
   10076:	4630      	mov	r0, r6
   10078:	bd70      	pop	{r4, r5, r6, pc}
   1007a:	042d      	lsls	r5, r5, #16
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   1007c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1007e:	89a3      	ldrh	r3, [r4, #12]
   10080:	7912      	ldrb	r2, [r2, #4]
   10082:	4629      	mov	r1, r5
   10084:	4620      	mov	r0, r4
   10086:	f7ff ffc1 	bl	1000c <nvs_flash_cmp_const>
   1008a:	2800      	cmp	r0, #0
   1008c:	d0f3      	beq.n	10076 <nvs_flash_erase_sector+0x1c>
		rc = -ENXIO;
   1008e:	f06f 0605 	mvn.w	r6, #5
   10092:	e7f0      	b.n	10076 <nvs_flash_erase_sector+0x1c>

00010094 <nvs_ate_crc8_check>:
{
   10094:	b510      	push	{r4, lr}
   10096:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   10098:	2207      	movs	r2, #7
   1009a:	4601      	mov	r1, r0
   1009c:	20ff      	movs	r0, #255	; 0xff
   1009e:	f7f2 fd87 	bl	2bb0 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   100a2:	79e3      	ldrb	r3, [r4, #7]
   100a4:	4283      	cmp	r3, r0
   100a6:	d001      	beq.n	100ac <nvs_ate_crc8_check+0x18>
	return 1;
   100a8:	2001      	movs	r0, #1
}
   100aa:	bd10      	pop	{r4, pc}
		return 0;
   100ac:	2000      	movs	r0, #0
   100ae:	e7fc      	b.n	100aa <nvs_ate_crc8_check+0x16>

000100b0 <nvs_ate_valid>:
{
   100b0:	b570      	push	{r4, r5, r6, lr}
   100b2:	4604      	mov	r4, r0
   100b4:	460d      	mov	r5, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   100b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   100b8:	681b      	ldr	r3, [r3, #0]
   100ba:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   100bc:	2a01      	cmp	r2, #1
   100be:	d90d      	bls.n	100dc <nvs_ate_valid+0x2c>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   100c0:	1dd6      	adds	r6, r2, #7
   100c2:	4253      	negs	r3, r2
   100c4:	401e      	ands	r6, r3
	if ((nvs_ate_crc8_check(entry)) ||
   100c6:	4628      	mov	r0, r5
   100c8:	f7ff ffe4 	bl	10094 <nvs_ate_crc8_check>
   100cc:	b940      	cbnz	r0, 100e0 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   100ce:	886a      	ldrh	r2, [r5, #2]
   100d0:	89a3      	ldrh	r3, [r4, #12]
   100d2:	1b9b      	subs	r3, r3, r6
	if ((nvs_ate_crc8_check(entry)) ||
   100d4:	429a      	cmp	r2, r3
   100d6:	d205      	bcs.n	100e4 <nvs_ate_valid+0x34>
	return 1;
   100d8:	2001      	movs	r0, #1
}
   100da:	bd70      	pop	{r4, r5, r6, pc}
		return len;
   100dc:	2608      	movs	r6, #8
   100de:	e7f2      	b.n	100c6 <nvs_ate_valid+0x16>
		return 0;
   100e0:	2000      	movs	r0, #0
   100e2:	e7fa      	b.n	100da <nvs_ate_valid+0x2a>
   100e4:	2000      	movs	r0, #0
   100e6:	e7f8      	b.n	100da <nvs_ate_valid+0x2a>

000100e8 <nvs_recover_last_ate>:
{
   100e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   100ec:	b082      	sub	sp, #8
   100ee:	4606      	mov	r6, r0
   100f0:	4688      	mov	r8, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   100f2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   100f4:	681f      	ldr	r7, [r3, #0]
   100f6:	b2fb      	uxtb	r3, r7
	if (write_block_size <= 1U) {
   100f8:	2b01      	cmp	r3, #1
   100fa:	d90b      	bls.n	10114 <nvs_recover_last_ate+0x2c>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   100fc:	461f      	mov	r7, r3
   100fe:	3307      	adds	r3, #7
   10100:	427f      	negs	r7, r7
   10102:	401f      	ands	r7, r3
	*addr -= ate_size;
   10104:	f8d8 4000 	ldr.w	r4, [r8]
   10108:	1be4      	subs	r4, r4, r7
   1010a:	f8c8 4000 	str.w	r4, [r8]
	data_end_addr = *addr & ADDR_SECT_MASK;
   1010e:	0c25      	lsrs	r5, r4, #16
   10110:	042d      	lsls	r5, r5, #16
	while (ate_end_addr > data_end_addr) {
   10112:	e002      	b.n	1011a <nvs_recover_last_ate+0x32>
		return len;
   10114:	2708      	movs	r7, #8
   10116:	e7f5      	b.n	10104 <nvs_recover_last_ate+0x1c>
		ate_end_addr -= ate_size;
   10118:	1be4      	subs	r4, r4, r7
	while (ate_end_addr > data_end_addr) {
   1011a:	42ac      	cmp	r4, r5
   1011c:	d917      	bls.n	1014e <nvs_recover_last_ate+0x66>
		rc = nvs_flash_ate_rd(fs, ate_end_addr, &end_ate);
   1011e:	466a      	mov	r2, sp
   10120:	4621      	mov	r1, r4
   10122:	4630      	mov	r0, r6
   10124:	f7ff ff28 	bl	ff78 <nvs_flash_ate_rd>
		if (rc) {
   10128:	4603      	mov	r3, r0
   1012a:	b988      	cbnz	r0, 10150 <nvs_recover_last_ate+0x68>
		if (nvs_ate_valid(fs, &end_ate)) {
   1012c:	4669      	mov	r1, sp
   1012e:	4630      	mov	r0, r6
   10130:	f7ff ffbe 	bl	100b0 <nvs_ate_valid>
   10134:	2800      	cmp	r0, #0
   10136:	d0ef      	beq.n	10118 <nvs_recover_last_ate+0x30>
			data_end_addr &= ADDR_SECT_MASK;
   10138:	0c2d      	lsrs	r5, r5, #16
   1013a:	042d      	lsls	r5, r5, #16
			data_end_addr += end_ate.offset + end_ate.len;
   1013c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10140:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   10144:	4413      	add	r3, r2
   10146:	441d      	add	r5, r3
			*addr = ate_end_addr;
   10148:	f8c8 4000 	str.w	r4, [r8]
   1014c:	e7e4      	b.n	10118 <nvs_recover_last_ate+0x30>
	return 0;
   1014e:	2300      	movs	r3, #0
}
   10150:	4618      	mov	r0, r3
   10152:	b002      	add	sp, #8
   10154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010158 <nvs_close_ate_valid>:
{
   10158:	b538      	push	{r3, r4, r5, lr}
   1015a:	4605      	mov	r5, r0
   1015c:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   1015e:	f7ff ffa7 	bl	100b0 <nvs_ate_valid>
   10162:	b1e0      	cbz	r0, 1019e <nvs_close_ate_valid+0x46>
   10164:	88a3      	ldrh	r3, [r4, #4]
   10166:	b9cb      	cbnz	r3, 1019c <nvs_close_ate_valid+0x44>
	    (entry->id != 0xFFFF)) {
   10168:	8822      	ldrh	r2, [r4, #0]
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   1016a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1016e:	429a      	cmp	r2, r3
   10170:	d116      	bne.n	101a0 <nvs_close_ate_valid+0x48>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   10172:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   10174:	681b      	ldr	r3, [r3, #0]
   10176:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   10178:	2a01      	cmp	r2, #1
   1017a:	d90d      	bls.n	10198 <nvs_close_ate_valid+0x40>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   1017c:	4613      	mov	r3, r2
   1017e:	3207      	adds	r2, #7
   10180:	425b      	negs	r3, r3
   10182:	401a      	ands	r2, r3
	if ((fs->sector_size - entry->offset) % ate_size) {
   10184:	89ab      	ldrh	r3, [r5, #12]
   10186:	8861      	ldrh	r1, [r4, #2]
   10188:	1a5b      	subs	r3, r3, r1
   1018a:	fbb3 f1f2 	udiv	r1, r3, r2
   1018e:	fb02 3311 	mls	r3, r2, r1, r3
   10192:	b93b      	cbnz	r3, 101a4 <nvs_close_ate_valid+0x4c>
	return 1;
   10194:	2001      	movs	r0, #1
   10196:	e002      	b.n	1019e <nvs_close_ate_valid+0x46>
		return len;
   10198:	2208      	movs	r2, #8
   1019a:	e7f3      	b.n	10184 <nvs_close_ate_valid+0x2c>
		return 0;
   1019c:	2000      	movs	r0, #0
}
   1019e:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   101a0:	2000      	movs	r0, #0
   101a2:	e7fc      	b.n	1019e <nvs_close_ate_valid+0x46>
		return 0;
   101a4:	2000      	movs	r0, #0
   101a6:	e7fa      	b.n	1019e <nvs_close_ate_valid+0x46>

000101a8 <nvs_prev_ate>:
{
   101a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   101aa:	b083      	sub	sp, #12
   101ac:	4604      	mov	r4, r0
   101ae:	460d      	mov	r5, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   101b0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   101b2:	681b      	ldr	r3, [r3, #0]
   101b4:	b2d9      	uxtb	r1, r3
	if (write_block_size <= 1U) {
   101b6:	2901      	cmp	r1, #1
   101b8:	d92a      	bls.n	10210 <nvs_prev_ate+0x68>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   101ba:	1dce      	adds	r6, r1, #7
   101bc:	424b      	negs	r3, r1
   101be:	401e      	ands	r6, r3
	rc = nvs_flash_ate_rd(fs, *addr, ate);
   101c0:	6829      	ldr	r1, [r5, #0]
   101c2:	4620      	mov	r0, r4
   101c4:	f7ff fed8 	bl	ff78 <nvs_flash_ate_rd>
	if (rc) {
   101c8:	4607      	mov	r7, r0
   101ca:	b9f0      	cbnz	r0, 1020a <nvs_prev_ate+0x62>
	*addr += ate_size;
   101cc:	682b      	ldr	r3, [r5, #0]
   101ce:	4433      	add	r3, r6
   101d0:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   101d2:	b299      	uxth	r1, r3
   101d4:	89a2      	ldrh	r2, [r4, #12]
   101d6:	1b92      	subs	r2, r2, r6
   101d8:	4291      	cmp	r1, r2
   101da:	d116      	bne.n	1020a <nvs_prev_ate+0x62>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   101dc:	0c1a      	lsrs	r2, r3, #16
   101de:	d119      	bne.n	10214 <nvs_prev_ate+0x6c>
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   101e0:	89e2      	ldrh	r2, [r4, #14]
   101e2:	3a01      	subs	r2, #1
   101e4:	eb03 4302 	add.w	r3, r3, r2, lsl #16
   101e8:	602b      	str	r3, [r5, #0]
	rc = nvs_flash_ate_rd(fs, *addr, &close_ate);
   101ea:	466a      	mov	r2, sp
   101ec:	6829      	ldr	r1, [r5, #0]
   101ee:	4620      	mov	r0, r4
   101f0:	f7ff fec2 	bl	ff78 <nvs_flash_ate_rd>
	if (rc) {
   101f4:	4607      	mov	r7, r0
   101f6:	b940      	cbnz	r0, 1020a <nvs_prev_ate+0x62>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   101f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   101fa:	7919      	ldrb	r1, [r3, #4]
   101fc:	4668      	mov	r0, sp
   101fe:	f7ff fec0 	bl	ff82 <nvs_ate_cmp_const>
	if (!rc) {
   10202:	b958      	cbnz	r0, 1021c <nvs_prev_ate+0x74>
		*addr = fs->ate_wra;
   10204:	6862      	ldr	r2, [r4, #4]
   10206:	602a      	str	r2, [r5, #0]
		return 0;
   10208:	4607      	mov	r7, r0
}
   1020a:	4638      	mov	r0, r7
   1020c:	b003      	add	sp, #12
   1020e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return len;
   10210:	2608      	movs	r6, #8
   10212:	e7d5      	b.n	101c0 <nvs_prev_ate+0x18>
		*addr -= (1 << ADDR_SECT_SHIFT);
   10214:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   10218:	602b      	str	r3, [r5, #0]
   1021a:	e7e6      	b.n	101ea <nvs_prev_ate+0x42>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   1021c:	4669      	mov	r1, sp
   1021e:	4620      	mov	r0, r4
   10220:	f7ff ff9a 	bl	10158 <nvs_close_ate_valid>
   10224:	b138      	cbz	r0, 10236 <nvs_prev_ate+0x8e>
		(*addr) &= ADDR_SECT_MASK;
   10226:	886b      	ldrh	r3, [r5, #2]
   10228:	041b      	lsls	r3, r3, #16
   1022a:	602b      	str	r3, [r5, #0]
		(*addr) += close_ate.offset;
   1022c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   10230:	4413      	add	r3, r2
   10232:	602b      	str	r3, [r5, #0]
		return 0;
   10234:	e7e9      	b.n	1020a <nvs_prev_ate+0x62>
	return nvs_recover_last_ate(fs, addr);
   10236:	4629      	mov	r1, r5
   10238:	4620      	mov	r0, r4
   1023a:	f7ff ff55 	bl	100e8 <nvs_recover_last_ate>
   1023e:	4607      	mov	r7, r0
   10240:	e7e3      	b.n	1020a <nvs_prev_ate+0x62>

00010242 <nvs_ate_crc8_update>:
{
   10242:	b510      	push	{r4, lr}
   10244:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   10246:	2207      	movs	r2, #7
   10248:	4601      	mov	r1, r0
   1024a:	20ff      	movs	r0, #255	; 0xff
   1024c:	f7f2 fcb0 	bl	2bb0 <crc8_ccitt>
	entry->crc8 = crc8;
   10250:	71e0      	strb	r0, [r4, #7]
}
   10252:	bd10      	pop	{r4, pc}

00010254 <nvs_flash_al_wrt>:
	if (!len) {
   10254:	2b00      	cmp	r3, #0
   10256:	d040      	beq.n	102da <nvs_flash_al_wrt+0x86>
{
   10258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1025c:	b089      	sub	sp, #36	; 0x24
   1025e:	4605      	mov	r5, r0
   10260:	4617      	mov	r7, r2
   10262:	4698      	mov	r8, r3
	offset = fs->offset;
   10264:	6803      	ldr	r3, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   10266:	8982      	ldrh	r2, [r0, #12]
   10268:	0c08      	lsrs	r0, r1, #16
   1026a:	fb00 3302 	mla	r3, r0, r2, r3
	offset += addr & ADDR_OFFS_MASK;
   1026e:	fa13 f481 	uxtah	r4, r3, r1
   10272:	46a1      	mov	r9, r4
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   10274:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   10276:	681b      	ldr	r3, [r3, #0]
   10278:	425b      	negs	r3, r3
	if (blen > 0) {
   1027a:	ea13 0608 	ands.w	r6, r3, r8
   1027e:	d00e      	beq.n	1029e <nvs_flash_al_wrt+0x4a>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   10280:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	const struct flash_driver_api *api =
   10282:	6883      	ldr	r3, [r0, #8]
	rc = api->write(dev, offset, data, len);
   10284:	f8d3 9004 	ldr.w	r9, [r3, #4]
   10288:	4633      	mov	r3, r6
   1028a:	463a      	mov	r2, r7
   1028c:	4621      	mov	r1, r4
   1028e:	47c8      	blx	r9
		if (rc) {
   10290:	b948      	cbnz	r0, 102a6 <nvs_flash_al_wrt+0x52>
		len -= blen;
   10292:	eba8 0806 	sub.w	r8, r8, r6
		offset += blen;
   10296:	eb04 0906 	add.w	r9, r4, r6
		data8 += blen;
   1029a:	4437      	add	r7, r6
   1029c:	e000      	b.n	102a0 <nvs_flash_al_wrt+0x4c>
	int rc = 0;
   1029e:	2000      	movs	r0, #0
	if (len) {
   102a0:	f1b8 0f00 	cmp.w	r8, #0
   102a4:	d102      	bne.n	102ac <nvs_flash_al_wrt+0x58>
}
   102a6:	b009      	add	sp, #36	; 0x24
   102a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		memcpy(buf, data8, len);
   102ac:	4642      	mov	r2, r8
   102ae:	4639      	mov	r1, r7
   102b0:	4668      	mov	r0, sp
   102b2:	f002 fd6a 	bl	12d8a <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   102b6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
			fs->flash_parameters->write_block_size - len);
   102b8:	681a      	ldr	r2, [r3, #0]
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   102ba:	eba2 0208 	sub.w	r2, r2, r8
   102be:	7919      	ldrb	r1, [r3, #4]
   102c0:	eb0d 0008 	add.w	r0, sp, r8
   102c4:	f002 fd90 	bl	12de8 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   102c8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
				 fs->flash_parameters->write_block_size);
   102ca:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   102cc:	681b      	ldr	r3, [r3, #0]
	const struct flash_driver_api *api =
   102ce:	6882      	ldr	r2, [r0, #8]
	rc = api->write(dev, offset, data, len);
   102d0:	6854      	ldr	r4, [r2, #4]
   102d2:	466a      	mov	r2, sp
   102d4:	4649      	mov	r1, r9
   102d6:	47a0      	blx	r4
	return rc;
   102d8:	e7e5      	b.n	102a6 <nvs_flash_al_wrt+0x52>
		return 0;
   102da:	2000      	movs	r0, #0
}
   102dc:	4770      	bx	lr

000102de <nvs_flash_data_wrt>:
{
   102de:	b538      	push	{r3, r4, r5, lr}
   102e0:	4605      	mov	r5, r0
   102e2:	4614      	mov	r4, r2
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   102e4:	4613      	mov	r3, r2
   102e6:	460a      	mov	r2, r1
   102e8:	6881      	ldr	r1, [r0, #8]
   102ea:	f7ff ffb3 	bl	10254 <nvs_flash_al_wrt>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   102ee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   102f0:	681b      	ldr	r3, [r3, #0]
   102f2:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   102f4:	2a01      	cmp	r2, #1
   102f6:	d903      	bls.n	10300 <nvs_flash_data_wrt+0x22>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   102f8:	4414      	add	r4, r2
   102fa:	3c01      	subs	r4, #1
   102fc:	4253      	negs	r3, r2
   102fe:	401c      	ands	r4, r3
	fs->data_wra += nvs_al_size(fs, len);
   10300:	68ab      	ldr	r3, [r5, #8]
   10302:	4423      	add	r3, r4
   10304:	60ab      	str	r3, [r5, #8]
}
   10306:	bd38      	pop	{r3, r4, r5, pc}

00010308 <nvs_flash_block_move>:
{
   10308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1030c:	b088      	sub	sp, #32
   1030e:	4607      	mov	r7, r0
   10310:	460e      	mov	r6, r1
   10312:	4615      	mov	r5, r2
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   10314:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   10316:	681b      	ldr	r3, [r3, #0]
   10318:	f1c3 0800 	rsb	r8, r3, #0
	block_size =
   1031c:	f008 0820 	and.w	r8, r8, #32
	while (len) {
   10320:	e001      	b.n	10326 <nvs_flash_block_move+0x1e>
		len -= bytes_to_copy;
   10322:	1b2d      	subs	r5, r5, r4
		addr += bytes_to_copy;
   10324:	4426      	add	r6, r4
	while (len) {
   10326:	b1a5      	cbz	r5, 10352 <nvs_flash_block_move+0x4a>
		bytes_to_copy = MIN(block_size, len);
   10328:	462c      	mov	r4, r5
   1032a:	4545      	cmp	r5, r8
   1032c:	bf28      	it	cs
   1032e:	4644      	movcs	r4, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   10330:	4623      	mov	r3, r4
   10332:	466a      	mov	r2, sp
   10334:	4631      	mov	r1, r6
   10336:	4638      	mov	r0, r7
   10338:	f7ff fe0f 	bl	ff5a <nvs_flash_rd>
		if (rc) {
   1033c:	4603      	mov	r3, r0
   1033e:	b948      	cbnz	r0, 10354 <nvs_flash_block_move+0x4c>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
   10340:	4622      	mov	r2, r4
   10342:	4669      	mov	r1, sp
   10344:	4638      	mov	r0, r7
   10346:	f7ff ffca 	bl	102de <nvs_flash_data_wrt>
		if (rc) {
   1034a:	4603      	mov	r3, r0
   1034c:	2800      	cmp	r0, #0
   1034e:	d0e8      	beq.n	10322 <nvs_flash_block_move+0x1a>
   10350:	e000      	b.n	10354 <nvs_flash_block_move+0x4c>
	return 0;
   10352:	2300      	movs	r3, #0
}
   10354:	4618      	mov	r0, r3
   10356:	b008      	add	sp, #32
   10358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001035c <nvs_flash_ate_wrt>:
{
   1035c:	b510      	push	{r4, lr}
   1035e:	4604      	mov	r4, r0
   10360:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   10362:	2308      	movs	r3, #8
   10364:	6841      	ldr	r1, [r0, #4]
   10366:	f7ff ff75 	bl	10254 <nvs_flash_al_wrt>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   1036a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1036c:	681b      	ldr	r3, [r3, #0]
   1036e:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   10370:	2a01      	cmp	r2, #1
   10372:	d907      	bls.n	10384 <nvs_flash_ate_wrt+0x28>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   10374:	4613      	mov	r3, r2
   10376:	3207      	adds	r2, #7
   10378:	425b      	negs	r3, r3
   1037a:	401a      	ands	r2, r3
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   1037c:	6863      	ldr	r3, [r4, #4]
   1037e:	1a9b      	subs	r3, r3, r2
   10380:	6063      	str	r3, [r4, #4]
}
   10382:	bd10      	pop	{r4, pc}
		return len;
   10384:	2208      	movs	r2, #8
   10386:	e7f9      	b.n	1037c <nvs_flash_ate_wrt+0x20>

00010388 <nvs_add_gc_done_ate>:
{
   10388:	b510      	push	{r4, lr}
   1038a:	b082      	sub	sp, #8
   1038c:	4604      	mov	r4, r0
	gc_done_ate.id = 0xffff;
   1038e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10392:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   10396:	2300      	movs	r3, #0
   10398:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   1039c:	8903      	ldrh	r3, [r0, #8]
   1039e:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   103a2:	4668      	mov	r0, sp
   103a4:	f7ff ff4d 	bl	10242 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   103a8:	4669      	mov	r1, sp
   103aa:	4620      	mov	r0, r4
   103ac:	f7ff ffd6 	bl	1035c <nvs_flash_ate_wrt>
}
   103b0:	b002      	add	sp, #8
   103b2:	bd10      	pop	{r4, pc}

000103b4 <nvs_gc>:
{
   103b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   103b8:	b08a      	sub	sp, #40	; 0x28
   103ba:	4604      	mov	r4, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   103bc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   103be:	681b      	ldr	r3, [r3, #0]
   103c0:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   103c2:	2a01      	cmp	r2, #1
   103c4:	d92d      	bls.n	10422 <nvs_gc+0x6e>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   103c6:	1dd6      	adds	r6, r2, #7
   103c8:	4253      	negs	r3, r2
   103ca:	401e      	ands	r6, r3
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   103cc:	88e3      	ldrh	r3, [r4, #6]
   103ce:	041b      	lsls	r3, r3, #16
   103d0:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   103d2:	a903      	add	r1, sp, #12
   103d4:	4620      	mov	r0, r4
   103d6:	f7ff fde0 	bl	ff9a <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   103da:	89a1      	ldrh	r1, [r4, #12]
   103dc:	9b03      	ldr	r3, [sp, #12]
   103de:	4419      	add	r1, r3
   103e0:	1b89      	subs	r1, r1, r6
   103e2:	9102      	str	r1, [sp, #8]
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
   103e4:	aa08      	add	r2, sp, #32
   103e6:	4620      	mov	r0, r4
   103e8:	f7ff fdc6 	bl	ff78 <nvs_flash_ate_rd>
	if (rc < 0) {
   103ec:	1e03      	subs	r3, r0, #0
   103ee:	db14      	blt.n	1041a <nvs_gc+0x66>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   103f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   103f2:	7919      	ldrb	r1, [r3, #4]
   103f4:	a808      	add	r0, sp, #32
   103f6:	f7ff fdc4 	bl	ff82 <nvs_ate_cmp_const>
	if (!rc) {
   103fa:	b9a0      	cbnz	r0, 10426 <nvs_gc+0x72>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   103fc:	6863      	ldr	r3, [r4, #4]
   103fe:	68a2      	ldr	r2, [r4, #8]
   10400:	4416      	add	r6, r2
   10402:	42b3      	cmp	r3, r6
   10404:	d304      	bcc.n	10410 <nvs_gc+0x5c>
		rc = nvs_add_gc_done_ate(fs);
   10406:	4620      	mov	r0, r4
   10408:	f7ff ffbe 	bl	10388 <nvs_add_gc_done_ate>
		if (rc) {
   1040c:	4603      	mov	r3, r0
   1040e:	b920      	cbnz	r0, 1041a <nvs_gc+0x66>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   10410:	9903      	ldr	r1, [sp, #12]
   10412:	4620      	mov	r0, r4
   10414:	f7ff fe21 	bl	1005a <nvs_flash_erase_sector>
   10418:	4603      	mov	r3, r0
}
   1041a:	4618      	mov	r0, r3
   1041c:	b00a      	add	sp, #40	; 0x28
   1041e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return len;
   10422:	2608      	movs	r6, #8
   10424:	e7d2      	b.n	103cc <nvs_gc+0x18>
	stop_addr = gc_addr - ate_size;
   10426:	9b02      	ldr	r3, [sp, #8]
   10428:	eba3 0806 	sub.w	r8, r3, r6
	if (nvs_close_ate_valid(fs, &close_ate)) {
   1042c:	a908      	add	r1, sp, #32
   1042e:	4620      	mov	r0, r4
   10430:	f7ff fe92 	bl	10158 <nvs_close_ate_valid>
   10434:	b140      	cbz	r0, 10448 <nvs_gc+0x94>
		gc_addr &= ADDR_SECT_MASK;
   10436:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1043a:	041b      	lsls	r3, r3, #16
   1043c:	9302      	str	r3, [sp, #8]
		gc_addr += close_ate.offset;
   1043e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   10442:	4413      	add	r3, r2
   10444:	9302      	str	r3, [sp, #8]
   10446:	e023      	b.n	10490 <nvs_gc+0xdc>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   10448:	a902      	add	r1, sp, #8
   1044a:	4620      	mov	r0, r4
   1044c:	f7ff fe4c 	bl	100e8 <nvs_recover_last_ate>
		if (rc) {
   10450:	4603      	mov	r3, r0
   10452:	b1e8      	cbz	r0, 10490 <nvs_gc+0xdc>
   10454:	e7e1      	b.n	1041a <nvs_gc+0x66>
		} while (wlk_addr != fs->ate_wra);
   10456:	6862      	ldr	r2, [r4, #4]
   10458:	9b01      	ldr	r3, [sp, #4]
   1045a:	429a      	cmp	r2, r3
   1045c:	d014      	beq.n	10488 <nvs_gc+0xd4>
			wlk_prev_addr = wlk_addr;
   1045e:	9d01      	ldr	r5, [sp, #4]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   10460:	aa04      	add	r2, sp, #16
   10462:	a901      	add	r1, sp, #4
   10464:	4620      	mov	r0, r4
   10466:	f7ff fe9f 	bl	101a8 <nvs_prev_ate>
			if (rc) {
   1046a:	4603      	mov	r3, r0
   1046c:	2800      	cmp	r0, #0
   1046e:	d1d4      	bne.n	1041a <nvs_gc+0x66>
			if ((wlk_ate.id == gc_ate.id) &&
   10470:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   10474:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   10478:	429a      	cmp	r2, r3
   1047a:	d1ec      	bne.n	10456 <nvs_gc+0xa2>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   1047c:	a904      	add	r1, sp, #16
   1047e:	4620      	mov	r0, r4
   10480:	f7ff fe16 	bl	100b0 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   10484:	2800      	cmp	r0, #0
   10486:	d0e6      	beq.n	10456 <nvs_gc+0xa2>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   10488:	42bd      	cmp	r5, r7
   1048a:	d013      	beq.n	104b4 <nvs_gc+0x100>
	} while (gc_prev_addr != stop_addr);
   1048c:	4547      	cmp	r7, r8
   1048e:	d0b5      	beq.n	103fc <nvs_gc+0x48>
		gc_prev_addr = gc_addr;
   10490:	9f02      	ldr	r7, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   10492:	aa06      	add	r2, sp, #24
   10494:	a902      	add	r1, sp, #8
   10496:	4620      	mov	r0, r4
   10498:	f7ff fe86 	bl	101a8 <nvs_prev_ate>
		if (rc) {
   1049c:	4603      	mov	r3, r0
   1049e:	2800      	cmp	r0, #0
   104a0:	d1bb      	bne.n	1041a <nvs_gc+0x66>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   104a2:	a906      	add	r1, sp, #24
   104a4:	4620      	mov	r0, r4
   104a6:	f7ff fe03 	bl	100b0 <nvs_ate_valid>
   104aa:	2800      	cmp	r0, #0
   104ac:	d0ee      	beq.n	1048c <nvs_gc+0xd8>
		wlk_addr = fs->ate_wra;
   104ae:	6863      	ldr	r3, [r4, #4]
   104b0:	9301      	str	r3, [sp, #4]
   104b2:	e7d4      	b.n	1045e <nvs_gc+0xaa>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   104b4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   104b8:	2b00      	cmp	r3, #0
   104ba:	d0e7      	beq.n	1048c <nvs_gc+0xd8>
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   104bc:	0c3b      	lsrs	r3, r7, #16
   104be:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   104c0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   104c4:	189d      	adds	r5, r3, r2
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   104c6:	8923      	ldrh	r3, [r4, #8]
   104c8:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
   104cc:	a806      	add	r0, sp, #24
   104ce:	f7ff feb8 	bl	10242 <nvs_ate_crc8_update>
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   104d2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   104d6:	4629      	mov	r1, r5
   104d8:	4620      	mov	r0, r4
   104da:	f7ff ff15 	bl	10308 <nvs_flash_block_move>
			if (rc) {
   104de:	4603      	mov	r3, r0
   104e0:	2800      	cmp	r0, #0
   104e2:	d19a      	bne.n	1041a <nvs_gc+0x66>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   104e4:	a906      	add	r1, sp, #24
   104e6:	4620      	mov	r0, r4
   104e8:	f7ff ff38 	bl	1035c <nvs_flash_ate_wrt>
			if (rc) {
   104ec:	4603      	mov	r3, r0
   104ee:	2800      	cmp	r0, #0
   104f0:	d0cc      	beq.n	1048c <nvs_gc+0xd8>
   104f2:	e792      	b.n	1041a <nvs_gc+0x66>

000104f4 <nvs_flash_wrt_entry>:
{
   104f4:	b570      	push	{r4, r5, r6, lr}
   104f6:	b082      	sub	sp, #8
   104f8:	4604      	mov	r4, r0
   104fa:	4616      	mov	r6, r2
   104fc:	461d      	mov	r5, r3
	entry.id = id;
   104fe:	f8ad 1000 	strh.w	r1, [sp]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   10502:	8903      	ldrh	r3, [r0, #8]
   10504:	f8ad 3002 	strh.w	r3, [sp, #2]
	entry.len = (uint16_t)len;
   10508:	f8ad 5004 	strh.w	r5, [sp, #4]
	entry.part = 0xff;
   1050c:	23ff      	movs	r3, #255	; 0xff
   1050e:	f88d 3006 	strb.w	r3, [sp, #6]
	nvs_ate_crc8_update(&entry);
   10512:	4668      	mov	r0, sp
   10514:	f7ff fe95 	bl	10242 <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
   10518:	462a      	mov	r2, r5
   1051a:	4631      	mov	r1, r6
   1051c:	4620      	mov	r0, r4
   1051e:	f7ff fede 	bl	102de <nvs_flash_data_wrt>
	if (rc) {
   10522:	b108      	cbz	r0, 10528 <nvs_flash_wrt_entry+0x34>
}
   10524:	b002      	add	sp, #8
   10526:	bd70      	pop	{r4, r5, r6, pc}
	rc = nvs_flash_ate_wrt(fs, &entry);
   10528:	4669      	mov	r1, sp
   1052a:	4620      	mov	r0, r4
   1052c:	f7ff ff16 	bl	1035c <nvs_flash_ate_wrt>
	if (rc) {
   10530:	e7f8      	b.n	10524 <nvs_flash_wrt_entry+0x30>

00010532 <nvs_sector_close>:
{
   10532:	b530      	push	{r4, r5, lr}
   10534:	b083      	sub	sp, #12
   10536:	4604      	mov	r4, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   10538:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1053a:	681b      	ldr	r3, [r3, #0]
   1053c:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   1053e:	2a01      	cmp	r2, #1
   10540:	d926      	bls.n	10590 <nvs_sector_close+0x5e>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   10542:	4613      	mov	r3, r2
   10544:	3207      	adds	r2, #7
   10546:	425b      	negs	r3, r3
   10548:	401a      	ands	r2, r3
	close_ate.id = 0xFFFF;
   1054a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1054e:	f8ad 3000 	strh.w	r3, [sp]
	close_ate.len = 0U;
   10552:	2500      	movs	r5, #0
   10554:	f8ad 5004 	strh.w	r5, [sp, #4]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   10558:	6863      	ldr	r3, [r4, #4]
   1055a:	1899      	adds	r1, r3, r2
   1055c:	f8ad 1002 	strh.w	r1, [sp, #2]
	fs->ate_wra &= ADDR_SECT_MASK;
   10560:	0c1b      	lsrs	r3, r3, #16
   10562:	041b      	lsls	r3, r3, #16
   10564:	6063      	str	r3, [r4, #4]
	fs->ate_wra += (fs->sector_size - ate_size);
   10566:	89a1      	ldrh	r1, [r4, #12]
   10568:	1a8a      	subs	r2, r1, r2
   1056a:	4413      	add	r3, r2
   1056c:	6063      	str	r3, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   1056e:	4668      	mov	r0, sp
   10570:	f7ff fe67 	bl	10242 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   10574:	4669      	mov	r1, sp
   10576:	4620      	mov	r0, r4
   10578:	f7ff fef0 	bl	1035c <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   1057c:	1d21      	adds	r1, r4, #4
   1057e:	4620      	mov	r0, r4
   10580:	f7ff fd0b 	bl	ff9a <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   10584:	88e3      	ldrh	r3, [r4, #6]
   10586:	041b      	lsls	r3, r3, #16
   10588:	60a3      	str	r3, [r4, #8]
}
   1058a:	4628      	mov	r0, r5
   1058c:	b003      	add	sp, #12
   1058e:	bd30      	pop	{r4, r5, pc}
		return len;
   10590:	2208      	movs	r2, #8
   10592:	e7da      	b.n	1054a <nvs_sector_close+0x18>

00010594 <nvs_delete>:
{
   10594:	b508      	push	{r3, lr}
	return nvs_write(fs, id, NULL, 0);
   10596:	2300      	movs	r3, #0
   10598:	461a      	mov	r2, r3
   1059a:	f7f3 fc8d 	bl	3eb8 <nvs_write>
}
   1059e:	bd08      	pop	{r3, pc}

000105a0 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   105a0:	b510      	push	{r4, lr}
   105a2:	b082      	sub	sp, #8
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   105a4:	2400      	movs	r4, #0
   105a6:	9400      	str	r4, [sp, #0]
   105a8:	f7f3 fd64 	bl	4074 <nvs_read_hist>
	return rc;
}
   105ac:	b002      	add	sp, #8
   105ae:	bd10      	pop	{r4, pc}

000105b0 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
   105b0:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   105b2:	f013 0f04 	tst.w	r3, #4
   105b6:	d001      	beq.n	105bc <log_msg_generic_get_wlen+0xc>
	return 0;
   105b8:	2000      	movs	r0, #0
}
   105ba:	4770      	bx	lr
		return log_msg_get_total_wlen(msg->hdr.desc);
   105bc:	6803      	ldr	r3, [r0, #0]
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   105be:	f3c3 204a 	ubfx	r0, r3, #9, #11
   105c2:	eb00 5013 	add.w	r0, r0, r3, lsr #20
   105c6:	3017      	adds	r0, #23
   105c8:	f020 0007 	bic.w	r0, r0, #7
   105cc:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   105ce:	4770      	bx	lr

000105d0 <dummy_timestamp>:
}
   105d0:	2000      	movs	r0, #0
   105d2:	4770      	bx	lr

000105d4 <default_get_timestamp>:
{
   105d4:	b508      	push	{r3, lr}
   105d6:	f003 fb81 	bl	13cdc <sys_clock_cycle_get_32>
}
   105da:	bd08      	pop	{r3, pc}

000105dc <k_msleep>:
{
   105dc:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   105de:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   105e2:	17c1      	asrs	r1, r0, #31
   105e4:	03c9      	lsls	r1, r1, #15
   105e6:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   105ea:	03c0      	lsls	r0, r0, #15
   105ec:	f240 33e7 	movw	r3, #999	; 0x3e7
   105f0:	18c0      	adds	r0, r0, r3
   105f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   105f6:	f04f 0300 	mov.w	r3, #0
   105fa:	f141 0100 	adc.w	r1, r1, #0
   105fe:	f7ef fd6d 	bl	dc <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   10602:	f7fd fce3 	bl	dfcc <z_impl_k_sleep>
}
   10606:	bd08      	pop	{r3, pc}

00010608 <msg_alloc>:
{
   10608:	b508      	push	{r3, lr}
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   1060a:	2200      	movs	r2, #0
   1060c:	2300      	movs	r3, #0
   1060e:	f7ff fb0f 	bl	fc30 <mpsc_pbuf_alloc>
}
   10612:	bd08      	pop	{r3, pc}

00010614 <msg_free>:
{
   10614:	b508      	push	{r3, lr}
	mpsc_pbuf_free(buffer, &msg->buf);
   10616:	f7ff fc37 	bl	fe88 <mpsc_pbuf_free>
}
   1061a:	bd08      	pop	{r3, pc}

0001061c <msg_pending>:
{
   1061c:	b508      	push	{r3, lr}
	return mpsc_pbuf_is_pending(buffer);
   1061e:	f7ff fc78 	bl	ff12 <mpsc_pbuf_is_pending>
}
   10622:	bd08      	pop	{r3, pc}

00010624 <z_log_vprintk>:
{
   10624:	b500      	push	{lr}
   10626:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   10628:	9103      	str	r1, [sp, #12]
   1062a:	9002      	str	r0, [sp, #8]
   1062c:	2000      	movs	r0, #0
   1062e:	9001      	str	r0, [sp, #4]
   10630:	9000      	str	r0, [sp, #0]
   10632:	4603      	mov	r3, r0
   10634:	4602      	mov	r2, r0
   10636:	4601      	mov	r1, r0
   10638:	f000 f8ce 	bl	107d8 <z_impl_z_log_msg_runtime_vcreate>
}
   1063c:	b005      	add	sp, #20
   1063e:	f85d fb04 	ldr.w	pc, [sp], #4

00010642 <z_log_notify_drop>:
 */
bool z_log_msg_pending(void);

static inline void z_log_notify_drop(const struct mpsc_pbuf_buffer *buffer,
				     const union mpsc_pbuf_generic *item)
{
   10642:	b508      	push	{r3, lr}
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   10644:	2001      	movs	r0, #1
   10646:	f7f3 fef7 	bl	4438 <z_log_dropped>
}
   1064a:	bd08      	pop	{r3, pc}

0001064c <z_log_msg_claim>:
{
   1064c:	b508      	push	{r3, lr}
	return z_log_msg_local_claim();
   1064e:	f7f3 ff7b 	bl	4548 <z_log_msg_local_claim>
}
   10652:	bd08      	pop	{r3, pc}

00010654 <msg_commit>:
{
   10654:	b508      	push	{r3, lr}
	mpsc_pbuf_commit(buffer, &m->buf);
   10656:	f7ff fb85 	bl	fd64 <mpsc_pbuf_commit>
	z_log_msg_post_finalize();
   1065a:	f7f4 f813 	bl	4684 <z_log_msg_post_finalize>
}
   1065e:	bd08      	pop	{r3, pc}

00010660 <z_log_get_tag>:
}
   10660:	2000      	movs	r0, #0
   10662:	4770      	bx	lr

00010664 <max_filter_get>:
{
   10664:	4601      	mov	r1, r0
	for (i = first_slot; i < LOG_FILTERS_NUM_OF_SLOTS; i++) {
   10666:	2201      	movs	r2, #1
	uint32_t max_filter = LOG_LEVEL_NONE;
   10668:	2000      	movs	r0, #0
	for (i = first_slot; i < LOG_FILTERS_NUM_OF_SLOTS; i++) {
   1066a:	e000      	b.n	1066e <max_filter_get+0xa>
   1066c:	3201      	adds	r2, #1
   1066e:	2a09      	cmp	r2, #9
   10670:	d809      	bhi.n	10686 <max_filter_get+0x22>
		uint32_t tmp_filter = LOG_FILTER_SLOT_GET(&filters, i);
   10672:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   10676:	fa21 f303 	lsr.w	r3, r1, r3
   1067a:	f003 0307 	and.w	r3, r3, #7
		if (tmp_filter > max_filter) {
   1067e:	4298      	cmp	r0, r3
   10680:	d2f4      	bcs.n	1066c <max_filter_get+0x8>
			max_filter = tmp_filter;
   10682:	4618      	mov	r0, r3
   10684:	e7f2      	b.n	1066c <max_filter_get+0x8>
}
   10686:	4770      	bx	lr

00010688 <set_runtime_filter>:
{
   10688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1068a:	4607      	mov	r7, r0
   1068c:	4608      	mov	r0, r1
   1068e:	461e      	mov	r6, r3
	uint32_t *filters = get_dynamic_filter(domain_id, source_id);
   10690:	4611      	mov	r1, r2
   10692:	f7f4 f895 	bl	47c0 <get_dynamic_filter>
   10696:	4605      	mov	r5, r0
	prev_max = LOG_FILTER_SLOT_GET(filters, LOG_FILTER_AGGR_SLOT_IDX);
   10698:	6804      	ldr	r4, [r0, #0]
	LOG_FILTER_SLOT_SET(filters, backend_id, level);
   1069a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   1069e:	2307      	movs	r3, #7
   106a0:	40bb      	lsls	r3, r7
   106a2:	ea24 0403 	bic.w	r4, r4, r3
   106a6:	6004      	str	r4, [r0, #0]
   106a8:	f006 0607 	and.w	r6, r6, #7
   106ac:	40be      	lsls	r6, r7
   106ae:	4334      	orrs	r4, r6
   106b0:	6004      	str	r4, [r0, #0]
	new_max = max_filter_get(*filters);
   106b2:	4620      	mov	r0, r4
   106b4:	f7ff ffd6 	bl	10664 <max_filter_get>
	LOG_FILTER_SLOT_SET(filters, LOG_FILTER_AGGR_SLOT_IDX, new_max);
   106b8:	f024 0407 	bic.w	r4, r4, #7
   106bc:	602c      	str	r4, [r5, #0]
   106be:	f000 0007 	and.w	r0, r0, #7
   106c2:	4304      	orrs	r4, r0
   106c4:	602c      	str	r4, [r5, #0]
}
   106c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000106c8 <log_source_id_get>:
{
   106c8:	b538      	push	{r3, r4, r5, lr}
   106ca:	4605      	mov	r5, r0
	for (int i = 0; i < log_src_cnt_get(Z_LOG_LOCAL_DOMAIN_ID); i++) {
   106cc:	2400      	movs	r4, #0
   106ce:	e000      	b.n	106d2 <log_source_id_get+0xa>
   106d0:	3401      	adds	r4, #1
   106d2:	2000      	movs	r0, #0
   106d4:	f7f4 f87a 	bl	47cc <log_src_cnt_get>
   106d8:	42a0      	cmp	r0, r4
   106da:	d90b      	bls.n	106f4 <log_source_id_get+0x2c>
		const char *sname = log_source_name_get(Z_LOG_LOCAL_DOMAIN_ID, i);
   106dc:	4621      	mov	r1, r4
   106de:	2000      	movs	r0, #0
   106e0:	f7f4 f87e 	bl	47e0 <log_source_name_get>
		if ((sname != NULL) && (strcmp(sname, name) == 0)) {
   106e4:	2800      	cmp	r0, #0
   106e6:	d0f3      	beq.n	106d0 <log_source_id_get+0x8>
   106e8:	4629      	mov	r1, r5
   106ea:	f002 fb0b 	bl	12d04 <strcmp>
   106ee:	2800      	cmp	r0, #0
   106f0:	d1ee      	bne.n	106d0 <log_source_id_get+0x8>
   106f2:	e001      	b.n	106f8 <log_source_id_get+0x30>
	return -1;
   106f4:	f04f 34ff 	mov.w	r4, #4294967295
}
   106f8:	4620      	mov	r0, r4
   106fa:	bd38      	pop	{r3, r4, r5, pc}

000106fc <log_filter_get>:
	log_backend_deactivate(backend);
}

uint32_t log_filter_get(struct log_backend const *const backend,
			uint32_t domain_id, int16_t source_id, bool runtime)
{
   106fc:	b510      	push	{r4, lr}
   106fe:	4604      	mov	r4, r0
   10700:	4608      	mov	r0, r1
   10702:	4611      	mov	r1, r2
	__ASSERT_NO_MSG(source_id < log_src_cnt_get(domain_id));

	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) && runtime) {
   10704:	b16b      	cbz	r3, 10722 <log_filter_get+0x26>
		if (source_id < 0) {
   10706:	2a00      	cmp	r2, #0
   10708:	db0f      	blt.n	1072a <log_filter_get+0x2e>
			return LOG_LEVEL_DBG;
		}

		return LOG_FILTER_SLOT_GET(get_dynamic_filter(domain_id, source_id),
   1070a:	b2c0      	uxtb	r0, r0
   1070c:	f7f4 f858 	bl	47c0 <get_dynamic_filter>
   10710:	6800      	ldr	r0, [r0, #0]
	return backend->cb->id;
   10712:	6862      	ldr	r2, [r4, #4]
   10714:	7912      	ldrb	r2, [r2, #4]
   10716:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1071a:	40d0      	lsrs	r0, r2
   1071c:	f000 0007 	and.w	r0, r0, #7
   10720:	e002      	b.n	10728 <log_filter_get+0x2c>
					   log_backend_id_get(backend));
	}

	return log_compiled_level_get(domain_id, source_id);
   10722:	b2c0      	uxtb	r0, r0
   10724:	f7f4 f86a 	bl	47fc <log_compiled_level_get>
}
   10728:	bd10      	pop	{r4, pc}
			return LOG_LEVEL_DBG;
   1072a:	2004      	movs	r0, #4
   1072c:	e7fc      	b.n	10728 <log_filter_get+0x2c>

0001072e <log_filter_set>:
{
   1072e:	b508      	push	{r3, lr}
	return z_impl_log_filter_set(backend, domain_id, source_id, level);
   10730:	f7f4 f896 	bl	4860 <z_impl_log_filter_set>
}
   10734:	bd08      	pop	{r3, pc}

00010736 <backend_filter_set>:
{
   10736:	b570      	push	{r4, r5, r6, lr}
   10738:	4606      	mov	r6, r0
   1073a:	460d      	mov	r5, r1
	for (uint16_t s = 0; s < log_src_cnt_get(0); s++) {
   1073c:	2400      	movs	r4, #0
   1073e:	e007      	b.n	10750 <backend_filter_set+0x1a>
		log_filter_set(backend, 0, s, level);
   10740:	b222      	sxth	r2, r4
	return z_impl_log_filter_set(backend, domain_id, source_id, level);
   10742:	462b      	mov	r3, r5
   10744:	2100      	movs	r1, #0
   10746:	4630      	mov	r0, r6
   10748:	f7f4 f88a 	bl	4860 <z_impl_log_filter_set>
	for (uint16_t s = 0; s < log_src_cnt_get(0); s++) {
   1074c:	3401      	adds	r4, #1
   1074e:	b2a4      	uxth	r4, r4
   10750:	2000      	movs	r0, #0
   10752:	f7f4 f83b 	bl	47cc <log_src_cnt_get>
   10756:	4284      	cmp	r4, r0
   10758:	d3f2      	bcc.n	10740 <backend_filter_set+0xa>
}
   1075a:	bd70      	pop	{r4, r5, r6, pc}

0001075c <log_backend_disable>:
{
   1075c:	b510      	push	{r4, lr}
   1075e:	4604      	mov	r4, r0
	return backend->cb->active;
   10760:	6843      	ldr	r3, [r0, #4]
   10762:	795b      	ldrb	r3, [r3, #5]
	if (log_backend_is_active(backend)) {
   10764:	b91b      	cbnz	r3, 1076e <log_backend_disable+0x12>
	backend->cb->active = false;
   10766:	6863      	ldr	r3, [r4, #4]
   10768:	2200      	movs	r2, #0
   1076a:	715a      	strb	r2, [r3, #5]
}
   1076c:	bd10      	pop	{r4, pc}
		backend_filter_set(backend, LOG_LEVEL_NONE);
   1076e:	2100      	movs	r1, #0
   10770:	f7ff ffe1 	bl	10736 <backend_filter_set>
   10774:	e7f7      	b.n	10766 <log_backend_disable+0xa>

00010776 <z_cbprintf_cpy>:
{
   10776:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   10778:	6853      	ldr	r3, [r2, #4]
   1077a:	6896      	ldr	r6, [r2, #8]
   1077c:	1b9b      	subs	r3, r3, r6
   1077e:	428b      	cmp	r3, r1
   10780:	d30c      	bcc.n	1079c <z_cbprintf_cpy+0x26>
   10782:	460c      	mov	r4, r1
   10784:	4615      	mov	r5, r2
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   10786:	6813      	ldr	r3, [r2, #0]
   10788:	460a      	mov	r2, r1
   1078a:	4601      	mov	r1, r0
   1078c:	1998      	adds	r0, r3, r6
   1078e:	f002 fafc 	bl	12d8a <memcpy>
	desc->off += len;
   10792:	68ab      	ldr	r3, [r5, #8]
   10794:	4423      	add	r3, r4
   10796:	60ab      	str	r3, [r5, #8]
	return len;
   10798:	4620      	mov	r0, r4
}
   1079a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   1079c:	f06f 001b 	mvn.w	r0, #27
   107a0:	e7fb      	b.n	1079a <z_cbprintf_cpy+0x24>

000107a2 <z_log_msg_finalize>:
{
   107a2:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
   107a4:	b188      	cbz	r0, 107ca <z_log_msg_finalize+0x28>
   107a6:	460e      	mov	r6, r1
   107a8:	4614      	mov	r4, r2
   107aa:	4619      	mov	r1, r3
   107ac:	4605      	mov	r5, r0
	if (data) {
   107ae:	b133      	cbz	r3, 107be <z_log_msg_finalize+0x1c>
		uint8_t *d = msg->data + desc.package_len;
   107b0:	3010      	adds	r0, #16
   107b2:	f3c2 234a 	ubfx	r3, r2, #9, #11
		memcpy(d, data, desc.data_len);
   107b6:	0d12      	lsrs	r2, r2, #20
   107b8:	4418      	add	r0, r3
   107ba:	f002 fae6 	bl	12d8a <memcpy>
	msg->hdr.desc = desc;
   107be:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
   107c0:	606e      	str	r6, [r5, #4]
	z_log_msg_commit(msg);
   107c2:	4628      	mov	r0, r5
   107c4:	f7f3 ffa2 	bl	470c <z_log_msg_commit>
}
   107c8:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
   107ca:	f7f3 fe35 	bl	4438 <z_log_dropped>
		return;
   107ce:	e7fb      	b.n	107c8 <z_log_msg_finalize+0x26>

000107d0 <z_log_msg_static_create>:
{
   107d0:	b508      	push	{r3, lr}
	z_impl_z_log_msg_static_create(source, desc, package, data);
   107d2:	f7f4 f8a3 	bl	491c <z_impl_z_log_msg_static_create>
}
   107d6:	bd08      	pop	{r3, pc}

000107d8 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   107d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   107dc:	b085      	sub	sp, #20
   107de:	4681      	mov	r9, r0
   107e0:	460d      	mov	r5, r1
   107e2:	4690      	mov	r8, r2
   107e4:	461e      	mov	r6, r3
   107e6:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   107ea:	9f10      	ldr	r7, [sp, #64]	; 0x40
	int plen;

	if (fmt) {
   107ec:	b3a7      	cbz	r7, 10858 <z_impl_z_log_msg_runtime_vcreate+0x80>
		va_list ap2;

		va_copy(ap2, ap);
   107ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
   107f0:	9303      	str	r3, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
   107f2:	9300      	str	r3, [sp, #0]
   107f4:	463b      	mov	r3, r7
   107f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   107f8:	2110      	movs	r1, #16
   107fa:	2000      	movs	r0, #0
   107fc:	f7f1 fc28 	bl	2050 <cbvprintf_package>
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   10800:	4682      	mov	sl, r0
   10802:	eb00 030b 	add.w	r3, r0, fp
   10806:	3317      	adds	r3, #23
   10808:	f023 0307 	bic.w	r3, r3, #7
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   1080c:	2400      	movs	r4, #0
   1080e:	f36f 0400 	bfc	r4, #0, #1
   10812:	f36f 0441 	bfc	r4, #1, #1
   10816:	f36f 0482 	bfc	r4, #2, #1
   1081a:	f369 04c5 	bfi	r4, r9, #3, #3
   1081e:	f368 1488 	bfi	r4, r8, #6, #3
   10822:	f360 2453 	bfi	r4, r0, #9, #11
   10826:	f36b 541f 	bfi	r4, fp, #20, #12
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   1082a:	0898      	lsrs	r0, r3, #2
   1082c:	f7f3 fe84 	bl	4538 <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   10830:	4680      	mov	r8, r0
   10832:	b140      	cbz	r0, 10846 <z_impl_z_log_msg_runtime_vcreate+0x6e>
   10834:	3010      	adds	r0, #16
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   10836:	b137      	cbz	r7, 10846 <z_impl_z_log_msg_runtime_vcreate+0x6e>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   10838:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1083a:	9300      	str	r3, [sp, #0]
   1083c:	463b      	mov	r3, r7
   1083e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   10840:	4651      	mov	r1, sl
   10842:	f7f1 fc05 	bl	2050 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   10846:	4633      	mov	r3, r6
   10848:	4622      	mov	r2, r4
   1084a:	4629      	mov	r1, r5
   1084c:	4640      	mov	r0, r8
   1084e:	f7ff ffa8 	bl	107a2 <z_log_msg_finalize>
	}
}
   10852:	b005      	add	sp, #20
   10854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
   10858:	2000      	movs	r0, #0
   1085a:	e7d1      	b.n	10800 <z_impl_z_log_msg_runtime_vcreate+0x28>

0001085c <buffer_write>:
{
   1085c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1085e:	4607      	mov	r7, r0
   10860:	460d      	mov	r5, r1
   10862:	4614      	mov	r4, r2
   10864:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   10866:	4632      	mov	r2, r6
   10868:	4621      	mov	r1, r4
   1086a:	4628      	mov	r0, r5
   1086c:	47b8      	blx	r7
		buf += processed;
   1086e:	4405      	add	r5, r0
	} while (len != 0);
   10870:	1a24      	subs	r4, r4, r0
   10872:	d1f8      	bne.n	10866 <buffer_write+0xa>
}
   10874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010876 <cbvprintf>:
{
   10876:	b510      	push	{r4, lr}
   10878:	b082      	sub	sp, #8
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   1087a:	2400      	movs	r4, #0
   1087c:	9400      	str	r4, [sp, #0]
   1087e:	f7f2 fc07 	bl	3090 <z_cbvprintf_impl>
}
   10882:	b002      	add	sp, #8
   10884:	bd10      	pop	{r4, pc}

00010886 <color_prefix>:
{
   10886:	b508      	push	{r3, lr}
   10888:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   1088a:	2201      	movs	r2, #1
   1088c:	f7f4 f952 	bl	4b34 <color_print>
}
   10890:	bd08      	pop	{r3, pc}

00010892 <color_postfix>:
{
   10892:	b508      	push	{r3, lr}
   10894:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   10896:	2200      	movs	r2, #0
   10898:	f7f4 f94c 	bl	4b34 <color_print>
}
   1089c:	bd08      	pop	{r3, pc}

0001089e <postfix_print>:
{
   1089e:	b538      	push	{r3, r4, r5, lr}
   108a0:	4605      	mov	r5, r0
   108a2:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   108a4:	f001 0101 	and.w	r1, r1, #1
   108a8:	f7ff fff3 	bl	10892 <color_postfix>
	newline_print(output, flags);
   108ac:	4621      	mov	r1, r4
   108ae:	4628      	mov	r0, r5
   108b0:	f7f4 f9c6 	bl	4c40 <newline_print>
}
   108b4:	bd38      	pop	{r3, r4, r5, pc}

000108b6 <log_msg_hexdump>:
{
   108b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   108ba:	b083      	sub	sp, #12
   108bc:	4680      	mov	r8, r0
   108be:	460e      	mov	r6, r1
   108c0:	4615      	mov	r5, r2
   108c2:	461f      	mov	r7, r3
   108c4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   108c8:	462c      	mov	r4, r5
   108ca:	2d10      	cmp	r5, #16
   108cc:	bf28      	it	cs
   108ce:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
   108d0:	f8cd 9000 	str.w	r9, [sp]
   108d4:	463b      	mov	r3, r7
   108d6:	4622      	mov	r2, r4
   108d8:	4631      	mov	r1, r6
   108da:	4640      	mov	r0, r8
   108dc:	f7f4 f9c4 	bl	4c68 <hexdump_line_print>
		data += length;
   108e0:	4426      	add	r6, r4
	} while (len);
   108e2:	1b2d      	subs	r5, r5, r4
   108e4:	d1f0      	bne.n	108c8 <log_msg_hexdump+0x12>
}
   108e6:	b003      	add	sp, #12
   108e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000108ec <log_output_flush>:
{
   108ec:	b510      	push	{r4, lr}
   108ee:	4604      	mov	r4, r0
		     output->control_block->offset,
   108f0:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   108f2:	6853      	ldr	r3, [r2, #4]
   108f4:	6812      	ldr	r2, [r2, #0]
   108f6:	6881      	ldr	r1, [r0, #8]
   108f8:	6800      	ldr	r0, [r0, #0]
   108fa:	f7ff ffaf 	bl	1085c <buffer_write>
	output->control_block->offset = 0;
   108fe:	6863      	ldr	r3, [r4, #4]
   10900:	2200      	movs	r2, #0
   10902:	601a      	str	r2, [r3, #0]
}
   10904:	bd10      	pop	{r4, pc}

00010906 <out_func>:
{
   10906:	b538      	push	{r3, r4, r5, lr}
   10908:	4605      	mov	r5, r0
   1090a:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1090c:	684b      	ldr	r3, [r1, #4]
   1090e:	681a      	ldr	r2, [r3, #0]
   10910:	68cb      	ldr	r3, [r1, #12]
   10912:	429a      	cmp	r2, r3
   10914:	d00f      	beq.n	10936 <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
   10916:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   10918:	f3bf 8f5b 	dmb	ish
   1091c:	e853 2f00 	ldrex	r2, [r3]
   10920:	1c51      	adds	r1, r2, #1
   10922:	e843 1000 	strex	r0, r1, [r3]
   10926:	2800      	cmp	r0, #0
   10928:	d1f8      	bne.n	1091c <out_func+0x16>
   1092a:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   1092e:	68a3      	ldr	r3, [r4, #8]
   10930:	549d      	strb	r5, [r3, r2]
}
   10932:	2000      	movs	r0, #0
   10934:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   10936:	4608      	mov	r0, r1
   10938:	f7ff ffd8 	bl	108ec <log_output_flush>
   1093c:	e7eb      	b.n	10916 <out_func+0x10>

0001093e <cr_out_func>:
{
   1093e:	b538      	push	{r3, r4, r5, lr}
   10940:	4604      	mov	r4, r0
   10942:	460d      	mov	r5, r1
	if (c == '\n') {
   10944:	280a      	cmp	r0, #10
   10946:	d005      	beq.n	10954 <cr_out_func+0x16>
	out_func(c, ctx);
   10948:	4629      	mov	r1, r5
   1094a:	4620      	mov	r0, r4
   1094c:	f7ff ffdb 	bl	10906 <out_func>
}
   10950:	2000      	movs	r0, #0
   10952:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
   10954:	200d      	movs	r0, #13
   10956:	f7ff ffd6 	bl	10906 <out_func>
   1095a:	e7f5      	b.n	10948 <cr_out_func+0xa>

0001095c <log_halt>:
   1095c:	684b      	ldr	r3, [r1, #4]
   1095e:	2000      	movs	r0, #0
   10960:	7158      	strb	r0, [r3, #5]
}
   10962:	4770      	bx	lr

00010964 <log_go>:
	log_backend_activate(backend, backend->cb->ctx);
   10964:	684b      	ldr	r3, [r1, #4]
	backend->cb->active = true;
   10966:	2201      	movs	r2, #1
   10968:	715a      	strb	r2, [r3, #5]
}
   1096a:	2000      	movs	r0, #0
   1096c:	4770      	bx	lr

0001096e <cmd_log_self_halt>:
{
   1096e:	b570      	push	{r4, r5, r6, lr}
   10970:	4604      	mov	r4, r0
   10972:	460d      	mov	r5, r1
   10974:	4616      	mov	r6, r2
	if (!shell_state_precheck(sh)) {
   10976:	f7f4 fac7 	bl	4f08 <shell_state_precheck>
   1097a:	b908      	cbnz	r0, 10980 <cmd_log_self_halt+0x12>
		return 0;
   1097c:	2000      	movs	r0, #0
}
   1097e:	bd70      	pop	{r4, r5, r6, pc}
	return log_halt(sh, sh->log_backend->backend, argc, argv);
   10980:	69e1      	ldr	r1, [r4, #28]
   10982:	4633      	mov	r3, r6
   10984:	462a      	mov	r2, r5
   10986:	6809      	ldr	r1, [r1, #0]
   10988:	4620      	mov	r0, r4
   1098a:	f7ff ffe7 	bl	1095c <log_halt>
   1098e:	e7f6      	b.n	1097e <cmd_log_self_halt+0x10>

00010990 <cmd_log_self_go>:
{
   10990:	b570      	push	{r4, r5, r6, lr}
   10992:	4604      	mov	r4, r0
   10994:	460d      	mov	r5, r1
   10996:	4616      	mov	r6, r2
	if (!shell_state_precheck(sh)) {
   10998:	f7f4 fab6 	bl	4f08 <shell_state_precheck>
   1099c:	b908      	cbnz	r0, 109a2 <cmd_log_self_go+0x12>
		return 0;
   1099e:	2000      	movs	r0, #0
}
   109a0:	bd70      	pop	{r4, r5, r6, pc}
	return log_go(sh, sh->log_backend->backend, argc, argv);
   109a2:	69e1      	ldr	r1, [r4, #28]
   109a4:	4633      	mov	r3, r6
   109a6:	462a      	mov	r2, r5
   109a8:	6809      	ldr	r1, [r1, #0]
   109aa:	4620      	mov	r0, r4
   109ac:	f7ff ffda 	bl	10964 <log_go>
   109b0:	e7f6      	b.n	109a0 <cmd_log_self_go+0x10>

000109b2 <cmd_log_self_status>:
{
   109b2:	b570      	push	{r4, r5, r6, lr}
   109b4:	4604      	mov	r4, r0
   109b6:	460d      	mov	r5, r1
   109b8:	4616      	mov	r6, r2
	if (!shell_state_precheck(sh)) {
   109ba:	f7f4 faa5 	bl	4f08 <shell_state_precheck>
   109be:	b908      	cbnz	r0, 109c4 <cmd_log_self_status+0x12>
}
   109c0:	2000      	movs	r0, #0
   109c2:	bd70      	pop	{r4, r5, r6, pc}
	log_status(sh, sh->log_backend->backend, argc, argv);
   109c4:	69e1      	ldr	r1, [r4, #28]
   109c6:	4633      	mov	r3, r6
   109c8:	462a      	mov	r2, r5
   109ca:	6809      	ldr	r1, [r1, #0]
   109cc:	4620      	mov	r0, r4
   109ce:	f7f4 fad1 	bl	4f74 <log_status>
	return 0;
   109d2:	e7f5      	b.n	109c0 <cmd_log_self_status+0xe>

000109d4 <module_id_get>:
{
   109d4:	b570      	push	{r4, r5, r6, lr}
   109d6:	4606      	mov	r6, r0
	uint32_t modules_cnt = log_src_cnt_get(Z_LOG_LOCAL_DOMAIN_ID);
   109d8:	2000      	movs	r0, #0
   109da:	f7f3 fef7 	bl	47cc <log_src_cnt_get>
   109de:	4605      	mov	r5, r0
	for (i = 0U; i < modules_cnt; i++) {
   109e0:	2400      	movs	r4, #0
   109e2:	e000      	b.n	109e6 <module_id_get+0x12>
   109e4:	3401      	adds	r4, #1
   109e6:	42ac      	cmp	r4, r5
   109e8:	d20b      	bcs.n	10a02 <module_id_get+0x2e>
		tmp_name = log_source_name_get(Z_LOG_LOCAL_DOMAIN_ID, i);
   109ea:	4621      	mov	r1, r4
   109ec:	2000      	movs	r0, #0
   109ee:	f7f3 fef7 	bl	47e0 <log_source_name_get>
		if (strncmp(tmp_name, name, 64) == 0) {
   109f2:	2240      	movs	r2, #64	; 0x40
   109f4:	4631      	mov	r1, r6
   109f6:	f002 f990 	bl	12d1a <strncmp>
   109fa:	2800      	cmp	r0, #0
   109fc:	d1f2      	bne.n	109e4 <module_id_get+0x10>
			return i;
   109fe:	4620      	mov	r0, r4
   10a00:	e001      	b.n	10a06 <module_id_get+0x32>
	return -1;
   10a02:	f04f 30ff 	mov.w	r0, #4294967295
}
   10a06:	bd70      	pop	{r4, r5, r6, pc}

00010a08 <cmd_log_self_enable>:
{
   10a08:	b570      	push	{r4, r5, r6, lr}
   10a0a:	4604      	mov	r4, r0
   10a0c:	460d      	mov	r5, r1
   10a0e:	4616      	mov	r6, r2
	if (!shell_state_precheck(sh)) {
   10a10:	f7f4 fa7a 	bl	4f08 <shell_state_precheck>
   10a14:	b908      	cbnz	r0, 10a1a <cmd_log_self_enable+0x12>
		return 0;
   10a16:	2000      	movs	r0, #0
}
   10a18:	bd70      	pop	{r4, r5, r6, pc}
	return log_enable(sh, sh->log_backend->backend, argc, argv);
   10a1a:	69e1      	ldr	r1, [r4, #28]
   10a1c:	4633      	mov	r3, r6
   10a1e:	462a      	mov	r2, r5
   10a20:	6809      	ldr	r1, [r1, #0]
   10a22:	4620      	mov	r0, r4
   10a24:	f7f4 fbc8 	bl	51b8 <log_enable>
   10a28:	e7f6      	b.n	10a18 <cmd_log_self_enable+0x10>

00010a2a <log_disable>:
{
   10a2a:	b510      	push	{r4, lr}
   10a2c:	b082      	sub	sp, #8
	filters_set(sh, backend, argc - 1, &argv[1], LOG_LEVEL_NONE);
   10a2e:	2400      	movs	r4, #0
   10a30:	9400      	str	r4, [sp, #0]
   10a32:	3304      	adds	r3, #4
   10a34:	3a01      	subs	r2, #1
   10a36:	f7f4 fb67 	bl	5108 <filters_set>
}
   10a3a:	4620      	mov	r0, r4
   10a3c:	b002      	add	sp, #8
   10a3e:	bd10      	pop	{r4, pc}

00010a40 <cmd_log_self_disable>:
{
   10a40:	b570      	push	{r4, r5, r6, lr}
   10a42:	4604      	mov	r4, r0
   10a44:	460d      	mov	r5, r1
   10a46:	4616      	mov	r6, r2
	if (!shell_state_precheck(sh)) {
   10a48:	f7f4 fa5e 	bl	4f08 <shell_state_precheck>
   10a4c:	b908      	cbnz	r0, 10a52 <cmd_log_self_disable+0x12>
		return 0;
   10a4e:	2000      	movs	r0, #0
}
   10a50:	bd70      	pop	{r4, r5, r6, pc}
	return log_disable(sh, sh->log_backend->backend, argc, argv);
   10a52:	69e1      	ldr	r1, [r4, #28]
   10a54:	4633      	mov	r3, r6
   10a56:	462a      	mov	r2, r5
   10a58:	6809      	ldr	r1, [r1, #0]
   10a5a:	4620      	mov	r0, r4
   10a5c:	f7ff ffe5 	bl	10a2a <log_disable>
   10a60:	e7f6      	b.n	10a50 <cmd_log_self_disable+0x10>

00010a62 <k_msleep>:
{
   10a62:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   10a64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   10a68:	17c1      	asrs	r1, r0, #31
   10a6a:	03c9      	lsls	r1, r1, #15
   10a6c:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   10a70:	03c0      	lsls	r0, r0, #15
   10a72:	f240 33e7 	movw	r3, #999	; 0x3e7
   10a76:	18c0      	adds	r0, r0, r3
   10a78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10a7c:	f04f 0300 	mov.w	r3, #0
   10a80:	f141 0100 	adc.w	r1, r1, #0
   10a84:	f7ef fb2a 	bl	dc <__aeabi_uldivmod>
   10a88:	f7fd faa0 	bl	dfcc <z_impl_k_sleep>
}
   10a8c:	bd08      	pop	{r3, pc}

00010a8e <atomic_test_and_clear_bit>:
{
   10a8e:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   10a90:	f001 021f 	and.w	r2, r1, #31
   10a94:	2301      	movs	r3, #1
   10a96:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10a98:	0949      	lsrs	r1, r1, #5
   10a9a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   10a9e:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10aa0:	f3bf 8f5b 	dmb	ish
   10aa4:	e850 2f00 	ldrex	r2, [r0]
   10aa8:	ea02 0c01 	and.w	ip, r2, r1
   10aac:	e840 ce00 	strex	lr, ip, [r0]
   10ab0:	f1be 0f00 	cmp.w	lr, #0
   10ab4:	d1f6      	bne.n	10aa4 <atomic_test_and_clear_bit+0x16>
   10ab6:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   10aba:	4213      	tst	r3, r2
}
   10abc:	bf14      	ite	ne
   10abe:	2001      	movne	r0, #1
   10ac0:	2000      	moveq	r0, #0
   10ac2:	f85d fb04 	ldr.w	pc, [sp], #4

00010ac6 <atomic_set_bit>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   10ac6:	f001 021f 	and.w	r2, r1, #31
   10aca:	2301      	movs	r3, #1
   10acc:	4093      	lsls	r3, r2

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10ace:	0949      	lsrs	r1, r1, #5
   10ad0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10ad4:	f3bf 8f5b 	dmb	ish
   10ad8:	e850 2f00 	ldrex	r2, [r0]
   10adc:	431a      	orrs	r2, r3
   10ade:	e840 2100 	strex	r1, r2, [r0]
   10ae2:	2900      	cmp	r1, #0
   10ae4:	d1f8      	bne.n	10ad8 <atomic_set_bit+0x12>
   10ae6:	f3bf 8f5b 	dmb	ish
}
   10aea:	4770      	bx	lr

00010aec <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
   10aec:	2000      	movs	r0, #0
   10aee:	4770      	bx	lr

00010af0 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10af0:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10af2:	f3bf 8f5b 	dmb	ish
   10af6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   10afa:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   10afe:	f001 011f 	and.w	r1, r1, #31
   10b02:	4108      	asrs	r0, r1
}
   10b04:	f000 0001 	and.w	r0, r0, #1
   10b08:	4770      	bx	lr

00010b0a <pm_device_state_get>:
}

int pm_device_state_get(const struct device *dev,
			enum pm_device_state *state)
{
	struct pm_device *pm = dev->pm;
   10b0a:	6983      	ldr	r3, [r0, #24]

	if (pm == NULL) {
   10b0c:	b11b      	cbz	r3, 10b16 <pm_device_state_get+0xc>
		return -ENOSYS;
	}

	*state = pm->state;
   10b0e:	7a1b      	ldrb	r3, [r3, #8]
   10b10:	700b      	strb	r3, [r1, #0]

	return 0;
   10b12:	2000      	movs	r0, #0
   10b14:	4770      	bx	lr
		return -ENOSYS;
   10b16:	f06f 0057 	mvn.w	r0, #87	; 0x57
}
   10b1a:	4770      	bx	lr

00010b1c <pm_device_is_busy>:
	return false;
}

bool pm_device_is_busy(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   10b1c:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
   10b1e:	b128      	cbz	r0, 10b2c <pm_device_is_busy+0x10>
{
   10b20:	b508      	push	{r3, lr}
		return false;
	}

	return atomic_test_bit(&pm->flags, PM_DEVICE_FLAG_BUSY);
   10b22:	2100      	movs	r1, #0
   10b24:	3004      	adds	r0, #4
   10b26:	f7ff ffe3 	bl	10af0 <atomic_test_bit>
}
   10b2a:	bd08      	pop	{r3, pc}
		return false;
   10b2c:	2000      	movs	r0, #0
}
   10b2e:	4770      	bx	lr

00010b30 <pm_device_busy_set>:

void pm_device_busy_set(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   10b30:	6983      	ldr	r3, [r0, #24]

	if (pm == NULL) {
   10b32:	b163      	cbz	r3, 10b4e <pm_device_busy_set+0x1e>
		return;
	}

	atomic_set_bit(&pm->flags, PM_DEVICE_FLAG_BUSY);
   10b34:	3304      	adds	r3, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10b36:	f3bf 8f5b 	dmb	ish
   10b3a:	e853 1f00 	ldrex	r1, [r3]
   10b3e:	f041 0101 	orr.w	r1, r1, #1
   10b42:	e843 1200 	strex	r2, r1, [r3]
   10b46:	2a00      	cmp	r2, #0
   10b48:	d1f7      	bne.n	10b3a <pm_device_busy_set+0xa>
   10b4a:	f3bf 8f5b 	dmb	ish
}
   10b4e:	4770      	bx	lr

00010b50 <pm_device_busy_clear>:

void pm_device_busy_clear(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   10b50:	6983      	ldr	r3, [r0, #24]

	if (pm == NULL) {
   10b52:	b163      	cbz	r3, 10b6e <pm_device_busy_clear+0x1e>
		return;
	}

	atomic_clear_bit(&pm->flags, PM_DEVICE_FLAG_BUSY);
   10b54:	3304      	adds	r3, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10b56:	f3bf 8f5b 	dmb	ish
   10b5a:	e853 1f00 	ldrex	r1, [r3]
   10b5e:	f021 0101 	bic.w	r1, r1, #1
   10b62:	e843 1200 	strex	r2, r1, [r3]
   10b66:	2a00      	cmp	r2, #0
   10b68:	d1f7      	bne.n	10b5a <pm_device_busy_clear+0xa>
   10b6a:	f3bf 8f5b 	dmb	ish
}
   10b6e:	4770      	bx	lr

00010b70 <pm_device_wakeup_is_enabled>:
	return atomic_cas(&pm->flags, flags, new_flags);
}

bool pm_device_wakeup_is_enabled(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   10b70:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
   10b72:	b128      	cbz	r0, 10b80 <pm_device_wakeup_is_enabled+0x10>
{
   10b74:	b508      	push	{r3, lr}
		return false;
	}

	return atomic_test_bit(&pm->flags,
   10b76:	2104      	movs	r1, #4
   10b78:	4408      	add	r0, r1
   10b7a:	f7ff ffb9 	bl	10af0 <atomic_test_bit>
			       PM_DEVICE_FLAG_WS_ENABLED);
}
   10b7e:	bd08      	pop	{r3, pc}
		return false;
   10b80:	2000      	movs	r0, #0
}
   10b82:	4770      	bx	lr

00010b84 <pm_device_state_is_locked>:
	}
}

bool pm_device_state_is_locked(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   10b84:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
   10b86:	b128      	cbz	r0, 10b94 <pm_device_state_is_locked+0x10>
{
   10b88:	b508      	push	{r3, lr}
		return false;
	}

	return atomic_test_bit(&pm->flags,
   10b8a:	2106      	movs	r1, #6
   10b8c:	3004      	adds	r0, #4
   10b8e:	f7ff ffaf 	bl	10af0 <atomic_test_bit>
			       PM_DEVICE_FLAG_STATE_LOCKED);
}
   10b92:	bd08      	pop	{r3, pc}
		return false;
   10b94:	2000      	movs	r0, #0
}
   10b96:	4770      	bx	lr

00010b98 <k_msleep>:
{
   10b98:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   10b9a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   10b9e:	17c1      	asrs	r1, r0, #31
   10ba0:	03c9      	lsls	r1, r1, #15
   10ba2:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   10ba6:	03c0      	lsls	r0, r0, #15
   10ba8:	f240 33e7 	movw	r3, #999	; 0x3e7
   10bac:	18c0      	adds	r0, r0, r3
   10bae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10bb2:	f04f 0300 	mov.w	r3, #0
   10bb6:	f141 0100 	adc.w	r1, r1, #0
   10bba:	f7ef fa8f 	bl	dc <__aeabi_uldivmod>
   10bbe:	f7fd fa05 	bl	dfcc <z_impl_k_sleep>
}
   10bc2:	bd08      	pop	{r3, pc}

00010bc4 <k_uptime_get_32>:
{
   10bc4:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   10bc6:	f004 f802 	bl	14bce <z_impl_k_uptime_ticks>
	return k_ticks_to_ms_floor64(k_uptime_ticks());
   10bca:	4602      	mov	r2, r0
   10bcc:	014b      	lsls	r3, r1, #5
   10bce:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   10bd2:	0140      	lsls	r0, r0, #5
   10bd4:	1a80      	subs	r0, r0, r2
   10bd6:	eb63 0301 	sbc.w	r3, r3, r1
   10bda:	009b      	lsls	r3, r3, #2
   10bdc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
   10be0:	0080      	lsls	r0, r0, #2
   10be2:	1880      	adds	r0, r0, r2
   10be4:	eb43 0301 	adc.w	r3, r3, r1
   10be8:	00db      	lsls	r3, r3, #3
   10bea:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
   10bee:	f3c0 3010 	ubfx	r0, r0, #12, #17
}
   10bf2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   10bf6:	bd08      	pop	{r3, pc}

00010bf8 <cmd_kernel_reboot_warm>:
#endif

#if defined(CONFIG_REBOOT)
static int cmd_kernel_reboot_warm(const struct shell *sh,
				  size_t argc, char **argv)
{
   10bf8:	b508      	push	{r3, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
#if (CONFIG_KERNEL_SHELL_REBOOT_DELAY > 0)
	k_sleep(K_MSEC(CONFIG_KERNEL_SHELL_REBOOT_DELAY));
#endif
	sys_reboot(SYS_REBOOT_WARM);
   10bfa:	2000      	movs	r0, #0
   10bfc:	f7f2 fda0 	bl	3740 <sys_reboot>

00010c00 <cmd_kernel_reboot_cold>:
	return 0;
}

static int cmd_kernel_reboot_cold(const struct shell *sh,
				  size_t argc, char **argv)
{
   10c00:	b508      	push	{r3, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
#if (CONFIG_KERNEL_SHELL_REBOOT_DELAY > 0)
	k_sleep(K_MSEC(CONFIG_KERNEL_SHELL_REBOOT_DELAY));
#endif
	sys_reboot(SYS_REBOOT_COLD);
   10c02:	2001      	movs	r0, #1
   10c04:	f7f2 fd9c 	bl	3740 <sys_reboot>

00010c08 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
   10c08:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   10c0a:	f013 0f04 	tst.w	r3, #4
   10c0e:	d001      	beq.n	10c14 <log_msg_generic_get_wlen+0xc>
	return 0;
   10c10:	2000      	movs	r0, #0
}
   10c12:	4770      	bx	lr
		return log_msg_get_total_wlen(msg->hdr.desc);
   10c14:	6803      	ldr	r3, [r0, #0]
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   10c16:	f3c3 204a 	ubfx	r0, r3, #9, #11
   10c1a:	eb00 5013 	add.w	r0, r0, r3, lsr #20
   10c1e:	3017      	adds	r0, #23
   10c20:	f020 0007 	bic.w	r0, r0, #7
   10c24:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   10c26:	4770      	bx	lr

00010c28 <uart_irq_callback_user_data_set>:
 * @retval -ENOTSUP If API is not enabled.
 */
static inline int uart_irq_callback_user_data_set(const struct device *dev,
						  uart_irq_callback_user_data_t cb,
						  void *user_data)
{
   10c28:	b508      	push	{r3, lr}
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   10c2a:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   10c2c:	b123      	cbz	r3, 10c38 <uart_irq_callback_user_data_set+0x10>
   10c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   10c30:	b12b      	cbz	r3, 10c3e <uart_irq_callback_user_data_set+0x16>
		api->irq_callback_set(dev, cb, user_data);
   10c32:	4798      	blx	r3
		return 0;
   10c34:	2000      	movs	r0, #0
	ARG_UNUSED(dev);
	ARG_UNUSED(cb);
	ARG_UNUSED(user_data);
	return -ENOTSUP;
#endif
}
   10c36:	bd08      	pop	{r3, pc}
		return -ENOSYS;
   10c38:	f06f 0057 	mvn.w	r0, #87	; 0x57
   10c3c:	e7fb      	b.n	10c36 <uart_irq_callback_user_data_set+0xe>
   10c3e:	f06f 0057 	mvn.w	r0, #87	; 0x57
   10c42:	e7f8      	b.n	10c36 <uart_irq_callback_user_data_set+0xe>

00010c44 <uart_irq_tx_enable>:

extern void z_impl_uart_irq_tx_enable(const struct device * dev);

__pinned_func
static inline void uart_irq_tx_enable(const struct device * dev)
{
   10c44:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
   10c46:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_enable != NULL) {
   10c48:	69db      	ldr	r3, [r3, #28]
   10c4a:	b103      	cbz	r3, 10c4e <uart_irq_tx_enable+0xa>
		api->irq_tx_enable(dev);
   10c4c:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_enable(dev);
}
   10c4e:	bd08      	pop	{r3, pc}

00010c50 <uart_irq_tx_disable>:

extern void z_impl_uart_irq_tx_disable(const struct device * dev);

__pinned_func
static inline void uart_irq_tx_disable(const struct device * dev)
{
   10c50:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
   10c52:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_disable != NULL) {
   10c54:	6a1b      	ldr	r3, [r3, #32]
   10c56:	b103      	cbz	r3, 10c5a <uart_irq_tx_disable+0xa>
		api->irq_tx_disable(dev);
   10c58:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
}
   10c5a:	bd08      	pop	{r3, pc}

00010c5c <uart_irq_rx_enable>:

extern void z_impl_uart_irq_rx_enable(const struct device * dev);

__pinned_func
static inline void uart_irq_rx_enable(const struct device * dev)
{
   10c5c:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
   10c5e:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_enable != NULL) {
   10c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10c62:	b103      	cbz	r3, 10c66 <uart_irq_rx_enable+0xa>
		api->irq_rx_enable(dev);
   10c64:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
}
   10c66:	bd08      	pop	{r3, pc}

00010c68 <uart_irq_rx_disable>:

extern void z_impl_uart_irq_rx_disable(const struct device * dev);

__pinned_func
static inline void uart_irq_rx_disable(const struct device * dev)
{
   10c68:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
   10c6a:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_disable != NULL) {
   10c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   10c6e:	b103      	cbz	r3, 10c72 <uart_irq_rx_disable+0xa>
		api->irq_rx_disable(dev);
   10c70:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_disable(dev);
}
   10c72:	bd08      	pop	{r3, pc}

00010c74 <uart_irq_update>:

extern int z_impl_uart_irq_update(const struct device * dev);

__pinned_func
static inline int uart_irq_update(const struct device * dev)
{
   10c74:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
   10c76:	6883      	ldr	r3, [r0, #8]
	if (api->irq_update == NULL) {
   10c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   10c7a:	b10b      	cbz	r3, 10c80 <uart_irq_update+0xc>
	return api->irq_update(dev);
   10c7c:	4798      	blx	r3
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_UART_IRQ_UPDATE);
	}
#endif
	compiler_barrier();
	return z_impl_uart_irq_update(dev);
}
   10c7e:	bd08      	pop	{r3, pc}
		return -ENOSYS;
   10c80:	f06f 0057 	mvn.w	r0, #87	; 0x57
	return z_impl_uart_irq_update(dev);
   10c84:	e7fb      	b.n	10c7e <uart_irq_update+0xa>

00010c86 <uart_dtr_check>:
}
   10c86:	2001      	movs	r0, #1
   10c88:	4770      	bx	lr

00010c8a <init>:
{
   10c8a:	b508      	push	{r3, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
   10c8c:	6840      	ldr	r0, [r0, #4]
	sh_uart->ctrl_blk->dev = (const struct device *)config;
   10c8e:	f8d0 c000 	ldr.w	ip, [r0]
   10c92:	f8cc 1000 	str.w	r1, [ip]
	sh_uart->ctrl_blk->handler = evt_handler;
   10c96:	6801      	ldr	r1, [r0, #0]
   10c98:	604a      	str	r2, [r1, #4]
	sh_uart->ctrl_blk->context = context;
   10c9a:	6802      	ldr	r2, [r0, #0]
   10c9c:	6093      	str	r3, [r2, #8]
		uart_irq_init(sh_uart);
   10c9e:	f7f5 fbbb 	bl	6418 <uart_irq_init>
}
   10ca2:	2000      	movs	r0, #0
   10ca4:	bd08      	pop	{r3, pc}

00010ca6 <enable>:
{
   10ca6:	b508      	push	{r3, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
   10ca8:	6843      	ldr	r3, [r0, #4]
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
   10caa:	681a      	ldr	r2, [r3, #0]
   10cac:	7411      	strb	r1, [r2, #16]
	if (blocking_tx) {
   10cae:	b909      	cbnz	r1, 10cb4 <enable+0xe>
}
   10cb0:	2000      	movs	r0, #0
   10cb2:	bd08      	pop	{r3, pc}
		uart_irq_tx_disable(sh_uart->ctrl_blk->dev);
   10cb4:	681b      	ldr	r3, [r3, #0]
   10cb6:	6818      	ldr	r0, [r3, #0]
   10cb8:	f7ff ffca 	bl	10c50 <uart_irq_tx_disable>
   10cbc:	e7f8      	b.n	10cb0 <enable+0xa>

00010cbe <read>:
{
   10cbe:	b510      	push	{r4, lr}
   10cc0:	461c      	mov	r4, r3
	struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
   10cc2:	6843      	ldr	r3, [r0, #4]
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
   10cc4:	6918      	ldr	r0, [r3, #16]
   10cc6:	f7fe fe18 	bl	f8fa <ring_buf_get>
   10cca:	6020      	str	r0, [r4, #0]
}
   10ccc:	2000      	movs	r0, #0
   10cce:	bd10      	pop	{r4, pc}

00010cd0 <irq_write>:
{
   10cd0:	b538      	push	{r3, r4, r5, lr}
   10cd2:	4604      	mov	r4, r0
   10cd4:	461d      	mov	r5, r3
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
   10cd6:	68c0      	ldr	r0, [r0, #12]
   10cd8:	f7fe fdb4 	bl	f844 <ring_buf_put>
   10cdc:	6028      	str	r0, [r5, #0]
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
   10cde:	6823      	ldr	r3, [r4, #0]
   10ce0:	330c      	adds	r3, #12
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10ce2:	2101      	movs	r1, #1
   10ce4:	f3bf 8f5b 	dmb	ish
   10ce8:	e853 2f00 	ldrex	r2, [r3]
   10cec:	e843 1000 	strex	r0, r1, [r3]
   10cf0:	2800      	cmp	r0, #0
   10cf2:	d1f9      	bne.n	10ce8 <irq_write+0x18>
   10cf4:	f3bf 8f5b 	dmb	ish
   10cf8:	b102      	cbz	r2, 10cfc <irq_write+0x2c>
}
   10cfa:	bd38      	pop	{r3, r4, r5, pc}
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
   10cfc:	6823      	ldr	r3, [r4, #0]
   10cfe:	6818      	ldr	r0, [r3, #0]
   10d00:	f7ff ffa0 	bl	10c44 <uart_irq_tx_enable>
}
   10d04:	e7f9      	b.n	10cfa <irq_write+0x2a>

00010d06 <write>:
{
   10d06:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10d0a:	460f      	mov	r7, r1
   10d0c:	4616      	mov	r6, r2
   10d0e:	4699      	mov	r9, r3
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
   10d10:	f8d0 8004 	ldr.w	r8, [r0, #4]
		!sh_uart->ctrl_blk->blocking_tx) {
   10d14:	f8d8 3000 	ldr.w	r3, [r8]
   10d18:	7c1b      	ldrb	r3, [r3, #16]
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
   10d1a:	b10b      	cbz	r3, 10d20 <write+0x1a>
		for (size_t i = 0; i < length; i++) {
   10d1c:	2400      	movs	r4, #0
   10d1e:	e00c      	b.n	10d3a <write+0x34>
		irq_write(sh_uart, data, length, cnt);
   10d20:	464b      	mov	r3, r9
   10d22:	4640      	mov	r0, r8
   10d24:	f7ff ffd4 	bl	10cd0 <irq_write>
   10d28:	e011      	b.n	10d4e <write+0x48>
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
   10d2a:	f8d8 3000 	ldr.w	r3, [r8]
   10d2e:	6818      	ldr	r0, [r3, #0]
   10d30:	5d39      	ldrb	r1, [r7, r4]
	const struct uart_driver_api *api =
   10d32:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   10d34:	685d      	ldr	r5, [r3, #4]
   10d36:	47a8      	blx	r5
		for (size_t i = 0; i < length; i++) {
   10d38:	3401      	adds	r4, #1
   10d3a:	42b4      	cmp	r4, r6
   10d3c:	d3f5      	bcc.n	10d2a <write+0x24>
		*cnt = length;
   10d3e:	f8c9 6000 	str.w	r6, [r9]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   10d42:	f8d8 3000 	ldr.w	r3, [r8]
   10d46:	685a      	ldr	r2, [r3, #4]
   10d48:	6899      	ldr	r1, [r3, #8]
   10d4a:	2001      	movs	r0, #1
   10d4c:	4790      	blx	r2
}
   10d4e:	2000      	movs	r0, #0
   10d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00010d54 <uninit>:
{
   10d54:	b510      	push	{r4, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
   10d56:	6843      	ldr	r3, [r0, #4]
		const struct device *dev = sh_uart->ctrl_blk->dev;
   10d58:	681a      	ldr	r2, [r3, #0]
   10d5a:	6814      	ldr	r4, [r2, #0]
		k_timer_stop(sh_uart->dtr_timer);
   10d5c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_timer_stop(timer);
   10d5e:	f003 ff58 	bl	14c12 <z_impl_k_timer_stop>
		uart_irq_tx_disable(dev);
   10d62:	4620      	mov	r0, r4
   10d64:	f7ff ff74 	bl	10c50 <uart_irq_tx_disable>
		uart_irq_rx_disable(dev);
   10d68:	4620      	mov	r0, r4
   10d6a:	f7ff ff7d 	bl	10c68 <uart_irq_rx_disable>
}
   10d6e:	2000      	movs	r0, #0
   10d70:	bd10      	pop	{r4, pc}

00010d72 <uart_tx_handle>:
{
   10d72:	b530      	push	{r4, r5, lr}
   10d74:	b085      	sub	sp, #20
   10d76:	4605      	mov	r5, r0
   10d78:	460c      	mov	r4, r1
	if (!uart_dtr_check(dev)) {
   10d7a:	f7ff ff84 	bl	10c86 <uart_dtr_check>
   10d7e:	b1b8      	cbz	r0, 10db0 <uart_tx_handle+0x3e>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (uint8_t **)&data,
   10d80:	68e0      	ldr	r0, [r4, #12]
   10d82:	69c2      	ldr	r2, [r0, #28]
   10d84:	a903      	add	r1, sp, #12
   10d86:	f7fe fd7d 	bl	f884 <ring_buf_get_claim>
	if (len) {
   10d8a:	4602      	mov	r2, r0
   10d8c:	b1f8      	cbz	r0, 10dce <uart_tx_handle+0x5c>
		len = uart_fifo_fill(dev, data, len);
   10d8e:	9903      	ldr	r1, [sp, #12]
	const struct uart_driver_api *api =
   10d90:	68ab      	ldr	r3, [r5, #8]
	if (api->fifo_fill == NULL) {
   10d92:	695b      	ldr	r3, [r3, #20]
   10d94:	b1c3      	cbz	r3, 10dc8 <uart_tx_handle+0x56>
	return api->fifo_fill(dev, tx_data, size);
   10d96:	4628      	mov	r0, r5
   10d98:	4798      	blx	r3
   10d9a:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
   10d9c:	68e0      	ldr	r0, [r4, #12]
   10d9e:	f7fe fd8e 	bl	f8be <ring_buf_get_finish>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   10da2:	6823      	ldr	r3, [r4, #0]
   10da4:	685a      	ldr	r2, [r3, #4]
   10da6:	6899      	ldr	r1, [r3, #8]
   10da8:	2001      	movs	r0, #1
   10daa:	4790      	blx	r2
}
   10dac:	b005      	add	sp, #20
   10dae:	bd30      	pop	{r4, r5, pc}
		uart_irq_tx_disable(dev);
   10db0:	4628      	mov	r0, r5
   10db2:	f7ff ff4d 	bl	10c50 <uart_irq_tx_disable>
		k_timer_start(sh_uart->dtr_timer, K_MSEC(100), K_MSEC(100));
   10db6:	68a0      	ldr	r0, [r4, #8]
   10db8:	f640 42cd 	movw	r2, #3277	; 0xccd
   10dbc:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
   10dbe:	e9cd 2300 	strd	r2, r3, [sp]
   10dc2:	f7fd fb3f 	bl	e444 <z_impl_k_timer_start>
		return;
   10dc6:	e7f1      	b.n	10dac <uart_tx_handle+0x3a>
		return -ENOSYS;
   10dc8:	f06f 0157 	mvn.w	r1, #87	; 0x57
   10dcc:	e7e6      	b.n	10d9c <uart_tx_handle+0x2a>
		uart_irq_tx_disable(dev);
   10dce:	4628      	mov	r0, r5
   10dd0:	f7ff ff3e 	bl	10c50 <uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
   10dd4:	6823      	ldr	r3, [r4, #0]
   10dd6:	2200      	movs	r2, #0
   10dd8:	60da      	str	r2, [r3, #12]
   10dda:	e7e2      	b.n	10da2 <uart_tx_handle+0x30>

00010ddc <uart_callback>:
{
   10ddc:	b538      	push	{r3, r4, r5, lr}
   10dde:	4604      	mov	r4, r0
   10de0:	460d      	mov	r5, r1
	uart_irq_update(dev);
   10de2:	f7ff ff47 	bl	10c74 <uart_irq_update>
	const struct uart_driver_api *api =
   10de6:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_rx_ready == NULL) {
   10de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   10dea:	b113      	cbz	r3, 10df2 <uart_callback+0x16>
	return api->irq_rx_ready(dev);
   10dec:	4620      	mov	r0, r4
   10dee:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
   10df0:	b118      	cbz	r0, 10dfa <uart_callback+0x1e>
		uart_rx_handle(dev, sh_uart);
   10df2:	4629      	mov	r1, r5
   10df4:	4620      	mov	r0, r4
   10df6:	f7f5 fb2f 	bl	6458 <uart_rx_handle>
	const struct uart_driver_api *api =
   10dfa:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_tx_ready == NULL) {
   10dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10dfe:	b113      	cbz	r3, 10e06 <uart_callback+0x2a>
	return api->irq_tx_ready(dev);
   10e00:	4620      	mov	r0, r4
   10e02:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
   10e04:	b118      	cbz	r0, 10e0e <uart_callback+0x32>
		uart_tx_handle(dev, sh_uart);
   10e06:	4629      	mov	r1, r5
   10e08:	4620      	mov	r0, r4
   10e0a:	f7ff ffb2 	bl	10d72 <uart_tx_handle>
}
   10e0e:	bd38      	pop	{r3, r4, r5, pc}

00010e10 <cmd_buffer_clear>:
	sh->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
   10e10:	6882      	ldr	r2, [r0, #8]
   10e12:	2300      	movs	r3, #0
   10e14:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
	sh->ctx->cmd_buff_pos = 0;
   10e18:	6882      	ldr	r2, [r0, #8]
   10e1a:	87d3      	strh	r3, [r2, #62]	; 0x3e
	sh->ctx->cmd_buff_len = 0;
   10e1c:	6882      	ldr	r2, [r0, #8]
   10e1e:	8793      	strh	r3, [r2, #60]	; 0x3c
}
   10e20:	4770      	bx	lr

00010e22 <str_common>:
{
   10e22:	4603      	mov	r3, r0
	size_t common = 0;
   10e24:	2000      	movs	r0, #0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   10e26:	b172      	cbz	r2, 10e46 <str_common+0x24>
{
   10e28:	b410      	push	{r4}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   10e2a:	781c      	ldrb	r4, [r3, #0]
   10e2c:	f891 c000 	ldrb.w	ip, [r1]
   10e30:	4564      	cmp	r4, ip
   10e32:	d106      	bne.n	10e42 <str_common+0x20>
   10e34:	b12c      	cbz	r4, 10e42 <str_common+0x20>
		s1++;
   10e36:	3301      	adds	r3, #1
		s2++;
   10e38:	3101      	adds	r1, #1
		n--;
   10e3a:	3a01      	subs	r2, #1
		common++;
   10e3c:	3001      	adds	r0, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   10e3e:	2a00      	cmp	r2, #0
   10e40:	d1f3      	bne.n	10e2a <str_common+0x8>
}
   10e42:	bc10      	pop	{r4}
   10e44:	4770      	bx	lr
   10e46:	4770      	bx	lr

00010e48 <active_cmd_prepare>:
{
   10e48:	b530      	push	{r4, r5, lr}
   10e4a:	4684      	mov	ip, r0
   10e4c:	4615      	mov	r5, r2
	if (entry->handler) {
   10e4e:	68c0      	ldr	r0, [r0, #12]
   10e50:	b168      	cbz	r0, 10e6e <active_cmd_prepare+0x26>
		*handler_lvl = *lvl;
   10e52:	681a      	ldr	r2, [r3, #0]
   10e54:	9b03      	ldr	r3, [sp, #12]
   10e56:	601a      	str	r2, [r3, #0]
		*active_cmd = *entry;
   10e58:	468e      	mov	lr, r1
   10e5a:	4664      	mov	r4, ip
   10e5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   10e5e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   10e62:	6823      	ldr	r3, [r4, #0]
   10e64:	f8ce 3000 	str.w	r3, [lr]
		if ((entry->subcmd == NULL)
   10e68:	f8dc 3008 	ldr.w	r3, [ip, #8]
   10e6c:	b163      	cbz	r3, 10e88 <active_cmd_prepare+0x40>
	if (entry->help) {
   10e6e:	f8dc 3004 	ldr.w	r3, [ip, #4]
   10e72:	b143      	cbz	r3, 10e86 <active_cmd_prepare+0x3e>
		*help_entry = *entry;
   10e74:	46ae      	mov	lr, r5
   10e76:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   10e7a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   10e7e:	f8dc 3000 	ldr.w	r3, [ip]
   10e82:	f8ce 3000 	str.w	r3, [lr]
}
   10e86:	bd30      	pop	{r4, r5, pc}
		    && entry->args.optional == SHELL_OPT_ARG_RAW) {
   10e88:	f89c 3011 	ldrb.w	r3, [ip, #17]
   10e8c:	2bfe      	cmp	r3, #254	; 0xfe
   10e8e:	d1ee      	bne.n	10e6e <active_cmd_prepare+0x26>
			*args_left = entry->args.mandatory - 1;
   10e90:	f89c 3010 	ldrb.w	r3, [ip, #16]
   10e94:	3b01      	subs	r3, #1
   10e96:	9a04      	ldr	r2, [sp, #16]
   10e98:	6013      	str	r3, [r2, #0]
   10e9a:	e7e8      	b.n	10e6e <active_cmd_prepare+0x26>

00010e9c <process_nl>:
	if ((data != '\r') && (data != '\n')) {
   10e9c:	290d      	cmp	r1, #13
   10e9e:	d00a      	beq.n	10eb6 <process_nl+0x1a>
   10ea0:	290a      	cmp	r1, #10
   10ea2:	d008      	beq.n	10eb6 <process_nl+0x1a>
	sh->ctx->ctx.flags.last_nl = val;
   10ea4:	6883      	ldr	r3, [r0, #8]
   10ea6:	f8b3 2264 	ldrh.w	r2, [r3, #612]	; 0x264
   10eaa:	f36f 02ca 	bfc	r2, #3, #8
   10eae:	f8a3 2264 	strh.w	r2, [r3, #612]	; 0x264
		return false;
   10eb2:	2000      	movs	r0, #0
   10eb4:	4770      	bx	lr
	return sh->ctx->ctx.flags.last_nl;
   10eb6:	6882      	ldr	r2, [r0, #8]
   10eb8:	f8d2 3264 	ldr.w	r3, [r2, #612]	; 0x264
   10ebc:	f3c3 03c7 	ubfx	r3, r3, #3, #8
	if ((z_flag_last_nl_get(sh) == 0U) ||
   10ec0:	b13b      	cbz	r3, 10ed2 <process_nl+0x36>
   10ec2:	f8d2 3264 	ldr.w	r3, [r2, #612]	; 0x264
   10ec6:	f3c3 03c7 	ubfx	r3, r3, #3, #8
   10eca:	4299      	cmp	r1, r3
   10ecc:	d001      	beq.n	10ed2 <process_nl+0x36>
	return false;
   10ece:	2000      	movs	r0, #0
}
   10ed0:	4770      	bx	lr
	sh->ctx->ctx.flags.last_nl = val;
   10ed2:	f8b2 3264 	ldrh.w	r3, [r2, #612]	; 0x264
   10ed6:	f361 03ca 	bfi	r3, r1, #3, #8
   10eda:	f8a2 3264 	strh.w	r3, [r2, #612]	; 0x264
		return true;
   10ede:	2001      	movs	r0, #1
   10ee0:	4770      	bx	lr

00010ee2 <shell_log_process>:
{
   10ee2:	b570      	push	{r4, r5, r6, lr}
   10ee4:	b082      	sub	sp, #8
   10ee6:	4604      	mov	r4, r0
	int signaled = 0;
   10ee8:	2300      	movs	r3, #0
   10eea:	9301      	str	r3, [sp, #4]
   10eec:	e007      	b.n	10efe <shell_log_process+0x1c>
	z_impl_k_poll_signal_check(sig, signaled, result);
   10eee:	466a      	mov	r2, sp
   10ef0:	a901      	add	r1, sp, #4
   10ef2:	4630      	mov	r0, r6
   10ef4:	f004 f853 	bl	14f9e <z_impl_k_poll_signal_check>
	} while (processed && !signaled);
   10ef8:	b1c5      	cbz	r5, 10f2c <shell_log_process+0x4a>
   10efa:	9b01      	ldr	r3, [sp, #4]
   10efc:	b9b3      	cbnz	r3, 10f2c <shell_log_process+0x4a>
			z_shell_cmd_line_erase(sh);
   10efe:	4620      	mov	r0, r4
   10f00:	f000 ffa0 	bl	11e44 <z_shell_cmd_line_erase>
			processed = z_shell_log_backend_process(
   10f04:	69e0      	ldr	r0, [r4, #28]
   10f06:	f001 fa2e 	bl	12366 <z_shell_log_backend_process>
   10f0a:	4605      	mov	r5, r0
			&sh->ctx->signals[SHELL_SIGNAL_RXRDY];
   10f0c:	68a6      	ldr	r6, [r4, #8]
		struct k_poll_signal *signal =
   10f0e:	f506 761a 	add.w	r6, r6, #616	; 0x268
		z_shell_print_prompt_and_cmd(sh);
   10f12:	4620      	mov	r0, r4
   10f14:	f001 f896 	bl	12044 <z_shell_print_prompt_and_cmd>
		if (sh->ctx->cmd_buff_len) {
   10f18:	68a3      	ldr	r3, [r4, #8]
   10f1a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   10f1c:	2b00      	cmp	r3, #0
   10f1e:	d0e6      	beq.n	10eee <shell_log_process+0xc>
	return z_impl_k_sleep(timeout);
   10f20:	f44f 70f6 	mov.w	r0, #492	; 0x1ec
   10f24:	2100      	movs	r1, #0
   10f26:	f7fd f851 	bl	dfcc <z_impl_k_sleep>
   10f2a:	e7e0      	b.n	10eee <shell_log_process+0xc>
}
   10f2c:	b002      	add	sp, #8
   10f2e:	bd70      	pop	{r4, r5, r6, pc}

00010f30 <history_purge>:
{
   10f30:	b508      	push	{r3, lr}
	z_shell_history_purge(sh->history);
   10f32:	68c0      	ldr	r0, [r0, #12]
   10f34:	f001 fbdc 	bl	126f0 <z_shell_history_purge>
}
   10f38:	bd08      	pop	{r3, pc}

00010f3a <instance_uninit>:
{
   10f3a:	b538      	push	{r3, r4, r5, lr}
	return sh->ctx->ctx.flags.processing == 1;
   10f3c:	6883      	ldr	r3, [r0, #8]
   10f3e:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
	if (z_flag_processing_get(sh)) {
   10f42:	f013 0f01 	tst.w	r3, #1
   10f46:	d112      	bne.n	10f6e <instance_uninit+0x34>
   10f48:	4604      	mov	r4, r0
		z_shell_log_backend_disable(sh->log_backend);
   10f4a:	69c0      	ldr	r0, [r0, #28]
   10f4c:	f001 f9d6 	bl	122fc <z_shell_log_backend_disable>
	err = sh->iface->api->uninit(sh->iface);
   10f50:	6860      	ldr	r0, [r4, #4]
   10f52:	6803      	ldr	r3, [r0, #0]
   10f54:	685b      	ldr	r3, [r3, #4]
   10f56:	4798      	blx	r3
	if (err != 0) {
   10f58:	4605      	mov	r5, r0
   10f5a:	b108      	cbz	r0, 10f60 <instance_uninit+0x26>
}
   10f5c:	4628      	mov	r0, r5
   10f5e:	bd38      	pop	{r3, r4, r5, pc}
	history_purge(sh);
   10f60:	4620      	mov	r0, r4
   10f62:	f7ff ffe5 	bl	10f30 <history_purge>
	sh->ctx->state = state;
   10f66:	68a3      	ldr	r3, [r4, #8]
   10f68:	2200      	movs	r2, #0
   10f6a:	711a      	strb	r2, [r3, #4]
	return 0;
   10f6c:	e7f6      	b.n	10f5c <instance_uninit+0x22>
		return -EBUSY;
   10f6e:	f06f 050f 	mvn.w	r5, #15
   10f72:	e7f3      	b.n	10f5c <instance_uninit+0x22>

00010f74 <z_flag_print_noinit_set>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
   10f74:	6883      	ldr	r3, [r0, #8]
   10f76:	f503 7319 	add.w	r3, r3, #612	; 0x264
   10f7a:	b171      	cbz	r1, 10f9a <z_flag_print_noinit_set+0x26>
   10f7c:	f3bf 8f5b 	dmb	ish
   10f80:	e853 0f00 	ldrex	r0, [r3]
   10f84:	f440 5280 	orr.w	r2, r0, #4096	; 0x1000
   10f88:	e843 2100 	strex	r1, r2, [r3]
   10f8c:	2900      	cmp	r1, #0
   10f8e:	d1f7      	bne.n	10f80 <z_flag_print_noinit_set+0xc>
   10f90:	f3bf 8f5b 	dmb	ish
}
   10f94:	f3c0 3000 	ubfx	r0, r0, #12, #1
   10f98:	4770      	bx	lr
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
   10f9a:	f3bf 8f5b 	dmb	ish
   10f9e:	e853 0f00 	ldrex	r0, [r3]
   10fa2:	f420 5280 	bic.w	r2, r0, #4096	; 0x1000
   10fa6:	e843 2100 	strex	r1, r2, [r3]
   10faa:	2900      	cmp	r1, #0
   10fac:	d1f7      	bne.n	10f9e <z_flag_print_noinit_set+0x2a>
   10fae:	f3bf 8f5b 	dmb	ish
   10fb2:	e7ef      	b.n	10f94 <z_flag_print_noinit_set+0x20>

00010fb4 <z_flag_tx_rdy_set>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, tx_rdy, val, ret);
   10fb4:	6883      	ldr	r3, [r0, #8]
   10fb6:	f503 7319 	add.w	r3, r3, #612	; 0x264
   10fba:	b171      	cbz	r1, 10fda <z_flag_tx_rdy_set+0x26>
   10fbc:	f3bf 8f5b 	dmb	ish
   10fc0:	e853 0f00 	ldrex	r0, [r3]
   10fc4:	f040 0202 	orr.w	r2, r0, #2
   10fc8:	e843 2100 	strex	r1, r2, [r3]
   10fcc:	2900      	cmp	r1, #0
   10fce:	d1f7      	bne.n	10fc0 <z_flag_tx_rdy_set+0xc>
   10fd0:	f3bf 8f5b 	dmb	ish
}
   10fd4:	f3c0 0040 	ubfx	r0, r0, #1, #1
   10fd8:	4770      	bx	lr
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, tx_rdy, val, ret);
   10fda:	f3bf 8f5b 	dmb	ish
   10fde:	e853 0f00 	ldrex	r0, [r3]
   10fe2:	f020 0202 	bic.w	r2, r0, #2
   10fe6:	e843 2100 	strex	r1, r2, [r3]
   10fea:	2900      	cmp	r1, #0
   10fec:	d1f7      	bne.n	10fde <z_flag_tx_rdy_set+0x2a>
   10fee:	f3bf 8f5b 	dmb	ish
   10ff2:	e7ef      	b.n	10fd4 <z_flag_tx_rdy_set+0x20>

00010ff4 <z_flag_cmd_ctx_set>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, cmd_ctx, val, ret);
   10ff4:	6883      	ldr	r3, [r0, #8]
   10ff6:	f503 7319 	add.w	r3, r3, #612	; 0x264
   10ffa:	b171      	cbz	r1, 1101a <z_flag_cmd_ctx_set+0x26>
   10ffc:	f3bf 8f5b 	dmb	ish
   11000:	e853 0f00 	ldrex	r0, [r3]
   11004:	f440 6200 	orr.w	r2, r0, #2048	; 0x800
   11008:	e843 2100 	strex	r1, r2, [r3]
   1100c:	2900      	cmp	r1, #0
   1100e:	d1f7      	bne.n	11000 <z_flag_cmd_ctx_set+0xc>
   11010:	f3bf 8f5b 	dmb	ish
}
   11014:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   11018:	4770      	bx	lr
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, cmd_ctx, val, ret);
   1101a:	f3bf 8f5b 	dmb	ish
   1101e:	e853 0f00 	ldrex	r0, [r3]
   11022:	f420 6200 	bic.w	r2, r0, #2048	; 0x800
   11026:	e843 2100 	strex	r1, r2, [r3]
   1102a:	2900      	cmp	r1, #0
   1102c:	d1f7      	bne.n	1101e <z_flag_cmd_ctx_set+0x2a>
   1102e:	f3bf 8f5b 	dmb	ish
   11032:	e7ef      	b.n	11014 <z_flag_cmd_ctx_set+0x20>

00011034 <z_flag_history_exit_set>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, history_exit, val, ret);
   11034:	6883      	ldr	r3, [r0, #8]
   11036:	f503 7319 	add.w	r3, r3, #612	; 0x264
   1103a:	b171      	cbz	r1, 1105a <z_flag_history_exit_set+0x26>
   1103c:	f3bf 8f5b 	dmb	ish
   11040:	e853 0f00 	ldrex	r0, [r3]
   11044:	f040 0204 	orr.w	r2, r0, #4
   11048:	e843 2100 	strex	r1, r2, [r3]
   1104c:	2900      	cmp	r1, #0
   1104e:	d1f7      	bne.n	11040 <z_flag_history_exit_set+0xc>
   11050:	f3bf 8f5b 	dmb	ish
}
   11054:	f3c0 0080 	ubfx	r0, r0, #2, #1
   11058:	4770      	bx	lr
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, history_exit, val, ret);
   1105a:	f3bf 8f5b 	dmb	ish
   1105e:	e853 0f00 	ldrex	r0, [r3]
   11062:	f020 0204 	bic.w	r2, r0, #4
   11066:	e843 2100 	strex	r1, r2, [r3]
   1106a:	2900      	cmp	r1, #0
   1106c:	d1f7      	bne.n	1105e <z_flag_history_exit_set+0x2a>
   1106e:	f3bf 8f5b 	dmb	ish
   11072:	e7ef      	b.n	11054 <z_flag_history_exit_set+0x20>

00011074 <z_flag_insert_mode_set>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
   11074:	6883      	ldr	r3, [r0, #8]
   11076:	f503 7318 	add.w	r3, r3, #608	; 0x260
   1107a:	b171      	cbz	r1, 1109a <z_flag_insert_mode_set+0x26>
   1107c:	f3bf 8f5b 	dmb	ish
   11080:	e853 0f00 	ldrex	r0, [r3]
   11084:	f040 0201 	orr.w	r2, r0, #1
   11088:	e843 2100 	strex	r1, r2, [r3]
   1108c:	2900      	cmp	r1, #0
   1108e:	d1f7      	bne.n	11080 <z_flag_insert_mode_set+0xc>
   11090:	f3bf 8f5b 	dmb	ish
}
   11094:	f000 0001 	and.w	r0, r0, #1
   11098:	4770      	bx	lr
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
   1109a:	f3bf 8f5b 	dmb	ish
   1109e:	e853 0f00 	ldrex	r0, [r3]
   110a2:	f020 0201 	bic.w	r2, r0, #1
   110a6:	e843 2100 	strex	r1, r2, [r3]
   110aa:	2900      	cmp	r1, #0
   110ac:	d1f7      	bne.n	1109e <z_flag_insert_mode_set+0x2a>
   110ae:	f3bf 8f5b 	dmb	ish
   110b2:	e7ef      	b.n	11094 <z_flag_insert_mode_set+0x20>

000110b4 <z_flag_processing_set>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, processing, val, ret);
   110b4:	6883      	ldr	r3, [r0, #8]
   110b6:	f503 7319 	add.w	r3, r3, #612	; 0x264
   110ba:	b171      	cbz	r1, 110da <z_flag_processing_set+0x26>
   110bc:	f3bf 8f5b 	dmb	ish
   110c0:	e853 0f00 	ldrex	r0, [r3]
   110c4:	f040 0201 	orr.w	r2, r0, #1
   110c8:	e843 2100 	strex	r1, r2, [r3]
   110cc:	2900      	cmp	r1, #0
   110ce:	d1f7      	bne.n	110c0 <z_flag_processing_set+0xc>
   110d0:	f3bf 8f5b 	dmb	ish
}
   110d4:	f000 0001 	and.w	r0, r0, #1
   110d8:	4770      	bx	lr
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, processing, val, ret);
   110da:	f3bf 8f5b 	dmb	ish
   110de:	e853 0f00 	ldrex	r0, [r3]
   110e2:	f020 0201 	bic.w	r2, r0, #1
   110e6:	e843 2100 	strex	r1, r2, [r3]
   110ea:	2900      	cmp	r1, #0
   110ec:	d1f7      	bne.n	110de <z_flag_processing_set+0x2a>
   110ee:	f3bf 8f5b 	dmb	ish
   110f2:	e7ef      	b.n	110d4 <z_flag_processing_set+0x20>

000110f4 <kill_handler>:
{
   110f4:	b510      	push	{r4, lr}
   110f6:	4604      	mov	r4, r0
	int err = instance_uninit(sh);
   110f8:	f7ff ff1f 	bl	10f3a <instance_uninit>
	if (sh->ctx->uninit_cb) {
   110fc:	68a3      	ldr	r3, [r4, #8]
   110fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   11100:	b113      	cbz	r3, 11108 <kill_handler+0x14>
   11102:	4601      	mov	r1, r0
		sh->ctx->uninit_cb(sh, err);
   11104:	4620      	mov	r0, r4
   11106:	4798      	blx	r3
	sh->ctx->tid = NULL;
   11108:	68a3      	ldr	r3, [r4, #8]
   1110a:	2200      	movs	r2, #0
   1110c:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
	return z_impl_z_current_get();
   11110:	f7fc ff86 	bl	e020 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   11114:	f7f7 ff82 	bl	901c <z_impl_k_thread_abort>
}
   11118:	bd10      	pop	{r4, pc}

0001111a <shell_signal_handle>:
{
   1111a:	b570      	push	{r4, r5, r6, lr}
   1111c:	b082      	sub	sp, #8
   1111e:	4604      	mov	r4, r0
   11120:	4616      	mov	r6, r2
	struct k_poll_signal *sig = &sh->ctx->signals[sig_idx];
   11122:	6885      	ldr	r5, [r0, #8]
   11124:	0109      	lsls	r1, r1, #4
   11126:	f501 711a 	add.w	r1, r1, #616	; 0x268
   1112a:	440d      	add	r5, r1
	z_impl_k_poll_signal_check(sig, signaled, result);
   1112c:	466a      	mov	r2, sp
   1112e:	a901      	add	r1, sp, #4
   11130:	4628      	mov	r0, r5
   11132:	f003 ff34 	bl	14f9e <z_impl_k_poll_signal_check>
	if (set) {
   11136:	9b01      	ldr	r3, [sp, #4]
   11138:	b90b      	cbnz	r3, 1113e <shell_signal_handle+0x24>
}
   1113a:	b002      	add	sp, #8
   1113c:	bd70      	pop	{r4, r5, r6, pc}
	z_impl_k_poll_signal_reset(sig);
   1113e:	4628      	mov	r0, r5
   11140:	f003 ff2a 	bl	14f98 <z_impl_k_poll_signal_reset>
		handler(sh);
   11144:	4620      	mov	r0, r4
   11146:	47b0      	blx	r6
}
   11148:	e7f7      	b.n	1113a <shell_signal_handle+0x20>

0001114a <transport_evt_handler>:
{
   1114a:	b508      	push	{r3, lr}
			&sh->ctx->signals[SHELL_SIGNAL_RXRDY] :
   1114c:	b930      	cbnz	r0, 1115c <transport_evt_handler+0x12>
   1114e:	6888      	ldr	r0, [r1, #8]
   11150:	f500 701a 	add.w	r0, r0, #616	; 0x268
	return z_impl_k_poll_signal_raise(sig, result);
   11154:	2100      	movs	r1, #0
   11156:	f7fd fa03 	bl	e560 <z_impl_k_poll_signal_raise>
}
   1115a:	bd08      	pop	{r3, pc}
			&sh->ctx->signals[SHELL_SIGNAL_TXDONE];
   1115c:	6888      	ldr	r0, [r1, #8]
			&sh->ctx->signals[SHELL_SIGNAL_RXRDY] :
   1115e:	f500 7026 	add.w	r0, r0, #664	; 0x298
   11162:	e7f7      	b.n	11154 <transport_evt_handler+0xa>

00011164 <history_init>:
{
   11164:	b508      	push	{r3, lr}
	z_shell_history_init(sh->history);
   11166:	68c0      	ldr	r0, [r0, #12]
   11168:	f001 fb33 	bl	127d2 <z_shell_history_init>
}
   1116c:	bd08      	pop	{r3, pc}

0001116e <z_shell_raw_fprintf>:
{
   1116e:	b40e      	push	{r1, r2, r3}
   11170:	b500      	push	{lr}
   11172:	b082      	sub	sp, #8
   11174:	aa03      	add	r2, sp, #12
   11176:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   1117a:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   1117c:	f7f6 f818 	bl	71b0 <z_shell_fprintf_fmt>
}
   11180:	b002      	add	sp, #8
   11182:	f85d eb04 	ldr.w	lr, [sp], #4
   11186:	b003      	add	sp, #12
   11188:	4770      	bx	lr

0001118a <history_mode_exit>:
{
   1118a:	b510      	push	{r4, lr}
   1118c:	4604      	mov	r4, r0
	z_flag_history_exit_set(sh, false);
   1118e:	2100      	movs	r1, #0
   11190:	f7ff ff50 	bl	11034 <z_flag_history_exit_set>
	z_shell_history_mode_exit(sh->history);
   11194:	68e0      	ldr	r0, [r4, #12]
   11196:	f001 fa75 	bl	12684 <z_shell_history_mode_exit>
}
   1119a:	bd10      	pop	{r4, pc}

0001119c <history_put>:
{
   1119c:	b508      	push	{r3, lr}
	z_shell_history_put(sh->history, line, length);
   1119e:	68c0      	ldr	r0, [r0, #12]
   111a0:	f001 faae 	bl	12700 <z_shell_history_put>
}
   111a4:	bd08      	pop	{r3, pc}

000111a6 <tab_prepare>:
{
   111a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   111a8:	b083      	sub	sp, #12
   111aa:	4604      	mov	r4, r0
   111ac:	461d      	mov	r5, r3
			sh->ctx->cmd_buff_len;
   111ae:	6880      	ldr	r0, [r0, #8]
   111b0:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
	if (compl_space == 0U) {
   111b2:	2bff      	cmp	r3, #255	; 0xff
   111b4:	d049      	beq.n	1124a <tab_prepare+0xa4>
   111b6:	460f      	mov	r7, r1
   111b8:	4616      	mov	r6, r2
	memcpy(sh->ctx->temp_buff, sh->ctx->cmd_buff,
   111ba:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
   111bc:	f100 0142 	add.w	r1, r0, #66	; 0x42
   111c0:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   111c4:	f001 fde1 	bl	12d8a <memcpy>
	sh->ctx->temp_buff[sh->ctx->cmd_buff_pos] = '\0';
   111c8:	68a3      	ldr	r3, [r4, #8]
   111ca:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   111cc:	4413      	add	r3, r2
   111ce:	2200      	movs	r2, #0
   111d0:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	(void)z_shell_make_argv(argc, *argv, sh->ctx->temp_buff,
   111d4:	68a2      	ldr	r2, [r4, #8]
   111d6:	2314      	movs	r3, #20
   111d8:	f502 72a1 	add.w	r2, r2, #322	; 0x142
   111dc:	6831      	ldr	r1, [r6, #0]
   111de:	4628      	mov	r0, r5
   111e0:	f000 fbb9 	bl	11956 <z_shell_make_argv>
	if (*argc > CONFIG_SHELL_ARGC_MAX) {
   111e4:	682b      	ldr	r3, [r5, #0]
   111e6:	2b14      	cmp	r3, #20
   111e8:	d832      	bhi.n	11250 <tab_prepare+0xaa>
	(*argv)[*argc] = NULL;
   111ea:	6832      	ldr	r2, [r6, #0]
   111ec:	2100      	movs	r1, #0
   111ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	int space = isspace((int)sh->ctx->cmd_buff[
   111f2:	68a3      	ldr	r3, [r4, #8]
						sh->ctx->cmd_buff_pos - 1]);
   111f4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   111f6:	3a01      	subs	r2, #1
	int space = isspace((int)sh->ctx->cmd_buff[
   111f8:	4413      	add	r3, r2
   111fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   111fe:	2b20      	cmp	r3, #32
   11200:	d004      	beq.n	1120c <tab_prepare+0x66>
   11202:	3b09      	subs	r3, #9
   11204:	2b04      	cmp	r3, #4
   11206:	d815      	bhi.n	11234 <tab_prepare+0x8e>
   11208:	2301      	movs	r3, #1
   1120a:	e000      	b.n	1120e <tab_prepare+0x68>
   1120c:	2301      	movs	r3, #1
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
   1120e:	682c      	ldr	r4, [r5, #0]
   11210:	b194      	cbz	r4, 11238 <tab_prepare+0x92>
   11212:	b913      	cbnz	r3, 1121a <tab_prepare+0x74>
   11214:	2c01      	cmp	r4, #1
   11216:	d00f      	beq.n	11238 <tab_prepare+0x92>
	search_argc = space ? *argc : *argc - 1;
   11218:	3c01      	subs	r4, #1
	*cmd = z_shell_get_last_command(selected_cmd_get(sh), search_argc,
   1121a:	2000      	movs	r0, #0
   1121c:	9001      	str	r0, [sp, #4]
   1121e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11220:	9300      	str	r3, [sp, #0]
   11222:	9b08      	ldr	r3, [sp, #32]
   11224:	6832      	ldr	r2, [r6, #0]
   11226:	4621      	mov	r1, r4
   11228:	f000 fc07 	bl	11a3a <z_shell_get_last_command>
   1122c:	6038      	str	r0, [r7, #0]
	if ((*cmd == NULL) && (search_argc != 0)) {
   1122e:	b148      	cbz	r0, 11244 <tab_prepare+0x9e>
	return true;
   11230:	2001      	movs	r0, #1
   11232:	e00b      	b.n	1124c <tab_prepare+0xa6>
   11234:	2300      	movs	r3, #0
   11236:	e7ea      	b.n	1120e <tab_prepare+0x68>
		*complete_arg_idx = Z_SHELL_CMD_ROOT_LVL;
   11238:	2300      	movs	r3, #0
   1123a:	9a08      	ldr	r2, [sp, #32]
   1123c:	6013      	str	r3, [r2, #0]
		*cmd = selected_cmd_get(sh);
   1123e:	603b      	str	r3, [r7, #0]
		return true;
   11240:	2001      	movs	r0, #1
   11242:	e003      	b.n	1124c <tab_prepare+0xa6>
	if ((*cmd == NULL) && (search_argc != 0)) {
   11244:	b934      	cbnz	r4, 11254 <tab_prepare+0xae>
	return true;
   11246:	2001      	movs	r0, #1
   11248:	e000      	b.n	1124c <tab_prepare+0xa6>
		return false;
   1124a:	2000      	movs	r0, #0
}
   1124c:	b003      	add	sp, #12
   1124e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   11250:	2000      	movs	r0, #0
   11252:	e7fb      	b.n	1124c <tab_prepare+0xa6>
		return false;
   11254:	2000      	movs	r0, #0
   11256:	e7f9      	b.n	1124c <tab_prepare+0xa6>

00011258 <find_completion_candidates>:
{
   11258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1125c:	b087      	sub	sp, #28
   1125e:	460f      	mov	r7, r1
   11260:	469b      	mov	fp, r3
   11262:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   11266:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
	return str == NULL ? 0U : (uint16_t)strlen(str);
   1126a:	4691      	mov	r9, r2
   1126c:	b14a      	cbz	r2, 11282 <find_completion_candidates+0x2a>
   1126e:	4610      	mov	r0, r2
   11270:	f001 fd35 	bl	12cde <strlen>
   11274:	b286      	uxth	r6, r0
	*longest = 0U;
   11276:	2400      	movs	r4, #0
   11278:	f8aa 4000 	strh.w	r4, [sl]
	*cnt = 0;
   1127c:	f8c8 4000 	str.w	r4, [r8]
	while ((candidate = z_shell_cmd_get(cmd, idx, &dloc)) != NULL) {
   11280:	e007      	b.n	11292 <find_completion_candidates+0x3a>
   11282:	2600      	movs	r6, #0
   11284:	e7f7      	b.n	11276 <find_completion_candidates+0x1e>
			(*cnt)++;
   11286:	f8d8 3000 	ldr.w	r3, [r8]
   1128a:	3301      	adds	r3, #1
   1128c:	f8c8 3000 	str.w	r3, [r8]
		idx++;
   11290:	3401      	adds	r4, #1
	while ((candidate = z_shell_cmd_get(cmd, idx, &dloc)) != NULL) {
   11292:	aa01      	add	r2, sp, #4
   11294:	4621      	mov	r1, r4
   11296:	4638      	mov	r0, r7
   11298:	f7f5 ffa0 	bl	71dc <z_shell_cmd_get>
   1129c:	4605      	mov	r5, r0
   1129e:	b1b8      	cbz	r0, 112d0 <find_completion_candidates+0x78>
	return (strncmp(candidate, str, len) == 0) ? true : false;
   112a0:	4632      	mov	r2, r6
   112a2:	4649      	mov	r1, r9
   112a4:	6828      	ldr	r0, [r5, #0]
   112a6:	f001 fd38 	bl	12d1a <strncmp>
		if (is_candidate) {
   112aa:	2800      	cmp	r0, #0
   112ac:	d1f0      	bne.n	11290 <find_completion_candidates+0x38>
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
   112ae:	6828      	ldr	r0, [r5, #0]
   112b0:	f001 fd15 	bl	12cde <strlen>
   112b4:	f8ba 3000 	ldrh.w	r3, [sl]
   112b8:	4283      	cmp	r3, r0
   112ba:	bf38      	it	cc
   112bc:	4603      	movcc	r3, r0
   112be:	f8aa 3000 	strh.w	r3, [sl]
			if (*cnt == 0) {
   112c2:	f8d8 3000 	ldr.w	r3, [r8]
   112c6:	2b00      	cmp	r3, #0
   112c8:	d1dd      	bne.n	11286 <find_completion_candidates+0x2e>
				*first_idx = idx;
   112ca:	f8cb 4000 	str.w	r4, [fp]
   112ce:	e7da      	b.n	11286 <find_completion_candidates+0x2e>
}
   112d0:	b007      	add	sp, #28
   112d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000112d6 <autocomplete>:
{
   112d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   112d8:	4604      	mov	r4, r0
   112da:	460d      	mov	r5, r1
   112dc:	461f      	mov	r7, r3
   112de:	b36a      	cbz	r2, 1133c <autocomplete+0x66>
   112e0:	4610      	mov	r0, r2
   112e2:	f001 fcfc 	bl	12cde <strlen>
   112e6:	b286      	uxth	r6, r0
	match = z_shell_cmd_get(cmd, subcmd_idx, &sh->ctx->active_cmd);
   112e8:	68a2      	ldr	r2, [r4, #8]
   112ea:	3208      	adds	r2, #8
   112ec:	4639      	mov	r1, r7
   112ee:	4628      	mov	r0, r5
   112f0:	f7f5 ff74 	bl	71dc <z_shell_cmd_get>
   112f4:	4605      	mov	r5, r0
	cmd_len = z_shell_strlen(match->syntax);
   112f6:	6800      	ldr	r0, [r0, #0]
   112f8:	b310      	cbz	r0, 11340 <autocomplete+0x6a>
   112fa:	f001 fcf0 	bl	12cde <strlen>
   112fe:	b282      	uxth	r2, r0
	if (cmd_len != arg_len) {
   11300:	42b2      	cmp	r2, r6
   11302:	d11f      	bne.n	11344 <autocomplete+0x6e>
	if (isspace((int) sh->ctx->cmd_buff[
   11304:	68a2      	ldr	r2, [r4, #8]
					sh->ctx->cmd_buff_pos]) == 0) {
   11306:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
	if (isspace((int) sh->ctx->cmd_buff[
   11308:	4413      	add	r3, r2
   1130a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   1130e:	2b20      	cmp	r3, #32
   11310:	d025      	beq.n	1135e <autocomplete+0x88>
   11312:	3b09      	subs	r3, #9
   11314:	2b04      	cmp	r3, #4
   11316:	d922      	bls.n	1135e <autocomplete+0x88>
	return sh->ctx->cfg.flags.insert_mode == 1;
   11318:	f8d2 3260 	ldr.w	r3, [r2, #608]	; 0x260
		if (z_flag_insert_mode_get(sh)) {
   1131c:	f013 0f01 	tst.w	r3, #1
   11320:	d018      	beq.n	11354 <autocomplete+0x7e>
			z_flag_insert_mode_set(sh, false);
   11322:	2100      	movs	r1, #0
   11324:	4620      	mov	r0, r4
   11326:	f7ff fea5 	bl	11074 <z_flag_insert_mode_set>
			z_shell_op_char_insert(sh, ' ');
   1132a:	2120      	movs	r1, #32
   1132c:	4620      	mov	r0, r4
   1132e:	f000 fe3f 	bl	11fb0 <z_shell_op_char_insert>
			z_flag_insert_mode_set(sh, true);
   11332:	2101      	movs	r1, #1
   11334:	4620      	mov	r0, r4
   11336:	f7ff fe9d 	bl	11074 <z_flag_insert_mode_set>
   1133a:	e014      	b.n	11366 <autocomplete+0x90>
   1133c:	2600      	movs	r6, #0
   1133e:	e7d3      	b.n	112e8 <autocomplete+0x12>
   11340:	2200      	movs	r2, #0
   11342:	e7dd      	b.n	11300 <autocomplete+0x2a>
					     match->syntax + arg_len,
   11344:	6829      	ldr	r1, [r5, #0]
		z_shell_op_completion_insert(sh,
   11346:	1b92      	subs	r2, r2, r6
   11348:	b292      	uxth	r2, r2
   1134a:	4431      	add	r1, r6
   1134c:	4620      	mov	r0, r4
   1134e:	f000 fe49 	bl	11fe4 <z_shell_op_completion_insert>
   11352:	e7d7      	b.n	11304 <autocomplete+0x2e>
			z_shell_op_char_insert(sh, ' ');
   11354:	2120      	movs	r1, #32
   11356:	4620      	mov	r0, r4
   11358:	f000 fe2a 	bl	11fb0 <z_shell_op_char_insert>
   1135c:	e003      	b.n	11366 <autocomplete+0x90>
		z_shell_op_cursor_move(sh, 1);
   1135e:	2101      	movs	r1, #1
   11360:	4620      	mov	r0, r4
   11362:	f000 fcf9 	bl	11d58 <z_shell_op_cursor_move>
}
   11366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011368 <common_beginning_find>:
{
   11368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1136c:	b08a      	sub	sp, #40	; 0x28
   1136e:	4680      	mov	r8, r0
   11370:	460f      	mov	r7, r1
   11372:	4691      	mov	r9, r2
   11374:	4619      	mov	r1, r3
   11376:	9c12      	ldr	r4, [sp, #72]	; 0x48
   11378:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
	size_t idx = first + 1;
   1137c:	f103 0a01 	add.w	sl, r3, #1
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
   11380:	aa05      	add	r2, sp, #20
   11382:	4638      	mov	r0, r7
   11384:	f7f5 ff2a 	bl	71dc <z_shell_cmd_get>
   11388:	4605      	mov	r5, r0
	strncpy(sh->ctx->temp_buff, match->syntax,
   1138a:	f8d8 0008 	ldr.w	r0, [r8, #8]
   1138e:	22ff      	movs	r2, #255	; 0xff
   11390:	6829      	ldr	r1, [r5, #0]
   11392:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   11396:	f001 fc7b 	bl	12c90 <strncpy>
	*str = match->syntax;
   1139a:	682b      	ldr	r3, [r5, #0]
   1139c:	f8c9 3000 	str.w	r3, [r9]
	uint16_t common = UINT16_MAX;
   113a0:	f64f 79ff 	movw	r9, #65535	; 0xffff
	while (cnt > 1) {
   113a4:	e006      	b.n	113b4 <common_beginning_find+0x4c>
			--cnt;
   113a6:	3c01      	subs	r4, #1
			common = (curr_common < common) ? curr_common : common;
   113a8:	4548      	cmp	r0, r9
   113aa:	bfa8      	it	ge
   113ac:	4648      	movge	r0, r9
   113ae:	fa1f f980 	uxth.w	r9, r0
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
   113b2:	46aa      	mov	sl, r5
	while (cnt > 1) {
   113b4:	2c01      	cmp	r4, #1
   113b6:	d916      	bls.n	113e6 <common_beginning_find+0x7e>
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
   113b8:	f10a 0501 	add.w	r5, sl, #1
   113bc:	466a      	mov	r2, sp
   113be:	4651      	mov	r1, sl
   113c0:	4638      	mov	r0, r7
   113c2:	f7f5 ff0b 	bl	71dc <z_shell_cmd_get>
		if (match2 == NULL) {
   113c6:	4603      	mov	r3, r0
   113c8:	b168      	cbz	r0, 113e6 <common_beginning_find+0x7e>
		curr_common = str_common(sh->ctx->temp_buff, match2->syntax,
   113ca:	f8d8 0008 	ldr.w	r0, [r8, #8]
   113ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
   113d2:	6819      	ldr	r1, [r3, #0]
   113d4:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   113d8:	f7ff fd23 	bl	10e22 <str_common>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
   113dc:	2e00      	cmp	r6, #0
   113de:	d0e2      	beq.n	113a6 <common_beginning_find+0x3e>
   113e0:	4286      	cmp	r6, r0
   113e2:	dce6      	bgt.n	113b2 <common_beginning_find+0x4a>
   113e4:	e7df      	b.n	113a6 <common_beginning_find+0x3e>
}
   113e6:	4648      	mov	r0, r9
   113e8:	b00a      	add	sp, #40	; 0x28
   113ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000113ee <partial_autocomplete>:
{
   113ee:	b5f0      	push	{r4, r5, r6, r7, lr}
   113f0:	b085      	sub	sp, #20
   113f2:	4604      	mov	r4, r0
   113f4:	460d      	mov	r5, r1
   113f6:	461e      	mov	r6, r3
   113f8:	b17a      	cbz	r2, 1141a <partial_autocomplete+0x2c>
   113fa:	4610      	mov	r0, r2
   113fc:	f001 fc6f 	bl	12cde <strlen>
   11400:	b287      	uxth	r7, r0
	uint16_t common = common_beginning_find(sh, cmd, &completion, first,
   11402:	9701      	str	r7, [sp, #4]
   11404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11406:	9300      	str	r3, [sp, #0]
   11408:	4633      	mov	r3, r6
   1140a:	aa03      	add	r2, sp, #12
   1140c:	4629      	mov	r1, r5
   1140e:	4620      	mov	r0, r4
   11410:	f7ff ffaa 	bl	11368 <common_beginning_find>
	if (common) {
   11414:	b918      	cbnz	r0, 1141e <partial_autocomplete+0x30>
}
   11416:	b005      	add	sp, #20
   11418:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1141a:	2700      	movs	r7, #0
   1141c:	e7f1      	b.n	11402 <partial_autocomplete+0x14>
		z_shell_op_completion_insert(sh, &completion[arg_len],
   1141e:	1bc2      	subs	r2, r0, r7
   11420:	b292      	uxth	r2, r2
   11422:	9903      	ldr	r1, [sp, #12]
   11424:	4439      	add	r1, r7
   11426:	4620      	mov	r0, r4
   11428:	f000 fddc 	bl	11fe4 <z_shell_op_completion_insert>
   1142c:	e7f3      	b.n	11416 <partial_autocomplete+0x28>

0001142e <tab_handle>:
{
   1142e:	b510      	push	{r4, lr}
   11430:	b0a4      	sub	sp, #144	; 0x90
   11432:	4604      	mov	r4, r0
	const char **argv = __argv;
   11434:	ab0f      	add	r3, sp, #60	; 0x3c
   11436:	9308      	str	r3, [sp, #32]
	size_t first = 0;
   11438:	2300      	movs	r3, #0
   1143a:	9307      	str	r3, [sp, #28]
	bool tab_possible = tab_prepare(sh, &cmd, &argv, &argc, &arg_idx,
   1143c:	ab0a      	add	r3, sp, #40	; 0x28
   1143e:	9301      	str	r3, [sp, #4]
   11440:	ab06      	add	r3, sp, #24
   11442:	9300      	str	r3, [sp, #0]
   11444:	ab04      	add	r3, sp, #16
   11446:	aa08      	add	r2, sp, #32
   11448:	a909      	add	r1, sp, #36	; 0x24
   1144a:	f7ff feac 	bl	111a6 <tab_prepare>
	if (tab_possible == false) {
   1144e:	b908      	cbnz	r0, 11454 <tab_handle+0x26>
}
   11450:	b024      	add	sp, #144	; 0x90
   11452:	bd10      	pop	{r4, pc}
	find_completion_candidates(sh, cmd, argv[arg_idx], &first, &cnt,
   11454:	9a06      	ldr	r2, [sp, #24]
   11456:	9b08      	ldr	r3, [sp, #32]
   11458:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1145c:	f10d 0316 	add.w	r3, sp, #22
   11460:	9301      	str	r3, [sp, #4]
   11462:	ab03      	add	r3, sp, #12
   11464:	9300      	str	r3, [sp, #0]
   11466:	ab07      	add	r3, sp, #28
   11468:	9909      	ldr	r1, [sp, #36]	; 0x24
   1146a:	4620      	mov	r0, r4
   1146c:	f7ff fef4 	bl	11258 <find_completion_candidates>
	if (cnt == 1) {
   11470:	9b03      	ldr	r3, [sp, #12]
   11472:	2b01      	cmp	r3, #1
   11474:	d01a      	beq.n	114ac <tab_handle+0x7e>
	} else if (cnt > 1) {
   11476:	2b01      	cmp	r3, #1
   11478:	d9ea      	bls.n	11450 <tab_handle+0x22>
		tab_options_print(sh, cmd, argv[arg_idx], first, cnt,
   1147a:	9906      	ldr	r1, [sp, #24]
   1147c:	9a08      	ldr	r2, [sp, #32]
   1147e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   11482:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   11486:	9101      	str	r1, [sp, #4]
   11488:	9300      	str	r3, [sp, #0]
   1148a:	9b07      	ldr	r3, [sp, #28]
   1148c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1148e:	4620      	mov	r0, r4
   11490:	f7f5 fafe 	bl	6a90 <tab_options_print>
		partial_autocomplete(sh, cmd, argv[arg_idx], first, cnt);
   11494:	9a06      	ldr	r2, [sp, #24]
   11496:	9b08      	ldr	r3, [sp, #32]
   11498:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1149c:	9b03      	ldr	r3, [sp, #12]
   1149e:	9300      	str	r3, [sp, #0]
   114a0:	9b07      	ldr	r3, [sp, #28]
   114a2:	9909      	ldr	r1, [sp, #36]	; 0x24
   114a4:	4620      	mov	r0, r4
   114a6:	f7ff ffa2 	bl	113ee <partial_autocomplete>
   114aa:	e7d1      	b.n	11450 <tab_handle+0x22>
		autocomplete(sh, cmd, argv[arg_idx], first);
   114ac:	9b07      	ldr	r3, [sp, #28]
   114ae:	9906      	ldr	r1, [sp, #24]
   114b0:	9a08      	ldr	r2, [sp, #32]
   114b2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   114b6:	9909      	ldr	r1, [sp, #36]	; 0x24
   114b8:	4620      	mov	r0, r4
   114ba:	f7ff ff0c 	bl	112d6 <autocomplete>
   114be:	e7c7      	b.n	11450 <tab_handle+0x22>

000114c0 <alt_metakeys_handle>:
{
   114c0:	b508      	push	{r3, lr}
	if (data == SHELL_VT100_ASCII_ALT_B) {
   114c2:	2962      	cmp	r1, #98	; 0x62
   114c4:	d002      	beq.n	114cc <alt_metakeys_handle+0xc>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
   114c6:	2966      	cmp	r1, #102	; 0x66
   114c8:	d005      	beq.n	114d6 <alt_metakeys_handle+0x16>
}
   114ca:	bd08      	pop	{r3, pc}
		z_shell_op_cursor_word_move(sh, -1);
   114cc:	f04f 31ff 	mov.w	r1, #4294967295
   114d0:	f000 fc67 	bl	11da2 <z_shell_op_cursor_word_move>
   114d4:	e7f9      	b.n	114ca <alt_metakeys_handle+0xa>
		z_shell_op_cursor_word_move(sh, 1);
   114d6:	2101      	movs	r1, #1
   114d8:	f000 fc63 	bl	11da2 <z_shell_op_cursor_word_move>
   114dc:	e7f5      	b.n	114ca <alt_metakeys_handle+0xa>

000114de <history_handle>:
{
   114de:	b530      	push	{r4, r5, lr}
   114e0:	b083      	sub	sp, #12
   114e2:	4604      	mov	r4, r0
   114e4:	460d      	mov	r5, r1
	return sh->ctx->ctx.flags.history_exit == 1;
   114e6:	6883      	ldr	r3, [r0, #8]
   114e8:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
	if (z_flag_history_exit_get(sh)) {
   114ec:	f013 0f04 	tst.w	r3, #4
   114f0:	d11f      	bne.n	11532 <history_handle+0x54>
	if (!z_shell_history_active(sh->history)) {
   114f2:	68e3      	ldr	r3, [r4, #12]
 *
 * @return True if in browsing mode.
 */
static inline bool z_shell_history_active(struct shell_history *history)
{
	return (history->current) ? true : false;
   114f4:	68db      	ldr	r3, [r3, #12]
   114f6:	b31b      	cbz	r3, 11540 <history_handle+0x62>
					   sh->ctx->cmd_buff, &len);
   114f8:	68a2      	ldr	r2, [r4, #8]
	history_mode = z_shell_history_get(sh->history, up,
   114fa:	f10d 0306 	add.w	r3, sp, #6
   114fe:	3242      	adds	r2, #66	; 0x42
   11500:	4629      	mov	r1, r5
   11502:	68e0      	ldr	r0, [r4, #12]
   11504:	f001 f8c1 	bl	1268a <z_shell_history_get>
	if (!history_mode) {
   11508:	b380      	cbz	r0, 1156c <history_handle+0x8e>
	z_shell_op_cursor_home_move(sh);
   1150a:	4620      	mov	r0, r4
   1150c:	f000 fc67 	bl	11dde <z_shell_op_cursor_home_move>
	z_clear_eos(sh);
   11510:	4620      	mov	r0, r4
   11512:	f7f5 f8ab 	bl	666c <z_clear_eos>
	z_shell_print_cmd(sh);
   11516:	4620      	mov	r0, r4
   11518:	f7f5 ff82 	bl	7420 <z_shell_print_cmd>
	sh->ctx->cmd_buff_pos = len;
   1151c:	68a2      	ldr	r2, [r4, #8]
   1151e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11522:	87d3      	strh	r3, [r2, #62]	; 0x3e
	sh->ctx->cmd_buff_len = len;
   11524:	68a2      	ldr	r2, [r4, #8]
   11526:	8793      	strh	r3, [r2, #60]	; 0x3c
	z_shell_op_cond_next_line(sh);
   11528:	4620      	mov	r0, r4
   1152a:	f7f5 ff3d 	bl	73a8 <z_shell_op_cond_next_line>
}
   1152e:	b003      	add	sp, #12
   11530:	bd30      	pop	{r4, r5, pc}
		z_flag_history_exit_set(sh, false);
   11532:	2100      	movs	r1, #0
   11534:	f7ff fd7e 	bl	11034 <z_flag_history_exit_set>
		z_shell_history_mode_exit(sh->history);
   11538:	68e0      	ldr	r0, [r4, #12]
   1153a:	f001 f8a3 	bl	12684 <z_shell_history_mode_exit>
   1153e:	e7d8      	b.n	114f2 <history_handle+0x14>
		if (up) {
   11540:	2d00      	cmp	r5, #0
   11542:	d0f4      	beq.n	1152e <history_handle+0x50>
			uint16_t cmd_len = z_shell_strlen(sh->ctx->cmd_buff);
   11544:	68a0      	ldr	r0, [r4, #8]
   11546:	3042      	adds	r0, #66	; 0x42
   11548:	d003      	beq.n	11552 <history_handle+0x74>
   1154a:	f001 fbc8 	bl	12cde <strlen>
   1154e:	b280      	uxth	r0, r0
			if (cmd_len) {
   11550:	b920      	cbnz	r0, 1155c <history_handle+0x7e>
				sh->ctx->temp_buff[0] = '\0';
   11552:	68a3      	ldr	r3, [r4, #8]
   11554:	2200      	movs	r2, #0
   11556:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
   1155a:	e7cd      	b.n	114f8 <history_handle+0x1a>
				strcpy(sh->ctx->temp_buff,
   1155c:	68a0      	ldr	r0, [r4, #8]
   1155e:	f100 0142 	add.w	r1, r0, #66	; 0x42
   11562:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   11566:	f001 fb89 	bl	12c7c <strcpy>
   1156a:	e7c5      	b.n	114f8 <history_handle+0x1a>
		strcpy(sh->ctx->cmd_buff, sh->ctx->temp_buff);
   1156c:	68a0      	ldr	r0, [r4, #8]
   1156e:	f500 71a1 	add.w	r1, r0, #322	; 0x142
   11572:	3042      	adds	r0, #66	; 0x42
   11574:	f001 fb82 	bl	12c7c <strcpy>
		len = z_shell_strlen(sh->ctx->cmd_buff);
   11578:	68a0      	ldr	r0, [r4, #8]
   1157a:	3042      	adds	r0, #66	; 0x42
   1157c:	d005      	beq.n	1158a <history_handle+0xac>
   1157e:	f001 fbae 	bl	12cde <strlen>
   11582:	b280      	uxth	r0, r0
   11584:	f8ad 0006 	strh.w	r0, [sp, #6]
   11588:	e7bf      	b.n	1150a <history_handle+0x2c>
   1158a:	2000      	movs	r0, #0
   1158c:	e7fa      	b.n	11584 <history_handle+0xa6>

0001158e <shell_process>:
{
   1158e:	b510      	push	{r4, lr}
   11590:	4604      	mov	r4, r0
	z_flag_processing_set(sh, true);
   11592:	2101      	movs	r1, #1
   11594:	f7ff fd8e 	bl	110b4 <z_flag_processing_set>
	switch (sh->ctx->state) {
   11598:	68a3      	ldr	r3, [r4, #8]
   1159a:	791b      	ldrb	r3, [r3, #4]
   1159c:	2b02      	cmp	r3, #2
   1159e:	d004      	beq.n	115aa <shell_process+0x1c>
	z_flag_processing_set(sh, false);
   115a0:	2100      	movs	r1, #0
   115a2:	4620      	mov	r0, r4
   115a4:	f7ff fd86 	bl	110b4 <z_flag_processing_set>
}
   115a8:	bd10      	pop	{r4, pc}
		state_collect(sh);
   115aa:	4620      	mov	r0, r4
   115ac:	f7f5 fb26 	bl	6bfc <state_collect>
		break;
   115b0:	e7f6      	b.n	115a0 <shell_process+0x12>

000115b2 <shell_vfprintf>:
{
   115b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   115b4:	4604      	mov	r4, r0
   115b6:	460d      	mov	r5, r1
	return sh->ctx->state;
   115b8:	6880      	ldr	r0, [r0, #8]
   115ba:	7901      	ldrb	r1, [r0, #4]
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
   115bc:	2902      	cmp	r1, #2
   115be:	d004      	beq.n	115ca <shell_vfprintf+0x18>
		z_flag_print_noinit_set(sh, true);
   115c0:	2101      	movs	r1, #1
   115c2:	4620      	mov	r0, r4
   115c4:	f7ff fcd6 	bl	10f74 <z_flag_print_noinit_set>
}
   115c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   115ca:	4617      	mov	r7, r2
   115cc:	461e      	mov	r6, r3
	k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
   115ce:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_lock(mutex, timeout);
   115d2:	f04f 32ff 	mov.w	r2, #4294967295
   115d6:	f04f 33ff 	mov.w	r3, #4294967295
   115da:	f7fc f865 	bl	d6a8 <z_impl_k_mutex_lock>
	return sh->ctx->ctx.flags.cmd_ctx == 1;
   115de:	68a3      	ldr	r3, [r4, #8]
   115e0:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
   115e4:	f412 6f00 	tst.w	r2, #2048	; 0x800
   115e8:	d101      	bne.n	115ee <shell_vfprintf+0x3c>
   115ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   115ec:	b1b3      	cbz	r3, 1161c <shell_vfprintf+0x6a>
	z_shell_vfprintf(sh, color, fmt, args);
   115ee:	4633      	mov	r3, r6
   115f0:	463a      	mov	r2, r7
   115f2:	4629      	mov	r1, r5
   115f4:	4620      	mov	r0, r4
   115f6:	f000 fc6d 	bl	11ed4 <z_shell_vfprintf>
   115fa:	68a3      	ldr	r3, [r4, #8]
   115fc:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
   11600:	f412 6f00 	tst.w	r2, #2048	; 0x800
   11604:	d101      	bne.n	1160a <shell_vfprintf+0x58>
   11606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   11608:	b163      	cbz	r3, 11624 <shell_vfprintf+0x72>
	z_shell_fprintf_buffer_flush(sh->fprintf_ctx);
   1160a:	6960      	ldr	r0, [r4, #20]
   1160c:	f000 f838 	bl	11680 <z_shell_fprintf_buffer_flush>
	k_mutex_unlock(&sh->ctx->wr_mtx);
   11610:	68a0      	ldr	r0, [r4, #8]
   11612:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_unlock(mutex);
   11616:	f7fc f8cb 	bl	d7b0 <z_impl_k_mutex_unlock>
   1161a:	e7d5      	b.n	115c8 <shell_vfprintf+0x16>
		z_shell_cmd_line_erase(sh);
   1161c:	4620      	mov	r0, r4
   1161e:	f000 fc11 	bl	11e44 <z_shell_cmd_line_erase>
   11622:	e7e4      	b.n	115ee <shell_vfprintf+0x3c>
		z_shell_print_prompt_and_cmd(sh);
   11624:	4620      	mov	r0, r4
   11626:	f000 fd0d 	bl	12044 <z_shell_print_prompt_and_cmd>
   1162a:	e7ee      	b.n	1160a <shell_vfprintf+0x58>

0001162c <shell_fprintf>:
{
   1162c:	b40c      	push	{r2, r3}
   1162e:	b500      	push	{lr}
   11630:	b083      	sub	sp, #12
   11632:	ab04      	add	r3, sp, #16
   11634:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
   11638:	9301      	str	r3, [sp, #4]
	shell_vfprintf(sh, color, fmt, args);
   1163a:	f7ff ffba 	bl	115b2 <shell_vfprintf>
}
   1163e:	b003      	add	sp, #12
   11640:	f85d eb04 	ldr.w	lr, [sp], #4
   11644:	b002      	add	sp, #8
   11646:	4770      	bx	lr

00011648 <shell_help>:
{
   11648:	b510      	push	{r4, lr}
   1164a:	4604      	mov	r4, r0
	k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
   1164c:	6880      	ldr	r0, [r0, #8]
   1164e:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_lock(mutex, timeout);
   11652:	f04f 32ff 	mov.w	r2, #4294967295
   11656:	f04f 33ff 	mov.w	r3, #4294967295
   1165a:	f7fc f825 	bl	d6a8 <z_impl_k_mutex_lock>
	shell_internal_help_print(sh);
   1165e:	4620      	mov	r0, r4
   11660:	f7f5 f814 	bl	668c <shell_internal_help_print>
	k_mutex_unlock(&sh->ctx->wr_mtx);
   11664:	68a0      	ldr	r0, [r4, #8]
   11666:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_unlock(mutex);
   1166a:	f7fc f8a1 	bl	d7b0 <z_impl_k_mutex_unlock>
}
   1166e:	bd10      	pop	{r4, pc}

00011670 <shell_set_bypass>:
{
   11670:	b508      	push	{r3, lr}
	sh->ctx->bypass = bypass;
   11672:	6883      	ldr	r3, [r0, #8]
   11674:	6399      	str	r1, [r3, #56]	; 0x38
	if (bypass == NULL) {
   11676:	b101      	cbz	r1, 1167a <shell_set_bypass+0xa>
}
   11678:	bd08      	pop	{r3, pc}
		cmd_buffer_clear(sh);
   1167a:	f7ff fbc9 	bl	10e10 <cmd_buffer_clear>
}
   1167e:	e7fb      	b.n	11678 <shell_set_bypass+0x8>

00011680 <z_shell_fprintf_buffer_flush>:


void z_shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
   11680:	b510      	push	{r4, lr}
   11682:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
   11684:	6883      	ldr	r3, [r0, #8]
			   sh_fprintf->ctrl_blk->buffer_cnt);
   11686:	6902      	ldr	r2, [r0, #16]
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
   11688:	6812      	ldr	r2, [r2, #0]
   1168a:	6801      	ldr	r1, [r0, #0]
   1168c:	68c0      	ldr	r0, [r0, #12]
   1168e:	4798      	blx	r3
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
   11690:	6923      	ldr	r3, [r4, #16]
   11692:	2200      	movs	r2, #0
   11694:	601a      	str	r2, [r3, #0]
}
   11696:	bd10      	pop	{r4, pc}

00011698 <out_func>:
{
   11698:	b538      	push	{r3, r4, r5, lr}
   1169a:	4605      	mov	r5, r0
   1169c:	460c      	mov	r4, r1
	sh = (const struct shell *)sh_fprintf->user_ctx;
   1169e:	68cb      	ldr	r3, [r1, #12]
	if ((sh->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   116a0:	7c1b      	ldrb	r3, [r3, #16]
   116a2:	2b02      	cmp	r3, #2
   116a4:	d00e      	beq.n	116c4 <out_func+0x2c>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (uint8_t)c;
   116a6:	6822      	ldr	r2, [r4, #0]
   116a8:	6923      	ldr	r3, [r4, #16]
   116aa:	681b      	ldr	r3, [r3, #0]
   116ac:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
   116ae:	6922      	ldr	r2, [r4, #16]
   116b0:	6813      	ldr	r3, [r2, #0]
   116b2:	3301      	adds	r3, #1
   116b4:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
   116b6:	6923      	ldr	r3, [r4, #16]
   116b8:	681a      	ldr	r2, [r3, #0]
   116ba:	6863      	ldr	r3, [r4, #4]
   116bc:	429a      	cmp	r2, r3
   116be:	d007      	beq.n	116d0 <out_func+0x38>
}
   116c0:	2000      	movs	r0, #0
   116c2:	bd38      	pop	{r3, r4, r5, pc}
	if ((sh->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   116c4:	280a      	cmp	r0, #10
   116c6:	d1ee      	bne.n	116a6 <out_func+0xe>
		(void)out_func('\r', ctx);
   116c8:	200d      	movs	r0, #13
   116ca:	f7ff ffe5 	bl	11698 <out_func>
   116ce:	e7ea      	b.n	116a6 <out_func+0xe>
		z_shell_fprintf_buffer_flush(sh_fprintf);
   116d0:	4620      	mov	r0, r4
   116d2:	f7ff ffd5 	bl	11680 <z_shell_fprintf_buffer_flush>
   116d6:	e7f3      	b.n	116c0 <out_func+0x28>

000116d8 <line_num_with_buffer_offset_get>:
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
   116d8:	7b03      	ldrb	r3, [r0, #12]
   116da:	4419      	add	r1, r3
   116dc:	8940      	ldrh	r0, [r0, #10]
}
   116de:	fb91 f0f0 	sdiv	r0, r1, r0
   116e2:	4770      	bx	lr

000116e4 <col_num_with_buffer_offset_get>:
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
   116e4:	7b03      	ldrb	r3, [r0, #12]
   116e6:	4419      	add	r1, r3
   116e8:	8943      	ldrh	r3, [r0, #10]
   116ea:	fb91 f2f3 	sdiv	r2, r1, r3
   116ee:	fb03 1112 	mls	r1, r3, r2, r1
}
   116f2:	1c48      	adds	r0, r1, #1
   116f4:	4770      	bx	lr

000116f6 <buffer_trim>:

/** @brief Remove white chars from beginning and end of command buffer.
 *
 */
static void buffer_trim(char *buff, uint16_t *buff_len)
{
   116f6:	b538      	push	{r3, r4, r5, lr}
   116f8:	460d      	mov	r5, r1
	uint16_t i = 0U;

	/* no command in the buffer */
	if (buff[0] == '\0') {
   116fa:	7803      	ldrb	r3, [r0, #0]
   116fc:	b923      	cbnz	r3, 11708 <buffer_trim+0x12>
   116fe:	e023      	b.n	11748 <buffer_trim+0x52>
		return;
	}

	while (isspace((int) buff[*buff_len - 1U]) != 0) {
		*buff_len -= 1U;
   11700:	3a01      	subs	r2, #1
   11702:	b292      	uxth	r2, r2
   11704:	802a      	strh	r2, [r5, #0]
		if (*buff_len == 0U) {
   11706:	b15a      	cbz	r2, 11720 <buffer_trim+0x2a>
	while (isspace((int) buff[*buff_len - 1U]) != 0) {
   11708:	882a      	ldrh	r2, [r5, #0]
   1170a:	1883      	adds	r3, r0, r2
   1170c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   11710:	2b20      	cmp	r3, #32
   11712:	d0f5      	beq.n	11700 <buffer_trim+0xa>
   11714:	3b09      	subs	r3, #9
   11716:	2b04      	cmp	r3, #4
   11718:	d9f2      	bls.n	11700 <buffer_trim+0xa>
			buff[0] = '\0';
			return;
		}
	}
	buff[*buff_len] = '\0';
   1171a:	2300      	movs	r3, #0
   1171c:	5483      	strb	r3, [r0, r2]

	/* Counting whitespace characters starting from beginning of the
	 * command.
	 */
	while (isspace((int) buff[i++]) != 0) {
   1171e:	e004      	b.n	1172a <buffer_trim+0x34>
			buff[0] = '\0';
   11720:	2300      	movs	r3, #0
   11722:	7003      	strb	r3, [r0, #0]
			return;
   11724:	e010      	b.n	11748 <buffer_trim+0x52>
   11726:	2201      	movs	r2, #1
	while (isspace((int) buff[i++]) != 0) {
   11728:	b16a      	cbz	r2, 11746 <buffer_trim+0x50>
   1172a:	461c      	mov	r4, r3
   1172c:	3301      	adds	r3, #1
   1172e:	b29b      	uxth	r3, r3
   11730:	1901      	adds	r1, r0, r4
   11732:	5d02      	ldrb	r2, [r0, r4]
   11734:	2a20      	cmp	r2, #32
   11736:	d0f6      	beq.n	11726 <buffer_trim+0x30>
   11738:	3a09      	subs	r2, #9
   1173a:	2a04      	cmp	r2, #4
   1173c:	d801      	bhi.n	11742 <buffer_trim+0x4c>
   1173e:	2201      	movs	r2, #1
   11740:	e7f2      	b.n	11728 <buffer_trim+0x32>
   11742:	2200      	movs	r2, #0
   11744:	e7f0      	b.n	11728 <buffer_trim+0x32>
	}


	/* Removing counted whitespace characters. */
	if (--i > 0) {
   11746:	b904      	cbnz	r4, 1174a <buffer_trim+0x54>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
		*buff_len = *buff_len - i;
	}
}
   11748:	bd38      	pop	{r3, r4, r5, pc}
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
   1174a:	882a      	ldrh	r2, [r5, #0]
   1174c:	1b12      	subs	r2, r2, r4
   1174e:	3201      	adds	r2, #1
   11750:	f001 fb08 	bl	12d64 <memmove>
		*buff_len = *buff_len - i;
   11754:	882b      	ldrh	r3, [r5, #0]
   11756:	1b1b      	subs	r3, r3, r4
   11758:	802b      	strh	r3, [r5, #0]
   1175a:	e7f5      	b.n	11748 <buffer_trim+0x52>

0001175c <make_argv>:
{
   1175c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11760:	4607      	mov	r7, r0
	char *cmd = *ppcmd;
   11762:	6805      	ldr	r5, [r0, #0]
	char quote = 0;
   11764:	2600      	movs	r6, #0
   11766:	e09c      	b.n	118a2 <make_argv+0x146>
				memmove(cmd, cmd + 1,
   11768:	1c6c      	adds	r4, r5, #1
	return str == NULL ? 0U : (uint16_t)strlen(str);
   1176a:	b14d      	cbz	r5, 11780 <make_argv+0x24>
   1176c:	4628      	mov	r0, r5
   1176e:	f001 fab6 	bl	12cde <strlen>
   11772:	b282      	uxth	r2, r0
   11774:	4621      	mov	r1, r4
   11776:	4628      	mov	r0, r5
   11778:	f001 faf4 	bl	12d64 <memmove>
				cmd += 1;
   1177c:	4625      	mov	r5, r4
				continue;
   1177e:	e090      	b.n	118a2 <make_argv+0x146>
   11780:	2200      	movs	r2, #0
   11782:	e7f7      	b.n	11774 <make_argv+0x18>
				memmove(cmd, cmd + 1,
   11784:	1c6e      	adds	r6, r5, #1
   11786:	b14d      	cbz	r5, 1179c <make_argv+0x40>
   11788:	4628      	mov	r0, r5
   1178a:	f001 faa8 	bl	12cde <strlen>
   1178e:	b282      	uxth	r2, r0
   11790:	4631      	mov	r1, r6
   11792:	4628      	mov	r0, r5
   11794:	f001 fae6 	bl	12d64 <memmove>
				quote = c;
   11798:	4626      	mov	r6, r4
				continue;
   1179a:	e082      	b.n	118a2 <make_argv+0x146>
   1179c:	2200      	movs	r2, #0
   1179e:	e7f7      	b.n	11790 <make_argv+0x34>
			memmove(cmd, cmd + 1, z_shell_strlen(cmd));
   117a0:	1c6c      	adds	r4, r5, #1
   117a2:	b14d      	cbz	r5, 117b8 <make_argv+0x5c>
   117a4:	4628      	mov	r0, r5
   117a6:	f001 fa9a 	bl	12cde <strlen>
   117aa:	b282      	uxth	r2, r0
   117ac:	4621      	mov	r1, r4
   117ae:	4628      	mov	r0, r5
   117b0:	f001 fad8 	bl	12d64 <memmove>
			quote = 0;
   117b4:	2600      	movs	r6, #0
			continue;
   117b6:	e074      	b.n	118a2 <make_argv+0x146>
   117b8:	2200      	movs	r2, #0
   117ba:	e7f7      	b.n	117ac <make_argv+0x50>
				memmove(cmd, cmd + 1,
   117bc:	1c6c      	adds	r4, r5, #1
   117be:	4628      	mov	r0, r5
   117c0:	f001 fa8d 	bl	12cde <strlen>
   117c4:	b282      	uxth	r2, r0
   117c6:	4621      	mov	r1, r4
   117c8:	4628      	mov	r0, r5
   117ca:	f001 facb 	bl	12d64 <memmove>
				cmd += 1;
   117ce:	4625      	mov	r5, r4
				continue;
   117d0:	e067      	b.n	118a2 <make_argv+0x146>
				uint8_t v = 0U;
   117d2:	f04f 0800 	mov.w	r8, #0
				for (i = 2U; i < (2 + 3); i++) {
   117d6:	2402      	movs	r4, #2
   117d8:	2c04      	cmp	r4, #4
   117da:	d80c      	bhi.n	117f6 <make_argv+0x9a>
					t = *(cmd + i);
   117dc:	5d2b      	ldrb	r3, [r5, r4]
					if (t >= '0' && t <= '7') {
   117de:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   117e2:	b2d2      	uxtb	r2, r2
   117e4:	2a07      	cmp	r2, #7
   117e6:	d806      	bhi.n	117f6 <make_argv+0x9a>
						v = (v << 3) | (t - '0');
   117e8:	ea42 02c8 	orr.w	r2, r2, r8, lsl #3
   117ec:	fa5f f882 	uxtb.w	r8, r2
				for (i = 2U; i < (2 + 3); i++) {
   117f0:	3401      	adds	r4, #1
   117f2:	b2e4      	uxtb	r4, r4
   117f4:	e7f0      	b.n	117d8 <make_argv+0x7c>
				if (i > 2) {
   117f6:	2c02      	cmp	r4, #2
   117f8:	d96d      	bls.n	118d6 <make_argv+0x17a>
					memmove(cmd, cmd + (i - 1),
   117fa:	f104 39ff 	add.w	r9, r4, #4294967295
   117fe:	44a9      	add	r9, r5
   11800:	b165      	cbz	r5, 1181c <make_argv+0xc0>
   11802:	4628      	mov	r0, r5
   11804:	f001 fa6b 	bl	12cde <strlen>
   11808:	b282      	uxth	r2, r0
						z_shell_strlen(cmd) - (i - 2));
   1180a:	3c02      	subs	r4, #2
					memmove(cmd, cmd + (i - 1),
   1180c:	1b12      	subs	r2, r2, r4
   1180e:	4649      	mov	r1, r9
   11810:	4628      	mov	r0, r5
   11812:	f001 faa7 	bl	12d64 <memmove>
					*cmd++ = v;
   11816:	f805 8b01 	strb.w	r8, [r5], #1
					continue;
   1181a:	e042      	b.n	118a2 <make_argv+0x146>
   1181c:	2200      	movs	r2, #0
   1181e:	e7f4      	b.n	1180a <make_argv+0xae>
					} else if ((t >= 'a') &&
   11820:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   11824:	b2d2      	uxtb	r2, r2
   11826:	2a05      	cmp	r2, #5
   11828:	d814      	bhi.n	11854 <make_argv+0xf8>
						v = (v << 4) | (t - 'a' + 10);
   1182a:	3b57      	subs	r3, #87	; 0x57
   1182c:	b2db      	uxtb	r3, r3
   1182e:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
   11832:	fa5f f883 	uxtb.w	r8, r3
				for (i = 2U; i < (2 + 2); i++) {
   11836:	3401      	adds	r4, #1
   11838:	b2e4      	uxtb	r4, r4
   1183a:	2c03      	cmp	r4, #3
   1183c:	d816      	bhi.n	1186c <make_argv+0x110>
					t = *(cmd + i);
   1183e:	5d2b      	ldrb	r3, [r5, r4]
					if (t >= '0' && t <= '9') {
   11840:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   11844:	b2d2      	uxtb	r2, r2
   11846:	2a09      	cmp	r2, #9
   11848:	d8ea      	bhi.n	11820 <make_argv+0xc4>
						v = (v << 4) | (t - '0');
   1184a:	ea42 1208 	orr.w	r2, r2, r8, lsl #4
   1184e:	fa5f f882 	uxtb.w	r8, r2
   11852:	e7f0      	b.n	11836 <make_argv+0xda>
					} else if ((t >= 'A') && (t <= 'F')) {
   11854:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   11858:	b2d2      	uxtb	r2, r2
   1185a:	2a05      	cmp	r2, #5
   1185c:	d806      	bhi.n	1186c <make_argv+0x110>
						v = (v << 4) | (t - 'A' + 10);
   1185e:	3b37      	subs	r3, #55	; 0x37
   11860:	b2db      	uxtb	r3, r3
   11862:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
   11866:	fa5f f883 	uxtb.w	r8, r3
   1186a:	e7e4      	b.n	11836 <make_argv+0xda>
				if (i > 2) {
   1186c:	2c02      	cmp	r4, #2
   1186e:	d917      	bls.n	118a0 <make_argv+0x144>
					memmove(cmd, cmd + (i - 1),
   11870:	f104 39ff 	add.w	r9, r4, #4294967295
   11874:	44a9      	add	r9, r5
   11876:	b165      	cbz	r5, 11892 <make_argv+0x136>
   11878:	4628      	mov	r0, r5
   1187a:	f001 fa30 	bl	12cde <strlen>
   1187e:	b282      	uxth	r2, r0
						z_shell_strlen(cmd) - (i - 2));
   11880:	3c02      	subs	r4, #2
					memmove(cmd, cmd + (i - 1),
   11882:	1b12      	subs	r2, r2, r4
   11884:	4649      	mov	r1, r9
   11886:	4628      	mov	r0, r5
   11888:	f001 fa6c 	bl	12d64 <memmove>
					*cmd++ = v;
   1188c:	f805 8b01 	strb.w	r8, [r5], #1
					continue;
   11890:	e007      	b.n	118a2 <make_argv+0x146>
   11892:	2200      	movs	r2, #0
   11894:	e7f4      	b.n	11880 <make_argv+0x124>
   11896:	2c20      	cmp	r4, #32
   11898:	d023      	beq.n	118e2 <make_argv+0x186>
   1189a:	3c09      	subs	r4, #9
   1189c:	2c04      	cmp	r4, #4
   1189e:	d920      	bls.n	118e2 <make_argv+0x186>
		cmd += 1;
   118a0:	3501      	adds	r5, #1
		c = *cmd;
   118a2:	782c      	ldrb	r4, [r5, #0]
		if (c == '\0') {
   118a4:	b1ec      	cbz	r4, 118e2 <make_argv+0x186>
		if (!quote) {
   118a6:	b946      	cbnz	r6, 118ba <make_argv+0x15e>
			switch (c) {
   118a8:	2c27      	cmp	r4, #39	; 0x27
   118aa:	f43f af6b 	beq.w	11784 <make_argv+0x28>
   118ae:	2c5c      	cmp	r4, #92	; 0x5c
   118b0:	f43f af5a 	beq.w	11768 <make_argv+0xc>
   118b4:	2c22      	cmp	r4, #34	; 0x22
   118b6:	f43f af65 	beq.w	11784 <make_argv+0x28>
		if (quote == c) {
   118ba:	42a6      	cmp	r6, r4
   118bc:	f43f af70 	beq.w	117a0 <make_argv+0x44>
		if (quote && c == '\\') {
   118c0:	2e00      	cmp	r6, #0
   118c2:	d0e8      	beq.n	11896 <make_argv+0x13a>
   118c4:	2c5c      	cmp	r4, #92	; 0x5c
   118c6:	d1eb      	bne.n	118a0 <make_argv+0x144>
			char t = *(cmd + 1);
   118c8:	786b      	ldrb	r3, [r5, #1]
			if (t == quote) {
   118ca:	429e      	cmp	r6, r3
   118cc:	f43f af76 	beq.w	117bc <make_argv+0x60>
			if (t == '0') {
   118d0:	2b30      	cmp	r3, #48	; 0x30
   118d2:	f43f af7e 	beq.w	117d2 <make_argv+0x76>
			if (t == 'x') {
   118d6:	2b78      	cmp	r3, #120	; 0x78
   118d8:	d1e2      	bne.n	118a0 <make_argv+0x144>
				uint8_t v = 0U;
   118da:	f04f 0800 	mov.w	r8, #0
				for (i = 2U; i < (2 + 2); i++) {
   118de:	2402      	movs	r4, #2
   118e0:	e7ab      	b.n	1183a <make_argv+0xde>
	*ppcmd = cmd;
   118e2:	603d      	str	r5, [r7, #0]
}
   118e4:	4630      	mov	r0, r6
   118e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000118ea <z_column_span_with_buffer_offsets_get>:
{
   118ea:	b570      	push	{r4, r5, r6, lr}
   118ec:	4605      	mov	r5, r0
   118ee:	460e      	mov	r6, r1
	return col_num_with_buffer_offset_get(cons, offset2)
   118f0:	4611      	mov	r1, r2
   118f2:	f7ff fef7 	bl	116e4 <col_num_with_buffer_offset_get>
   118f6:	4604      	mov	r4, r0
			- col_num_with_buffer_offset_get(cons, offset1);
   118f8:	4631      	mov	r1, r6
   118fa:	4628      	mov	r0, r5
   118fc:	f7ff fef2 	bl	116e4 <col_num_with_buffer_offset_get>
}
   11900:	1a20      	subs	r0, r4, r0
   11902:	bd70      	pop	{r4, r5, r6, pc}

00011904 <z_row_span_with_buffer_offsets_get>:
{
   11904:	b570      	push	{r4, r5, r6, lr}
   11906:	4605      	mov	r5, r0
   11908:	460e      	mov	r6, r1
	return line_num_with_buffer_offset_get(cons, offset2)
   1190a:	4611      	mov	r1, r2
   1190c:	f7ff fee4 	bl	116d8 <line_num_with_buffer_offset_get>
   11910:	4604      	mov	r4, r0
		- line_num_with_buffer_offset_get(cons, offset1);
   11912:	4631      	mov	r1, r6
   11914:	4628      	mov	r0, r5
   11916:	f7ff fedf 	bl	116d8 <line_num_with_buffer_offset_get>
}
   1191a:	1a20      	subs	r0, r4, r0
   1191c:	bd70      	pop	{r4, r5, r6, pc}

0001191e <z_shell_multiline_data_calc>:
{
   1191e:	b500      	push	{lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   11920:	f890 e00c 	ldrb.w	lr, [r0, #12]
   11924:	4471      	add	r1, lr
   11926:	8943      	ldrh	r3, [r0, #10]
   11928:	fb91 fcf3 	sdiv	ip, r1, r3
   1192c:	fb03 111c 	mls	r1, r3, ip, r1
   11930:	3101      	adds	r1, #1
   11932:	8001      	strh	r1, [r0, #0]
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
   11934:	f10c 0c01 	add.w	ip, ip, #1
   11938:	f8a0 c004 	strh.w	ip, [r0, #4]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   1193c:	4472      	add	r2, lr
   1193e:	fb92 f1f3 	sdiv	r1, r2, r3
   11942:	f101 0c01 	add.w	ip, r1, #1
   11946:	f8a0 c006 	strh.w	ip, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   1194a:	fb03 2211 	mls	r2, r3, r1, r2
   1194e:	3201      	adds	r2, #1
   11950:	8042      	strh	r2, [r0, #2]
}
   11952:	f85d fb04 	ldr.w	pc, [sp], #4

00011956 <z_shell_make_argv>:
{
   11956:	b5f0      	push	{r4, r5, r6, r7, lr}
   11958:	b083      	sub	sp, #12
   1195a:	4605      	mov	r5, r0
   1195c:	460f      	mov	r7, r1
   1195e:	9201      	str	r2, [sp, #4]
   11960:	461e      	mov	r6, r3
	*argc = 0;
   11962:	2000      	movs	r0, #0
   11964:	6028      	str	r0, [r5, #0]
   11966:	e005      	b.n	11974 <z_shell_make_argv+0x1e>
			*cmd++ = '\0';
   11968:	1c54      	adds	r4, r2, #1
   1196a:	9401      	str	r4, [sp, #4]
   1196c:	f04f 0c00 	mov.w	ip, #0
   11970:	f882 c000 	strb.w	ip, [r2]
		c = *cmd;
   11974:	9a01      	ldr	r2, [sp, #4]
   11976:	7811      	ldrb	r1, [r2, #0]
		if (c == '\0') {
   11978:	b191      	cbz	r1, 119a0 <z_shell_make_argv+0x4a>
   1197a:	2920      	cmp	r1, #32
   1197c:	d0f4      	beq.n	11968 <z_shell_make_argv+0x12>
   1197e:	f1a1 0409 	sub.w	r4, r1, #9
   11982:	2c04      	cmp	r4, #4
   11984:	d9f0      	bls.n	11968 <z_shell_make_argv+0x12>
		argv[(*argc)++] = cmd;
   11986:	682b      	ldr	r3, [r5, #0]
   11988:	1c5a      	adds	r2, r3, #1
   1198a:	602a      	str	r2, [r5, #0]
   1198c:	9a01      	ldr	r2, [sp, #4]
   1198e:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
		if (*argc == max_argc) {
   11992:	682b      	ldr	r3, [r5, #0]
   11994:	42b3      	cmp	r3, r6
   11996:	d003      	beq.n	119a0 <z_shell_make_argv+0x4a>
		quote = make_argv(&cmd, c);
   11998:	a801      	add	r0, sp, #4
   1199a:	f7ff fedf 	bl	1175c <make_argv>
   1199e:	e7e9      	b.n	11974 <z_shell_make_argv+0x1e>
}
   119a0:	b003      	add	sp, #12
   119a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000119a4 <z_shell_pattern_remove>:
{
   119a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   119a6:	4607      	mov	r7, r0
   119a8:	460e      	mov	r6, r1
   119aa:	4615      	mov	r5, r2
	char *pattern_addr = strstr(buff, pattern);
   119ac:	4611      	mov	r1, r2
   119ae:	f001 f945 	bl	12c3c <strstr>
   119b2:	4604      	mov	r4, r0
   119b4:	b1d5      	cbz	r5, 119ec <z_shell_pattern_remove+0x48>
   119b6:	4628      	mov	r0, r5
   119b8:	f001 f991 	bl	12cde <strlen>
   119bc:	b285      	uxth	r5, r0
	if (!pattern_addr) {
   119be:	b1a4      	cbz	r4, 119ea <z_shell_pattern_remove+0x46>
	if (pattern_addr > buff) {
   119c0:	42a7      	cmp	r7, r4
   119c2:	d203      	bcs.n	119cc <z_shell_pattern_remove+0x28>
		if (*(pattern_addr - 1) == ' ') {
   119c4:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   119c8:	2b20      	cmp	r3, #32
   119ca:	d011      	beq.n	119f0 <z_shell_pattern_remove+0x4c>
   119cc:	4620      	mov	r0, r4
   119ce:	f001 f986 	bl	12cde <strlen>
   119d2:	b282      	uxth	r2, r0
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   119d4:	1b52      	subs	r2, r2, r5
   119d6:	b292      	uxth	r2, r2
   119d8:	3201      	adds	r2, #1
	*buff_len -= pattern_len;
   119da:	8833      	ldrh	r3, [r6, #0]
   119dc:	1b5b      	subs	r3, r3, r5
   119de:	8033      	strh	r3, [r6, #0]
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
   119e0:	b292      	uxth	r2, r2
   119e2:	1961      	adds	r1, r4, r5
   119e4:	4620      	mov	r0, r4
   119e6:	f001 f9bd 	bl	12d64 <memmove>
}
   119ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   119ec:	2500      	movs	r5, #0
   119ee:	e7e6      	b.n	119be <z_shell_pattern_remove+0x1a>
			pattern_len++; /* space needs to be removed as well */
   119f0:	3501      	adds	r5, #1
   119f2:	b2ad      	uxth	r5, r5
			pattern_addr--; /* set pointer to space */
   119f4:	3c01      	subs	r4, #1
   119f6:	e7e9      	b.n	119cc <z_shell_pattern_remove+0x28>

000119f8 <z_shell_find_cmd>:
{
   119f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   119fc:	b086      	sub	sp, #24
   119fe:	460f      	mov	r7, r1
   11a00:	4616      	mov	r6, r2
	if (parent) {
   11a02:	4680      	mov	r8, r0
   11a04:	b130      	cbz	r0, 11a14 <z_shell_find_cmd+0x1c>
		memcpy(&parent_cpy, parent, sizeof(struct shell_static_entry));
   11a06:	2214      	movs	r2, #20
   11a08:	4601      	mov	r1, r0
   11a0a:	a801      	add	r0, sp, #4
   11a0c:	f001 f9bd 	bl	12d8a <memcpy>
		parent = &parent_cpy;
   11a10:	f10d 0804 	add.w	r8, sp, #4
   11a14:	2400      	movs	r4, #0
	while ((entry = z_shell_cmd_get(parent, idx++, dloc)) != NULL) {
   11a16:	4621      	mov	r1, r4
   11a18:	4632      	mov	r2, r6
   11a1a:	3401      	adds	r4, #1
   11a1c:	4640      	mov	r0, r8
   11a1e:	f7f5 fbdd 	bl	71dc <z_shell_cmd_get>
   11a22:	4605      	mov	r5, r0
   11a24:	b128      	cbz	r0, 11a32 <z_shell_find_cmd+0x3a>
		if (strcmp(cmd_str, entry->syntax) == 0) {
   11a26:	6829      	ldr	r1, [r5, #0]
   11a28:	4638      	mov	r0, r7
   11a2a:	f001 f96b 	bl	12d04 <strcmp>
   11a2e:	2800      	cmp	r0, #0
   11a30:	d1f1      	bne.n	11a16 <z_shell_find_cmd+0x1e>
}
   11a32:	4628      	mov	r0, r5
   11a34:	b006      	add	sp, #24
   11a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011a3a <z_shell_get_last_command>:
{
   11a3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11a3e:	4606      	mov	r6, r0
   11a40:	460f      	mov	r7, r1
   11a42:	4615      	mov	r5, r2
   11a44:	461c      	mov	r4, r3
   11a46:	f8dd 8020 	ldr.w	r8, [sp, #32]
   11a4a:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
   11a4e:	2300      	movs	r3, #0
   11a50:	6023      	str	r3, [r4, #0]
	while (*match_arg < argc) {
   11a52:	e017      	b.n	11a84 <z_shell_get_last_command+0x4a>
		entry = z_shell_find_cmd(entry, argv[*match_arg], dloc);
   11a54:	6823      	ldr	r3, [r4, #0]
   11a56:	4642      	mov	r2, r8
   11a58:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   11a5c:	4630      	mov	r0, r6
   11a5e:	f7ff ffcb 	bl	119f8 <z_shell_find_cmd>
		if (entry) {
   11a62:	b158      	cbz	r0, 11a7c <z_shell_get_last_command+0x42>
			(*match_arg)++;
   11a64:	6822      	ldr	r2, [r4, #0]
   11a66:	1c51      	adds	r1, r2, #1
   11a68:	6021      	str	r1, [r4, #0]
		if (only_static && (entry == dloc)) {
   11a6a:	f1b9 0f00 	cmp.w	r9, #0
   11a6e:	d008      	beq.n	11a82 <z_shell_get_last_command+0x48>
   11a70:	4580      	cmp	r8, r0
   11a72:	d001      	beq.n	11a78 <z_shell_get_last_command+0x3e>
		entry = z_shell_find_cmd(entry, argv[*match_arg], dloc);
   11a74:	4606      	mov	r6, r0
   11a76:	e005      	b.n	11a84 <z_shell_get_last_command+0x4a>
			(*match_arg)--;
   11a78:	6022      	str	r2, [r4, #0]
			return NULL;
   11a7a:	2600      	movs	r6, #0
}
   11a7c:	4630      	mov	r0, r6
   11a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		entry = z_shell_find_cmd(entry, argv[*match_arg], dloc);
   11a82:	4606      	mov	r6, r0
	while (*match_arg < argc) {
   11a84:	6823      	ldr	r3, [r4, #0]
   11a86:	42bb      	cmp	r3, r7
   11a88:	d2f8      	bcs.n	11a7c <z_shell_get_last_command+0x42>
			if (z_shell_has_wildcard(argv[*match_arg])) {
   11a8a:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
   11a8e:	f000 fed8 	bl	12842 <z_shell_has_wildcard>
   11a92:	2800      	cmp	r0, #0
   11a94:	d0de      	beq.n	11a54 <z_shell_get_last_command+0x1a>
				(*match_arg)++;
   11a96:	6823      	ldr	r3, [r4, #0]
   11a98:	3301      	adds	r3, #1
   11a9a:	6023      	str	r3, [r4, #0]
				continue;
   11a9c:	e7f2      	b.n	11a84 <z_shell_get_last_command+0x4a>

00011a9e <z_shell_spaces_trim>:
   11a9e:	b388      	cbz	r0, 11b04 <z_shell_spaces_trim+0x66>
{
   11aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11aa2:	4606      	mov	r6, r0
   11aa4:	f001 f91b 	bl	12cde <strlen>
   11aa8:	b287      	uxth	r7, r0
	for (uint16_t i = 0; i < len - 1; i++) {
   11aaa:	2400      	movs	r4, #0
	uint16_t shift = 0U;
   11aac:	4625      	mov	r5, r4
   11aae:	e00f      	b.n	11ad0 <z_shell_spaces_trim+0x32>
					shift++;
   11ab0:	3501      	adds	r5, #1
   11ab2:	b2ad      	uxth	r5, r5
			for (uint16_t j = i + 1; j < len; j++) {
   11ab4:	3201      	adds	r2, #1
   11ab6:	b292      	uxth	r2, r2
   11ab8:	4297      	cmp	r7, r2
   11aba:	d907      	bls.n	11acc <z_shell_spaces_trim+0x2e>
				if (isspace((int)str[j]) != 0) {
   11abc:	18b1      	adds	r1, r6, r2
   11abe:	5cb3      	ldrb	r3, [r6, r2]
   11ac0:	2b20      	cmp	r3, #32
   11ac2:	d0f5      	beq.n	11ab0 <z_shell_spaces_trim+0x12>
   11ac4:	3b09      	subs	r3, #9
   11ac6:	2b04      	cmp	r3, #4
   11ac8:	d9f2      	bls.n	11ab0 <z_shell_spaces_trim+0x12>
				if (shift > 0) {
   11aca:	b97d      	cbnz	r5, 11aec <z_shell_spaces_trim+0x4e>
	for (uint16_t i = 0; i < len - 1; i++) {
   11acc:	3401      	adds	r4, #1
   11ace:	b2a4      	uxth	r4, r4
   11ad0:	46bc      	mov	ip, r7
   11ad2:	1e7b      	subs	r3, r7, #1
   11ad4:	429c      	cmp	r4, r3
   11ad6:	da14      	bge.n	11b02 <z_shell_spaces_trim+0x64>
		if (isspace((int)str[i]) != 0) {
   11ad8:	4620      	mov	r0, r4
   11ada:	5d33      	ldrb	r3, [r6, r4]
   11adc:	2b20      	cmp	r3, #32
   11ade:	d002      	beq.n	11ae6 <z_shell_spaces_trim+0x48>
   11ae0:	3b09      	subs	r3, #9
   11ae2:	2b04      	cmp	r3, #4
   11ae4:	d8f2      	bhi.n	11acc <z_shell_spaces_trim+0x2e>
			for (uint16_t j = i + 1; j < len; j++) {
   11ae6:	1c62      	adds	r2, r4, #1
   11ae8:	b292      	uxth	r2, r2
   11aea:	e7e5      	b.n	11ab8 <z_shell_spaces_trim+0x1a>
					memmove(&str[i + 1],
   11aec:	3001      	adds	r0, #1
						len - j + 1);
   11aee:	ebac 0202 	sub.w	r2, ip, r2
					memmove(&str[i + 1],
   11af2:	3201      	adds	r2, #1
   11af4:	4430      	add	r0, r6
   11af6:	f001 f935 	bl	12d64 <memmove>
					len -= shift;
   11afa:	1b7d      	subs	r5, r7, r5
   11afc:	b2af      	uxth	r7, r5
					shift = 0U;
   11afe:	2500      	movs	r5, #0
   11b00:	e7e4      	b.n	11acc <z_shell_spaces_trim+0x2e>
}
   11b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11b04:	4770      	bx	lr

00011b06 <z_shell_cmd_trim>:

void z_shell_cmd_trim(const struct shell *sh)
{
   11b06:	b510      	push	{r4, lr}
   11b08:	4604      	mov	r4, r0
	buffer_trim(sh->ctx->cmd_buff, &sh->ctx->cmd_buff_len);
   11b0a:	6880      	ldr	r0, [r0, #8]
   11b0c:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   11b10:	3042      	adds	r0, #66	; 0x42
   11b12:	f7ff fdf0 	bl	116f6 <buffer_trim>
	sh->ctx->cmd_buff_pos = sh->ctx->cmd_buff_len;
   11b16:	68a3      	ldr	r3, [r4, #8]
   11b18:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   11b1a:	87da      	strh	r2, [r3, #62]	; 0x3e
}
   11b1c:	bd10      	pop	{r4, pc}

00011b1e <shell_device_lookup>:

const struct device *shell_device_lookup(size_t idx,
				   const char *prefix)
{
   11b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11b22:	b082      	sub	sp, #8
   11b24:	4607      	mov	r7, r0
   11b26:	460d      	mov	r5, r1
	size_t match_idx = 0;
	const struct device *dev;
	size_t len = z_device_get_all_static(&dev);
   11b28:	a801      	add	r0, sp, #4
   11b2a:	f7fb f997 	bl	ce5c <z_device_get_all_static>
	const struct device *dev_end = dev + len;
   11b2e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   11b32:	9c01      	ldr	r4, [sp, #4]
   11b34:	eb04 0480 	add.w	r4, r4, r0, lsl #2
	size_t match_idx = 0;
   11b38:	2600      	movs	r6, #0

	while (dev < dev_end) {
   11b3a:	e005      	b.n	11b48 <shell_device_lookup+0x2a>
		    && (dev->name != NULL)
		    && (strlen(dev->name) != 0)
		    && ((prefix == NULL)
			|| (strncmp(prefix, dev->name,
				    strlen(prefix)) == 0))) {
			if (match_idx == idx) {
   11b3c:	42be      	cmp	r6, r7
   11b3e:	d022      	beq.n	11b86 <shell_device_lookup+0x68>
				return dev;
			}
			++match_idx;
   11b40:	3601      	adds	r6, #1
		}
		++dev;
   11b42:	9b01      	ldr	r3, [sp, #4]
   11b44:	331c      	adds	r3, #28
   11b46:	9301      	str	r3, [sp, #4]
	while (dev < dev_end) {
   11b48:	9801      	ldr	r0, [sp, #4]
   11b4a:	42a0      	cmp	r0, r4
   11b4c:	d21d      	bcs.n	11b8a <shell_device_lookup+0x6c>
	return z_device_is_ready(dev);
   11b4e:	f002 fd6f 	bl	14630 <z_device_is_ready>
		if (device_is_ready(dev)
   11b52:	2800      	cmp	r0, #0
   11b54:	d0f5      	beq.n	11b42 <shell_device_lookup+0x24>
		    && (dev->name != NULL)
   11b56:	9b01      	ldr	r3, [sp, #4]
   11b58:	6818      	ldr	r0, [r3, #0]
   11b5a:	2800      	cmp	r0, #0
   11b5c:	d0f1      	beq.n	11b42 <shell_device_lookup+0x24>
		    && (strlen(dev->name) != 0)
   11b5e:	f001 f8be 	bl	12cde <strlen>
   11b62:	2800      	cmp	r0, #0
   11b64:	d0ed      	beq.n	11b42 <shell_device_lookup+0x24>
		    && ((prefix == NULL)
   11b66:	2d00      	cmp	r5, #0
   11b68:	d0e8      	beq.n	11b3c <shell_device_lookup+0x1e>
			|| (strncmp(prefix, dev->name,
   11b6a:	9b01      	ldr	r3, [sp, #4]
   11b6c:	f8d3 8000 	ldr.w	r8, [r3]
   11b70:	4628      	mov	r0, r5
   11b72:	f001 f8b4 	bl	12cde <strlen>
   11b76:	4602      	mov	r2, r0
   11b78:	4641      	mov	r1, r8
   11b7a:	4628      	mov	r0, r5
   11b7c:	f001 f8cd 	bl	12d1a <strncmp>
   11b80:	2800      	cmp	r0, #0
   11b82:	d1de      	bne.n	11b42 <shell_device_lookup+0x24>
   11b84:	e7da      	b.n	11b3c <shell_device_lookup+0x1e>
				return dev;
   11b86:	9801      	ldr	r0, [sp, #4]
   11b88:	e000      	b.n	11b8c <shell_device_lookup+0x6e>
	}

	return NULL;
   11b8a:	2000      	movs	r0, #0
}
   11b8c:	b002      	add	sp, #8
   11b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011b92 <shell_strtoul>:

	return val;
}

unsigned long shell_strtoul(const char *str, int base, int *err)
{
   11b92:	b570      	push	{r4, r5, r6, lr}
   11b94:	b082      	sub	sp, #8
   11b96:	4616      	mov	r6, r2
	unsigned long val;
	char *endptr = NULL;
   11b98:	2300      	movs	r3, #0
   11b9a:	9301      	str	r3, [sp, #4]

	if (*str == '-') {
   11b9c:	7803      	ldrb	r3, [r0, #0]
   11b9e:	2b2d      	cmp	r3, #45	; 0x2d
   11ba0:	d01e      	beq.n	11be0 <shell_strtoul+0x4e>
   11ba2:	4604      	mov	r4, r0
   11ba4:	460d      	mov	r5, r1
   11ba6:	f7fb f99b 	bl	cee0 <z_impl_z_errno>
		*err = -EINVAL;
		return 0;
	}

	errno = 0;
   11baa:	2300      	movs	r3, #0
   11bac:	6003      	str	r3, [r0, #0]
	val = strtoul(str, &endptr, base);
   11bae:	462a      	mov	r2, r5
   11bb0:	a901      	add	r1, sp, #4
   11bb2:	4620      	mov	r0, r4
   11bb4:	f000 ffb9 	bl	12b2a <strtoul>
   11bb8:	4605      	mov	r5, r0
   11bba:	f7fb f991 	bl	cee0 <z_impl_z_errno>
	if (errno == ERANGE) {
   11bbe:	6803      	ldr	r3, [r0, #0]
   11bc0:	2b22      	cmp	r3, #34	; 0x22
   11bc2:	d014      	beq.n	11bee <shell_strtoul+0x5c>
   11bc4:	f7fb f98c 	bl	cee0 <z_impl_z_errno>
		*err = -ERANGE;
		return 0;
	} else if (errno || endptr == str || *endptr) {
   11bc8:	6803      	ldr	r3, [r0, #0]
   11bca:	b923      	cbnz	r3, 11bd6 <shell_strtoul+0x44>
   11bcc:	9b01      	ldr	r3, [sp, #4]
   11bce:	42a3      	cmp	r3, r4
   11bd0:	d001      	beq.n	11bd6 <shell_strtoul+0x44>
   11bd2:	781b      	ldrb	r3, [r3, #0]
   11bd4:	b143      	cbz	r3, 11be8 <shell_strtoul+0x56>
		*err = -EINVAL;
   11bd6:	f06f 0315 	mvn.w	r3, #21
   11bda:	6033      	str	r3, [r6, #0]
		return 0;
   11bdc:	2500      	movs	r5, #0
   11bde:	e003      	b.n	11be8 <shell_strtoul+0x56>
		*err = -EINVAL;
   11be0:	f06f 0315 	mvn.w	r3, #21
   11be4:	6013      	str	r3, [r2, #0]
		return 0;
   11be6:	2500      	movs	r5, #0
	}

	return val;
}
   11be8:	4628      	mov	r0, r5
   11bea:	b002      	add	sp, #8
   11bec:	bd70      	pop	{r4, r5, r6, pc}
		*err = -ERANGE;
   11bee:	f06f 0321 	mvn.w	r3, #33	; 0x21
   11bf2:	6033      	str	r3, [r6, #0]
		return 0;
   11bf4:	2500      	movs	r5, #0
   11bf6:	e7f7      	b.n	11be8 <shell_strtoul+0x56>

00011bf8 <shift_calc>:
{
   11bf8:	b570      	push	{r4, r5, r6, lr}
   11bfa:	4604      	mov	r4, r0
   11bfc:	4615      	mov	r5, r2
	uint16_t ret = 0U;
   11bfe:	2000      	movs	r0, #0
	bool found = false;
   11c00:	4606      	mov	r6, r0
   11c02:	e005      	b.n	11c10 <shift_calc+0x18>
		    ((idx == len) && (sign > 0))) {
   11c04:	2b00      	cmp	r3, #0
   11c06:	dd0d      	ble.n	11c24 <shift_calc+0x2c>
}
   11c08:	bd70      	pop	{r4, r5, r6, pc}
			found = true;
   11c0a:	2601      	movs	r6, #1
		ret++;
   11c0c:	3001      	adds	r0, #1
   11c0e:	b280      	uxth	r0, r0
		idx = pos + ret * sign;
   11c10:	fb13 f200 	smulbb	r2, r3, r0
   11c14:	fa11 f282 	uxtah	r2, r1, r2
   11c18:	b292      	uxth	r2, r2
		if (((idx == 0U) && (sign < 0)) ||
   11c1a:	b90a      	cbnz	r2, 11c20 <shift_calc+0x28>
   11c1c:	2b00      	cmp	r3, #0
   11c1e:	dbf3      	blt.n	11c08 <shift_calc+0x10>
   11c20:	42aa      	cmp	r2, r5
   11c22:	d0ef      	beq.n	11c04 <shift_calc+0xc>
		if (isalnum((int)str[idx]) != 0) {
   11c24:	f814 e002 	ldrb.w	lr, [r4, r2]
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   11c28:	f04e 0c20 	orr.w	ip, lr, #32
   11c2c:	f1ac 0c61 	sub.w	ip, ip, #97	; 0x61
				(int)'z') ? (chr - 32) : (chr));
}

static inline int isalnum(int chr)
{
	return (int)(isalpha(chr) || isdigit(chr));
   11c30:	f1bc 0f19 	cmp.w	ip, #25
   11c34:	d9e9      	bls.n	11c0a <shift_calc+0x12>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   11c36:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
	return (int)(isalpha(chr) || isdigit(chr));
   11c3a:	f1be 0f09 	cmp.w	lr, #9
   11c3e:	d902      	bls.n	11c46 <shift_calc+0x4e>
			if (found) {
   11c40:	2e00      	cmp	r6, #0
   11c42:	d0e3      	beq.n	11c0c <shift_calc+0x14>
   11c44:	e7e0      	b.n	11c08 <shift_calc+0x10>
			found = true;
   11c46:	2601      	movs	r6, #1
   11c48:	e7e0      	b.n	11c0c <shift_calc+0x14>

00011c4a <z_shell_raw_fprintf>:
{
   11c4a:	b40e      	push	{r1, r2, r3}
   11c4c:	b500      	push	{lr}
   11c4e:	b082      	sub	sp, #8
   11c50:	aa03      	add	r2, sp, #12
   11c52:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   11c56:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   11c58:	f7f5 faaa 	bl	71b0 <z_shell_fprintf_fmt>
}
   11c5c:	b002      	add	sp, #8
   11c5e:	f85d eb04 	ldr.w	lr, [sp], #4
   11c62:	b003      	add	sp, #12
   11c64:	4770      	bx	lr

00011c66 <full_line_cmd>:
{
   11c66:	b538      	push	{r3, r4, r5, lr}
   11c68:	4605      	mov	r5, r0
	return ((sh->ctx->cmd_buff_len + z_shell_strlen(sh->ctx->prompt))
   11c6a:	6883      	ldr	r3, [r0, #8]
   11c6c:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
   11c6e:	6818      	ldr	r0, [r3, #0]
   11c70:	b168      	cbz	r0, 11c8e <full_line_cmd+0x28>
   11c72:	f001 f834 	bl	12cde <strlen>
   11c76:	b280      	uxth	r0, r0
   11c78:	1823      	adds	r3, r4, r0
			% sh->ctx->vt100_ctx.cons.terminal_wid == 0U);
   11c7a:	68aa      	ldr	r2, [r5, #8]
   11c7c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
   11c7e:	fb93 f1f2 	sdiv	r1, r3, r2
   11c82:	fb02 3011 	mls	r0, r2, r1, r3
}
   11c86:	fab0 f080 	clz	r0, r0
   11c8a:	0940      	lsrs	r0, r0, #5
   11c8c:	bd38      	pop	{r3, r4, r5, pc}
   11c8e:	2000      	movs	r0, #0
   11c90:	e7f2      	b.n	11c78 <full_line_cmd+0x12>

00011c92 <z_flag_tx_rdy_set>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, tx_rdy, val, ret);
   11c92:	6883      	ldr	r3, [r0, #8]
   11c94:	f503 7319 	add.w	r3, r3, #612	; 0x264
   11c98:	b171      	cbz	r1, 11cb8 <z_flag_tx_rdy_set+0x26>
   11c9a:	f3bf 8f5b 	dmb	ish
   11c9e:	e853 0f00 	ldrex	r0, [r3]
   11ca2:	f040 0202 	orr.w	r2, r0, #2
   11ca6:	e843 2100 	strex	r1, r2, [r3]
   11caa:	2900      	cmp	r1, #0
   11cac:	d1f7      	bne.n	11c9e <z_flag_tx_rdy_set+0xc>
   11cae:	f3bf 8f5b 	dmb	ish
}
   11cb2:	f3c0 0040 	ubfx	r0, r0, #1, #1
   11cb6:	4770      	bx	lr
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, tx_rdy, val, ret);
   11cb8:	f3bf 8f5b 	dmb	ish
   11cbc:	e853 0f00 	ldrex	r0, [r3]
   11cc0:	f020 0202 	bic.w	r2, r0, #2
   11cc4:	e843 2100 	strex	r1, r2, [r3]
   11cc8:	2900      	cmp	r1, #0
   11cca:	d1f7      	bne.n	11cbc <z_flag_tx_rdy_set+0x2a>
   11ccc:	f3bf 8f5b 	dmb	ish
   11cd0:	e7ef      	b.n	11cb2 <z_flag_tx_rdy_set+0x20>

00011cd2 <shell_pend_on_txdone>:
{
   11cd2:	b510      	push	{r4, lr}
   11cd4:	b086      	sub	sp, #24
   11cd6:	4604      	mov	r4, r0
	    (sh->ctx->state < SHELL_STATE_PANIC_MODE_ACTIVE)) {
   11cd8:	6883      	ldr	r3, [r0, #8]
   11cda:	791a      	ldrb	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
   11cdc:	2a02      	cmp	r2, #2
   11cde:	d90a      	bls.n	11cf6 <shell_pend_on_txdone+0x24>
	return sh->ctx->ctx.flags.tx_rdy == 1;
   11ce0:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
		while (!z_flag_tx_rdy_get(sh)) {
   11ce4:	f012 0f02 	tst.w	r2, #2
   11ce8:	d0fa      	beq.n	11ce0 <shell_pend_on_txdone+0xe>
		z_flag_tx_rdy_set(sh, false);
   11cea:	2100      	movs	r1, #0
   11cec:	4620      	mov	r0, r4
   11cee:	f7ff ffd0 	bl	11c92 <z_flag_tx_rdy_set>
}
   11cf2:	b006      	add	sp, #24
   11cf4:	bd10      	pop	{r4, pc}
		k_poll_event_init(&event,
   11cf6:	f503 7326 	add.w	r3, r3, #664	; 0x298
   11cfa:	2200      	movs	r2, #0
   11cfc:	2101      	movs	r1, #1
   11cfe:	a801      	add	r0, sp, #4
   11d00:	f003 f91e 	bl	14f40 <k_poll_event_init>
	return z_impl_k_poll(events, num_events, timeout);
   11d04:	f04f 32ff 	mov.w	r2, #4294967295
   11d08:	f04f 33ff 	mov.w	r3, #4294967295
   11d0c:	2101      	movs	r1, #1
   11d0e:	a801      	add	r0, sp, #4
   11d10:	f7fc fbc8 	bl	e4a4 <z_impl_k_poll>
		k_poll_signal_reset(&sh->ctx->signals[SHELL_SIGNAL_TXDONE]);
   11d14:	68a0      	ldr	r0, [r4, #8]
   11d16:	f500 7026 	add.w	r0, r0, #664	; 0x298
	z_impl_k_poll_signal_reset(sig);
   11d1a:	f003 f93d 	bl	14f98 <z_impl_k_poll_signal_reset>
   11d1e:	e7e8      	b.n	11cf2 <shell_pend_on_txdone+0x20>

00011d20 <z_shell_cursor_in_empty_line>:
{
   11d20:	b538      	push	{r3, r4, r5, lr}
   11d22:	4605      	mov	r5, r0
	return (((sh->ctx->cmd_buff_pos * sh->ctx->cfg.flags.echo) +
   11d24:	6882      	ldr	r2, [r0, #8]
   11d26:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
   11d28:	f8d2 1260 	ldr.w	r1, [r2, #608]	; 0x260
   11d2c:	f3c1 0140 	ubfx	r1, r1, #1, #1
   11d30:	fb01 f403 	mul.w	r4, r1, r3
		 z_shell_strlen(sh->ctx->prompt)) %
   11d34:	6810      	ldr	r0, [r2, #0]
   11d36:	b168      	cbz	r0, 11d54 <z_shell_cursor_in_empty_line+0x34>
   11d38:	f000 ffd1 	bl	12cde <strlen>
   11d3c:	b280      	uxth	r0, r0
	return (((sh->ctx->cmd_buff_pos * sh->ctx->cfg.flags.echo) +
   11d3e:	1823      	adds	r3, r4, r0
			sh->ctx->vt100_ctx.cons.terminal_wid ==
   11d40:	68aa      	ldr	r2, [r5, #8]
   11d42:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
		 z_shell_strlen(sh->ctx->prompt)) %
   11d44:	fb93 f1f2 	sdiv	r1, r3, r2
   11d48:	fb02 3011 	mls	r0, r2, r1, r3
}
   11d4c:	fab0 f080 	clz	r0, r0
   11d50:	0940      	lsrs	r0, r0, #5
   11d52:	bd38      	pop	{r3, r4, r5, pc}
   11d54:	2000      	movs	r0, #0
   11d56:	e7f2      	b.n	11d3e <z_shell_cursor_in_empty_line+0x1e>

00011d58 <z_shell_op_cursor_move>:
{
   11d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11d5a:	4604      	mov	r4, r0
   11d5c:	460d      	mov	r5, r1
	struct shell_multiline_cons *cons = &sh->ctx->vt100_ctx.cons;
   11d5e:	6880      	ldr	r0, [r0, #8]
	uint16_t new_pos = sh->ctx->cmd_buff_pos + val;
   11d60:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   11d62:	fa11 f585 	uxtah	r5, r1, r5
   11d66:	b2ad      	uxth	r5, r5
	z_shell_multiline_data_calc(cons, sh->ctx->cmd_buff_pos,
   11d68:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   11d6a:	3020      	adds	r0, #32
   11d6c:	f7ff fdd7 	bl	1191e <z_shell_multiline_data_calc>
						&sh->ctx->vt100_ctx.cons,
   11d70:	68a0      	ldr	r0, [r4, #8]
	row_span = z_row_span_with_buffer_offsets_get(
   11d72:	462a      	mov	r2, r5
   11d74:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   11d76:	3020      	adds	r0, #32
   11d78:	f7ff fdc4 	bl	11904 <z_row_span_with_buffer_offsets_get>
   11d7c:	4607      	mov	r7, r0
						&sh->ctx->vt100_ctx.cons,
   11d7e:	68a0      	ldr	r0, [r4, #8]
	col_span = z_column_span_with_buffer_offsets_get(
   11d80:	462a      	mov	r2, r5
   11d82:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   11d84:	3020      	adds	r0, #32
   11d86:	f7ff fdb0 	bl	118ea <z_column_span_with_buffer_offsets_get>
   11d8a:	4606      	mov	r6, r0
	z_shell_op_cursor_vert_move(sh, -row_span);
   11d8c:	4279      	negs	r1, r7
   11d8e:	4620      	mov	r0, r4
   11d90:	f7f5 faae 	bl	72f0 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(sh, col_span);
   11d94:	4631      	mov	r1, r6
   11d96:	4620      	mov	r0, r4
   11d98:	f7f5 fac4 	bl	7324 <z_shell_op_cursor_horiz_move>
	sh->ctx->cmd_buff_pos = new_pos;
   11d9c:	68a3      	ldr	r3, [r4, #8]
   11d9e:	87dd      	strh	r5, [r3, #62]	; 0x3e
}
   11da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011da2 <z_shell_op_cursor_word_move>:
{
   11da2:	b570      	push	{r4, r5, r6, lr}
   11da4:	4605      	mov	r5, r0
	if (val < 0) {
   11da6:	2900      	cmp	r1, #0
   11da8:	db01      	blt.n	11dae <z_shell_op_cursor_word_move+0xc>
		sign = 1;
   11daa:	2601      	movs	r6, #1
   11dac:	e012      	b.n	11dd4 <z_shell_op_cursor_word_move+0x32>
		val = -val;
   11dae:	4249      	negs	r1, r1
   11db0:	b209      	sxth	r1, r1
		sign = -1;
   11db2:	f04f 36ff 	mov.w	r6, #4294967295
   11db6:	e00d      	b.n	11dd4 <z_shell_op_cursor_word_move+0x32>
		shift = shift_calc(sh->ctx->cmd_buff,
   11db8:	68a8      	ldr	r0, [r5, #8]
   11dba:	4633      	mov	r3, r6
   11dbc:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   11dbe:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   11dc0:	3042      	adds	r0, #66	; 0x42
   11dc2:	f7ff ff19 	bl	11bf8 <shift_calc>
		z_shell_op_cursor_move(sh, sign * shift);
   11dc6:	fb16 f100 	smulbb	r1, r6, r0
   11dca:	b209      	sxth	r1, r1
   11dcc:	4628      	mov	r0, r5
   11dce:	f7ff ffc3 	bl	11d58 <z_shell_op_cursor_move>
	while (val--) {
   11dd2:	4621      	mov	r1, r4
   11dd4:	1e4b      	subs	r3, r1, #1
   11dd6:	b21c      	sxth	r4, r3
   11dd8:	2900      	cmp	r1, #0
   11dda:	d1ed      	bne.n	11db8 <z_shell_op_cursor_word_move+0x16>
}
   11ddc:	bd70      	pop	{r4, r5, r6, pc}

00011dde <z_shell_op_cursor_home_move>:
{
   11dde:	b508      	push	{r3, lr}
	z_shell_op_cursor_move(sh, -sh->ctx->cmd_buff_pos);
   11de0:	6883      	ldr	r3, [r0, #8]
   11de2:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
   11de4:	4249      	negs	r1, r1
   11de6:	b209      	sxth	r1, r1
   11de8:	f7ff ffb6 	bl	11d58 <z_shell_op_cursor_move>
}
   11dec:	bd08      	pop	{r3, pc}

00011dee <z_shell_op_cursor_end_move>:
{
   11dee:	b508      	push	{r3, lr}
	z_shell_op_cursor_move(sh, sh->ctx->cmd_buff_len -
   11df0:	6883      	ldr	r3, [r0, #8]
   11df2:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
						sh->ctx->cmd_buff_pos);
   11df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	z_shell_op_cursor_move(sh, sh->ctx->cmd_buff_len -
   11df6:	1ac9      	subs	r1, r1, r3
   11df8:	b209      	sxth	r1, r1
   11dfa:	f7ff ffad 	bl	11d58 <z_shell_op_cursor_move>
}
   11dfe:	bd08      	pop	{r3, pc}

00011e00 <z_shell_op_left_arrow>:
{
   11e00:	b508      	push	{r3, lr}
	if (sh->ctx->cmd_buff_pos > 0) {
   11e02:	6883      	ldr	r3, [r0, #8]
   11e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   11e06:	b903      	cbnz	r3, 11e0a <z_shell_op_left_arrow+0xa>
}
   11e08:	bd08      	pop	{r3, pc}
		z_shell_op_cursor_move(sh, -1);
   11e0a:	f04f 31ff 	mov.w	r1, #4294967295
   11e0e:	f7ff ffa3 	bl	11d58 <z_shell_op_cursor_move>
}
   11e12:	e7f9      	b.n	11e08 <z_shell_op_left_arrow+0x8>

00011e14 <z_shell_op_right_arrow>:
{
   11e14:	b508      	push	{r3, lr}
	if (sh->ctx->cmd_buff_pos < sh->ctx->cmd_buff_len) {
   11e16:	6883      	ldr	r3, [r0, #8]
   11e18:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   11e1a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   11e1c:	429a      	cmp	r2, r3
   11e1e:	d300      	bcc.n	11e22 <z_shell_op_right_arrow+0xe>
}
   11e20:	bd08      	pop	{r3, pc}
		z_shell_op_cursor_move(sh, 1);
   11e22:	2101      	movs	r1, #1
   11e24:	f7ff ff98 	bl	11d58 <z_shell_op_cursor_move>
}
   11e28:	e7fa      	b.n	11e20 <z_shell_op_right_arrow+0xc>

00011e2a <z_shell_op_delete_from_cursor>:
{
   11e2a:	b508      	push	{r3, lr}
	sh->ctx->cmd_buff_len = sh->ctx->cmd_buff_pos;
   11e2c:	6882      	ldr	r2, [r0, #8]
   11e2e:	8fd1      	ldrh	r1, [r2, #62]	; 0x3e
   11e30:	8791      	strh	r1, [r2, #60]	; 0x3c
	sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos] = '\0';
   11e32:	6883      	ldr	r3, [r0, #8]
   11e34:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   11e36:	4413      	add	r3, r2
   11e38:	2200      	movs	r2, #0
   11e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	z_clear_eos(sh);
   11e3e:	f7f5 fa1b 	bl	7278 <z_clear_eos>
}
   11e42:	bd08      	pop	{r3, pc}

00011e44 <z_shell_cmd_line_erase>:
{
   11e44:	b510      	push	{r4, lr}
   11e46:	4604      	mov	r4, r0
	z_shell_multiline_data_calc(&sh->ctx->vt100_ctx.cons,
   11e48:	6880      	ldr	r0, [r0, #8]
   11e4a:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   11e4c:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   11e4e:	3020      	adds	r0, #32
   11e50:	f7ff fd65 	bl	1191e <z_shell_multiline_data_calc>
				   -(sh->ctx->vt100_ctx.cons.cur_x - 1));
   11e54:	68a3      	ldr	r3, [r4, #8]
   11e56:	8c19      	ldrh	r1, [r3, #32]
	z_shell_op_cursor_horiz_move(sh,
   11e58:	f1c1 0101 	rsb	r1, r1, #1
   11e5c:	4620      	mov	r0, r4
   11e5e:	f7f5 fa61 	bl	7324 <z_shell_op_cursor_horiz_move>
	z_shell_op_cursor_vert_move(sh, sh->ctx->vt100_ctx.cons.cur_y - 1);
   11e62:	68a3      	ldr	r3, [r4, #8]
   11e64:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   11e66:	3901      	subs	r1, #1
   11e68:	4620      	mov	r0, r4
   11e6a:	f7f5 fa41 	bl	72f0 <z_shell_op_cursor_vert_move>
	z_clear_eos(sh);
   11e6e:	4620      	mov	r0, r4
   11e70:	f7f5 fa02 	bl	7278 <z_clear_eos>
}
   11e74:	bd10      	pop	{r4, pc}

00011e76 <z_shell_write>:
{
   11e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e7a:	b082      	sub	sp, #8
   11e7c:	4606      	mov	r6, r0
   11e7e:	4688      	mov	r8, r1
   11e80:	4614      	mov	r4, r2
	size_t offset = 0;
   11e82:	2500      	movs	r5, #0
	while (length) {
   11e84:	b1a4      	cbz	r4, 11eb0 <z_shell_write+0x3a>
		int err = sh->iface->api->write(sh->iface,
   11e86:	6870      	ldr	r0, [r6, #4]
   11e88:	6803      	ldr	r3, [r0, #0]
   11e8a:	68df      	ldr	r7, [r3, #12]
   11e8c:	ab01      	add	r3, sp, #4
   11e8e:	4622      	mov	r2, r4
   11e90:	eb08 0105 	add.w	r1, r8, r5
   11e94:	47b8      	blx	r7
		offset += tmp_cnt;
   11e96:	9b01      	ldr	r3, [sp, #4]
   11e98:	441d      	add	r5, r3
		length -= tmp_cnt;
   11e9a:	1ae4      	subs	r4, r4, r3
		if (tmp_cnt == 0 &&
   11e9c:	2b00      	cmp	r3, #0
   11e9e:	d1f1      	bne.n	11e84 <z_shell_write+0xe>
		    (sh->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
   11ea0:	68b3      	ldr	r3, [r6, #8]
   11ea2:	791b      	ldrb	r3, [r3, #4]
		if (tmp_cnt == 0 &&
   11ea4:	2b03      	cmp	r3, #3
   11ea6:	d0ed      	beq.n	11e84 <z_shell_write+0xe>
			shell_pend_on_txdone(sh);
   11ea8:	4630      	mov	r0, r6
   11eaa:	f7ff ff12 	bl	11cd2 <shell_pend_on_txdone>
   11eae:	e7e9      	b.n	11e84 <z_shell_write+0xe>
}
   11eb0:	b002      	add	sp, #8
   11eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011eb6 <z_shell_print_stream>:
{
   11eb6:	b508      	push	{r3, lr}
	z_shell_write((const struct shell *) user_ctx, data, len);
   11eb8:	f7ff ffdd 	bl	11e76 <z_shell_write>
}
   11ebc:	bd08      	pop	{r3, pc}

00011ebe <z_shell_vt100_colors_restore>:

void z_shell_vt100_colors_restore(const struct shell *sh,
				  const struct shell_vt100_colors *color)
{
   11ebe:	b538      	push	{r3, r4, r5, lr}
   11ec0:	4605      	mov	r5, r0
   11ec2:	460c      	mov	r4, r1
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	z_shell_vt100_color_set(sh, color->col);
   11ec4:	7809      	ldrb	r1, [r1, #0]
   11ec6:	f7f5 fab5 	bl	7434 <z_shell_vt100_color_set>
	vt100_bgcolor_set(sh, color->bgcol);
   11eca:	7861      	ldrb	r1, [r4, #1]
   11ecc:	4628      	mov	r0, r5
   11ece:	f7f5 f9f3 	bl	72b8 <vt100_bgcolor_set>
}
   11ed2:	bd38      	pop	{r3, r4, r5, pc}

00011ed4 <z_shell_vfprintf>:

void z_shell_vfprintf(const struct shell *sh, enum shell_vt100_color color,
		      const char *fmt, va_list args)
{
   11ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
   11ed6:	b083      	sub	sp, #12
   11ed8:	4604      	mov	r4, r0
   11eda:	460f      	mov	r7, r1
   11edc:	4615      	mov	r5, r2
   11ede:	461e      	mov	r6, r3
	return sh->ctx->cfg.flags.use_colors == 1;
   11ee0:	6881      	ldr	r1, [r0, #8]
   11ee2:	f8d1 2260 	ldr.w	r2, [r1, #608]	; 0x260
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
   11ee6:	f012 0f10 	tst.w	r2, #16
   11eea:	d003      	beq.n	11ef4 <z_shell_vfprintf+0x20>
	    z_flag_use_colors_get(sh)	  &&
	    (color != sh->ctx->vt100_ctx.col.col)) {
   11eec:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
	    z_flag_use_colors_get(sh)	  &&
   11ef0:	42ba      	cmp	r2, r7
   11ef2:	d106      	bne.n	11f02 <z_shell_vfprintf+0x2e>

		z_shell_fprintf_fmt(sh->fprintf_ctx, fmt, args);

		z_shell_vt100_colors_restore(sh, &col);
	} else {
		z_shell_fprintf_fmt(sh->fprintf_ctx, fmt, args);
   11ef4:	4632      	mov	r2, r6
   11ef6:	4629      	mov	r1, r5
   11ef8:	6960      	ldr	r0, [r4, #20]
   11efa:	f7f5 f959 	bl	71b0 <z_shell_fprintf_fmt>
	}
}
   11efe:	b003      	add	sp, #12
   11f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
			     enum shell_vt100_color color);

static inline void z_shell_vt100_colors_store(const struct shell *sh,
					      struct shell_vt100_colors *color)
{
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
   11f02:	2202      	movs	r2, #2
   11f04:	312e      	adds	r1, #46	; 0x2e
   11f06:	a801      	add	r0, sp, #4
   11f08:	f000 ff3f 	bl	12d8a <memcpy>
		z_shell_vt100_color_set(sh, color);
   11f0c:	4639      	mov	r1, r7
   11f0e:	4620      	mov	r0, r4
   11f10:	f7f5 fa90 	bl	7434 <z_shell_vt100_color_set>
		z_shell_fprintf_fmt(sh->fprintf_ctx, fmt, args);
   11f14:	4632      	mov	r2, r6
   11f16:	4629      	mov	r1, r5
   11f18:	6960      	ldr	r0, [r4, #20]
   11f1a:	f7f5 f949 	bl	71b0 <z_shell_fprintf_fmt>
		z_shell_vt100_colors_restore(sh, &col);
   11f1e:	a901      	add	r1, sp, #4
   11f20:	4620      	mov	r0, r4
   11f22:	f7ff ffcc 	bl	11ebe <z_shell_vt100_colors_restore>
	    (color != sh->ctx->vt100_ctx.col.col)) {
   11f26:	e7ea      	b.n	11efe <z_shell_vfprintf+0x2a>

00011f28 <z_shell_fprintf>:

void z_shell_fprintf(const struct shell *sh,
		     enum shell_vt100_color color,
		     const char *fmt, ...)
{
   11f28:	b40c      	push	{r2, r3}
   11f2a:	b500      	push	{lr}
   11f2c:	b083      	sub	sp, #12
   11f2e:	ab04      	add	r3, sp, #16
   11f30:	f853 2b04 	ldr.w	r2, [r3], #4
	__ASSERT(z_flag_sync_mode_get(sh) || !k_is_in_isr(),
		 "Thread context required.");

	va_list args;

	va_start(args, fmt);
   11f34:	9301      	str	r3, [sp, #4]
	z_shell_vfprintf(sh, color, fmt, args);
   11f36:	f7ff ffcd 	bl	11ed4 <z_shell_vfprintf>
	va_end(args);
}
   11f3a:	b003      	add	sp, #12
   11f3c:	f85d eb04 	ldr.w	lr, [sp], #4
   11f40:	b002      	add	sp, #8
   11f42:	4770      	bx	lr

00011f44 <data_insert>:
{
   11f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11f48:	4606      	mov	r6, r0
   11f4a:	4615      	mov	r5, r2
	uint16_t after = sh->ctx->cmd_buff_len - sh->ctx->cmd_buff_pos;
   11f4c:	6883      	ldr	r3, [r0, #8]
   11f4e:	8f98      	ldrh	r0, [r3, #60]	; 0x3c
   11f50:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   11f52:	1a87      	subs	r7, r0, r2
	char *curr_pos = &sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos];
   11f54:	3240      	adds	r2, #64	; 0x40
   11f56:	4413      	add	r3, r2
	if ((sh->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   11f58:	4428      	add	r0, r5
   11f5a:	28ff      	cmp	r0, #255	; 0xff
   11f5c:	dd01      	ble.n	11f62 <data_insert+0x1e>
}
   11f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11f62:	4688      	mov	r8, r1
   11f64:	b2bf      	uxth	r7, r7
   11f66:	1c9c      	adds	r4, r3, #2
	memmove(curr_pos + len, curr_pos, after);
   11f68:	463a      	mov	r2, r7
   11f6a:	4621      	mov	r1, r4
   11f6c:	1960      	adds	r0, r4, r5
   11f6e:	f000 fef9 	bl	12d64 <memmove>
	memcpy(curr_pos, data, len);
   11f72:	462a      	mov	r2, r5
   11f74:	4641      	mov	r1, r8
   11f76:	4620      	mov	r0, r4
   11f78:	f000 ff07 	bl	12d8a <memcpy>
	sh->ctx->cmd_buff_len += len;
   11f7c:	68b2      	ldr	r2, [r6, #8]
   11f7e:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
   11f80:	442b      	add	r3, r5
   11f82:	8793      	strh	r3, [r2, #60]	; 0x3c
	sh->ctx->cmd_buff[sh->ctx->cmd_buff_len] = '\0';
   11f84:	68b3      	ldr	r3, [r6, #8]
   11f86:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   11f88:	4413      	add	r3, r2
   11f8a:	2200      	movs	r2, #0
   11f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	return sh->ctx->cfg.flags.echo == 1;
   11f90:	68b3      	ldr	r3, [r6, #8]
   11f92:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
	if (!z_flag_echo_get(sh)) {
   11f96:	f012 0f02 	tst.w	r2, #2
   11f9a:	d103      	bne.n	11fa4 <data_insert+0x60>
		sh->ctx->cmd_buff_pos += len;
   11f9c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   11f9e:	442a      	add	r2, r5
   11fa0:	87da      	strh	r2, [r3, #62]	; 0x3e
		return;
   11fa2:	e7dc      	b.n	11f5e <data_insert+0x1a>
	reprint_from_cursor(sh, after, false);
   11fa4:	2200      	movs	r2, #0
   11fa6:	4639      	mov	r1, r7
   11fa8:	4630      	mov	r0, r6
   11faa:	f7f5 fab9 	bl	7520 <reprint_from_cursor>
   11fae:	e7d6      	b.n	11f5e <data_insert+0x1a>

00011fb0 <z_shell_op_char_insert>:
{
   11fb0:	b500      	push	{lr}
   11fb2:	b083      	sub	sp, #12
   11fb4:	f88d 1007 	strb.w	r1, [sp, #7]
	return sh->ctx->cfg.flags.insert_mode == 1;
   11fb8:	6883      	ldr	r3, [r0, #8]
   11fba:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
	if (z_flag_insert_mode_get(sh) &&
   11fbe:	f012 0f01 	tst.w	r2, #1
   11fc2:	d003      	beq.n	11fcc <z_shell_op_char_insert+0x1c>
	    (sh->ctx->cmd_buff_len != sh->ctx->cmd_buff_pos)) {
   11fc4:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   11fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	if (z_flag_insert_mode_get(sh) &&
   11fc8:	429a      	cmp	r2, r3
   11fca:	d107      	bne.n	11fdc <z_shell_op_char_insert+0x2c>
		data_insert(sh, &data, 1);
   11fcc:	2201      	movs	r2, #1
   11fce:	f10d 0107 	add.w	r1, sp, #7
   11fd2:	f7ff ffb7 	bl	11f44 <data_insert>
}
   11fd6:	b003      	add	sp, #12
   11fd8:	f85d fb04 	ldr.w	pc, [sp], #4
		char_replace(sh, data);
   11fdc:	b2c9      	uxtb	r1, r1
   11fde:	f7f5 f9bb 	bl	7358 <char_replace>
   11fe2:	e7f8      	b.n	11fd6 <z_shell_op_char_insert+0x26>

00011fe4 <z_shell_op_completion_insert>:
{
   11fe4:	b508      	push	{r3, lr}
	data_insert(sh, compl, compl_len);
   11fe6:	f7ff ffad 	bl	11f44 <data_insert>
}
   11fea:	bd08      	pop	{r3, pc}

00011fec <z_shell_op_char_delete>:
{
   11fec:	b538      	push	{r3, r4, r5, lr}
	uint16_t diff = sh->ctx->cmd_buff_len - sh->ctx->cmd_buff_pos;
   11fee:	6883      	ldr	r3, [r0, #8]
   11ff0:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
   11ff2:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   11ff4:	1aa4      	subs	r4, r4, r2
   11ff6:	b2a4      	uxth	r4, r4
	char *str = &sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos];
   11ff8:	3240      	adds	r2, #64	; 0x40
   11ffa:	4413      	add	r3, r2
	if (diff == 0U) {
   11ffc:	b904      	cbnz	r4, 12000 <z_shell_op_char_delete+0x14>
}
   11ffe:	bd38      	pop	{r3, r4, r5, pc}
   12000:	4605      	mov	r5, r0
   12002:	1c98      	adds	r0, r3, #2
	memmove(str, str + 1, diff);
   12004:	4622      	mov	r2, r4
   12006:	1c41      	adds	r1, r0, #1
   12008:	f000 feac 	bl	12d64 <memmove>
	--sh->ctx->cmd_buff_len;
   1200c:	68aa      	ldr	r2, [r5, #8]
   1200e:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
   12010:	3b01      	subs	r3, #1
   12012:	8793      	strh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(sh, --diff, true);
   12014:	1e61      	subs	r1, r4, #1
   12016:	2201      	movs	r2, #1
   12018:	b289      	uxth	r1, r1
   1201a:	4628      	mov	r0, r5
   1201c:	f7f5 fa80 	bl	7520 <reprint_from_cursor>
   12020:	e7ed      	b.n	11ffe <z_shell_op_char_delete+0x12>

00012022 <z_shell_op_char_backspace>:
	if ((sh->ctx->cmd_buff_len == 0) ||
   12022:	6883      	ldr	r3, [r0, #8]
   12024:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   12026:	b162      	cbz	r2, 12042 <z_shell_op_char_backspace+0x20>
{
   12028:	b510      	push	{r4, lr}
   1202a:	4604      	mov	r4, r0
	    (sh->ctx->cmd_buff_pos == 0)) {
   1202c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	if ((sh->ctx->cmd_buff_len == 0) ||
   1202e:	b903      	cbnz	r3, 12032 <z_shell_op_char_backspace+0x10>
}
   12030:	bd10      	pop	{r4, pc}
	z_shell_op_cursor_move(sh, -1);
   12032:	f04f 31ff 	mov.w	r1, #4294967295
   12036:	f7ff fe8f 	bl	11d58 <z_shell_op_cursor_move>
	z_shell_op_char_delete(sh);
   1203a:	4620      	mov	r0, r4
   1203c:	f7ff ffd6 	bl	11fec <z_shell_op_char_delete>
   12040:	e7f6      	b.n	12030 <z_shell_op_char_backspace+0xe>
   12042:	4770      	bx	lr

00012044 <z_shell_print_prompt_and_cmd>:
{
   12044:	b510      	push	{r4, lr}
   12046:	4604      	mov	r4, r0
	print_prompt(sh);
   12048:	f7f5 faaa 	bl	75a0 <print_prompt>
	return sh->ctx->cfg.flags.echo == 1;
   1204c:	68a3      	ldr	r3, [r4, #8]
   1204e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	if (z_flag_echo_get(sh)) {
   12052:	f013 0f02 	tst.w	r3, #2
   12056:	d100      	bne.n	1205a <z_shell_print_prompt_and_cmd+0x16>
}
   12058:	bd10      	pop	{r4, pc}
		z_shell_print_cmd(sh);
   1205a:	4620      	mov	r0, r4
   1205c:	f7f5 f9e0 	bl	7420 <z_shell_print_cmd>
		z_shell_op_cursor_position_synchronize(sh);
   12060:	4620      	mov	r0, r4
   12062:	f7f5 f9b1 	bl	73c8 <z_shell_op_cursor_position_synchronize>
}
   12066:	e7f7      	b.n	12058 <z_shell_print_prompt_and_cmd+0x14>

00012068 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
   12068:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   1206a:	f013 0f04 	tst.w	r3, #4
   1206e:	d001      	beq.n	12074 <log_msg_generic_get_wlen+0xc>
	return 0;
   12070:	2000      	movs	r0, #0
}
   12072:	4770      	bx	lr
		return log_msg_get_total_wlen(msg->hdr.desc);
   12074:	6803      	ldr	r3, [r0, #0]
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   12076:	f3c3 204a 	ubfx	r0, r3, #9, #11
   1207a:	eb00 5013 	add.w	r0, r0, r3, lsr #20
   1207e:	3017      	adds	r0, #23
   12080:	f020 0007 	bic.w	r0, r0, #7
   12084:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   12086:	4770      	bx	lr

00012088 <fifo_reset>:
	return length;
}

/* Set fifo clean state (in case of deferred mode). */
static void fifo_reset(const struct shell_log_backend *backend)
{
   12088:	b508      	push	{r3, lr}
	mpsc_pbuf_init(backend->mpsc_buffer, backend->mpsc_buffer_config);
   1208a:	6901      	ldr	r1, [r0, #16]
   1208c:	6940      	ldr	r0, [r0, #20]
   1208e:	f7fd fdae 	bl	fbee <mpsc_pbuf_init>
}
   12092:	bd08      	pop	{r3, pc}

00012094 <process_log_msg>:

static void process_log_msg(const struct shell *sh,
			     const struct log_output *log_output,
			     union log_msg_generic *msg,
			     bool locked, bool colors)
{
   12094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12098:	4606      	mov	r6, r0
   1209a:	460f      	mov	r7, r1
   1209c:	4690      	mov	r8, r2
   1209e:	461c      	mov	r4, r3
   120a0:	f89d 3020 	ldrb.w	r3, [sp, #32]
	uint32_t flags = LOG_OUTPUT_FLAG_LEVEL |
		      LOG_OUTPUT_FLAG_TIMESTAMP |
		      (IS_ENABLED(CONFIG_SHELL_LOG_FORMAT_TIMESTAMP) ?
			LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP : 0);

	if (colors) {
   120a4:	b9c3      	cbnz	r3, 120d8 <process_log_msg+0x44>
	uint32_t flags = LOG_OUTPUT_FLAG_LEVEL |
   120a6:	250e      	movs	r5, #14
		flags |= LOG_OUTPUT_FLAG_COLORS;
	}

	if (locked) {
   120a8:	b9c4      	cbnz	r4, 120dc <process_log_msg+0x48>
	unsigned int key = 0;
   120aa:	f04f 0900 	mov.w	r9, #0
		if (!z_flag_cmd_ctx_get(sh)) {
			z_shell_cmd_line_erase(sh);
		}
	}

	log_output_msg_process(log_output, &msg->log, flags);
   120ae:	462a      	mov	r2, r5
   120b0:	4641      	mov	r1, r8
   120b2:	4638      	mov	r0, r7
   120b4:	f7f2 fe76 	bl	4da4 <log_output_msg_process>

	if (locked) {
   120b8:	b164      	cbz	r4, 120d4 <process_log_msg+0x40>
	return sh->ctx->ctx.flags.cmd_ctx == 1;
   120ba:	68b3      	ldr	r3, [r6, #8]
   120bc:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (!z_flag_cmd_ctx_get(sh)) {
   120c0:	f413 6f00 	tst.w	r3, #2048	; 0x800
   120c4:	d02b      	beq.n	1211e <process_log_msg+0x8a>
			z_shell_print_prompt_and_cmd(sh);
		}
		if (k_is_in_isr()) {
   120c6:	f002 fb05 	bl	146d4 <k_is_in_isr>
   120ca:	b360      	cbz	r0, 12126 <process_log_msg+0x92>
   120cc:	f389 8811 	msr	BASEPRI, r9
   120d0:	f3bf 8f6f 	isb	sy
			irq_unlock(key);
		} else {
			k_mutex_unlock(&sh->ctx->wr_mtx);
		}
	}
}
   120d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		flags |= LOG_OUTPUT_FLAG_COLORS;
   120d8:	250f      	movs	r5, #15
   120da:	e7e5      	b.n	120a8 <process_log_msg+0x14>
		if (k_is_in_isr()) {
   120dc:	f002 fafa 	bl	146d4 <k_is_in_isr>
   120e0:	b188      	cbz	r0, 12106 <process_log_msg+0x72>
	__asm__ volatile(
   120e2:	f04f 0320 	mov.w	r3, #32
   120e6:	f3ef 8911 	mrs	r9, BASEPRI
   120ea:	f383 8812 	msr	BASEPRI_MAX, r3
   120ee:	f3bf 8f6f 	isb	sy
   120f2:	68b3      	ldr	r3, [r6, #8]
   120f4:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (!z_flag_cmd_ctx_get(sh)) {
   120f8:	f413 6f00 	tst.w	r3, #2048	; 0x800
   120fc:	d1d7      	bne.n	120ae <process_log_msg+0x1a>
			z_shell_cmd_line_erase(sh);
   120fe:	4630      	mov	r0, r6
   12100:	f7ff fea0 	bl	11e44 <z_shell_cmd_line_erase>
   12104:	e7d3      	b.n	120ae <process_log_msg+0x1a>
			k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
   12106:	68b0      	ldr	r0, [r6, #8]
   12108:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_lock(mutex, timeout);
   1210c:	f04f 32ff 	mov.w	r2, #4294967295
   12110:	f04f 33ff 	mov.w	r3, #4294967295
   12114:	f7fb fac8 	bl	d6a8 <z_impl_k_mutex_lock>
	unsigned int key = 0;
   12118:	f04f 0900 	mov.w	r9, #0
   1211c:	e7e9      	b.n	120f2 <process_log_msg+0x5e>
			z_shell_print_prompt_and_cmd(sh);
   1211e:	4630      	mov	r0, r6
   12120:	f7ff ff90 	bl	12044 <z_shell_print_prompt_and_cmd>
   12124:	e7cf      	b.n	120c6 <process_log_msg+0x32>
			k_mutex_unlock(&sh->ctx->wr_mtx);
   12126:	68b0      	ldr	r0, [r6, #8]
   12128:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_unlock(mutex);
   1212c:	f7fb fb40 	bl	d7b0 <z_impl_k_mutex_unlock>
}
   12130:	e7d0      	b.n	120d4 <process_log_msg+0x40>

00012132 <process_msg_from_buffer>:

static bool process_msg_from_buffer(const struct shell *sh)
{
   12132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12136:	b082      	sub	sp, #8
   12138:	4604      	mov	r4, r0
	const struct shell_log_backend *log_backend = sh->log_backend;
   1213a:	69c3      	ldr	r3, [r0, #28]
	struct mpsc_pbuf_buffer *mpsc_buffer = log_backend->mpsc_buffer;
   1213c:	695e      	ldr	r6, [r3, #20]
	const struct log_output *log_output = log_backend->log_output;
   1213e:	f8d3 8004 	ldr.w	r8, [r3, #4]
	return sh->ctx->cfg.flags.use_colors == 1;
   12142:	6883      	ldr	r3, [r0, #8]
   12144:	f8d3 5260 	ldr.w	r5, [r3, #608]	; 0x260
   12148:	f3c5 1500 	ubfx	r5, r5, #4, #1
	union log_msg_generic *msg;
	bool colors = IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
			z_flag_use_colors_get(sh);

	msg = (union log_msg_generic *)mpsc_pbuf_claim(mpsc_buffer);
   1214c:	4630      	mov	r0, r6
   1214e:	f7fd fe32 	bl	fdb6 <mpsc_pbuf_claim>
	if (!msg) {
   12152:	b178      	cbz	r0, 12174 <process_msg_from_buffer+0x42>
   12154:	4607      	mov	r7, r0
		return false;
	}

	process_log_msg(sh, log_output, msg, false, colors);
   12156:	9500      	str	r5, [sp, #0]
   12158:	2300      	movs	r3, #0
   1215a:	4602      	mov	r2, r0
   1215c:	4641      	mov	r1, r8
   1215e:	4620      	mov	r0, r4
   12160:	f7ff ff98 	bl	12094 <process_log_msg>

	mpsc_pbuf_free(mpsc_buffer, &msg->buf);
   12164:	4639      	mov	r1, r7
   12166:	4630      	mov	r0, r6
   12168:	f7fd fe8e 	bl	fe88 <mpsc_pbuf_free>

	return true;
   1216c:	2001      	movs	r0, #1
}
   1216e:	b002      	add	sp, #8
   12170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   12174:	2000      	movs	r0, #0
   12176:	e7fa      	b.n	1216e <process_msg_from_buffer+0x3c>

00012178 <z_flag_sync_mode_set>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, sync_mode, val, ret);
   12178:	6883      	ldr	r3, [r0, #8]
   1217a:	f503 7319 	add.w	r3, r3, #612	; 0x264
   1217e:	b171      	cbz	r1, 1219e <z_flag_sync_mode_set+0x26>
   12180:	f3bf 8f5b 	dmb	ish
   12184:	e853 0f00 	ldrex	r0, [r3]
   12188:	f440 5200 	orr.w	r2, r0, #8192	; 0x2000
   1218c:	e843 2100 	strex	r1, r2, [r3]
   12190:	2900      	cmp	r1, #0
   12192:	d1f7      	bne.n	12184 <z_flag_sync_mode_set+0xc>
   12194:	f3bf 8f5b 	dmb	ish
}
   12198:	f3c0 3040 	ubfx	r0, r0, #13, #1
   1219c:	4770      	bx	lr
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, sync_mode, val, ret);
   1219e:	f3bf 8f5b 	dmb	ish
   121a2:	e853 0f00 	ldrex	r0, [r3]
   121a6:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
   121aa:	e843 2100 	strex	r1, r2, [r3]
   121ae:	2900      	cmp	r1, #0
   121b0:	d1f7      	bne.n	121a2 <z_flag_sync_mode_set+0x2a>
   121b2:	f3bf 8f5b 	dmb	ish
   121b6:	e7ef      	b.n	12198 <z_flag_sync_mode_set+0x20>

000121b8 <dropped>:
	const struct shell *sh = (const struct shell *)backend->cb->ctx;
   121b8:	6843      	ldr	r3, [r0, #4]
   121ba:	681b      	ldr	r3, [r3, #0]
	const struct shell_log_backend *log_backend = sh->log_backend;
   121bc:	69da      	ldr	r2, [r3, #28]
		atomic_add(&sh->stats->log_lost_cnt, cnt);
   121be:	699b      	ldr	r3, [r3, #24]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   121c0:	f3bf 8f5b 	dmb	ish
   121c4:	e853 cf00 	ldrex	ip, [r3]
   121c8:	448c      	add	ip, r1
   121ca:	e843 c000 	strex	r0, ip, [r3]
   121ce:	2800      	cmp	r0, #0
   121d0:	d1f8      	bne.n	121c4 <dropped+0xc>
   121d2:	f3bf 8f5b 	dmb	ish
	atomic_add(&log_backend->control_block->dropped_cnt, cnt);
   121d6:	6893      	ldr	r3, [r2, #8]
   121d8:	f3bf 8f5b 	dmb	ish
   121dc:	e853 0f00 	ldrex	r0, [r3]
   121e0:	4408      	add	r0, r1
   121e2:	e843 0200 	strex	r2, r0, [r3]
   121e6:	2a00      	cmp	r2, #0
   121e8:	d1f8      	bne.n	121dc <dropped+0x24>
   121ea:	f3bf 8f5b 	dmb	ish
}
   121ee:	4770      	bx	lr

000121f0 <copy_to_pbuffer>:
{
   121f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   121f2:	4607      	mov	r7, r0
   121f4:	460e      	mov	r6, r1
   121f6:	4614      	mov	r4, r2
	wlen = log_msg_generic_get_wlen((union mpsc_pbuf_generic *)msg);
   121f8:	4608      	mov	r0, r1
   121fa:	f7ff ff35 	bl	12068 <log_msg_generic_get_wlen>
   121fe:	4605      	mov	r5, r0
   12200:	0c61      	lsrs	r1, r4, #17
   12202:	03e2      	lsls	r2, r4, #15
   12204:	f240 33e7 	movw	r3, #999	; 0x3e7
   12208:	18d0      	adds	r0, r2, r3
   1220a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1220e:	f04f 0300 	mov.w	r3, #0
   12212:	f141 0100 	adc.w	r1, r1, #0
   12216:	f7ed ff61 	bl	dc <__aeabi_uldivmod>
   1221a:	4602      	mov	r2, r0
   1221c:	460b      	mov	r3, r1
	dst = mpsc_pbuf_alloc(mpsc_buffer, wlen, K_MSEC(timeout));
   1221e:	4629      	mov	r1, r5
   12220:	4638      	mov	r0, r7
   12222:	f7fd fd05 	bl	fc30 <mpsc_pbuf_alloc>
	if (!dst) {
   12226:	b1a0      	cbz	r0, 12252 <copy_to_pbuffer+0x62>
   12228:	4604      	mov	r4, r0
	uint8_t *src_data = (uint8_t *)msg + sizeof(struct mpsc_pbuf_hdr);
   1222a:	4631      	mov	r1, r6
	dst->hdr.data = msg->buf.hdr.data;
   1222c:	f851 3b04 	ldr.w	r3, [r1], #4
   12230:	f3c3 039d 	ubfx	r3, r3, #2, #30
   12234:	f850 2b04 	ldr.w	r2, [r0], #4
   12238:	f363 029f 	bfi	r2, r3, #2, #30
   1223c:	6022      	str	r2, [r4, #0]
	memcpy(dst_data, src_data, (wlen - hdr_wlen) * sizeof(uint32_t));
   1223e:	1e6a      	subs	r2, r5, #1
   12240:	0092      	lsls	r2, r2, #2
   12242:	f000 fda2 	bl	12d8a <memcpy>
	mpsc_pbuf_commit(mpsc_buffer, dst);
   12246:	4621      	mov	r1, r4
   12248:	4638      	mov	r0, r7
   1224a:	f7fd fd8b 	bl	fd64 <mpsc_pbuf_commit>
	return true;
   1224e:	2001      	movs	r0, #1
}
   12250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
   12252:	2000      	movs	r0, #0
   12254:	e7fc      	b.n	12250 <copy_to_pbuffer+0x60>

00012256 <process>:

static void process(const struct log_backend *const backend,
		    union log_msg_generic *msg)
{
   12256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1225a:	b082      	sub	sp, #8
   1225c:	4604      	mov	r4, r0
   1225e:	460e      	mov	r6, r1
	const struct shell *sh = (const struct shell *)backend->cb->ctx;
   12260:	6843      	ldr	r3, [r0, #4]
   12262:	681d      	ldr	r5, [r3, #0]
	const struct shell_log_backend *log_backend = sh->log_backend;
   12264:	69eb      	ldr	r3, [r5, #28]
	struct mpsc_pbuf_buffer *mpsc_buffer = log_backend->mpsc_buffer;
   12266:	6958      	ldr	r0, [r3, #20]
	const struct log_output *log_output = log_backend->log_output;
   12268:	685f      	ldr	r7, [r3, #4]
	return sh->ctx->cfg.flags.use_colors == 1;
   1226a:	68aa      	ldr	r2, [r5, #8]
   1226c:	f8d2 2260 	ldr.w	r2, [r2, #608]	; 0x260
   12270:	f3c2 1800 	ubfx	r8, r2, #4, #1
	bool colors = IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
			z_flag_use_colors_get(sh);
	struct k_poll_signal *signal;

	switch (sh->log_backend->control_block->state) {
   12274:	689a      	ldr	r2, [r3, #8]
   12276:	7912      	ldrb	r2, [r2, #4]
   12278:	2a01      	cmp	r2, #1
   1227a:	d004      	beq.n	12286 <process+0x30>
   1227c:	2a03      	cmp	r2, #3
   1227e:	d012      	beq.n	122a6 <process+0x50>
	case SHELL_LOG_BACKEND_DISABLED:
		__fallthrough;
	default:
		break;
	}
}
   12280:	b002      	add	sp, #8
   12282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (copy_to_pbuffer(mpsc_buffer, msg, log_backend->timeout)) {
   12286:	68da      	ldr	r2, [r3, #12]
   12288:	f7ff ffb2 	bl	121f0 <copy_to_pbuffer>
   1228c:	b130      	cbz	r0, 1229c <process+0x46>
					signal = &sh->ctx->signals[SHELL_SIGNAL_LOG_MSG];
   1228e:	68a8      	ldr	r0, [r5, #8]
   12290:	f500 701e 	add.w	r0, r0, #632	; 0x278
	return z_impl_k_poll_signal_raise(sig, result);
   12294:	2100      	movs	r1, #0
   12296:	f7fc f963 	bl	e560 <z_impl_k_poll_signal_raise>
   1229a:	e7f1      	b.n	12280 <process+0x2a>
				dropped(backend, 1);
   1229c:	2101      	movs	r1, #1
   1229e:	4620      	mov	r0, r4
   122a0:	f7ff ff8a 	bl	121b8 <dropped>
   122a4:	e7ec      	b.n	12280 <process+0x2a>
		z_shell_cmd_line_erase(sh);
   122a6:	4628      	mov	r0, r5
   122a8:	f7ff fdcc 	bl	11e44 <z_shell_cmd_line_erase>
		process_log_msg(sh, log_output, msg, true, colors);
   122ac:	f8cd 8000 	str.w	r8, [sp]
   122b0:	2301      	movs	r3, #1
   122b2:	4632      	mov	r2, r6
   122b4:	4639      	mov	r1, r7
   122b6:	4628      	mov	r0, r5
   122b8:	f7ff feec 	bl	12094 <process_log_msg>
}
   122bc:	e7e0      	b.n	12280 <process+0x2a>

000122be <z_shell_log_backend_output_func>:
{
   122be:	b510      	push	{r4, lr}
   122c0:	460c      	mov	r4, r1
   122c2:	4613      	mov	r3, r2
	z_shell_print_stream(ctx, data, length);
   122c4:	460a      	mov	r2, r1
   122c6:	4601      	mov	r1, r0
   122c8:	4618      	mov	r0, r3
   122ca:	f7ff fdf4 	bl	11eb6 <z_shell_print_stream>
}
   122ce:	4620      	mov	r0, r4
   122d0:	bd10      	pop	{r4, pc}

000122d2 <z_shell_log_backend_enable>:
{
   122d2:	b570      	push	{r4, r5, r6, lr}
   122d4:	4604      	mov	r4, r0
   122d6:	460d      	mov	r5, r1
   122d8:	4616      	mov	r6, r2
		fifo_reset(backend);
   122da:	f7ff fed5 	bl	12088 <fifo_reset>
		log_backend_enable(backend->backend, ctx, init_log_level);
   122de:	4632      	mov	r2, r6
   122e0:	4629      	mov	r1, r5
   122e2:	6820      	ldr	r0, [r4, #0]
   122e4:	f7f2 faea 	bl	48bc <log_backend_enable>
		log_output_ctx_set(backend->log_output, ctx);
   122e8:	6863      	ldr	r3, [r4, #4]
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *output,
				      void *ctx)
{
	output->control_block->ctx = ctx;
   122ea:	685b      	ldr	r3, [r3, #4]
   122ec:	605d      	str	r5, [r3, #4]
		backend->control_block->dropped_cnt = 0;
   122ee:	68a3      	ldr	r3, [r4, #8]
   122f0:	2200      	movs	r2, #0
   122f2:	601a      	str	r2, [r3, #0]
		backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
   122f4:	68a3      	ldr	r3, [r4, #8]
   122f6:	2201      	movs	r2, #1
   122f8:	711a      	strb	r2, [r3, #4]
}
   122fa:	bd70      	pop	{r4, r5, r6, pc}

000122fc <z_shell_log_backend_disable>:
{
   122fc:	b510      	push	{r4, lr}
   122fe:	4604      	mov	r4, r0
	log_backend_disable(backend->backend);
   12300:	6800      	ldr	r0, [r0, #0]
   12302:	f7fe fa2b 	bl	1075c <log_backend_disable>
	backend->control_block->state = SHELL_LOG_BACKEND_DISABLED;
   12306:	68a3      	ldr	r3, [r4, #8]
   12308:	2202      	movs	r2, #2
   1230a:	711a      	strb	r2, [r3, #4]
}
   1230c:	bd10      	pop	{r4, pc}

0001230e <panic>:
{
   1230e:	b510      	push	{r4, lr}
	const struct shell *sh = (const struct shell *)backend->cb->ctx;
   12310:	6843      	ldr	r3, [r0, #4]
   12312:	681c      	ldr	r4, [r3, #0]
	err = sh->iface->api->enable(sh->iface, true);
   12314:	6860      	ldr	r0, [r4, #4]
   12316:	6803      	ldr	r3, [r0, #0]
   12318:	689b      	ldr	r3, [r3, #8]
   1231a:	2101      	movs	r1, #1
   1231c:	4798      	blx	r3
	if (err == 0) {
   1231e:	b9f0      	cbnz	r0, 1235e <panic+0x50>
		sh->log_backend->control_block->state =
   12320:	69e3      	ldr	r3, [r4, #28]
   12322:	689b      	ldr	r3, [r3, #8]
   12324:	2203      	movs	r2, #3
   12326:	711a      	strb	r2, [r3, #4]
		z_flag_sync_mode_set(sh, true);
   12328:	2101      	movs	r1, #1
   1232a:	4620      	mov	r0, r4
   1232c:	f7ff ff24 	bl	12178 <z_flag_sync_mode_set>
		z_shell_multiline_data_calc(&sh->ctx->vt100_ctx.cons,
   12330:	68a0      	ldr	r0, [r4, #8]
   12332:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   12334:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   12336:	3020      	adds	r0, #32
   12338:	f7ff faf1 	bl	1191e <z_shell_multiline_data_calc>
		z_shell_op_cursor_vert_move(sh, -1);
   1233c:	f04f 31ff 	mov.w	r1, #4294967295
   12340:	4620      	mov	r0, r4
   12342:	f7f4 ffd5 	bl	72f0 <z_shell_op_cursor_vert_move>
					   -sh->ctx->vt100_ctx.cons.cur_x);
   12346:	68a3      	ldr	r3, [r4, #8]
   12348:	8c19      	ldrh	r1, [r3, #32]
		z_shell_op_cursor_horiz_move(sh,
   1234a:	4249      	negs	r1, r1
   1234c:	4620      	mov	r0, r4
   1234e:	f7f4 ffe9 	bl	7324 <z_shell_op_cursor_horiz_move>
		while (process_msg_from_buffer(sh)) {
   12352:	4620      	mov	r0, r4
   12354:	f7ff feed 	bl	12132 <process_msg_from_buffer>
   12358:	2800      	cmp	r0, #0
   1235a:	d1fa      	bne.n	12352 <panic+0x44>
}
   1235c:	bd10      	pop	{r4, pc}
		z_shell_log_backend_disable(sh->log_backend);
   1235e:	69e0      	ldr	r0, [r4, #28]
   12360:	f7ff ffcc 	bl	122fc <z_shell_log_backend_disable>
   12364:	e7fa      	b.n	1235c <panic+0x4e>

00012366 <z_shell_log_backend_process>:
{
   12366:	b5f0      	push	{r4, r5, r6, r7, lr}
   12368:	b083      	sub	sp, #12
   1236a:	4604      	mov	r4, r0
			(const struct shell *)backend->backend->cb->ctx;
   1236c:	6803      	ldr	r3, [r0, #0]
   1236e:	685b      	ldr	r3, [r3, #4]
	const struct shell *sh =
   12370:	681e      	ldr	r6, [r3, #0]
   12372:	68b3      	ldr	r3, [r6, #8]
   12374:	f8d3 5260 	ldr.w	r5, [r3, #608]	; 0x260
   12378:	f3c5 1500 	ubfx	r5, r5, #4, #1
	dropped = atomic_set(&backend->control_block->dropped_cnt, 0);
   1237c:	6883      	ldr	r3, [r0, #8]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1237e:	2200      	movs	r2, #0
   12380:	f3bf 8f5b 	dmb	ish
   12384:	e853 7f00 	ldrex	r7, [r3]
   12388:	e843 2100 	strex	r1, r2, [r3]
   1238c:	2900      	cmp	r1, #0
   1238e:	d1f9      	bne.n	12384 <z_shell_log_backend_process+0x1e>
   12390:	f3bf 8f5b 	dmb	ish
	if (dropped) {
   12394:	b12f      	cbz	r7, 123a2 <z_shell_log_backend_process+0x3c>
		if (colors) {
   12396:	b94d      	cbnz	r5, 123ac <z_shell_log_backend_process+0x46>
		log_output_dropped_process(backend->log_output, dropped);
   12398:	4639      	mov	r1, r7
   1239a:	6860      	ldr	r0, [r4, #4]
   1239c:	f7f2 fd38 	bl	4e10 <log_output_dropped_process>
		if (colors) {
   123a0:	b97d      	cbnz	r5, 123c2 <z_shell_log_backend_process+0x5c>
	return process_msg_from_buffer(sh);
   123a2:	4630      	mov	r0, r6
   123a4:	f7ff fec5 	bl	12132 <process_msg_from_buffer>
}
   123a8:	b003      	add	sp, #12
   123aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
   123ac:	68b1      	ldr	r1, [r6, #8]
   123ae:	2202      	movs	r2, #2
   123b0:	312e      	adds	r1, #46	; 0x2e
   123b2:	a801      	add	r0, sp, #4
   123b4:	f000 fce9 	bl	12d8a <memcpy>
			z_shell_vt100_color_set(sh, SHELL_VT100_COLOR_RED);
   123b8:	2101      	movs	r1, #1
   123ba:	4630      	mov	r0, r6
   123bc:	f7f5 f83a 	bl	7434 <z_shell_vt100_color_set>
   123c0:	e7ea      	b.n	12398 <z_shell_log_backend_process+0x32>
			z_shell_vt100_colors_restore(sh, &col);
   123c2:	a901      	add	r1, sp, #4
   123c4:	4630      	mov	r0, r6
   123c6:	f7ff fd7a 	bl	11ebe <z_shell_vt100_colors_restore>
   123ca:	e7ea      	b.n	123a2 <z_shell_log_backend_process+0x3c>

000123cc <z_shell_raw_fprintf>:
{
   123cc:	b40e      	push	{r1, r2, r3}
   123ce:	b500      	push	{lr}
   123d0:	b082      	sub	sp, #8
   123d2:	aa03      	add	r2, sp, #12
   123d4:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   123d8:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   123da:	f7f4 fee9 	bl	71b0 <z_shell_fprintf_fmt>
}
   123de:	b002      	add	sp, #8
   123e0:	f85d eb04 	ldr.w	lr, [sp], #4
   123e4:	b003      	add	sp, #12
   123e6:	4770      	bx	lr

000123e8 <z_shell_help_subcmd_print>:
{
   123e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   123ec:	b086      	sub	sp, #24
   123ee:	4607      	mov	r7, r0
   123f0:	460d      	mov	r5, r1
   123f2:	4690      	mov	r8, r2
	size_t idx = 0;
   123f4:	2100      	movs	r1, #0
	uint16_t longest = 0U;
   123f6:	460c      	mov	r4, r1
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   123f8:	e004      	b.n	12404 <z_shell_help_subcmd_print+0x1c>
   123fa:	2300      	movs	r3, #0
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
   123fc:	429c      	cmp	r4, r3
   123fe:	bf38      	it	cc
   12400:	461c      	movcc	r4, r3
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   12402:	4631      	mov	r1, r6
   12404:	1c4e      	adds	r6, r1, #1
   12406:	aa01      	add	r2, sp, #4
   12408:	4628      	mov	r0, r5
   1240a:	f7f4 fee7 	bl	71dc <z_shell_cmd_get>
   1240e:	4603      	mov	r3, r0
   12410:	b130      	cbz	r0, 12420 <z_shell_help_subcmd_print+0x38>
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
   12412:	6818      	ldr	r0, [r3, #0]
   12414:	2800      	cmp	r0, #0
   12416:	d0f0      	beq.n	123fa <z_shell_help_subcmd_print+0x12>
   12418:	f000 fc61 	bl	12cde <strlen>
   1241c:	b283      	uxth	r3, r0
   1241e:	e7ed      	b.n	123fc <z_shell_help_subcmd_print+0x14>
	if (longest == 0) {
   12420:	b1c4      	cbz	r4, 12454 <z_shell_help_subcmd_print+0x6c>
	if (description != NULL) {
   12422:	f1b8 0f00 	cmp.w	r8, #0
   12426:	d004      	beq.n	12432 <z_shell_help_subcmd_print+0x4a>
		z_shell_fprintf(sh, SHELL_NORMAL, description);
   12428:	4642      	mov	r2, r8
   1242a:	2108      	movs	r1, #8
   1242c:	4638      	mov	r0, r7
   1242e:	f7ff fd7b 	bl	11f28 <z_shell_fprintf>
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   12432:	2100      	movs	r1, #0
   12434:	e006      	b.n	12444 <z_shell_help_subcmd_print+0x5c>
		help_item_print(sh, entry->syntax, longest, entry->help);
   12436:	684b      	ldr	r3, [r1, #4]
   12438:	4622      	mov	r2, r4
   1243a:	6809      	ldr	r1, [r1, #0]
   1243c:	4638      	mov	r0, r7
   1243e:	f7f5 f939 	bl	76b4 <help_item_print>
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   12442:	4631      	mov	r1, r6
   12444:	1c4e      	adds	r6, r1, #1
   12446:	aa01      	add	r2, sp, #4
   12448:	4628      	mov	r0, r5
   1244a:	f7f4 fec7 	bl	71dc <z_shell_cmd_get>
   1244e:	4601      	mov	r1, r0
   12450:	2800      	cmp	r0, #0
   12452:	d1f0      	bne.n	12436 <z_shell_help_subcmd_print+0x4e>
}
   12454:	b006      	add	sp, #24
   12456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001245a <cmd_shell_stats_reset>:
	sh->stats->log_lost_cnt = 0;
   1245a:	6983      	ldr	r3, [r0, #24]
   1245c:	2000      	movs	r0, #0
   1245e:	6018      	str	r0, [r3, #0]
}
   12460:	4770      	bx	lr

00012462 <z_shell_raw_fprintf>:
{
   12462:	b40e      	push	{r1, r2, r3}
   12464:	b500      	push	{lr}
   12466:	b082      	sub	sp, #8
   12468:	aa03      	add	r2, sp, #12
   1246a:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   1246e:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   12470:	f7f4 fe9e 	bl	71b0 <z_shell_fprintf_fmt>
}
   12474:	b002      	add	sp, #8
   12476:	f85d eb04 	ldr.w	lr, [sp], #4
   1247a:	b003      	add	sp, #12
   1247c:	4770      	bx	lr

0001247e <z_flag_echo_set>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, echo, val, ret);
   1247e:	6883      	ldr	r3, [r0, #8]
   12480:	f503 7318 	add.w	r3, r3, #608	; 0x260
   12484:	b171      	cbz	r1, 124a4 <z_flag_echo_set+0x26>
   12486:	f3bf 8f5b 	dmb	ish
   1248a:	e853 0f00 	ldrex	r0, [r3]
   1248e:	f040 0202 	orr.w	r2, r0, #2
   12492:	e843 2100 	strex	r1, r2, [r3]
   12496:	2900      	cmp	r1, #0
   12498:	d1f7      	bne.n	1248a <z_flag_echo_set+0xc>
   1249a:	f3bf 8f5b 	dmb	ish
}
   1249e:	f3c0 0040 	ubfx	r0, r0, #1, #1
   124a2:	4770      	bx	lr
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, echo, val, ret);
   124a4:	f3bf 8f5b 	dmb	ish
   124a8:	e853 0f00 	ldrex	r0, [r3]
   124ac:	f020 0202 	bic.w	r2, r0, #2
   124b0:	e843 2100 	strex	r1, r2, [r3]
   124b4:	2900      	cmp	r1, #0
   124b6:	d1f7      	bne.n	124a8 <z_flag_echo_set+0x2a>
   124b8:	f3bf 8f5b 	dmb	ish
   124bc:	e7ef      	b.n	1249e <z_flag_echo_set+0x20>

000124be <cmd_echo_on>:
{
   124be:	b508      	push	{r3, lr}
	z_flag_echo_set(sh, true);
   124c0:	2101      	movs	r1, #1
   124c2:	f7ff ffdc 	bl	1247e <z_flag_echo_set>
}
   124c6:	2000      	movs	r0, #0
   124c8:	bd08      	pop	{r3, pc}

000124ca <cmd_echo_off>:
{
   124ca:	b508      	push	{r3, lr}
	z_flag_echo_set(sh, false);
   124cc:	2100      	movs	r1, #0
   124ce:	f7ff ffd6 	bl	1247e <z_flag_echo_set>
}
   124d2:	2000      	movs	r0, #0
   124d4:	bd08      	pop	{r3, pc}

000124d6 <z_flag_use_vt100_set>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, use_vt100, val, ret);
   124d6:	6883      	ldr	r3, [r0, #8]
   124d8:	f503 7318 	add.w	r3, r3, #608	; 0x260
   124dc:	b171      	cbz	r1, 124fc <z_flag_use_vt100_set+0x26>
   124de:	f3bf 8f5b 	dmb	ish
   124e2:	e853 0f00 	ldrex	r0, [r3]
   124e6:	f040 0220 	orr.w	r2, r0, #32
   124ea:	e843 2100 	strex	r1, r2, [r3]
   124ee:	2900      	cmp	r1, #0
   124f0:	d1f7      	bne.n	124e2 <z_flag_use_vt100_set+0xc>
   124f2:	f3bf 8f5b 	dmb	ish
}
   124f6:	f3c0 1040 	ubfx	r0, r0, #5, #1
   124fa:	4770      	bx	lr
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, use_vt100, val, ret);
   124fc:	f3bf 8f5b 	dmb	ish
   12500:	e853 0f00 	ldrex	r0, [r3]
   12504:	f020 0220 	bic.w	r2, r0, #32
   12508:	e843 2100 	strex	r1, r2, [r3]
   1250c:	2900      	cmp	r1, #0
   1250e:	d1f7      	bne.n	12500 <z_flag_use_vt100_set+0x2a>
   12510:	f3bf 8f5b 	dmb	ish
   12514:	e7ef      	b.n	124f6 <z_flag_use_vt100_set+0x20>

00012516 <cmd_vt100_on>:
{
   12516:	b508      	push	{r3, lr}
	z_flag_use_vt100_set(sh, true);
   12518:	2101      	movs	r1, #1
   1251a:	f7ff ffdc 	bl	124d6 <z_flag_use_vt100_set>
}
   1251e:	2000      	movs	r0, #0
   12520:	bd08      	pop	{r3, pc}

00012522 <cmd_vt100_off>:
{
   12522:	b508      	push	{r3, lr}
	z_flag_use_vt100_set(sh, false);
   12524:	2100      	movs	r1, #0
   12526:	f7ff ffd6 	bl	124d6 <z_flag_use_vt100_set>
}
   1252a:	2000      	movs	r0, #0
   1252c:	bd08      	pop	{r3, pc}

0001252e <z_flag_use_colors_set>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, use_colors, val, ret);
   1252e:	6883      	ldr	r3, [r0, #8]
   12530:	f503 7318 	add.w	r3, r3, #608	; 0x260
   12534:	b171      	cbz	r1, 12554 <z_flag_use_colors_set+0x26>
   12536:	f3bf 8f5b 	dmb	ish
   1253a:	e853 0f00 	ldrex	r0, [r3]
   1253e:	f040 0210 	orr.w	r2, r0, #16
   12542:	e843 2100 	strex	r1, r2, [r3]
   12546:	2900      	cmp	r1, #0
   12548:	d1f7      	bne.n	1253a <z_flag_use_colors_set+0xc>
   1254a:	f3bf 8f5b 	dmb	ish
}
   1254e:	f3c0 1000 	ubfx	r0, r0, #4, #1
   12552:	4770      	bx	lr
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, use_colors, val, ret);
   12554:	f3bf 8f5b 	dmb	ish
   12558:	e853 0f00 	ldrex	r0, [r3]
   1255c:	f020 0210 	bic.w	r2, r0, #16
   12560:	e843 2100 	strex	r1, r2, [r3]
   12564:	2900      	cmp	r1, #0
   12566:	d1f7      	bne.n	12558 <z_flag_use_colors_set+0x2a>
   12568:	f3bf 8f5b 	dmb	ish
   1256c:	e7ef      	b.n	1254e <z_flag_use_colors_set+0x20>

0001256e <cmd_colors_on>:
{
   1256e:	b508      	push	{r3, lr}
	z_flag_use_colors_set(sh, true);
   12570:	2101      	movs	r1, #1
   12572:	f7ff ffdc 	bl	1252e <z_flag_use_colors_set>
}
   12576:	2000      	movs	r0, #0
   12578:	bd08      	pop	{r3, pc}

0001257a <cmd_colors_off>:
{
   1257a:	b508      	push	{r3, lr}
	z_flag_use_colors_set(sh, false);
   1257c:	2100      	movs	r1, #0
   1257e:	f7ff ffd6 	bl	1252e <z_flag_use_colors_set>
}
   12582:	2000      	movs	r0, #0
   12584:	bd08      	pop	{r3, pc}

00012586 <z_flag_mode_delete_set>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, mode_delete, val, ret);
   12586:	6883      	ldr	r3, [r0, #8]
   12588:	f503 7318 	add.w	r3, r3, #608	; 0x260
   1258c:	b171      	cbz	r1, 125ac <z_flag_mode_delete_set+0x26>
   1258e:	f3bf 8f5b 	dmb	ish
   12592:	e853 0f00 	ldrex	r0, [r3]
   12596:	f040 0208 	orr.w	r2, r0, #8
   1259a:	e843 2100 	strex	r1, r2, [r3]
   1259e:	2900      	cmp	r1, #0
   125a0:	d1f7      	bne.n	12592 <z_flag_mode_delete_set+0xc>
   125a2:	f3bf 8f5b 	dmb	ish
}
   125a6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   125aa:	4770      	bx	lr
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, mode_delete, val, ret);
   125ac:	f3bf 8f5b 	dmb	ish
   125b0:	e853 0f00 	ldrex	r0, [r3]
   125b4:	f020 0208 	bic.w	r2, r0, #8
   125b8:	e843 2100 	strex	r1, r2, [r3]
   125bc:	2900      	cmp	r1, #0
   125be:	d1f7      	bne.n	125b0 <z_flag_mode_delete_set+0x2a>
   125c0:	f3bf 8f5b 	dmb	ish
   125c4:	e7ef      	b.n	125a6 <z_flag_mode_delete_set+0x20>

000125c6 <cmd_bacskpace_mode_delete>:
{
   125c6:	b508      	push	{r3, lr}
	z_flag_mode_delete_set(sh, true);
   125c8:	2101      	movs	r1, #1
   125ca:	f7ff ffdc 	bl	12586 <z_flag_mode_delete_set>
}
   125ce:	2000      	movs	r0, #0
   125d0:	bd08      	pop	{r3, pc}

000125d2 <cmd_bacskpace_mode_backspace>:
{
   125d2:	b508      	push	{r3, lr}
	z_flag_mode_delete_set(sh, false);
   125d4:	2100      	movs	r1, #0
   125d6:	f7ff ffd6 	bl	12586 <z_flag_mode_delete_set>
}
   125da:	2000      	movs	r0, #0
   125dc:	bd08      	pop	{r3, pc}

000125de <terminal_size_get>:
{
   125de:	b530      	push	{r4, r5, lr}
   125e0:	b083      	sub	sp, #12
   125e2:	4604      	mov	r4, r0
	z_cursor_save(sh);
   125e4:	f7f5 f8fa 	bl	77dc <z_cursor_save>
	z_shell_op_cursor_vert_move(sh, -SHELL_MAX_TERMINAL_SIZE);
   125e8:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
   125ec:	4620      	mov	r0, r4
   125ee:	f7f4 fe7f 	bl	72f0 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(sh, SHELL_MAX_TERMINAL_SIZE);
   125f2:	21fa      	movs	r1, #250	; 0xfa
   125f4:	4620      	mov	r0, r4
   125f6:	f7f4 fe95 	bl	7324 <z_shell_op_cursor_horiz_move>
	if (cursor_position_get(sh, &x, &y) == 0) {
   125fa:	aa01      	add	r2, sp, #4
   125fc:	f10d 0106 	add.w	r1, sp, #6
   12600:	4620      	mov	r0, r4
   12602:	f7f5 f9a5 	bl	7950 <cursor_position_get>
   12606:	b970      	cbnz	r0, 12626 <terminal_size_get+0x48>
   12608:	4605      	mov	r5, r0
		sh->ctx->vt100_ctx.cons.terminal_wid = x;
   1260a:	68a3      	ldr	r3, [r4, #8]
   1260c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   12610:	855a      	strh	r2, [r3, #42]	; 0x2a
		sh->ctx->vt100_ctx.cons.terminal_hei = y;
   12612:	68a3      	ldr	r3, [r4, #8]
   12614:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   12618:	851a      	strh	r2, [r3, #40]	; 0x28
	z_cursor_restore(sh);
   1261a:	4620      	mov	r0, r4
   1261c:	f7f5 f8ee 	bl	77fc <z_cursor_restore>
}
   12620:	4628      	mov	r0, r5
   12622:	b003      	add	sp, #12
   12624:	bd30      	pop	{r4, r5, pc}
		ret_val = -ENOTSUP;
   12626:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1262a:	e7f6      	b.n	1261a <terminal_size_get+0x3c>

0001262c <add_to_head>:
}

static void add_to_head(struct shell_history *history,
			struct shell_history_item *item,
			uint8_t *src, size_t len, uint16_t padding)
{
   1262c:	b538      	push	{r3, r4, r5, lr}
   1262e:	4605      	mov	r5, r0
   12630:	460c      	mov	r4, r1
   12632:	4611      	mov	r1, r2
   12634:	461a      	mov	r2, r3
	item->len = len;
   12636:	8123      	strh	r3, [r4, #8]
	item->padding = padding;
   12638:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1263c:	8163      	strh	r3, [r4, #10]
	memcpy(item->data, src, len);
   1263e:	f104 000c 	add.w	r0, r4, #12
   12642:	f000 fba2 	bl	12d8a <memcpy>
	sys_dlist_prepend(&history->list, &item->dnode);
   12646:	1d2a      	adds	r2, r5, #4
	sys_dnode_t *const head = list->head;
   12648:	686b      	ldr	r3, [r5, #4]
	node->next = head;
   1264a:	6023      	str	r3, [r4, #0]
	node->prev = list;
   1264c:	6062      	str	r2, [r4, #4]
	head->prev = node;
   1264e:	605c      	str	r4, [r3, #4]
	list->head = node;
   12650:	606c      	str	r4, [r5, #4]
}
   12652:	bd38      	pop	{r3, r4, r5, pc}

00012654 <remove_from_tail>:

/* Returns true if element was removed. */
static bool remove_from_tail(struct shell_history *history)
{
   12654:	b508      	push	{r3, lr}
	sys_dnode_t *l_item; /* list item */
	struct shell_history_item *h_item;
	uint32_t total_len;

	if (sys_dlist_is_empty(&history->list)) {
   12656:	1d02      	adds	r2, r0, #4
	return list->head == list;
   12658:	6843      	ldr	r3, [r0, #4]
   1265a:	429a      	cmp	r2, r3
   1265c:	d010      	beq.n	12680 <remove_from_tail+0x2c>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1265e:	6883      	ldr	r3, [r0, #8]
	sys_dnode_t *const prev = node->prev;
   12660:	6859      	ldr	r1, [r3, #4]
	sys_dnode_t *const next = node->next;
   12662:	681a      	ldr	r2, [r3, #0]
	prev->next = next;
   12664:	600a      	str	r2, [r1, #0]
	next->prev = prev;
   12666:	6051      	str	r1, [r2, #4]
	node->next = NULL;
   12668:	2100      	movs	r1, #0
   1266a:	6019      	str	r1, [r3, #0]
	node->prev = NULL;
   1266c:	6059      	str	r1, [r3, #4]
	sys_dlist_remove(l_item);

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	total_len = offsetof(struct shell_history_item, data) +
			h_item->len + h_item->padding;
   1266e:	891a      	ldrh	r2, [r3, #8]
   12670:	895b      	ldrh	r3, [r3, #10]
   12672:	441a      	add	r2, r3
	ring_buf_get(history->ring_buf, NULL, total_len);
   12674:	320c      	adds	r2, #12
   12676:	6800      	ldr	r0, [r0, #0]
   12678:	f7fd f93f 	bl	f8fa <ring_buf_get>

	return true;
   1267c:	2001      	movs	r0, #1
}
   1267e:	bd08      	pop	{r3, pc}
		return false;
   12680:	2000      	movs	r0, #0
   12682:	e7fc      	b.n	1267e <remove_from_tail+0x2a>

00012684 <z_shell_history_mode_exit>:
	history->current = NULL;
   12684:	2300      	movs	r3, #0
   12686:	60c3      	str	r3, [r0, #12]
}
   12688:	4770      	bx	lr

0001268a <z_shell_history_get>:
{
   1268a:	b570      	push	{r4, r5, r6, lr}
   1268c:	461d      	mov	r5, r3
	if (sys_dlist_is_empty(&history->list)) {
   1268e:	f100 0c04 	add.w	ip, r0, #4
	return list->head == list;
   12692:	6844      	ldr	r4, [r0, #4]
   12694:	45a4      	cmp	ip, r4
   12696:	d00b      	beq.n	126b0 <z_shell_history_get+0x26>
   12698:	4616      	mov	r6, r2
	if (!up) { /* button down */
   1269a:	b991      	cbnz	r1, 126c2 <z_shell_history_get+0x38>
		if (history->current == NULL) {
   1269c:	68c3      	ldr	r3, [r0, #12]
   1269e:	b153      	cbz	r3, 126b6 <z_shell_history_get+0x2c>
	return (node == list->head) ? NULL : node->prev;
   126a0:	42a3      	cmp	r3, r4
   126a2:	d00b      	beq.n	126bc <z_shell_history_get+0x32>
   126a4:	685c      	ldr	r4, [r3, #4]
	history->current = l_item;
   126a6:	60c4      	str	r4, [r0, #12]
	if (l_item) {
   126a8:	b9b4      	cbnz	r4, 126d8 <z_shell_history_get+0x4e>
	*len = 0U;
   126aa:	2000      	movs	r0, #0
   126ac:	8028      	strh	r0, [r5, #0]
}
   126ae:	bd70      	pop	{r4, r5, r6, pc}
		*len = 0U;
   126b0:	2000      	movs	r0, #0
   126b2:	8018      	strh	r0, [r3, #0]
		return false;
   126b4:	e7fb      	b.n	126ae <z_shell_history_get+0x24>
			*len = 0U;
   126b6:	802b      	strh	r3, [r5, #0]
			return false;
   126b8:	4608      	mov	r0, r1
   126ba:	e7f8      	b.n	126ae <z_shell_history_get+0x24>
	history->current = l_item;
   126bc:	2300      	movs	r3, #0
   126be:	60c3      	str	r3, [r0, #12]
	if (l_item) {
   126c0:	e7f3      	b.n	126aa <z_shell_history_get+0x20>
		l_item = (history->current == NULL) ?
   126c2:	68c3      	ldr	r3, [r0, #12]
		sys_dlist_peek_head_not_empty(&history->list) :
   126c4:	2b00      	cmp	r3, #0
   126c6:	d0ee      	beq.n	126a6 <z_shell_history_get+0x1c>
	return (node == list->tail) ? NULL : node->next;
   126c8:	6882      	ldr	r2, [r0, #8]
   126ca:	4293      	cmp	r3, r2
   126cc:	d001      	beq.n	126d2 <z_shell_history_get+0x48>
   126ce:	681c      	ldr	r4, [r3, #0]
   126d0:	e7e9      	b.n	126a6 <z_shell_history_get+0x1c>
	history->current = l_item;
   126d2:	2300      	movs	r3, #0
   126d4:	60c3      	str	r3, [r0, #12]
	if (l_item) {
   126d6:	e7e8      	b.n	126aa <z_shell_history_get+0x20>
		memcpy(dst, h_item->data, h_item->len);
   126d8:	8922      	ldrh	r2, [r4, #8]
   126da:	f104 010c 	add.w	r1, r4, #12
   126de:	4630      	mov	r0, r6
   126e0:	f000 fb53 	bl	12d8a <memcpy>
		*len = h_item->len;
   126e4:	8923      	ldrh	r3, [r4, #8]
   126e6:	802b      	strh	r3, [r5, #0]
		dst[*len] = '\0';
   126e8:	2200      	movs	r2, #0
   126ea:	54f2      	strb	r2, [r6, r3]
		return true;
   126ec:	2001      	movs	r0, #1
   126ee:	e7de      	b.n	126ae <z_shell_history_get+0x24>

000126f0 <z_shell_history_purge>:

void z_shell_history_purge(struct shell_history *history)
{
   126f0:	b510      	push	{r4, lr}
   126f2:	4604      	mov	r4, r0
	while (remove_from_tail(history)) {
   126f4:	4620      	mov	r0, r4
   126f6:	f7ff ffad 	bl	12654 <remove_from_tail>
   126fa:	2800      	cmp	r0, #0
   126fc:	d1fa      	bne.n	126f4 <z_shell_history_purge+0x4>
	}
}
   126fe:	bd10      	pop	{r4, pc}

00012700 <z_shell_history_put>:

void z_shell_history_put(struct shell_history *history, uint8_t *line,
			 size_t len)
{
   12700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12704:	b084      	sub	sp, #16
	sys_dnode_t *l_item; /* list item */
	struct shell_history_item *h_item, *h_prev_item;
	uint32_t total_len = len + offsetof(struct shell_history_item, data);
   12706:	f102 050c 	add.w	r5, r2, #12
	uint32_t claim_len;
	uint32_t claim2_len;
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
   1270a:	f1c5 0800 	rsb	r8, r5, #0
   1270e:	f008 0803 	and.w	r8, r8, #3

	/* align to word. */
	total_len += padding;
   12712:	4445      	add	r5, r8

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   12714:	6803      	ldr	r3, [r0, #0]
	return buf->size;
   12716:	69db      	ldr	r3, [r3, #28]
   12718:	429d      	cmp	r5, r3
   1271a:	d902      	bls.n	12722 <z_shell_history_put+0x22>
		}

		ring_buf_put_finish(history->ring_buf, 0);
		remove_from_tail(history);
	} while (1);
}
   1271c:	b004      	add	sp, #16
   1271e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12722:	4604      	mov	r4, r0
   12724:	4689      	mov	r9, r1
   12726:	4617      	mov	r7, r2
	z_shell_history_mode_exit(history);
   12728:	f7ff ffac 	bl	12684 <z_shell_history_mode_exit>
	if (len == 0) {
   1272c:	2f00      	cmp	r7, #0
   1272e:	d0f5      	beq.n	1271c <z_shell_history_put+0x1c>
	l_item = sys_dlist_peek_head(&history->list);
   12730:	1d23      	adds	r3, r4, #4
	return list->head == list;
   12732:	f8d4 a004 	ldr.w	sl, [r4, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12736:	4553      	cmp	r3, sl
   12738:	d00e      	beq.n	12758 <z_shell_history_put+0x58>
	if (l_item &&
   1273a:	f1ba 0f00 	cmp.w	sl, #0
   1273e:	d01f      	beq.n	12780 <z_shell_history_put+0x80>
	   (h_prev_item->len == len) &&
   12740:	f8ba 3008 	ldrh.w	r3, [sl, #8]
	if (l_item &&
   12744:	42bb      	cmp	r3, r7
   12746:	d11b      	bne.n	12780 <z_shell_history_put+0x80>
	   (memcmp(h_prev_item->data, line, len) == 0)) {
   12748:	463a      	mov	r2, r7
   1274a:	4649      	mov	r1, r9
   1274c:	f10a 000c 	add.w	r0, sl, #12
   12750:	f000 faf6 	bl	12d40 <memcmp>
	   (h_prev_item->len == len) &&
   12754:	b9a0      	cbnz	r0, 12780 <z_shell_history_put+0x80>
   12756:	e7e1      	b.n	1271c <z_shell_history_put+0x1c>
   12758:	f04f 0a00 	mov.w	sl, #0
   1275c:	e010      	b.n	12780 <z_shell_history_put+0x80>
		claim_len = ring_buf_put_claim(history->ring_buf,
   1275e:	462a      	mov	r2, r5
   12760:	a903      	add	r1, sp, #12
   12762:	6820      	ldr	r0, [r4, #0]
   12764:	f7fd f82f 	bl	f7c6 <ring_buf_put_claim>
   12768:	4606      	mov	r6, r0
		if (claim_len < total_len) {
   1276a:	4285      	cmp	r5, r0
   1276c:	d815      	bhi.n	1279a <z_shell_history_put+0x9a>
		if (claim_len == total_len) {
   1276e:	42b5      	cmp	r5, r6
   12770:	d022      	beq.n	127b8 <z_shell_history_put+0xb8>
		ring_buf_put_finish(history->ring_buf, 0);
   12772:	2100      	movs	r1, #0
   12774:	6820      	ldr	r0, [r4, #0]
   12776:	f7fd f847 	bl	f808 <ring_buf_put_finish>
		remove_from_tail(history);
   1277a:	4620      	mov	r0, r4
   1277c:	f7ff ff6a 	bl	12654 <remove_from_tail>
		if (ring_buf_is_empty(history->ring_buf)) {
   12780:	6820      	ldr	r0, [r4, #0]
	return buf->get_head == buf->put_tail;
   12782:	6902      	ldr	r2, [r0, #16]
   12784:	6883      	ldr	r3, [r0, #8]
   12786:	429a      	cmp	r2, r3
   12788:	d1e9      	bne.n	1275e <z_shell_history_put+0x5e>
	buf->put_head = buf->put_tail = buf->put_base = value;
   1278a:	2300      	movs	r3, #0
   1278c:	60c3      	str	r3, [r0, #12]
   1278e:	6083      	str	r3, [r0, #8]
   12790:	6043      	str	r3, [r0, #4]
	buf->get_head = buf->get_tail = buf->get_base = value;
   12792:	6183      	str	r3, [r0, #24]
   12794:	6143      	str	r3, [r0, #20]
   12796:	6103      	str	r3, [r0, #16]
}
   12798:	e7e1      	b.n	1275e <z_shell_history_put+0x5e>
				ring_buf_put_claim(history->ring_buf,
   1279a:	462a      	mov	r2, r5
   1279c:	a903      	add	r1, sp, #12
   1279e:	6820      	ldr	r0, [r4, #0]
   127a0:	f7fd f811 	bl	f7c6 <ring_buf_put_claim>
			if (claim2_len == total_len) {
   127a4:	4285      	cmp	r5, r0
   127a6:	d1e2      	bne.n	1276e <z_shell_history_put+0x6e>
				h_prev_item->padding += claim_len;
   127a8:	f8ba 300a 	ldrh.w	r3, [sl, #10]
   127ac:	4433      	add	r3, r6
   127ae:	f8aa 300a 	strh.w	r3, [sl, #10]
				total_len += claim_len;
   127b2:	4435      	add	r5, r6
				claim_len = total_len;
   127b4:	462e      	mov	r6, r5
   127b6:	e7da      	b.n	1276e <z_shell_history_put+0x6e>
			add_to_head(history, h_item, line, len, padding);
   127b8:	f8cd 8000 	str.w	r8, [sp]
   127bc:	463b      	mov	r3, r7
   127be:	464a      	mov	r2, r9
   127c0:	9903      	ldr	r1, [sp, #12]
   127c2:	4620      	mov	r0, r4
   127c4:	f7ff ff32 	bl	1262c <add_to_head>
			ring_buf_put_finish(history->ring_buf, claim_len);
   127c8:	4631      	mov	r1, r6
   127ca:	6820      	ldr	r0, [r4, #0]
   127cc:	f7fd f81c 	bl	f808 <ring_buf_put_finish>
			break;
   127d0:	e7a4      	b.n	1271c <z_shell_history_put+0x1c>

000127d2 <z_shell_history_init>:

void z_shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
   127d2:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   127d4:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   127d6:	6083      	str	r3, [r0, #8]
	history->current = NULL;
   127d8:	2300      	movs	r3, #0
   127da:	60c3      	str	r3, [r0, #12]
}
   127dc:	4770      	bx	lr

000127de <command_add>:
{
   127de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   127e2:	4606      	mov	r6, r0
   127e4:	460c      	mov	r4, r1
   127e6:	4698      	mov	r8, r3
   127e8:	4617      	mov	r7, r2
   127ea:	b152      	cbz	r2, 12802 <command_add+0x24>
   127ec:	4610      	mov	r0, r2
   127ee:	f000 fa76 	bl	12cde <strlen>
   127f2:	b285      	uxth	r5, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
   127f4:	8822      	ldrh	r2, [r4, #0]
   127f6:	442a      	add	r2, r5
   127f8:	2aff      	cmp	r2, #255	; 0xff
   127fa:	dd04      	ble.n	12806 <command_add+0x28>
		return SHELL_WILDCARD_CMD_MISSING_SPACE;
   127fc:	2001      	movs	r0, #1
}
   127fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12802:	2500      	movs	r5, #0
   12804:	e7f6      	b.n	127f4 <command_add+0x16>
	completion_addr = strstr(buff, pattern);
   12806:	4641      	mov	r1, r8
   12808:	4630      	mov	r0, r6
   1280a:	f000 fa17 	bl	12c3c <strstr>
	if (!completion_addr) {
   1280e:	4606      	mov	r6, r0
   12810:	b1a8      	cbz	r0, 1283e <command_add+0x60>
   12812:	f000 fa64 	bl	12cde <strlen>
   12816:	b282      	uxth	r2, r0
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
   12818:	1c68      	adds	r0, r5, #1
   1281a:	3201      	adds	r2, #1
   1281c:	4631      	mov	r1, r6
   1281e:	4430      	add	r0, r6
   12820:	f000 faa0 	bl	12d64 <memmove>
	memcpy(completion_addr, cmd, cmd_len);
   12824:	462a      	mov	r2, r5
   12826:	4639      	mov	r1, r7
   12828:	4630      	mov	r0, r6
   1282a:	f000 faae 	bl	12d8a <memcpy>
	completion_addr[cmd_len] = ' ';
   1282e:	2320      	movs	r3, #32
   12830:	5573      	strb	r3, [r6, r5]
	*buff_len += cmd_len + 1; /* + 1 for space */
   12832:	8823      	ldrh	r3, [r4, #0]
   12834:	442b      	add	r3, r5
   12836:	3301      	adds	r3, #1
   12838:	8023      	strh	r3, [r4, #0]
	return SHELL_WILDCARD_CMD_ADDED;
   1283a:	2000      	movs	r0, #0
   1283c:	e7df      	b.n	127fe <command_add+0x20>
		return SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
   1283e:	2002      	movs	r0, #2
   12840:	e7dd      	b.n	127fe <command_add+0x20>

00012842 <z_shell_has_wildcard>:

bool z_shell_has_wildcard(const char *str)
{
   12842:	b510      	push	{r4, lr}
   12844:	4604      	mov	r4, r0
   12846:	b120      	cbz	r0, 12852 <z_shell_has_wildcard+0x10>
   12848:	f000 fa49 	bl	12cde <strlen>
   1284c:	b280      	uxth	r0, r0
	uint16_t str_len = z_shell_strlen(str);

	for (size_t i = 0; i < str_len; i++) {
   1284e:	2300      	movs	r3, #0
   12850:	e002      	b.n	12858 <z_shell_has_wildcard+0x16>
   12852:	2000      	movs	r0, #0
   12854:	e7fb      	b.n	1284e <z_shell_has_wildcard+0xc>
   12856:	3301      	adds	r3, #1
   12858:	4298      	cmp	r0, r3
   1285a:	d906      	bls.n	1286a <z_shell_has_wildcard+0x28>
		if ((str[i] == '?') || (str[i] == '*')) {
   1285c:	5ce2      	ldrb	r2, [r4, r3]
   1285e:	2a3f      	cmp	r2, #63	; 0x3f
   12860:	d005      	beq.n	1286e <z_shell_has_wildcard+0x2c>
   12862:	2a2a      	cmp	r2, #42	; 0x2a
   12864:	d1f7      	bne.n	12856 <z_shell_has_wildcard+0x14>
			return true;
   12866:	2001      	movs	r0, #1
   12868:	e000      	b.n	1286c <z_shell_has_wildcard+0x2a>
		}
	}

	return false;
   1286a:	2000      	movs	r0, #0
}
   1286c:	bd10      	pop	{r4, pc}
			return true;
   1286e:	2001      	movs	r0, #1
   12870:	e7fc      	b.n	1286c <z_shell_has_wildcard+0x2a>

00012872 <z_shell_wildcard_prepare>:

void z_shell_wildcard_prepare(const struct shell *sh)
{
   12872:	b510      	push	{r4, lr}
   12874:	4604      	mov	r4, r0
	 *    buffer with all expanded commands is copied to Command buffer.
	 * 7. Deepest found handler is executed and all lower level commands,
	 *    including expanded commands, are passed as arguments.
	 */

	memset(sh->ctx->temp_buff, 0, sizeof(sh->ctx->temp_buff));
   12876:	6880      	ldr	r0, [r0, #8]
   12878:	f44f 7280 	mov.w	r2, #256	; 0x100
   1287c:	2100      	movs	r1, #0
   1287e:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   12882:	f000 fab1 	bl	12de8 <memset>
	memcpy(sh->ctx->temp_buff,
   12886:	68a0      	ldr	r0, [r4, #8]
   12888:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   1288a:	f100 0142 	add.w	r1, r0, #66	; 0x42
   1288e:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   12892:	f000 fa7a 	bl	12d8a <memcpy>

	/* Function shell_spaces_trim must be used instead of shell_make_argv.
	 * At this point it is important to keep temp_buff as one string.
	 * It will allow to find wildcard commands easily with strstr function.
	 */
	z_shell_spaces_trim(sh->ctx->temp_buff);
   12896:	68a0      	ldr	r0, [r4, #8]
   12898:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   1289c:	f7ff f8ff 	bl	11a9e <z_shell_spaces_trim>

	/* +1 for EOS*/
	sh->ctx->cmd_tmp_buff_len = z_shell_strlen(sh->ctx->temp_buff) + 1;
   128a0:	68a0      	ldr	r0, [r4, #8]
   128a2:	f510 70a1 	adds.w	r0, r0, #322	; 0x142
   128a6:	d007      	beq.n	128b8 <z_shell_wildcard_prepare+0x46>
   128a8:	f000 fa19 	bl	12cde <strlen>
   128ac:	b280      	uxth	r0, r0
   128ae:	68a3      	ldr	r3, [r4, #8]
   128b0:	3001      	adds	r0, #1
   128b2:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
}
   128b6:	bd10      	pop	{r4, pc}
   128b8:	2000      	movs	r0, #0
   128ba:	e7f8      	b.n	128ae <z_shell_wildcard_prepare+0x3c>

000128bc <z_shell_wildcard_process>:
					const struct shell_static_entry *cmd,
					const char *pattern)
{
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
   128bc:	b169      	cbz	r1, 128da <z_shell_wildcard_process+0x1e>
{
   128be:	b570      	push	{r4, r5, r6, lr}
   128c0:	4605      	mov	r5, r0
   128c2:	4614      	mov	r4, r2
   128c4:	460e      	mov	r6, r1
		return ret_val;
	}

	if (!z_shell_has_wildcard(pattern)) {
   128c6:	4610      	mov	r0, r2
   128c8:	f7ff ffbb 	bl	12842 <z_shell_has_wildcard>
   128cc:	b138      	cbz	r0, 128de <z_shell_wildcard_process+0x22>
	 * will be replaced by matching commands. If there is no space in the
	 * buffer to add all matching commands function will add as many as
	 * possible. Next it will continue to search for next wildcard pattern
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(sh, cmd, pattern);
   128ce:	4622      	mov	r2, r4
   128d0:	4631      	mov	r1, r6
   128d2:	4628      	mov	r0, r5
   128d4:	f7f5 f90c 	bl	7af0 <commands_expand>

	return ret_val;
}
   128d8:	bd70      	pop	{r4, r5, r6, pc}
		return ret_val;
   128da:	2003      	movs	r0, #3
}
   128dc:	4770      	bx	lr
		return ret_val;
   128de:	2003      	movs	r0, #3
   128e0:	e7fa      	b.n	128d8 <z_shell_wildcard_process+0x1c>

000128e2 <z_shell_wildcard_finalize>:

void z_shell_wildcard_finalize(const struct shell *sh)
{
   128e2:	b510      	push	{r4, lr}
   128e4:	4604      	mov	r4, r0
	memcpy(sh->ctx->cmd_buff,
   128e6:	6880      	ldr	r0, [r0, #8]
   128e8:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
   128ec:	f500 71a1 	add.w	r1, r0, #322	; 0x142
   128f0:	3042      	adds	r0, #66	; 0x42
   128f2:	f000 fa4a 	bl	12d8a <memcpy>
	       sh->ctx->temp_buff,
	       sh->ctx->cmd_tmp_buff_len);
	sh->ctx->cmd_buff_len = sh->ctx->cmd_tmp_buff_len;
   128f6:	68a3      	ldr	r3, [r4, #8]
   128f8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   128fc:	879a      	strh	r2, [r3, #60]	; 0x3c
}
   128fe:	bd10      	pop	{r4, pc}

00012900 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   12900:	b538      	push	{r3, r4, r5, lr}
   12902:	4604      	mov	r4, r0

	if (esf != NULL) {
   12904:	460d      	mov	r5, r1
   12906:	b111      	cbz	r1, 1290e <z_arm_fatal_error+0xe>
		esf_dump(esf);
   12908:	4608      	mov	r0, r1
   1290a:	f7f5 f959 	bl	7bc0 <esf_dump>
	}
	z_fatal_error(reason, esf);
   1290e:	4629      	mov	r1, r5
   12910:	4620      	mov	r0, r4
   12912:	f7fa fb1b 	bl	cf4c <z_fatal_error>
}
   12916:	bd38      	pop	{r3, r4, r5, pc}

00012918 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   12918:	b508      	push	{r3, lr}
   1291a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1291c:	6800      	ldr	r0, [r0, #0]
   1291e:	f7ff ffef 	bl	12900 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   12922:	bd08      	pop	{r3, pc}

00012924 <arch_irq_enable>:
{
   12924:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
   12926:	b240      	sxtb	r0, r0
   12928:	f7f5 fa7e 	bl	7e28 <__NVIC_EnableIRQ>
}
   1292c:	bd08      	pop	{r3, pc}

0001292e <arch_irq_disable>:
{
   1292e:	b508      	push	{r3, lr}
	NVIC_DisableIRQ((IRQn_Type)irq);
   12930:	b240      	sxtb	r0, r0
   12932:	f7f5 fa87 	bl	7e44 <__NVIC_DisableIRQ>
}
   12936:	bd08      	pop	{r3, pc}

00012938 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   12938:	b508      	push	{r3, lr}
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1293a:	3101      	adds	r1, #1
   1293c:	b240      	sxtb	r0, r0
   1293e:	f7f5 fa93 	bl	7e68 <__NVIC_SetPriority>
}
   12942:	bd08      	pop	{r3, pc}

00012944 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
   12944:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   12946:	2100      	movs	r1, #0
   12948:	2001      	movs	r0, #1
   1294a:	f7ff ffd9 	bl	12900 <z_arm_fatal_error>
}
   1294e:	bd08      	pop	{r3, pc}

00012950 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   12950:	b508      	push	{r3, lr}
	handler();
   12952:	f7f5 faab 	bl	7eac <z_SysNmiOnReset>
	z_arm_int_exit();
   12956:	f7f5 fb6f 	bl	8038 <z_arm_exc_exit>
}
   1295a:	bd08      	pop	{r3, pc}

0001295c <memory_fault_recoverable>:
}
   1295c:	2000      	movs	r0, #0
   1295e:	4770      	bx	lr

00012960 <fault_handle>:
{
   12960:	b508      	push	{r3, lr}
	*recoverable = false;
   12962:	2300      	movs	r3, #0
   12964:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   12966:	1ecb      	subs	r3, r1, #3
   12968:	2b09      	cmp	r3, #9
   1296a:	d81a      	bhi.n	129a2 <fault_handle+0x42>
   1296c:	e8df f003 	tbb	[pc, r3]
   12970:	110d0905 	.word	0x110d0905
   12974:	19191919 	.word	0x19191919
   12978:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
   1297a:	4611      	mov	r1, r2
   1297c:	f7f6 f89e 	bl	8abc <hard_fault>
}
   12980:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   12982:	2100      	movs	r1, #0
   12984:	f7f5 fbd0 	bl	8128 <mem_manage_fault>
		break;
   12988:	e7fa      	b.n	12980 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   1298a:	2100      	movs	r1, #0
   1298c:	f7f5 fd6a 	bl	8464 <bus_fault>
		break;
   12990:	e7f6      	b.n	12980 <fault_handle+0x20>
		reason = usage_fault(esf);
   12992:	f7f5 ff27 	bl	87e4 <usage_fault>
		break;
   12996:	e7f3      	b.n	12980 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   12998:	4611      	mov	r1, r2
   1299a:	f7f6 f9bd 	bl	8d18 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1299e:	2000      	movs	r0, #0
		break;
   129a0:	e7ee      	b.n	12980 <fault_handle+0x20>
		reserved_exception(esf, fault);
   129a2:	f7f6 f9ed 	bl	8d80 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   129a6:	2000      	movs	r0, #0
	return reason;
   129a8:	e7ea      	b.n	12980 <fault_handle+0x20>

000129aa <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   129aa:	6843      	ldr	r3, [r0, #4]
   129ac:	1e5a      	subs	r2, r3, #1
		&&
   129ae:	4213      	tst	r3, r2
   129b0:	d106      	bne.n	129c0 <mpu_partition_is_valid+0x16>
		&&
   129b2:	2b1f      	cmp	r3, #31
   129b4:	d906      	bls.n	129c4 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   129b6:	6803      	ldr	r3, [r0, #0]
		&&
   129b8:	421a      	tst	r2, r3
   129ba:	d005      	beq.n	129c8 <mpu_partition_is_valid+0x1e>
   129bc:	2000      	movs	r0, #0
   129be:	4770      	bx	lr
   129c0:	2000      	movs	r0, #0
   129c2:	4770      	bx	lr
   129c4:	2000      	movs	r0, #0
   129c6:	4770      	bx	lr
   129c8:	2001      	movs	r0, #1
}
   129ca:	4770      	bx	lr

000129cc <mpu_configure_region>:
{
   129cc:	b500      	push	{lr}
   129ce:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   129d0:	680b      	ldr	r3, [r1, #0]
   129d2:	9301      	str	r3, [sp, #4]
		&new_region->attr, new_region->start, new_region->size);
   129d4:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   129d6:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   129d8:	2b20      	cmp	r3, #32
   129da:	d912      	bls.n	12a02 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   129dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   129e0:	d811      	bhi.n	12a06 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   129e2:	3b01      	subs	r3, #1
   129e4:	fab3 f383 	clz	r3, r3
   129e8:	f1c3 031f 	rsb	r3, r3, #31
   129ec:	005b      	lsls	r3, r3, #1
   129ee:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   129f2:	4313      	orrs	r3, r2
   129f4:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   129f6:	a901      	add	r1, sp, #4
   129f8:	f7f6 fb4c 	bl	9094 <region_allocate_and_init>
}
   129fc:	b005      	add	sp, #20
   129fe:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   12a02:	2308      	movs	r3, #8
   12a04:	e7f5      	b.n	129f2 <mpu_configure_region+0x26>
		return REGION_4G;
   12a06:	233e      	movs	r3, #62	; 0x3e
   12a08:	e7f3      	b.n	129f2 <mpu_configure_region+0x26>

00012a0a <arm_core_mpu_configure_static_mpu_regions>:
{
   12a0a:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   12a0c:	f7f6 fc02 	bl	9214 <mpu_configure_static_mpu_regions>
}
   12a10:	bd08      	pop	{r3, pc}

00012a12 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   12a12:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a16:	4606      	mov	r6, r0
   12a18:	460f      	mov	r7, r1
	register const char *s = nptr;
   12a1a:	4604      	mov	r4, r0
   12a1c:	e001      	b.n	12a22 <strtol+0x10>
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   12a1e:	2501      	movs	r5, #1
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
	} while (isspace((unsigned char)c) != 0);
   12a20:	b16d      	cbz	r5, 12a3e <strtol+0x2c>
		c = *s++;
   12a22:	4620      	mov	r0, r4
   12a24:	3401      	adds	r4, #1
   12a26:	7801      	ldrb	r1, [r0, #0]
   12a28:	460b      	mov	r3, r1
   12a2a:	2920      	cmp	r1, #32
   12a2c:	d0f7      	beq.n	12a1e <strtol+0xc>
   12a2e:	f1a1 0509 	sub.w	r5, r1, #9
   12a32:	2d04      	cmp	r5, #4
   12a34:	d801      	bhi.n	12a3a <strtol+0x28>
   12a36:	2501      	movs	r5, #1
   12a38:	e7f2      	b.n	12a20 <strtol+0xe>
   12a3a:	2500      	movs	r5, #0
   12a3c:	e7f0      	b.n	12a20 <strtol+0xe>
	if (c == '-') {
   12a3e:	292d      	cmp	r1, #45	; 0x2d
   12a40:	d017      	beq.n	12a72 <strtol+0x60>
		neg = 1;
		c = *s++;
	} else if (c == '+') {
   12a42:	292b      	cmp	r1, #43	; 0x2b
   12a44:	d01a      	beq.n	12a7c <strtol+0x6a>
	register int neg = 0, any, cutlim;
   12a46:	46ae      	mov	lr, r5
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   12a48:	b10a      	cbz	r2, 12a4e <strtol+0x3c>
   12a4a:	2a10      	cmp	r2, #16
   12a4c:	d101      	bne.n	12a52 <strtol+0x40>
   12a4e:	2b30      	cmp	r3, #48	; 0x30
   12a50:	d018      	beq.n	12a84 <strtol+0x72>
		c = s[1];
		s += 2;
		base = 16;
	}

	if (base == 0) {
   12a52:	b912      	cbnz	r2, 12a5a <strtol+0x48>
		base = c == '0' ? 8 : 10;
   12a54:	2b30      	cmp	r3, #48	; 0x30
   12a56:	d01e      	beq.n	12a96 <strtol+0x84>
   12a58:	220a      	movs	r2, #10
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   12a5a:	f1be 0f00 	cmp.w	lr, #0
   12a5e:	d01c      	beq.n	12a9a <strtol+0x88>
   12a60:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
   12a64:	4694      	mov	ip, r2
   12a66:	fbb8 f1f2 	udiv	r1, r8, r2
   12a6a:	fb02 8911 	mls	r9, r2, r1, r8
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   12a6e:	2000      	movs	r0, #0
   12a70:	e033      	b.n	12ada <strtol+0xc8>
		c = *s++;
   12a72:	7823      	ldrb	r3, [r4, #0]
   12a74:	1c84      	adds	r4, r0, #2
		neg = 1;
   12a76:	f04f 0e01 	mov.w	lr, #1
   12a7a:	e7e5      	b.n	12a48 <strtol+0x36>
		c = *s++;
   12a7c:	7823      	ldrb	r3, [r4, #0]
	register int neg = 0, any, cutlim;
   12a7e:	46ae      	mov	lr, r5
		c = *s++;
   12a80:	1c84      	adds	r4, r0, #2
   12a82:	e7e1      	b.n	12a48 <strtol+0x36>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   12a84:	7821      	ldrb	r1, [r4, #0]
   12a86:	2978      	cmp	r1, #120	; 0x78
   12a88:	d001      	beq.n	12a8e <strtol+0x7c>
   12a8a:	2958      	cmp	r1, #88	; 0x58
   12a8c:	d1e1      	bne.n	12a52 <strtol+0x40>
		c = s[1];
   12a8e:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   12a90:	3402      	adds	r4, #2
		base = 16;
   12a92:	2210      	movs	r2, #16
   12a94:	e7dd      	b.n	12a52 <strtol+0x40>
		base = c == '0' ? 8 : 10;
   12a96:	2208      	movs	r2, #8
   12a98:	e7df      	b.n	12a5a <strtol+0x48>
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   12a9a:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
   12a9e:	e7e1      	b.n	12a64 <strtol+0x52>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   12aa0:	f04a 0b20 	orr.w	fp, sl, #32
   12aa4:	f1ab 0b61 	sub.w	fp, fp, #97	; 0x61
		if (isdigit((unsigned char)c) != 0) {
			c -= '0';
		} else if (isalpha((unsigned char)c) != 0) {
   12aa8:	f1bb 0f19 	cmp.w	fp, #25
   12aac:	d82b      	bhi.n	12b06 <strtol+0xf4>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   12aae:	f1aa 0a41 	sub.w	sl, sl, #65	; 0x41
			c -= isupper((unsigned char)c) != 0 ? 'A' - 10 : 'a' - 10;
   12ab2:	f1ba 0f19 	cmp.w	sl, #25
   12ab6:	d804      	bhi.n	12ac2 <strtol+0xb0>
   12ab8:	f04f 0a37 	mov.w	sl, #55	; 0x37
   12abc:	eba3 030a 	sub.w	r3, r3, sl
   12ac0:	e013      	b.n	12aea <strtol+0xd8>
   12ac2:	f04f 0a57 	mov.w	sl, #87	; 0x57
   12ac6:	e7f9      	b.n	12abc <strtol+0xaa>
			break;
		}
		if (c >= base) {
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   12ac8:	454b      	cmp	r3, r9
   12aca:	dd15      	ble.n	12af8 <strtol+0xe6>
			any = -1;
   12acc:	f04f 35ff 	mov.w	r5, #4294967295
   12ad0:	e001      	b.n	12ad6 <strtol+0xc4>
   12ad2:	f04f 35ff 	mov.w	r5, #4294967295
	for (acc = 0, any = 0;; c = *s++) {
   12ad6:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit((unsigned char)c) != 0) {
   12ada:	fa5f fa83 	uxtb.w	sl, r3
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   12ade:	f1a3 0b30 	sub.w	fp, r3, #48	; 0x30
   12ae2:	f1bb 0f09 	cmp.w	fp, #9
   12ae6:	d8db      	bhi.n	12aa0 <strtol+0x8e>
			c -= '0';
   12ae8:	465b      	mov	r3, fp
		if (c >= base) {
   12aea:	429a      	cmp	r2, r3
   12aec:	dd0b      	ble.n	12b06 <strtol+0xf4>
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   12aee:	2d00      	cmp	r5, #0
   12af0:	dbef      	blt.n	12ad2 <strtol+0xc0>
   12af2:	4288      	cmp	r0, r1
   12af4:	d804      	bhi.n	12b00 <strtol+0xee>
   12af6:	d0e7      	beq.n	12ac8 <strtol+0xb6>
		} else {
			any = 1;
			acc *= base;
			acc += c;
   12af8:	fb00 300c 	mla	r0, r0, ip, r3
			any = 1;
   12afc:	2501      	movs	r5, #1
   12afe:	e7ea      	b.n	12ad6 <strtol+0xc4>
			any = -1;
   12b00:	f04f 35ff 	mov.w	r5, #4294967295
   12b04:	e7e7      	b.n	12ad6 <strtol+0xc4>
		}
	}

	if (any < 0) {
   12b06:	2d00      	cmp	r5, #0
   12b08:	db09      	blt.n	12b1e <strtol+0x10c>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
	} else if (neg) {
   12b0a:	f1be 0f00 	cmp.w	lr, #0
   12b0e:	d000      	beq.n	12b12 <strtol+0x100>
		acc = -acc;
   12b10:	4240      	negs	r0, r0
	}

	if (endptr != NULL) {
   12b12:	b117      	cbz	r7, 12b1a <strtol+0x108>
		*endptr = (char *)(any ? s - 1 : nptr);
   12b14:	b105      	cbz	r5, 12b18 <strtol+0x106>
   12b16:	1e66      	subs	r6, r4, #1
   12b18:	603e      	str	r6, [r7, #0]
	}
	return acc;
}
   12b1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b1e:	f7fa f9df 	bl	cee0 <z_impl_z_errno>
		errno = ERANGE;
   12b22:	2322      	movs	r3, #34	; 0x22
   12b24:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   12b26:	4640      	mov	r0, r8
   12b28:	e7f3      	b.n	12b12 <strtol+0x100>

00012b2a <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   12b2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12b2e:	4606      	mov	r6, r0
   12b30:	460f      	mov	r7, r1
	register const char *s = nptr;
   12b32:	4604      	mov	r4, r0
   12b34:	e001      	b.n	12b3a <strtoul+0x10>
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   12b36:	2501      	movs	r5, #1
	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
	} while (isspace((unsigned char)c) != 0);
   12b38:	b16d      	cbz	r5, 12b56 <strtoul+0x2c>
		c = *s++;
   12b3a:	4620      	mov	r0, r4
   12b3c:	3401      	adds	r4, #1
   12b3e:	7801      	ldrb	r1, [r0, #0]
   12b40:	460b      	mov	r3, r1
   12b42:	2920      	cmp	r1, #32
   12b44:	d0f7      	beq.n	12b36 <strtoul+0xc>
   12b46:	f1a1 0509 	sub.w	r5, r1, #9
   12b4a:	2d04      	cmp	r5, #4
   12b4c:	d801      	bhi.n	12b52 <strtoul+0x28>
   12b4e:	2501      	movs	r5, #1
   12b50:	e7f2      	b.n	12b38 <strtoul+0xe>
   12b52:	2500      	movs	r5, #0
   12b54:	e7f0      	b.n	12b38 <strtoul+0xe>
	if (c == '-') {
   12b56:	292d      	cmp	r1, #45	; 0x2d
   12b58:	d016      	beq.n	12b88 <strtoul+0x5e>
		neg = 1;
		c = *s++;
	} else if (c == '+') {
   12b5a:	292b      	cmp	r1, #43	; 0x2b
   12b5c:	d019      	beq.n	12b92 <strtoul+0x68>
	register int neg = 0, any, cutlim;
   12b5e:	46a9      	mov	r9, r5
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   12b60:	b10a      	cbz	r2, 12b66 <strtoul+0x3c>
   12b62:	2a10      	cmp	r2, #16
   12b64:	d101      	bne.n	12b6a <strtoul+0x40>
   12b66:	2b30      	cmp	r3, #48	; 0x30
   12b68:	d017      	beq.n	12b9a <strtoul+0x70>
		c = s[1];
		s += 2;
		base = 16;
	}

	if (base == 0) {
   12b6a:	b912      	cbnz	r2, 12b72 <strtoul+0x48>
		base = c == '0' ? 8 : 10;
   12b6c:	2b30      	cmp	r3, #48	; 0x30
   12b6e:	d01d      	beq.n	12bac <strtoul+0x82>
   12b70:	220a      	movs	r2, #10
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   12b72:	4690      	mov	r8, r2
   12b74:	f04f 31ff 	mov.w	r1, #4294967295
   12b78:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   12b7c:	fb02 fe01 	mul.w	lr, r2, r1
   12b80:	ea6f 0e0e 	mvn.w	lr, lr
	for (acc = 0, any = 0;; c = *s++) {
   12b84:	2000      	movs	r0, #0
   12b86:	e030      	b.n	12bea <strtoul+0xc0>
		c = *s++;
   12b88:	7823      	ldrb	r3, [r4, #0]
   12b8a:	1c84      	adds	r4, r0, #2
		neg = 1;
   12b8c:	f04f 0901 	mov.w	r9, #1
   12b90:	e7e6      	b.n	12b60 <strtoul+0x36>
		c = *s++;
   12b92:	7823      	ldrb	r3, [r4, #0]
	register int neg = 0, any, cutlim;
   12b94:	46a9      	mov	r9, r5
		c = *s++;
   12b96:	1c84      	adds	r4, r0, #2
   12b98:	e7e2      	b.n	12b60 <strtoul+0x36>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   12b9a:	7821      	ldrb	r1, [r4, #0]
   12b9c:	2978      	cmp	r1, #120	; 0x78
   12b9e:	d001      	beq.n	12ba4 <strtoul+0x7a>
   12ba0:	2958      	cmp	r1, #88	; 0x58
   12ba2:	d1e2      	bne.n	12b6a <strtoul+0x40>
		c = s[1];
   12ba4:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   12ba6:	3402      	adds	r4, #2
		base = 16;
   12ba8:	2210      	movs	r2, #16
   12baa:	e7de      	b.n	12b6a <strtoul+0x40>
		base = c == '0' ? 8 : 10;
   12bac:	2208      	movs	r2, #8
   12bae:	e7e0      	b.n	12b72 <strtoul+0x48>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   12bb0:	f04c 0a20 	orr.w	sl, ip, #32
   12bb4:	f1aa 0a61 	sub.w	sl, sl, #97	; 0x61
		if (isdigit((unsigned char)c) != 0) {
			c -= '0';
		} else if (isalpha((unsigned char)c) != 0) {
   12bb8:	f1ba 0f19 	cmp.w	sl, #25
   12bbc:	d82b      	bhi.n	12c16 <strtoul+0xec>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   12bbe:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
			c -= isupper((unsigned char)c) != 0 ? 'A' - 10 : 'a' - 10;
   12bc2:	f1bc 0f19 	cmp.w	ip, #25
   12bc6:	d804      	bhi.n	12bd2 <strtoul+0xa8>
   12bc8:	f04f 0c37 	mov.w	ip, #55	; 0x37
   12bcc:	eba3 030c 	sub.w	r3, r3, ip
   12bd0:	e013      	b.n	12bfa <strtoul+0xd0>
   12bd2:	f04f 0c57 	mov.w	ip, #87	; 0x57
   12bd6:	e7f9      	b.n	12bcc <strtoul+0xa2>
			break;
		}
		if (c >= base) {
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   12bd8:	4573      	cmp	r3, lr
   12bda:	dd15      	ble.n	12c08 <strtoul+0xde>
			any = -1;
   12bdc:	f04f 35ff 	mov.w	r5, #4294967295
   12be0:	e001      	b.n	12be6 <strtoul+0xbc>
   12be2:	f04f 35ff 	mov.w	r5, #4294967295
	for (acc = 0, any = 0;; c = *s++) {
   12be6:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit((unsigned char)c) != 0) {
   12bea:	fa5f fc83 	uxtb.w	ip, r3
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   12bee:	f1a3 0a30 	sub.w	sl, r3, #48	; 0x30
   12bf2:	f1ba 0f09 	cmp.w	sl, #9
   12bf6:	d8db      	bhi.n	12bb0 <strtoul+0x86>
			c -= '0';
   12bf8:	4653      	mov	r3, sl
		if (c >= base) {
   12bfa:	429a      	cmp	r2, r3
   12bfc:	dd0b      	ble.n	12c16 <strtoul+0xec>
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   12bfe:	2d00      	cmp	r5, #0
   12c00:	dbef      	blt.n	12be2 <strtoul+0xb8>
   12c02:	4288      	cmp	r0, r1
   12c04:	d804      	bhi.n	12c10 <strtoul+0xe6>
   12c06:	d0e7      	beq.n	12bd8 <strtoul+0xae>
		} else {
			any = 1;
			acc *= base;
			acc += c;
   12c08:	fb00 3008 	mla	r0, r0, r8, r3
			any = 1;
   12c0c:	2501      	movs	r5, #1
   12c0e:	e7ea      	b.n	12be6 <strtoul+0xbc>
			any = -1;
   12c10:	f04f 35ff 	mov.w	r5, #4294967295
   12c14:	e7e7      	b.n	12be6 <strtoul+0xbc>
		}
	}
	if (any < 0) {
   12c16:	2d00      	cmp	r5, #0
   12c18:	db09      	blt.n	12c2e <strtoul+0x104>
		acc = ULONG_MAX;
		errno = ERANGE;
	} else if (neg) {
   12c1a:	f1b9 0f00 	cmp.w	r9, #0
   12c1e:	d000      	beq.n	12c22 <strtoul+0xf8>
		acc = -acc;
   12c20:	4240      	negs	r0, r0
	}
	if (endptr != NULL) {
   12c22:	b117      	cbz	r7, 12c2a <strtoul+0x100>
		*endptr = (char *)(any ? s - 1 : nptr);
   12c24:	b105      	cbz	r5, 12c28 <strtoul+0xfe>
   12c26:	1e66      	subs	r6, r4, #1
   12c28:	603e      	str	r6, [r7, #0]
	}
	return acc;
}
   12c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12c2e:	f7fa f957 	bl	cee0 <z_impl_z_errno>
		errno = ERANGE;
   12c32:	2322      	movs	r3, #34	; 0x22
   12c34:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   12c36:	f04f 30ff 	mov.w	r0, #4294967295
   12c3a:	e7f2      	b.n	12c22 <strtoul+0xf8>

00012c3c <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   12c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12c40:	4605      	mov	r5, r0
	char c, sc;
	size_t len;

	c = *find++;
   12c42:	460f      	mov	r7, r1
   12c44:	f817 6b01 	ldrb.w	r6, [r7], #1
	if (c != 0) {
   12c48:	b916      	cbnz	r6, 12c50 <strstr+0x14>
			} while (sc != c);
		} while (strncmp(s, find, len) != 0);
		s--;
	}
	return (char *)s;
}
   12c4a:	4628      	mov	r0, r5
   12c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = strlen(find);
   12c50:	4638      	mov	r0, r7
   12c52:	f000 f844 	bl	12cde <strlen>
   12c56:	4680      	mov	r8, r0
   12c58:	e000      	b.n	12c5c <strstr+0x20>
{
   12c5a:	4625      	mov	r5, r4
				sc = *s++;
   12c5c:	462c      	mov	r4, r5
   12c5e:	f814 3b01 	ldrb.w	r3, [r4], #1
				if (sc == 0) {
   12c62:	b14b      	cbz	r3, 12c78 <strstr+0x3c>
			} while (sc != c);
   12c64:	429e      	cmp	r6, r3
   12c66:	d1f8      	bne.n	12c5a <strstr+0x1e>
		} while (strncmp(s, find, len) != 0);
   12c68:	4642      	mov	r2, r8
   12c6a:	4639      	mov	r1, r7
   12c6c:	4620      	mov	r0, r4
   12c6e:	f000 f854 	bl	12d1a <strncmp>
   12c72:	2800      	cmp	r0, #0
   12c74:	d1f1      	bne.n	12c5a <strstr+0x1e>
   12c76:	e7e8      	b.n	12c4a <strstr+0xe>
					return NULL;
   12c78:	2500      	movs	r5, #0
   12c7a:	e7e6      	b.n	12c4a <strstr+0xe>

00012c7c <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   12c7c:	4602      	mov	r2, r0
   12c7e:	e002      	b.n	12c86 <strcpy+0xa>
		*d = *s;
   12c80:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   12c84:	3101      	adds	r1, #1
	while (*s != '\0') {
   12c86:	780b      	ldrb	r3, [r1, #0]
   12c88:	2b00      	cmp	r3, #0
   12c8a:	d1f9      	bne.n	12c80 <strcpy+0x4>
	}

	*d = '\0';
   12c8c:	7013      	strb	r3, [r2, #0]

	return dest;
}
   12c8e:	4770      	bx	lr

00012c90 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   12c90:	4603      	mov	r3, r0
   12c92:	b1a2      	cbz	r2, 12cbe <strncpy+0x2e>
{
   12c94:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   12c96:	780c      	ldrb	r4, [r1, #0]
   12c98:	b12c      	cbz	r4, 12ca6 <strncpy+0x16>
		*d = *s;
   12c9a:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   12c9e:	3101      	adds	r1, #1
		d++;
		n--;
   12ca0:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   12ca2:	2a00      	cmp	r2, #0
   12ca4:	d1f7      	bne.n	12c96 <strncpy+0x6>
	}

	while (n > 0) {
   12ca6:	b122      	cbz	r2, 12cb2 <strncpy+0x22>
		*d = '\0';
   12ca8:	2100      	movs	r1, #0
   12caa:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   12cae:	3a01      	subs	r2, #1
   12cb0:	e7f9      	b.n	12ca6 <strncpy+0x16>
	}

	return dest;
}
   12cb2:	bc10      	pop	{r4}
   12cb4:	4770      	bx	lr
		*d = '\0';
   12cb6:	2100      	movs	r1, #0
   12cb8:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   12cbc:	3a01      	subs	r2, #1
	while (n > 0) {
   12cbe:	2a00      	cmp	r2, #0
   12cc0:	d1f9      	bne.n	12cb6 <strncpy+0x26>
   12cc2:	4770      	bx	lr

00012cc4 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   12cc4:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   12cc6:	e000      	b.n	12cca <strchr+0x6>
		s++;
   12cc8:	3001      	adds	r0, #1
	while ((*s != tmp) && (*s != '\0')) {
   12cca:	7803      	ldrb	r3, [r0, #0]
   12ccc:	428b      	cmp	r3, r1
   12cce:	d001      	beq.n	12cd4 <strchr+0x10>
   12cd0:	2b00      	cmp	r3, #0
   12cd2:	d1f9      	bne.n	12cc8 <strchr+0x4>
	}

	return (*s == tmp) ? (char *) s : NULL;
   12cd4:	428b      	cmp	r3, r1
   12cd6:	d100      	bne.n	12cda <strchr+0x16>
}
   12cd8:	4770      	bx	lr
	return (*s == tmp) ? (char *) s : NULL;
   12cda:	2000      	movs	r0, #0
   12cdc:	e7fc      	b.n	12cd8 <strchr+0x14>

00012cde <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   12cde:	4603      	mov	r3, r0
	size_t n = 0;
   12ce0:	2000      	movs	r0, #0

	while (*s != '\0') {
   12ce2:	e001      	b.n	12ce8 <strlen+0xa>
		s++;
   12ce4:	3301      	adds	r3, #1
		n++;
   12ce6:	3001      	adds	r0, #1
	while (*s != '\0') {
   12ce8:	781a      	ldrb	r2, [r3, #0]
   12cea:	2a00      	cmp	r2, #0
   12cec:	d1fa      	bne.n	12ce4 <strlen+0x6>
	}

	return n;
}
   12cee:	4770      	bx	lr

00012cf0 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   12cf0:	4603      	mov	r3, r0
	size_t n = 0;
   12cf2:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   12cf4:	e001      	b.n	12cfa <strnlen+0xa>
		s++;
   12cf6:	3301      	adds	r3, #1
		n++;
   12cf8:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
   12cfa:	781a      	ldrb	r2, [r3, #0]
   12cfc:	b10a      	cbz	r2, 12d02 <strnlen+0x12>
   12cfe:	4288      	cmp	r0, r1
   12d00:	d3f9      	bcc.n	12cf6 <strnlen+0x6>
	}

	return n;
}
   12d02:	4770      	bx	lr

00012d04 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   12d04:	e001      	b.n	12d0a <strcmp+0x6>
		s1++;
   12d06:	3001      	adds	r0, #1
		s2++;
   12d08:	3101      	adds	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
   12d0a:	7803      	ldrb	r3, [r0, #0]
   12d0c:	780a      	ldrb	r2, [r1, #0]
   12d0e:	4293      	cmp	r3, r2
   12d10:	d101      	bne.n	12d16 <strcmp+0x12>
   12d12:	2b00      	cmp	r3, #0
   12d14:	d1f7      	bne.n	12d06 <strcmp+0x2>
	}

	return *s1 - *s2;
}
   12d16:	1a98      	subs	r0, r3, r2
   12d18:	4770      	bx	lr

00012d1a <strncmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   12d1a:	e002      	b.n	12d22 <strncmp+0x8>
		s1++;
   12d1c:	3001      	adds	r0, #1
		s2++;
   12d1e:	3101      	adds	r1, #1
		n--;
   12d20:	3a01      	subs	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   12d22:	b132      	cbz	r2, 12d32 <strncmp+0x18>
   12d24:	7803      	ldrb	r3, [r0, #0]
   12d26:	f891 c000 	ldrb.w	ip, [r1]
   12d2a:	4563      	cmp	r3, ip
   12d2c:	d101      	bne.n	12d32 <strncmp+0x18>
   12d2e:	2b00      	cmp	r3, #0
   12d30:	d1f4      	bne.n	12d1c <strncmp+0x2>
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   12d32:	b11a      	cbz	r2, 12d3c <strncmp+0x22>
   12d34:	7800      	ldrb	r0, [r0, #0]
   12d36:	780b      	ldrb	r3, [r1, #0]
   12d38:	1ac0      	subs	r0, r0, r3
   12d3a:	4770      	bx	lr
   12d3c:	2000      	movs	r0, #0
}
   12d3e:	4770      	bx	lr

00012d40 <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   12d40:	4613      	mov	r3, r2
   12d42:	b16a      	cbz	r2, 12d60 <memcmp+0x20>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   12d44:	3b01      	subs	r3, #1
   12d46:	d007      	beq.n	12d58 <memcmp+0x18>
   12d48:	f890 c000 	ldrb.w	ip, [r0]
   12d4c:	780a      	ldrb	r2, [r1, #0]
   12d4e:	4594      	cmp	ip, r2
   12d50:	d102      	bne.n	12d58 <memcmp+0x18>
		c1++;
   12d52:	3001      	adds	r0, #1
		c2++;
   12d54:	3101      	adds	r1, #1
   12d56:	e7f5      	b.n	12d44 <memcmp+0x4>
	}

	return *c1 - *c2;
   12d58:	7800      	ldrb	r0, [r0, #0]
   12d5a:	780b      	ldrb	r3, [r1, #0]
   12d5c:	1ac0      	subs	r0, r0, r3
   12d5e:	4770      	bx	lr
		return 0;
   12d60:	2000      	movs	r0, #0
}
   12d62:	4770      	bx	lr

00012d64 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   12d64:	1a43      	subs	r3, r0, r1
   12d66:	4293      	cmp	r3, r2
   12d68:	d304      	bcc.n	12d74 <memmove+0x10>
	char *dest = d;
   12d6a:	4603      	mov	r3, r0
   12d6c:	e00a      	b.n	12d84 <memmove+0x20>
		 * The <src> buffer overlaps with the start of the <dest> buffer.
		 * Copy backwards to prevent the premature corruption of <src>.
		 */

		while (n > 0) {
			n--;
   12d6e:	3a01      	subs	r2, #1
			dest[n] = src[n];
   12d70:	5c8b      	ldrb	r3, [r1, r2]
   12d72:	5483      	strb	r3, [r0, r2]
		while (n > 0) {
   12d74:	2a00      	cmp	r2, #0
   12d76:	d1fa      	bne.n	12d6e <memmove+0xa>
   12d78:	4770      	bx	lr
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
			*dest = *src;
   12d7a:	f811 cb01 	ldrb.w	ip, [r1], #1
   12d7e:	f803 cb01 	strb.w	ip, [r3], #1
			dest++;
			src++;
			n--;
   12d82:	3a01      	subs	r2, #1
		while (n > 0) {
   12d84:	2a00      	cmp	r2, #0
   12d86:	d1f8      	bne.n	12d7a <memmove+0x16>
		}
	}

	return d;
}
   12d88:	4770      	bx	lr

00012d8a <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   12d8a:	ea80 0301 	eor.w	r3, r0, r1
   12d8e:	f013 0f03 	tst.w	r3, #3
   12d92:	d001      	beq.n	12d98 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
   12d94:	4603      	mov	r3, r0
   12d96:	e023      	b.n	12de0 <memcpy+0x56>
   12d98:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   12d9a:	f013 0f03 	tst.w	r3, #3
   12d9e:	d00f      	beq.n	12dc0 <memcpy+0x36>
			if (n == 0) {
   12da0:	b30a      	cbz	r2, 12de6 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   12da2:	f811 cb01 	ldrb.w	ip, [r1], #1
   12da6:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
   12daa:	3a01      	subs	r2, #1
   12dac:	e7f5      	b.n	12d9a <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   12dae:	f811 cb01 	ldrb.w	ip, [r1], #1
   12db2:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   12db6:	3a01      	subs	r2, #1
	while (n > 0) {
   12db8:	2a00      	cmp	r2, #0
   12dba:	d1f8      	bne.n	12dae <memcpy+0x24>
	}

	return d;
}
   12dbc:	bc10      	pop	{r4}
   12dbe:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
   12dc0:	2a03      	cmp	r2, #3
   12dc2:	d90d      	bls.n	12de0 <memcpy+0x56>
{
   12dc4:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
   12dc6:	f851 4b04 	ldr.w	r4, [r1], #4
   12dca:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   12dce:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   12dd0:	2a03      	cmp	r2, #3
   12dd2:	d8f8      	bhi.n	12dc6 <memcpy+0x3c>
   12dd4:	e7f0      	b.n	12db8 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
   12dd6:	f811 cb01 	ldrb.w	ip, [r1], #1
   12dda:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   12dde:	3a01      	subs	r2, #1
	while (n > 0) {
   12de0:	2a00      	cmp	r2, #0
   12de2:	d1f8      	bne.n	12dd6 <memcpy+0x4c>
   12de4:	4770      	bx	lr
}
   12de6:	4770      	bx	lr

00012de8 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   12de8:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
   12dec:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   12dee:	e002      	b.n	12df6 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
   12df0:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   12df4:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   12df6:	f013 0f03 	tst.w	r3, #3
   12dfa:	d002      	beq.n	12e02 <memset+0x1a>
		if (n == 0) {
   12dfc:	2a00      	cmp	r2, #0
   12dfe:	d1f7      	bne.n	12df0 <memset+0x8>
   12e00:	e00f      	b.n	12e22 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   12e02:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   12e04:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   12e08:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   12e0c:	2a03      	cmp	r2, #3
   12e0e:	d906      	bls.n	12e1e <memset+0x36>
		*(d_word++) = c_word;
   12e10:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   12e14:	3a04      	subs	r2, #4
   12e16:	e7f9      	b.n	12e0c <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   12e18:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   12e1c:	3a01      	subs	r2, #1
	while (n > 0) {
   12e1e:	2a00      	cmp	r2, #0
   12e20:	d1fa      	bne.n	12e18 <memset+0x30>
	}

	return buf;
}
   12e22:	4770      	bx	lr

00012e24 <_stdout_hook_default>:
}
   12e24:	f04f 30ff 	mov.w	r0, #4294967295
   12e28:	4770      	bx	lr

00012e2a <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   12e2a:	684b      	ldr	r3, [r1, #4]
   12e2c:	2b01      	cmp	r3, #1
   12e2e:	dd07      	ble.n	12e40 <sprintf_out+0x16>
		*(p->ptr) = c;
   12e30:	680b      	ldr	r3, [r1, #0]
   12e32:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   12e34:	680b      	ldr	r3, [r1, #0]
   12e36:	3301      	adds	r3, #1
   12e38:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   12e3a:	684b      	ldr	r3, [r1, #4]
   12e3c:	3b01      	subs	r3, #1
   12e3e:	604b      	str	r3, [r1, #4]
}
   12e40:	2000      	movs	r0, #0
   12e42:	4770      	bx	lr

00012e44 <rangematch>:
static const char *rangematch(const char *pattern, int test, int flags)
{
	bool negate, ok, need;
	char c, c2;

	if (pattern == NULL) {
   12e44:	4603      	mov	r3, r0
   12e46:	2800      	cmp	r0, #0
   12e48:	f000 8082 	beq.w	12f50 <rangematch+0x10c>
{
   12e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * character produces unspecified results (IEEE 1003.2-1992,
	 * 3.13.2).  This implementation treats it like '!', for
	 * consistency with the regular expression syntax.
	 * J.T. Conklin (conklin@ngai.kaleida.com)
	 */
	negate = *pattern == '!' || *pattern == '^';
   12e4e:	7800      	ldrb	r0, [r0, #0]
   12e50:	2821      	cmp	r0, #33	; 0x21
   12e52:	d004      	beq.n	12e5e <rangematch+0x1a>
   12e54:	285e      	cmp	r0, #94	; 0x5e
   12e56:	d002      	beq.n	12e5e <rangematch+0x1a>
   12e58:	f04f 0e00 	mov.w	lr, #0
   12e5c:	e002      	b.n	12e64 <rangematch+0x20>
	if (negate) {
		++pattern;
   12e5e:	3301      	adds	r3, #1
   12e60:	f04f 0e01 	mov.w	lr, #1
	}

	for (need = true, ok = false, c = FOLDCASE(*pattern++, flags); c != ']' || need;
   12e64:	4618      	mov	r0, r3
   12e66:	f810 3b01 	ldrb.w	r3, [r0], #1
   12e6a:	469c      	mov	ip, r3
	if ((flags & FNM_CASEFOLD) != 0 && isupper(ch)) {
   12e6c:	f012 0408 	ands.w	r4, r2, #8
   12e70:	d003      	beq.n	12e7a <rangematch+0x36>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   12e72:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
   12e76:	2d19      	cmp	r5, #25
   12e78:	d904      	bls.n	12e84 <rangematch+0x40>
	for (need = true, ok = false, c = FOLDCASE(*pattern++, flags); c != ']' || need;
   12e7a:	fa5f f68c 	uxtb.w	r6, ip
   12e7e:	2301      	movs	r3, #1
   12e80:	2500      	movs	r5, #0
   12e82:	e048      	b.n	12f16 <rangematch+0xd2>
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
   12e84:	f103 0c20 	add.w	ip, r3, #32
		return tolower(ch);
   12e88:	e7f7      	b.n	12e7a <rangematch+0x36>
		need = false;
		if (c == '/') {
			return (void *)-1;
		}

		if (c == '\\' && !(flags & FNM_NOESCAPE)) {
   12e8a:	f012 0f01 	tst.w	r2, #1
   12e8e:	d148      	bne.n	12f22 <rangematch+0xde>
			c = FOLDCASE(*pattern++, flags);
   12e90:	f810 3b01 	ldrb.w	r3, [r0], #1
   12e94:	469c      	mov	ip, r3
	if ((flags & FNM_CASEFOLD) != 0 && isupper(ch)) {
   12e96:	b11c      	cbz	r4, 12ea0 <rangematch+0x5c>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   12e98:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
   12e9c:	2e19      	cmp	r6, #25
   12e9e:	d902      	bls.n	12ea6 <rangematch+0x62>
			c = FOLDCASE(*pattern++, flags);
   12ea0:	fa5f f68c 	uxtb.w	r6, ip
   12ea4:	e03d      	b.n	12f22 <rangematch+0xde>
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
   12ea6:	f103 0c20 	add.w	ip, r3, #32
		return tolower(ch);
   12eaa:	e7f9      	b.n	12ea0 <rangematch+0x5c>
		if (c == EOS) {
			return NULL;
		}

		if (*pattern == '-') {
			c2 = FOLDCASE(*(pattern + 1), flags);
   12eac:	f890 c001 	ldrb.w	ip, [r0, #1]
   12eb0:	4663      	mov	r3, ip
	if ((flags & FNM_CASEFOLD) != 0 && isupper(ch)) {
   12eb2:	b11c      	cbz	r4, 12ebc <rangematch+0x78>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   12eb4:	f1ac 0741 	sub.w	r7, ip, #65	; 0x41
   12eb8:	2f19      	cmp	r7, #25
   12eba:	d910      	bls.n	12ede <rangematch+0x9a>
			if (c2 != EOS && c2 != ']') {
   12ebc:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   12ec0:	d035      	beq.n	12f2e <rangematch+0xea>
   12ec2:	2b5d      	cmp	r3, #93	; 0x5d
   12ec4:	d033      	beq.n	12f2e <rangematch+0xea>
				pattern += 2;
   12ec6:	1c87      	adds	r7, r0, #2
				if (c2 == '\\' && !(flags & FNM_NOESCAPE)) {
   12ec8:	2b5c      	cmp	r3, #92	; 0x5c
   12eca:	d00b      	beq.n	12ee4 <rangematch+0xa0>
				pattern += 2;
   12ecc:	4638      	mov	r0, r7
					c2 = FOLDCASE(*pattern++, flags);
				}

				if (c2 == EOS) {
   12ece:	2b00      	cmp	r3, #0
   12ed0:	d044      	beq.n	12f5c <rangematch+0x118>
					return NULL;
				}

				if (c <= test && test <= c2) {
   12ed2:	428e      	cmp	r6, r1
   12ed4:	dc2b      	bgt.n	12f2e <rangematch+0xea>
   12ed6:	428b      	cmp	r3, r1
   12ed8:	db29      	blt.n	12f2e <rangematch+0xea>
					ok = true;
   12eda:	2501      	movs	r5, #1
   12edc:	e027      	b.n	12f2e <rangematch+0xea>
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
   12ede:	f10c 0320 	add.w	r3, ip, #32
		return tolower(ch);
   12ee2:	e7eb      	b.n	12ebc <rangematch+0x78>
				if (c2 == '\\' && !(flags & FNM_NOESCAPE)) {
   12ee4:	f012 0f01 	tst.w	r2, #1
   12ee8:	d10e      	bne.n	12f08 <rangematch+0xc4>
					c2 = FOLDCASE(*pattern++, flags);
   12eea:	1cc7      	adds	r7, r0, #3
   12eec:	7880      	ldrb	r0, [r0, #2]
   12eee:	4603      	mov	r3, r0
	if ((flags & FNM_CASEFOLD) != 0 && isupper(ch)) {
   12ef0:	b124      	cbz	r4, 12efc <rangematch+0xb8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   12ef2:	f1a0 0c41 	sub.w	ip, r0, #65	; 0x41
   12ef6:	f1bc 0f19 	cmp.w	ip, #25
   12efa:	d902      	bls.n	12f02 <rangematch+0xbe>
					c2 = FOLDCASE(*pattern++, flags);
   12efc:	b2db      	uxtb	r3, r3
   12efe:	4638      	mov	r0, r7
   12f00:	e7e5      	b.n	12ece <rangematch+0x8a>
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
   12f02:	f100 0320 	add.w	r3, r0, #32
		return tolower(ch);
   12f06:	e7f9      	b.n	12efc <rangematch+0xb8>
				pattern += 2;
   12f08:	4638      	mov	r0, r7
   12f0a:	e7e0      	b.n	12ece <rangematch+0x8a>
				}
			}
		} else if (c == test) {
			ok = true;
   12f0c:	2501      	movs	r5, #1
   12f0e:	e00e      	b.n	12f2e <rangematch+0xea>
	     c = FOLDCASE(*pattern++, flags)) {
   12f10:	fa5f f68c 	uxtb.w	r6, ip
		need = false;
   12f14:	2300      	movs	r3, #0
	for (need = true, ok = false, c = FOLDCASE(*pattern++, flags); c != ']' || need;
   12f16:	2e5d      	cmp	r6, #93	; 0x5d
   12f18:	d015      	beq.n	12f46 <rangematch+0x102>
		if (c == '/') {
   12f1a:	2e2f      	cmp	r6, #47	; 0x2f
   12f1c:	d019      	beq.n	12f52 <rangematch+0x10e>
		if (c == '\\' && !(flags & FNM_NOESCAPE)) {
   12f1e:	2e5c      	cmp	r6, #92	; 0x5c
   12f20:	d0b3      	beq.n	12e8a <rangematch+0x46>
		if (c == EOS) {
   12f22:	b1ce      	cbz	r6, 12f58 <rangematch+0x114>
		if (*pattern == '-') {
   12f24:	7803      	ldrb	r3, [r0, #0]
   12f26:	2b2d      	cmp	r3, #45	; 0x2d
   12f28:	d0c0      	beq.n	12eac <rangematch+0x68>
		} else if (c == test) {
   12f2a:	428e      	cmp	r6, r1
   12f2c:	d0ee      	beq.n	12f0c <rangematch+0xc8>
	     c = FOLDCASE(*pattern++, flags)) {
   12f2e:	f810 3b01 	ldrb.w	r3, [r0], #1
   12f32:	469c      	mov	ip, r3
	if ((flags & FNM_CASEFOLD) != 0 && isupper(ch)) {
   12f34:	2c00      	cmp	r4, #0
   12f36:	d0eb      	beq.n	12f10 <rangematch+0xcc>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   12f38:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
   12f3c:	2e19      	cmp	r6, #25
   12f3e:	d8e7      	bhi.n	12f10 <rangematch+0xcc>
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
   12f40:	f103 0c20 	add.w	ip, r3, #32
		return tolower(ch);
   12f44:	e7e4      	b.n	12f10 <rangematch+0xcc>
	for (need = true, ok = false, c = FOLDCASE(*pattern++, flags); c != ']' || need;
   12f46:	2b00      	cmp	r3, #0
   12f48:	d1e7      	bne.n	12f1a <rangematch+0xd6>
		}
	}

	return ok == negate ? NULL : pattern;
   12f4a:	4575      	cmp	r5, lr
   12f4c:	d008      	beq.n	12f60 <rangematch+0x11c>
}
   12f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f50:	4770      	bx	lr
			return (void *)-1;
   12f52:	f04f 30ff 	mov.w	r0, #4294967295
   12f56:	e7fa      	b.n	12f4e <rangematch+0x10a>
			return NULL;
   12f58:	2000      	movs	r0, #0
   12f5a:	e7f8      	b.n	12f4e <rangematch+0x10a>
					return NULL;
   12f5c:	2000      	movs	r0, #0
   12f5e:	e7f6      	b.n	12f4e <rangematch+0x10a>
	return ok == negate ? NULL : pattern;
   12f60:	2000      	movs	r0, #0
   12f62:	e7f4      	b.n	12f4e <rangematch+0x10a>

00012f64 <fnmatchx>:

static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
   12f64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const char *stringstart, *r;
	char c, test;

	if (pattern == NULL || string == NULL) {
   12f68:	2800      	cmp	r0, #0
   12f6a:	f000 811b 	beq.w	131a4 <fnmatchx+0x240>
   12f6e:	468a      	mov	sl, r1
   12f70:	4616      	mov	r6, r2
   12f72:	4605      	mov	r5, r0
   12f74:	2900      	cmp	r1, #0
   12f76:	f000 8117 	beq.w	131a8 <fnmatchx+0x244>
		return FNM_NOMATCH;
	}

	if (recursion-- == 0) {
   12f7a:	f103 3bff 	add.w	fp, r3, #4294967295
   12f7e:	2b00      	cmp	r3, #0
   12f80:	f000 8114 	beq.w	131ac <fnmatchx+0x248>
   12f84:	460f      	mov	r7, r1
   12f86:	e0dd      	b.n	13144 <fnmatchx+0x1e0>
   12f88:	f102 0320 	add.w	r3, r2, #32
		return tolower(ch);
   12f8c:	e0e6      	b.n	1315c <fnmatchx+0x1f8>
		return FNM_NORES;
	}

	for (stringstart = string;;) {
		c = FOLDCASE(*pattern++, flags);
		switch (c) {
   12f8e:	b193      	cbz	r3, 12fb6 <fnmatchx+0x52>
   12f90:	2b2a      	cmp	r3, #42	; 0x2a
   12f92:	d10c      	bne.n	12fae <fnmatchx+0x4a>
			}

			++string;
			break;
		case '*':
			c = FOLDCASE(*pattern, flags);
   12f94:	f898 2000 	ldrb.w	r2, [r8]
   12f98:	4613      	mov	r3, r2
	if ((flags & FNM_CASEFOLD) != 0 && isupper(ch)) {
   12f9a:	f1b9 0f00 	cmp.w	r9, #0
   12f9e:	d003      	beq.n	12fa8 <fnmatchx+0x44>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   12fa0:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   12fa4:	2919      	cmp	r1, #25
   12fa6:	d932      	bls.n	1300e <fnmatchx+0xaa>
			c = FOLDCASE(*pattern, flags);
   12fa8:	b2db      	uxtb	r3, r3
		c = FOLDCASE(*pattern++, flags);
   12faa:	4645      	mov	r5, r8
			/* Collapse multiple stars. */
			while (c == '*') {
   12fac:	e033      	b.n	13016 <fnmatchx+0xb2>
		switch (c) {
   12fae:	4645      	mov	r5, r8
   12fb0:	e0bc      	b.n	1312c <fnmatchx+0x1c8>
   12fb2:	4645      	mov	r5, r8
   12fb4:	e0ba      	b.n	1312c <fnmatchx+0x1c8>
			if ((flags & FNM_LEADING_DIR) && *string == '/') {
   12fb6:	f016 0f10 	tst.w	r6, #16
   12fba:	d002      	beq.n	12fc2 <fnmatchx+0x5e>
   12fbc:	783b      	ldrb	r3, [r7, #0]
   12fbe:	2b2f      	cmp	r3, #47	; 0x2f
   12fc0:	d003      	beq.n	12fca <fnmatchx+0x66>
			return *string == EOS ? 0 : FNM_NOMATCH;
   12fc2:	783c      	ldrb	r4, [r7, #0]
   12fc4:	3c00      	subs	r4, #0
   12fc6:	bf18      	it	ne
   12fc8:	2401      	movne	r4, #1

			break;
		}
	}
	/* NOTREACHED */
}
   12fca:	4620      	mov	r0, r4
   12fcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (*string == EOS) {
   12fd0:	783b      	ldrb	r3, [r7, #0]
   12fd2:	2b00      	cmp	r3, #0
   12fd4:	f000 80ec 	beq.w	131b0 <fnmatchx+0x24c>
			if (*string == '/' && (flags & FNM_PATHNAME)) {
   12fd8:	2b2f      	cmp	r3, #47	; 0x2f
   12fda:	d004      	beq.n	12fe6 <fnmatchx+0x82>
			if (*string == '.' && (flags & FNM_PERIOD) &&
   12fdc:	2b2e      	cmp	r3, #46	; 0x2e
   12fde:	d007      	beq.n	12ff0 <fnmatchx+0x8c>
			++string;
   12fe0:	3701      	adds	r7, #1
		c = FOLDCASE(*pattern++, flags);
   12fe2:	4645      	mov	r5, r8
			break;
   12fe4:	e0ae      	b.n	13144 <fnmatchx+0x1e0>
			if (*string == '/' && (flags & FNM_PATHNAME)) {
   12fe6:	f016 0f02 	tst.w	r6, #2
   12fea:	d0f7      	beq.n	12fdc <fnmatchx+0x78>
				return FNM_NOMATCH;
   12fec:	2401      	movs	r4, #1
   12fee:	e7ec      	b.n	12fca <fnmatchx+0x66>
			if (*string == '.' && (flags & FNM_PERIOD) &&
   12ff0:	f016 0f04 	tst.w	r6, #4
   12ff4:	d0f4      	beq.n	12fe0 <fnmatchx+0x7c>
   12ff6:	4557      	cmp	r7, sl
   12ff8:	f000 80dc 	beq.w	131b4 <fnmatchx+0x250>
			    (string == stringstart ||
   12ffc:	f016 0f02 	tst.w	r6, #2
   13000:	d0ee      	beq.n	12fe0 <fnmatchx+0x7c>
			     ((flags & FNM_PATHNAME) && *(string - 1) == '/'))) {
   13002:	f817 3c01 	ldrb.w	r3, [r7, #-1]
   13006:	2b2f      	cmp	r3, #47	; 0x2f
   13008:	d1ea      	bne.n	12fe0 <fnmatchx+0x7c>
				return FNM_NOMATCH;
   1300a:	2401      	movs	r4, #1
   1300c:	e7dd      	b.n	12fca <fnmatchx+0x66>
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
   1300e:	f102 0320 	add.w	r3, r2, #32
		return tolower(ch);
   13012:	e7c9      	b.n	12fa8 <fnmatchx+0x44>
				c = FOLDCASE(*++pattern, flags);
   13014:	b2db      	uxtb	r3, r3
			while (c == '*') {
   13016:	2b2a      	cmp	r3, #42	; 0x2a
   13018:	d10c      	bne.n	13034 <fnmatchx+0xd0>
				c = FOLDCASE(*++pattern, flags);
   1301a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   1301e:	4613      	mov	r3, r2
	if ((flags & FNM_CASEFOLD) != 0 && isupper(ch)) {
   13020:	f1b9 0f00 	cmp.w	r9, #0
   13024:	d0f6      	beq.n	13014 <fnmatchx+0xb0>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   13026:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   1302a:	2919      	cmp	r1, #25
   1302c:	d8f2      	bhi.n	13014 <fnmatchx+0xb0>
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
   1302e:	f102 0320 	add.w	r3, r2, #32
		return tolower(ch);
   13032:	e7ef      	b.n	13014 <fnmatchx+0xb0>
			if (*string == '.' && (flags & FNM_PERIOD) &&
   13034:	783a      	ldrb	r2, [r7, #0]
   13036:	2a2e      	cmp	r2, #46	; 0x2e
   13038:	d00e      	beq.n	13058 <fnmatchx+0xf4>
			if (c == EOS) {
   1303a:	b1e3      	cbz	r3, 13076 <fnmatchx+0x112>
			} else if (c == '/' && flags & FNM_PATHNAME) {
   1303c:	2b2f      	cmp	r3, #47	; 0x2f
   1303e:	d13c      	bne.n	130ba <fnmatchx+0x156>
   13040:	f016 0f02 	tst.w	r6, #2
   13044:	d039      	beq.n	130ba <fnmatchx+0x156>
				string = strchr(string, '/');
   13046:	212f      	movs	r1, #47	; 0x2f
   13048:	4638      	mov	r0, r7
   1304a:	f7ff fe3b 	bl	12cc4 <strchr>
				if (string == NULL) {
   1304e:	4607      	mov	r7, r0
   13050:	2800      	cmp	r0, #0
   13052:	d177      	bne.n	13144 <fnmatchx+0x1e0>
					return FNM_NOMATCH;
   13054:	2401      	movs	r4, #1
   13056:	e7b8      	b.n	12fca <fnmatchx+0x66>
			if (*string == '.' && (flags & FNM_PERIOD) &&
   13058:	f016 0f04 	tst.w	r6, #4
   1305c:	d0ed      	beq.n	1303a <fnmatchx+0xd6>
   1305e:	4557      	cmp	r7, sl
   13060:	f000 80aa 	beq.w	131b8 <fnmatchx+0x254>
			    (string == stringstart ||
   13064:	f016 0f02 	tst.w	r6, #2
   13068:	d0e7      	beq.n	1303a <fnmatchx+0xd6>
			     ((flags & FNM_PATHNAME) && *(string - 1) == '/'))) {
   1306a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
   1306e:	2a2f      	cmp	r2, #47	; 0x2f
   13070:	d1e3      	bne.n	1303a <fnmatchx+0xd6>
				return FNM_NOMATCH;
   13072:	2401      	movs	r4, #1
   13074:	e7a9      	b.n	12fca <fnmatchx+0x66>
				if (flags & FNM_PATHNAME) {
   13076:	f016 0402 	ands.w	r4, r6, #2
   1307a:	d0a6      	beq.n	12fca <fnmatchx+0x66>
						       : FNM_NOMATCH;
   1307c:	f016 0410 	ands.w	r4, r6, #16
   13080:	d001      	beq.n	13086 <fnmatchx+0x122>
   13082:	2400      	movs	r4, #0
   13084:	e7a1      	b.n	12fca <fnmatchx+0x66>
							       strchr(string, '/') == NULL
   13086:	212f      	movs	r1, #47	; 0x2f
   13088:	4638      	mov	r0, r7
   1308a:	f7ff fe1b 	bl	12cc4 <strchr>
						       : FNM_NOMATCH;
   1308e:	2800      	cmp	r0, #0
   13090:	d09b      	beq.n	12fca <fnmatchx+0x66>
   13092:	2401      	movs	r4, #1
   13094:	e799      	b.n	12fca <fnmatchx+0x66>
				if (test == EOS) {
   13096:	f013 08ff 	ands.w	r8, r3, #255	; 0xff
   1309a:	f000 808f 	beq.w	131bc <fnmatchx+0x258>
				int e = fnmatchx(pattern, string, flags & ~FNM_PERIOD, recursion);
   1309e:	465b      	mov	r3, fp
   130a0:	f026 0204 	bic.w	r2, r6, #4
   130a4:	4639      	mov	r1, r7
   130a6:	4628      	mov	r0, r5
   130a8:	f7ff ff5c 	bl	12f64 <fnmatchx>
   130ac:	4604      	mov	r4, r0
				if (e != FNM_NOMATCH) {
   130ae:	2801      	cmp	r0, #1
   130b0:	d18b      	bne.n	12fca <fnmatchx+0x66>
				if (test == '/' && flags & FNM_PATHNAME) {
   130b2:	f1b8 0f2f 	cmp.w	r8, #47	; 0x2f
   130b6:	d00c      	beq.n	130d2 <fnmatchx+0x16e>
				++string;
   130b8:	3701      	adds	r7, #1
				test = FOLDCASE(*string, flags);
   130ba:	783a      	ldrb	r2, [r7, #0]
   130bc:	4613      	mov	r3, r2
	if ((flags & FNM_CASEFOLD) != 0 && isupper(ch)) {
   130be:	f1b9 0f00 	cmp.w	r9, #0
   130c2:	d0e8      	beq.n	13096 <fnmatchx+0x132>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   130c4:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   130c8:	2919      	cmp	r1, #25
   130ca:	d8e4      	bhi.n	13096 <fnmatchx+0x132>
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
   130cc:	f102 0320 	add.w	r3, r2, #32
		return tolower(ch);
   130d0:	e7e1      	b.n	13096 <fnmatchx+0x132>
				if (test == '/' && flags & FNM_PATHNAME) {
   130d2:	f016 0f02 	tst.w	r6, #2
   130d6:	d0ef      	beq.n	130b8 <fnmatchx+0x154>
   130d8:	e777      	b.n	12fca <fnmatchx+0x66>
			if (*string == EOS) {
   130da:	783c      	ldrb	r4, [r7, #0]
   130dc:	2c00      	cmp	r4, #0
   130de:	d06f      	beq.n	131c0 <fnmatchx+0x25c>
			if (*string == '/' && flags & FNM_PATHNAME) {
   130e0:	2c2f      	cmp	r4, #47	; 0x2f
   130e2:	d013      	beq.n	1310c <fnmatchx+0x1a8>
			r = rangematch(pattern, FOLDCASE(*string, flags), flags);
   130e4:	4621      	mov	r1, r4
	if ((flags & FNM_CASEFOLD) != 0 && isupper(ch)) {
   130e6:	f1b9 0f00 	cmp.w	r9, #0
   130ea:	d003      	beq.n	130f4 <fnmatchx+0x190>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   130ec:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   130f0:	2b19      	cmp	r3, #25
   130f2:	d910      	bls.n	13116 <fnmatchx+0x1b2>
			r = rangematch(pattern, FOLDCASE(*string, flags), flags);
   130f4:	4632      	mov	r2, r6
   130f6:	4640      	mov	r0, r8
   130f8:	f7ff fea4 	bl	12e44 <rangematch>
			if (r == NULL) {
   130fc:	4605      	mov	r5, r0
   130fe:	2800      	cmp	r0, #0
   13100:	d060      	beq.n	131c4 <fnmatchx+0x260>
			if (r == (void *)-1) {
   13102:	f1b0 3fff 	cmp.w	r0, #4294967295
   13106:	d009      	beq.n	1311c <fnmatchx+0x1b8>
			++string;
   13108:	3701      	adds	r7, #1
			break;
   1310a:	e01b      	b.n	13144 <fnmatchx+0x1e0>
			if (*string == '/' && flags & FNM_PATHNAME) {
   1310c:	f016 0f02 	tst.w	r6, #2
   13110:	d0e8      	beq.n	130e4 <fnmatchx+0x180>
				return FNM_NOMATCH;
   13112:	2401      	movs	r4, #1
   13114:	e759      	b.n	12fca <fnmatchx+0x66>
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
   13116:	f104 0120 	add.w	r1, r4, #32
		return tolower(ch);
   1311a:	e7eb      	b.n	130f4 <fnmatchx+0x190>
				if (*string != '[') {
   1311c:	2c5b      	cmp	r4, #91	; 0x5b
   1311e:	d153      	bne.n	131c8 <fnmatchx+0x264>
		c = FOLDCASE(*pattern++, flags);
   13120:	4645      	mov	r5, r8
   13122:	e7f1      	b.n	13108 <fnmatchx+0x1a4>
   13124:	f102 0320 	add.w	r3, r2, #32
		return tolower(ch);
   13128:	e032      	b.n	13190 <fnmatchx+0x22c>
		c = FOLDCASE(*pattern++, flags);
   1312a:	4645      	mov	r5, r8
			if (c != FOLDCASE(*string++, flags)) {
   1312c:	f817 2b01 	ldrb.w	r2, [r7], #1
   13130:	4611      	mov	r1, r2
	if ((flags & FNM_CASEFOLD) != 0 && isupper(ch)) {
   13132:	f1b9 0f00 	cmp.w	r9, #0
   13136:	d003      	beq.n	13140 <fnmatchx+0x1dc>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   13138:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
   1313c:	2819      	cmp	r0, #25
   1313e:	d92c      	bls.n	1319a <fnmatchx+0x236>
			if (c != FOLDCASE(*string++, flags)) {
   13140:	428b      	cmp	r3, r1
   13142:	d12d      	bne.n	131a0 <fnmatchx+0x23c>
		c = FOLDCASE(*pattern++, flags);
   13144:	46a8      	mov	r8, r5
   13146:	f818 2b01 	ldrb.w	r2, [r8], #1
   1314a:	4613      	mov	r3, r2
	if ((flags & FNM_CASEFOLD) != 0 && isupper(ch)) {
   1314c:	f016 0908 	ands.w	r9, r6, #8
   13150:	d004      	beq.n	1315c <fnmatchx+0x1f8>
   13152:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   13156:	2919      	cmp	r1, #25
   13158:	f67f af16 	bls.w	12f88 <fnmatchx+0x24>
		c = FOLDCASE(*pattern++, flags);
   1315c:	b2db      	uxtb	r3, r3
		switch (c) {
   1315e:	461c      	mov	r4, r3
   13160:	2b3f      	cmp	r3, #63	; 0x3f
   13162:	f43f af35 	beq.w	12fd0 <fnmatchx+0x6c>
   13166:	f77f af12 	ble.w	12f8e <fnmatchx+0x2a>
   1316a:	2b5b      	cmp	r3, #91	; 0x5b
   1316c:	d0b5      	beq.n	130da <fnmatchx+0x176>
   1316e:	2b5c      	cmp	r3, #92	; 0x5c
   13170:	f47f af1f 	bne.w	12fb2 <fnmatchx+0x4e>
			if (!(flags & FNM_NOESCAPE)) {
   13174:	f016 0f01 	tst.w	r6, #1
   13178:	d1d7      	bne.n	1312a <fnmatchx+0x1c6>
				c = FOLDCASE(*pattern++, flags);
   1317a:	3502      	adds	r5, #2
   1317c:	f898 2000 	ldrb.w	r2, [r8]
   13180:	4613      	mov	r3, r2
	if ((flags & FNM_CASEFOLD) != 0 && isupper(ch)) {
   13182:	f1b9 0f00 	cmp.w	r9, #0
   13186:	d003      	beq.n	13190 <fnmatchx+0x22c>
   13188:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   1318c:	2919      	cmp	r1, #25
   1318e:	d9c9      	bls.n	13124 <fnmatchx+0x1c0>
				if (c == EOS) {
   13190:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   13194:	d1ca      	bne.n	1312c <fnmatchx+0x1c8>
					--pattern;
   13196:	4645      	mov	r5, r8
   13198:	e7c8      	b.n	1312c <fnmatchx+0x1c8>
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
   1319a:	f102 0120 	add.w	r1, r2, #32
		return tolower(ch);
   1319e:	e7cf      	b.n	13140 <fnmatchx+0x1dc>
				return FNM_NOMATCH;
   131a0:	2401      	movs	r4, #1
   131a2:	e712      	b.n	12fca <fnmatchx+0x66>
		return FNM_NOMATCH;
   131a4:	2401      	movs	r4, #1
   131a6:	e710      	b.n	12fca <fnmatchx+0x66>
   131a8:	2401      	movs	r4, #1
   131aa:	e70e      	b.n	12fca <fnmatchx+0x66>
		return FNM_NORES;
   131ac:	2403      	movs	r4, #3
   131ae:	e70c      	b.n	12fca <fnmatchx+0x66>
				return FNM_NOMATCH;
   131b0:	2401      	movs	r4, #1
   131b2:	e70a      	b.n	12fca <fnmatchx+0x66>
				return FNM_NOMATCH;
   131b4:	2401      	movs	r4, #1
   131b6:	e708      	b.n	12fca <fnmatchx+0x66>
				return FNM_NOMATCH;
   131b8:	2401      	movs	r4, #1
   131ba:	e706      	b.n	12fca <fnmatchx+0x66>
			return FNM_NOMATCH;
   131bc:	2401      	movs	r4, #1
   131be:	e704      	b.n	12fca <fnmatchx+0x66>
				return FNM_NOMATCH;
   131c0:	2401      	movs	r4, #1
   131c2:	e702      	b.n	12fca <fnmatchx+0x66>
				return FNM_NOMATCH;
   131c4:	2401      	movs	r4, #1
   131c6:	e700      	b.n	12fca <fnmatchx+0x66>
					return FNM_NOMATCH;
   131c8:	2401      	movs	r4, #1
   131ca:	e6fe      	b.n	12fca <fnmatchx+0x66>

000131cc <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
   131cc:	b508      	push	{r3, lr}
	return fnmatchx(pattern, string, flags, 64);
   131ce:	2340      	movs	r3, #64	; 0x40
   131d0:	f7ff fec8 	bl	12f64 <fnmatchx>
}
   131d4:	bd08      	pop	{r3, pc}

000131d6 <sys_arch_reboot>:
{
   131d6:	b508      	push	{r3, lr}
    *p_gpregret = val;
   131d8:	b2c0      	uxtb	r0, r0
   131da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   131de:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
	NVIC_SystemReset();
   131e2:	f7f6 f87b 	bl	92dc <__NVIC_SystemReset>

000131e6 <nrf_power_system_off>:
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   131e6:	2301      	movs	r3, #1
   131e8:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   131ec:	f3bf 8f4f 	dsb	sy
        __WFE();
   131f0:	bf20      	wfe
    while (true)
   131f2:	e7fd      	b.n	131f0 <nrf_power_system_off+0xa>

000131f4 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   131f4:	2806      	cmp	r0, #6
   131f6:	d000      	beq.n	131fa <pm_state_set+0x6>
   131f8:	4770      	bx	lr
{
   131fa:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_power_system_off(NRF_POWER);
   131fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   13200:	f7ff fff1 	bl	131e6 <nrf_power_system_off>

00013204 <pm_state_exit_post_ops>:
	__asm__ volatile(
   13204:	2300      	movs	r3, #0
   13206:	f383 8811 	msr	BASEPRI, r3
   1320a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1320e:	4770      	bx	lr

00013210 <nrf_clock_is_running>:
    switch (domain)
   13210:	b119      	cbz	r1, 1321a <nrf_clock_is_running+0xa>
   13212:	2901      	cmp	r1, #1
   13214:	d00e      	beq.n	13234 <nrf_clock_is_running+0x24>
   13216:	2000      	movs	r0, #0
   13218:	4770      	bx	lr
            if (p_clk_src != NULL)
   1321a:	b122      	cbz	r2, 13226 <nrf_clock_is_running+0x16>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1321c:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   13220:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   13224:	6013      	str	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   13226:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   1322a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1322e:	d10e      	bne.n	1324e <nrf_clock_is_running+0x3e>
    return false;
   13230:	2000      	movs	r0, #0
   13232:	4770      	bx	lr
            if (p_clk_src != NULL)
   13234:	b122      	cbz	r2, 13240 <nrf_clock_is_running+0x30>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   13236:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   1323a:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1323e:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   13240:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   13244:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   13248:	d103      	bne.n	13252 <nrf_clock_is_running+0x42>
    return false;
   1324a:	2000      	movs	r0, #0
   1324c:	4770      	bx	lr
                return true;
   1324e:	2001      	movs	r0, #1
   13250:	4770      	bx	lr
                return true;
   13252:	2001      	movs	r0, #1
}
   13254:	4770      	bx	lr

00013256 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   13256:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   13258:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1325c:	0089      	lsls	r1, r1, #2
   1325e:	3138      	adds	r1, #56	; 0x38
}
   13260:	4408      	add	r0, r1
   13262:	4770      	bx	lr

00013264 <get_sub_config>:
	const struct nrf_clock_control_config *config =
   13264:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   13266:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   1326a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1326e:	4770      	bx	lr

00013270 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   13270:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   13272:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   13276:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1327a:	4770      	bx	lr

0001327c <get_status>:
{
   1327c:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1327e:	b2c9      	uxtb	r1, r1
   13280:	f7ff ffe9 	bl	13256 <get_sub_data>
   13284:	6880      	ldr	r0, [r0, #8]
}
   13286:	f000 0007 	and.w	r0, r0, #7
   1328a:	bd08      	pop	{r3, pc}

0001328c <set_off_state>:
	__asm__ volatile(
   1328c:	f04f 0320 	mov.w	r3, #32
   13290:	f3ef 8211 	mrs	r2, BASEPRI
   13294:	f383 8812 	msr	BASEPRI_MAX, r3
   13298:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1329c:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1329e:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   132a2:	d001      	beq.n	132a8 <set_off_state+0x1c>
   132a4:	428b      	cmp	r3, r1
   132a6:	d107      	bne.n	132b8 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   132a8:	2301      	movs	r3, #1
   132aa:	6003      	str	r3, [r0, #0]
	int err = 0;
   132ac:	2000      	movs	r0, #0
	__asm__ volatile(
   132ae:	f382 8811 	msr	BASEPRI, r2
   132b2:	f3bf 8f6f 	isb	sy
}
   132b6:	4770      	bx	lr
		err = -EPERM;
   132b8:	f04f 30ff 	mov.w	r0, #4294967295
   132bc:	e7f7      	b.n	132ae <set_off_state+0x22>

000132be <set_starting_state>:
	__asm__ volatile(
   132be:	f04f 0320 	mov.w	r3, #32
   132c2:	f3ef 8211 	mrs	r2, BASEPRI
   132c6:	f383 8812 	msr	BASEPRI_MAX, r3
   132ca:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   132ce:	6803      	ldr	r3, [r0, #0]
   132d0:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   132d4:	f003 0307 	and.w	r3, r3, #7
   132d8:	2b01      	cmp	r3, #1
   132da:	d008      	beq.n	132ee <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
   132dc:	458c      	cmp	ip, r1
   132de:	d009      	beq.n	132f4 <set_starting_state+0x36>
		err = -EPERM;
   132e0:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   132e4:	f382 8811 	msr	BASEPRI, r2
   132e8:	f3bf 8f6f 	isb	sy
}
   132ec:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   132ee:	6001      	str	r1, [r0, #0]
	int err = 0;
   132f0:	2000      	movs	r0, #0
   132f2:	e7f7      	b.n	132e4 <set_starting_state+0x26>
		err = -EALREADY;
   132f4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   132f8:	e7f4      	b.n	132e4 <set_starting_state+0x26>

000132fa <set_on_state>:
	__asm__ volatile(
   132fa:	f04f 0320 	mov.w	r3, #32
   132fe:	f3ef 8211 	mrs	r2, BASEPRI
   13302:	f383 8812 	msr	BASEPRI_MAX, r3
   13306:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1330a:	6803      	ldr	r3, [r0, #0]
   1330c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   13310:	f043 0302 	orr.w	r3, r3, #2
   13314:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   13316:	f382 8811 	msr	BASEPRI, r2
   1331a:	f3bf 8f6f 	isb	sy
}
   1331e:	4770      	bx	lr

00013320 <clkstarted_handle>:
{
   13320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13322:	4606      	mov	r6, r0
   13324:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   13326:	f7ff ff96 	bl	13256 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   1332a:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   1332c:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   1332e:	2300      	movs	r3, #0
   13330:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   13334:	f7ff ffe1 	bl	132fa <set_on_state>
	if (callback) {
   13338:	b11d      	cbz	r5, 13342 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1333a:	463a      	mov	r2, r7
   1333c:	4621      	mov	r1, r4
   1333e:	4630      	mov	r0, r6
   13340:	47a8      	blx	r5
}
   13342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013344 <stop>:
{
   13344:	b570      	push	{r4, r5, r6, lr}
   13346:	4606      	mov	r6, r0
   13348:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1334a:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1334c:	4621      	mov	r1, r4
   1334e:	f7ff ff82 	bl	13256 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   13352:	4629      	mov	r1, r5
   13354:	3008      	adds	r0, #8
   13356:	f7ff ff99 	bl	1328c <set_off_state>
	if (err < 0) {
   1335a:	2800      	cmp	r0, #0
   1335c:	db06      	blt.n	1336c <stop+0x28>
	get_sub_config(dev, type)->stop();
   1335e:	4621      	mov	r1, r4
   13360:	4630      	mov	r0, r6
   13362:	f7ff ff7f 	bl	13264 <get_sub_config>
   13366:	6843      	ldr	r3, [r0, #4]
   13368:	4798      	blx	r3
	return 0;
   1336a:	2000      	movs	r0, #0
}
   1336c:	bd70      	pop	{r4, r5, r6, pc}

0001336e <api_stop>:
{
   1336e:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   13370:	2280      	movs	r2, #128	; 0x80
   13372:	f7ff ffe7 	bl	13344 <stop>
}
   13376:	bd08      	pop	{r3, pc}

00013378 <async_start>:
{
   13378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1337c:	4606      	mov	r6, r0
   1337e:	4690      	mov	r8, r2
   13380:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   13382:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   13384:	4629      	mov	r1, r5
   13386:	f7ff ff66 	bl	13256 <get_sub_data>
   1338a:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   1338c:	9906      	ldr	r1, [sp, #24]
   1338e:	3008      	adds	r0, #8
   13390:	f7ff ff95 	bl	132be <set_starting_state>
	if (err < 0) {
   13394:	2800      	cmp	r0, #0
   13396:	db09      	blt.n	133ac <async_start+0x34>
	subdata->cb = cb;
   13398:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   1339c:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   1339e:	4629      	mov	r1, r5
   133a0:	4630      	mov	r0, r6
   133a2:	f7ff ff5f 	bl	13264 <get_sub_config>
   133a6:	6803      	ldr	r3, [r0, #0]
   133a8:	4798      	blx	r3
	return 0;
   133aa:	2000      	movs	r0, #0
}
   133ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000133b0 <api_start>:
{
   133b0:	b510      	push	{r4, lr}
   133b2:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   133b4:	2480      	movs	r4, #128	; 0x80
   133b6:	9400      	str	r4, [sp, #0]
   133b8:	f7ff ffde 	bl	13378 <async_start>
}
   133bc:	b002      	add	sp, #8
   133be:	bd10      	pop	{r4, pc}

000133c0 <onoff_started_callback>:
{
   133c0:	b510      	push	{r4, lr}
   133c2:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   133c4:	b2c9      	uxtb	r1, r1
   133c6:	f7ff ff53 	bl	13270 <get_onoff_manager>
	notify(mgr, 0);
   133ca:	2100      	movs	r1, #0
   133cc:	47a0      	blx	r4
}
   133ce:	bd10      	pop	{r4, pc}

000133d0 <lfclk_stop>:
{
   133d0:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   133d2:	2000      	movs	r0, #0
   133d4:	f000 fe35 	bl	14042 <nrfx_clock_stop>
}
   133d8:	bd08      	pop	{r3, pc}

000133da <k_msleep>:
{
   133da:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   133dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   133e0:	17c1      	asrs	r1, r0, #31
   133e2:	03c9      	lsls	r1, r1, #15
   133e4:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   133e8:	03c0      	lsls	r0, r0, #15
   133ea:	f240 33e7 	movw	r3, #999	; 0x3e7
   133ee:	18c0      	adds	r0, r0, r3
   133f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   133f4:	f04f 0300 	mov.w	r3, #0
   133f8:	f141 0100 	adc.w	r1, r1, #0
   133fc:	f7ec fe6e 	bl	dc <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   13400:	f7fa fde4 	bl	dfcc <z_impl_k_sleep>
}
   13404:	bd08      	pop	{r3, pc}

00013406 <blocking_start_callback>:
{
   13406:	b508      	push	{r3, lr}
   13408:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1340a:	f7fa fa0f 	bl	d82c <z_impl_k_sem_give>
}
   1340e:	bd08      	pop	{r3, pc}

00013410 <lfclk_start>:
{
   13410:	b508      	push	{r3, lr}
		anomaly_132_workaround();
   13412:	f7f6 f909 	bl	9628 <anomaly_132_workaround>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   13416:	2000      	movs	r0, #0
   13418:	f000 fdc2 	bl	13fa0 <nrfx_clock_start>
}
   1341c:	bd08      	pop	{r3, pc}

0001341e <k_msleep>:
{
   1341e:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   13420:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   13424:	17c1      	asrs	r1, r0, #31
   13426:	03c9      	lsls	r1, r1, #15
   13428:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   1342c:	03c0      	lsls	r0, r0, #15
   1342e:	f240 33e7 	movw	r3, #999	; 0x3e7
   13432:	18c0      	adds	r0, r0, r3
   13434:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13438:	f04f 0300 	mov.w	r3, #0
   1343c:	f141 0100 	adc.w	r1, r1, #0
   13440:	f7ec fe4c 	bl	dc <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   13444:	f7fa fdc2 	bl	dfcc <z_impl_k_sleep>
}
   13448:	bd08      	pop	{r3, pc}

0001344a <wait>:
{
   1344a:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   1344c:	f001 f942 	bl	146d4 <k_is_in_isr>
   13450:	b100      	cbz	r0, 13454 <wait+0xa>
}
   13452:	bd08      	pop	{r3, pc}
		k_msleep(CONFIG_RTT_TX_RETRY_DELAY_MS);
   13454:	2002      	movs	r0, #2
   13456:	f7ff ffe2 	bl	1341e <k_msleep>
}
   1345a:	e7fa      	b.n	13452 <wait+0x8>

0001345c <shift_write_context>:
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
}

static void shift_write_context(uint32_t shift, struct flash_context *w_ctx)
{
	w_ctx->flash_addr += shift;
   1345c:	684b      	ldr	r3, [r1, #4]
   1345e:	4403      	add	r3, r0
   13460:	604b      	str	r3, [r1, #4]
	w_ctx->data_addr += shift;
   13462:	680b      	ldr	r3, [r1, #0]
   13464:	4403      	add	r3, r0
   13466:	600b      	str	r3, [r1, #0]
	w_ctx->len -= shift;
   13468:	688b      	ldr	r3, [r1, #8]
   1346a:	1a1b      	subs	r3, r3, r0
   1346c:	608b      	str	r3, [r1, #8]
}
   1346e:	4770      	bx	lr

00013470 <is_regular_addr_valid>:
{
   13470:	b538      	push	{r3, r4, r5, lr}
   13472:	4604      	mov	r4, r0
   13474:	460d      	mov	r5, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   13476:	f000 ff26 	bl	142c6 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   1347a:	2c00      	cmp	r4, #0
   1347c:	db06      	blt.n	1348c <is_regular_addr_valid+0x1c>
	return (addr >= boundary_start &&
   1347e:	42a0      	cmp	r0, r4
   13480:	d906      	bls.n	13490 <is_regular_addr_valid+0x20>
			(len <= (boundary_start + boundary_size - addr)));
   13482:	1b00      	subs	r0, r0, r4
			(addr < (boundary_start + boundary_size)) &&
   13484:	4285      	cmp	r5, r0
   13486:	d905      	bls.n	13494 <is_regular_addr_valid+0x24>
   13488:	2000      	movs	r0, #0
   1348a:	e000      	b.n	1348e <is_regular_addr_valid+0x1e>
   1348c:	2000      	movs	r0, #0
}
   1348e:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   13490:	2000      	movs	r0, #0
   13492:	e7fc      	b.n	1348e <is_regular_addr_valid+0x1e>
   13494:	2001      	movs	r0, #1
   13496:	e7fa      	b.n	1348e <is_regular_addr_valid+0x1e>

00013498 <erase_op>:
{
   13498:	b538      	push	{r3, r4, r5, lr}
   1349a:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1349c:	f000 ff17 	bl	142ce <nrfx_nvmc_flash_page_size_get>
   134a0:	4605      	mov	r5, r0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   134a2:	6860      	ldr	r0, [r4, #4]
   134a4:	f7f9 fa8e 	bl	c9c4 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   134a8:	68a3      	ldr	r3, [r4, #8]
   134aa:	1b5b      	subs	r3, r3, r5
   134ac:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   134ae:	6862      	ldr	r2, [r4, #4]
   134b0:	442a      	add	r2, r5
   134b2:	6062      	str	r2, [r4, #4]
	} while (e_ctx->len > 0);
   134b4:	2b00      	cmp	r3, #0
   134b6:	d1f4      	bne.n	134a2 <erase_op+0xa>
}
   134b8:	2000      	movs	r0, #0
   134ba:	bd38      	pop	{r3, r4, r5, pc}

000134bc <erase>:

	return FLASH_OP_DONE;
}

static int erase(uint32_t addr, uint32_t size)
{
   134bc:	b500      	push	{lr}
   134be:	b085      	sub	sp, #20
	struct flash_context context = {
   134c0:	2300      	movs	r3, #0
   134c2:	9301      	str	r3, [sp, #4]
   134c4:	9302      	str	r3, [sp, #8]
   134c6:	9303      	str	r3, [sp, #12]
   134c8:	9002      	str	r0, [sp, #8]
   134ca:	9103      	str	r1, [sp, #12]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
   134cc:	a801      	add	r0, sp, #4
   134ce:	f7ff ffe3 	bl	13498 <erase_op>
}
   134d2:	b005      	add	sp, #20
   134d4:	f85d fb04 	ldr.w	pc, [sp], #4

000134d8 <write_op>:
{
   134d8:	b510      	push	{r4, lr}
   134da:	4604      	mov	r4, r0
	while (w_ctx->len >= sizeof(uint32_t)) {
   134dc:	e008      	b.n	134f0 <write_op+0x18>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   134de:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   134e0:	6819      	ldr	r1, [r3, #0]
   134e2:	6860      	ldr	r0, [r4, #4]
   134e4:	f000 fee3 	bl	142ae <nrfx_nvmc_word_write>
		shift_write_context(sizeof(uint32_t), w_ctx);
   134e8:	4621      	mov	r1, r4
   134ea:	2004      	movs	r0, #4
   134ec:	f7ff ffb6 	bl	1345c <shift_write_context>
	while (w_ctx->len >= sizeof(uint32_t)) {
   134f0:	68a3      	ldr	r3, [r4, #8]
   134f2:	2b03      	cmp	r3, #3
   134f4:	d8f3      	bhi.n	134de <write_op+0x6>
	nvmc_wait_ready();
   134f6:	f7f6 f9f7 	bl	98e8 <nvmc_wait_ready>
}
   134fa:	2000      	movs	r0, #0
   134fc:	bd10      	pop	{r4, pc}

000134fe <write>:

static int write(off_t addr, const void *data, size_t len)
{
   134fe:	b500      	push	{lr}
   13500:	b085      	sub	sp, #20
	struct flash_context context = {
   13502:	9101      	str	r1, [sp, #4]
   13504:	9002      	str	r0, [sp, #8]
   13506:	9203      	str	r2, [sp, #12]
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
   13508:	a801      	add	r0, sp, #4
   1350a:	f7ff ffe5 	bl	134d8 <write_op>
}
   1350e:	b005      	add	sp, #20
   13510:	f85d fb04 	ldr.w	pc, [sp], #4

00013514 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   13514:	b570      	push	{r4, r5, r6, lr}
   13516:	b082      	sub	sp, #8
   13518:	460d      	mov	r5, r1
   1351a:	4616      	mov	r6, r2
   1351c:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   1351e:	6882      	ldr	r2, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   13520:	2300      	movs	r3, #0
   13522:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   13524:	60a3      	str	r3, [r4, #8]

	api->page_layout(dev, &layout, &layout_size);
   13526:	6913      	ldr	r3, [r2, #16]
   13528:	466a      	mov	r2, sp
   1352a:	a901      	add	r1, sp, #4
   1352c:	4798      	blx	r3

	while (layout_size--) {
   1352e:	e014      	b.n	1355a <flash_get_page_info+0x46>
		info->size = layout->pages_size;
		if (offs == 0) {
			index_jmp = index - info->index;
		} else {
			index_jmp = (offs - info->start_offset) / info->size;
   13530:	6820      	ldr	r0, [r4, #0]
   13532:	1a28      	subs	r0, r5, r0
   13534:	fbb0 f0f2 	udiv	r0, r0, r2
		}

		index_jmp = MIN(index_jmp, layout->pages_count);
   13538:	681b      	ldr	r3, [r3, #0]
   1353a:	4298      	cmp	r0, r3
   1353c:	bf28      	it	cs
   1353e:	4618      	movcs	r0, r3
		info->start_offset += (index_jmp * info->size);
   13540:	6823      	ldr	r3, [r4, #0]
   13542:	fb00 3302 	mla	r3, r0, r2, r3
   13546:	6023      	str	r3, [r4, #0]
		info->index += index_jmp;
   13548:	68a3      	ldr	r3, [r4, #8]
   1354a:	4403      	add	r3, r0
   1354c:	60a3      	str	r3, [r4, #8]
		if (index_jmp < layout->pages_count) {
   1354e:	9b01      	ldr	r3, [sp, #4]
   13550:	681a      	ldr	r2, [r3, #0]
   13552:	4282      	cmp	r2, r0
   13554:	d811      	bhi.n	1357a <flash_get_page_info+0x66>
			return 0;
		}

		layout++;
   13556:	3308      	adds	r3, #8
   13558:	9301      	str	r3, [sp, #4]
	while (layout_size--) {
   1355a:	9b00      	ldr	r3, [sp, #0]
   1355c:	1e5a      	subs	r2, r3, #1
   1355e:	9200      	str	r2, [sp, #0]
   13560:	b13b      	cbz	r3, 13572 <flash_get_page_info+0x5e>
		info->size = layout->pages_size;
   13562:	9b01      	ldr	r3, [sp, #4]
   13564:	685a      	ldr	r2, [r3, #4]
   13566:	6062      	str	r2, [r4, #4]
		if (offs == 0) {
   13568:	2d00      	cmp	r5, #0
   1356a:	d1e1      	bne.n	13530 <flash_get_page_info+0x1c>
			index_jmp = index - info->index;
   1356c:	68a0      	ldr	r0, [r4, #8]
   1356e:	1a30      	subs	r0, r6, r0
   13570:	e7e2      	b.n	13538 <flash_get_page_info+0x24>
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   13572:	f06f 0015 	mvn.w	r0, #21
}
   13576:	b002      	add	sp, #8
   13578:	bd70      	pop	{r4, r5, r6, pc}
			return 0;
   1357a:	2000      	movs	r0, #0
   1357c:	e7fb      	b.n	13576 <flash_get_page_info+0x62>

0001357e <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   1357e:	b508      	push	{r3, lr}
   13580:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   13582:	2200      	movs	r2, #0
   13584:	f7ff ffc6 	bl	13514 <flash_get_page_info>
}
   13588:	bd08      	pop	{r3, pc}

0001358a <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   1358a:	460b      	mov	r3, r1
   1358c:	b139      	cbz	r1, 1359e <sys_slist_remove+0x14>
	return node->next;
   1358e:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   13590:	6019      	str	r1, [r3, #0]
	return list->tail;
   13592:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   13594:	428a      	cmp	r2, r1
   13596:	d009      	beq.n	135ac <sys_slist_remove+0x22>
	parent->next = child;
   13598:	2300      	movs	r3, #0
   1359a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1359c:	4770      	bx	lr
	return node->next;
   1359e:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   135a0:	6003      	str	r3, [r0, #0]
	return list->tail;
   135a2:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   135a4:	428a      	cmp	r2, r1
   135a6:	d1f7      	bne.n	13598 <sys_slist_remove+0xe>
	list->tail = node;
   135a8:	6043      	str	r3, [r0, #4]
}
   135aa:	e7f5      	b.n	13598 <sys_slist_remove+0xe>
	list->tail = node;
   135ac:	6043      	str	r3, [r0, #4]
}
   135ae:	e7f3      	b.n	13598 <sys_slist_remove+0xe>

000135b0 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   135b0:	b508      	push	{r3, lr}
   135b2:	460a      	mov	r2, r1
	return list->head;
   135b4:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   135b6:	2100      	movs	r1, #0
   135b8:	e001      	b.n	135be <sys_slist_find_and_remove+0xe>
   135ba:	4619      	mov	r1, r3
   135bc:	681b      	ldr	r3, [r3, #0]
   135be:	b12b      	cbz	r3, 135cc <sys_slist_find_and_remove+0x1c>
   135c0:	4293      	cmp	r3, r2
   135c2:	d1fa      	bne.n	135ba <sys_slist_find_and_remove+0xa>
   135c4:	f7ff ffe1 	bl	1358a <sys_slist_remove>
   135c8:	2001      	movs	r0, #1
   135ca:	e000      	b.n	135ce <sys_slist_find_and_remove+0x1e>
   135cc:	2000      	movs	r0, #0
   135ce:	bd08      	pop	{r3, pc}

000135d0 <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
   135d0:	b570      	push	{r4, r5, r6, lr}
   135d2:	4604      	mov	r4, r0
   135d4:	460d      	mov	r5, r1
   135d6:	4616      	mov	r6, r2
	return list->head;
   135d8:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   135da:	b133      	cbz	r3, 135ea <gpio_manage_callback+0x1a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   135dc:	f7ff ffe8 	bl	135b0 <sys_slist_find_and_remove>
   135e0:	b970      	cbnz	r0, 13600 <gpio_manage_callback+0x30>
			if (!set) {
   135e2:	b91e      	cbnz	r6, 135ec <gpio_manage_callback+0x1c>
				return -EINVAL;
   135e4:	f06f 0015 	mvn.w	r0, #21
   135e8:	e006      	b.n	135f8 <gpio_manage_callback+0x28>
			}
		}
	} else if (!set) {
   135ea:	b132      	cbz	r2, 135fa <gpio_manage_callback+0x2a>
   135ec:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   135ee:	602b      	str	r3, [r5, #0]
	list->head = node;
   135f0:	6025      	str	r5, [r4, #0]
	return list->tail;
   135f2:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   135f4:	b143      	cbz	r3, 13608 <gpio_manage_callback+0x38>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   135f6:	2000      	movs	r0, #0
}
   135f8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   135fa:	f06f 0015 	mvn.w	r0, #21
   135fe:	e7fb      	b.n	135f8 <gpio_manage_callback+0x28>
	if (set) {
   13600:	2e00      	cmp	r6, #0
   13602:	d1f3      	bne.n	135ec <gpio_manage_callback+0x1c>
	return 0;
   13604:	2000      	movs	r0, #0
   13606:	e7f7      	b.n	135f8 <gpio_manage_callback+0x28>
	list->tail = node;
   13608:	6065      	str	r5, [r4, #4]
   1360a:	2000      	movs	r0, #0
}
   1360c:	e7f4      	b.n	135f8 <gpio_manage_callback+0x28>

0001360e <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   1360e:	b570      	push	{r4, r5, r6, lr}
   13610:	460e      	mov	r6, r1
   13612:	4615      	mov	r5, r2
	return list->head;
   13614:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   13616:	b121      	cbz	r1, 13622 <gpio_fire_callbacks+0x14>
	return node->next;
   13618:	680c      	ldr	r4, [r1, #0]
   1361a:	b13c      	cbz	r4, 1362c <gpio_fire_callbacks+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1361c:	b931      	cbnz	r1, 1362c <gpio_fire_callbacks+0x1e>
   1361e:	460c      	mov	r4, r1
   13620:	e004      	b.n	1362c <gpio_fire_callbacks+0x1e>
   13622:	460c      	mov	r4, r1
   13624:	e002      	b.n	1362c <gpio_fire_callbacks+0x1e>
   13626:	4623      	mov	r3, r4
   13628:	4621      	mov	r1, r4
   1362a:	461c      	mov	r4, r3
   1362c:	b171      	cbz	r1, 1364c <gpio_fire_callbacks+0x3e>
		if (cb->pin_mask & pins) {
   1362e:	688a      	ldr	r2, [r1, #8]
   13630:	402a      	ands	r2, r5
   13632:	d002      	beq.n	1363a <gpio_fire_callbacks+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   13634:	684b      	ldr	r3, [r1, #4]
   13636:	4630      	mov	r0, r6
   13638:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1363a:	2c00      	cmp	r4, #0
   1363c:	d0f3      	beq.n	13626 <gpio_fire_callbacks+0x18>
	return node->next;
   1363e:	6823      	ldr	r3, [r4, #0]
   13640:	2b00      	cmp	r3, #0
   13642:	d0f1      	beq.n	13628 <gpio_fire_callbacks+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   13644:	2c00      	cmp	r4, #0
   13646:	d1ef      	bne.n	13628 <gpio_fire_callbacks+0x1a>
   13648:	4623      	mov	r3, r4
   1364a:	e7ed      	b.n	13628 <gpio_fire_callbacks+0x1a>
		}
	}
}
   1364c:	bd70      	pop	{r4, r5, r6, pc}

0001364e <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1364e:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
   13652:	0580      	lsls	r0, r0, #22
   13654:	0d80      	lsrs	r0, r0, #22
   13656:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
   1365a:	d033      	beq.n	136c4 <get_drive+0x76>
   1365c:	d816      	bhi.n	1368c <get_drive+0x3e>
   1365e:	2806      	cmp	r0, #6
   13660:	d02c      	beq.n	136bc <get_drive+0x6e>
   13662:	d906      	bls.n	13672 <get_drive+0x24>
   13664:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   13668:	d10d      	bne.n	13686 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
   1366a:	2301      	movs	r3, #1
   1366c:	700b      	strb	r3, [r1, #0]
	return 0;
   1366e:	2000      	movs	r0, #0
		break;
   13670:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   13672:	b300      	cbz	r0, 136b6 <get_drive+0x68>
   13674:	2802      	cmp	r0, #2
   13676:	d103      	bne.n	13680 <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
   13678:	2304      	movs	r3, #4
   1367a:	700b      	strb	r3, [r1, #0]
	return 0;
   1367c:	2000      	movs	r0, #0
		break;
   1367e:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   13680:	f06f 0015 	mvn.w	r0, #21
   13684:	4770      	bx	lr
   13686:	f06f 0015 	mvn.w	r0, #21
   1368a:	4770      	bx	lr
   1368c:	f240 2302 	movw	r3, #514	; 0x202
   13690:	4298      	cmp	r0, r3
   13692:	d01b      	beq.n	136cc <get_drive+0x7e>
   13694:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
   13698:	d103      	bne.n	136a2 <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
   1369a:	2303      	movs	r3, #3
   1369c:	700b      	strb	r3, [r1, #0]
	return 0;
   1369e:	2000      	movs	r0, #0
		break;
   136a0:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   136a2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   136a6:	d103      	bne.n	136b0 <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
   136a8:	2302      	movs	r3, #2
   136aa:	700b      	strb	r3, [r1, #0]
	return 0;
   136ac:	2000      	movs	r0, #0
		break;
   136ae:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   136b0:	f06f 0015 	mvn.w	r0, #21
   136b4:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   136b6:	2000      	movs	r0, #0
   136b8:	7008      	strb	r0, [r1, #0]
		break;
   136ba:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   136bc:	2306      	movs	r3, #6
   136be:	700b      	strb	r3, [r1, #0]
	return 0;
   136c0:	2000      	movs	r0, #0
		break;
   136c2:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   136c4:	2307      	movs	r3, #7
   136c6:	700b      	strb	r3, [r1, #0]
	return 0;
   136c8:	2000      	movs	r0, #0
		break;
   136ca:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
   136cc:	2305      	movs	r3, #5
   136ce:	700b      	strb	r3, [r1, #0]
	return 0;
   136d0:	2000      	movs	r0, #0
}
   136d2:	4770      	bx	lr

000136d4 <get_pull>:
	if (flags & GPIO_PULL_UP) {
   136d4:	f010 0f10 	tst.w	r0, #16
   136d8:	d104      	bne.n	136e4 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   136da:	f010 0f20 	tst.w	r0, #32
   136de:	d103      	bne.n	136e8 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   136e0:	2000      	movs	r0, #0
   136e2:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   136e4:	2003      	movs	r0, #3
   136e6:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   136e8:	2001      	movs	r0, #1
}
   136ea:	4770      	bx	lr

000136ec <gpio_nrfx_port_get_raw>:
	return port->config;
   136ec:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   136ee:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   136f0:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   136f4:	600b      	str	r3, [r1, #0]
}
   136f6:	2000      	movs	r0, #0
   136f8:	4770      	bx	lr

000136fa <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   136fa:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   136fc:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   136fe:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   13702:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   13706:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   1370a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   1370e:	2000      	movs	r0, #0
   13710:	4770      	bx	lr

00013712 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   13712:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   13714:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   13716:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   1371a:	2000      	movs	r0, #0
   1371c:	4770      	bx	lr

0001371e <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   1371e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   13720:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   13722:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   13726:	2000      	movs	r0, #0
   13728:	4770      	bx	lr

0001372a <gpio_nrfx_port_toggle_bits>:
	return port->config;
   1372a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1372c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1372e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   13732:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   13736:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   13738:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   1373c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   13740:	2000      	movs	r0, #0
   13742:	4770      	bx	lr

00013744 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   13744:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
   13748:	d007      	beq.n	1375a <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1374a:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
   1374e:	d00d      	beq.n	1376c <get_trigger+0x28>
   13750:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   13754:	d008      	beq.n	13768 <get_trigger+0x24>
   13756:	2001      	movs	r0, #1
}
   13758:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1375a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   1375e:	d001      	beq.n	13764 <get_trigger+0x20>
   13760:	2005      	movs	r0, #5
   13762:	4770      	bx	lr
   13764:	2004      	movs	r0, #4
   13766:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   13768:	2002      	movs	r0, #2
   1376a:	4770      	bx	lr
   1376c:	2003      	movs	r0, #3
   1376e:	4770      	bx	lr

00013770 <gpio_nrfx_manage_callback>:
{
   13770:	b508      	push	{r3, lr}
	return port->data;
   13772:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   13774:	3004      	adds	r0, #4
   13776:	f7ff ff2b 	bl	135d0 <gpio_manage_callback>
}
   1377a:	bd08      	pop	{r3, pc}

0001377c <nrfx_gpio_handler>:
{
   1377c:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
   1377e:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   13782:	0940      	lsrs	r0, r0, #5
   13784:	f7f6 fe8c 	bl	a4a0 <get_dev>
	if (port == NULL) {
   13788:	b130      	cbz	r0, 13798 <nrfx_gpio_handler+0x1c>
   1378a:	4601      	mov	r1, r0
	return port->data;
   1378c:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   1378e:	2201      	movs	r2, #1
   13790:	40a2      	lsls	r2, r4
   13792:	3004      	adds	r0, #4
   13794:	f7ff ff3b 	bl	1360e <gpio_fire_callbacks>
}
   13798:	bd10      	pop	{r4, pc}

0001379a <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   1379a:	b510      	push	{r4, lr}
   1379c:	b084      	sub	sp, #16
   1379e:	460c      	mov	r4, r1
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   137a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   137a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
}
#endif /* defined(CONFIG_SOC_HFXO_CAP_INTERNAL) */

static inline void soc_secure_read_deviceid(uint32_t deviceid[2])
{
	deviceid[0] = nrf_ficr_deviceid_get(NRF_FICR, 0);
   137a6:	9200      	str	r2, [sp, #0]
   137a8:	6e59      	ldr	r1, [r3, #100]	; 0x64
	deviceid[1] = nrf_ficr_deviceid_get(NRF_FICR, 1);
   137aa:	9101      	str	r1, [sp, #4]
	struct nrf_uid dev_id;
	uint32_t deviceid[2];

	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
   137ac:	0a0b      	lsrs	r3, r1, #8
   137ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   137b2:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
   137b6:	ea4f 2c01 	mov.w	ip, r1, lsl #8
   137ba:	f40c 0c7f 	and.w	ip, ip, #16711680	; 0xff0000
   137be:	ea43 030c 	orr.w	r3, r3, ip
   137c2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   137c6:	9302      	str	r3, [sp, #8]
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
   137c8:	0a13      	lsrs	r3, r2, #8
   137ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   137ce:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   137d2:	0211      	lsls	r1, r2, #8
   137d4:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   137d8:	430b      	orrs	r3, r1
   137da:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   137de:	9303      	str	r3, [sp, #12]

	if (length > sizeof(dev_id.id)) {
   137e0:	2c08      	cmp	r4, #8
   137e2:	d900      	bls.n	137e6 <z_impl_hwinfo_get_device_id+0x4c>
		length = sizeof(dev_id.id);
   137e4:	2408      	movs	r4, #8
	}

	memcpy(buffer, dev_id.id, length);
   137e6:	4622      	mov	r2, r4
   137e8:	a902      	add	r1, sp, #8
   137ea:	f7ff face 	bl	12d8a <memcpy>

	return length;
}
   137ee:	4620      	mov	r0, r4
   137f0:	b004      	add	sp, #16
   137f2:	bd10      	pop	{r4, pc}

000137f4 <z_impl_hwinfo_get_reset_cause>:
    return p_reg->RESETREAS;
   137f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   137f8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
{
	uint32_t flags = 0;

	uint32_t reason = nrfx_reset_reason_get();

	if (reason & NRFX_RESET_REASON_RESETPIN_MASK) {
   137fc:	f013 0201 	ands.w	r2, r3, #1
   13800:	d000      	beq.n	13804 <z_impl_hwinfo_get_reset_cause+0x10>
		flags |= RESET_PIN;
   13802:	2201      	movs	r2, #1
	}
	if (reason & NRFX_RESET_REASON_DOG_MASK) {
   13804:	f013 0f02 	tst.w	r3, #2
   13808:	d001      	beq.n	1380e <z_impl_hwinfo_get_reset_cause+0x1a>
		flags |= RESET_WATCHDOG;
   1380a:	f042 0210 	orr.w	r2, r2, #16
	}
	if (reason & NRFX_RESET_REASON_LOCKUP_MASK) {
   1380e:	f013 0f08 	tst.w	r3, #8
   13812:	d001      	beq.n	13818 <z_impl_hwinfo_get_reset_cause+0x24>
		flags |= RESET_CPU_LOCKUP;
   13814:	f442 7280 	orr.w	r2, r2, #256	; 0x100
	}
	if (reason & NRFX_RESET_REASON_OFF_MASK) {
   13818:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1381c:	d001      	beq.n	13822 <z_impl_hwinfo_get_reset_cause+0x2e>
		flags |= RESET_LOW_POWER_WAKE;
   1381e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	}
	if (reason & NRFX_RESET_REASON_DIF_MASK) {
   13822:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   13826:	d001      	beq.n	1382c <z_impl_hwinfo_get_reset_cause+0x38>
		flags |= RESET_DEBUG;
   13828:	f042 0220 	orr.w	r2, r2, #32
		flags |= RESET_DEBUG;
	}
#endif

#else
	if (reason & NRFX_RESET_REASON_SREQ_MASK) {
   1382c:	f013 0f04 	tst.w	r3, #4
   13830:	d001      	beq.n	13836 <z_impl_hwinfo_get_reset_cause+0x42>
		flags |= RESET_SOFTWARE;
   13832:	f042 0202 	orr.w	r2, r2, #2
	}
#endif

	*cause = flags;
   13836:	6002      	str	r2, [r0, #0]

	return 0;
}
   13838:	2000      	movs	r0, #0
   1383a:	4770      	bx	lr

0001383c <z_impl_hwinfo_clear_reset_cause>:
    p_reg->RESETREAS = mask;
   1383c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13840:	f04f 32ff 	mov.w	r2, #4294967295
   13844:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	uint32_t reason = -1;

	nrfx_reset_reason_clear(reason);

	return 0;
}
   13848:	2000      	movs	r0, #0
   1384a:	4770      	bx	lr

0001384c <z_impl_hwinfo_get_supported_reset_cause>:

int z_impl_hwinfo_get_supported_reset_cause(uint32_t *supported)
{
	*supported = (RESET_PIN
   1384c:	f240 13b3 	movw	r3, #435	; 0x1b3
   13850:	6003      	str	r3, [r0, #0]
		      | RESET_CPU_LOCKUP
		      | RESET_LOW_POWER_WAKE
		      | RESET_DEBUG);

	return 0;
}
   13852:	2000      	movs	r0, #0
   13854:	4770      	bx	lr

00013856 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   13856:	b500      	push	{lr}
	*state = &config->states[0];
   13858:	6843      	ldr	r3, [r0, #4]
   1385a:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   1385c:	e001      	b.n	13862 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
   1385e:	3308      	adds	r3, #8
   13860:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   13862:	6813      	ldr	r3, [r2, #0]
   13864:	f890 c008 	ldrb.w	ip, [r0, #8]
   13868:	f8d0 e004 	ldr.w	lr, [r0, #4]
   1386c:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
   13870:	4563      	cmp	r3, ip
   13872:	d205      	bcs.n	13880 <pinctrl_lookup_state+0x2a>
		if (id == (*state)->id) {
   13874:	f893 c005 	ldrb.w	ip, [r3, #5]
   13878:	458c      	cmp	ip, r1
   1387a:	d1f0      	bne.n	1385e <pinctrl_lookup_state+0x8>
			return 0;
   1387c:	2000      	movs	r0, #0
   1387e:	e001      	b.n	13884 <pinctrl_lookup_state+0x2e>
	}

	return -ENOENT;
   13880:	f06f 0001 	mvn.w	r0, #1
}
   13884:	f85d fb04 	ldr.w	pc, [sp], #4

00013888 <uart_nrfx_config_get>:
{
   13888:	460b      	mov	r3, r1
	struct uart_nrfx_data *data = dev->data;
   1388a:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   1388c:	e892 0003 	ldmia.w	r2, {r0, r1}
   13890:	e883 0003 	stmia.w	r3, {r0, r1}
}
   13894:	2000      	movs	r0, #0
   13896:	4770      	bx	lr

00013898 <uart_nrfx_irq_update>:
}
   13898:	2001      	movs	r0, #1
   1389a:	4770      	bx	lr

0001389c <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
   1389c:	b510      	push	{r4, lr}
   1389e:	b082      	sub	sp, #8
   138a0:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   138a2:	aa01      	add	r2, sp, #4
   138a4:	f7ff ffd7 	bl	13856 <pinctrl_lookup_state>
	if (ret < 0) {
   138a8:	2800      	cmp	r0, #0
   138aa:	db05      	blt.n	138b8 <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   138ac:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   138ae:	6822      	ldr	r2, [r4, #0]
   138b0:	7919      	ldrb	r1, [r3, #4]
   138b2:	6818      	ldr	r0, [r3, #0]
   138b4:	f7f7 f864 	bl	a980 <pinctrl_configure_pins>
}
   138b8:	b002      	add	sp, #8
   138ba:	bd10      	pop	{r4, pc}

000138bc <k_msleep>:
{
   138bc:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   138be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   138c2:	17c1      	asrs	r1, r0, #31
   138c4:	03c9      	lsls	r1, r1, #15
   138c6:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   138ca:	03c0      	lsls	r0, r0, #15
   138cc:	f240 33e7 	movw	r3, #999	; 0x3e7
   138d0:	18c0      	adds	r0, r0, r3
   138d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   138d6:	f04f 0300 	mov.w	r3, #0
   138da:	f141 0100 	adc.w	r1, r1, #0
   138de:	f7ec fbfd 	bl	dc <__aeabi_uldivmod>
   138e2:	f7fa fb73 	bl	dfcc <z_impl_k_sleep>
}
   138e6:	bd08      	pop	{r3, pc}

000138e8 <z_impl_gpio_pin_configure>:
{
   138e8:	b538      	push	{r3, r4, r5, lr}
   138ea:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
   138ec:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
   138ee:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   138f0:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
   138f4:	d007      	beq.n	13906 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   138f6:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   138fa:	d004      	beq.n	13906 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   138fc:	f012 0f01 	tst.w	r2, #1
   13900:	d001      	beq.n	13906 <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   13902:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   13906:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1390a:	f013 0f01 	tst.w	r3, #1
   1390e:	d00a      	beq.n	13926 <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   13910:	6823      	ldr	r3, [r4, #0]
   13912:	f04f 0c01 	mov.w	ip, #1
   13916:	fa0c fc01 	lsl.w	ip, ip, r1
   1391a:	ea43 030c 	orr.w	r3, r3, ip
   1391e:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
   13920:	682b      	ldr	r3, [r5, #0]
   13922:	4798      	blx	r3
}
   13924:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   13926:	6823      	ldr	r3, [r4, #0]
   13928:	f04f 0c01 	mov.w	ip, #1
   1392c:	fa0c fc01 	lsl.w	ip, ip, r1
   13930:	ea23 030c 	bic.w	r3, r3, ip
   13934:	6023      	str	r3, [r4, #0]
   13936:	e7f3      	b.n	13920 <z_impl_gpio_pin_configure+0x38>

00013938 <gpio_pin_configure_dt>:
{
   13938:	b508      	push	{r3, lr}
   1393a:	4603      	mov	r3, r0
   1393c:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
   1393e:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   13940:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   13942:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   13944:	ea42 020c 	orr.w	r2, r2, ip
	return z_impl_gpio_pin_configure(port, pin, flags);
   13948:	f7ff ffce 	bl	138e8 <z_impl_gpio_pin_configure>
}
   1394c:	bd08      	pop	{r3, pc}

0001394e <gpio_pin_set_raw>:
{
   1394e:	b508      	push	{r3, lr}
	if (value != 0)	{
   13950:	b132      	cbz	r2, 13960 <gpio_pin_set_raw+0x12>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   13952:	2301      	movs	r3, #1
   13954:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   13958:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   1395a:	68db      	ldr	r3, [r3, #12]
   1395c:	4798      	blx	r3
}
   1395e:	bd08      	pop	{r3, pc}
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   13960:	2301      	movs	r3, #1
   13962:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   13966:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   13968:	691b      	ldr	r3, [r3, #16]
   1396a:	4798      	blx	r3
	return ret;
   1396c:	e7f7      	b.n	1395e <gpio_pin_set_raw+0x10>

0001396e <gpio_pin_set>:
{
   1396e:	b510      	push	{r4, lr}
	const struct gpio_driver_data *const data =
   13970:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   13972:	681c      	ldr	r4, [r3, #0]
   13974:	2301      	movs	r3, #1
   13976:	408b      	lsls	r3, r1
   13978:	421c      	tst	r4, r3
   1397a:	d002      	beq.n	13982 <gpio_pin_set+0x14>
		value = (value != 0) ? 0 : 1;
   1397c:	fab2 f282 	clz	r2, r2
   13980:	0952      	lsrs	r2, r2, #5
	return gpio_pin_set_raw(port, pin, value);
   13982:	f7ff ffe4 	bl	1394e <gpio_pin_set_raw>
}
   13986:	bd10      	pop	{r4, pc}

00013988 <spi_context_get_next_buf>:
{
   13988:	b430      	push	{r4, r5}
	while (*count) {
   1398a:	e004      	b.n	13996 <spi_context_get_next_buf+0xe>
		++(*current);
   1398c:	3408      	adds	r4, #8
   1398e:	6004      	str	r4, [r0, #0]
		--(*count);
   13990:	680c      	ldr	r4, [r1, #0]
   13992:	3c01      	subs	r4, #1
   13994:	600c      	str	r4, [r1, #0]
	while (*count) {
   13996:	680c      	ldr	r4, [r1, #0]
   13998:	b14c      	cbz	r4, 139ae <spi_context_get_next_buf+0x26>
		if (((*current)->len / dfs) != 0) {
   1399a:	6804      	ldr	r4, [r0, #0]
   1399c:	6865      	ldr	r5, [r4, #4]
   1399e:	429d      	cmp	r5, r3
   139a0:	d3f4      	bcc.n	1398c <spi_context_get_next_buf+0x4>
			*buf_len = (*current)->len / dfs;
   139a2:	fbb5 f5f3 	udiv	r5, r5, r3
   139a6:	6015      	str	r5, [r2, #0]
			return (*current)->buf;
   139a8:	6803      	ldr	r3, [r0, #0]
   139aa:	6818      	ldr	r0, [r3, #0]
   139ac:	e001      	b.n	139b2 <spi_context_get_next_buf+0x2a>
	*buf_len = 0;
   139ae:	2000      	movs	r0, #0
   139b0:	6010      	str	r0, [r2, #0]
}
   139b2:	bc30      	pop	{r4, r5}
   139b4:	4770      	bx	lr

000139b6 <spi_context_buffers_setup>:
{
   139b6:	b570      	push	{r4, r5, r6, lr}
   139b8:	4604      	mov	r4, r0
   139ba:	4615      	mov	r5, r2
   139bc:	461e      	mov	r6, r3
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   139be:	460a      	mov	r2, r1
   139c0:	b309      	cbz	r1, 13a06 <spi_context_buffers_setup+0x50>
   139c2:	680b      	ldr	r3, [r1, #0]
   139c4:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   139c6:	b303      	cbz	r3, 13a0a <spi_context_buffers_setup+0x54>
   139c8:	6853      	ldr	r3, [r2, #4]
   139ca:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   139cc:	4633      	mov	r3, r6
   139ce:	f104 0258 	add.w	r2, r4, #88	; 0x58
   139d2:	f104 0148 	add.w	r1, r4, #72	; 0x48
   139d6:	f104 0044 	add.w	r0, r4, #68	; 0x44
   139da:	f7ff ffd5 	bl	13988 <spi_context_get_next_buf>
	ctx->tx_buf = (const uint8_t *)
   139de:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   139e0:	b1ad      	cbz	r5, 13a0e <spi_context_buffers_setup+0x58>
   139e2:	682b      	ldr	r3, [r5, #0]
   139e4:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   139e6:	b1a3      	cbz	r3, 13a12 <spi_context_buffers_setup+0x5c>
   139e8:	686b      	ldr	r3, [r5, #4]
   139ea:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   139ec:	4633      	mov	r3, r6
   139ee:	f104 0260 	add.w	r2, r4, #96	; 0x60
   139f2:	f104 0150 	add.w	r1, r4, #80	; 0x50
   139f6:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   139fa:	f7ff ffc5 	bl	13988 <spi_context_get_next_buf>
	ctx->rx_buf = (uint8_t *)
   139fe:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   13a00:	2300      	movs	r3, #0
   13a02:	6423      	str	r3, [r4, #64]	; 0x40
}
   13a04:	bd70      	pop	{r4, r5, r6, pc}
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   13a06:	460b      	mov	r3, r1
   13a08:	e7dc      	b.n	139c4 <spi_context_buffers_setup+0xe>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   13a0a:	2300      	movs	r3, #0
   13a0c:	e7dd      	b.n	139ca <spi_context_buffers_setup+0x14>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   13a0e:	462b      	mov	r3, r5
   13a10:	e7e8      	b.n	139e4 <spi_context_buffers_setup+0x2e>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   13a12:	2300      	movs	r3, #0
   13a14:	e7e9      	b.n	139ea <spi_context_buffers_setup+0x34>

00013a16 <pinctrl_apply_state>:
{
   13a16:	b510      	push	{r4, lr}
   13a18:	b082      	sub	sp, #8
   13a1a:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   13a1c:	aa01      	add	r2, sp, #4
   13a1e:	f7ff ff1a 	bl	13856 <pinctrl_lookup_state>
	if (ret < 0) {
   13a22:	2800      	cmp	r0, #0
   13a24:	db05      	blt.n	13a32 <pinctrl_apply_state+0x1c>
	return pinctrl_apply_state_direct(config, state);
   13a26:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   13a28:	6822      	ldr	r2, [r4, #0]
   13a2a:	7919      	ldrb	r1, [r3, #4]
   13a2c:	6818      	ldr	r0, [r3, #0]
   13a2e:	f7f6 ffa7 	bl	a980 <pinctrl_configure_pins>
}
   13a32:	b002      	add	sp, #8
   13a34:	bd10      	pop	{r4, pc}

00013a36 <spi_nrfx_pm_action>:
};

#ifdef CONFIG_PM_DEVICE
static int spi_nrfx_pm_action(const struct device *dev,
			      enum pm_device_action action)
{
   13a36:	b538      	push	{r3, r4, r5, lr}
	int ret = 0;
	struct spi_nrfx_data *dev_data = dev->data;
   13a38:	6905      	ldr	r5, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   13a3a:	6844      	ldr	r4, [r0, #4]

	switch (action) {
   13a3c:	b131      	cbz	r1, 13a4c <spi_nrfx_pm_action+0x16>
   13a3e:	2901      	cmp	r1, #1
   13a40:	d113      	bne.n	13a6a <spi_nrfx_pm_action+0x34>
	case PM_DEVICE_ACTION_RESUME:
		ret = pinctrl_apply_state(dev_config->pcfg,
   13a42:	2100      	movs	r1, #0
   13a44:	6a20      	ldr	r0, [r4, #32]
   13a46:	f7ff ffe6 	bl	13a16 <pinctrl_apply_state>
					  PINCTRL_STATE_DEFAULT);
		if (ret < 0) {
   13a4a:	e010      	b.n	13a6e <spi_nrfx_pm_action+0x38>
		 * the next transfer.
		 */
		break;

	case PM_DEVICE_ACTION_SUSPEND:
		if (dev_data->initialized) {
   13a4c:	f895 306d 	ldrb.w	r3, [r5, #109]	; 0x6d
   13a50:	b923      	cbnz	r3, 13a5c <spi_nrfx_pm_action+0x26>
			nrfx_spi_uninit(&dev_config->spi);
			dev_data->initialized = false;
		}

		ret = pinctrl_apply_state(dev_config->pcfg,
   13a52:	2101      	movs	r1, #1
   13a54:	6a20      	ldr	r0, [r4, #32]
   13a56:	f7ff ffde 	bl	13a16 <pinctrl_apply_state>
					  PINCTRL_STATE_SLEEP);
		if (ret < 0) {
   13a5a:	e008      	b.n	13a6e <spi_nrfx_pm_action+0x38>
			nrfx_spi_uninit(&dev_config->spi);
   13a5c:	4620      	mov	r0, r4
   13a5e:	f7f9 f817 	bl	ca90 <nrfx_spi_uninit>
			dev_data->initialized = false;
   13a62:	2300      	movs	r3, #0
   13a64:	f885 306d 	strb.w	r3, [r5, #109]	; 0x6d
   13a68:	e7f3      	b.n	13a52 <spi_nrfx_pm_action+0x1c>
	switch (action) {
   13a6a:	f06f 0085 	mvn.w	r0, #133	; 0x85
	default:
		ret = -ENOTSUP;
	}

	return ret;
}
   13a6e:	bd38      	pop	{r3, r4, r5, pc}

00013a70 <_spi_context_cs_control>:
{
   13a70:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   13a72:	6803      	ldr	r3, [r0, #0]
   13a74:	b1a3      	cbz	r3, 13aa0 <_spi_context_cs_control+0x30>
   13a76:	4604      	mov	r4, r0
   13a78:	689d      	ldr	r5, [r3, #8]
   13a7a:	b18d      	cbz	r5, 13aa0 <_spi_context_cs_control+0x30>
   13a7c:	6828      	ldr	r0, [r5, #0]
   13a7e:	b178      	cbz	r0, 13aa0 <_spi_context_cs_control+0x30>
		if (on) {
   13a80:	b979      	cbnz	r1, 13aa2 <_spi_context_cs_control+0x32>
			if (!force_off &&
   13a82:	b91a      	cbnz	r2, 13a8c <_spi_context_cs_control+0x1c>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
   13a84:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
   13a86:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   13a8a:	d109      	bne.n	13aa0 <_spi_context_cs_control+0x30>
			k_busy_wait(ctx->config->cs->delay);
   13a8c:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_busy_wait(usec_to_wait);
   13a8e:	f001 f8a2 	bl	14bd6 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   13a92:	6823      	ldr	r3, [r4, #0]
   13a94:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
   13a96:	2200      	movs	r2, #0
   13a98:	7919      	ldrb	r1, [r3, #4]
   13a9a:	6818      	ldr	r0, [r3, #0]
   13a9c:	f7ff ff67 	bl	1396e <gpio_pin_set>
}
   13aa0:	bd38      	pop	{r3, r4, r5, pc}
   13aa2:	2201      	movs	r2, #1
   13aa4:	7929      	ldrb	r1, [r5, #4]
   13aa6:	f7ff ff62 	bl	1396e <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   13aaa:	6823      	ldr	r3, [r4, #0]
   13aac:	689b      	ldr	r3, [r3, #8]
   13aae:	6898      	ldr	r0, [r3, #8]
   13ab0:	f001 f891 	bl	14bd6 <z_impl_k_busy_wait>
}
   13ab4:	e7f4      	b.n	13aa0 <_spi_context_cs_control+0x30>

00013ab6 <spi_context_unlock_unconditionally>:
{
   13ab6:	b510      	push	{r4, lr}
   13ab8:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   13aba:	2201      	movs	r2, #1
   13abc:	2100      	movs	r1, #0
   13abe:	f7ff ffd7 	bl	13a70 <_spi_context_cs_control>
	return sem->count;
   13ac2:	69a3      	ldr	r3, [r4, #24]
	if (!k_sem_count_get(&ctx->lock)) {
   13ac4:	b103      	cbz	r3, 13ac8 <spi_context_unlock_unconditionally+0x12>
}
   13ac6:	bd10      	pop	{r4, pc}
		ctx->owner = NULL;
   13ac8:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
   13aca:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
   13ace:	f7f9 fead 	bl	d82c <z_impl_k_sem_give>
}
   13ad2:	e7f8      	b.n	13ac6 <spi_context_unlock_unconditionally+0x10>

00013ad4 <spi_nrfx_release>:
{
   13ad4:	b508      	push	{r3, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   13ad6:	6900      	ldr	r0, [r0, #16]
	return !!(ctx->config == config);
   13ad8:	6803      	ldr	r3, [r0, #0]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   13ada:	428b      	cmp	r3, r1
   13adc:	d106      	bne.n	13aec <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   13ade:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
   13ae2:	b933      	cbnz	r3, 13af2 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   13ae4:	f7ff ffe7 	bl	13ab6 <spi_context_unlock_unconditionally>
	return 0;
   13ae8:	2000      	movs	r0, #0
}
   13aea:	bd08      	pop	{r3, pc}
		return -EINVAL;
   13aec:	f06f 0015 	mvn.w	r0, #21
   13af0:	e7fb      	b.n	13aea <spi_nrfx_release+0x16>
		return -EBUSY;
   13af2:	f06f 000f 	mvn.w	r0, #15
   13af6:	e7f8      	b.n	13aea <spi_nrfx_release+0x16>

00013af8 <finish_transaction>:
{
   13af8:	b538      	push	{r3, r4, r5, lr}
   13afa:	460d      	mov	r5, r1
	struct spi_nrfx_data *dev_data = dev->data;
   13afc:	6904      	ldr	r4, [r0, #16]
	_spi_context_cs_control(ctx, on, false);
   13afe:	2200      	movs	r2, #0
   13b00:	4611      	mov	r1, r2
   13b02:	4620      	mov	r0, r4
   13b04:	f7ff ffb4 	bl	13a70 <_spi_context_cs_control>
	ctx->sync_status = status;
   13b08:	6425      	str	r5, [r4, #64]	; 0x40
	k_sem_give(&ctx->sync);
   13b0a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   13b0e:	f7f9 fe8d 	bl	d82c <z_impl_k_sem_give>
	dev_data->busy = false;
   13b12:	2300      	movs	r3, #0
   13b14:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   13b18:	bd38      	pop	{r3, r4, r5, pc}

00013b1a <spi_context_release>:
{
   13b1a:	b508      	push	{r3, lr}
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   13b1c:	6803      	ldr	r3, [r0, #0]
   13b1e:	889b      	ldrh	r3, [r3, #4]
   13b20:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   13b24:	d000      	beq.n	13b28 <spi_context_release+0xe>
}
   13b26:	bd08      	pop	{r3, pc}
		ctx->owner = NULL;
   13b28:	2300      	movs	r3, #0
   13b2a:	6043      	str	r3, [r0, #4]
		k_sem_give(&ctx->lock);
   13b2c:	3010      	adds	r0, #16
   13b2e:	f7f9 fe7d 	bl	d82c <z_impl_k_sem_give>
}
   13b32:	e7f8      	b.n	13b26 <spi_context_release+0xc>

00013b34 <spi_context_lock>:
{
   13b34:	b538      	push	{r3, r4, r5, lr}
   13b36:	4604      	mov	r4, r0
   13b38:	9d04      	ldr	r5, [sp, #16]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   13b3a:	88ab      	ldrh	r3, [r5, #4]
   13b3c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   13b40:	d004      	beq.n	13b4c <spi_context_lock+0x18>
   13b42:	6983      	ldr	r3, [r0, #24]
   13b44:	b913      	cbnz	r3, 13b4c <spi_context_lock+0x18>
		(ctx->owner == spi_cfg)) {
   13b46:	6843      	ldr	r3, [r0, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
   13b48:	42ab      	cmp	r3, r5
   13b4a:	d008      	beq.n	13b5e <spi_context_lock+0x2a>
	k_sem_take(&ctx->lock, K_FOREVER);
   13b4c:	f104 0010 	add.w	r0, r4, #16
	return z_impl_k_sem_take(sem, timeout);
   13b50:	f04f 32ff 	mov.w	r2, #4294967295
   13b54:	f04f 33ff 	mov.w	r3, #4294967295
   13b58:	f7f9 fe90 	bl	d87c <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   13b5c:	6065      	str	r5, [r4, #4]
}
   13b5e:	bd38      	pop	{r3, r4, r5, pc}

00013b60 <transceive>:
{
   13b60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13b64:	b083      	sub	sp, #12
   13b66:	4604      	mov	r4, r0
   13b68:	460d      	mov	r5, r1
   13b6a:	4690      	mov	r8, r2
   13b6c:	461f      	mov	r7, r3
	struct spi_nrfx_data *dev_data = dev->data;
   13b6e:	6906      	ldr	r6, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   13b70:	f8d0 9004 	ldr.w	r9, [r0, #4]
	spi_context_lock(&dev_data->ctx, asynchronous, cb, userdata, spi_cfg);
   13b74:	9100      	str	r1, [sp, #0]
   13b76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13b78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13b7a:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
   13b7e:	4630      	mov	r0, r6
   13b80:	f7ff ffd8 	bl	13b34 <spi_context_lock>
	error = configure(dev, spi_cfg);
   13b84:	4629      	mov	r1, r5
   13b86:	4620      	mov	r0, r4
   13b88:	f7f7 faf0 	bl	b16c <configure>
	if (error == 0) {
   13b8c:	4605      	mov	r5, r0
   13b8e:	b138      	cbz	r0, 13ba0 <transceive+0x40>
	spi_context_release(&dev_data->ctx, error);
   13b90:	4629      	mov	r1, r5
   13b92:	4630      	mov	r0, r6
   13b94:	f7ff ffc1 	bl	13b1a <spi_context_release>
}
   13b98:	4628      	mov	r0, r5
   13b9a:	b003      	add	sp, #12
   13b9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dev_data->busy = true;
   13ba0:	2501      	movs	r5, #1
   13ba2:	f886 506c 	strb.w	r5, [r6, #108]	; 0x6c
		spi_context_buffers_setup(&dev_data->ctx, tx_bufs, rx_bufs, 1);
   13ba6:	462b      	mov	r3, r5
   13ba8:	463a      	mov	r2, r7
   13baa:	4641      	mov	r1, r8
   13bac:	4630      	mov	r0, r6
   13bae:	f7ff ff02 	bl	139b6 <spi_context_buffers_setup>
	_spi_context_cs_control(ctx, on, false);
   13bb2:	2200      	movs	r2, #0
   13bb4:	4629      	mov	r1, r5
   13bb6:	4630      	mov	r0, r6
   13bb8:	f7ff ff5a 	bl	13a70 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   13bbc:	4620      	mov	r0, r4
   13bbe:	f7f7 fd0f 	bl	b5e0 <transfer_next_chunk>
		error = spi_context_wait_for_completion(&dev_data->ctx);
   13bc2:	4630      	mov	r0, r6
   13bc4:	f7f7 fc9c 	bl	b500 <spi_context_wait_for_completion>
   13bc8:	4605      	mov	r5, r0
		if (error == -ETIMEDOUT) {
   13bca:	f110 0f74 	cmn.w	r0, #116	; 0x74
   13bce:	d1df      	bne.n	13b90 <transceive+0x30>
			dev_data->chunk_len = 0;
   13bd0:	2700      	movs	r7, #0
   13bd2:	66b7      	str	r7, [r6, #104]	; 0x68
			nrfx_spi_uninit(&dev_config->spi);
   13bd4:	4648      	mov	r0, r9
   13bd6:	f7f8 ff5b 	bl	ca90 <nrfx_spi_uninit>
			dev_data->initialized = false;
   13bda:	f886 706d 	strb.w	r7, [r6, #109]	; 0x6d
			finish_transaction(dev, -ETIMEDOUT);
   13bde:	f06f 0173 	mvn.w	r1, #115	; 0x73
   13be2:	4620      	mov	r0, r4
   13be4:	f7ff ff88 	bl	13af8 <finish_transaction>
			k_sem_reset(&dev_data->ctx.sync);
   13be8:	f106 0028 	add.w	r0, r6, #40	; 0x28
	z_impl_k_sem_reset(sem);
   13bec:	f7f9 fe6e 	bl	d8cc <z_impl_k_sem_reset>
}
   13bf0:	e7ce      	b.n	13b90 <transceive+0x30>

00013bf2 <spi_nrfx_transceive>:
{
   13bf2:	b510      	push	{r4, lr}
   13bf4:	b084      	sub	sp, #16
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL, NULL);
   13bf6:	2400      	movs	r4, #0
   13bf8:	9402      	str	r4, [sp, #8]
   13bfa:	9401      	str	r4, [sp, #4]
   13bfc:	9400      	str	r4, [sp, #0]
   13bfe:	f7ff ffaf 	bl	13b60 <transceive>
}
   13c02:	b004      	add	sp, #16
   13c04:	bd10      	pop	{r4, pc}

00013c06 <irq_connect1>:
#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEFINE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEFINE(1);
   13c06:	b508      	push	{r3, lr}
   13c08:	2200      	movs	r2, #0
   13c0a:	2101      	movs	r1, #1
   13c0c:	2004      	movs	r0, #4
   13c0e:	f7fe fe93 	bl	12938 <z_arm_irq_priority_set>
   13c12:	bd08      	pop	{r3, pc}

00013c14 <irq_connect2>:
#endif

#ifdef CONFIG_SPI_2_NRF_SPI
SPI_NRFX_SPI_DEFINE(2);
   13c14:	b508      	push	{r3, lr}
   13c16:	2200      	movs	r2, #0
   13c18:	2101      	movs	r1, #1
   13c1a:	2023      	movs	r0, #35	; 0x23
   13c1c:	f7fe fe8c 	bl	12938 <z_arm_irq_priority_set>
   13c20:	bd08      	pop	{r3, pc}

00013c22 <spi_nrfx_init>:
{
   13c22:	b538      	push	{r3, r4, r5, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
   13c24:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   13c26:	6905      	ldr	r5, [r0, #16]
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   13c28:	2100      	movs	r1, #0
   13c2a:	6a20      	ldr	r0, [r4, #32]
   13c2c:	f7ff fef3 	bl	13a16 <pinctrl_apply_state>
	if (err < 0) {
   13c30:	2800      	cmp	r0, #0
   13c32:	db0a      	blt.n	13c4a <spi_nrfx_init+0x28>
	dev_config->irq_connect();
   13c34:	69e3      	ldr	r3, [r4, #28]
   13c36:	4798      	blx	r3
	err = spi_context_cs_configure_all(&dev_data->ctx);
   13c38:	4628      	mov	r0, r5
   13c3a:	f7f7 fdad 	bl	b798 <spi_context_cs_configure_all>
	if (err < 0) {
   13c3e:	2800      	cmp	r0, #0
   13c40:	db03      	blt.n	13c4a <spi_nrfx_init+0x28>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   13c42:	4628      	mov	r0, r5
   13c44:	f7ff ff37 	bl	13ab6 <spi_context_unlock_unconditionally>
	return 0;
   13c48:	2000      	movs	r0, #0
}
   13c4a:	bd38      	pop	{r3, r4, r5, pc}

00013c4c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   13c4c:	4770      	bx	lr

00013c4e <counter_sub>:
	return (a - b) & COUNTER_MAX;
   13c4e:	1a40      	subs	r0, r0, r1
}
   13c50:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   13c54:	4770      	bx	lr

00013c56 <event_check>:
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   13c56:	f100 0350 	add.w	r3, r0, #80	; 0x50
   13c5a:	009b      	lsls	r3, r3, #2
   13c5c:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13c5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13c62:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   13c66:	6818      	ldr	r0, [r3, #0]
}
   13c68:	3800      	subs	r0, #0
   13c6a:	bf18      	it	ne
   13c6c:	2001      	movne	r0, #1
   13c6e:	4770      	bx	lr

00013c70 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   13c70:	f100 0350 	add.w	r3, r0, #80	; 0x50
   13c74:	009b      	lsls	r3, r3, #2
   13c76:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13c78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13c7c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   13c80:	2200      	movs	r2, #0
   13c82:	601a      	str	r2, [r3, #0]
   13c84:	681b      	ldr	r3, [r3, #0]
}
   13c86:	4770      	bx	lr

00013c88 <absolute_time_to_cc>:
}
   13c88:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   13c8c:	4770      	bx	lr

00013c8e <full_int_lock>:
	__asm__ volatile(
   13c8e:	f04f 0320 	mov.w	r3, #32
   13c92:	f3ef 8011 	mrs	r0, BASEPRI
   13c96:	f383 8812 	msr	BASEPRI_MAX, r3
   13c9a:	f3bf 8f6f 	isb	sy
}
   13c9e:	4770      	bx	lr

00013ca0 <full_int_unlock>:
	__asm__ volatile(
   13ca0:	f380 8811 	msr	BASEPRI, r0
   13ca4:	f3bf 8f6f 	isb	sy
}
   13ca8:	4770      	bx	lr

00013caa <compare_set>:
{
   13caa:	b5f0      	push	{r4, r5, r6, r7, lr}
   13cac:	b083      	sub	sp, #12
   13cae:	4604      	mov	r4, r0
   13cb0:	4617      	mov	r7, r2
   13cb2:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   13cb4:	f7f7 fe58 	bl	b968 <compare_int_lock>
   13cb8:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   13cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13cbc:	9301      	str	r3, [sp, #4]
   13cbe:	9b08      	ldr	r3, [sp, #32]
   13cc0:	9300      	str	r3, [sp, #0]
   13cc2:	463a      	mov	r2, r7
   13cc4:	462b      	mov	r3, r5
   13cc6:	4620      	mov	r0, r4
   13cc8:	f7f7 ff1c 	bl	bb04 <compare_set_nolocks>
   13ccc:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   13cce:	4631      	mov	r1, r6
   13cd0:	4620      	mov	r0, r4
   13cd2:	f7f7 fe9f 	bl	ba14 <compare_int_unlock>
}
   13cd6:	4628      	mov	r0, r5
   13cd8:	b003      	add	sp, #12
   13cda:	bdf0      	pop	{r4, r5, r6, r7, pc}

00013cdc <sys_clock_cycle_get_32>:
{
   13cdc:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   13cde:	f7f7 fef1 	bl	bac4 <z_nrf_rtc_timer_read>
}
   13ce2:	bd08      	pop	{r3, pc}

00013ce4 <nrf52_errata_12>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   13ce4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13ce8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   13cec:	f1b3 3fff 	cmp.w	r3, #4294967295
   13cf0:	d003      	beq.n	13cfa <nrf52_errata_12+0x16>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   13cf2:	2b06      	cmp	r3, #6
   13cf4:	d006      	beq.n	13d04 <nrf52_errata_12+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   13cf6:	2000      	movs	r0, #0
   13cf8:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   13cfa:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   13cfe:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   13d02:	e7f6      	b.n	13cf2 <nrf52_errata_12+0xe>
                        return true;
   13d04:	2001      	movs	r0, #1
    #endif
}
   13d06:	4770      	bx	lr

00013d08 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   13d08:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   13d0c:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   13d10:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   13d14:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   13d18:	2a06      	cmp	r2, #6
   13d1a:	d001      	beq.n	13d20 <nrf52_errata_16+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   13d1c:	2000      	movs	r0, #0
   13d1e:	4770      	bx	lr
                switch(var2)
   13d20:	3b03      	subs	r3, #3
   13d22:	2b00      	cmp	r3, #0
   13d24:	d804      	bhi.n	13d30 <nrf52_errata_16+0x28>
   13d26:	e8df f003 	tbb	[pc, r3]
   13d2a:	01          	.byte	0x01
   13d2b:	00          	.byte	0x00
   13d2c:	2001      	movs	r0, #1
   13d2e:	4770      	bx	lr
                        return false;
   13d30:	2000      	movs	r0, #0
    #endif
}
   13d32:	4770      	bx	lr

00013d34 <nrf52_errata_31>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   13d34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13d38:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   13d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
   13d40:	d003      	beq.n	13d4a <nrf52_errata_31+0x16>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   13d42:	2b06      	cmp	r3, #6
   13d44:	d006      	beq.n	13d54 <nrf52_errata_31+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   13d46:	2000      	movs	r0, #0
   13d48:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   13d4a:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   13d4e:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   13d52:	e7f6      	b.n	13d42 <nrf52_errata_31+0xe>
                        return true;
   13d54:	2001      	movs	r0, #1
    #endif
}
   13d56:	4770      	bx	lr

00013d58 <nrf52_errata_32>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   13d58:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   13d5c:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   13d60:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   13d64:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   13d68:	2a06      	cmp	r2, #6
   13d6a:	d001      	beq.n	13d70 <nrf52_errata_32+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   13d6c:	2000      	movs	r0, #0
   13d6e:	4770      	bx	lr
                switch(var2)
   13d70:	3b03      	subs	r3, #3
   13d72:	2b00      	cmp	r3, #0
   13d74:	d804      	bhi.n	13d80 <nrf52_errata_32+0x28>
   13d76:	e8df f003 	tbb	[pc, r3]
   13d7a:	01          	.byte	0x01
   13d7b:	00          	.byte	0x00
   13d7c:	2001      	movs	r0, #1
   13d7e:	4770      	bx	lr
                        return false;
   13d80:	2000      	movs	r0, #0
    #endif
}
   13d82:	4770      	bx	lr

00013d84 <nrf52_errata_36>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   13d84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13d88:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   13d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
   13d90:	d003      	beq.n	13d9a <nrf52_errata_36+0x16>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   13d92:	2b06      	cmp	r3, #6
   13d94:	d006      	beq.n	13da4 <nrf52_errata_36+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   13d96:	2000      	movs	r0, #0
   13d98:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   13d9a:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   13d9e:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   13da2:	e7f6      	b.n	13d92 <nrf52_errata_36+0xe>
                        return true;
   13da4:	2001      	movs	r0, #1
    #endif
}
   13da6:	4770      	bx	lr

00013da8 <nrf52_errata_37>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   13da8:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   13dac:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   13db0:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   13db4:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   13db8:	2a06      	cmp	r2, #6
   13dba:	d001      	beq.n	13dc0 <nrf52_errata_37+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   13dbc:	2000      	movs	r0, #0
   13dbe:	4770      	bx	lr
                switch(var2)
   13dc0:	3b03      	subs	r3, #3
   13dc2:	2b00      	cmp	r3, #0
   13dc4:	d804      	bhi.n	13dd0 <nrf52_errata_37+0x28>
   13dc6:	e8df f003 	tbb	[pc, r3]
   13dca:	01          	.byte	0x01
   13dcb:	00          	.byte	0x00
   13dcc:	2001      	movs	r0, #1
   13dce:	4770      	bx	lr
                        return false;
   13dd0:	2000      	movs	r0, #0
    #endif
}
   13dd2:	4770      	bx	lr

00013dd4 <nrf52_errata_57>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   13dd4:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   13dd8:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   13ddc:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   13de0:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   13de4:	2a06      	cmp	r2, #6
   13de6:	d001      	beq.n	13dec <nrf52_errata_57+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   13de8:	2000      	movs	r0, #0
   13dea:	4770      	bx	lr
                switch(var2)
   13dec:	3b03      	subs	r3, #3
   13dee:	2b00      	cmp	r3, #0
   13df0:	d804      	bhi.n	13dfc <nrf52_errata_57+0x28>
   13df2:	e8df f003 	tbb	[pc, r3]
   13df6:	01          	.byte	0x01
   13df7:	00          	.byte	0x00
   13df8:	2001      	movs	r0, #1
   13dfa:	4770      	bx	lr
                        return false;
   13dfc:	2000      	movs	r0, #0
    #endif
}
   13dfe:	4770      	bx	lr

00013e00 <nrf52_errata_66>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   13e00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13e04:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   13e08:	f1b3 3fff 	cmp.w	r3, #4294967295
   13e0c:	d007      	beq.n	13e1e <nrf52_errata_66+0x1e>
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   13e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   13e12:	f8d2 2134 	ldr.w	r2, [r2, #308]	; 0x134
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   13e16:	2b06      	cmp	r3, #6
   13e18:	d00a      	beq.n	13e30 <nrf52_errata_66+0x30>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   13e1a:	2000      	movs	r0, #0
   13e1c:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   13e1e:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
   13e22:	f892 3fe0 	ldrb.w	r3, [r2, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   13e26:	f8d2 2fe8 	ldr.w	r2, [r2, #4072]	; 0xfe8
   13e2a:	f3c2 1203 	ubfx	r2, r2, #4, #4
   13e2e:	e7f2      	b.n	13e16 <nrf52_errata_66+0x16>
                switch(var2)
   13e30:	3a03      	subs	r2, #3
   13e32:	2a01      	cmp	r2, #1
   13e34:	d804      	bhi.n	13e40 <nrf52_errata_66+0x40>
   13e36:	e8df f002 	tbb	[pc, r2]
   13e3a:	0101      	.short	0x0101
   13e3c:	2000      	movs	r0, #0
   13e3e:	4770      	bx	lr
                        return true;
   13e40:	2001      	movs	r0, #1
    #endif
}
   13e42:	4770      	bx	lr

00013e44 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   13e44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13e48:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   13e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
   13e50:	d003      	beq.n	13e5a <nrf52_errata_108+0x16>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   13e52:	2b06      	cmp	r3, #6
   13e54:	d006      	beq.n	13e64 <nrf52_errata_108+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   13e56:	2000      	movs	r0, #0
   13e58:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   13e5a:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   13e5e:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   13e62:	e7f6      	b.n	13e52 <nrf52_errata_108+0xe>
                        return true;
   13e64:	2001      	movs	r0, #1
    #endif
}
   13e66:	4770      	bx	lr

00013e68 <nrf52_errata_136>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   13e68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13e6c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   13e70:	f1b3 3fff 	cmp.w	r3, #4294967295
   13e74:	d003      	beq.n	13e7e <nrf52_errata_136+0x16>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   13e76:	2b06      	cmp	r3, #6
   13e78:	d006      	beq.n	13e88 <nrf52_errata_136+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   13e7a:	2000      	movs	r0, #0
   13e7c:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   13e7e:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   13e82:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   13e86:	e7f6      	b.n	13e76 <nrf52_errata_136+0xe>
                        return true;
   13e88:	2001      	movs	r0, #1
    #endif
}
   13e8a:	4770      	bx	lr

00013e8c <nrf52_errata_182>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   13e8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13e90:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   13e94:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   13e98:	2a06      	cmp	r2, #6
   13e9a:	d001      	beq.n	13ea0 <nrf52_errata_182+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   13e9c:	2000      	movs	r0, #0
   13e9e:	4770      	bx	lr
                switch(var2)
   13ea0:	2b05      	cmp	r3, #5
   13ea2:	d803      	bhi.n	13eac <nrf52_errata_182+0x20>
   13ea4:	2b03      	cmp	r3, #3
   13ea6:	d303      	bcc.n	13eb0 <nrf52_errata_182+0x24>
   13ea8:	2000      	movs	r0, #0
   13eaa:	4770      	bx	lr
                        return true;
   13eac:	2001      	movs	r0, #1
   13eae:	4770      	bx	lr
                        return true;
   13eb0:	2001      	movs	r0, #1
    #endif
}
   13eb2:	4770      	bx	lr

00013eb4 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   13eb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13eb8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   13ebc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   13ec0:	2a06      	cmp	r2, #6
   13ec2:	d001      	beq.n	13ec8 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   13ec4:	2000      	movs	r0, #0
   13ec6:	4770      	bx	lr
                switch(var2)
   13ec8:	2b06      	cmp	r3, #6
   13eca:	d803      	bhi.n	13ed4 <nrf52_configuration_249+0x20>
   13ecc:	2b03      	cmp	r3, #3
   13ece:	d303      	bcc.n	13ed8 <nrf52_configuration_249+0x24>
   13ed0:	2000      	movs	r0, #0
   13ed2:	4770      	bx	lr
                        return true;
   13ed4:	2001      	movs	r0, #1
   13ed6:	4770      	bx	lr
                        return true;
   13ed8:	2001      	movs	r0, #1
    #endif
}
   13eda:	4770      	bx	lr

00013edc <nrf52_handle_approtect>:
        Otherwise, the fw branch state is loaded from UICR, emulating the legacy APPROTECT behavior.

         The same mechanism is implemented for SECURE APPROTECT, with the macros
         ENABLE_SECURE_APPROTECT and ENABLE_SECURE_APPROTECT_USER_HANDLING. */
static inline void nrf52_handle_approtect(void)
{
   13edc:	b508      	push	{r3, lr}
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   13ede:	f7ff ffe9 	bl	13eb4 <nrf52_configuration_249>
   13ee2:	b138      	cbz	r0, 13ef4 <nrf52_handle_approtect+0x18>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   13ee4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   13ee8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   13eec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13ef0:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            }
        #endif
    #endif
}
   13ef4:	bd08      	pop	{r3, pc}

00013ef6 <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
   13ef6:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   13ef8:	4780      	blx	r0
}
   13efa:	bd08      	pop	{r3, pc}

00013efc <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   13efc:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   13efe:	f000 fe6a 	bl	14bd6 <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
   13f02:	bd08      	pop	{r3, pc}

00013f04 <nrf_clock_is_running>:
    switch (domain)
   13f04:	b119      	cbz	r1, 13f0e <nrf_clock_is_running+0xa>
   13f06:	2901      	cmp	r1, #1
   13f08:	d00e      	beq.n	13f28 <nrf_clock_is_running+0x24>
   13f0a:	2000      	movs	r0, #0
   13f0c:	4770      	bx	lr
            if (p_clk_src != NULL)
   13f0e:	b122      	cbz	r2, 13f1a <nrf_clock_is_running+0x16>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   13f10:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   13f14:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   13f18:	6013      	str	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   13f1a:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   13f1e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   13f22:	d10e      	bne.n	13f42 <nrf_clock_is_running+0x3e>
    return false;
   13f24:	2000      	movs	r0, #0
   13f26:	4770      	bx	lr
            if (p_clk_src != NULL)
   13f28:	b122      	cbz	r2, 13f34 <nrf_clock_is_running+0x30>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   13f2a:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   13f2e:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   13f32:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   13f34:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   13f38:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   13f3c:	d103      	bne.n	13f46 <nrf_clock_is_running+0x42>
    return false;
   13f3e:	2000      	movs	r0, #0
   13f40:	4770      	bx	lr
                return true;
   13f42:	2001      	movs	r0, #1
   13f44:	4770      	bx	lr
                return true;
   13f46:	2001      	movs	r0, #1
}
   13f48:	4770      	bx	lr

00013f4a <clock_initial_lfclksrc_get>:
}
   13f4a:	2000      	movs	r0, #0
   13f4c:	4770      	bx	lr

00013f4e <nrfx_power_clock_irq_init>:
extern "C" {
#endif


__STATIC_INLINE void nrfx_power_clock_irq_init(void)
{
   13f4e:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   13f50:	2000      	movs	r0, #0
   13f52:	f7f3 ff9d 	bl	7e90 <arch_irq_is_enabled>
   13f56:	b100      	cbz	r0, 13f5a <nrfx_power_clock_irq_init+0xc>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    }
}
   13f58:	bd08      	pop	{r3, pc}
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   13f5a:	f7fe fce3 	bl	12924 <arch_irq_enable>
}
   13f5e:	e7fb      	b.n	13f58 <nrfx_power_clock_irq_init+0xa>

00013f60 <clock_lfclksrc_tweak>:
{
   13f60:	b538      	push	{r3, r4, r5, lr}
   13f62:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
   13f64:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   13f66:	2b01      	cmp	r3, #1
   13f68:	d002      	beq.n	13f70 <clock_lfclksrc_tweak+0x10>
   13f6a:	b933      	cbnz	r3, 13f7a <clock_lfclksrc_tweak+0x1a>
   13f6c:	2301      	movs	r3, #1
   13f6e:	e000      	b.n	13f72 <clock_lfclksrc_tweak+0x12>
   13f70:	2301      	movs	r3, #1
    if (!is_correct_clk)
   13f72:	461d      	mov	r5, r3
   13f74:	b11b      	cbz	r3, 13f7e <clock_lfclksrc_tweak+0x1e>
}
   13f76:	4628      	mov	r0, r5
   13f78:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   13f7a:	2300      	movs	r3, #0
   13f7c:	e7f9      	b.n	13f72 <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   13f7e:	2000      	movs	r0, #0
   13f80:	f7f8 f8c0 	bl	c104 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   13f84:	f7ff ffe1 	bl	13f4a <clock_initial_lfclksrc_get>
   13f88:	6020      	str	r0, [r4, #0]
   13f8a:	e7f4      	b.n	13f76 <clock_lfclksrc_tweak+0x16>

00013f8c <nrfx_clock_enable>:
{
   13f8c:	b508      	push	{r3, lr}
    nrfx_power_clock_irq_init();
   13f8e:	f7ff ffde 	bl	13f4e <nrfx_power_clock_irq_init>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
   13f92:	f7ff ffda 	bl	13f4a <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
   13f96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13f9a:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
}
   13f9e:	bd08      	pop	{r3, pc}

00013fa0 <nrfx_clock_start>:
    switch (domain)
   13fa0:	b110      	cbz	r0, 13fa8 <nrfx_clock_start+0x8>
   13fa2:	2801      	cmp	r0, #1
   13fa4:	d041      	beq.n	1402a <nrfx_clock_start+0x8a>
   13fa6:	4770      	bx	lr
{
   13fa8:	b510      	push	{r4, lr}
   13faa:	b082      	sub	sp, #8
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   13fac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   13fb0:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   13fb4:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   13fb8:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   13fba:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   13fbe:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   13fc2:	d11c      	bne.n	13ffe <nrfx_clock_start+0x5e>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   13fc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13fc8:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   13fcc:	f013 0f01 	tst.w	r3, #1
   13fd0:	d119      	bne.n	14006 <nrfx_clock_start+0x66>
                    lfclksrc = clock_initial_lfclksrc_get();
   13fd2:	f7ff ffba 	bl	13f4a <clock_initial_lfclksrc_get>
   13fd6:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
   13fd8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   13fdc:	9b01      	ldr	r3, [sp, #4]
   13fde:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13fe2:	2300      	movs	r3, #0
   13fe4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   13fe8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->INTENSET = mask;
   13fec:	2302      	movs	r3, #2
   13fee:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrfx_clock_anomaly_132();
   13ff2:	f7f8 f867 	bl	c0c4 <nrfx_clock_anomaly_132>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13ff6:	2301      	movs	r3, #1
   13ff8:	60a3      	str	r3, [r4, #8]
}
   13ffa:	b002      	add	sp, #8
   13ffc:	bd10      	pop	{r4, pc}
                    (void)clock_lfclksrc_tweak(&lfclksrc);
   13ffe:	a801      	add	r0, sp, #4
   14000:	f7ff ffae 	bl	13f60 <clock_lfclksrc_tweak>
   14004:	e7e8      	b.n	13fd8 <nrfx_clock_start+0x38>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   14006:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1400a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1400e:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
   14012:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
   14014:	a801      	add	r0, sp, #4
   14016:	f7ff ffa3 	bl	13f60 <clock_lfclksrc_tweak>
   1401a:	2800      	cmp	r0, #0
   1401c:	d0dc      	beq.n	13fd8 <nrfx_clock_start+0x38>
    p_reg->INTENSET = mask;
   1401e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14022:	2202      	movs	r2, #2
   14024:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
   14028:	e7e7      	b.n	13ffa <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1402a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1402e:	2200      	movs	r2, #0
   14030:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   14034:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   14038:	2201      	movs	r2, #1
   1403a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1403e:	601a      	str	r2, [r3, #0]
   14040:	4770      	bx	lr

00014042 <nrfx_clock_stop>:
{
   14042:	b508      	push	{r3, lr}
    clock_stop(domain);
   14044:	f7f8 f85e 	bl	c104 <clock_stop>
}
   14048:	bd08      	pop	{r3, pc}

0001404a <nrf_gpiote_event_configure>:
{
   1404a:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1404c:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   14050:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   14054:	f424 3447 	bic.w	r4, r4, #203776	; 0x31c00
   14058:	f424 7440 	bic.w	r4, r4, #768	; 0x300
   1405c:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14060:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   14064:	0212      	lsls	r2, r2, #8
   14066:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   1406a:	041b      	lsls	r3, r3, #16
   1406c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14070:	431a      	orrs	r2, r3
   14072:	4314      	orrs	r4, r2
   14074:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   14078:	bc10      	pop	{r4}
   1407a:	4770      	bx	lr

0001407c <nrf_gpiote_task_configure>:
{
   1407c:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1407e:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   14082:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   14086:	f424 1498 	bic.w	r4, r4, #1245184	; 0x130000
   1408a:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
   1408e:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14092:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   14096:	0212      	lsls	r2, r2, #8
   14098:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1409c:	041b      	lsls	r3, r3, #16
   1409e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   140a2:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   140a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   140a8:	051b      	lsls	r3, r3, #20
   140aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   140ae:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   140b0:	4314      	orrs	r4, r2
   140b2:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   140b6:	bc10      	pop	{r4}
   140b8:	4770      	bx	lr

000140ba <nrf_gpio_reconfigure>:
{
   140ba:	b4f0      	push	{r4, r5, r6, r7}
   140bc:	461c      	mov	r4, r3
   140be:	9e04      	ldr	r6, [sp, #16]
   140c0:	9d05      	ldr	r5, [sp, #20]
    *p_pin = pin_number & 0x1F;
   140c2:	f000 001f 	and.w	r0, r0, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   140c6:	f500 77e0 	add.w	r7, r0, #448	; 0x1c0
   140ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   140ce:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   140d2:	460b      	mov	r3, r1
   140d4:	b389      	cbz	r1, 1413a <nrf_gpio_reconfigure+0x80>
   140d6:	2101      	movs	r1, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   140d8:	b38a      	cbz	r2, 1413e <nrf_gpio_reconfigure+0x84>
   140da:	f04f 0c02 	mov.w	ip, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   140de:	ea41 010c 	orr.w	r1, r1, ip
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   140e2:	b37c      	cbz	r4, 14144 <nrf_gpio_reconfigure+0x8a>
   140e4:	f04f 0c0c 	mov.w	ip, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   140e8:	ea41 010c 	orr.w	r1, r1, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   140ec:	b36e      	cbz	r6, 1414a <nrf_gpio_reconfigure+0x90>
   140ee:	f44f 6ce0 	mov.w	ip, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   140f2:	ea41 010c 	orr.w	r1, r1, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   140f6:	b35d      	cbz	r5, 14150 <nrf_gpio_reconfigure+0x96>
   140f8:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   140fc:	ea41 010c 	orr.w	r1, r1, ip
    cnf &= ~to_update;
   14100:	ea27 0101 	bic.w	r1, r7, r1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14104:	b33b      	cbz	r3, 14156 <nrf_gpio_reconfigure+0x9c>
   14106:	781b      	ldrb	r3, [r3, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   14108:	b33a      	cbz	r2, 1415a <nrf_gpio_reconfigure+0xa0>
   1410a:	7812      	ldrb	r2, [r2, #0]
   1410c:	0052      	lsls	r2, r2, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1410e:	4313      	orrs	r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   14110:	b32c      	cbz	r4, 1415e <nrf_gpio_reconfigure+0xa4>
   14112:	7822      	ldrb	r2, [r4, #0]
   14114:	0092      	lsls	r2, r2, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   14116:	4313      	orrs	r3, r2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   14118:	b31e      	cbz	r6, 14162 <nrf_gpio_reconfigure+0xa8>
   1411a:	7832      	ldrb	r2, [r6, #0]
   1411c:	0212      	lsls	r2, r2, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1411e:	4313      	orrs	r3, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   14120:	b30d      	cbz	r5, 14166 <nrf_gpio_reconfigure+0xac>
   14122:	782a      	ldrb	r2, [r5, #0]
   14124:	0412      	lsls	r2, r2, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   14126:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14128:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   1412a:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   1412e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   14132:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
   14136:	bcf0      	pop	{r4, r5, r6, r7}
   14138:	4770      	bx	lr
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1413a:	2100      	movs	r1, #0
   1413c:	e7cc      	b.n	140d8 <nrf_gpio_reconfigure+0x1e>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1413e:	f04f 0c00 	mov.w	ip, #0
   14142:	e7cc      	b.n	140de <nrf_gpio_reconfigure+0x24>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   14144:	f04f 0c00 	mov.w	ip, #0
   14148:	e7ce      	b.n	140e8 <nrf_gpio_reconfigure+0x2e>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1414a:	f04f 0c00 	mov.w	ip, #0
   1414e:	e7d0      	b.n	140f2 <nrf_gpio_reconfigure+0x38>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   14150:	f04f 0c00 	mov.w	ip, #0
   14154:	e7d2      	b.n	140fc <nrf_gpio_reconfigure+0x42>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14156:	2300      	movs	r3, #0
   14158:	e7d6      	b.n	14108 <nrf_gpio_reconfigure+0x4e>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1415a:	2200      	movs	r2, #0
   1415c:	e7d7      	b.n	1410e <nrf_gpio_reconfigure+0x54>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1415e:	2200      	movs	r2, #0
   14160:	e7d9      	b.n	14116 <nrf_gpio_reconfigure+0x5c>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   14162:	2200      	movs	r2, #0
   14164:	e7db      	b.n	1411e <nrf_gpio_reconfigure+0x64>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   14166:	2200      	movs	r2, #0
   14168:	e7dd      	b.n	14126 <nrf_gpio_reconfigure+0x6c>

0001416a <pin_is_task_output>:
{
   1416a:	b510      	push	{r4, lr}
   1416c:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1416e:	f7f8 f881 	bl	c274 <pin_is_output>
   14172:	b128      	cbz	r0, 14180 <pin_is_task_output+0x16>
   14174:	4620      	mov	r0, r4
   14176:	f7f8 f867 	bl	c248 <pin_in_use_by_te>
   1417a:	b118      	cbz	r0, 14184 <pin_is_task_output+0x1a>
   1417c:	2001      	movs	r0, #1
   1417e:	e000      	b.n	14182 <pin_is_task_output+0x18>
   14180:	2000      	movs	r0, #0
}
   14182:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   14184:	2000      	movs	r0, #0
   14186:	e7fc      	b.n	14182 <pin_is_task_output+0x18>

00014188 <pin_is_input>:
{
   14188:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   1418a:	f7f8 f873 	bl	c274 <pin_is_output>
   1418e:	f080 0001 	eor.w	r0, r0, #1
}
   14192:	b2c0      	uxtb	r0, r0
   14194:	bd08      	pop	{r3, pc}

00014196 <gpiote_polarity_to_trigger>:
}
   14196:	4770      	bx	lr

00014198 <gpiote_trigger_to_polarity>:
}
   14198:	4770      	bx	lr

0001419a <is_level>:
}
   1419a:	2803      	cmp	r0, #3
   1419c:	bf94      	ite	ls
   1419e:	2000      	movls	r0, #0
   141a0:	2001      	movhi	r0, #1
   141a2:	4770      	bx	lr

000141a4 <next_sense_cond_call_handler>:
{
   141a4:	b570      	push	{r4, r5, r6, lr}
   141a6:	4604      	mov	r4, r0
   141a8:	460d      	mov	r5, r1
   141aa:	4616      	mov	r6, r2
    if (is_level(trigger))
   141ac:	4608      	mov	r0, r1
   141ae:	f7ff fff4 	bl	1419a <is_level>
   141b2:	b9b8      	cbnz	r0, 141e4 <next_sense_cond_call_handler+0x40>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   141b4:	2e02      	cmp	r6, #2
   141b6:	d038      	beq.n	1422a <next_sense_cond_call_handler+0x86>
   141b8:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
   141ba:	f004 031f 	and.w	r3, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   141be:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   141c2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   141c6:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   141ca:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   141ce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   141d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   141d6:	2d03      	cmp	r5, #3
   141d8:	d02b      	beq.n	14232 <next_sense_cond_call_handler+0x8e>
   141da:	2e02      	cmp	r6, #2
   141dc:	d027      	beq.n	1422e <next_sense_cond_call_handler+0x8a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   141de:	2e03      	cmp	r6, #3
   141e0:	d02c      	beq.n	1423c <next_sense_cond_call_handler+0x98>
}
   141e2:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   141e4:	4629      	mov	r1, r5
   141e6:	4620      	mov	r0, r4
   141e8:	f7f8 f8b6 	bl	c358 <call_handler>
    *p_pin = pin_number & 0x1F;
   141ec:	f004 041f 	and.w	r4, r4, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   141f0:	f504 72e0 	add.w	r2, r4, #448	; 0x1c0
   141f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   141f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   141fc:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   14200:	429e      	cmp	r6, r3
   14202:	d1ee      	bne.n	141e2 <next_sense_cond_call_handler+0x3e>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14204:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   14208:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   1420c:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
   14210:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   14214:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14218:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
   1421c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14220:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   14224:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
   14228:	e7db      	b.n	141e2 <next_sense_cond_call_handler+0x3e>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1422a:	2003      	movs	r0, #3
   1422c:	e7c5      	b.n	141ba <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1422e:	2d01      	cmp	r5, #1
   14230:	d1d5      	bne.n	141de <next_sense_cond_call_handler+0x3a>
            call_handler(pin, trigger);
   14232:	4629      	mov	r1, r5
   14234:	4620      	mov	r0, r4
   14236:	f7f8 f88f 	bl	c358 <call_handler>
}
   1423a:	e7d2      	b.n	141e2 <next_sense_cond_call_handler+0x3e>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1423c:	2d02      	cmp	r5, #2
   1423e:	d1d0      	bne.n	141e2 <next_sense_cond_call_handler+0x3e>
   14240:	e7f7      	b.n	14232 <next_sense_cond_call_handler+0x8e>

00014242 <latch_pending_read_and_check>:
    for (i = start_port; i < (start_port + length); i++)
   14242:	4684      	mov	ip, r0
   14244:	2300      	movs	r3, #0
   14246:	e008      	b.n	1425a <latch_pending_read_and_check+0x18>
        *p_masks = gpio_regs[i]->LATCH;
   14248:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1424c:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   14250:	f84c 1b04 	str.w	r1, [ip], #4
        gpio_regs[i]->LATCH = *p_masks;
   14254:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   14258:	3301      	adds	r3, #1
   1425a:	2b00      	cmp	r3, #0
   1425c:	d0f4      	beq.n	14248 <latch_pending_read_and_check+0x6>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1425e:	2300      	movs	r3, #0
   14260:	b10b      	cbz	r3, 14266 <latch_pending_read_and_check+0x24>
    return false;
   14262:	2000      	movs	r0, #0
   14264:	4770      	bx	lr
        if (latch[port_idx])
   14266:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
   1426a:	b90a      	cbnz	r2, 14270 <latch_pending_read_and_check+0x2e>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1426c:	3301      	adds	r3, #1
   1426e:	e7f7      	b.n	14260 <latch_pending_read_and_check+0x1e>
            return true;
   14270:	2001      	movs	r0, #1
}
   14272:	4770      	bx	lr

00014274 <flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   14274:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14278:	6918      	ldr	r0, [r3, #16]
}
   1427a:	4770      	bx	lr

0001427c <flash_page_count_get>:
    return p_reg->CODESIZE;
   1427c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14280:	6958      	ldr	r0, [r3, #20]
}
   14282:	4770      	bx	lr

00014284 <flash_total_size_get>:
{
   14284:	b510      	push	{r4, lr}
    return flash_page_size_get() * flash_page_count_get();
   14286:	f7ff fff5 	bl	14274 <flash_page_size_get>
   1428a:	4604      	mov	r4, r0
   1428c:	f7ff fff6 	bl	1427c <flash_page_count_get>
}
   14290:	fb04 f000 	mul.w	r0, r4, r0
   14294:	bd10      	pop	{r4, pc}

00014296 <is_page_aligned_check>:
{
   14296:	b510      	push	{r4, lr}
   14298:	4604      	mov	r4, r0
    return !(addr % flash_page_size_get());
   1429a:	f7ff ffeb 	bl	14274 <flash_page_size_get>
   1429e:	fbb4 f3f0 	udiv	r3, r4, r0
   142a2:	fb00 4013 	mls	r0, r0, r3, r4
}
   142a6:	fab0 f080 	clz	r0, r0
   142aa:	0940      	lsrs	r0, r0, #5
   142ac:	bd10      	pop	{r4, pc}

000142ae <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   142ae:	b538      	push	{r3, r4, r5, lr}
   142b0:	4604      	mov	r4, r0
   142b2:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();
   142b4:	f7f8 fb6a 	bl	c98c <nvmc_write_mode_set>

    nvmc_word_write(addr, value);
   142b8:	4629      	mov	r1, r5
   142ba:	4620      	mov	r0, r4
   142bc:	f7f8 fb76 	bl	c9ac <nvmc_word_write>

    nvmc_readonly_mode_set();
   142c0:	f7f8 fb5c 	bl	c97c <nvmc_readonly_mode_set>
}
   142c4:	bd38      	pop	{r3, r4, r5, pc}

000142c6 <nrfx_nvmc_flash_size_get>:
    return (nrfx_is_word_aligned((void const *)addr) ? (uint16_t)(val32)
                                                     : (uint16_t)(val32 >> 16));
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
   142c6:	b508      	push	{r3, lr}
    return flash_total_size_get();
   142c8:	f7ff ffdc 	bl	14284 <flash_total_size_get>
}
   142cc:	bd08      	pop	{r3, pc}

000142ce <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
   142ce:	b508      	push	{r3, lr}
    return flash_page_size_get();
   142d0:	f7ff ffd0 	bl	14274 <flash_page_size_get>
}
   142d4:	bd08      	pop	{r3, pc}

000142d6 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
   142d6:	b508      	push	{r3, lr}
    return flash_page_count_get();
   142d8:	f7ff ffd0 	bl	1427c <flash_page_count_get>
}
   142dc:	bd08      	pop	{r3, pc}

000142de <nrf_spi_configure>:
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   142de:	3a00      	subs	r2, #0
   142e0:	bf18      	it	ne
   142e2:	2201      	movne	r2, #1
    switch (spi_mode)
   142e4:	2902      	cmp	r1, #2
   142e6:	d009      	beq.n	142fc <nrf_spi_configure+0x1e>
   142e8:	2903      	cmp	r1, #3
   142ea:	d00a      	beq.n	14302 <nrf_spi_configure+0x24>
   142ec:	2901      	cmp	r1, #1
   142ee:	d002      	beq.n	142f6 <nrf_spi_configure+0x18>
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   142f0:	f8c0 2554 	str.w	r2, [r0, #1364]	; 0x554
}
   142f4:	4770      	bx	lr
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   142f6:	f042 0202 	orr.w	r2, r2, #2
        break;
   142fa:	e7f9      	b.n	142f0 <nrf_spi_configure+0x12>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   142fc:	f042 0204 	orr.w	r2, r2, #4
        break;
   14300:	e7f6      	b.n	142f0 <nrf_spi_configure+0x12>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   14302:	f042 0206 	orr.w	r2, r2, #6
        break;
   14306:	e7f3      	b.n	142f0 <nrf_spi_configure+0x12>

00014308 <configure_pins>:
    if (!p_config->skip_gpio_cfg)
   14308:	7bcb      	ldrb	r3, [r1, #15]
   1430a:	2b00      	cmp	r3, #0
   1430c:	d16d      	bne.n	143ea <configure_pins+0xe2>
{
   1430e:	b410      	push	{r4}
        nrf_gpio_pin_write(p_config->sck_pin,
   14310:	780b      	ldrb	r3, [r1, #0]
                           p_config->mode <= NRF_SPI_MODE_1 ? 0 : 1);
   14312:	7b0a      	ldrb	r2, [r1, #12]
    if (value == 0)
   14314:	2a01      	cmp	r2, #1
   14316:	d858      	bhi.n	143ca <configure_pins+0xc2>
    *p_pin = pin_number & 0x1F;
   14318:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1431c:	2201      	movs	r2, #1
   1431e:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTCLR = clr_mask;
   14322:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   14326:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
        nrf_gpio_cfg(p_config->sck_pin,
   1432a:	780b      	ldrb	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
   1432c:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   14330:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   14334:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   14338:	2401      	movs	r4, #1
   1433a:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   1433e:	784b      	ldrb	r3, [r1, #1]
   14340:	2bff      	cmp	r3, #255	; 0xff
   14342:	d00f      	beq.n	14364 <configure_pins+0x5c>
    *p_pin = pin_number & 0x1F;
   14344:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   14348:	fa04 f303 	lsl.w	r3, r4, r3
    p_reg->OUTCLR = clr_mask;
   1434c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   14350:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
            nrf_gpio_cfg_output(p_config->mosi_pin);
   14354:	784b      	ldrb	r3, [r1, #1]
    *p_pin = pin_number & 0x1F;
   14356:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   1435a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1435e:	2403      	movs	r4, #3
   14360:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   14364:	788b      	ldrb	r3, [r1, #2]
   14366:	2bff      	cmp	r3, #255	; 0xff
   14368:	d009      	beq.n	1437e <configure_pins+0x76>
            nrf_gpio_cfg_input(p_config->miso_pin, p_config->miso_pull);
   1436a:	7b8a      	ldrb	r2, [r1, #14]
    *p_pin = pin_number & 0x1F;
   1436c:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   14370:	0092      	lsls	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
   14372:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   14376:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1437a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1437e:	78cb      	ldrb	r3, [r1, #3]
   14380:	2bff      	cmp	r3, #255	; 0xff
   14382:	d010      	beq.n	143a6 <configure_pins+0x9e>
    *p_pin = pin_number & 0x1F;
   14384:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14388:	2201      	movs	r2, #1
   1438a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
   1438e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   14392:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            nrf_gpio_cfg_output(p_config->ss_pin);
   14396:	78cb      	ldrb	r3, [r1, #3]
    *p_pin = pin_number & 0x1F;
   14398:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   1439c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   143a0:	2403      	movs	r4, #3
   143a2:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   143a6:	7c0b      	ldrb	r3, [r1, #16]
   143a8:	b96b      	cbnz	r3, 143c6 <configure_pins+0xbe>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   143aa:	784b      	ldrb	r3, [r1, #1]
                            : NRF_SPI_PIN_NOT_CONNECTED;
   143ac:	2bff      	cmp	r3, #255	; 0xff
   143ae:	d016      	beq.n	143de <configure_pins+0xd6>
   143b0:	461a      	mov	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   143b2:	788b      	ldrb	r3, [r1, #2]
                            : NRF_SPI_PIN_NOT_CONNECTED;
   143b4:	2bff      	cmp	r3, #255	; 0xff
   143b6:	d015      	beq.n	143e4 <configure_pins+0xdc>
        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
   143b8:	7809      	ldrb	r1, [r1, #0]
    p_reg->PSELSCK  = sck_pin;
   143ba:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
    p_reg->PSELMOSI = mosi_pin;
   143be:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    p_reg->PSELMISO = miso_pin;
   143c2:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
}
   143c6:	bc10      	pop	{r4}
   143c8:	4770      	bx	lr
    *p_pin = pin_number & 0x1F;
   143ca:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   143ce:	2201      	movs	r2, #1
   143d0:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
   143d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   143d8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
   143dc:	e7a5      	b.n	1432a <configure_pins+0x22>
                            : NRF_SPI_PIN_NOT_CONNECTED;
   143de:	f04f 32ff 	mov.w	r2, #4294967295
   143e2:	e7e6      	b.n	143b2 <configure_pins+0xaa>
                            : NRF_SPI_PIN_NOT_CONNECTED;
   143e4:	f04f 33ff 	mov.w	r3, #4294967295
   143e8:	e7e6      	b.n	143b8 <configure_pins+0xb0>
    if (!p_config->skip_psel_cfg)
   143ea:	7c0b      	ldrb	r3, [r1, #16]
   143ec:	b9a3      	cbnz	r3, 14418 <configure_pins+0x110>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   143ee:	784b      	ldrb	r3, [r1, #1]
                            : NRF_SPI_PIN_NOT_CONNECTED;
   143f0:	2bff      	cmp	r3, #255	; 0xff
   143f2:	d00b      	beq.n	1440c <configure_pins+0x104>
   143f4:	461a      	mov	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   143f6:	788b      	ldrb	r3, [r1, #2]
                            : NRF_SPI_PIN_NOT_CONNECTED;
   143f8:	2bff      	cmp	r3, #255	; 0xff
   143fa:	d00a      	beq.n	14412 <configure_pins+0x10a>
        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
   143fc:	7809      	ldrb	r1, [r1, #0]
    p_reg->PSELSCK  = sck_pin;
   143fe:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
    p_reg->PSELMOSI = mosi_pin;
   14402:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    p_reg->PSELMISO = miso_pin;
   14406:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
   1440a:	4770      	bx	lr
                            : NRF_SPI_PIN_NOT_CONNECTED;
   1440c:	f04f 32ff 	mov.w	r2, #4294967295
   14410:	e7f1      	b.n	143f6 <configure_pins+0xee>
                            : NRF_SPI_PIN_NOT_CONNECTED;
   14412:	f04f 33ff 	mov.w	r3, #4294967295
   14416:	e7f1      	b.n	143fc <configure_pins+0xf4>
   14418:	4770      	bx	lr

0001441a <finish_transfer>:
{
   1441a:	b508      	push	{r3, lr}
   1441c:	4603      	mov	r3, r0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1441e:	7f82      	ldrb	r2, [r0, #30]
   14420:	2aff      	cmp	r2, #255	; 0xff
   14422:	d008      	beq.n	14436 <finish_transfer+0x1c>
    *p_pin = pin_number & 0x1F;
   14424:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14428:	2101      	movs	r1, #1
   1442a:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
   1442e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   14432:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
    p_cb->transfer_in_progress = false;
   14436:	2200      	movs	r2, #0
   14438:	775a      	strb	r2, [r3, #29]
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
   1443a:	721a      	strb	r2, [r3, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1443c:	4618      	mov	r0, r3
   1443e:	f850 2b08 	ldr.w	r2, [r0], #8
   14442:	6859      	ldr	r1, [r3, #4]
   14444:	4790      	blx	r2
}
   14446:	bd08      	pop	{r3, pc}

00014448 <transfer_byte>:
{
   14448:	b430      	push	{r4, r5}
   1444a:	b082      	sub	sp, #8
    return p_reg->RXD;
   1444c:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
   14450:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   14452:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   14456:	6a0b      	ldr	r3, [r1, #32]
   14458:	698a      	ldr	r2, [r1, #24]
   1445a:	4293      	cmp	r3, r2
   1445c:	d203      	bcs.n	14466 <transfer_byte+0x1e>
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   1445e:	694a      	ldr	r2, [r1, #20]
   14460:	f89d 4007 	ldrb.w	r4, [sp, #7]
   14464:	54d4      	strb	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   14466:	6a0b      	ldr	r3, [r1, #32]
   14468:	1c5a      	adds	r2, r3, #1
   1446a:	620a      	str	r2, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   1446c:	3302      	adds	r3, #2
    if (p_cb->abort)
   1446e:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   14472:	b13c      	cbz	r4, 14484 <transfer_byte+0x3c>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   14474:	690c      	ldr	r4, [r1, #16]
   14476:	429c      	cmp	r4, r3
   14478:	d900      	bls.n	1447c <transfer_byte+0x34>
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   1447a:	610b      	str	r3, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   1447c:	698c      	ldr	r4, [r1, #24]
   1447e:	429c      	cmp	r4, r3
   14480:	d900      	bls.n	14484 <transfer_byte+0x3c>
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   14482:	618b      	str	r3, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   14484:	690c      	ldr	r4, [r1, #16]
   14486:	429c      	cmp	r4, r3
   14488:	d808      	bhi.n	1449c <transfer_byte+0x54>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   1448a:	698d      	ldr	r5, [r1, #24]
   1448c:	429d      	cmp	r5, r3
   1448e:	d80d      	bhi.n	144ac <transfer_byte+0x64>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   14490:	42a2      	cmp	r2, r4
   14492:	d310      	bcc.n	144b6 <transfer_byte+0x6e>
   14494:	42aa      	cmp	r2, r5
   14496:	d210      	bcs.n	144ba <transfer_byte+0x72>
   14498:	2001      	movs	r0, #1
   1449a:	e004      	b.n	144a6 <transfer_byte+0x5e>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   1449c:	68ca      	ldr	r2, [r1, #12]
   1449e:	5cd3      	ldrb	r3, [r2, r3]
    p_reg->TXD = data;
   144a0:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        return true;
   144a4:	2001      	movs	r0, #1
}
   144a6:	b002      	add	sp, #8
   144a8:	bc30      	pop	{r4, r5}
   144aa:	4770      	bx	lr
        nrf_spi_txd_set(p_spi, p_cb->orc);
   144ac:	7fcb      	ldrb	r3, [r1, #31]
   144ae:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        return true;
   144b2:	2001      	movs	r0, #1
   144b4:	e7f7      	b.n	144a6 <transfer_byte+0x5e>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   144b6:	2001      	movs	r0, #1
   144b8:	e7f5      	b.n	144a6 <transfer_byte+0x5e>
   144ba:	2000      	movs	r0, #0
   144bc:	e7f3      	b.n	144a6 <transfer_byte+0x5e>

000144be <spi_xfer>:
{
   144be:	b538      	push	{r3, r4, r5, lr}
   144c0:	4604      	mov	r4, r0
   144c2:	460d      	mov	r5, r1
    p_cb->bytes_transferred = 0;
   144c4:	2300      	movs	r3, #0
   144c6:	620b      	str	r3, [r1, #32]
    p_reg->INTENCLR = mask;
   144c8:	2104      	movs	r1, #4
   144ca:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   144ce:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   144d2:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   144d6:	6853      	ldr	r3, [r2, #4]
    nrf_spi_txd_set(p_spi,
   144d8:	b183      	cbz	r3, 144fc <spi_xfer+0x3e>
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   144da:	6813      	ldr	r3, [r2, #0]
    nrf_spi_txd_set(p_spi,
   144dc:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
   144de:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
   144e2:	6853      	ldr	r3, [r2, #4]
   144e4:	2b01      	cmp	r3, #1
   144e6:	d90b      	bls.n	14500 <spi_xfer+0x42>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   144e8:	6813      	ldr	r3, [r2, #0]
   144ea:	785b      	ldrb	r3, [r3, #1]
   144ec:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_cb->handler)
   144f0:	682b      	ldr	r3, [r5, #0]
   144f2:	b163      	cbz	r3, 1450e <spi_xfer+0x50>
    p_reg->INTENSET = mask;
   144f4:	2304      	movs	r3, #4
   144f6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   144fa:	bd38      	pop	{r3, r4, r5, pc}
    nrf_spi_txd_set(p_spi,
   144fc:	7feb      	ldrb	r3, [r5, #31]
   144fe:	e7ee      	b.n	144de <spi_xfer+0x20>
    else if (p_xfer_desc->rx_length > 1)
   14500:	68d3      	ldr	r3, [r2, #12]
   14502:	2b01      	cmp	r3, #1
   14504:	d9f4      	bls.n	144f0 <spi_xfer+0x32>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   14506:	7feb      	ldrb	r3, [r5, #31]
    p_reg->TXD = data;
   14508:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
}
   1450c:	e7f0      	b.n	144f0 <spi_xfer+0x32>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1450e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   14512:	2b00      	cmp	r3, #0
   14514:	d0fb      	beq.n	1450e <spi_xfer+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14516:	2300      	movs	r3, #0
   14518:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   1451c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
   14520:	4629      	mov	r1, r5
   14522:	4620      	mov	r0, r4
   14524:	f7ff ff90 	bl	14448 <transfer_byte>
   14528:	2800      	cmp	r0, #0
   1452a:	d1f0      	bne.n	1450e <spi_xfer+0x50>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1452c:	7fab      	ldrb	r3, [r5, #30]
   1452e:	2bff      	cmp	r3, #255	; 0xff
   14530:	d0e3      	beq.n	144fa <spi_xfer+0x3c>
    *p_pin = pin_number & 0x1F;
   14532:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14536:	2201      	movs	r2, #1
   14538:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
   1453c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   14540:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
   14544:	e7d9      	b.n	144fa <spi_xfer+0x3c>

00014546 <irq_handler>:
{
   14546:	b510      	push	{r4, lr}
   14548:	460c      	mov	r4, r1
   1454a:	2200      	movs	r2, #0
   1454c:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
   14550:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    if (!transfer_byte(p_spi, p_cb))
   14554:	f7ff ff78 	bl	14448 <transfer_byte>
   14558:	b100      	cbz	r0, 1455c <irq_handler+0x16>
}
   1455a:	bd10      	pop	{r4, pc}
        finish_transfer(p_cb);
   1455c:	4620      	mov	r0, r4
   1455e:	f7ff ff5c 	bl	1441a <finish_transfer>
}
   14562:	e7fa      	b.n	1455a <irq_handler+0x14>

00014564 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   14564:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   14566:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   14568:	4293      	cmp	r3, r2
   1456a:	d804      	bhi.n	14576 <_GetAvailWriteSpace+0x12>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1456c:	6881      	ldr	r1, [r0, #8]
   1456e:	1a8a      	subs	r2, r1, r2
   14570:	4413      	add	r3, r2
   14572:	1e58      	subs	r0, r3, #1
   14574:	4770      	bx	lr
    r = RdOff - WrOff - 1u;
   14576:	1a98      	subs	r0, r3, r2
   14578:	3801      	subs	r0, #1
}
   1457a:	4770      	bx	lr

0001457c <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1457c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14580:	4604      	mov	r4, r0
   14582:	4688      	mov	r8, r1
   14584:	4616      	mov	r6, r2
  WrOff = pRing->WrOff;
   14586:	68c5      	ldr	r5, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
   14588:	6887      	ldr	r7, [r0, #8]
   1458a:	eba7 0905 	sub.w	r9, r7, r5
  if (Rem > NumBytes) {
   1458e:	4591      	cmp	r9, r2
   14590:	d907      	bls.n	145a2 <_WriteNoCheck+0x26>
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   14592:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
   14594:	4428      	add	r0, r5
   14596:	f7fe fbf8 	bl	12d8a <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   1459a:	4435      	add	r5, r6
   1459c:	60e5      	str	r5, [r4, #12]
}
   1459e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   145a2:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   145a4:	464a      	mov	r2, r9
   145a6:	4428      	add	r0, r5
   145a8:	f7fe fbef 	bl	12d8a <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
   145ac:	1bed      	subs	r5, r5, r7
   145ae:	4435      	add	r5, r6
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   145b0:	462a      	mov	r2, r5
   145b2:	eb08 0109 	add.w	r1, r8, r9
   145b6:	6860      	ldr	r0, [r4, #4]
   145b8:	f7fe fbe7 	bl	12d8a <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   145bc:	60e5      	str	r5, [r4, #12]
}
   145be:	e7ee      	b.n	1459e <_WriteNoCheck+0x22>

000145c0 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   145c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   145c4:	4606      	mov	r6, r0
   145c6:	4688      	mov	r8, r1
   145c8:	4617      	mov	r7, r2
  WrOff = pRing->WrOff;
   145ca:	68c5      	ldr	r5, [r0, #12]
  NumBytesWritten = 0u;
   145cc:	f04f 0900 	mov.w	r9, #0
   145d0:	e018      	b.n	14604 <_WriteBlocking+0x44>
      NumBytesToWrite = RdOff - WrOff - 1u;
   145d2:	1b5b      	subs	r3, r3, r5
   145d4:	1e5a      	subs	r2, r3, #1
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   145d6:	68b3      	ldr	r3, [r6, #8]
   145d8:	1b5c      	subs	r4, r3, r5
   145da:	4294      	cmp	r4, r2
   145dc:	bf28      	it	cs
   145de:	4614      	movcs	r4, r2
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   145e0:	42bc      	cmp	r4, r7
   145e2:	bf28      	it	cs
   145e4:	463c      	movcs	r4, r7
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   145e6:	6870      	ldr	r0, [r6, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
   145e8:	4622      	mov	r2, r4
   145ea:	4641      	mov	r1, r8
   145ec:	4428      	add	r0, r5
   145ee:	f7fe fbcc 	bl	12d8a <memcpy>
    NumBytesWritten += NumBytesToWrite;
   145f2:	44a1      	add	r9, r4
    pBuffer         += NumBytesToWrite;
   145f4:	44a0      	add	r8, r4
    NumBytes        -= NumBytesToWrite;
   145f6:	1b3f      	subs	r7, r7, r4
    WrOff           += NumBytesToWrite;
   145f8:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
   145fa:	68b3      	ldr	r3, [r6, #8]
   145fc:	42ab      	cmp	r3, r5
   145fe:	d009      	beq.n	14614 <_WriteBlocking+0x54>
    pRing->WrOff = WrOff;
   14600:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   14602:	b14f      	cbz	r7, 14618 <_WriteBlocking+0x58>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   14604:	6933      	ldr	r3, [r6, #16]
    if (RdOff > WrOff) {
   14606:	429d      	cmp	r5, r3
   14608:	d3e3      	bcc.n	145d2 <_WriteBlocking+0x12>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1460a:	68b2      	ldr	r2, [r6, #8]
   1460c:	1b5b      	subs	r3, r3, r5
   1460e:	441a      	add	r2, r3
   14610:	3a01      	subs	r2, #1
   14612:	e7e0      	b.n	145d6 <_WriteBlocking+0x16>
      WrOff = 0u;
   14614:	2500      	movs	r5, #0
   14616:	e7f3      	b.n	14600 <_WriteBlocking+0x40>
}
   14618:	4648      	mov	r0, r9
   1461a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001461e <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   1461e:	b508      	push	{r3, lr}
  _DoInit();
   14620:	f7f8 faf0 	bl	cc04 <_DoInit>
}
   14624:	bd08      	pop	{r3, pc}

00014626 <rtt_init>:
{
   14626:	b508      	push	{r3, lr}
	SEGGER_RTT_Init();
   14628:	f7ff fff9 	bl	1461e <SEGGER_RTT_Init>
}
   1462c:	2000      	movs	r0, #0
   1462e:	bd08      	pop	{r3, pc}

00014630 <z_device_is_ready>:
	if (dev == NULL) {
   14630:	b160      	cbz	r0, 1464c <z_device_is_ready+0x1c>
	return dev->state->initialized && (dev->state->init_res == 0U);
   14632:	68c3      	ldr	r3, [r0, #12]
   14634:	785a      	ldrb	r2, [r3, #1]
   14636:	f012 0f01 	tst.w	r2, #1
   1463a:	d003      	beq.n	14644 <z_device_is_ready+0x14>
   1463c:	781b      	ldrb	r3, [r3, #0]
   1463e:	b11b      	cbz	r3, 14648 <z_device_is_ready+0x18>
   14640:	2000      	movs	r0, #0
   14642:	4770      	bx	lr
   14644:	2000      	movs	r0, #0
   14646:	4770      	bx	lr
   14648:	2001      	movs	r0, #1
   1464a:	4770      	bx	lr
		return false;
   1464c:	2000      	movs	r0, #0
}
   1464e:	4770      	bx	lr

00014650 <device_required_foreach>:

int device_required_foreach(const struct device *dev,
			    device_visitor_callback_t visitor_cb,
			    void *context)
{
   14650:	b510      	push	{r4, lr}
   14652:	460c      	mov	r4, r1
   14654:	4613      	mov	r3, r2
	const device_handle_t *rv = dev->handles;
   14656:	6940      	ldr	r0, [r0, #20]
	if (rv != NULL) {
   14658:	b108      	cbz	r0, 1465e <device_required_foreach+0xe>
		size_t i = 0;
   1465a:	2100      	movs	r1, #0
   1465c:	e002      	b.n	14664 <device_required_foreach+0x14>
	size_t handle_count = 0;
   1465e:	2100      	movs	r1, #0
   14660:	e00c      	b.n	1467c <device_required_foreach+0x2c>
			++i;
   14662:	3101      	adds	r1, #1
		while ((rv[i] != DEVICE_HANDLE_ENDS) &&
   14664:	f930 c011 	ldrsh.w	ip, [r0, r1, lsl #1]
   14668:	f50c 4cff 	add.w	ip, ip, #32640	; 0x7f80
   1466c:	f10c 0c7f 	add.w	ip, ip, #127	; 0x7f
   14670:	fa1f fc8c 	uxth.w	ip, ip
   14674:	f64f 7efd 	movw	lr, #65533	; 0xfffd
   14678:	45f4      	cmp	ip, lr
   1467a:	d9f2      	bls.n	14662 <device_required_foreach+0x12>
	const device_handle_t *handles = device_required_handles_get(dev, &handle_count);

	return device_visitor(handles, handle_count, visitor_cb, context);
   1467c:	4622      	mov	r2, r4
   1467e:	f7f8 fbaf 	bl	cde0 <device_visitor>
}
   14682:	bd10      	pop	{r4, pc}

00014684 <z_early_memset>:
{
   14684:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
   14686:	f7fe fbaf 	bl	12de8 <memset>
}
   1468a:	bd08      	pop	{r3, pc}

0001468c <z_early_memcpy>:
{
   1468c:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
   1468e:	f7fe fb7c 	bl	12d8a <memcpy>
}
   14692:	bd08      	pop	{r3, pc}

00014694 <copy_bytes>:
{
   14694:	b510      	push	{r4, lr}
   14696:	460c      	mov	r4, r1
   14698:	4611      	mov	r1, r2
	bytes_to_copy = MIN(dest_size, src_size);
   1469a:	429c      	cmp	r4, r3
   1469c:	bf28      	it	cs
   1469e:	461c      	movcs	r4, r3
	memcpy(dest, src, bytes_to_copy);
   146a0:	4622      	mov	r2, r4
   146a2:	f7fe fb72 	bl	12d8a <memcpy>
}
   146a6:	4620      	mov	r0, r4
   146a8:	bd10      	pop	{r4, pc}

000146aa <setup_thread_stack>:
{
   146aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   146ac:	4605      	mov	r5, r0
   146ae:	460e      	mov	r6, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   146b0:	1dd4      	adds	r4, r2, #7
   146b2:	f024 0407 	bic.w	r4, r4, #7
	stack_ptr = (char *)stack + stack_obj_size;
   146b6:	190f      	adds	r7, r1, r4
	memset(stack_buf_start, 0xaa, stack_buf_size);
   146b8:	4622      	mov	r2, r4
   146ba:	21aa      	movs	r1, #170	; 0xaa
   146bc:	4630      	mov	r0, r6
   146be:	f7fe fb93 	bl	12de8 <memset>
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   146c2:	f8c5 609c 	str.w	r6, [r5, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   146c6:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   146ca:	2300      	movs	r3, #0
   146cc:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
}
   146d0:	4638      	mov	r0, r7
   146d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000146d4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   146d4:	f3ef 8005 	mrs	r0, IPSR
}
   146d8:	3800      	subs	r0, #0
   146da:	bf18      	it	ne
   146dc:	2001      	movne	r0, #1
   146de:	4770      	bx	lr

000146e0 <k_thread_name_get>:
}
   146e0:	3078      	adds	r0, #120	; 0x78
   146e2:	4770      	bx	lr

000146e4 <z_impl_k_thread_start>:
{
   146e4:	b508      	push	{r3, lr}
	z_sched_start(thread);
   146e6:	f7f9 fa97 	bl	dc18 <z_sched_start>
}
   146ea:	bd08      	pop	{r3, pc}

000146ec <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   146ec:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   146ee:	2400      	movs	r4, #0
   146f0:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   146f2:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   146f4:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   146f6:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   146f8:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   146fa:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   146fc:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   146fe:	bc10      	pop	{r4}
   14700:	4770      	bx	lr

00014702 <z_impl_k_thread_create>:
{
   14702:	b5f0      	push	{r4, r5, r6, r7, lr}
   14704:	b087      	sub	sp, #28
   14706:	4604      	mov	r4, r0
   14708:	9e12      	ldr	r6, [sp, #72]	; 0x48
   1470a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1470c:	2700      	movs	r7, #0
   1470e:	9705      	str	r7, [sp, #20]
   14710:	9f10      	ldr	r7, [sp, #64]	; 0x40
   14712:	9704      	str	r7, [sp, #16]
   14714:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   14716:	9703      	str	r7, [sp, #12]
   14718:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1471a:	9702      	str	r7, [sp, #8]
   1471c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1471e:	9701      	str	r7, [sp, #4]
   14720:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   14722:	9700      	str	r7, [sp, #0]
   14724:	f7f8 fef0 	bl	d508 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   14728:	f1b5 3fff 	cmp.w	r5, #4294967295
   1472c:	bf08      	it	eq
   1472e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   14732:	d102      	bne.n	1473a <z_impl_k_thread_create+0x38>
}
   14734:	4620      	mov	r0, r4
   14736:	b007      	add	sp, #28
   14738:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   1473a:	4632      	mov	r2, r6
   1473c:	462b      	mov	r3, r5
   1473e:	4620      	mov	r0, r4
   14740:	f7f8 fed4 	bl	d4ec <schedule_new_thread>
   14744:	e7f6      	b.n	14734 <z_impl_k_thread_create+0x32>

00014746 <z_stack_space_get>:
#ifdef CONFIG_STACK_GROWS_UP
#error "Unsupported configuration for stack analysis"
#endif

int z_stack_space_get(const uint8_t *stack_start, size_t size, size_t *unused_ptr)
{
   14746:	b410      	push	{r4}
		 */
		checked_stack += 4;
		size -= 4;
	}

	for (size_t i = 0; i < size; i++) {
   14748:	2300      	movs	r3, #0
	size_t unused = 0;
   1474a:	461c      	mov	r4, r3
	for (size_t i = 0; i < size; i++) {
   1474c:	e001      	b.n	14752 <z_stack_space_get+0xc>
		if ((checked_stack[i]) == 0xaaU) {
			unused++;
   1474e:	3401      	adds	r4, #1
	for (size_t i = 0; i < size; i++) {
   14750:	3301      	adds	r3, #1
   14752:	428b      	cmp	r3, r1
   14754:	d204      	bcs.n	14760 <z_stack_space_get+0x1a>
		if ((checked_stack[i]) == 0xaaU) {
   14756:	f810 c003 	ldrb.w	ip, [r0, r3]
   1475a:	f1bc 0faa 	cmp.w	ip, #170	; 0xaa
   1475e:	d0f6      	beq.n	1474e <z_stack_space_get+0x8>
		} else {
			break;
		}
	}

	*unused_ptr = unused;
   14760:	6014      	str	r4, [r2, #0]

	return 0;
}
   14762:	2000      	movs	r0, #0
   14764:	bc10      	pop	{r4}
   14766:	4770      	bx	lr

00014768 <z_impl_k_thread_stack_space_get>:

int z_impl_k_thread_stack_space_get(const struct k_thread *thread,
				    size_t *unused_ptr)
{
   14768:	b508      	push	{r3, lr}
   1476a:	460a      	mov	r2, r1
	return z_stack_space_get((const uint8_t *)thread->stack_info.start,
   1476c:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
   14770:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   14774:	f7ff ffe7 	bl	14746 <z_stack_space_get>
				 thread->stack_info.size, unused_ptr);
}
   14778:	bd08      	pop	{r3, pc}

0001477a <z_pm_save_idle_exit>:
{
   1477a:	b508      	push	{r3, lr}
	pm_system_resume();
   1477c:	f7f0 ff42 	bl	5604 <pm_system_resume>
	sys_clock_idle_exit();
   14780:	f7ff fa64 	bl	13c4c <sys_clock_idle_exit>
}
   14784:	bd08      	pop	{r3, pc}

00014786 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   14786:	4288      	cmp	r0, r1
   14788:	da00      	bge.n	1478c <new_prio_for_inheritance+0x6>
   1478a:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   1478c:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   14790:	db01      	blt.n	14796 <new_prio_for_inheritance+0x10>
   14792:	4608      	mov	r0, r1
   14794:	4770      	bx	lr
   14796:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   1479a:	4770      	bx	lr

0001479c <adjust_owner_prio>:
{
   1479c:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   1479e:	6880      	ldr	r0, [r0, #8]
   147a0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   147a4:	428b      	cmp	r3, r1
   147a6:	d101      	bne.n	147ac <adjust_owner_prio+0x10>
	return false;
   147a8:	2000      	movs	r0, #0
}
   147aa:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   147ac:	f7f9 fa8a 	bl	dcc4 <z_set_prio>
   147b0:	e7fb      	b.n	147aa <adjust_owner_prio+0xe>

000147b2 <z_impl_k_mutex_init>:
{
   147b2:	4603      	mov	r3, r0
	mutex->owner = NULL;
   147b4:	2000      	movs	r0, #0
   147b6:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   147b8:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   147ba:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   147bc:	605b      	str	r3, [r3, #4]
}
   147be:	4770      	bx	lr

000147c0 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   147c0:	b15a      	cbz	r2, 147da <z_impl_k_sem_init+0x1a>
   147c2:	428a      	cmp	r2, r1
   147c4:	d30c      	bcc.n	147e0 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   147c6:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   147c8:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   147ca:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   147cc:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   147ce:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   147d2:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   147d4:	6143      	str	r3, [r0, #20]
	return 0;
   147d6:	2000      	movs	r0, #0
   147d8:	4770      	bx	lr
		return -EINVAL;
   147da:	f06f 0015 	mvn.w	r0, #21
   147de:	4770      	bx	lr
   147e0:	f06f 0015 	mvn.w	r0, #21
}
   147e4:	4770      	bx	lr

000147e6 <thread_active_elsewhere>:
}
   147e6:	2000      	movs	r0, #0
   147e8:	4770      	bx	lr

000147ea <pended_on_thread>:
}
   147ea:	6880      	ldr	r0, [r0, #8]
   147ec:	4770      	bx	lr

000147ee <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   147ee:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   147f2:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   147f6:	4283      	cmp	r3, r0
   147f8:	d001      	beq.n	147fe <z_sched_prio_cmp+0x10>
		return b2 - b1;
   147fa:	1ac0      	subs	r0, r0, r3
   147fc:	4770      	bx	lr
	return 0;
   147fe:	2000      	movs	r0, #0
}
   14800:	4770      	bx	lr

00014802 <z_unpend_thread_no_timeout>:
{
   14802:	b538      	push	{r3, r4, r5, lr}
   14804:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   14806:	2300      	movs	r3, #0
	__asm__ volatile(
   14808:	f04f 0220 	mov.w	r2, #32
   1480c:	f3ef 8511 	mrs	r5, BASEPRI
   14810:	f382 8812 	msr	BASEPRI_MAX, r2
   14814:	f3bf 8f6f 	isb	sy
   14818:	e004      	b.n	14824 <z_unpend_thread_no_timeout+0x22>
	__asm__ volatile(
   1481a:	f385 8811 	msr	BASEPRI, r5
   1481e:	f3bf 8f6f 	isb	sy
   14822:	2301      	movs	r3, #1
   14824:	b933      	cbnz	r3, 14834 <z_unpend_thread_no_timeout+0x32>
		if (thread->base.pended_on != NULL) {
   14826:	68a3      	ldr	r3, [r4, #8]
   14828:	2b00      	cmp	r3, #0
   1482a:	d0f6      	beq.n	1481a <z_unpend_thread_no_timeout+0x18>
			unpend_thread_no_timeout(thread);
   1482c:	4620      	mov	r0, r4
   1482e:	f000 f824 	bl	1487a <unpend_thread_no_timeout>
   14832:	e7f2      	b.n	1481a <z_unpend_thread_no_timeout+0x18>
}
   14834:	bd38      	pop	{r3, r4, r5, pc}

00014836 <z_reschedule_irqlock>:
{
   14836:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   14838:	4603      	mov	r3, r0
   1483a:	b928      	cbnz	r0, 14848 <z_reschedule_irqlock+0x12>
   1483c:	f3ef 8205 	mrs	r2, IPSR
   14840:	b912      	cbnz	r2, 14848 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   14842:	f7f3 fb53 	bl	7eec <arch_swap>
	return ret;
   14846:	e003      	b.n	14850 <z_reschedule_irqlock+0x1a>
   14848:	f383 8811 	msr	BASEPRI, r3
   1484c:	f3bf 8f6f 	isb	sy
}
   14850:	bd08      	pop	{r3, pc}

00014852 <z_reschedule_unlocked>:
{
   14852:	b508      	push	{r3, lr}
	__asm__ volatile(
   14854:	f04f 0320 	mov.w	r3, #32
   14858:	f3ef 8011 	mrs	r0, BASEPRI
   1485c:	f383 8812 	msr	BASEPRI_MAX, r3
   14860:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   14864:	f7ff ffe7 	bl	14836 <z_reschedule_irqlock>
}
   14868:	bd08      	pop	{r3, pc}

0001486a <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   1486a:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   1486c:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   1486e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   14870:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   14872:	2300      	movs	r3, #0
   14874:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   14876:	604b      	str	r3, [r1, #4]
}
   14878:	4770      	bx	lr

0001487a <unpend_thread_no_timeout>:
{
   1487a:	b510      	push	{r4, lr}
   1487c:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1487e:	f7ff ffb4 	bl	147ea <pended_on_thread>
   14882:	4621      	mov	r1, r4
   14884:	f7ff fff1 	bl	1486a <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   14888:	7b63      	ldrb	r3, [r4, #13]
   1488a:	f023 0302 	bic.w	r3, r3, #2
   1488e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   14890:	2300      	movs	r3, #0
   14892:	60a3      	str	r3, [r4, #8]
}
   14894:	bd10      	pop	{r4, pc}

00014896 <z_unpend_thread>:
{
   14896:	b538      	push	{r3, r4, r5, lr}
   14898:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   1489a:	2300      	movs	r3, #0
   1489c:	f04f 0220 	mov.w	r2, #32
   148a0:	f3ef 8511 	mrs	r5, BASEPRI
   148a4:	f382 8812 	msr	BASEPRI_MAX, r2
   148a8:	f3bf 8f6f 	isb	sy
   148ac:	e004      	b.n	148b8 <z_unpend_thread+0x22>
	__asm__ volatile(
   148ae:	f385 8811 	msr	BASEPRI, r5
   148b2:	f3bf 8f6f 	isb	sy
   148b6:	2301      	movs	r3, #1
   148b8:	b933      	cbnz	r3, 148c8 <z_unpend_thread+0x32>
		if (thread->base.pended_on != NULL) {
   148ba:	68a3      	ldr	r3, [r4, #8]
   148bc:	2b00      	cmp	r3, #0
   148be:	d0f6      	beq.n	148ae <z_unpend_thread+0x18>
			unpend_thread_no_timeout(thread);
   148c0:	4620      	mov	r0, r4
   148c2:	f7ff ffda 	bl	1487a <unpend_thread_no_timeout>
   148c6:	e7f2      	b.n	148ae <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
   148c8:	f104 0018 	add.w	r0, r4, #24
   148cc:	f000 f946 	bl	14b5c <z_abort_timeout>
}
   148d0:	bd38      	pop	{r3, r4, r5, pc}

000148d2 <z_priq_dumb_best>:
{
   148d2:	4603      	mov	r3, r0
	return list->head == list;
   148d4:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   148d6:	4283      	cmp	r3, r0
   148d8:	d000      	beq.n	148dc <z_priq_dumb_best+0xa>
}
   148da:	4770      	bx	lr
	struct k_thread *thread = NULL;
   148dc:	2000      	movs	r0, #0
	return thread;
   148de:	e7fc      	b.n	148da <z_priq_dumb_best+0x8>

000148e0 <z_ready_thread>:
{
   148e0:	b538      	push	{r3, r4, r5, lr}
   148e2:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   148e4:	2300      	movs	r3, #0
	__asm__ volatile(
   148e6:	f04f 0220 	mov.w	r2, #32
   148ea:	f3ef 8511 	mrs	r5, BASEPRI
   148ee:	f382 8812 	msr	BASEPRI_MAX, r2
   148f2:	f3bf 8f6f 	isb	sy
   148f6:	e004      	b.n	14902 <z_ready_thread+0x22>
	__asm__ volatile(
   148f8:	f385 8811 	msr	BASEPRI, r5
   148fc:	f3bf 8f6f 	isb	sy
   14900:	2301      	movs	r3, #1
   14902:	b943      	cbnz	r3, 14916 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   14904:	4620      	mov	r0, r4
   14906:	f7ff ff6e 	bl	147e6 <thread_active_elsewhere>
   1490a:	2800      	cmp	r0, #0
   1490c:	d1f4      	bne.n	148f8 <z_ready_thread+0x18>
			ready_thread(thread);
   1490e:	4620      	mov	r0, r4
   14910:	f7f9 f946 	bl	dba0 <ready_thread>
   14914:	e7f0      	b.n	148f8 <z_ready_thread+0x18>
}
   14916:	bd38      	pop	{r3, r4, r5, pc}

00014918 <z_sched_wake_thread>:
{
   14918:	b570      	push	{r4, r5, r6, lr}
   1491a:	4604      	mov	r4, r0
   1491c:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
   1491e:	2300      	movs	r3, #0
	__asm__ volatile(
   14920:	f04f 0220 	mov.w	r2, #32
   14924:	f3ef 8511 	mrs	r5, BASEPRI
   14928:	f382 8812 	msr	BASEPRI_MAX, r2
   1492c:	f3bf 8f6f 	isb	sy
   14930:	e007      	b.n	14942 <z_sched_wake_thread+0x2a>
			ready_thread(thread);
   14932:	4620      	mov	r0, r4
   14934:	f7f9 f934 	bl	dba0 <ready_thread>
	__asm__ volatile(
   14938:	f385 8811 	msr	BASEPRI, r5
   1493c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   14940:	2301      	movs	r3, #1
   14942:	b993      	cbnz	r3, 1496a <z_sched_wake_thread+0x52>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   14944:	7b63      	ldrb	r3, [r4, #13]
		if (!killed) {
   14946:	f013 0f28 	tst.w	r3, #40	; 0x28
   1494a:	d1f5      	bne.n	14938 <z_sched_wake_thread+0x20>
			if (thread->base.pended_on != NULL) {
   1494c:	68a3      	ldr	r3, [r4, #8]
   1494e:	b113      	cbz	r3, 14956 <z_sched_wake_thread+0x3e>
				unpend_thread_no_timeout(thread);
   14950:	4620      	mov	r0, r4
   14952:	f7ff ff92 	bl	1487a <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14956:	7b63      	ldrb	r3, [r4, #13]
   14958:	f023 0204 	bic.w	r2, r3, #4
   1495c:	7362      	strb	r2, [r4, #13]
			if (is_timeout) {
   1495e:	2e00      	cmp	r6, #0
   14960:	d0e7      	beq.n	14932 <z_sched_wake_thread+0x1a>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   14962:	f023 0314 	bic.w	r3, r3, #20
   14966:	7363      	strb	r3, [r4, #13]
}
   14968:	e7e3      	b.n	14932 <z_sched_wake_thread+0x1a>
}
   1496a:	bd70      	pop	{r4, r5, r6, pc}

0001496c <z_thread_timeout>:
{
   1496c:	b508      	push	{r3, lr}
	z_sched_wake_thread(thread, true);
   1496e:	2101      	movs	r1, #1
   14970:	3818      	subs	r0, #24
   14972:	f7ff ffd1 	bl	14918 <z_sched_wake_thread>
}
   14976:	bd08      	pop	{r3, pc}

00014978 <unpend_all>:
{
   14978:	b538      	push	{r3, r4, r5, lr}
   1497a:	4605      	mov	r5, r0
	return list->head == list;
   1497c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1497e:	42a5      	cmp	r5, r4
   14980:	d00e      	beq.n	149a0 <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   14982:	b16c      	cbz	r4, 149a0 <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
   14984:	4620      	mov	r0, r4
   14986:	f7ff ff78 	bl	1487a <unpend_thread_no_timeout>
   1498a:	f104 0018 	add.w	r0, r4, #24
   1498e:	f000 f8e5 	bl	14b5c <z_abort_timeout>
   14992:	2300      	movs	r3, #0
   14994:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		ready_thread(thread);
   14998:	4620      	mov	r0, r4
   1499a:	f7f9 f901 	bl	dba0 <ready_thread>
   1499e:	e7ed      	b.n	1497c <unpend_all+0x4>
}
   149a0:	bd38      	pop	{r3, r4, r5, pc}

000149a2 <add_to_waitq_locked>:
{
   149a2:	b570      	push	{r4, r5, r6, lr}
   149a4:	4605      	mov	r5, r0
   149a6:	460e      	mov	r6, r1
	unready_thread(thread);
   149a8:	f7f9 f954 	bl	dc54 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   149ac:	7b6b      	ldrb	r3, [r5, #13]
   149ae:	f043 0302 	orr.w	r3, r3, #2
   149b2:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   149b4:	b1fe      	cbz	r6, 149f6 <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
   149b6:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   149b8:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   149ba:	42a6      	cmp	r6, r4
   149bc:	d108      	bne.n	149d0 <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   149be:	2400      	movs	r4, #0
   149c0:	e006      	b.n	149d0 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
   149c2:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   149c4:	606b      	str	r3, [r5, #4]
	node->next = successor;
   149c6:	602c      	str	r4, [r5, #0]
	prev->next = node;
   149c8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   149ca:	6065      	str	r5, [r4, #4]
}
   149cc:	e013      	b.n	149f6 <add_to_waitq_locked+0x54>
   149ce:	2400      	movs	r4, #0
   149d0:	b164      	cbz	r4, 149ec <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   149d2:	4621      	mov	r1, r4
   149d4:	4628      	mov	r0, r5
   149d6:	f7ff ff0a 	bl	147ee <z_sched_prio_cmp>
   149da:	2800      	cmp	r0, #0
   149dc:	dcf1      	bgt.n	149c2 <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   149de:	2c00      	cmp	r4, #0
   149e0:	d0f6      	beq.n	149d0 <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
   149e2:	6873      	ldr	r3, [r6, #4]
   149e4:	429c      	cmp	r4, r3
   149e6:	d0f2      	beq.n	149ce <add_to_waitq_locked+0x2c>
   149e8:	6824      	ldr	r4, [r4, #0]
   149ea:	e7f1      	b.n	149d0 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
   149ec:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   149ee:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   149f0:	606b      	str	r3, [r5, #4]
	tail->next = node;
   149f2:	601d      	str	r5, [r3, #0]
	list->tail = node;
   149f4:	6075      	str	r5, [r6, #4]
}
   149f6:	bd70      	pop	{r4, r5, r6, pc}

000149f8 <pend_locked>:
{
   149f8:	b570      	push	{r4, r5, r6, lr}
   149fa:	4604      	mov	r4, r0
   149fc:	4616      	mov	r6, r2
   149fe:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
   14a00:	f7ff ffcf 	bl	149a2 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
   14a04:	4632      	mov	r2, r6
   14a06:	462b      	mov	r3, r5
   14a08:	4620      	mov	r0, r4
   14a0a:	f7f8 ffb9 	bl	d980 <add_thread_timeout>
}
   14a0e:	bd70      	pop	{r4, r5, r6, pc}

00014a10 <z_unpend1_no_timeout>:
{
   14a10:	b570      	push	{r4, r5, r6, lr}
   14a12:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   14a14:	2300      	movs	r3, #0
	__asm__ volatile(
   14a16:	f04f 0220 	mov.w	r2, #32
   14a1a:	f3ef 8511 	mrs	r5, BASEPRI
   14a1e:	f382 8812 	msr	BASEPRI_MAX, r2
   14a22:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   14a26:	461c      	mov	r4, r3
   14a28:	e004      	b.n	14a34 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
   14a2a:	f385 8811 	msr	BASEPRI, r5
   14a2e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   14a32:	2301      	movs	r3, #1
   14a34:	b943      	cbnz	r3, 14a48 <z_unpend1_no_timeout+0x38>
		thread = _priq_wait_best(&wait_q->waitq);
   14a36:	4630      	mov	r0, r6
   14a38:	f7ff ff4b 	bl	148d2 <z_priq_dumb_best>
		if (thread != NULL) {
   14a3c:	4604      	mov	r4, r0
   14a3e:	2800      	cmp	r0, #0
   14a40:	d0f3      	beq.n	14a2a <z_unpend1_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
   14a42:	f7ff ff1a 	bl	1487a <unpend_thread_no_timeout>
   14a46:	e7f0      	b.n	14a2a <z_unpend1_no_timeout+0x1a>
}
   14a48:	4620      	mov	r0, r4
   14a4a:	bd70      	pop	{r4, r5, r6, pc}

00014a4c <z_unpend_first_thread>:
{
   14a4c:	b570      	push	{r4, r5, r6, lr}
   14a4e:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   14a50:	2300      	movs	r3, #0
	__asm__ volatile(
   14a52:	f04f 0220 	mov.w	r2, #32
   14a56:	f3ef 8511 	mrs	r5, BASEPRI
   14a5a:	f382 8812 	msr	BASEPRI_MAX, r2
   14a5e:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   14a62:	461c      	mov	r4, r3
   14a64:	e004      	b.n	14a70 <z_unpend_first_thread+0x24>
	__asm__ volatile(
   14a66:	f385 8811 	msr	BASEPRI, r5
   14a6a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   14a6e:	2301      	movs	r3, #1
   14a70:	b963      	cbnz	r3, 14a8c <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
   14a72:	4630      	mov	r0, r6
   14a74:	f7ff ff2d 	bl	148d2 <z_priq_dumb_best>
		if (thread != NULL) {
   14a78:	4604      	mov	r4, r0
   14a7a:	2800      	cmp	r0, #0
   14a7c:	d0f3      	beq.n	14a66 <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
   14a7e:	f7ff fefc 	bl	1487a <unpend_thread_no_timeout>
   14a82:	f104 0018 	add.w	r0, r4, #24
   14a86:	f000 f869 	bl	14b5c <z_abort_timeout>
   14a8a:	e7ec      	b.n	14a66 <z_unpend_first_thread+0x1a>
}
   14a8c:	4620      	mov	r0, r4
   14a8e:	bd70      	pop	{r4, r5, r6, pc}

00014a90 <init_ready_q>:
	sys_dlist_init(&rq->runq);
   14a90:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   14a92:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   14a94:	6083      	str	r3, [r0, #8]
}
   14a96:	4770      	bx	lr

00014a98 <z_sched_wake>:
{
   14a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14a9c:	4606      	mov	r6, r0
   14a9e:	4688      	mov	r8, r1
   14aa0:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   14aa2:	2300      	movs	r3, #0
	__asm__ volatile(
   14aa4:	f04f 0220 	mov.w	r2, #32
   14aa8:	f3ef 8511 	mrs	r5, BASEPRI
   14aac:	f382 8812 	msr	BASEPRI_MAX, r2
   14ab0:	f3bf 8f6f 	isb	sy
	bool ret = false;
   14ab4:	4699      	mov	r9, r3
   14ab6:	e004      	b.n	14ac2 <z_sched_wake+0x2a>
	__asm__ volatile(
   14ab8:	f385 8811 	msr	BASEPRI, r5
   14abc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   14ac0:	2301      	movs	r3, #1
   14ac2:	b9a3      	cbnz	r3, 14aee <z_sched_wake+0x56>
		thread = _priq_wait_best(&wait_q->waitq);
   14ac4:	4630      	mov	r0, r6
   14ac6:	f7ff ff04 	bl	148d2 <z_priq_dumb_best>
		if (thread != NULL) {
   14aca:	4604      	mov	r4, r0
   14acc:	2800      	cmp	r0, #0
   14ace:	d0f3      	beq.n	14ab8 <z_sched_wake+0x20>
   14ad0:	f8c0 80b0 	str.w	r8, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   14ad4:	6147      	str	r7, [r0, #20]
			unpend_thread_no_timeout(thread);
   14ad6:	f7ff fed0 	bl	1487a <unpend_thread_no_timeout>
   14ada:	f104 0018 	add.w	r0, r4, #24
   14ade:	f000 f83d 	bl	14b5c <z_abort_timeout>
			ready_thread(thread);
   14ae2:	4620      	mov	r0, r4
   14ae4:	f7f9 f85c 	bl	dba0 <ready_thread>
			ret = true;
   14ae8:	f04f 0901 	mov.w	r9, #1
   14aec:	e7e4      	b.n	14ab8 <z_sched_wake+0x20>
}
   14aee:	4648      	mov	r0, r9
   14af0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00014af4 <remove_timeout>:
{
   14af4:	b510      	push	{r4, lr}
   14af6:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   14af8:	f7f9 fb08 	bl	e10c <next>
   14afc:	b148      	cbz	r0, 14b12 <remove_timeout+0x1e>
   14afe:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   14b00:	6903      	ldr	r3, [r0, #16]
   14b02:	6941      	ldr	r1, [r0, #20]
   14b04:	6920      	ldr	r0, [r4, #16]
   14b06:	181b      	adds	r3, r3, r0
   14b08:	6960      	ldr	r0, [r4, #20]
   14b0a:	eb41 0100 	adc.w	r1, r1, r0
   14b0e:	6113      	str	r3, [r2, #16]
   14b10:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   14b12:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   14b14:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   14b16:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   14b18:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   14b1a:	2300      	movs	r3, #0
   14b1c:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   14b1e:	6063      	str	r3, [r4, #4]
}
   14b20:	bd10      	pop	{r4, pc}

00014b22 <next_timeout>:
{
   14b22:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   14b24:	f7f9 fae8 	bl	e0f8 <first>
   14b28:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   14b2a:	f7f9 fafb 	bl	e124 <elapsed>
	if ((to == NULL) ||
   14b2e:	b17c      	cbz	r4, 14b50 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   14b30:	6923      	ldr	r3, [r4, #16]
   14b32:	6962      	ldr	r2, [r4, #20]
   14b34:	1a1b      	subs	r3, r3, r0
   14b36:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   14b3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   14b3e:	f172 0100 	sbcs.w	r1, r2, #0
   14b42:	da08      	bge.n	14b56 <next_timeout+0x34>
		ret = MAX(0, to->dticks - ticks_elapsed);
   14b44:	2a00      	cmp	r2, #0
   14b46:	db01      	blt.n	14b4c <next_timeout+0x2a>
   14b48:	4618      	mov	r0, r3
}
   14b4a:	bd10      	pop	{r4, pc}
		ret = MAX(0, to->dticks - ticks_elapsed);
   14b4c:	2300      	movs	r3, #0
   14b4e:	e7fb      	b.n	14b48 <next_timeout+0x26>
		ret = MAX_WAIT;
   14b50:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   14b54:	e7f9      	b.n	14b4a <next_timeout+0x28>
   14b56:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return ret;
   14b5a:	e7f6      	b.n	14b4a <next_timeout+0x28>

00014b5c <z_abort_timeout>:
{
   14b5c:	b570      	push	{r4, r5, r6, lr}
   14b5e:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   14b60:	2300      	movs	r3, #0
	__asm__ volatile(
   14b62:	f04f 0220 	mov.w	r2, #32
   14b66:	f3ef 8611 	mrs	r6, BASEPRI
   14b6a:	f382 8812 	msr	BASEPRI_MAX, r2
   14b6e:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   14b72:	f06f 0015 	mvn.w	r0, #21
   14b76:	e004      	b.n	14b82 <z_abort_timeout+0x26>
	__asm__ volatile(
   14b78:	f386 8811 	msr	BASEPRI, r6
   14b7c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   14b80:	2301      	movs	r3, #1
   14b82:	461d      	mov	r5, r3
   14b84:	b93b      	cbnz	r3, 14b96 <z_abort_timeout+0x3a>
	return node->next != NULL;
   14b86:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   14b88:	2b00      	cmp	r3, #0
   14b8a:	d0f5      	beq.n	14b78 <z_abort_timeout+0x1c>
			remove_timeout(to);
   14b8c:	4620      	mov	r0, r4
   14b8e:	f7ff ffb1 	bl	14af4 <remove_timeout>
			ret = 0;
   14b92:	4628      	mov	r0, r5
   14b94:	e7f0      	b.n	14b78 <z_abort_timeout+0x1c>
}
   14b96:	bd70      	pop	{r4, r5, r6, pc}

00014b98 <z_get_next_timeout_expiry>:
{
   14b98:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   14b9a:	2300      	movs	r3, #0
	__asm__ volatile(
   14b9c:	f04f 0220 	mov.w	r2, #32
   14ba0:	f3ef 8411 	mrs	r4, BASEPRI
   14ba4:	f382 8812 	msr	BASEPRI_MAX, r2
   14ba8:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   14bac:	f04f 30ff 	mov.w	r0, #4294967295
   14bb0:	e006      	b.n	14bc0 <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
   14bb2:	f7ff ffb6 	bl	14b22 <next_timeout>
	__asm__ volatile(
   14bb6:	f384 8811 	msr	BASEPRI, r4
   14bba:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   14bbe:	2301      	movs	r3, #1
   14bc0:	2b00      	cmp	r3, #0
   14bc2:	d0f6      	beq.n	14bb2 <z_get_next_timeout_expiry+0x1a>
}
   14bc4:	bd10      	pop	{r4, pc}

00014bc6 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   14bc6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   14bc8:	f7f9 fb9c 	bl	e304 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   14bcc:	bd08      	pop	{r3, pc}

00014bce <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   14bce:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   14bd0:	f7f9 fb98 	bl	e304 <sys_clock_tick_get>
}
   14bd4:	bd08      	pop	{r3, pc}

00014bd6 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   14bd6:	b900      	cbnz	r0, 14bda <z_impl_k_busy_wait+0x4>
   14bd8:	4770      	bx	lr
{
   14bda:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   14bdc:	f7f4 fba8 	bl	9330 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   14be0:	bd08      	pop	{r3, pc}

00014be2 <z_reschedule_unlocked>:
{
   14be2:	b508      	push	{r3, lr}
	__asm__ volatile(
   14be4:	f04f 0320 	mov.w	r3, #32
   14be8:	f3ef 8011 	mrs	r0, BASEPRI
   14bec:	f383 8812 	msr	BASEPRI_MAX, r3
   14bf0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   14bf4:	f7ff fe1f 	bl	14836 <z_reschedule_irqlock>
}
   14bf8:	bd08      	pop	{r3, pc}

00014bfa <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   14bfa:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   14bfc:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   14bfe:	2300      	movs	r3, #0
   14c00:	6303      	str	r3, [r0, #48]	; 0x30
   14c02:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   14c06:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   14c08:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   14c0a:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   14c0c:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   14c0e:	6343      	str	r3, [r0, #52]	; 0x34
}
   14c10:	4770      	bx	lr

00014c12 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   14c12:	b510      	push	{r4, lr}
   14c14:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   14c16:	f7ff ffa1 	bl	14b5c <z_abort_timeout>

	if (inactive) {
   14c1a:	b960      	cbnz	r0, 14c36 <z_impl_k_timer_stop+0x24>
		return;
	}

	if (timer->stop_fn != NULL) {
   14c1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14c1e:	b10b      	cbz	r3, 14c24 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   14c20:	4620      	mov	r0, r4
   14c22:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   14c24:	f104 0018 	add.w	r0, r4, #24
   14c28:	f7ff fef2 	bl	14a10 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   14c2c:	b118      	cbz	r0, 14c36 <z_impl_k_timer_stop+0x24>
			z_ready_thread(pending_thread);
   14c2e:	f7ff fe57 	bl	148e0 <z_ready_thread>
			z_reschedule_unlocked();
   14c32:	f7ff ffd6 	bl	14be2 <z_reschedule_unlocked>
		}
	}
}
   14c36:	bd10      	pop	{r4, pc}

00014c38 <is_condition_met>:
	switch (event->type) {
   14c38:	7b43      	ldrb	r3, [r0, #13]
   14c3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   14c3e:	3b01      	subs	r3, #1
   14c40:	2b07      	cmp	r3, #7
   14c42:	d826      	bhi.n	14c92 <is_condition_met+0x5a>
   14c44:	e8df f003 	tbb	[pc, r3]
   14c48:	0d250414 	.word	0x0d250414
   14c4c:	1c252525 	.word	0x1c252525
		if (k_sem_count_get(event->sem) > 0U) {
   14c50:	6903      	ldr	r3, [r0, #16]
   14c52:	689b      	ldr	r3, [r3, #8]
   14c54:	b90b      	cbnz	r3, 14c5a <is_condition_met+0x22>
	return false;
   14c56:	2000      	movs	r0, #0
   14c58:	4770      	bx	lr
			*state = K_POLL_STATE_SEM_AVAILABLE;
   14c5a:	2302      	movs	r3, #2
   14c5c:	600b      	str	r3, [r1, #0]
			return true;
   14c5e:	2001      	movs	r0, #1
   14c60:	4770      	bx	lr
		if (!k_queue_is_empty(event->queue)) {
   14c62:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   14c64:	681b      	ldr	r3, [r3, #0]
   14c66:	b1b3      	cbz	r3, 14c96 <is_condition_met+0x5e>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   14c68:	2304      	movs	r3, #4
   14c6a:	600b      	str	r3, [r1, #0]
			return true;
   14c6c:	2001      	movs	r0, #1
   14c6e:	4770      	bx	lr
		if (event->signal->signaled != 0U) {
   14c70:	6903      	ldr	r3, [r0, #16]
   14c72:	689b      	ldr	r3, [r3, #8]
   14c74:	b90b      	cbnz	r3, 14c7a <is_condition_met+0x42>
	return false;
   14c76:	2000      	movs	r0, #0
   14c78:	4770      	bx	lr
			*state = K_POLL_STATE_SIGNALED;
   14c7a:	2001      	movs	r0, #1
   14c7c:	6008      	str	r0, [r1, #0]
			return true;
   14c7e:	4770      	bx	lr
		if (event->msgq->used_msgs > 0) {
   14c80:	6903      	ldr	r3, [r0, #16]
   14c82:	6a1b      	ldr	r3, [r3, #32]
   14c84:	b90b      	cbnz	r3, 14c8a <is_condition_met+0x52>
	return false;
   14c86:	2000      	movs	r0, #0
}
   14c88:	4770      	bx	lr
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   14c8a:	2310      	movs	r3, #16
   14c8c:	600b      	str	r3, [r1, #0]
			return true;
   14c8e:	2001      	movs	r0, #1
   14c90:	4770      	bx	lr
	switch (event->type) {
   14c92:	2000      	movs	r0, #0
   14c94:	4770      	bx	lr
	return false;
   14c96:	2000      	movs	r0, #0
   14c98:	4770      	bx	lr

00014c9a <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   14c9a:	b108      	cbz	r0, 14ca0 <poller_thread+0x6>
   14c9c:	3860      	subs	r0, #96	; 0x60
   14c9e:	4770      	bx	lr
}
   14ca0:	4770      	bx	lr

00014ca2 <clear_event_registration>:
	event->poller = NULL;
   14ca2:	2300      	movs	r3, #0
   14ca4:	6083      	str	r3, [r0, #8]
	switch (event->type) {
   14ca6:	7b43      	ldrb	r3, [r0, #13]
   14ca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   14cac:	2b08      	cmp	r3, #8
   14cae:	d80e      	bhi.n	14cce <clear_event_registration+0x2c>
   14cb0:	f44f 728b 	mov.w	r2, #278	; 0x116
   14cb4:	fa22 f303 	lsr.w	r3, r2, r3
   14cb8:	f013 0f01 	tst.w	r3, #1
   14cbc:	d007      	beq.n	14cce <clear_event_registration+0x2c>
	return node->next != NULL;
   14cbe:	6803      	ldr	r3, [r0, #0]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   14cc0:	b12b      	cbz	r3, 14cce <clear_event_registration+0x2c>
	sys_dnode_t *const prev = node->prev;
   14cc2:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   14cc4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   14cc6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   14cc8:	2300      	movs	r3, #0
   14cca:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   14ccc:	6043      	str	r3, [r0, #4]
}
   14cce:	4770      	bx	lr

00014cd0 <clear_event_registrations>:
{
   14cd0:	b570      	push	{r4, r5, r6, lr}
   14cd2:	4606      	mov	r6, r0
   14cd4:	4614      	mov	r4, r2
	while (num_events--) {
   14cd6:	e012      	b.n	14cfe <clear_event_registrations+0x2e>
		clear_event_registration(&events[num_events]);
   14cd8:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   14cdc:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   14ce0:	f7ff ffdf 	bl	14ca2 <clear_event_registration>
	__asm__ volatile(
   14ce4:	f384 8811 	msr	BASEPRI, r4
   14ce8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   14cec:	f04f 0320 	mov.w	r3, #32
   14cf0:	f3ef 8411 	mrs	r4, BASEPRI
   14cf4:	f383 8812 	msr	BASEPRI_MAX, r3
   14cf8:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   14cfc:	4629      	mov	r1, r5
   14cfe:	1e4d      	subs	r5, r1, #1
   14d00:	2900      	cmp	r1, #0
   14d02:	d1e9      	bne.n	14cd8 <clear_event_registrations+0x8>
}
   14d04:	bd70      	pop	{r4, r5, r6, pc}

00014d06 <add_event>:
{
   14d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14d0a:	4605      	mov	r5, r0
   14d0c:	460e      	mov	r6, r1
	return list->head == list;
   14d0e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   14d10:	4298      	cmp	r0, r3
   14d12:	d015      	beq.n	14d40 <add_event+0x3a>
   14d14:	4614      	mov	r4, r2
   14d16:	6843      	ldr	r3, [r0, #4]
	if ((pending == NULL) ||
   14d18:	b193      	cbz	r3, 14d40 <add_event+0x3a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   14d1a:	6898      	ldr	r0, [r3, #8]
   14d1c:	f7ff ffbd 	bl	14c9a <poller_thread>
   14d20:	4680      	mov	r8, r0
   14d22:	4620      	mov	r0, r4
   14d24:	f7ff ffb9 	bl	14c9a <poller_thread>
   14d28:	4607      	mov	r7, r0
   14d2a:	4601      	mov	r1, r0
   14d2c:	4640      	mov	r0, r8
   14d2e:	f7ff fd5e 	bl	147ee <z_sched_prio_cmp>
	if ((pending == NULL) ||
   14d32:	2800      	cmp	r0, #0
   14d34:	dc04      	bgt.n	14d40 <add_event+0x3a>
	return list->head == list;
   14d36:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14d38:	42a5      	cmp	r5, r4
   14d3a:	d10f      	bne.n	14d5c <add_event+0x56>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   14d3c:	2400      	movs	r4, #0
   14d3e:	e00d      	b.n	14d5c <add_event+0x56>
	sys_dnode_t *const tail = list->tail;
   14d40:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   14d42:	6035      	str	r5, [r6, #0]
	node->prev = tail;
   14d44:	6073      	str	r3, [r6, #4]
	tail->next = node;
   14d46:	601e      	str	r6, [r3, #0]
	list->tail = node;
   14d48:	606e      	str	r6, [r5, #4]
}
   14d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	sys_dnode_t *const prev = successor->prev;
   14d4e:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   14d50:	6073      	str	r3, [r6, #4]
	node->next = successor;
   14d52:	6034      	str	r4, [r6, #0]
	prev->next = node;
   14d54:	601e      	str	r6, [r3, #0]
	successor->prev = node;
   14d56:	6066      	str	r6, [r4, #4]
			return;
   14d58:	e7f7      	b.n	14d4a <add_event+0x44>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   14d5a:	2400      	movs	r4, #0
   14d5c:	b19c      	cbz	r4, 14d86 <add_event+0x80>
		if (z_sched_prio_cmp(poller_thread(poller),
   14d5e:	68a0      	ldr	r0, [r4, #8]
   14d60:	f7ff ff9b 	bl	14c9a <poller_thread>
   14d64:	4601      	mov	r1, r0
   14d66:	4638      	mov	r0, r7
   14d68:	f7ff fd41 	bl	147ee <z_sched_prio_cmp>
   14d6c:	2800      	cmp	r0, #0
   14d6e:	dcee      	bgt.n	14d4e <add_event+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   14d70:	4622      	mov	r2, r4
	return (node == list->tail) ? NULL : node->next;
   14d72:	686b      	ldr	r3, [r5, #4]
   14d74:	429c      	cmp	r4, r3
   14d76:	d0f0      	beq.n	14d5a <add_event+0x54>
   14d78:	6824      	ldr	r4, [r4, #0]
   14d7a:	2c00      	cmp	r4, #0
   14d7c:	d0ee      	beq.n	14d5c <add_event+0x56>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   14d7e:	2a00      	cmp	r2, #0
   14d80:	d1ec      	bne.n	14d5c <add_event+0x56>
   14d82:	4614      	mov	r4, r2
   14d84:	e7ea      	b.n	14d5c <add_event+0x56>
	sys_dnode_t *const tail = list->tail;
   14d86:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   14d88:	6035      	str	r5, [r6, #0]
	node->prev = tail;
   14d8a:	6073      	str	r3, [r6, #4]
	tail->next = node;
   14d8c:	601e      	str	r6, [r3, #0]
	list->tail = node;
   14d8e:	606e      	str	r6, [r5, #4]
}
   14d90:	e7db      	b.n	14d4a <add_event+0x44>

00014d92 <register_event>:
{
   14d92:	b538      	push	{r3, r4, r5, lr}
   14d94:	4604      	mov	r4, r0
   14d96:	460d      	mov	r5, r1
	switch (event->type) {
   14d98:	7b43      	ldrb	r3, [r0, #13]
   14d9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   14d9e:	3b01      	subs	r3, #1
   14da0:	2b07      	cmp	r3, #7
   14da2:	d80b      	bhi.n	14dbc <register_event+0x2a>
   14da4:	e8df f003 	tbb	[pc, r3]
   14da8:	0c0a0413 	.word	0x0c0a0413
   14dac:	190a0a0a 	.word	0x190a0a0a
		add_event(&event->sem->poll_events, event, poller);
   14db0:	6900      	ldr	r0, [r0, #16]
   14db2:	460a      	mov	r2, r1
   14db4:	4621      	mov	r1, r4
   14db6:	3010      	adds	r0, #16
   14db8:	f7ff ffa5 	bl	14d06 <add_event>
	event->poller = poller;
   14dbc:	60a5      	str	r5, [r4, #8]
}
   14dbe:	bd38      	pop	{r3, r4, r5, pc}
		add_event(&event->queue->poll_events, event, poller);
   14dc0:	6900      	ldr	r0, [r0, #16]
   14dc2:	460a      	mov	r2, r1
   14dc4:	4621      	mov	r1, r4
   14dc6:	3010      	adds	r0, #16
   14dc8:	f7ff ff9d 	bl	14d06 <add_event>
		break;
   14dcc:	e7f6      	b.n	14dbc <register_event+0x2a>
		add_event(&event->signal->poll_events, event, poller);
   14dce:	460a      	mov	r2, r1
   14dd0:	4601      	mov	r1, r0
   14dd2:	6900      	ldr	r0, [r0, #16]
   14dd4:	f7ff ff97 	bl	14d06 <add_event>
		break;
   14dd8:	e7f0      	b.n	14dbc <register_event+0x2a>
		add_event(&event->msgq->poll_events, event, poller);
   14dda:	6900      	ldr	r0, [r0, #16]
   14ddc:	460a      	mov	r2, r1
   14dde:	4621      	mov	r1, r4
   14de0:	3024      	adds	r0, #36	; 0x24
   14de2:	f7ff ff90 	bl	14d06 <add_event>
		break;
   14de6:	e7e9      	b.n	14dbc <register_event+0x2a>

00014de8 <register_events>:
{
   14de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14dec:	b083      	sub	sp, #12
   14dee:	4680      	mov	r8, r0
   14df0:	460f      	mov	r7, r1
   14df2:	4691      	mov	r9, r2
   14df4:	469a      	mov	sl, r3
	for (int ii = 0; ii < num_events; ii++) {
   14df6:	2500      	movs	r5, #0
	int events_registered = 0;
   14df8:	46ab      	mov	fp, r5
	for (int ii = 0; ii < num_events; ii++) {
   14dfa:	e00a      	b.n	14e12 <register_events+0x2a>
		} else if (!just_check && poller->is_polling) {
   14dfc:	f1ba 0f00 	cmp.w	sl, #0
   14e00:	d102      	bne.n	14e08 <register_events+0x20>
   14e02:	f899 3000 	ldrb.w	r3, [r9]
   14e06:	bb2b      	cbnz	r3, 14e54 <register_events+0x6c>
	__asm__ volatile(
   14e08:	f386 8811 	msr	BASEPRI, r6
   14e0c:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   14e10:	3501      	adds	r5, #1
   14e12:	42bd      	cmp	r5, r7
   14e14:	da25      	bge.n	14e62 <register_events+0x7a>
	__asm__ volatile(
   14e16:	f04f 0320 	mov.w	r3, #32
   14e1a:	f3ef 8611 	mrs	r6, BASEPRI
   14e1e:	f383 8812 	msr	BASEPRI_MAX, r3
   14e22:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
   14e26:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   14e2a:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   14e2e:	a901      	add	r1, sp, #4
   14e30:	4620      	mov	r0, r4
   14e32:	f7ff ff01 	bl	14c38 <is_condition_met>
   14e36:	2800      	cmp	r0, #0
   14e38:	d0e0      	beq.n	14dfc <register_events+0x14>
	event->poller = NULL;
   14e3a:	2100      	movs	r1, #0
   14e3c:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   14e3e:	68e3      	ldr	r3, [r4, #12]
   14e40:	f3c3 3286 	ubfx	r2, r3, #14, #7
   14e44:	9801      	ldr	r0, [sp, #4]
   14e46:	4302      	orrs	r2, r0
   14e48:	f362 3394 	bfi	r3, r2, #14, #7
   14e4c:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   14e4e:	f889 1000 	strb.w	r1, [r9]
   14e52:	e7d9      	b.n	14e08 <register_events+0x20>
			register_event(&events[ii], poller);
   14e54:	4649      	mov	r1, r9
   14e56:	4620      	mov	r0, r4
   14e58:	f7ff ff9b 	bl	14d92 <register_event>
			events_registered += 1;
   14e5c:	f10b 0b01 	add.w	fp, fp, #1
   14e60:	e7d2      	b.n	14e08 <register_events+0x20>
}
   14e62:	4658      	mov	r0, fp
   14e64:	b003      	add	sp, #12
   14e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00014e6a <signal_poller>:
{
   14e6a:	b538      	push	{r3, r4, r5, lr}
   14e6c:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   14e6e:	6880      	ldr	r0, [r0, #8]
   14e70:	f7ff ff13 	bl	14c9a <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   14e74:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   14e76:	f013 0f02 	tst.w	r3, #2
   14e7a:	d025      	beq.n	14ec8 <signal_poller+0x5e>
   14e7c:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   14e7e:	6a82      	ldr	r2, [r0, #40]	; 0x28
   14e80:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
   14e82:	f1b3 3fff 	cmp.w	r3, #4294967295
   14e86:	bf08      	it	eq
   14e88:	f112 0f02 	cmneq.w	r2, #2
   14e8c:	d01e      	beq.n	14ecc <signal_poller+0x62>
	z_unpend_thread(thread);
   14e8e:	f7ff fd02 	bl	14896 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   14e92:	2d08      	cmp	r5, #8
   14e94:	d00a      	beq.n	14eac <signal_poller+0x42>
   14e96:	2300      	movs	r3, #0
   14e98:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   14e9c:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   14e9e:	f013 0f1f 	tst.w	r3, #31
   14ea2:	d108      	bne.n	14eb6 <signal_poller+0x4c>
	return node->next != NULL;
   14ea4:	69a3      	ldr	r3, [r4, #24]
   14ea6:	b123      	cbz	r3, 14eb2 <signal_poller+0x48>
   14ea8:	2300      	movs	r3, #0
   14eaa:	e005      	b.n	14eb8 <signal_poller+0x4e>
   14eac:	f06f 0303 	mvn.w	r3, #3
   14eb0:	e7f2      	b.n	14e98 <signal_poller+0x2e>
   14eb2:	2301      	movs	r3, #1
   14eb4:	e000      	b.n	14eb8 <signal_poller+0x4e>
   14eb6:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   14eb8:	b90b      	cbnz	r3, 14ebe <signal_poller+0x54>
		return 0;
   14eba:	2000      	movs	r0, #0
   14ebc:	e005      	b.n	14eca <signal_poller+0x60>
	z_ready_thread(thread);
   14ebe:	4620      	mov	r0, r4
   14ec0:	f7ff fd0e 	bl	148e0 <z_ready_thread>
	return 0;
   14ec4:	2000      	movs	r0, #0
   14ec6:	e000      	b.n	14eca <signal_poller+0x60>
		return 0;
   14ec8:	2000      	movs	r0, #0
}
   14eca:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   14ecc:	f06f 000a 	mvn.w	r0, #10
   14ed0:	e7fb      	b.n	14eca <signal_poller+0x60>

00014ed2 <signal_triggered_work>:

extern int z_work_submit_to_queue(struct k_work_q *queue,
			 struct k_work *work);

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   14ed2:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   14ed4:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   14ed6:	7823      	ldrb	r3, [r4, #0]
   14ed8:	b173      	cbz	r3, 14ef8 <signal_triggered_work+0x26>
   14eda:	f854 5c04 	ldr.w	r5, [r4, #-4]
   14ede:	b15d      	cbz	r5, 14ef8 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   14ee0:	f1a4 0614 	sub.w	r6, r4, #20
   14ee4:	f104 0014 	add.w	r0, r4, #20
   14ee8:	f7ff fe38 	bl	14b5c <z_abort_timeout>
		twork->poll_result = 0;
   14eec:	2300      	movs	r3, #0
   14eee:	62e3      	str	r3, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   14ef0:	4631      	mov	r1, r6
   14ef2:	4628      	mov	r0, r5
   14ef4:	f000 f8a5 	bl	15042 <z_work_submit_to_queue>
	}

	return 0;
}
   14ef8:	2000      	movs	r0, #0
   14efa:	bd70      	pop	{r4, r5, r6, pc}

00014efc <signal_poll_event>:
{
   14efc:	b570      	push	{r4, r5, r6, lr}
   14efe:	4604      	mov	r4, r0
   14f00:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   14f02:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   14f04:	b1d6      	cbz	r6, 14f3c <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   14f06:	7873      	ldrb	r3, [r6, #1]
   14f08:	2b01      	cmp	r3, #1
   14f0a:	d00d      	beq.n	14f28 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   14f0c:	2b02      	cmp	r3, #2
   14f0e:	d012      	beq.n	14f36 <signal_poll_event+0x3a>
		poller->is_polling = false;
   14f10:	2000      	movs	r0, #0
   14f12:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   14f14:	2300      	movs	r3, #0
   14f16:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   14f18:	68e3      	ldr	r3, [r4, #12]
   14f1a:	f3c3 3286 	ubfx	r2, r3, #14, #7
   14f1e:	432a      	orrs	r2, r5
   14f20:	f362 3394 	bfi	r3, r2, #14, #7
   14f24:	60e3      	str	r3, [r4, #12]
}
   14f26:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   14f28:	f7ff ff9f 	bl	14e6a <signal_poller>
		poller->is_polling = false;
   14f2c:	2300      	movs	r3, #0
   14f2e:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   14f30:	4298      	cmp	r0, r3
   14f32:	daef      	bge.n	14f14 <signal_poll_event+0x18>
   14f34:	e7f7      	b.n	14f26 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   14f36:	f7ff ffcc 	bl	14ed2 <signal_triggered_work>
   14f3a:	e7f7      	b.n	14f2c <signal_poll_event+0x30>
	int retcode = 0;
   14f3c:	2000      	movs	r0, #0
   14f3e:	e7e9      	b.n	14f14 <signal_poll_event+0x18>

00014f40 <k_poll_event_init>:
{
   14f40:	b410      	push	{r4}
	event->poller = NULL;
   14f42:	2400      	movs	r4, #0
   14f44:	6084      	str	r4, [r0, #8]
	event->type = type;
   14f46:	f890 c00d 	ldrb.w	ip, [r0, #13]
   14f4a:	f361 0c05 	bfi	ip, r1, #0, #6
   14f4e:	f880 c00d 	strb.w	ip, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
   14f52:	68c1      	ldr	r1, [r0, #12]
   14f54:	f364 3194 	bfi	r1, r4, #14, #7
   14f58:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
   14f5a:	7b81      	ldrb	r1, [r0, #14]
   14f5c:	f362 1145 	bfi	r1, r2, #5, #1
   14f60:	7381      	strb	r1, [r0, #14]
	event->unused = 0U;
   14f62:	89c2      	ldrh	r2, [r0, #14]
   14f64:	f364 128f 	bfi	r2, r4, #6, #10
   14f68:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   14f6a:	6103      	str	r3, [r0, #16]
}
   14f6c:	bc10      	pop	{r4}
   14f6e:	4770      	bx	lr

00014f70 <z_handle_obj_poll_events>:
{
   14f70:	b508      	push	{r3, lr}
   14f72:	4603      	mov	r3, r0
	return list->head == list;
   14f74:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   14f76:	4283      	cmp	r3, r0
   14f78:	d008      	beq.n	14f8c <z_handle_obj_poll_events+0x1c>
	sys_dnode_t *const prev = node->prev;
   14f7a:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   14f7c:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   14f7e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   14f80:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   14f82:	2300      	movs	r3, #0
   14f84:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   14f86:	6043      	str	r3, [r0, #4]
		(void) signal_poll_event(poll_event, state);
   14f88:	f7ff ffb8 	bl	14efc <signal_poll_event>
}
   14f8c:	bd08      	pop	{r3, pc}

00014f8e <z_impl_k_poll_signal_init>:
	list->head = (sys_dnode_t *)list;
   14f8e:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   14f90:	6040      	str	r0, [r0, #4]
	sig->signaled = 0U;
   14f92:	2300      	movs	r3, #0
   14f94:	6083      	str	r3, [r0, #8]
}
   14f96:	4770      	bx	lr

00014f98 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   14f98:	2300      	movs	r3, #0
   14f9a:	6083      	str	r3, [r0, #8]
}
   14f9c:	4770      	bx	lr

00014f9e <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
   14f9e:	6883      	ldr	r3, [r0, #8]
   14fa0:	600b      	str	r3, [r1, #0]
	*result = sig->result;
   14fa2:	68c3      	ldr	r3, [r0, #12]
   14fa4:	6013      	str	r3, [r2, #0]
}
   14fa6:	4770      	bx	lr

00014fa8 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   14fa8:	460b      	mov	r3, r1
   14faa:	b139      	cbz	r1, 14fbc <sys_slist_remove+0x14>
	return node->next;
   14fac:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   14fae:	6019      	str	r1, [r3, #0]
	return list->tail;
   14fb0:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   14fb2:	428a      	cmp	r2, r1
   14fb4:	d009      	beq.n	14fca <sys_slist_remove+0x22>
	parent->next = child;
   14fb6:	2300      	movs	r3, #0
   14fb8:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   14fba:	4770      	bx	lr
	return node->next;
   14fbc:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   14fbe:	6003      	str	r3, [r0, #0]
	return list->tail;
   14fc0:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   14fc2:	428a      	cmp	r2, r1
   14fc4:	d1f7      	bne.n	14fb6 <sys_slist_remove+0xe>
	list->tail = node;
   14fc6:	6043      	str	r3, [r0, #4]
}
   14fc8:	e7f5      	b.n	14fb6 <sys_slist_remove+0xe>
	list->tail = node;
   14fca:	6043      	str	r3, [r0, #4]
}
   14fcc:	e7f3      	b.n	14fb6 <sys_slist_remove+0xe>

00014fce <notify_queue_locked>:
	if (queue != NULL) {
   14fce:	b130      	cbz	r0, 14fde <notify_queue_locked+0x10>
{
   14fd0:	b508      	push	{r3, lr}
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   14fd2:	2200      	movs	r2, #0
   14fd4:	4611      	mov	r1, r2
   14fd6:	30c0      	adds	r0, #192	; 0xc0
   14fd8:	f7ff fd5e 	bl	14a98 <z_sched_wake>
}
   14fdc:	bd08      	pop	{r3, pc}
	bool rv = false;
   14fde:	2000      	movs	r0, #0
}
   14fe0:	4770      	bx	lr

00014fe2 <submit_to_queue_locked>:
{
   14fe2:	b570      	push	{r4, r5, r6, lr}
   14fe4:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   14fe6:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   14fe8:	f013 0f02 	tst.w	r3, #2
   14fec:	d122      	bne.n	15034 <submit_to_queue_locked+0x52>
   14fee:	4604      	mov	r4, r0
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   14ff0:	f013 0f04 	tst.w	r3, #4
   14ff4:	d123      	bne.n	1503e <submit_to_queue_locked+0x5c>
		if (*queuep == NULL) {
   14ff6:	680b      	ldr	r3, [r1, #0]
   14ff8:	b1ab      	cbz	r3, 15026 <submit_to_queue_locked+0x44>
	return (*flagp & BIT(bit)) != 0U;
   14ffa:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   14ffc:	f013 0f01 	tst.w	r3, #1
   15000:	d014      	beq.n	1502c <submit_to_queue_locked+0x4a>
			*queuep = work->queue;
   15002:	68a3      	ldr	r3, [r4, #8]
   15004:	602b      	str	r3, [r5, #0]
			ret = 2;
   15006:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
   15008:	4621      	mov	r1, r4
   1500a:	6828      	ldr	r0, [r5, #0]
   1500c:	f7f9 faf4 	bl	e5f8 <queue_submit_locked>
		if (rc < 0) {
   15010:	2800      	cmp	r0, #0
   15012:	db11      	blt.n	15038 <submit_to_queue_locked+0x56>
	*flagp |= BIT(bit);
   15014:	68e3      	ldr	r3, [r4, #12]
   15016:	f043 0304 	orr.w	r3, r3, #4
   1501a:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1501c:	682b      	ldr	r3, [r5, #0]
   1501e:	60a3      	str	r3, [r4, #8]
	if (ret <= 0) {
   15020:	b136      	cbz	r6, 15030 <submit_to_queue_locked+0x4e>
   15022:	4630      	mov	r0, r6
	return ret;
   15024:	e00a      	b.n	1503c <submit_to_queue_locked+0x5a>
			*queuep = work->queue;
   15026:	6883      	ldr	r3, [r0, #8]
   15028:	600b      	str	r3, [r1, #0]
   1502a:	e7e6      	b.n	14ffa <submit_to_queue_locked+0x18>
		ret = 1;
   1502c:	2601      	movs	r6, #1
   1502e:	e7eb      	b.n	15008 <submit_to_queue_locked+0x26>
   15030:	4630      	mov	r0, r6
   15032:	e001      	b.n	15038 <submit_to_queue_locked+0x56>
		ret = -EBUSY;
   15034:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   15038:	2300      	movs	r3, #0
   1503a:	602b      	str	r3, [r5, #0]
}
   1503c:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   1503e:	2000      	movs	r0, #0
   15040:	e7fa      	b.n	15038 <submit_to_queue_locked+0x56>

00015042 <z_work_submit_to_queue>:
{
   15042:	b510      	push	{r4, lr}
   15044:	b082      	sub	sp, #8
   15046:	9001      	str	r0, [sp, #4]
   15048:	4608      	mov	r0, r1
   1504a:	f04f 0320 	mov.w	r3, #32
   1504e:	f3ef 8411 	mrs	r4, BASEPRI
   15052:	f383 8812 	msr	BASEPRI_MAX, r3
   15056:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1505a:	a901      	add	r1, sp, #4
   1505c:	f7ff ffc1 	bl	14fe2 <submit_to_queue_locked>
	__asm__ volatile(
   15060:	f384 8811 	msr	BASEPRI, r4
   15064:	f3bf 8f6f 	isb	sy
}
   15068:	b002      	add	sp, #8
   1506a:	bd10      	pop	{r4, pc}

0001506c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1506c:	4770      	bx	lr
	...
